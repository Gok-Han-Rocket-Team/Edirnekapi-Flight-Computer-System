
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08012688  08012688  00022688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c98  08012c98  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012c98  08012c98  00022c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ca0  08012ca0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ca0  08012ca0  00022ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ca4  08012ca4  00022ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012ca8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  200001e8  08012e90  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  08012e90  00031234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001860c  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae0  00000000  00000000  00048824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0004c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0004d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277ee  00000000  00000000  0004e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9f3  00000000  00000000  00075cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e252f  00000000  00000000  000906c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064d0  00000000  00000000  00172c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801266c 	.word	0x0801266c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801266c 	.word	0x0801266c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_frsub>:
 8000ce8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	e002      	b.n	8000cf4 <__addsf3>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fsub>:
 8000cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cf4 <__addsf3>:
 8000cf4:	0042      	lsls	r2, r0, #1
 8000cf6:	bf1f      	itttt	ne
 8000cf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cfc:	ea92 0f03 	teqne	r2, r3
 8000d00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d08:	d06a      	beq.n	8000de0 <__addsf3+0xec>
 8000d0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d12:	bfc1      	itttt	gt
 8000d14:	18d2      	addgt	r2, r2, r3
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	4048      	eorgt	r0, r1
 8000d1a:	4041      	eorgt	r1, r0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	2b19      	cmp	r3, #25
 8000d22:	bf88      	it	hi
 8000d24:	4770      	bxhi	lr
 8000d26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4240      	negne	r0, r0
 8000d36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d42:	bf18      	it	ne
 8000d44:	4249      	negne	r1, r1
 8000d46:	ea92 0f03 	teq	r2, r3
 8000d4a:	d03f      	beq.n	8000dcc <__addsf3+0xd8>
 8000d4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d50:	fa41 fc03 	asr.w	ip, r1, r3
 8000d54:	eb10 000c 	adds.w	r0, r0, ip
 8000d58:	f1c3 0320 	rsb	r3, r3, #32
 8000d5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__addsf3+0x78>
 8000d66:	4249      	negs	r1, r1
 8000d68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d70:	d313      	bcc.n	8000d9a <__addsf3+0xa6>
 8000d72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d76:	d306      	bcc.n	8000d86 <__addsf3+0x92>
 8000d78:	0840      	lsrs	r0, r0, #1
 8000d7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7e:	f102 0201 	add.w	r2, r2, #1
 8000d82:	2afe      	cmp	r2, #254	; 0xfe
 8000d84:	d251      	bcs.n	8000e2a <__addsf3+0x136>
 8000d86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	ea40 0003 	orr.w	r0, r0, r3
 8000d98:	4770      	bx	lr
 8000d9a:	0049      	lsls	r1, r1, #1
 8000d9c:	eb40 0000 	adc.w	r0, r0, r0
 8000da0:	3a01      	subs	r2, #1
 8000da2:	bf28      	it	cs
 8000da4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000da8:	d2ed      	bcs.n	8000d86 <__addsf3+0x92>
 8000daa:	fab0 fc80 	clz	ip, r0
 8000dae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000db2:	ebb2 020c 	subs.w	r2, r2, ip
 8000db6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dba:	bfaa      	itet	ge
 8000dbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dc0:	4252      	neglt	r2, r2
 8000dc2:	4318      	orrge	r0, r3
 8000dc4:	bfbc      	itt	lt
 8000dc6:	40d0      	lsrlt	r0, r2
 8000dc8:	4318      	orrlt	r0, r3
 8000dca:	4770      	bx	lr
 8000dcc:	f092 0f00 	teq	r2, #0
 8000dd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dd4:	bf06      	itte	eq
 8000dd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dda:	3201      	addeq	r2, #1
 8000ddc:	3b01      	subne	r3, #1
 8000dde:	e7b5      	b.n	8000d4c <__addsf3+0x58>
 8000de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de8:	bf18      	it	ne
 8000dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dee:	d021      	beq.n	8000e34 <__addsf3+0x140>
 8000df0:	ea92 0f03 	teq	r2, r3
 8000df4:	d004      	beq.n	8000e00 <__addsf3+0x10c>
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	4770      	bx	lr
 8000e00:	ea90 0f01 	teq	r0, r1
 8000e04:	bf1c      	itt	ne
 8000e06:	2000      	movne	r0, #0
 8000e08:	4770      	bxne	lr
 8000e0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e0e:	d104      	bne.n	8000e1a <__addsf3+0x126>
 8000e10:	0040      	lsls	r0, r0, #1
 8000e12:	bf28      	it	cs
 8000e14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	4770      	bx	lr
 8000e1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e1e:	bf3c      	itt	cc
 8000e20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bxcc	lr
 8000e26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	4770      	bx	lr
 8000e34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e38:	bf16      	itet	ne
 8000e3a:	4608      	movne	r0, r1
 8000e3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e40:	4601      	movne	r1, r0
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	bf06      	itte	eq
 8000e46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e4a:	ea90 0f01 	teqeq	r0, r1
 8000e4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_ui2f>:
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e004      	b.n	8000e64 <__aeabi_i2f+0x8>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_i2f>:
 8000e5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e60:	bf48      	it	mi
 8000e62:	4240      	negmi	r0, r0
 8000e64:	ea5f 0c00 	movs.w	ip, r0
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e70:	4601      	mov	r1, r0
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	e01c      	b.n	8000eb2 <__aeabi_l2f+0x2a>

08000e78 <__aeabi_ul2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e00a      	b.n	8000e9c <__aeabi_l2f+0x14>
 8000e86:	bf00      	nop

08000e88 <__aeabi_l2f>:
 8000e88:	ea50 0201 	orrs.w	r2, r0, r1
 8000e8c:	bf08      	it	eq
 8000e8e:	4770      	bxeq	lr
 8000e90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e94:	d502      	bpl.n	8000e9c <__aeabi_l2f+0x14>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	ea5f 0c01 	movs.w	ip, r1
 8000ea0:	bf02      	ittt	eq
 8000ea2:	4684      	moveq	ip, r0
 8000ea4:	4601      	moveq	r1, r0
 8000ea6:	2000      	moveq	r0, #0
 8000ea8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000eac:	bf08      	it	eq
 8000eae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eb6:	fabc f28c 	clz	r2, ip
 8000eba:	3a08      	subs	r2, #8
 8000ebc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ec0:	db10      	blt.n	8000ee4 <__aeabi_l2f+0x5c>
 8000ec2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ed4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f102 0220 	add.w	r2, r2, #32
 8000ee8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_ldivmod>:
 8000f04:	b97b      	cbnz	r3, 8000f26 <__aeabi_ldivmod+0x22>
 8000f06:	b972      	cbnz	r2, 8000f26 <__aeabi_ldivmod+0x22>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bfbe      	ittt	lt
 8000f0c:	2000      	movlt	r0, #0
 8000f0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f12:	e006      	blt.n	8000f22 <__aeabi_ldivmod+0x1e>
 8000f14:	bf08      	it	eq
 8000f16:	2800      	cmpeq	r0, #0
 8000f18:	bf1c      	itt	ne
 8000f1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f22:	f000 b9f5 	b.w	8001310 <__aeabi_idiv0>
 8000f26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f2e:	2900      	cmp	r1, #0
 8000f30:	db09      	blt.n	8000f46 <__aeabi_ldivmod+0x42>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db1a      	blt.n	8000f6c <__aeabi_ldivmod+0x68>
 8000f36:	f000 f883 	bl	8001040 <__udivmoddi4>
 8000f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db1b      	blt.n	8000f88 <__aeabi_ldivmod+0x84>
 8000f50:	f000 f876 	bl	8001040 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	4252      	negs	r2, r2
 8000f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6a:	4770      	bx	lr
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	f000 f865 	bl	8001040 <__udivmoddi4>
 8000f76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7e:	b004      	add	sp, #16
 8000f80:	4240      	negs	r0, r0
 8000f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f86:	4770      	bx	lr
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	f000 f857 	bl	8001040 <__udivmoddi4>
 8000f92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_uldivmod>:
 8000fa4:	b953      	cbnz	r3, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa6:	b94a      	cbnz	r2, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	bf08      	it	eq
 8000fac:	2800      	cmpeq	r0, #0
 8000fae:	bf1c      	itt	ne
 8000fb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	f000 b9aa 	b.w	8001310 <__aeabi_idiv0>
 8000fbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fc4:	f000 f83c 	bl	8001040 <__udivmoddi4>
 8000fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_d2lz>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	f7ff fdad 	bl	8000b3c <__aeabi_dcmplt>
 8000fe2:	b928      	cbnz	r0, 8000ff0 <__aeabi_d2lz+0x1c>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fec:	f000 b80a 	b.w	8001004 <__aeabi_d2ulz>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ff6:	f000 f805 	bl	8001004 <__aeabi_d2ulz>
 8000ffa:	4240      	negs	r0, r0
 8000ffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop

08001004 <__aeabi_d2ulz>:
 8001004:	b5d0      	push	{r4, r6, r7, lr}
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__aeabi_d2ulz+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	4606      	mov	r6, r0
 800100c:	460f      	mov	r7, r1
 800100e:	f7ff fb23 	bl	8000658 <__aeabi_dmul>
 8001012:	f7ff fdf9 	bl	8000c08 <__aeabi_d2uiz>
 8001016:	4604      	mov	r4, r0
 8001018:	f7ff faa4 	bl	8000564 <__aeabi_ui2d>
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <__aeabi_d2ulz+0x38>)
 800101e:	2200      	movs	r2, #0
 8001020:	f7ff fb1a 	bl	8000658 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4630      	mov	r0, r6
 800102a:	4639      	mov	r1, r7
 800102c:	f7ff f95c 	bl	80002e8 <__aeabi_dsub>
 8001030:	f7ff fdea 	bl	8000c08 <__aeabi_d2uiz>
 8001034:	4621      	mov	r1, r4
 8001036:	bdd0      	pop	{r4, r6, r7, pc}
 8001038:	3df00000 	.word	0x3df00000
 800103c:	41f00000 	.word	0x41f00000

08001040 <__udivmoddi4>:
 8001040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	9d08      	ldr	r5, [sp, #32]
 8001046:	4604      	mov	r4, r0
 8001048:	468e      	mov	lr, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d14d      	bne.n	80010ea <__udivmoddi4+0xaa>
 800104e:	428a      	cmp	r2, r1
 8001050:	4694      	mov	ip, r2
 8001052:	d969      	bls.n	8001128 <__udivmoddi4+0xe8>
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b152      	cbz	r2, 8001070 <__udivmoddi4+0x30>
 800105a:	fa01 f302 	lsl.w	r3, r1, r2
 800105e:	f1c2 0120 	rsb	r1, r2, #32
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	fa0c fc02 	lsl.w	ip, ip, r2
 800106a:	ea41 0e03 	orr.w	lr, r1, r3
 800106e:	4094      	lsls	r4, r2
 8001070:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001074:	0c21      	lsrs	r1, r4, #16
 8001076:	fbbe f6f8 	udiv	r6, lr, r8
 800107a:	fa1f f78c 	uxth.w	r7, ip
 800107e:	fb08 e316 	mls	r3, r8, r6, lr
 8001082:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001086:	fb06 f107 	mul.w	r1, r6, r7
 800108a:	4299      	cmp	r1, r3
 800108c:	d90a      	bls.n	80010a4 <__udivmoddi4+0x64>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f106 30ff 	add.w	r0, r6, #4294967295
 8001096:	f080 811f 	bcs.w	80012d8 <__udivmoddi4+0x298>
 800109a:	4299      	cmp	r1, r3
 800109c:	f240 811c 	bls.w	80012d8 <__udivmoddi4+0x298>
 80010a0:	3e02      	subs	r6, #2
 80010a2:	4463      	add	r3, ip
 80010a4:	1a5b      	subs	r3, r3, r1
 80010a6:	b2a4      	uxth	r4, r4
 80010a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ac:	fb08 3310 	mls	r3, r8, r0, r3
 80010b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b4:	fb00 f707 	mul.w	r7, r0, r7
 80010b8:	42a7      	cmp	r7, r4
 80010ba:	d90a      	bls.n	80010d2 <__udivmoddi4+0x92>
 80010bc:	eb1c 0404 	adds.w	r4, ip, r4
 80010c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c4:	f080 810a 	bcs.w	80012dc <__udivmoddi4+0x29c>
 80010c8:	42a7      	cmp	r7, r4
 80010ca:	f240 8107 	bls.w	80012dc <__udivmoddi4+0x29c>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010d6:	1be4      	subs	r4, r4, r7
 80010d8:	2600      	movs	r6, #0
 80010da:	b11d      	cbz	r5, 80010e4 <__udivmoddi4+0xa4>
 80010dc:	40d4      	lsrs	r4, r2
 80010de:	2300      	movs	r3, #0
 80010e0:	e9c5 4300 	strd	r4, r3, [r5]
 80010e4:	4631      	mov	r1, r6
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d909      	bls.n	8001102 <__udivmoddi4+0xc2>
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	f000 80ef 	beq.w	80012d2 <__udivmoddi4+0x292>
 80010f4:	2600      	movs	r6, #0
 80010f6:	e9c5 0100 	strd	r0, r1, [r5]
 80010fa:	4630      	mov	r0, r6
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	fab3 f683 	clz	r6, r3
 8001106:	2e00      	cmp	r6, #0
 8001108:	d14a      	bne.n	80011a0 <__udivmoddi4+0x160>
 800110a:	428b      	cmp	r3, r1
 800110c:	d302      	bcc.n	8001114 <__udivmoddi4+0xd4>
 800110e:	4282      	cmp	r2, r0
 8001110:	f200 80f9 	bhi.w	8001306 <__udivmoddi4+0x2c6>
 8001114:	1a84      	subs	r4, r0, r2
 8001116:	eb61 0303 	sbc.w	r3, r1, r3
 800111a:	2001      	movs	r0, #1
 800111c:	469e      	mov	lr, r3
 800111e:	2d00      	cmp	r5, #0
 8001120:	d0e0      	beq.n	80010e4 <__udivmoddi4+0xa4>
 8001122:	e9c5 4e00 	strd	r4, lr, [r5]
 8001126:	e7dd      	b.n	80010e4 <__udivmoddi4+0xa4>
 8001128:	b902      	cbnz	r2, 800112c <__udivmoddi4+0xec>
 800112a:	deff      	udf	#255	; 0xff
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	2a00      	cmp	r2, #0
 8001132:	f040 8092 	bne.w	800125a <__udivmoddi4+0x21a>
 8001136:	eba1 010c 	sub.w	r1, r1, ip
 800113a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	2601      	movs	r6, #1
 8001144:	0c20      	lsrs	r0, r4, #16
 8001146:	fbb1 f3f7 	udiv	r3, r1, r7
 800114a:	fb07 1113 	mls	r1, r7, r3, r1
 800114e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001152:	fb0e f003 	mul.w	r0, lr, r3
 8001156:	4288      	cmp	r0, r1
 8001158:	d908      	bls.n	800116c <__udivmoddi4+0x12c>
 800115a:	eb1c 0101 	adds.w	r1, ip, r1
 800115e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x12a>
 8001164:	4288      	cmp	r0, r1
 8001166:	f200 80cb 	bhi.w	8001300 <__udivmoddi4+0x2c0>
 800116a:	4643      	mov	r3, r8
 800116c:	1a09      	subs	r1, r1, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb1 f0f7 	udiv	r0, r1, r7
 8001174:	fb07 1110 	mls	r1, r7, r0, r1
 8001178:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800117c:	fb0e fe00 	mul.w	lr, lr, r0
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x156>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f100 31ff 	add.w	r1, r0, #4294967295
 800118c:	d202      	bcs.n	8001194 <__udivmoddi4+0x154>
 800118e:	45a6      	cmp	lr, r4
 8001190:	f200 80bb 	bhi.w	800130a <__udivmoddi4+0x2ca>
 8001194:	4608      	mov	r0, r1
 8001196:	eba4 040e 	sub.w	r4, r4, lr
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	e79c      	b.n	80010da <__udivmoddi4+0x9a>
 80011a0:	f1c6 0720 	rsb	r7, r6, #32
 80011a4:	40b3      	lsls	r3, r6
 80011a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ae:	fa20 f407 	lsr.w	r4, r0, r7
 80011b2:	fa01 f306 	lsl.w	r3, r1, r6
 80011b6:	431c      	orrs	r4, r3
 80011b8:	40f9      	lsrs	r1, r7
 80011ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011be:	fa00 f306 	lsl.w	r3, r0, r6
 80011c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011c6:	0c20      	lsrs	r0, r4, #16
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	fb09 1118 	mls	r1, r9, r8, r1
 80011d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011d4:	fb08 f00e 	mul.w	r0, r8, lr
 80011d8:	4288      	cmp	r0, r1
 80011da:	fa02 f206 	lsl.w	r2, r2, r6
 80011de:	d90b      	bls.n	80011f8 <__udivmoddi4+0x1b8>
 80011e0:	eb1c 0101 	adds.w	r1, ip, r1
 80011e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011e8:	f080 8088 	bcs.w	80012fc <__udivmoddi4+0x2bc>
 80011ec:	4288      	cmp	r0, r1
 80011ee:	f240 8085 	bls.w	80012fc <__udivmoddi4+0x2bc>
 80011f2:	f1a8 0802 	sub.w	r8, r8, #2
 80011f6:	4461      	add	r1, ip
 80011f8:	1a09      	subs	r1, r1, r0
 80011fa:	b2a4      	uxth	r4, r4
 80011fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001200:	fb09 1110 	mls	r1, r9, r0, r1
 8001204:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001208:	fb00 fe0e 	mul.w	lr, r0, lr
 800120c:	458e      	cmp	lr, r1
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x1e2>
 8001210:	eb1c 0101 	adds.w	r1, ip, r1
 8001214:	f100 34ff 	add.w	r4, r0, #4294967295
 8001218:	d26c      	bcs.n	80012f4 <__udivmoddi4+0x2b4>
 800121a:	458e      	cmp	lr, r1
 800121c:	d96a      	bls.n	80012f4 <__udivmoddi4+0x2b4>
 800121e:	3802      	subs	r0, #2
 8001220:	4461      	add	r1, ip
 8001222:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001226:	fba0 9402 	umull	r9, r4, r0, r2
 800122a:	eba1 010e 	sub.w	r1, r1, lr
 800122e:	42a1      	cmp	r1, r4
 8001230:	46c8      	mov	r8, r9
 8001232:	46a6      	mov	lr, r4
 8001234:	d356      	bcc.n	80012e4 <__udivmoddi4+0x2a4>
 8001236:	d053      	beq.n	80012e0 <__udivmoddi4+0x2a0>
 8001238:	b15d      	cbz	r5, 8001252 <__udivmoddi4+0x212>
 800123a:	ebb3 0208 	subs.w	r2, r3, r8
 800123e:	eb61 010e 	sbc.w	r1, r1, lr
 8001242:	fa01 f707 	lsl.w	r7, r1, r7
 8001246:	fa22 f306 	lsr.w	r3, r2, r6
 800124a:	40f1      	lsrs	r1, r6
 800124c:	431f      	orrs	r7, r3
 800124e:	e9c5 7100 	strd	r7, r1, [r5]
 8001252:	2600      	movs	r6, #0
 8001254:	4631      	mov	r1, r6
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	f1c2 0320 	rsb	r3, r2, #32
 800125e:	40d8      	lsrs	r0, r3
 8001260:	fa0c fc02 	lsl.w	ip, ip, r2
 8001264:	fa21 f303 	lsr.w	r3, r1, r3
 8001268:	4091      	lsls	r1, r2
 800126a:	4301      	orrs	r1, r0
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb3 f0f7 	udiv	r0, r3, r7
 8001278:	fb07 3610 	mls	r6, r7, r0, r3
 800127c:	0c0b      	lsrs	r3, r1, #16
 800127e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001282:	fb00 f60e 	mul.w	r6, r0, lr
 8001286:	429e      	cmp	r6, r3
 8001288:	fa04 f402 	lsl.w	r4, r4, r2
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x260>
 800128e:	eb1c 0303 	adds.w	r3, ip, r3
 8001292:	f100 38ff 	add.w	r8, r0, #4294967295
 8001296:	d22f      	bcs.n	80012f8 <__udivmoddi4+0x2b8>
 8001298:	429e      	cmp	r6, r3
 800129a:	d92d      	bls.n	80012f8 <__udivmoddi4+0x2b8>
 800129c:	3802      	subs	r0, #2
 800129e:	4463      	add	r3, ip
 80012a0:	1b9b      	subs	r3, r3, r6
 80012a2:	b289      	uxth	r1, r1
 80012a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80012a8:	fb07 3316 	mls	r3, r7, r6, r3
 80012ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012b0:	fb06 f30e 	mul.w	r3, r6, lr
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x28a>
 80012b8:	eb1c 0101 	adds.w	r1, ip, r1
 80012bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80012c0:	d216      	bcs.n	80012f0 <__udivmoddi4+0x2b0>
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d914      	bls.n	80012f0 <__udivmoddi4+0x2b0>
 80012c6:	3e02      	subs	r6, #2
 80012c8:	4461      	add	r1, ip
 80012ca:	1ac9      	subs	r1, r1, r3
 80012cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012d0:	e738      	b.n	8001144 <__udivmoddi4+0x104>
 80012d2:	462e      	mov	r6, r5
 80012d4:	4628      	mov	r0, r5
 80012d6:	e705      	b.n	80010e4 <__udivmoddi4+0xa4>
 80012d8:	4606      	mov	r6, r0
 80012da:	e6e3      	b.n	80010a4 <__udivmoddi4+0x64>
 80012dc:	4618      	mov	r0, r3
 80012de:	e6f8      	b.n	80010d2 <__udivmoddi4+0x92>
 80012e0:	454b      	cmp	r3, r9
 80012e2:	d2a9      	bcs.n	8001238 <__udivmoddi4+0x1f8>
 80012e4:	ebb9 0802 	subs.w	r8, r9, r2
 80012e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7a3      	b.n	8001238 <__udivmoddi4+0x1f8>
 80012f0:	4646      	mov	r6, r8
 80012f2:	e7ea      	b.n	80012ca <__udivmoddi4+0x28a>
 80012f4:	4620      	mov	r0, r4
 80012f6:	e794      	b.n	8001222 <__udivmoddi4+0x1e2>
 80012f8:	4640      	mov	r0, r8
 80012fa:	e7d1      	b.n	80012a0 <__udivmoddi4+0x260>
 80012fc:	46d0      	mov	r8, sl
 80012fe:	e77b      	b.n	80011f8 <__udivmoddi4+0x1b8>
 8001300:	3b02      	subs	r3, #2
 8001302:	4461      	add	r1, ip
 8001304:	e732      	b.n	800116c <__udivmoddi4+0x12c>
 8001306:	4630      	mov	r0, r6
 8001308:	e709      	b.n	800111e <__udivmoddi4+0xde>
 800130a:	4464      	add	r4, ip
 800130c:	3802      	subs	r0, #2
 800130e:	e742      	b.n	8001196 <__udivmoddi4+0x156>

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0000      	movs	r0, r0
	...

08001318 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001322:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001348 <sqr+0x30>
 8001326:	ed97 0b00 	vldr	d0, [r7]
 800132a:	f00f fb55 	bl	80109d8 <pow>
 800132e:	eeb0 7a40 	vmov.f32	s14, s0
 8001332:	eef0 7a60 	vmov.f32	s15, s1
}
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40000000 	.word	0x40000000

08001350 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001358:	f004 fe80 	bl	800605c <HAL_GetTick>
 800135c:	ee07 0a90 	vmov	s15, r0
 8001360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f91e 	bl	80005a8 <__aeabi_f2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <algorithm_1_update+0x218>)
 8001372:	f7ff fa9b 	bl	80008ac <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc63 	bl	8000c48 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <algorithm_1_update+0x21c>)
 8001386:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <algorithm_1_update+0x21c>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <algorithm_1_update+0x220>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	eef0 7ae7 	vabs.f32	s15, s15
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f902 	bl	80005a8 <__aeabi_f2d>
 80013a4:	a36e      	add	r3, pc, #440	; (adr r3, 8001560 <algorithm_1_update+0x210>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fbe5 	bl	8000b78 <__aeabi_dcmpgt>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <algorithm_1_update+0x224>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <algorithm_1_update+0x21c>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <algorithm_1_update+0x220>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013e2:	4a64      	ldr	r2, [pc, #400]	; (8001574 <algorithm_1_update+0x224>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013e8:	4b60      	ldr	r3, [pc, #384]	; (800156c <algorithm_1_update+0x21c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <algorithm_1_update+0x220>)
 80013ee:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <algorithm_1_update+0x228>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <algorithm_1_update+0x228>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80ab 	beq.w	8001556 <algorithm_1_update+0x206>
  {
	isUpdated_1 = 0;
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <algorithm_1_update+0x228>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800140c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd09      	ble.n	800142e <algorithm_1_update+0xde>
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <algorithm_1_update+0x22c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <algorithm_1_update+0x230>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <algorithm_1_update+0x230>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e002      	b.n	8001434 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <algorithm_1_update+0x230>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <algorithm_1_update+0x230>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11c      	bne.n	8001476 <algorithm_1_update+0x126>
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <algorithm_1_update+0x22c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <algorithm_1_update+0x126>
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <algorithm_1_update+0x234>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <algorithm_1_update+0x126>
	{
	  isRising = 1;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <algorithm_1_update+0x22c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001452:	f004 fe03 	bl	800605c <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <algorithm_1_update+0x238>)
 800145a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <algorithm_1_update+0x23c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <algorithm_1_update+0x23c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2a02      	cmp	r2, #2
 8001468:	bf38      	it	cc
 800146a:	2202      	movcc	r2, #2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001470:	4847      	ldr	r0, [pc, #284]	; (8001590 <algorithm_1_update+0x240>)
 8001472:	f002 f979 	bl	8003768 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800147c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d50f      	bpl.n	80014aa <algorithm_1_update+0x15a>
 800148a:	f004 fde7 	bl	800605c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <algorithm_1_update+0x238>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800149a:	4293      	cmp	r3, r2
 800149c:	d905      	bls.n	80014aa <algorithm_1_update+0x15a>
	{
	  fallingCounter++;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <algorithm_1_update+0x244>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <algorithm_1_update+0x244>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e002      	b.n	80014b0 <algorithm_1_update+0x160>
	}
	else
	{
	  fallingCounter = 0;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <algorithm_1_update+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <algorithm_1_update+0x244>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d120      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <algorithm_1_update+0x22c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d11c      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <algorithm_1_update+0x234>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d118      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001598 <algorithm_1_update+0x248>
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd0e      	ble.n	80014fa <algorithm_1_update+0x1aa>
	{
	  isFalling = 1;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <algorithm_1_update+0x234>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <algorithm_1_update+0x23c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <algorithm_1_update+0x23c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2a04      	cmp	r2, #4
 80014ee:	bf38      	it	cc
 80014f0:	2204      	movcc	r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014f6:	f003 f929 	bl	800474c <deploy_p_1>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001500:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800159c <algorithm_1_update+0x24c>
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d50d      	bpl.n	800152a <algorithm_1_update+0x1da>
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <algorithm_1_update+0x234>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d109      	bne.n	800152a <algorithm_1_update+0x1da>
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <algorithm_1_update+0x250>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <algorithm_1_update+0x1da>
	{
		second_p_counter_1++;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <algorithm_1_update+0x254>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <algorithm_1_update+0x254>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <algorithm_1_update+0x1e0>
	}
	else{
		second_p_counter_1 = 0;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <algorithm_1_update+0x254>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <algorithm_1_update+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d10e      	bne.n	8001556 <algorithm_1_update+0x206>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <algorithm_1_update+0x23c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <algorithm_1_update+0x23c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2a05      	cmp	r2, #5
 8001544:	bf38      	it	cc
 8001546:	2205      	movcc	r2, #5
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <algorithm_1_update+0x250>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001552:	f003 f90b 	bl	800476c <deploy_p_2>
	}
  }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	9999999a 	.word	0x9999999a
 8001564:	3fb99999 	.word	0x3fb99999
 8001568:	408f4000 	.word	0x408f4000
 800156c:	20000204 	.word	0x20000204
 8001570:	20000208 	.word	0x20000208
 8001574:	2000020c 	.word	0x2000020c
 8001578:	20000228 	.word	0x20000228
 800157c:	20000226 	.word	0x20000226
 8001580:	20000210 	.word	0x20000210
 8001584:	20000224 	.word	0x20000224
 8001588:	20000220 	.word	0x20000220
 800158c:	20000004 	.word	0x20000004
 8001590:	200007b4 	.word	0x200007b4
 8001594:	20000214 	.word	0x20000214
 8001598:	447a0000 	.word	0x447a0000
 800159c:	440e8000 	.word	0x440e8000
 80015a0:	2000022a 	.word	0x2000022a
 80015a4:	2000022c 	.word	0x2000022c

080015a8 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fff3 	bl	80005a8 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b10 	vmov	d0, r2, r3
 80015ca:	f7ff fea5 	bl	8001318 <sqr>
 80015ce:	ec55 4b10 	vmov	r4, r5, d0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffe5 	bl	80005a8 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b10 	vmov	d0, r2, r3
 80015e6:	f7ff fe97 	bl	8001318 <sqr>
 80015ea:	ec53 2b10 	vmov	r2, r3, d0
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fe7b 	bl	80002ec <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffcf 	bl	80005a8 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b10 	vmov	d0, r2, r3
 8001612:	f7ff fe81 	bl	8001318 <sqr>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fe65 	bl	80002ec <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb0d 	bl	8000c48 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	ee00 3a10 	vmov	s0, r3
 8001634:	f00f fa6c 	bl	8010b10 <sqrtf>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800189c <algorithm_2_update+0x2f4>
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	dd34      	ble.n	80016b4 <algorithm_2_update+0x10c>
 800164a:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <algorithm_2_update+0x2f8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d130      	bne.n	80016b4 <algorithm_2_update+0x10c>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001658:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80018a4 <algorithm_2_update+0x2fc>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d516      	bpl.n	8001694 <algorithm_2_update+0xec>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800166c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80018a8 <algorithm_2_update+0x300>
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd0c      	ble.n	8001694 <algorithm_2_update+0xec>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001680:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <algorithm_2_update+0x304>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <algorithm_2_update+0x304>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 8001694:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <algorithm_2_update+0x304>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b82      	ldr	r3, [pc, #520]	; (80018ac <algorithm_2_update+0x304>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2a02      	cmp	r2, #2
 80016a6:	bf38      	it	cc
 80016a8:	2202      	movcc	r2, #2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016ae:	4880      	ldr	r0, [pc, #512]	; (80018b0 <algorithm_2_update+0x308>)
 80016b0:	f002 f85a 	bl	8003768 <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 101)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016ba:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80018b4 <algorithm_2_update+0x30c>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d50c      	bpl.n	80016e2 <algorithm_2_update+0x13a>
 80016c8:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <algorithm_2_update+0x2f8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <algorithm_2_update+0x13a>
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <algorithm_2_update+0x310>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	dc04      	bgt.n	80016e2 <algorithm_2_update+0x13a>
	{
		burnout_counter++;
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <algorithm_2_update+0x310>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <algorithm_2_update+0x310>)
 80016e0:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <algorithm_2_update+0x310>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d10c      	bne.n	8001704 <algorithm_2_update+0x15c>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <algorithm_2_update+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <algorithm_2_update+0x304>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2a03      	cmp	r2, #3
 80016f6:	bf38      	it	cc
 80016f8:	2203      	movcc	r2, #3
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016fe:	486c      	ldr	r0, [pc, #432]	; (80018b0 <algorithm_2_update+0x308>)
 8001700:	f002 f832 	bl	8003768 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE_2)
 8001704:	edd7 7a01 	vldr	s15, [r7, #4]
 8001708:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80018bc <algorithm_2_update+0x314>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd20      	ble.n	8001758 <algorithm_2_update+0x1b0>
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11c      	bne.n	8001758 <algorithm_2_update+0x1b0>
 800171e:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <algorithm_2_update+0x318>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <algorithm_2_update+0x1b0>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800172c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	dd0e      	ble.n	8001758 <algorithm_2_update+0x1b0>
	{
		isFalling_2 = 1;
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <algorithm_2_update+0x318>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <algorithm_2_update+0x304>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <algorithm_2_update+0x304>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2a04      	cmp	r2, #4
 800174c:	bf38      	it	cc
 800174e:	2204      	movcc	r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001754:	f002 fffa 	bl	800474c <deploy_p_1>
	}

	if(is_BME_ok == 1)
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <algorithm_2_update+0x31c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d12d      	bne.n	80017bc <algorithm_2_update+0x214>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001766:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80018c8 <algorithm_2_update+0x320>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d50d      	bpl.n	8001790 <algorithm_2_update+0x1e8>
 8001774:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <algorithm_2_update+0x318>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d109      	bne.n	8001790 <algorithm_2_update+0x1e8>
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <algorithm_2_update+0x324>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <algorithm_2_update+0x1e8>
		{
			secondP_counter++;
 8001784:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <algorithm_2_update+0x328>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <algorithm_2_update+0x328>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e002      	b.n	8001796 <algorithm_2_update+0x1ee>
		}
		else{
			secondP_counter = 0;
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <algorithm_2_update+0x328>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <algorithm_2_update+0x328>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d10e      	bne.n	80017bc <algorithm_2_update+0x214>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <algorithm_2_update+0x304>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <algorithm_2_update+0x304>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2a05      	cmp	r2, #5
 80017aa:	bf38      	it	cc
 80017ac:	2205      	movcc	r2, #5
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <algorithm_2_update+0x324>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017b8:	f002 ffd8 	bl	800476c <deploy_p_2>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	eef0 0a67 	vmov.f32	s1, s15
 80017ca:	f7ff fda5 	bl	8001318 <sqr>
 80017ce:	ec55 4b10 	vmov	r4, r5, d0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017d8:	eeb0 0a47 	vmov.f32	s0, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	f7ff fd9a 	bl	8001318 <sqr>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fd7e 	bl	80002ec <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f7ff fd87 	bl	8001318 <sqr>
 800180a:	ec53 2b10 	vmov	r2, r3, d0
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd6b 	bl	80002ec <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f00f f947 	bl	8010ab8 <sqrt>
 800182a:	ec51 0b10 	vmov	r0, r1, d0
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <algorithm_2_update+0x32c>)
 8001834:	f7ff f982 	bl	8000b3c <__aeabi_dcmplt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d011      	beq.n	8001862 <algorithm_2_update+0x2ba>
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <algorithm_2_update+0x318>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10d      	bne.n	8001862 <algorithm_2_update+0x2ba>
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <algorithm_2_update+0x324>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d109      	bne.n	8001862 <algorithm_2_update+0x2ba>
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <algorithm_2_update+0x330>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <algorithm_2_update+0x2ba>
	{
			TD_counter++;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <algorithm_2_update+0x334>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <algorithm_2_update+0x334>)
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <algorithm_2_update+0x2c0>
	}
	else{
		TD_counter = 0;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <algorithm_2_update+0x334>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <algorithm_2_update+0x334>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001870:	dd0f      	ble.n	8001892 <algorithm_2_update+0x2ea>
	{
		is_TD = 1;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <algorithm_2_update+0x330>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <algorithm_2_update+0x304>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <algorithm_2_update+0x304>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2a06      	cmp	r2, #6
 8001884:	bf38      	it	cc
 8001886:	2206      	movcc	r2, #6
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <algorithm_2_update+0x308>)
 800188e:	f001 ff6b 	bl	8003768 <ext_pin_open>
	}
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	453b8000 	.word	0x453b8000
 80018a0:	20000227 	.word	0x20000227
 80018a4:	43480000 	.word	0x43480000
 80018a8:	c3480000 	.word	0xc3480000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200007b4 	.word	0x200007b4
 80018b4:	c4fa0000 	.word	0xc4fa0000
 80018b8:	20000230 	.word	0x20000230
 80018bc:	42a00000 	.word	0x42a00000
 80018c0:	20000225 	.word	0x20000225
 80018c4:	200007fc 	.word	0x200007fc
 80018c8:	440e8000 	.word	0x440e8000
 80018cc:	20000229 	.word	0x20000229
 80018d0:	2000021c 	.word	0x2000021c
 80018d4:	40240000 	.word	0x40240000
 80018d8:	20000234 	.word	0x20000234
 80018dc:	20000218 	.word	0x20000218

080018e0 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <bme280_getVals+0xac>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	22f3      	movs	r2, #243	; 0xf3
 80018fa:	21ec      	movs	r1, #236	; 0xec
 80018fc:	f006 fae2 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <bme280_getVals+0xb0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800190e:	793b      	ldrb	r3, [r7, #4]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d035      	beq.n	8001984 <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <bme280_getVals+0xac>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	2314      	movs	r3, #20
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2308      	movs	r3, #8
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	22f7      	movs	r2, #247	; 0xf7
 800192c:	21ec      	movs	r1, #236	; 0xec
 800192e:	f006 fac9 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <bme280_getVals+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	031a      	lsls	r2, r3, #12
 800194a:	7a3b      	ldrb	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4313      	orrs	r3, r2
 8001950:	7a7a      	ldrb	r2, [r7, #9]
 8001952:	0912      	lsrs	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	431a      	orrs	r2, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <bme280_getVals+0xb0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	031a      	lsls	r2, r3, #12
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4313      	orrs	r3, r2
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	0912      	lsrs	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	431a      	orrs	r2, r3
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <bme280_getVals+0xb0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 8001976:	7abb      	ldrb	r3, [r7, #10]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	7afa      	ldrb	r2, [r7, #11]
 800197c:	431a      	orrs	r2, r3
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <bme280_getVals+0xb0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000238 	.word	0x20000238
 8001990:	2000023c 	.word	0x2000023c
 8001994:	00000000 	.word	0x00000000

08001998 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <bme280_get_altitude+0xd0>)
 80019a0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <bme280_get_altitude+0xd4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019b2:	ee16 0a90 	vmov	r0, s13
 80019b6:	f7fe fdf7 	bl	80005a8 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a58 <bme280_get_altitude+0xc0>
 80019c2:	ec43 2b10 	vmov	d0, r2, r3
 80019c6:	f00f f807 	bl	80109d8 <pow>
 80019ca:	ec53 2b10 	vmov	r2, r3, d0
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <bme280_get_altitude+0xd8>)
 80019d4:	f7fe fc88 	bl	80002e8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	a31f      	add	r3, pc, #124	; (adr r3, 8001a60 <bme280_get_altitude+0xc8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe37 	bl	8000658 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f929 	bl	8000c48 <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <bme280_get_altitude+0xdc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	ed97 7a00 	vldr	s14, [r7]
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dc00      	bgt.n	8001a2e <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a2c:	e00e      	b.n	8001a4c <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d005      	beq.n	8001a4c <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	ccd9456c 	.word	0xccd9456c
 8001a5c:	3fc85b95 	.word	0x3fc85b95
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40e5a540 	.word	0x40e5a540
 8001a68:	447d5000 	.word	0x447d5000
 8001a6c:	2000023c 	.word	0x2000023c
 8001a70:	3ff00000 	.word	0x3ff00000
 8001a74:	20000004 	.word	0x20000004

08001a78 <bme280_config>:
void bme280_config()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001a7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <bme280_config+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001a88:	4b98      	ldr	r3, [pc, #608]	; (8001cec <bme280_config+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 f8ef 	bl	8007c70 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f004 faee 	bl	8006074 <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <bme280_config+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 ffa3 	bl	80079e8 <HAL_I2C_Init>
	HAL_Delay(5);
 8001aa2:	2005      	movs	r0, #5
 8001aa4:	f004 fae6 	bl	8006074 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <bme280_config+0x274>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	23c8      	movs	r3, #200	; 0xc8
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2319      	movs	r3, #25
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2288      	movs	r2, #136	; 0x88
 8001abc:	21ec      	movs	r1, #236	; 0xec
 8001abe:	f006 fa01 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001ac6:	793b      	ldrb	r3, [r7, #4]
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <bme280_config+0x278>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	b292      	uxth	r2, r2
 8001adc:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	b219      	sxth	r1, r3
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <bme280_config+0x278>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	b212      	sxth	r2, r2
 8001af2:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	b219      	sxth	r1, r3
 8001af8:	7a7b      	ldrb	r3, [r7, #9]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <bme280_config+0x278>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	b212      	sxth	r2, r2
 8001b08:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b0a:	7abb      	ldrb	r3, [r7, #10]
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <bme280_config+0x278>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	b219      	sxth	r1, r3
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <bme280_config+0x278>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b212      	sxth	r2, r2
 8001b36:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	b219      	sxth	r1, r3
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <bme280_config+0x278>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b212      	sxth	r2, r2
 8001b4c:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b4e:	7c3b      	ldrb	r3, [r7, #16]
 8001b50:	b219      	sxth	r1, r3
 8001b52:	7c7b      	ldrb	r3, [r7, #17]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <bme280_config+0x278>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	b212      	sxth	r2, r2
 8001b62:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b64:	7cbb      	ldrb	r3, [r7, #18]
 8001b66:	b219      	sxth	r1, r3
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <bme280_config+0x278>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	b212      	sxth	r2, r2
 8001b78:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001b7a:	7d3b      	ldrb	r3, [r7, #20]
 8001b7c:	b219      	sxth	r1, r3
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <bme280_config+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	b212      	sxth	r2, r2
 8001b8e:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	b219      	sxth	r1, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <bme280_config+0x278>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	b212      	sxth	r2, r2
 8001ba4:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001ba6:	7e3b      	ldrb	r3, [r7, #24]
 8001ba8:	b219      	sxth	r1, r3
 8001baa:	7e7b      	ldrb	r3, [r7, #25]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <bme280_config+0x278>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b212      	sxth	r2, r2
 8001bba:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bbc:	7ebb      	ldrb	r3, [r7, #26]
 8001bbe:	b219      	sxth	r1, r3
 8001bc0:	7efb      	ldrb	r3, [r7, #27]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <bme280_config+0x278>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	b212      	sxth	r2, r2
 8001bd0:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <bme280_config+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	7f3a      	ldrb	r2, [r7, #28]
 8001bda:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <bme280_config+0x274>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2307      	movs	r3, #7
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	22e1      	movs	r2, #225	; 0xe1
 8001bf0:	21ec      	movs	r1, #236	; 0xec
 8001bf2:	f006 f967 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001bfa:	793b      	ldrb	r3, [r7, #4]
 8001bfc:	b219      	sxth	r1, r3
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <bme280_config+0x278>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	b212      	sxth	r2, r2
 8001c0e:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <bme280_config+0x278>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	79ba      	ldrb	r2, [r7, #6]
 8001c18:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b219      	sxth	r1, r3
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <bme280_config+0x278>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	b212      	sxth	r2, r2
 8001c34:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c36:	7a3b      	ldrb	r3, [r7, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b219      	sxth	r1, r3
 8001c3e:	7a7b      	ldrb	r3, [r7, #9]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <bme280_config+0x278>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c50:	7aba      	ldrb	r2, [r7, #10]
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <bme280_config+0x278>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b252      	sxtb	r2, r2
 8001c5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <bme280_config+0x278>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	7c5b      	ldrb	r3, [r3, #17]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <bme280_config+0x274>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	2332      	movs	r3, #50	; 0x32
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	1cfb      	adds	r3, r7, #3
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	22f2      	movs	r2, #242	; 0xf2
 8001c80:	21ec      	movs	r1, #236	; 0xec
 8001c82:	f006 f825 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8001c86:	4603      	mov	r3, r0
 8001c88:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <bme280_config+0x278>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	7c1b      	ldrb	r3, [r3, #16]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <bme280_config+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	7c5b      	ldrb	r3, [r3, #17]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <bme280_config+0x278>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	7c5b      	ldrb	r3, [r3, #17]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <bme280_config+0x274>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	2332      	movs	r3, #50	; 0x32
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	1cfb      	adds	r3, r7, #3
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	22f4      	movs	r2, #244	; 0xf4
 8001cd0:	21ec      	movs	r1, #236	; 0xec
 8001cd2:	f005 fffd 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <bme280_config+0x278>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7c9b      	ldrb	r3, [r3, #18]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e005      	b.n	8001cf4 <bme280_config+0x27c>
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000238 	.word	0x20000238
 8001cf0:	2000023c 	.word	0x2000023c
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <bme280_config+0x308>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2332      	movs	r3, #50	; 0x32
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	1cfb      	adds	r3, r7, #3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	22f5      	movs	r2, #245	; 0xf5
 8001d0e:	21ec      	movs	r1, #236	; 0xec
 8001d10:	f005 ffde 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8001d14:	4603      	mov	r3, r0
 8001d16:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f004 f9a8 	bl	8006074 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	e011      	b.n	8001d4e <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d2a:	f000 f865 	bl	8001df8 <bme280_update>
	  base +=  BME->altitude;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <bme280_config+0x30c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d42:	201e      	movs	r0, #30
 8001d44:	f004 f996 	bl	8006074 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b1d      	cmp	r3, #29
 8001d52:	ddea      	ble.n	8001d2a <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <bme280_config+0x310>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d5c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001d68:	f000 f846 	bl	8001df8 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <bme280_config+0x310>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000238 	.word	0x20000238
 8001d84:	2000023c 	.word	0x2000023c
 8001d88:	20000004 	.word	0x20000004

08001d8c <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af04      	add	r7, sp, #16
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <bme280_init+0x5c>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <bme280_init+0x60>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <bme280_init+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <bme280_init+0x5c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3214      	adds	r2, #20
 8001dac:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <bme280_init+0x60>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	2332      	movs	r3, #50	; 0x32
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	22d0      	movs	r2, #208	; 0xd0
 8001dc4:	21ec      	movs	r1, #236	; 0xec
 8001dc6:	f006 f87d 	bl	8007ec4 <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	d103      	bne.n	8001dd8 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <bme280_init+0x68>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001dd6:	e002      	b.n	8001dde <bme280_init+0x52>
		is_BME_ok = 0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <bme280_init+0x68>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000023c 	.word	0x2000023c
 8001dec:	20000238 	.word	0x20000238
 8001df0:	20000004 	.word	0x20000004
 8001df4:	200007fc 	.word	0x200007fc

08001df8 <bme280_update>:


void bme280_update(){
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b0d2      	sub	sp, #328	; 0x148
 8001dfe:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e00:	f7ff fd6e 	bl	80018e0 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e04:	4bd4      	ldr	r3, [pc, #848]	; (8002158 <bme280_update+0x360>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 83bc 	bne.w	800258a <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e12:	4bd1      	ldr	r3, [pc, #836]	; (8002158 <bme280_update+0x360>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e20:	10da      	asrs	r2, r3, #3
 8001e22:	4bcd      	ldr	r3, [pc, #820]	; (8002158 <bme280_update+0x360>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	4bc9      	ldr	r3, [pc, #804]	; (8002158 <bme280_update+0x360>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	12db      	asrs	r3, r3, #11
 8001e40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e48:	111a      	asrs	r2, r3, #4
 8001e4a:	4bc3      	ldr	r3, [pc, #780]	; (8002158 <bme280_update+0x360>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	1ad1      	subs	r1, r2, r3
 8001e56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e5a:	111a      	asrs	r2, r3, #4
 8001e5c:	4bbe      	ldr	r3, [pc, #760]	; (8002158 <bme280_update+0x360>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	131a      	asrs	r2, r3, #12
 8001e6e:	4bba      	ldr	r3, [pc, #744]	; (8002158 <bme280_update+0x360>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	139b      	asrs	r3, r3, #14
 8001e7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001e82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001e90:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3380      	adds	r3, #128	; 0x80
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eae:	4baa      	ldr	r3, [pc, #680]	; (8002158 <bme280_update+0x360>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800215c <bme280_update+0x364>
 8001eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eba:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ebe:	4ba6      	ldr	r3, [pc, #664]	; (8002158 <bme280_update+0x360>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec8:	657a      	str	r2, [r7, #84]	; 0x54
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ed6:	17da      	asrs	r2, r3, #31
 8001ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001edc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ee0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	4613      	mov	r3, r2
 8001eee:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001efc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f04:	fb03 f102 	mul.w	r1, r3, r2
 8001f08:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	18ca      	adds	r2, r1, r3
 8001f16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f1a:	fba3 4503 	umull	r4, r5, r3, r3
 8001f1e:	1953      	adds	r3, r2, r5
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <bme280_update+0x360>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	8a1b      	ldrh	r3, [r3, #16]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	17da      	asrs	r2, r3, #31
 8001f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f38:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	fb03 f205 	mul.w	r2, r3, r5
 8001f42:	460b      	mov	r3, r1
 8001f44:	fb04 f303 	mul.w	r3, r4, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f50:	445b      	add	r3, fp
 8001f52:	469b      	mov	fp, r3
 8001f54:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f58:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <bme280_update+0x360>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	89db      	ldrh	r3, [r3, #14]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	17da      	asrs	r2, r3, #31
 8001f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f6e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	fb02 f203 	mul.w	r2, r2, r3
 8001f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f84:	4621      	mov	r1, r4
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	441a      	add	r2, r3
 8001f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f90:	4621      	mov	r1, r4
 8001f92:	fba3 8901 	umull	r8, r9, r3, r1
 8001f96:	eb02 0309 	add.w	r3, r2, r9
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fa8:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fac:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fb0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fb4:	1814      	adds	r4, r2, r0
 8001fb6:	643c      	str	r4, [r7, #64]	; 0x40
 8001fb8:	414b      	adcs	r3, r1
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
 8001fbc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fc0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <bme280_update+0x360>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	899b      	ldrh	r3, [r3, #12]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fd6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe6:	00d9      	lsls	r1, r3, #3
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fee:	1814      	adds	r4, r2, r0
 8001ff0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ff2:	414b      	adcs	r3, r1
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001ffa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002002:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002006:	fb03 f102 	mul.w	r1, r3, r2
 800200a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800200e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	18ca      	adds	r2, r1, r3
 8002018:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800201c:	fba3 1303 	umull	r1, r3, r3, r3
 8002020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002024:	460b      	mov	r3, r1
 8002026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800202a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <bme280_update+0x360>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	895b      	ldrh	r3, [r3, #10]
 800203c:	b21b      	sxth	r3, r3
 800203e:	b21b      	sxth	r3, r3
 8002040:	17da      	asrs	r2, r3, #31
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002046:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800204a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800204e:	462b      	mov	r3, r5
 8002050:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002054:	4642      	mov	r2, r8
 8002056:	fb02 f203 	mul.w	r2, r2, r3
 800205a:	464b      	mov	r3, r9
 800205c:	4621      	mov	r1, r4
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	4622      	mov	r2, r4
 8002066:	4641      	mov	r1, r8
 8002068:	fba2 1201 	umull	r1, r2, r2, r1
 800206c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002070:	460a      	mov	r2, r1
 8002072:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002076:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800207a:	4413      	add	r3, r2
 800207c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800208c:	4623      	mov	r3, r4
 800208e:	0a18      	lsrs	r0, r3, #8
 8002090:	462b      	mov	r3, r5
 8002092:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002096:	462b      	mov	r3, r5
 8002098:	1219      	asrs	r1, r3, #8
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <bme280_update+0x360>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	891b      	ldrh	r3, [r3, #8]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020b8:	464a      	mov	r2, r9
 80020ba:	fb02 f203 	mul.w	r2, r2, r3
 80020be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020c2:	4644      	mov	r4, r8
 80020c4:	fb04 f303 	mul.w	r3, r4, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ce:	4644      	mov	r4, r8
 80020d0:	fba3 4304 	umull	r4, r3, r3, r4
 80020d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020d8:	4623      	mov	r3, r4
 80020da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80020f4:	464c      	mov	r4, r9
 80020f6:	0323      	lsls	r3, r4, #12
 80020f8:	4644      	mov	r4, r8
 80020fa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80020fe:	4644      	mov	r4, r8
 8002100:	0322      	lsls	r2, r4, #12
 8002102:	1884      	adds	r4, r0, r2
 8002104:	633c      	str	r4, [r7, #48]	; 0x30
 8002106:	eb41 0303 	adc.w	r3, r1, r3
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002110:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8002114:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002118:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800211c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002120:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <bme280_update+0x360>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	88db      	ldrh	r3, [r3, #6]
 800212c:	b29b      	uxth	r3, r3
 800212e:	b29b      	uxth	r3, r3
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800213a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800213e:	462b      	mov	r3, r5
 8002140:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002144:	4642      	mov	r2, r8
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	464b      	mov	r3, r9
 800214c:	4621      	mov	r1, r4
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	e004      	b.n	8002160 <bme280_update+0x368>
 8002156:	bf00      	nop
 8002158:	2000023c 	.word	0x2000023c
 800215c:	42c80000 	.word	0x42c80000
 8002160:	4622      	mov	r2, r4
 8002162:	4641      	mov	r1, r8
 8002164:	fba2 1201 	umull	r1, r2, r2, r1
 8002168:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800216c:	460a      	mov	r2, r1
 800216e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002172:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002176:	4413      	add	r3, r2
 8002178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002188:	4629      	mov	r1, r5
 800218a:	104a      	asrs	r2, r1, #1
 800218c:	4629      	mov	r1, r5
 800218e:	17cb      	asrs	r3, r1, #31
 8002190:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8002194:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002198:	4313      	orrs	r3, r2
 800219a:	d106      	bne.n	80021aa <bme280_update+0x3b2>
		{
			P = 0;
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021a8:	e14b      	b.n	8002442 <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021ae:	2100      	movs	r1, #0
 80021b0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80021b6:	eb61 0303 	sbc.w	r3, r1, r3
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021c0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	07d9      	lsls	r1, r3, #31
 80021d2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80021d6:	07d0      	lsls	r0, r2, #31
 80021d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021dc:	1a84      	subs	r4, r0, r2
 80021de:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80021e2:	eb61 0303 	sbc.w	r3, r1, r3
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021ea:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	1891      	adds	r1, r2, r2
 80021f4:	6239      	str	r1, [r7, #32]
 80021f6:	415b      	adcs	r3, r3
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fe:	4621      	mov	r1, r4
 8002200:	1851      	adds	r1, r2, r1
 8002202:	61b9      	str	r1, [r7, #24]
 8002204:	4629      	mov	r1, r5
 8002206:	414b      	adcs	r3, r1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002216:	4649      	mov	r1, r9
 8002218:	018b      	lsls	r3, r1, #6
 800221a:	4641      	mov	r1, r8
 800221c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002220:	4641      	mov	r1, r8
 8002222:	018a      	lsls	r2, r1, #6
 8002224:	4641      	mov	r1, r8
 8002226:	1889      	adds	r1, r1, r2
 8002228:	6139      	str	r1, [r7, #16]
 800222a:	4649      	mov	r1, r9
 800222c:	eb43 0101 	adc.w	r1, r3, r1
 8002230:	6179      	str	r1, [r7, #20]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800223e:	4649      	mov	r1, r9
 8002240:	008b      	lsls	r3, r1, #2
 8002242:	4641      	mov	r1, r8
 8002244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002248:	4641      	mov	r1, r8
 800224a:	008a      	lsls	r2, r1, #2
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	4603      	mov	r3, r0
 8002252:	4622      	mov	r2, r4
 8002254:	189b      	adds	r3, r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	460b      	mov	r3, r1
 800225a:	462a      	mov	r2, r5
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800226e:	4649      	mov	r1, r9
 8002270:	008b      	lsls	r3, r1, #2
 8002272:	4641      	mov	r1, r8
 8002274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002278:	4641      	mov	r1, r8
 800227a:	008a      	lsls	r2, r1, #2
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	4603      	mov	r3, r0
 8002282:	4622      	mov	r2, r4
 8002284:	189b      	adds	r3, r3, r2
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800228a:	462b      	mov	r3, r5
 800228c:	460a      	mov	r2, r1
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002296:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800229a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800229e:	f7fe fe31 	bl	8000f04 <__aeabi_ldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022aa:	4bbb      	ldr	r3, [pc, #748]	; (8002598 <bme280_update+0x7a0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8adb      	ldrh	r3, [r3, #22]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	17da      	asrs	r2, r3, #31
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022bc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0b50      	lsrs	r0, r2, #13
 80022ca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022ce:	1359      	asrs	r1, r3, #13
 80022d0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022d4:	462b      	mov	r3, r5
 80022d6:	fb00 f203 	mul.w	r2, r0, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	fb03 f301 	mul.w	r3, r3, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	4622      	mov	r2, r4
 80022e4:	fba2 1200 	umull	r1, r2, r2, r0
 80022e8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80022ec:	460a      	mov	r2, r1
 80022ee:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80022f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022f6:	4413      	add	r3, r2
 80022f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0b50      	lsrs	r0, r2, #13
 800230a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800230e:	1359      	asrs	r1, r3, #13
 8002310:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002314:	462b      	mov	r3, r5
 8002316:	fb00 f203 	mul.w	r2, r0, r3
 800231a:	4623      	mov	r3, r4
 800231c:	fb03 f301 	mul.w	r3, r3, r1
 8002320:	4413      	add	r3, r2
 8002322:	4622      	mov	r2, r4
 8002324:	fba2 1200 	umull	r1, r2, r2, r0
 8002328:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800232c:	460a      	mov	r2, r1
 800232e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002336:	4413      	add	r3, r2
 8002338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002348:	4621      	mov	r1, r4
 800234a:	0e4a      	lsrs	r2, r1, #25
 800234c:	4629      	mov	r1, r5
 800234e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002352:	4629      	mov	r1, r5
 8002354:	164b      	asrs	r3, r1, #25
 8002356:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800235a:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <bme280_update+0x7a0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	8a9b      	ldrh	r3, [r3, #20]
 8002362:	b21b      	sxth	r3, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	673b      	str	r3, [r7, #112]	; 0x70
 800236a:	677a      	str	r2, [r7, #116]	; 0x74
 800236c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002370:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002374:	462a      	mov	r2, r5
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800237e:	4621      	mov	r1, r4
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800238a:	4621      	mov	r1, r4
 800238c:	fba2 1201 	umull	r1, r2, r2, r1
 8002390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002394:	460a      	mov	r2, r1
 8002396:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800239a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800239e:	4413      	add	r3, r2
 80023a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023b0:	4621      	mov	r1, r4
 80023b2:	0cca      	lsrs	r2, r1, #19
 80023b4:	4629      	mov	r1, r5
 80023b6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023ba:	4629      	mov	r1, r5
 80023bc:	14cb      	asrs	r3, r1, #19
 80023be:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ca:	1884      	adds	r4, r0, r2
 80023cc:	66bc      	str	r4, [r7, #104]	; 0x68
 80023ce:	eb41 0303 	adc.w	r3, r1, r3
 80023d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023d8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80023dc:	4621      	mov	r1, r4
 80023de:	1889      	adds	r1, r1, r2
 80023e0:	6639      	str	r1, [r7, #96]	; 0x60
 80023e2:	4629      	mov	r1, r5
 80023e4:	eb43 0101 	adc.w	r1, r3, r1
 80023e8:	6679      	str	r1, [r7, #100]	; 0x64
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023f6:	4623      	mov	r3, r4
 80023f8:	0a18      	lsrs	r0, r3, #8
 80023fa:	462b      	mov	r3, r5
 80023fc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002400:	462b      	mov	r3, r5
 8002402:	1219      	asrs	r1, r3, #8
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <bme280_update+0x7a0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	8a5b      	ldrh	r3, [r3, #18]
 800240c:	b21b      	sxth	r3, r3
 800240e:	b21b      	sxth	r3, r3
 8002410:	17da      	asrs	r2, r3, #31
 8002412:	65bb      	str	r3, [r7, #88]	; 0x58
 8002414:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002422:	464c      	mov	r4, r9
 8002424:	0123      	lsls	r3, r4, #4
 8002426:	4644      	mov	r4, r8
 8002428:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800242c:	4644      	mov	r4, r8
 800242e:	0122      	lsls	r2, r4, #4
 8002430:	1884      	adds	r4, r0, r2
 8002432:	603c      	str	r4, [r7, #0]
 8002434:	eb41 0303 	adc.w	r3, r1, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800243e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8002442:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002446:	f7fe fd1f 	bl	8000e88 <__aeabi_l2f>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f8ab 	bl	80005a8 <__aeabi_f2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <bme280_update+0x7a4>)
 8002458:	f7fe fa28 	bl	80008ac <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <bme280_update+0x7a8>)
 800246a:	f7fe fa1f 	bl	80008ac <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4949      	ldr	r1, [pc, #292]	; (8002598 <bme280_update+0x7a0>)
 8002474:	680c      	ldr	r4, [r1, #0]
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbe5 	bl	8000c48 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <bme280_update+0x7a0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 800248c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002490:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8002498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249c:	039b      	lsls	r3, r3, #14
 800249e:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <bme280_update+0x7a0>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	8bd2      	ldrh	r2, [r2, #30]
 80024a6:	b212      	sxth	r2, r2
 80024a8:	0512      	lsls	r2, r2, #20
 80024aa:	1a9a      	subs	r2, r3, r2
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <bme280_update+0x7a0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	8c1b      	ldrh	r3, [r3, #32]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024c6:	0bdb      	lsrs	r3, r3, #15
 80024c8:	4a33      	ldr	r2, [pc, #204]	; (8002598 <bme280_update+0x7a0>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80024d2:	b252      	sxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024da:	fb01 f202 	mul.w	r2, r1, r2
 80024de:	0a92      	lsrs	r2, r2, #10
 80024e0:	492d      	ldr	r1, [pc, #180]	; (8002598 <bme280_update+0x7a0>)
 80024e2:	6809      	ldr	r1, [r1, #0]
 80024e4:	6809      	ldr	r1, [r1, #0]
 80024e6:	7f09      	ldrb	r1, [r1, #28]
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4608      	mov	r0, r1
 80024ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80024f0:	fb00 f101 	mul.w	r1, r0, r1
 80024f4:	0ac9      	lsrs	r1, r1, #11
 80024f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80024fa:	fb01 f202 	mul.w	r2, r1, r2
 80024fe:	0a92      	lsrs	r2, r2, #10
 8002500:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002504:	4924      	ldr	r1, [pc, #144]	; (8002598 <bme280_update+0x7a0>)
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	6809      	ldr	r1, [r1, #0]
 800250a:	8b49      	ldrh	r1, [r1, #26]
 800250c:	b209      	sxth	r1, r1
 800250e:	fb01 f202 	mul.w	r2, r1, r2
 8002512:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002516:	0b92      	lsrs	r2, r2, #14
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002524:	0bdb      	lsrs	r3, r3, #15
 8002526:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800252a:	0bd2      	lsrs	r2, r2, #15
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	09db      	lsrs	r3, r3, #7
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <bme280_update+0x7a0>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	7e12      	ldrb	r2, [r2, #24]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800254c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002550:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002554:	bf28      	it	cs
 8002556:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 800255a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800255e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002562:	0b1b      	lsrs	r3, r3, #12
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <bme280_update+0x7a0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025a4 <bme280_update+0x7ac>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 800257c:	f7ff fa0c 	bl	8001998 <bme280_get_altitude>
		BME->isUpdated = 0;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <bme280_update+0x7a0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 800258a:	bf00      	nop
 800258c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	2000023c 	.word	0x2000023c
 800259c:	40700000 	.word	0x40700000
 80025a0:	40590000 	.word	0x40590000
 80025a4:	44800000 	.word	0x44800000

080025a8 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ae:	2009      	movs	r0, #9
 80025b0:	f004 faaf 	bl	8006b12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025b4:	200a      	movs	r0, #10
 80025b6:	f004 faac 	bl	8006b12 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025be:	2301      	movs	r3, #1
 80025c0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025c2:	4bb7      	ldr	r3, [pc, #732]	; (80028a0 <bmi088_config+0x2f8>)
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	9302      	str	r3, [sp, #8]
 80025ca:	2301      	movs	r3, #1
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	227c      	movs	r2, #124	; 0x7c
 80025d6:	2130      	movs	r1, #48	; 0x30
 80025d8:	f005 fb7a 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80025ea:	4bad      	ldr	r3, [pc, #692]	; (80028a0 <bmi088_config+0x2f8>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2301      	movs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	227d      	movs	r2, #125	; 0x7d
 80025fe:	2130      	movs	r1, #48	; 0x30
 8002600:	f005 fb66 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4313      	orrs	r3, r2
 800260c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 800260e:	2014      	movs	r0, #20
 8002610:	f003 fd30 	bl	8006074 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002614:	23b6      	movs	r3, #182	; 0xb6
 8002616:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002618:	4ba1      	ldr	r3, [pc, #644]	; (80028a0 <bmi088_config+0x2f8>)
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	2364      	movs	r3, #100	; 0x64
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	2301      	movs	r3, #1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	227e      	movs	r2, #126	; 0x7e
 800262c:	2130      	movs	r1, #48	; 0x30
 800262e:	f005 fb4f 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4313      	orrs	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <bmi088_config+0xa0>
 8002642:	4b98      	ldr	r3, [pc, #608]	; (80028a4 <bmi088_config+0x2fc>)
 8002644:	2285      	movs	r2, #133	; 0x85
 8002646:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002648:	200a      	movs	r0, #10
 800264a:	f003 fd13 	bl	8006074 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800264e:	23b0      	movs	r3, #176	; 0xb0
 8002650:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <bmi088_config+0x2f8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	2364      	movs	r3, #100	; 0x64
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	227e      	movs	r2, #126	; 0x7e
 8002666:	2130      	movs	r1, #48	; 0x30
 8002668:	f005 fb32 	bl	8007cd0 <HAL_I2C_Mem_Write>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4313      	orrs	r3, r2
 8002674:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <bmi088_config+0xda>
 800267c:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <bmi088_config+0x2fc>)
 800267e:	228a      	movs	r2, #138	; 0x8a
 8002680:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002682:	200a      	movs	r0, #10
 8002684:	f003 fcf6 	bl	8006074 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002688:	23b6      	movs	r3, #182	; 0xb6
 800268a:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <bmi088_config+0x2f8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	2214      	movs	r2, #20
 80026a0:	21d0      	movs	r1, #208	; 0xd0
 80026a2:	f005 fb15 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <bmi088_config+0x114>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <bmi088_config+0x2fc>)
 80026b8:	228f      	movs	r2, #143	; 0x8f
 80026ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026bc:	200a      	movs	r0, #10
 80026be:	f003 fcd9 	bl	8006074 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026c2:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <bmi088_config+0x300>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80026ca:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <bmi088_config+0x2f8>)
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2301      	movs	r3, #1
 80026dc:	220f      	movs	r2, #15
 80026de:	21d0      	movs	r1, #208	; 0xd0
 80026e0:	f005 faf6 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <bmi088_config+0x152>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <bmi088_config+0x2fc>)
 80026f6:	2295      	movs	r2, #149	; 0x95
 80026f8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <bmi088_config+0x300>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <bmi088_config+0x2f8>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	2314      	movs	r3, #20
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	2301      	movs	r3, #1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	2210      	movs	r2, #16
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f005 fada 	bl	8007cd0 <HAL_I2C_Mem_Write>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <bmi088_config+0x18a>
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <bmi088_config+0x2fc>)
 800272e:	2299      	movs	r2, #153	; 0x99
 8002730:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <bmi088_config+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	7ddb      	ldrb	r3, [r3, #23]
 8002738:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800273a:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <bmi088_config+0x2f8>)
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	2314      	movs	r3, #20
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	2211      	movs	r2, #17
 800274e:	21d0      	movs	r1, #208	; 0xd0
 8002750:	f005 fabe 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4313      	orrs	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <bmi088_config+0x1c2>
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <bmi088_config+0x2fc>)
 8002766:	229d      	movs	r2, #157	; 0x9d
 8002768:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800276a:	2014      	movs	r0, #20
 800276c:	f003 fc82 	bl	8006074 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002774:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <bmi088_config+0x2f8>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	2314      	movs	r3, #20
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2301      	movs	r3, #1
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2215      	movs	r2, #21
 8002788:	21d0      	movs	r1, #208	; 0xd0
 800278a:	f005 faa1 	bl	8007cd0 <HAL_I2C_Mem_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4313      	orrs	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <bmi088_config+0x1fc>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <bmi088_config+0x2fc>)
 80027a0:	22a3      	movs	r2, #163	; 0xa3
 80027a2:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027a4:	2301      	movs	r3, #1
 80027a6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <bmi088_config+0x2f8>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	2314      	movs	r3, #20
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	2301      	movs	r3, #1
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2216      	movs	r2, #22
 80027bc:	21d0      	movs	r1, #208	; 0xd0
 80027be:	f005 fa87 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <bmi088_config+0x230>
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <bmi088_config+0x2fc>)
 80027d4:	22a7      	movs	r2, #167	; 0xa7
 80027d6:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80027d8:	2301      	movs	r3, #1
 80027da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <bmi088_config+0x2f8>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	2314      	movs	r3, #20
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	2218      	movs	r2, #24
 80027f0:	21d0      	movs	r1, #208	; 0xd0
 80027f2:	f005 fa6d 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <bmi088_config+0x264>
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <bmi088_config+0x2fc>)
 8002808:	22ab      	movs	r2, #171	; 0xab
 800280a:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800280c:	2304      	movs	r3, #4
 800280e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <bmi088_config+0x2f8>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	2314      	movs	r3, #20
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2301      	movs	r3, #1
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	227d      	movs	r2, #125	; 0x7d
 8002824:	2130      	movs	r1, #48	; 0x30
 8002826:	f005 fa53 	bl	8007cd0 <HAL_I2C_Mem_Write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4313      	orrs	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <bmi088_config+0x298>
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <bmi088_config+0x2fc>)
 800283c:	22b0      	movs	r2, #176	; 0xb0
 800283e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002840:	2008      	movs	r0, #8
 8002842:	f003 fc17 	bl	8006074 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <bmi088_config+0x300>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	7cdb      	ldrb	r3, [r3, #19]
 800284c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <bmi088_config+0x2f8>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	2314      	movs	r3, #20
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2301      	movs	r3, #1
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	227c      	movs	r2, #124	; 0x7c
 8002862:	2130      	movs	r1, #48	; 0x30
 8002864:	f005 fa34 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4313      	orrs	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <bmi088_config+0x2d6>
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <bmi088_config+0x2fc>)
 800287a:	22b5      	movs	r2, #181	; 0xb5
 800287c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800287e:	2008      	movs	r0, #8
 8002880:	f003 fbf8 	bl	8006074 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <bmi088_config+0x300>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7d5b      	ldrb	r3, [r3, #21]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b25a      	sxtb	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <bmi088_config+0x300>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	7d9b      	ldrb	r3, [r3, #22]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b25b      	sxtb	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	713b      	strb	r3, [r7, #4]
 800289e:	e005      	b.n	80028ac <bmi088_config+0x304>
 80028a0:	20000240 	.word	0x20000240
 80028a4:	2000024c 	.word	0x2000024c
 80028a8:	20000244 	.word	0x20000244
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <bmi088_config+0x3d0>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	2314      	movs	r3, #20
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2130      	movs	r1, #48	; 0x30
 80028c2:	f005 fa05 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <bmi088_config+0x334>
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <bmi088_config+0x3d4>)
 80028d8:	22ba      	movs	r2, #186	; 0xba
 80028da:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <bmi088_config+0x3d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	7d1b      	ldrb	r3, [r3, #20]
 80028e2:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <bmi088_config+0x3d0>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	2314      	movs	r3, #20
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	2241      	movs	r2, #65	; 0x41
 80028f8:	2130      	movs	r1, #48	; 0x30
 80028fa:	f005 f9e9 	bl	8007cd0 <HAL_I2C_Mem_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4313      	orrs	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <bmi088_config+0x36c>
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <bmi088_config+0x3d4>)
 8002910:	22be      	movs	r2, #190	; 0xbe
 8002912:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002914:	230a      	movs	r3, #10
 8002916:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <bmi088_config+0x3d0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2314      	movs	r3, #20
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	2253      	movs	r2, #83	; 0x53
 800292c:	2130      	movs	r1, #48	; 0x30
 800292e:	f005 f9cf 	bl	8007cd0 <HAL_I2C_Mem_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4313      	orrs	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800293c:	2304      	movs	r3, #4
 800293e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <bmi088_config+0x3d0>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	2314      	movs	r3, #20
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2258      	movs	r2, #88	; 0x58
 8002954:	2130      	movs	r1, #48	; 0x30
 8002956:	f005 f9bb 	bl	8007cd0 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4313      	orrs	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002964:	2009      	movs	r0, #9
 8002966:	f004 f8d4 	bl	8006b12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800296a:	200a      	movs	r0, #10
 800296c:	f004 f8d1 	bl	8006b12 <HAL_NVIC_EnableIRQ>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000240 	.word	0x20000240
 800297c:	2000024c 	.word	0x2000024c
 8002980:	20000244 	.word	0x20000244

08002984 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af04      	add	r7, sp, #16
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <bmi088_init+0x90>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <bmi088_init+0x94>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <bmi088_init+0x94>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <bmi088_init+0x94>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <bmi088_init+0x98>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <bmi088_init+0x9c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029b6:	2332      	movs	r3, #50	; 0x32
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2200      	movs	r2, #0
 80029c8:	21d0      	movs	r1, #208	; 0xd0
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f005 fa7a 	bl	8007ec4 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80029d0:	7b3b      	ldrb	r3, [r7, #12]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d103      	bne.n	80029de <bmi088_init+0x5a>
		is_BMI_ok = 1;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <bmi088_init+0xa0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 80029dc:	e016      	b.n	8002a0c <bmi088_init+0x88>
		is_BMI_ok = 0;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <bmi088_init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <bmi088_init+0xa4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ec:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <bmi088_init+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <bmi088_init+0xa4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <bmi088_init+0xa4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000240 	.word	0x20000240
 8002a18:	20000244 	.word	0x20000244
 8002a1c:	20000248 	.word	0x20000248
 8002a20:	20000249 	.word	0x20000249
 8002a24:	20000800 	.word	0x20000800
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	00000000 	.word	0x00000000

08002a30 <bmi088_update>:
void bmi088_update()
{
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	b08d      	sub	sp, #52	; 0x34
 8002a36:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <bmi088_update+0x94>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	7c9b      	ldrb	r3, [r3, #18]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 820b 	beq.w	8002e5e <bmi088_update+0x42e>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <bmi088_update+0x98>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <bmi088_update+0x94>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2314      	movs	r3, #20
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2309      	movs	r3, #9
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2212      	movs	r2, #18
 8002a60:	2130      	movs	r1, #48	; 0x30
 8002a62:	f005 fa2f 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8002a66:	4603      	mov	r3, r0
 8002a68:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 83c9 	bne.w	8003204 <bmi088_update+0x7d4>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <bmi088_update+0x98>)
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <bmi088_update+0x94>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3309      	adds	r3, #9
 8002a7c:	2214      	movs	r2, #20
 8002a7e:	9202      	str	r2, [sp, #8]
 8002a80:	2202      	movs	r2, #2
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2301      	movs	r3, #1
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	2130      	movs	r1, #48	; 0x30
 8002a8c:	f005 fa1a 	bl	8007ec4 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <bmi088_update+0x94>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <bmi088_update+0x94>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	7a9b      	ldrb	r3, [r3, #10]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ab0:	8bbb      	ldrh	r3, [r7, #28]
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d309      	bcc.n	8002acc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002ab8:	8bbb      	ldrh	r3, [r7, #28]
 8002aba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	837b      	strh	r3, [r7, #26]
 8002ac2:	e029      	b.n	8002b18 <bmi088_update+0xe8>
 8002ac4:	20000244 	.word	0x20000244
 8002ac8:	20000240 	.word	0x20000240
			}
			else{
				Temp_int11 = Temp_uint11;
 8002acc:	8bbb      	ldrh	r3, [r7, #28]
 8002ace:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002ad0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd62 	bl	80005a8 <__aeabi_f2d>
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002aec:	f7fd fdb4 	bl	8000658 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4bc4      	ldr	r3, [pc, #784]	; (8002e10 <bmi088_update+0x3e0>)
 8002afe:	f7fd fbf5 	bl	80002ec <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	49c3      	ldr	r1, [pc, #780]	; (8002e14 <bmi088_update+0x3e4>)
 8002b08:	680e      	ldr	r6, [r1, #0]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f89b 	bl	8000c48 <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b18:	4bbe      	ldr	r3, [pc, #760]	; (8002e14 <bmi088_update+0x3e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	7a1b      	ldrb	r3, [r3, #8]
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	4bbc      	ldr	r3, [pc, #752]	; (8002e14 <bmi088_update+0x3e4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	79db      	ldrb	r3, [r3, #7]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4aba      	ldr	r2, [pc, #744]	; (8002e14 <bmi088_update+0x3e4>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	7992      	ldrb	r2, [r2, #6]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	ee17 0a90 	vmov	r0, s15
 8002b42:	f7fd fd31 	bl	80005a8 <__aeabi_f2d>
 8002b46:	a3ac      	add	r3, pc, #688	; (adr r3, 8002df8 <bmi088_update+0x3c8>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fd84 	bl	8000658 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	a3a9      	add	r3, pc, #676	; (adr r3, 8002e00 <bmi088_update+0x3d0>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fea5 	bl	80008ac <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	49ab      	ldr	r1, [pc, #684]	; (8002e14 <bmi088_update+0x3e4>)
 8002b68:	680e      	ldr	r6, [r1, #0]
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f86b 	bl	8000c48 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002b78:	4ba6      	ldr	r3, [pc, #664]	; (8002e14 <bmi088_update+0x3e4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	795b      	ldrb	r3, [r3, #5]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	4ba4      	ldr	r3, [pc, #656]	; (8002e14 <bmi088_update+0x3e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002b8e:	4ba1      	ldr	r3, [pc, #644]	; (8002e14 <bmi088_update+0x3e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b9e      	ldr	r3, [pc, #632]	; (8002e14 <bmi088_update+0x3e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	789b      	ldrb	r3, [r3, #2]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002ba4:	4b9b      	ldr	r3, [pc, #620]	; (8002e14 <bmi088_update+0x3e4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	b21a      	sxth	r2, r3
 8002bae:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <bmi088_update+0x3e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc6:	ee17 0a90 	vmov	r0, s15
 8002bca:	f7fd fced 	bl	80005a8 <__aeabi_f2d>
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <bmi088_update+0x3e8>)
 8002bd4:	f7fd fe6a 	bl	80008ac <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <bmi088_update+0x3ec>)
 8002be6:	f7fd fd37 	bl	8000658 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <bmi088_update+0x3f0>)
 8002bf8:	f7fd fd2e 	bl	8000658 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4692      	mov	sl, r2
 8002c02:	469b      	mov	fp, r3
 8002c04:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <bmi088_update+0x3e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	7d1b      	ldrb	r3, [r3, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcc6 	bl	80005a8 <__aeabi_f2d>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	ec43 2b11 	vmov	d1, r2, r3
 8002c24:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8002e08 <bmi088_update+0x3d8>
 8002c28:	f00d fed6 	bl	80109d8 <pow>
 8002c2c:	ec53 2b10 	vmov	r2, r3, d0
 8002c30:	4650      	mov	r0, sl
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd fd10 	bl	8000658 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <bmi088_update+0x3f4>)
 8002c46:	f7fd fb4f 	bl	80002e8 <__aeabi_dsub>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4971      	ldr	r1, [pc, #452]	; (8002e14 <bmi088_update+0x3e4>)
 8002c50:	680e      	ldr	r6, [r1, #0]
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd fff7 	bl	8000c48 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6c:	ee17 0a90 	vmov	r0, s15
 8002c70:	f7fd fc9a 	bl	80005a8 <__aeabi_f2d>
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <bmi088_update+0x3e8>)
 8002c7a:	f7fd fe17 	bl	80008ac <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <bmi088_update+0x3ec>)
 8002c8c:	f7fd fce4 	bl	8000658 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <bmi088_update+0x3f0>)
 8002c9e:	f7fd fcdb 	bl	8000658 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	469b      	mov	fp, r3
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <bmi088_update+0x3e4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	7d1b      	ldrb	r3, [r3, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cba:	ee17 0a90 	vmov	r0, s15
 8002cbe:	f7fd fc73 	bl	80005a8 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	ec43 2b11 	vmov	d1, r2, r3
 8002cca:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8002e08 <bmi088_update+0x3d8>
 8002cce:	f00d fe83 	bl	80109d8 <pow>
 8002cd2:	ec53 2b10 	vmov	r2, r3, d0
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	4659      	mov	r1, fp
 8002cda:	f7fd fcbd 	bl	8000658 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <bmi088_update+0x3f8>)
 8002cec:	f7fd fafe 	bl	80002ec <__adddf3>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4947      	ldr	r1, [pc, #284]	; (8002e14 <bmi088_update+0x3e4>)
 8002cf6:	680e      	ldr	r6, [r1, #0]
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ffa4 	bl	8000c48 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d12:	ee17 0a90 	vmov	r0, s15
 8002d16:	f7fd fc47 	bl	80005a8 <__aeabi_f2d>
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <bmi088_update+0x3e8>)
 8002d20:	f7fd fdc4 	bl	80008ac <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <bmi088_update+0x3ec>)
 8002d32:	f7fd fc91 	bl	8000658 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <bmi088_update+0x3f0>)
 8002d44:	f7fd fc88 	bl	8000658 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4692      	mov	sl, r2
 8002d4e:	469b      	mov	fp, r3
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <bmi088_update+0x3e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	7d1b      	ldrb	r3, [r3, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d60:	ee17 0a90 	vmov	r0, s15
 8002d64:	f7fd fc20 	bl	80005a8 <__aeabi_f2d>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	ec43 2b11 	vmov	d1, r2, r3
 8002d70:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002e08 <bmi088_update+0x3d8>
 8002d74:	f00d fe30 	bl	80109d8 <pow>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4650      	mov	r0, sl
 8002d7e:	4659      	mov	r1, fp
 8002d80:	f7fd fc6a 	bl	8000658 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <bmi088_update+0x3f4>)
 8002d92:	f7fd faab 	bl	80002ec <__adddf3>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	491e      	ldr	r1, [pc, #120]	; (8002e14 <bmi088_update+0x3e4>)
 8002d9c:	680e      	ldr	r6, [r1, #0]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd ff51 	bl	8000c48 <__aeabi_d2f>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <bmi088_update+0x3fc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03f      	beq.n	8002e34 <bmi088_update+0x404>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <bmi088_update+0x3e4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <bmi088_update+0x3e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	d502      	bpl.n	8002dd8 <bmi088_update+0x3a8>
 8002dd2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002e30 <bmi088_update+0x400>
 8002dd6:	e009      	b.n	8002dec <bmi088_update+0x3bc>
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <bmi088_update+0x3e4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <bmi088_update+0x3e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <bmi088_update+0x3e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002df4:	e024      	b.n	8002e40 <bmi088_update+0x410>
 8002df6:	bf00      	nop
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40438800 	.word	0x40438800
 8002e00:	00000000 	.word	0x00000000
 8002e04:	412e8480 	.word	0x412e8480
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40000000 	.word	0x40000000
 8002e10:	40370000 	.word	0x40370000
 8002e14:	20000244 	.word	0x20000244
 8002e18:	40e00000 	.word	0x40e00000
 8002e1c:	408f4000 	.word	0x408f4000
 8002e20:	3ff80000 	.word	0x3ff80000
 8002e24:	40100000 	.word	0x40100000
 8002e28:	402e0000 	.word	0x402e0000
 8002e2c:	20000249 	.word	0x20000249
 8002e30:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002e34:	4bb6      	ldr	r3, [pc, #728]	; (8003110 <bmi088_update+0x6e0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4bb4      	ldr	r3, [pc, #720]	; (8003110 <bmi088_update+0x6e0>)
 8002e3e:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e40:	4bb4      	ldr	r3, [pc, #720]	; (8003114 <bmi088_update+0x6e4>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4bb3      	ldr	r3, [pc, #716]	; (8003114 <bmi088_update+0x6e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e50:	4bb0      	ldr	r3, [pc, #704]	; (8003114 <bmi088_update+0x6e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e58:	4baf      	ldr	r3, [pc, #700]	; (8003118 <bmi088_update+0x6e8>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e5e:	4bad      	ldr	r3, [pc, #692]	; (8003114 <bmi088_update+0x6e4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	7c5b      	ldrb	r3, [r3, #17]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 81d0 	beq.w	800320a <bmi088_update+0x7da>
 8002e6a:	4bab      	ldr	r3, [pc, #684]	; (8003118 <bmi088_update+0x6e8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81cb 	beq.w	800320a <bmi088_update+0x7da>
		{
			if(isStarded){
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <bmi088_update+0x6e0>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 81bb 	beq.w	80031f4 <bmi088_update+0x7c4>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e7e:	4ba7      	ldr	r3, [pc, #668]	; (800311c <bmi088_update+0x6ec>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	4ba4      	ldr	r3, [pc, #656]	; (8003114 <bmi088_update+0x6e4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330b      	adds	r3, #11
 8002e88:	220a      	movs	r2, #10
 8002e8a:	9202      	str	r2, [sp, #8]
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	2202      	movs	r2, #2
 8002e96:	21d0      	movs	r1, #208	; 0xd0
 8002e98:	f005 f814 	bl	8007ec4 <HAL_I2C_Mem_Read>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 81b0 	bne.w	8003208 <bmi088_update+0x7d8>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002ea8:	4b9a      	ldr	r3, [pc, #616]	; (8003114 <bmi088_update+0x6e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	7c1b      	ldrb	r3, [r3, #16]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b21a      	sxth	r2, r3
 8002eb2:	4b98      	ldr	r3, [pc, #608]	; (8003114 <bmi088_update+0x6e4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	7bdb      	ldrb	r3, [r3, #15]
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002ebe:	4b95      	ldr	r3, [pc, #596]	; (8003114 <bmi088_update+0x6e4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	7b9b      	ldrb	r3, [r3, #14]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <bmi088_update+0x6e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	7b5b      	ldrb	r3, [r3, #13]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <bmi088_update+0x6e4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	7b1b      	ldrb	r3, [r3, #12]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <bmi088_update+0x6e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	7adb      	ldrb	r3, [r3, #11]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002eea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb48 	bl	8000584 <__aeabi_i2d>
 8002ef4:	a384      	add	r3, pc, #528	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fcd7 	bl	80008ac <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4692      	mov	sl, r2
 8002f04:	469b      	mov	fp, r3
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <bmi088_update+0x6e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	7e5b      	ldrb	r3, [r3, #25]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f12:	4113      	asrs	r3, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fb35 	bl	8000584 <__aeabi_i2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb99 	bl	8000658 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <bmi088_update+0x6f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f36:	4e77      	ldr	r6, [pc, #476]	; (8003114 <bmi088_update+0x6e4>)
 8002f38:	6836      	ldr	r6, [r6, #0]
 8002f3a:	f7fd f9d5 	bl	80002e8 <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fb1a 	bl	8000584 <__aeabi_i2d>
 8002f50:	a36d      	add	r3, pc, #436	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd fca9 	bl	80008ac <__aeabi_ddiv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4692      	mov	sl, r2
 8002f60:	469b      	mov	fp, r3
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <bmi088_update+0x6e4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	7e5b      	ldrb	r3, [r3, #25]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f6e:	4113      	asrs	r3, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fb07 	bl	8000584 <__aeabi_i2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4650      	mov	r0, sl
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	f7fd fb6b 	bl	8000658 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <bmi088_update+0x6f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f92:	4e60      	ldr	r6, [pc, #384]	; (8003114 <bmi088_update+0x6e4>)
 8002f94:	6836      	ldr	r6, [r6, #0]
 8002f96:	f7fd f9a7 	bl	80002e8 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002fa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd faec 	bl	8000584 <__aeabi_i2d>
 8002fac:	a356      	add	r3, pc, #344	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fc7b 	bl	80008ac <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4692      	mov	sl, r2
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <bmi088_update+0x6e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	7e5b      	ldrb	r3, [r3, #25]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fca:	4113      	asrs	r3, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fad9 	bl	8000584 <__aeabi_i2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4650      	mov	r0, sl
 8002fd8:	4659      	mov	r1, fp
 8002fda:	f7fd fb3d 	bl	8000658 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <bmi088_update+0x6f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fee:	4e49      	ldr	r6, [pc, #292]	; (8003114 <bmi088_update+0x6e4>)
 8002ff0:	6836      	ldr	r6, [r6, #0]
 8002ff2:	f7fd f979 	bl	80002e8 <__aeabi_dsub>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002ffe:	4b45      	ldr	r3, [pc, #276]	; (8003114 <bmi088_update+0x6e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd face 	bl	80005a8 <__aeabi_f2d>
 800300c:	e9c7 0100 	strd	r0, r1, [r7]
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <bmi088_update+0x6e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8003018:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <bmi088_update+0x6e4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fac1 	bl	80005a8 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4650      	mov	r0, sl
 800302c:	4659      	mov	r1, fp
 800302e:	f7fd fb13 	bl	8000658 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800303a:	f7fd f957 	bl	80002ec <__adddf3>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4934      	ldr	r1, [pc, #208]	; (8003114 <bmi088_update+0x6e4>)
 8003044:	680e      	ldr	r6, [r1, #0]
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fdfd 	bl	8000c48 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <bmi088_update+0x6e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd faa3 	bl	80005a8 <__aeabi_f2d>
 8003062:	e9c7 0100 	strd	r0, r1, [r7]
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <bmi088_update+0x6e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <bmi088_update+0x6e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa96 	bl	80005a8 <__aeabi_f2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4650      	mov	r0, sl
 8003082:	4659      	mov	r1, fp
 8003084:	f7fd fae8 	bl	8000658 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003090:	f7fd f92c 	bl	80002ec <__adddf3>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	491e      	ldr	r1, [pc, #120]	; (8003114 <bmi088_update+0x6e4>)
 800309a:	680e      	ldr	r6, [r1, #0]
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdd2 	bl	8000c48 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <bmi088_update+0x6e4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa78 	bl	80005a8 <__aeabi_f2d>
 80030b8:	e9c7 0100 	strd	r0, r1, [r7]
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <bmi088_update+0x6e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <bmi088_update+0x6e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa6b 	bl	80005a8 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4650      	mov	r0, sl
 80030d8:	4659      	mov	r1, fp
 80030da:	f7fd fabd 	bl	8000658 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e6:	f7fd f901 	bl	80002ec <__adddf3>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4909      	ldr	r1, [pc, #36]	; (8003114 <bmi088_update+0x6e4>)
 80030f0:	680e      	ldr	r6, [r1, #0]
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fda7 	bl	8000c48 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8003100:	e010      	b.n	8003124 <bmi088_update+0x6f4>
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	00000000 	.word	0x00000000
 800310c:	40dfffc0 	.word	0x40dfffc0
 8003110:	20000249 	.word	0x20000249
 8003114:	20000244 	.word	0x20000244
 8003118:	20000248 	.word	0x20000248
 800311c:	20000240 	.word	0x20000240
 8003120:	20000004 	.word	0x20000004


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <bmi088_update+0x7f0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800312c:	4690      	mov	r8, r2
 800312e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003132:	a339      	add	r3, pc, #228	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	4640      	mov	r0, r8
 800313a:	4649      	mov	r1, r9
 800313c:	f7fd fa8c 	bl	8000658 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <bmi088_update+0x7f4>)
 800314e:	f7fd fbad 	bl	80008ac <__aeabi_ddiv>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fd75 	bl	8000c48 <__aeabi_d2f>
 800315e:	4606      	mov	r6, r0
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <bmi088_update+0x7f0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003168:	a32b      	add	r3, pc, #172	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa73 	bl	8000658 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <bmi088_update+0x7f4>)
 8003180:	f7fd fb94 	bl	80008ac <__aeabi_ddiv>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fd5c 	bl	8000c48 <__aeabi_d2f>
 8003190:	4680      	mov	r8, r0
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <bmi088_update+0x7f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800319a:	4614      	mov	r4, r2
 800319c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80031a0:	a31d      	add	r3, pc, #116	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	f7fd fa55 	bl	8000658 <__aeabi_dmul>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <bmi088_update+0x7f4>)
 80031bc:	f7fd fb76 	bl	80008ac <__aeabi_ddiv>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f7fd fd3e 	bl	8000c48 <__aeabi_d2f>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <bmi088_update+0x7f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80031d6:	eef0 1a67 	vmov.f32	s3, s15
 80031da:	ee01 2a10 	vmov	s2, r2
 80031de:	ee00 8a90 	vmov	s1, r8
 80031e2:	ee00 6a10 	vmov	s0, r6
 80031e6:	f001 fb01 	bl	80047ec <updateQuaternion>
				quaternionToEuler();
 80031ea:	f001 fc4d 	bl	8004a88 <quaternionToEuler>

				is_gyro_offset = 1;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <bmi088_update+0x7f8>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <bmi088_update+0x7f0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <bmi088_update+0x7fc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e002      	b.n	800320a <bmi088_update+0x7da>
				return;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <bmi088_update+0x7da>
					return;
 8003208:	bf00      	nop
		}


}
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	f3af 8000 	nop.w
 8003218:	54442d18 	.word	0x54442d18
 800321c:	400921fb 	.word	0x400921fb
 8003220:	20000244 	.word	0x20000244
 8003224:	40668000 	.word	0x40668000
 8003228:	2000024a 	.word	0x2000024a
 800322c:	20000248 	.word	0x20000248

08003230 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <bmi088_getAccelDatas_INT+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	749a      	strb	r2, [r3, #18]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000244 	.word	0x20000244

0800324c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <bmi088_getGyroDatas_INT+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	745a      	strb	r2, [r3, #17]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000244 	.word	0x20000244

08003268 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 800326c:	f7ff fbe0 	bl	8002a30 <bmi088_update>
		if(is_gyro_offset == 1)
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <getOffset+0x104>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d1f9      	bne.n	800326c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003278:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <getOffset+0x108>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003280:	da32      	bge.n	80032e8 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <getOffset+0x10c>)
 8003284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003288:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <getOffset+0x110>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003290:	f7fd f82c 	bl	80002ec <__adddf3>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4936      	ldr	r1, [pc, #216]	; (8003374 <getOffset+0x10c>)
 800329a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 800329e:	4b35      	ldr	r3, [pc, #212]	; (8003374 <getOffset+0x10c>)
 80032a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032a4:	4b34      	ldr	r3, [pc, #208]	; (8003378 <getOffset+0x110>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80032ac:	f7fd f81e 	bl	80002ec <__adddf3>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	492f      	ldr	r1, [pc, #188]	; (8003374 <getOffset+0x10c>)
 80032b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <getOffset+0x10c>)
 80032bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <getOffset+0x110>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80032c8:	f7fd f810 	bl	80002ec <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4928      	ldr	r1, [pc, #160]	; (8003374 <getOffset+0x10c>)
 80032d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <getOffset+0x108>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <getOffset+0x108>)
 80032de:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 quaternionSet_zero();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <getOffset+0x104>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e7c1      	b.n	800326c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <getOffset+0x10c>)
 80032ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <getOffset+0x114>)
 80032f4:	f7fd fada 	bl	80008ac <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	491d      	ldr	r1, [pc, #116]	; (8003374 <getOffset+0x10c>)
 80032fe:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <getOffset+0x10c>)
 8003304:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <getOffset+0x114>)
 800330e:	f7fd facd 	bl	80008ac <__aeabi_ddiv>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4917      	ldr	r1, [pc, #92]	; (8003374 <getOffset+0x10c>)
 8003318:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <getOffset+0x10c>)
 800331e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <getOffset+0x114>)
 8003328:	f7fd fac0 	bl	80008ac <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4910      	ldr	r1, [pc, #64]	; (8003374 <getOffset+0x10c>)
 8003332:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <getOffset+0x118>)
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <getOffset+0x10c>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <getOffset+0x118>)
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <getOffset+0x10c>)
 800334a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800334e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <getOffset+0x118>)
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <getOffset+0x10c>)
 8003358:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800335c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 quaternionSet_zero();
 8003360:	f001 fe7c 	bl	800505c <quaternionSet_zero>
					 break;
 8003364:	bf00      	nop
		}

	}
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000024a 	.word	0x2000024a
 8003370:	20000280 	.word	0x20000280
 8003374:	20000250 	.word	0x20000250
 8003378:	20000244 	.word	0x20000244
 800337c:	408f4000 	.word	0x408f4000
 8003380:	20000004 	.word	0x20000004

08003384 <calculateCRC>:
extern backup_sram_datas_s *saved_datas;

union DataPack veriler;

static uint8_t calculateCRC()
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
	int check_sum = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800338e:	2301      	movs	r3, #1
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	e00a      	b.n	80033aa <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <calculateCRC+0x48>)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b3c      	cmp	r3, #60	; 0x3c
 80033ae:	d9f1      	bls.n	8003394 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	425a      	negs	r2, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	bf58      	it	pl
 80033ba:	4253      	negpl	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000284 	.word	0x20000284

080033d0 <sendRF>:

static void sendRF()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <sendRF+0x20>)
 80033d6:	f003 ff45 	bl	8007264 <HAL_DMA_GetState>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d004      	beq.n	80033ea <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <sendRF+0x24>)
 80033e4:	4804      	ldr	r0, [pc, #16]	; (80033f8 <sendRF+0x28>)
 80033e6:	f006 ff8f 	bl	800a308 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200004a0 	.word	0x200004a0
 80033f4:	20000284 	.word	0x20000284
 80033f8:	200003d4 	.word	0x200003d4

080033fc <sendPC>:

static void sendPC()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <sendPC+0x20>)
 8003402:	f003 ff2f 	bl	8007264 <HAL_DMA_GetState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b02      	cmp	r3, #2
 800340a:	d004      	beq.n	8003416 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	4904      	ldr	r1, [pc, #16]	; (8003420 <sendPC+0x24>)
 8003410:	4804      	ldr	r0, [pc, #16]	; (8003424 <sendPC+0x28>)
 8003412:	f006 ff79 	bl	800a308 <HAL_UART_Transmit_DMA>
	}
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000560 	.word	0x20000560
 8003420:	20000284 	.word	0x20000284
 8003424:	20000418 	.word	0x20000418

08003428 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6178      	str	r0, [r7, #20]
 8003430:	6139      	str	r1, [r7, #16]
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <packDatas+0x1dc>)
 8003438:	22ff      	movs	r2, #255	; 0xff
 800343a:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	edd3 7a03 	vldr	s15, [r3, #12]
 800344a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344e:	ee17 3a90 	vmov	r3, s15
 8003452:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4a6c      	ldr	r2, [pc, #432]	; (8003608 <packDatas+0x1e0>)
 8003458:	fb82 1203 	smull	r1, r2, r2, r3
 800345c:	1151      	asrs	r1, r2, #5
 800345e:	17da      	asrs	r2, r3, #31
 8003460:	1a8a      	subs	r2, r1, r2
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	fb01 f202 	mul.w	r2, r1, r2
 8003468:	1a9a      	subs	r2, r3, r2
 800346a:	4613      	mov	r3, r2
 800346c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4a65      	ldr	r2, [pc, #404]	; (8003608 <packDatas+0x1e0>)
 8003472:	fb82 1203 	smull	r1, r2, r2, r3
 8003476:	1152      	asrs	r2, r2, #5
 8003478:	17db      	asrs	r3, r3, #31
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <packDatas+0x1e0>)
 8003482:	fb82 1203 	smull	r1, r2, r2, r3
 8003486:	1151      	asrs	r1, r2, #5
 8003488:	17da      	asrs	r2, r3, #31
 800348a:	1a8a      	subs	r2, r1, r2
 800348c:	2164      	movs	r1, #100	; 0x64
 800348e:	fb01 f202 	mul.w	r2, r1, r2
 8003492:	1a9a      	subs	r2, r3, r2
 8003494:	4613      	mov	r3, r2
 8003496:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	b25a      	sxtb	r2, r3
 800349e:	7fbb      	ldrb	r3, [r7, #30]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 80034ac:	7fbb      	ldrb	r3, [r7, #30]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80034bc:	4a51      	ldr	r2, [pc, #324]	; (8003604 <packDatas+0x1dc>)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80034c2:	4a50      	ldr	r2, [pc, #320]	; (8003604 <packDatas+0x1dc>)
 80034c4:	7fbb      	ldrb	r3, [r7, #30]
 80034c6:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800360c <packDatas+0x1e4>
 80034d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034da:	ee17 3a90 	vmov	r3, s15
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <packDatas+0x1dc>)
 80034e2:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ee:	ee17 3a90 	vmov	r3, s15
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <packDatas+0x1dc>)
 80034f6:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80034fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003506:	edc7 7a01 	vstr	s15, [r7, #4]
 800350a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <packDatas+0x1dc>)
 8003510:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	edd3 7a07 	vldr	s15, [r3, #28]
 8003518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003520:	793a      	ldrb	r2, [r7, #4]
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <packDatas+0x1dc>)
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <packDatas+0x1dc>)
 800352e:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
 8003530:	4b37      	ldr	r3, [pc, #220]	; (8003610 <packDatas+0x1e8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353c:	ee17 3a90 	vmov	r3, s15
 8003540:	b21a      	sxth	r2, r3
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <packDatas+0x1dc>)
 8003544:	875a      	strh	r2, [r3, #58]	; 0x3a
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <packDatas+0x1dc>)
 800354c:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <packDatas+0x1dc>)
 8003554:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <packDatas+0x1dc>)
 800355c:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb6e 	bl	8000c48 <__aeabi_d2f>
 800356c:	4603      	mov	r3, r0
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef1 7a67 	vneg.f32	s15, s15
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <packDatas+0x1dc>)
 8003578:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f7fd fb5f 	bl	8000c48 <__aeabi_d2f>
 800358a:	4603      	mov	r3, r0
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef1 7a67 	vneg.f32	s15, s15
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <packDatas+0x1dc>)
 8003596:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fd fb50 	bl	8000c48 <__aeabi_d2f>
 80035a8:	4603      	mov	r3, r0
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <packDatas+0x1dc>)
 80035b4:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80035be:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003614 <packDatas+0x1ec>
 80035c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <packDatas+0x1dc>)
 80035c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035d2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003614 <packDatas+0x1ec>
 80035d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <packDatas+0x1dc>)
 80035dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 80035e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d917      	bls.n	8003618 <packDatas+0x1f0>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80035ee:	eeb1 7a67 	vneg.f32	s14, s15
 80035f2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003614 <packDatas+0x1ec>
 80035f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003602:	e010      	b.n	8003626 <packDatas+0x1fe>
 8003604:	20000284 	.word	0x20000284
 8003608:	51eb851f 	.word	0x51eb851f
 800360c:	42c80000 	.word	0x42c80000
 8003610:	20000004 	.word	0x20000004
 8003614:	447a0000 	.word	0x447a0000
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800361e:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003614 <packDatas+0x1ec>
 8003622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003626:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <packDatas+0x338>)
 8003628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	b25a      	sxtb	r2, r3
 8003636:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <packDatas+0x33c>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	135b      	asrs	r3, r3, #13
 8003646:	b25b      	sxtb	r3, r3
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b25a      	sxtb	r2, r3
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <packDatas+0x33c>)
 8003654:	edd3 7a01 	vldr	s15, [r3, #4]
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	139b      	asrs	r3, r3, #14
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	b25b      	sxtb	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b25a      	sxtb	r2, r3
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <packDatas+0x33c>)
 8003670:	edd3 7a02 	vldr	s15, [r3, #8]
 8003674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003678:	ee17 3a90 	vmov	r3, s15
 800367c:	13db      	asrs	r3, r3, #15
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	b25b      	sxtb	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <packDatas+0x338>)
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800369c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <packDatas+0x338>)
 80036ac:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80036ae:	f001 fad7 	bl	8004c60 <quaternionToTheta>
 80036b2:	eef0 7a40 	vmov.f32	s15, s0
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <packDatas+0x338>)
 80036b8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <packDatas+0x33c>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bfb8      	it	lt
 80036ce:	425b      	neglt	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <packDatas+0x338>)
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <packDatas+0x33c>)
 80036da:	edd3 7a01 	vldr	s15, [r3, #4]
 80036de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e2:	ee17 3a90 	vmov	r3, s15
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <packDatas+0x338>)
 80036f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <packDatas+0x33c>)
 80036f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036fe:	ee17 3a90 	vmov	r3, s15
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	425b      	neglt	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <packDatas+0x338>)
 800370c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003710:	f7ff fe38 	bl	8003384 <calculateCRC>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <packDatas+0x338>)
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <packDatas+0x338>)
 8003720:	220d      	movs	r2, #13
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <packDatas+0x338>)
 8003728:	220a      	movs	r2, #10
 800372a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	dd06      	ble.n	8003750 <packDatas+0x328>
		lora_activate();
 8003742:	f000 f88d 	bl	8003860 <lora_activate>
		sendRF();
 8003746:	f7ff fe43 	bl	80033d0 <sendRF>
		sendPC();
 800374a:	f7ff fe57 	bl	80033fc <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 800374e:	e003      	b.n	8003758 <packDatas+0x330>
		sendPC();
 8003750:	f7ff fe54 	bl	80033fc <sendPC>
		lora_deactivate();
 8003754:	f000 f896 	bl	8003884 <lora_deactivate>
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000284 	.word	0x20000284
 8003764:	20000900 	.word	0x20000900

08003768 <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	899b      	ldrh	r3, [r3, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	4619      	mov	r1, r3
 800377c:	f004 f8e8 	bl	8007950 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 8003780:	f002 fc6c 	bl	800605c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2264      	movs	r2, #100	; 0x64
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	899b      	ldrh	r3, [r3, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4619      	mov	r1, r3
 80037ae:	f004 f8cf 	bl	8007950 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037b2:	f002 fc53 	bl	800605c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037d2:	f002 fc43 	bl	800605c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d907      	bls.n	80037f6 <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	899b      	ldrh	r3, [r3, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	4619      	mov	r1, r3
 80037f2:	f004 f8ad 	bl	8007950 <HAL_GPIO_WritePin>
	}
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
 800380c:	460b      	mov	r3, r1
 800380e:	71bb      	strb	r3, [r7, #6]
 8003810:	4613      	mov	r3, r2
 8003812:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8003818:	79bb      	ldrb	r3, [r7, #6]
 800381a:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 800381c:	797b      	ldrb	r3, [r7, #5]
 800381e:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00c      	b.n	8003840 <send_command+0x40>
        command[3 + i] = data[i];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	441a      	add	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3303      	adds	r3, #3
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	3318      	adds	r3, #24
 8003834:	443b      	add	r3, r7
 8003836:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b08      	cmp	r3, #8
 8003844:	ddef      	ble.n	8003826 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8003846:	f107 0108 	add.w	r1, r7, #8
 800384a:	2364      	movs	r3, #100	; 0x64
 800384c:	220c      	movs	r2, #12
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <send_command+0x5c>)
 8003850:	f006 fcc7 	bl	800a1e2 <HAL_UART_Transmit>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200003d4 	.word	0x200003d4

08003860 <lora_activate>:

void lora_activate()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <lora_activate+0x20>)
 800386c:	f004 f870 	bl	8007950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003870:	2200      	movs	r2, #0
 8003872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003876:	4802      	ldr	r0, [pc, #8]	; (8003880 <lora_activate+0x20>)
 8003878:	f004 f86a 	bl	8007950 <HAL_GPIO_WritePin>
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40020800 	.word	0x40020800

08003884 <lora_deactivate>:

void lora_deactivate()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 8003888:	2201      	movs	r2, #1
 800388a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <lora_deactivate+0x20>)
 8003890:	f004 f85e 	bl	8007950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800389a:	4802      	ldr	r0, [pc, #8]	; (80038a4 <lora_deactivate+0x20>)
 800389c:	f004 f858 	bl	8007950 <HAL_GPIO_WritePin>
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40020800 	.word	0x40020800

080038a8 <lora_configure>:

void lora_configure(lorastruct *config)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2207      	movs	r2, #7
 80038e4:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	79db      	ldrb	r3, [r3, #7]
 80038ea:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	799b      	ldrb	r3, [r3, #6]
 80038f0:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7a5b      	ldrb	r3, [r3, #9]
 80038f6:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7c5b      	ldrb	r3, [r3, #17]
 8003900:	4313      	orrs	r3, r2
 8003902:	b2da      	uxtb	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	4313      	orrs	r3, r2
 800390a:	b2db      	uxtb	r3, r3
 800390c:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	789a      	ldrb	r2, [r3, #2]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7a9b      	ldrb	r3, [r3, #10]
 8003916:	4313      	orrs	r3, r2
 8003918:	b2da      	uxtb	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	4313      	orrs	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7a1b      	ldrb	r3, [r3, #8]
 8003928:	2b53      	cmp	r3, #83	; 0x53
 800392a:	d902      	bls.n	8003932 <lora_configure+0x8a>
    	config->channel = 83;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2253      	movs	r2, #83	; 0x53
 8003930:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7a1b      	ldrb	r3, [r3, #8]
 8003936:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7ada      	ldrb	r2, [r3, #11]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7b1b      	ldrb	r3, [r3, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7b5b      	ldrb	r3, [r3, #13]
 8003948:	4313      	orrs	r3, r2
 800394a:	b2da      	uxtb	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7b9b      	ldrb	r3, [r3, #14]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7bdb      	ldrb	r3, [r3, #15]
 8003958:	4313      	orrs	r3, r2
 800395a:	b2da      	uxtb	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7c1b      	ldrb	r3, [r3, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	795b      	ldrb	r3, [r3, #5]
 800396a:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2209      	movs	r2, #9
 8003978:	2100      	movs	r1, #0
 800397a:	20c0      	movs	r0, #192	; 0xc0
 800397c:	f7ff ff40 	bl	8003800 <send_command>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398e:	f002 faff 	bl	8005f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003992:	f000 fae3 	bl	8003f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003996:	f000 fcfb 	bl	8004390 <MX_GPIO_Init>
  MX_I2C1_Init();
 800399a:	f000 fbb3 	bl	8004104 <MX_I2C1_Init>
  MX_I2C3_Init();
 800399e:	f000 fbdf 	bl	8004160 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80039a2:	f000 fc5b 	bl	800425c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80039a6:	f000 fc83 	bl	80042b0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80039aa:	f000 fcab 	bl	8004304 <MX_DMA_Init>
  MX_ADC1_Init();
 80039ae:	f000 fb49 	bl	8004044 <MX_ADC1_Init>
  MX_UART4_Init();
 80039b2:	f000 fc29 	bl	8004208 <MX_UART4_Init>
  MX_RTC_Init();
 80039b6:	f000 fc01 	bl	80041bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2102      	movs	r1, #2
 80039be:	2009      	movs	r0, #9
 80039c0:	f003 f88b 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2102      	movs	r1, #2
 80039c8:	200a      	movs	r0, #10
 80039ca:	f003 f886 	bl	8006ada <HAL_NVIC_SetPriority>
  lora_deactivate();
 80039ce:	f7ff ff59 	bl	8003884 <lora_deactivate>
  HAL_PWR_EnableBkUpAccess();
 80039d2:	f004 fff9 	bl	80089c8 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80039d6:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <main+0x28c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a8e      	ldr	r2, [pc, #568]	; (8003c14 <main+0x28c>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80039e2:	f005 f805 	bl	80089f0 <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039e6:	2200      	movs	r2, #0
 80039e8:	498b      	ldr	r1, [pc, #556]	; (8003c18 <main+0x290>)
 80039ea:	488c      	ldr	r0, [pc, #560]	; (8003c1c <main+0x294>)
 80039ec:	f006 f9fe 	bl	8009dec <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80039f0:	2200      	movs	r2, #0
 80039f2:	498b      	ldr	r1, [pc, #556]	; (8003c20 <main+0x298>)
 80039f4:	4889      	ldr	r0, [pc, #548]	; (8003c1c <main+0x294>)
 80039f6:	f006 fa57 	bl	8009ea8 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80039fa:	2005      	movs	r0, #5
 80039fc:	f002 fb3a 	bl	8006074 <HAL_Delay>
  bme280_begin();
 8003a00:	f000 fd58 	bl	80044b4 <bme280_begin>
  bmi088_begin();
 8003a04:	f000 fd6c 	bl	80044e0 <bmi088_begin>

#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
#endif

  if(measure_abs_time(sTime, sDate) > 1)
 8003a08:	4b83      	ldr	r3, [pc, #524]	; (8003c18 <main+0x290>)
 8003a0a:	4a85      	ldr	r2, [pc, #532]	; (8003c20 <main+0x298>)
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	9201      	str	r2, [sp, #4]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	9200      	str	r2, [sp, #0]
 8003a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a16:	f001 fb61 	bl	80050dc <measure_abs_time>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d964      	bls.n	8003aea <main+0x162>
  {
	  if(is_BMI_ok)
 8003a20:	4b80      	ldr	r3, [pc, #512]	; (8003c24 <main+0x29c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <main+0xa4>
		  bmi088_config();
 8003a28:	f7fe fdbe 	bl	80025a8 <bmi088_config>
	  if(is_BME_ok)
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <main+0x2a0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <main+0xb0>
		  bme280_config();
 8003a34:	f7fe f820 	bl	8001a78 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 8003a38:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <main+0x2a4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 8003a40:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <main+0x2a4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 8003a4a:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <main+0x2a4>)
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 8003a5a:	4b74      	ldr	r3, [pc, #464]	; (8003c2c <main+0x2a4>)
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <main+0x2a4>)
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 8003a7a:	4b6c      	ldr	r3, [pc, #432]	; (8003c2c <main+0x2a4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8003a84:	4b69      	ldr	r3, [pc, #420]	; (8003c2c <main+0x2a4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <main+0x2a4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <main+0x2a4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	e00a      	b.n	8003abe <main+0x136>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aac:	4860      	ldr	r0, [pc, #384]	; (8003c30 <main+0x2a8>)
 8003aae:	f003 ff68 	bl	8007982 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8003ab2:	2032      	movs	r0, #50	; 0x32
 8003ab4:	f002 fade 	bl	8006074 <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3301      	adds	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b13      	cmp	r3, #19
 8003ac2:	ddf1      	ble.n	8003aa8 <main+0x120>
	  }

	  loraBegin();
 8003ac4:	f000 fd2e 	bl	8004524 <loraBegin>
	  lora_deactivate();
 8003ac8:	f7ff fedc 	bl	8003884 <lora_deactivate>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8003acc:	2364      	movs	r3, #100	; 0x64
 8003ace:	2213      	movs	r2, #19
 8003ad0:	4958      	ldr	r1, [pc, #352]	; (8003c34 <main+0x2ac>)
 8003ad2:	4859      	ldr	r0, [pc, #356]	; (8003c38 <main+0x2b0>)
 8003ad4:	f006 fb85 	bl	800a1e2 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok)
 8003ad8:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <main+0x29c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <main+0x15c>
		  getOffset();
 8003ae0:	f7ff fbc2 	bl	8003268 <getOffset>

	  HAL_Delay(10);
 8003ae4:	200a      	movs	r0, #10
 8003ae6:	f002 fac5 	bl	8006074 <HAL_Delay>
  }

  HAL_UART_DeInit(&huart4);
 8003aea:	4854      	ldr	r0, [pc, #336]	; (8003c3c <main+0x2b4>)
 8003aec:	f006 fb4a 	bl	800a184 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003af0:	4851      	ldr	r0, [pc, #324]	; (8003c38 <main+0x2b0>)
 8003af2:	f006 fb47 	bl	800a184 <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <main+0x2b4>)
 8003af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003afc:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003afe:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <main+0x2b0>)
 8003b00:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003b04:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 8003b06:	484d      	ldr	r0, [pc, #308]	; (8003c3c <main+0x2b4>)
 8003b08:	f006 faef 	bl	800a0ea <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8003b0c:	484a      	ldr	r0, [pc, #296]	; (8003c38 <main+0x2b0>)
 8003b0e:	f006 faec 	bl	800a0ea <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8003b12:	484b      	ldr	r0, [pc, #300]	; (8003c40 <main+0x2b8>)
 8003b14:	f003 f826 	bl	8006b64 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8003b18:	484a      	ldr	r0, [pc, #296]	; (8003c44 <main+0x2bc>)
 8003b1a:	f003 f823 	bl	8006b64 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8003b1e:	484a      	ldr	r0, [pc, #296]	; (8003c48 <main+0x2c0>)
 8003b20:	f003 f820 	bl	8006b64 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 8003b24:	4849      	ldr	r0, [pc, #292]	; (8003c4c <main+0x2c4>)
 8003b26:	f003 f81d 	bl	8006b64 <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	4948      	ldr	r1, [pc, #288]	; (8003c50 <main+0x2c8>)
 8003b2e:	4843      	ldr	r0, [pc, #268]	; (8003c3c <main+0x2b4>)
 8003b30:	f006 fc68 	bl	800a404 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <main+0x2cc>)
 8003b36:	4a48      	ldr	r2, [pc, #288]	; (8003c58 <main+0x2d0>)
 8003b38:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8003b3a:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <main+0x2cc>)
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <main+0x2d4>)
 8003b42:	4a45      	ldr	r2, [pc, #276]	; (8003c58 <main+0x2d0>)
 8003b44:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 8003b46:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <main+0x2d4>)
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <main+0x2d8>)
 8003b4e:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <main+0x2a8>)
 8003b50:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <main+0x2d8>)
 8003b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b58:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <main+0x2dc>)
 8003b5c:	4a34      	ldr	r2, [pc, #208]	; (8003c30 <main+0x2a8>)
 8003b5e:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 8003b60:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <main+0x2dc>)
 8003b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b66:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b68:	2009      	movs	r0, #9
 8003b6a:	f002 ffd2 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b6e:	200a      	movs	r0, #10
 8003b70:	f002 ffcf 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 8003b74:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <main+0x2e0>)
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <main+0x2e4>)
 8003b78:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 8003b7a:	482f      	ldr	r0, [pc, #188]	; (8003c38 <main+0x2b0>)
 8003b7c:	f001 ffdc 	bl	8005b38 <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 8003b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b84:	4837      	ldr	r0, [pc, #220]	; (8003c64 <main+0x2dc>)
 8003b86:	f7ff fe07 	bl	8003798 <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <main+0x2e8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <main+0x2e8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	749a      	strb	r2, [r3, #18]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <main+0x29c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <main+0x21a>
		  bmi088_update();
 8003b9e:	f7fe ff47 	bl	8002a30 <bmi088_update>
	  if(is_BME_ok)
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <main+0x2a0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <main+0x226>
		  bme280_update();
 8003baa:	f7fe f925 	bl	8001df8 <bme280_update>

	  measurePower(&guc);
 8003bae:	4831      	ldr	r0, [pc, #196]	; (8003c74 <main+0x2ec>)
 8003bb0:	f000 fcea 	bl	8004588 <measurePower>

	  ext_pin_update(&mos_1);
 8003bb4:	4827      	ldr	r0, [pc, #156]	; (8003c54 <main+0x2cc>)
 8003bb6:	f7ff fe08 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&mos_2);
 8003bba:	4828      	ldr	r0, [pc, #160]	; (8003c5c <main+0x2d4>)
 8003bbc:	f7ff fe05 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&led);
 8003bc0:	4827      	ldr	r0, [pc, #156]	; (8003c60 <main+0x2d8>)
 8003bc2:	f7ff fe02 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&buzzer);
 8003bc6:	4827      	ldr	r0, [pc, #156]	; (8003c64 <main+0x2dc>)
 8003bc8:	f7ff fdff 	bl	80037ca <ext_pin_update>



#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <main+0x2a0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <main+0x252>
		  algorithm_1_update(&BME280_sensor);
 8003bd4:	4828      	ldr	r0, [pc, #160]	; (8003c78 <main+0x2f0>)
 8003bd6:	f7fd fbbb 	bl	8001350 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  teta = quaternionToTheta();
 8003bda:	f001 f841 	bl	8004c60 <quaternionToTheta>
 8003bde:	eef0 7a40 	vmov.f32	s15, s0
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <main+0x2f4>)
 8003be4:	edc3 7a00 	vstr	s15, [r3]
	  if(is_BMI_ok)
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <main+0x29c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <main+0x27a>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <main+0x2f4>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfa:	491d      	ldr	r1, [pc, #116]	; (8003c70 <main+0x2e8>)
 8003bfc:	481e      	ldr	r0, [pc, #120]	; (8003c78 <main+0x2f0>)
 8003bfe:	f7fd fcd3 	bl	80015a8 <algorithm_2_update>
#endif

		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <main+0x2a4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d13d      	bne.n	8003c88 <main+0x300>
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <main+0x2f8>)
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <main+0x2fc>)
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e042      	b.n	8003c9a <main+0x312>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	200007c4 	.word	0x200007c4
 8003c1c:	200003b4 	.word	0x200003b4
 8003c20:	200007d8 	.word	0x200007d8
 8003c24:	20000800 	.word	0x20000800
 8003c28:	200007fc 	.word	0x200007fc
 8003c2c:	20000004 	.word	0x20000004
 8003c30:	40020400 	.word	0x40020400
 8003c34:	08012688 	.word	0x08012688
 8003c38:	2000045c 	.word	0x2000045c
 8003c3c:	200003d4 	.word	0x200003d4
 8003c40:	20000560 	.word	0x20000560
 8003c44:	200005c0 	.word	0x200005c0
 8003c48:	200004a0 	.word	0x200004a0
 8003c4c:	20000500 	.word	0x20000500
 8003c50:	2000077c 	.word	0x2000077c
 8003c54:	20000784 	.word	0x20000784
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	20000794 	.word	0x20000794
 8003c60:	200007a4 	.word	0x200007a4
 8003c64:	200007b4 	.word	0x200007b4
 8003c68:	200007ec 	.word	0x200007ec
 8003c6c:	bf800000 	.word	0xbf800000
 8003c70:	20000650 	.word	0x20000650
 8003c74:	2000076c 	.word	0x2000076c
 8003c78:	20000620 	.word	0x20000620
 8003c7c:	200007f4 	.word	0x200007f4
 8003c80:	20000000 	.word	0x20000000
 8003c84:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
 8003c88:	4b9b      	ldr	r3, [pc, #620]	; (8003ef8 <main+0x570>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d903      	bls.n	8003c9a <main+0x312>
 8003c92:	4b9a      	ldr	r3, [pc, #616]	; (8003efc <main+0x574>)
 8003c94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c98:	601a      	str	r2, [r3, #0]

	  	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003c9a:	f002 f9df 	bl	800605c <HAL_GetTick>
 8003c9e:	ee07 0a90 	vmov	s15, r0
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	ee17 0a90 	vmov	r0, s15
 8003caa:	f7fc fc7d 	bl	80005a8 <__aeabi_f2d>
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <main+0x578>)
 8003cb4:	f7fc fdfa 	bl	80008ac <__aeabi_ddiv>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7fc ffc2 	bl	8000c48 <__aeabi_d2f>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a8f      	ldr	r2, [pc, #572]	; (8003f04 <main+0x57c>)
 8003cc8:	6013      	str	r3, [r2, #0]

	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 8003cca:	4b8e      	ldr	r3, [pc, #568]	; (8003f04 <main+0x57c>)
 8003ccc:	ed93 7a00 	vldr	s14, [r3]
 8003cd0:	4b8d      	ldr	r3, [pc, #564]	; (8003f08 <main+0x580>)
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cda:	eef0 7ae7 	vabs.f32	s15, s15
 8003cde:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003f0c <main+0x584>
 8003ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	dd5a      	ble.n	8003da2 <main+0x41a>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 8003cec:	4b82      	ldr	r3, [pc, #520]	; (8003ef8 <main+0x570>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d151      	bne.n	8003d9a <main+0x412>
 8003cf6:	4b86      	ldr	r3, [pc, #536]	; (8003f10 <main+0x588>)
 8003cf8:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8003cfc:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003ee8 <main+0x560>
 8003d00:	eeb0 0a47 	vmov.f32	s0, s14
 8003d04:	eef0 0a67 	vmov.f32	s1, s15
 8003d08:	f00c fe66 	bl	80109d8 <pow>
 8003d0c:	ec55 4b10 	vmov	r4, r5, d0
 8003d10:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <main+0x588>)
 8003d12:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8003d16:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003ee8 <main+0x560>
 8003d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d1e:	eef0 0a67 	vmov.f32	s1, s15
 8003d22:	f00c fe59 	bl	80109d8 <pow>
 8003d26:	ec53 2b10 	vmov	r2, r3, d0
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fadd 	bl	80002ec <__adddf3>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4614      	mov	r4, r2
 8003d38:	461d      	mov	r5, r3
 8003d3a:	4b75      	ldr	r3, [pc, #468]	; (8003f10 <main+0x588>)
 8003d3c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8003d40:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003ee8 <main+0x560>
 8003d44:	eeb0 0a47 	vmov.f32	s0, s14
 8003d48:	eef0 0a67 	vmov.f32	s1, s15
 8003d4c:	f00c fe44 	bl	80109d8 <pow>
 8003d50:	ec53 2b10 	vmov	r2, r3, d0
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fac8 	bl	80002ec <__adddf3>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	ec43 2b17 	vmov	d7, r2, r3
 8003d64:	eeb0 0a47 	vmov.f32	s0, s14
 8003d68:	eef0 0a67 	vmov.f32	s1, s15
 8003d6c:	f00c fea4 	bl	8010ab8 <sqrt>
 8003d70:	ec51 0b10 	vmov	r0, r1, d0
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	4b66      	ldr	r3, [pc, #408]	; (8003f14 <main+0x58c>)
 8003d7a:	f7fc fedf 	bl	8000b3c <__aeabi_dcmplt>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <main+0x412>
 8003d84:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <main+0x590>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d106      	bne.n	8003d9a <main+0x412>
			 {
				 quaternionSet_zero();
 8003d8c:	f001 f966 	bl	800505c <quaternionSet_zero>
				 ext_pin_open_duration(&buzzer, 500);
 8003d90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d94:	4861      	ldr	r0, [pc, #388]	; (8003f1c <main+0x594>)
 8003d96:	f7ff fcff 	bl	8003798 <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <main+0x57c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5a      	ldr	r2, [pc, #360]	; (8003f08 <main+0x580>)
 8003da0:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 8003da2:	4b5f      	ldr	r3, [pc, #380]	; (8003f20 <main+0x598>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <main+0x428>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 8003daa:	485e      	ldr	r0, [pc, #376]	; (8003f24 <main+0x59c>)
 8003dac:	f001 fed4 	bl	8005b58 <Usr_GpsL86GetValues>
		 }

		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003db0:	f002 f954 	bl	800605c <HAL_GetTick>
 8003db4:	ee07 0a90 	vmov	s15, r0
 8003db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbc:	ee17 0a90 	vmov	r0, s15
 8003dc0:	f7fc fbf2 	bl	80005a8 <__aeabi_f2d>
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	4b4d      	ldr	r3, [pc, #308]	; (8003f00 <main+0x578>)
 8003dca:	f7fc fd6f 	bl	80008ac <__aeabi_ddiv>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7fc ff37 	bl	8000c48 <__aeabi_d2f>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a49      	ldr	r2, [pc, #292]	; (8003f04 <main+0x57c>)
 8003dde:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 8003de0:	4b48      	ldr	r3, [pc, #288]	; (8003f04 <main+0x57c>)
 8003de2:	ed93 7a00 	vldr	s14, [r3]
 8003de6:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <main+0x5a0>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df0:	eef0 7ae7 	vabs.f32	s15, s15
 8003df4:	ee17 0a90 	vmov	r0, s15
 8003df8:	f7fc fbd6 	bl	80005a8 <__aeabi_f2d>
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <main+0x574>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc fbcf 	bl	80005a8 <__aeabi_f2d>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	4946      	ldr	r1, [pc, #280]	; (8003f2c <main+0x5a4>)
 8003e14:	f7fc fd4a 	bl	80008ac <__aeabi_ddiv>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc feaa 	bl	8000b78 <__aeabi_dcmpgt>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00f      	beq.n	8003e4a <main+0x4c2>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8003e2a:	f000 fc41 	bl	80046b0 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <main+0x570>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <main+0x5a8>)
 8003e38:	4a3a      	ldr	r2, [pc, #232]	; (8003f24 <main+0x59c>)
 8003e3a:	493e      	ldr	r1, [pc, #248]	; (8003f34 <main+0x5ac>)
 8003e3c:	4834      	ldr	r0, [pc, #208]	; (8003f10 <main+0x588>)
 8003e3e:	f7ff faf3 	bl	8003428 <packDatas>
			 loraLastTime = currentTime;
 8003e42:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <main+0x57c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a38      	ldr	r2, [pc, #224]	; (8003f28 <main+0x5a0>)
 8003e48:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }


		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <main+0x57c>)
 8003e4c:	ed93 7a00 	vldr	s14, [r3]
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <main+0x5b0>)
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e5e:	ee17 0a90 	vmov	r0, s15
 8003e62:	f7fc fba1 	bl	80005a8 <__aeabi_f2d>
 8003e66:	a322      	add	r3, pc, #136	; (adr r3, 8003ef0 <main+0x568>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fe84 	bl	8000b78 <__aeabi_dcmpgt>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <main+0x51c>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e76:	2200      	movs	r2, #0
 8003e78:	4930      	ldr	r1, [pc, #192]	; (8003f3c <main+0x5b4>)
 8003e7a:	4831      	ldr	r0, [pc, #196]	; (8003f40 <main+0x5b8>)
 8003e7c:	f005 ffb6 	bl	8009dec <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e80:	2200      	movs	r2, #0
 8003e82:	4930      	ldr	r1, [pc, #192]	; (8003f44 <main+0x5bc>)
 8003e84:	482e      	ldr	r0, [pc, #184]	; (8003f40 <main+0x5b8>)
 8003e86:	f006 f80f 	bl	8009ea8 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <main+0x5b4>)
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <main+0x5bc>)
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	9201      	str	r2, [sp, #4]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	9200      	str	r2, [sp, #0]
 8003e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e98:	f001 f8e6 	bl	8005068 <save_time>
			 lastTime = currentTime;
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <main+0x57c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <main+0x5b0>)
 8003ea2:	6013      	str	r3, [r2, #0]
		 }

		 //This block is used for manual deploy via telemetry for testing.
		if(is_updated_uart4 == 1)
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <main+0x5c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f47f ae74 	bne.w	8003b96 <main+0x20e>
		{
			//ext_pin_open(&buzzer);
		  if(strcmp((char*)mosfet_buffer, "OK1") == 0)
 8003eae:	4927      	ldr	r1, [pc, #156]	; (8003f4c <main+0x5c4>)
 8003eb0:	4827      	ldr	r0, [pc, #156]	; (8003f50 <main+0x5c8>)
 8003eb2:	f7fc f9ad 	bl	8000210 <strcmp>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <main+0x53e>
		  {
			  deploy_p_1();
 8003ebc:	f000 fc46 	bl	800474c <deploy_p_1>
			  ext_pin_open(&led);
 8003ec0:	4824      	ldr	r0, [pc, #144]	; (8003f54 <main+0x5cc>)
 8003ec2:	f7ff fc51 	bl	8003768 <ext_pin_open>
		  }
		  if(strcmp((char*)mosfet_buffer, "OK2") == 0)
 8003ec6:	4924      	ldr	r1, [pc, #144]	; (8003f58 <main+0x5d0>)
 8003ec8:	4821      	ldr	r0, [pc, #132]	; (8003f50 <main+0x5c8>)
 8003eca:	f7fc f9a1 	bl	8000210 <strcmp>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <main+0x556>
		  {
			  deploy_p_2();
 8003ed4:	f000 fc4a 	bl	800476c <deploy_p_2>
			  ext_pin_open(&led);
 8003ed8:	481e      	ldr	r0, [pc, #120]	; (8003f54 <main+0x5cc>)
 8003eda:	f7ff fc45 	bl	8003768 <ext_pin_open>
		  }
		  is_updated_uart4 = 0;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <main+0x5c0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
	  if(is_BMI_ok)
 8003ee4:	e657      	b.n	8003b96 <main+0x20e>
 8003ee6:	bf00      	nop
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	40000000 	.word	0x40000000
 8003ef0:	9999999a 	.word	0x9999999a
 8003ef4:	3fc99999 	.word	0x3fc99999
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	20000000 	.word	0x20000000
 8003f00:	408f4000 	.word	0x408f4000
 8003f04:	200007dc 	.word	0x200007dc
 8003f08:	200007e4 	.word	0x200007e4
 8003f0c:	42700000 	.word	0x42700000
 8003f10:	20000650 	.word	0x20000650
 8003f14:	40140000 	.word	0x40140000
 8003f18:	20000800 	.word	0x20000800
 8003f1c:	200007b4 	.word	0x200007b4
 8003f20:	20000910 	.word	0x20000910
 8003f24:	2000073c 	.word	0x2000073c
 8003f28:	200007ec 	.word	0x200007ec
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	2000076c 	.word	0x2000076c
 8003f34:	20000620 	.word	0x20000620
 8003f38:	200007e0 	.word	0x200007e0
 8003f3c:	200007c4 	.word	0x200007c4
 8003f40:	200003b4 	.word	0x200003b4
 8003f44:	200007d8 	.word	0x200007d8
 8003f48:	20000780 	.word	0x20000780
 8003f4c:	0801269c 	.word	0x0801269c
 8003f50:	2000077c 	.word	0x2000077c
 8003f54:	200007a4 	.word	0x200007a4
 8003f58:	080126a0 	.word	0x080126a0

08003f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b094      	sub	sp, #80	; 0x50
 8003f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	2234      	movs	r2, #52	; 0x34
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f007 fbfc 	bl	800b768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	2300      	movs	r3, #0
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <SystemClock_Config+0xe0>)
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <SystemClock_Config+0xe0>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <SystemClock_Config+0xe0>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4b27      	ldr	r3, [pc, #156]	; (8004040 <SystemClock_Config+0xe4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <SystemClock_Config+0xe4>)
 8003fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <SystemClock_Config+0xe4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003fb8:	2305      	movs	r3, #5
 8003fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003fd4:	23b4      	movs	r3, #180	; 0xb4
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fe4:	f107 031c 	add.w	r3, r7, #28
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f005 fbeb 	bl	80097c4 <HAL_RCC_OscConfig>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ff4:	f000 fbca 	bl	800478c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ff8:	f004 fd20 	bl	8008a3c <HAL_PWREx_EnableOverDrive>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004002:	f000 fbc3 	bl	800478c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004006:	230f      	movs	r3, #15
 8004008:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800400a:	2302      	movs	r3, #2
 800400c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004012:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	2105      	movs	r1, #5
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fd59 	bl	8008adc <HAL_RCC_ClockConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004030:	f000 fbac 	bl	800478c <Error_Handler>
  }
}
 8004034:	bf00      	nop
 8004036:	3750      	adds	r7, #80	; 0x50
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40023800 	.word	0x40023800
 8004040:	40007000 	.word	0x40007000

08004044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800404a:	463b      	mov	r3, r7
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004058:	4a28      	ldr	r2, [pc, #160]	; (80040fc <MX_ADC1_Init+0xb8>)
 800405a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <MX_ADC1_Init+0xb4>)
 800405e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <MX_ADC1_Init+0xb4>)
 800406c:	2201      	movs	r2, #1
 800406e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004072:	2201      	movs	r2, #1
 8004074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004080:	2200      	movs	r2, #0
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <MX_ADC1_Init+0xbc>)
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <MX_ADC1_Init+0xb4>)
 800408c:	2200      	movs	r2, #0
 800408e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004092:	2202      	movs	r2, #2
 8004094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004096:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <MX_ADC1_Init+0xb4>)
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <MX_ADC1_Init+0xb4>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040a4:	4814      	ldr	r0, [pc, #80]	; (80040f8 <MX_ADC1_Init+0xb4>)
 80040a6:	f002 f809 	bl	80060bc <HAL_ADC_Init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040b0:	f000 fb6c 	bl	800478c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040b4:	230c      	movs	r3, #12
 80040b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80040bc:	2304      	movs	r3, #4
 80040be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040c0:	463b      	mov	r3, r7
 80040c2:	4619      	mov	r1, r3
 80040c4:	480c      	ldr	r0, [pc, #48]	; (80040f8 <MX_ADC1_Init+0xb4>)
 80040c6:	f002 f9db 	bl	8006480 <HAL_ADC_ConfigChannel>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80040d0:	f000 fb5c 	bl	800478c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80040d4:	230b      	movs	r3, #11
 80040d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80040d8:	2302      	movs	r3, #2
 80040da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040dc:	463b      	mov	r3, r7
 80040de:	4619      	mov	r1, r3
 80040e0:	4805      	ldr	r0, [pc, #20]	; (80040f8 <MX_ADC1_Init+0xb4>)
 80040e2:	f002 f9cd 	bl	8006480 <HAL_ADC_ConfigChannel>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80040ec:	f000 fb4e 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200002c4 	.word	0x200002c4
 80040fc:	40012000 	.word	0x40012000
 8004100:	0f000001 	.word	0x0f000001

08004104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <MX_I2C1_Init+0x50>)
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <MX_I2C1_Init+0x54>)
 800410c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <MX_I2C1_Init+0x50>)
 8004110:	4a12      	ldr	r2, [pc, #72]	; (800415c <MX_I2C1_Init+0x58>)
 8004112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <MX_I2C1_Init+0x50>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <MX_I2C1_Init+0x50>)
 800411c:	2200      	movs	r2, #0
 800411e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <MX_I2C1_Init+0x50>)
 8004122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <MX_I2C1_Init+0x50>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <MX_I2C1_Init+0x50>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <MX_I2C1_Init+0x50>)
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <MX_I2C1_Init+0x50>)
 800413c:	2200      	movs	r2, #0
 800413e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004140:	4804      	ldr	r0, [pc, #16]	; (8004154 <MX_I2C1_Init+0x50>)
 8004142:	f003 fc51 	bl	80079e8 <HAL_I2C_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800414c:	f000 fb1e 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000030c 	.word	0x2000030c
 8004158:	40005400 	.word	0x40005400
 800415c:	000186a0 	.word	0x000186a0

08004160 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004164:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <MX_I2C3_Init+0x54>)
 8004168:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <MX_I2C3_Init+0x50>)
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <MX_I2C3_Init+0x58>)
 800416e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <MX_I2C3_Init+0x50>)
 800417e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004182:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004186:	2200      	movs	r2, #0
 8004188:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <MX_I2C3_Init+0x50>)
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <MX_I2C3_Init+0x50>)
 8004198:	2200      	movs	r2, #0
 800419a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <MX_I2C3_Init+0x50>)
 800419e:	f003 fc23 	bl	80079e8 <HAL_I2C_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80041a8:	f000 faf0 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000360 	.word	0x20000360
 80041b4:	40005c00 	.word	0x40005c00
 80041b8:	000186a0 	.word	0x000186a0

080041bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <MX_RTC_Init+0x44>)
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <MX_RTC_Init+0x48>)
 80041c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <MX_RTC_Init+0x44>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <MX_RTC_Init+0x44>)
 80041ce:	227f      	movs	r2, #127	; 0x7f
 80041d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <MX_RTC_Init+0x44>)
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <MX_RTC_Init+0x44>)
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <MX_RTC_Init+0x44>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <MX_RTC_Init+0x44>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <MX_RTC_Init+0x44>)
 80041ec:	f005 fd88 	bl	8009d00 <HAL_RTC_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80041f6:	f000 fac9 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200003b4 	.word	0x200003b4
 8004204:	40002800 	.word	0x40002800

08004208 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <MX_UART4_Init+0x4c>)
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <MX_UART4_Init+0x50>)
 8004210:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <MX_UART4_Init+0x4c>)
 8004214:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004218:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <MX_UART4_Init+0x4c>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <MX_UART4_Init+0x4c>)
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <MX_UART4_Init+0x4c>)
 8004228:	2200      	movs	r2, #0
 800422a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <MX_UART4_Init+0x4c>)
 800422e:	220c      	movs	r2, #12
 8004230:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <MX_UART4_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <MX_UART4_Init+0x4c>)
 800423a:	2200      	movs	r2, #0
 800423c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800423e:	4805      	ldr	r0, [pc, #20]	; (8004254 <MX_UART4_Init+0x4c>)
 8004240:	f005 ff53 	bl	800a0ea <HAL_UART_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800424a:	f000 fa9f 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200003d4 	.word	0x200003d4
 8004258:	40004c00 	.word	0x40004c00

0800425c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <MX_USART1_UART_Init+0x50>)
 8004264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800426c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800426e:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004276:	2200      	movs	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004282:	220c      	movs	r2, #12
 8004284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004292:	4805      	ldr	r0, [pc, #20]	; (80042a8 <MX_USART1_UART_Init+0x4c>)
 8004294:	f005 ff29 	bl	800a0ea <HAL_UART_Init>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800429e:	f000 fa75 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000418 	.word	0x20000418
 80042ac:	40011000 	.word	0x40011000

080042b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <MX_USART2_UART_Init+0x50>)
 80042b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042d6:	220c      	movs	r2, #12
 80042d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042e6:	4805      	ldr	r0, [pc, #20]	; (80042fc <MX_USART2_UART_Init+0x4c>)
 80042e8:	f005 feff 	bl	800a0ea <HAL_UART_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042f2:	f000 fa4b 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000045c 	.word	0x2000045c
 8004300:	40004400 	.word	0x40004400

08004304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	4b1f      	ldr	r3, [pc, #124]	; (800438c <MX_DMA_Init+0x88>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <MX_DMA_Init+0x88>)
 8004314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <MX_DMA_Init+0x88>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <MX_DMA_Init+0x88>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <MX_DMA_Init+0x88>)
 8004330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004334:	6313      	str	r3, [r2, #48]	; 0x30
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <MX_DMA_Init+0x88>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	200d      	movs	r0, #13
 8004348:	f002 fbc7 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800434c:	200d      	movs	r0, #13
 800434e:	f002 fbe0 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	200f      	movs	r0, #15
 8004358:	f002 fbbf 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800435c:	200f      	movs	r0, #15
 800435e:	f002 fbd8 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	2010      	movs	r0, #16
 8004368:	f002 fbb7 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800436c:	2010      	movs	r0, #16
 800436e:	f002 fbd0 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	2046      	movs	r0, #70	; 0x46
 8004378:	f002 fbaf 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800437c:	2046      	movs	r0, #70	; 0x46
 800437e:	f002 fbc8 	bl	8006b12 <HAL_NVIC_EnableIRQ>

}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800

08004390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a3e      	ldr	r2, [pc, #248]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
 80043b6:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <MX_GPIO_Init+0x118>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <MX_GPIO_Init+0x118>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <MX_GPIO_Init+0x118>)
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <MX_GPIO_Init+0x118>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8004416:	2200      	movs	r2, #0
 8004418:	f640 4188 	movw	r1, #3208	; 0xc88
 800441c:	4823      	ldr	r0, [pc, #140]	; (80044ac <MX_GPIO_Init+0x11c>)
 800441e:	f003 fa97 	bl	8007950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8004422:	2200      	movs	r2, #0
 8004424:	f243 0103 	movw	r1, #12291	; 0x3003
 8004428:	4821      	ldr	r0, [pc, #132]	; (80044b0 <MX_GPIO_Init+0x120>)
 800442a:	f003 fa91 	bl	8007950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 800442e:	f640 4388 	movw	r3, #3208	; 0xc88
 8004432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004434:	2301      	movs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	4619      	mov	r1, r3
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <MX_GPIO_Init+0x11c>)
 8004448:	f002 fffa 	bl	8007440 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 800444c:	f243 0303 	movw	r3, #12291	; 0x3003
 8004450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004452:	2301      	movs	r3, #1
 8004454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	4619      	mov	r1, r3
 8004464:	4812      	ldr	r0, [pc, #72]	; (80044b0 <MX_GPIO_Init+0x120>)
 8004466:	f002 ffeb 	bl	8007440 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 800446a:	2318      	movs	r3, #24
 800446c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800446e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	4619      	mov	r1, r3
 800447e:	480c      	ldr	r0, [pc, #48]	; (80044b0 <MX_GPIO_Init+0x120>)
 8004480:	f002 ffde 	bl	8007440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8004484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	4619      	mov	r1, r3
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <MX_GPIO_Init+0x120>)
 800449a:	f002 ffd1 	bl	8007440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/


}
 800449e:	bf00      	nop
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020400 	.word	0x40020400

080044b4 <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <bme280_begin+0x24>)
 80044ba:	2203      	movs	r2, #3
 80044bc:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <bme280_begin+0x24>)
 80044c0:	2203      	movs	r2, #3
 80044c2:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <bme280_begin+0x24>)
 80044c6:	2204      	movs	r2, #4
 80044c8:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 80044ca:	4904      	ldr	r1, [pc, #16]	; (80044dc <bme280_begin+0x28>)
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <bme280_begin+0x24>)
 80044ce:	f7fd fc5d 	bl	8001d8c <bme280_init>
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000620 	.word	0x20000620
 80044dc:	2000030c 	.word	0x2000030c

080044e0 <bmi088_begin>:
void bmi088_begin()
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <bmi088_begin+0x3c>)
 80044e6:	2208      	movs	r2, #8
 80044e8:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <bmi088_begin+0x3c>)
 80044ec:	2209      	movs	r2, #9
 80044ee:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <bmi088_begin+0x3c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <bmi088_begin+0x3c>)
 80044f8:	2202      	movs	r2, #2
 80044fa:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <bmi088_begin+0x3c>)
 80044fe:	2201      	movs	r2, #1
 8004500:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <bmi088_begin+0x3c>)
 8004504:	2200      	movs	r2, #0
 8004506:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <bmi088_begin+0x3c>)
 800450a:	2200      	movs	r2, #0
 800450c:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 800450e:	4904      	ldr	r1, [pc, #16]	; (8004520 <bmi088_begin+0x40>)
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <bmi088_begin+0x3c>)
 8004512:	f7fe fa37 	bl	8002984 <bmi088_init>
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000650 	.word	0x20000650
 8004520:	20000360 	.word	0x20000360

08004524 <loraBegin>:


void loraBegin()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004528:	2200      	movs	r2, #0
 800452a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800452e:	4814      	ldr	r0, [pc, #80]	; (8004580 <loraBegin+0x5c>)
 8004530:	f003 fa0e 	bl	8007950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8004534:	2201      	movs	r2, #1
 8004536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800453a:	4811      	ldr	r0, [pc, #68]	; (8004580 <loraBegin+0x5c>)
 800453c:	f003 fa08 	bl	8007950 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	f001 fd97 	bl	8006074 <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <loraBegin+0x60>)
 8004548:	22e0      	movs	r2, #224	; 0xe0
 800454a:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <loraBegin+0x60>)
 800454e:	2206      	movs	r2, #6
 8004550:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <loraBegin+0x60>)
 8004554:	2280      	movs	r2, #128	; 0x80
 8004556:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <loraBegin+0x60>)
 800455a:	2200      	movs	r2, #0
 800455c:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <loraBegin+0x60>)
 8004560:	2200      	movs	r2, #0
 8004562:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <loraBegin+0x60>)
 8004566:	2200      	movs	r2, #0
 8004568:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <loraBegin+0x60>)
 800456c:	2219      	movs	r2, #25
 800456e:	721a      	strb	r2, [r3, #8]
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
#endif

    lora_configure(&e22_lora);
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <loraBegin+0x60>)
 8004572:	f7ff f999 	bl	80038a8 <lora_configure>

    HAL_Delay(100);
 8004576:	2064      	movs	r0, #100	; 0x64
 8004578:	f001 fd7c 	bl	8006074 <HAL_Delay>
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40020800 	.word	0x40020800
 8004584:	20000728 	.word	0x20000728

08004588 <measurePower>:

void measurePower(power *guc_)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	ed2d 8b02 	vpush	{d8}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8004594:	4840      	ldr	r0, [pc, #256]	; (8004698 <measurePower+0x110>)
 8004596:	f001 fdd5 	bl	8006144 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800459a:	210a      	movs	r1, #10
 800459c:	483e      	ldr	r0, [pc, #248]	; (8004698 <measurePower+0x110>)
 800459e:	f001 fed6 	bl	800634e <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 80045a2:	483d      	ldr	r0, [pc, #244]	; (8004698 <measurePower+0x110>)
 80045a4:	f001 ff5e 	bl	8006464 <HAL_ADC_GetValue>
 80045a8:	4603      	mov	r3, r0
 80045aa:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80045ac:	210a      	movs	r1, #10
 80045ae:	483a      	ldr	r0, [pc, #232]	; (8004698 <measurePower+0x110>)
 80045b0:	f001 fecd 	bl	800634e <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 80045b4:	4838      	ldr	r0, [pc, #224]	; (8004698 <measurePower+0x110>)
 80045b6:	f001 ff55 	bl	8006464 <HAL_ADC_GetValue>
 80045ba:	4603      	mov	r3, r0
 80045bc:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 80045be:	4836      	ldr	r0, [pc, #216]	; (8004698 <measurePower+0x110>)
 80045c0:	f001 fe92 	bl	80062e8 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800469c <measurePower+0x114>
 80045d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045d6:	eddf 6a32 	vldr	s13, [pc, #200]	; 80046a0 <measurePower+0x118>
 80045da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ee:	ee17 0a90 	vmov	r0, s15
 80045f2:	f7fb ffd9 	bl	80005a8 <__aeabi_f2d>
 80045f6:	a326      	add	r3, pc, #152	; (adr r3, 8004690 <measurePower+0x108>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fc f82c 	bl	8000658 <__aeabi_dmul>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <measurePower+0x11c>)
 800460e:	f7fc f94d 	bl	80008ac <__aeabi_ddiv>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	f7fc fb15 	bl	8000c48 <__aeabi_d2f>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	ed93 7a01 	vldr	s14, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	edd3 7a00 	vldr	s15, [r3]
 8004630:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004634:	f001 fd12 	bl	800605c <HAL_GetTick>
 8004638:	ee07 0a90 	vmov	s15, r0
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a19 	vldr	s13, [pc, #100]	; 80046a8 <measurePower+0x120>
 8004644:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004648:	4b18      	ldr	r3, [pc, #96]	; (80046ac <measurePower+0x124>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004652:	ee28 7a27 	vmul.f32	s14, s16, s15
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	edd3 7a02 	vldr	s15, [r3, #8]
 800465c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8004666:	f001 fcf9 	bl	800605c <HAL_GetTick>
 800466a:	ee07 0a90 	vmov	s15, r0
 800466e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004672:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80046a8 <measurePower+0x120>
 8004676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <measurePower+0x124>)
 800467c:	edc3 7a00 	vstr	s15, [r3]
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	ecbd 8b02 	vpop	{d8}
 800468a:	bd80      	pop	{r7, pc}
 800468c:	f3af 8000 	nop.w
 8004690:	66666666 	.word	0x66666666
 8004694:	402a6666 	.word	0x402a6666
 8004698:	200002c4 	.word	0x200002c4
 800469c:	454e4000 	.word	0x454e4000
 80046a0:	45800000 	.word	0x45800000
 80046a4:	40b00000 	.word	0x40b00000
 80046a8:	447a0000 	.word	0x447a0000
 80046ac:	200007e8 	.word	0x200007e8

080046b0 <getWatt>:

void getWatt()
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 80046b6:	f001 fcd1 	bl	800605c <HAL_GetTick>
 80046ba:	ee07 0a90 	vmov	s15, r0
 80046be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800470c <getWatt+0x5c>
 80046c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ca:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <getWatt+0x60>)
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80046d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046dc:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 80046e0:	4a0b      	ldr	r2, [pc, #44]	; (8004710 <getWatt+0x60>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <getWatt+0x64>)
 80046e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80046ec:	ed97 7a00 	vldr	s14, [r7]
 80046f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <getWatt+0x64>)
 80046f6:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <getWatt+0x64>)
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	447a0000 	.word	0x447a0000
 8004710:	200007f0 	.word	0x200007f0
 8004714:	2000076c 	.word	0x2000076c

08004718 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d101      	bne.n	800472c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8004728:	f7fe fd90 	bl	800324c <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d106      	bne.n	8004740 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 8004732:	f7fe fd7d 	bl	8003230 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <HAL_GPIO_EXTI_Callback+0x30>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	4a02      	ldr	r2, [pc, #8]	; (8004748 <HAL_GPIO_EXTI_Callback+0x30>)
 800473e:	6013      	str	r3, [r2, #0]
    }
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200007f8 	.word	0x200007f8

0800474c <deploy_p_1>:

void deploy_p_1()
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 8004750:	2164      	movs	r1, #100	; 0x64
 8004752:	4804      	ldr	r0, [pc, #16]	; (8004764 <deploy_p_1+0x18>)
 8004754:	f7ff f820 	bl	8003798 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004758:	4803      	ldr	r0, [pc, #12]	; (8004768 <deploy_p_1+0x1c>)
 800475a:	f7ff f805 	bl	8003768 <ext_pin_open>
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000784 	.word	0x20000784
 8004768:	200007b4 	.word	0x200007b4

0800476c <deploy_p_2>:

void deploy_p_2()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 8004770:	2164      	movs	r1, #100	; 0x64
 8004772:	4804      	ldr	r0, [pc, #16]	; (8004784 <deploy_p_2+0x18>)
 8004774:	f7ff f810 	bl	8003798 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004778:	4803      	ldr	r0, [pc, #12]	; (8004788 <deploy_p_2+0x1c>)
 800477a:	f7fe fff5 	bl	8003768 <ext_pin_open>
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000794 	.word	0x20000794
 8004788:	200007b4 	.word	0x200007b4

0800478c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <Error_Handler+0x4c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	4911      	ldr	r1, [pc, #68]	; (80047dc <Error_Handler+0x50>)
 8004798:	4811      	ldr	r0, [pc, #68]	; (80047e0 <Error_Handler+0x54>)
 800479a:	f007 fe6d 	bl	800c478 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 800479e:	4810      	ldr	r0, [pc, #64]	; (80047e0 <Error_Handler+0x54>)
 80047a0:	f7fb fd40 	bl	8000224 <strlen>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	23fa      	movs	r3, #250	; 0xfa
 80047aa:	490d      	ldr	r1, [pc, #52]	; (80047e0 <Error_Handler+0x54>)
 80047ac:	480d      	ldr	r0, [pc, #52]	; (80047e4 <Error_Handler+0x58>)
 80047ae:	f005 fd18 	bl	800a1e2 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047b2:	b672      	cpsid	i
}
 80047b4:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ba:	480b      	ldr	r0, [pc, #44]	; (80047e8 <Error_Handler+0x5c>)
 80047bc:	f003 f8e1 	bl	8007982 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80047c0:	2064      	movs	r0, #100	; 0x64
 80047c2:	f001 fc57 	bl	8006074 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ca:	4807      	ldr	r0, [pc, #28]	; (80047e8 <Error_Handler+0x5c>)
 80047cc:	f003 f8d9 	bl	8007982 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80047d0:	2064      	movs	r0, #100	; 0x64
 80047d2:	f001 fc4f 	bl	8006074 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047d6:	e7ee      	b.n	80047b6 <Error_Handler+0x2a>
 80047d8:	2000024c 	.word	0x2000024c
 80047dc:	080126a4 	.word	0x080126a4
 80047e0:	20000804 	.word	0x20000804
 80047e4:	20000418 	.word	0x20000418
 80047e8:	40020400 	.word	0x40020400

080047ec <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80047f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80047fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80047fe:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 8004802:	4b9f      	ldr	r3, [pc, #636]	; (8004a80 <updateQuaternion+0x294>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	edd3 7a02 	vldr	s15, [r3, #8]
 800480a:	eeb1 7a67 	vneg.f32	s14, s15
 800480e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004816:	4b9a      	ldr	r3, [pc, #616]	; (8004a80 <updateQuaternion+0x294>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	edd3 6a03 	vldr	s13, [r3, #12]
 800481e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800482a:	4b95      	ldr	r3, [pc, #596]	; (8004a80 <updateQuaternion+0x294>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	edd3 6a04 	vldr	s13, [r3, #16]
 8004832:	edd7 7a01 	vldr	s15, [r7, #4]
 8004836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800483a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800483e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004846:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 800484a:	4b8d      	ldr	r3, [pc, #564]	; (8004a80 <updateQuaternion+0x294>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004852:	edd7 7a03 	vldr	s15, [r7, #12]
 8004856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800485a:	4b89      	ldr	r3, [pc, #548]	; (8004a80 <updateQuaternion+0x294>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004862:	edd7 7a01 	vldr	s15, [r7, #4]
 8004866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800486a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800486e:	4b84      	ldr	r3, [pc, #528]	; (8004a80 <updateQuaternion+0x294>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	edd3 6a04 	vldr	s13, [r3, #16]
 8004876:	edd7 7a02 	vldr	s15, [r7, #8]
 800487a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800487e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800488a:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 800488e:	4b7c      	ldr	r3, [pc, #496]	; (8004a80 <updateQuaternion+0x294>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	ed93 7a01 	vldr	s14, [r3, #4]
 8004896:	edd7 7a02 	vldr	s15, [r7, #8]
 800489a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800489e:	4b78      	ldr	r3, [pc, #480]	; (8004a80 <updateQuaternion+0x294>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80048a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048b2:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <updateQuaternion+0x294>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	edd3 6a04 	vldr	s13, [r3, #16]
 80048ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80048be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 80048d2:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <updateQuaternion+0x294>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048da:	edd7 7a01 	vldr	s15, [r7, #4]
 80048de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048e2:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <updateQuaternion+0x294>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80048ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048f6:	4b62      	ldr	r3, [pc, #392]	; (8004a80 <updateQuaternion+0x294>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80048fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800490a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800490e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004912:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 8004916:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <updateQuaternion+0x294>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	ed93 7a01 	vldr	s14, [r3, #4]
 800491e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004922:	edd7 7a00 	vldr	s15, [r7]
 8004926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800492a:	4b55      	ldr	r3, [pc, #340]	; (8004a80 <updateQuaternion+0x294>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004932:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 8004936:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <updateQuaternion+0x294>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	ed93 7a02 	vldr	s14, [r3, #8]
 800493e:	edd7 6a08 	vldr	s13, [r7, #32]
 8004942:	edd7 7a00 	vldr	s15, [r7]
 8004946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800494a:	4b4d      	ldr	r3, [pc, #308]	; (8004a80 <updateQuaternion+0x294>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004952:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 8004956:	4b4a      	ldr	r3, [pc, #296]	; (8004a80 <updateQuaternion+0x294>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	ed93 7a03 	vldr	s14, [r3, #12]
 800495e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004962:	edd7 7a00 	vldr	s15, [r7]
 8004966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800496a:	4b45      	ldr	r3, [pc, #276]	; (8004a80 <updateQuaternion+0x294>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004972:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 8004976:	4b42      	ldr	r3, [pc, #264]	; (8004a80 <updateQuaternion+0x294>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	ed93 7a04 	vldr	s14, [r3, #16]
 800497e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004982:	edd7 7a00 	vldr	s15, [r7]
 8004986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <updateQuaternion+0x294>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004992:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 8004996:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <updateQuaternion+0x294>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	ed93 7a01 	vldr	s14, [r3, #4]
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <updateQuaternion+0x294>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80049a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049aa:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <updateQuaternion+0x294>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80049b2:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <updateQuaternion+0x294>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049c2:	4b2f      	ldr	r3, [pc, #188]	; (8004a80 <updateQuaternion+0x294>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80049ca:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <updateQuaternion+0x294>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80049d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <updateQuaternion+0x294>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	edd3 6a04 	vldr	s13, [r3, #16]
 80049e2:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <updateQuaternion+0x294>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80049ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f2:	ee17 0a90 	vmov	r0, s15
 80049f6:	f7fb fdd7 	bl	80005a8 <__aeabi_f2d>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	ec43 2b10 	vmov	d0, r2, r3
 8004a02:	f00c f859 	bl	8010ab8 <sqrt>
 8004a06:	ec53 2b10 	vmov	r2, r3, d0
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f7fc f91b 	bl	8000c48 <__aeabi_d2f>
 8004a12:	4603      	mov	r3, r0
 8004a14:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <updateQuaternion+0x294>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <updateQuaternion+0x294>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <updateQuaternion+0x294>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <updateQuaternion+0x294>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a42:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <updateQuaternion+0x294>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <updateQuaternion+0x294>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5a:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <updateQuaternion+0x294>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <updateQuaternion+0x294>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a72:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8004a76:	bf00      	nop
 8004a78:	3728      	adds	r7, #40	; 0x28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000004 	.word	0x20000004
 8004a84:	00000000 	.word	0x00000000

08004a88 <quaternionToEuler>:

void quaternionToEuler(void) {
 8004a88:	b5b0      	push	{r4, r5, r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 8004a8c:	4b72      	ldr	r3, [pc, #456]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a94:	4b70      	ldr	r3, [pc, #448]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aa0:	4b6d      	ldr	r3, [pc, #436]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004aa8:	4b6b      	ldr	r3, [pc, #428]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004abc:	ee17 0a90 	vmov	r0, s15
 8004ac0:	f7fb fd72 	bl	80005a8 <__aeabi_f2d>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	4b63      	ldr	r3, [pc, #396]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004adc:	4b5e      	ldr	r3, [pc, #376]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ae4:	4b5c      	ldr	r3, [pc, #368]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b00:	ee17 0a90 	vmov	r0, s15
 8004b04:	f7fb fd50 	bl	80005a8 <__aeabi_f2d>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	ec43 2b11 	vmov	d1, r2, r3
 8004b10:	ec45 4b10 	vmov	d0, r4, r5
 8004b14:	f00b ff5e 	bl	80109d4 <atan2>
 8004b18:	ec51 0b10 	vmov	r0, r1, d0
 8004b1c:	a34c      	add	r3, pc, #304	; (adr r3, 8004c50 <quaternionToEuler+0x1c8>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fd99 	bl	8000658 <__aeabi_dmul>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fc f88b 	bl	8000c48 <__aeabi_d2f>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4a49      	ldr	r2, [pc, #292]	; (8004c5c <quaternionToEuler+0x1d4>)
 8004b36:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 8004b38:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b40:	4b45      	ldr	r3, [pc, #276]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b4c:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	edd3 6a04 	vldr	s13, [r3, #16]
 8004b54:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b68:	ee17 0a90 	vmov	r0, s15
 8004b6c:	f7fb fd1c 	bl	80005a8 <__aeabi_f2d>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	ec43 2b10 	vmov	d0, r2, r3
 8004b78:	f00b fef8 	bl	801096c <asin>
 8004b7c:	ec51 0b10 	vmov	r0, r1, d0
 8004b80:	a333      	add	r3, pc, #204	; (adr r3, 8004c50 <quaternionToEuler+0x1c8>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fd67 	bl	8000658 <__aeabi_dmul>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	f7fc f859 	bl	8000c48 <__aeabi_d2f>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4a30      	ldr	r2, [pc, #192]	; (8004c5c <quaternionToEuler+0x1d4>)
 8004b9a:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bb0:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bb8:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004bcc:	ee17 0a90 	vmov	r0, s15
 8004bd0:	f7fb fcea 	bl	80005a8 <__aeabi_f2d>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	460d      	mov	r5, r1
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	edd3 6a04 	vldr	s13, [r3, #16]
 8004bf4:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <quaternionToEuler+0x1d0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c10:	ee17 0a90 	vmov	r0, s15
 8004c14:	f7fb fcc8 	bl	80005a8 <__aeabi_f2d>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	ec43 2b11 	vmov	d1, r2, r3
 8004c20:	ec45 4b10 	vmov	d0, r4, r5
 8004c24:	f00b fed6 	bl	80109d4 <atan2>
 8004c28:	ec51 0b10 	vmov	r0, r1, d0
 8004c2c:	a308      	add	r3, pc, #32	; (adr r3, 8004c50 <quaternionToEuler+0x1c8>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fd11 	bl	8000658 <__aeabi_dmul>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f7fc f803 	bl	8000c48 <__aeabi_d2f>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <quaternionToEuler+0x1d4>)
 8004c46:	6093      	str	r3, [r2, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c4c:	f3af 8000 	nop.w
 8004c50:	1a63c1f8 	.word	0x1a63c1f8
 8004c54:	404ca5dc 	.word	0x404ca5dc
 8004c58:	20000004 	.word	0x20000004
 8004c5c:	20000900 	.word	0x20000900

08004c60 <quaternionToTheta>:


float quaternionToTheta(){
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <quaternionToTheta+0x178>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004c78:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <quaternionToTheta+0x178>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c84:	4b54      	ldr	r3, [pc, #336]	; (8004dd8 <quaternionToTheta+0x178>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004c90:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <quaternionToTheta+0x178>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca0:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 8004ca4:	4b4c      	ldr	r3, [pc, #304]	; (8004dd8 <quaternionToTheta+0x178>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004cb0:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cbc:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cc4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004cc8:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd8:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ce4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <quaternionToTheta+0x178>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d08:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <quaternionToTheta+0x178>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d18:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8004d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4c:	ee17 0a90 	vmov	r0, s15
 8004d50:	f7fb fc2a 	bl	80005a8 <__aeabi_f2d>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	ec43 2b10 	vmov	d0, r2, r3
 8004d5c:	f00b feac 	bl	8010ab8 <sqrt>
 8004d60:	ec53 2b10 	vmov	r2, r3, d0
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	f7fb ff6e 	bl	8000c48 <__aeabi_d2f>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8004d70:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d7c:	ee16 0a90 	vmov	r0, s13
 8004d80:	f7fb fc12 	bl	80005a8 <__aeabi_f2d>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	ec43 2b10 	vmov	d0, r2, r3
 8004d8c:	f00b fdba 	bl	8010904 <acos>
 8004d90:	ec51 0b10 	vmov	r0, r1, d0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <quaternionToTheta+0x17c>)
 8004d9a:	f7fb fc5d 	bl	8000658 <__aeabi_dmul>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	a30a      	add	r3, pc, #40	; (adr r3, 8004dd0 <quaternionToTheta+0x170>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fd7e 	bl	80008ac <__aeabi_ddiv>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f7fb ff46 	bl	8000c48 <__aeabi_d2f>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	ee07 3a90 	vmov	s15, r3
}
 8004dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	51eb851f 	.word	0x51eb851f
 8004dd4:	40091eb8 	.word	0x40091eb8
 8004dd8:	20000004 	.word	0x20000004
 8004ddc:	40668000 	.word	0x40668000

08004de0 <getInitialQuaternion>:



// İvmeölçerden başlangıç quaternioni hesaplama
static void getInitialQuaternion() {
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	b092      	sub	sp, #72	; 0x48
 8004de4:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8004de6:	4b99      	ldr	r3, [pc, #612]	; (800504c <getInitialQuaternion+0x26c>)
 8004de8:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8004dec:	4b97      	ldr	r3, [pc, #604]	; (800504c <getInitialQuaternion+0x26c>)
 8004dee:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004df6:	4b95      	ldr	r3, [pc, #596]	; (800504c <getInitialQuaternion+0x26c>)
 8004df8:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8004dfc:	4b93      	ldr	r3, [pc, #588]	; (800504c <getInitialQuaternion+0x26c>)
 8004dfe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e0a:	4b90      	ldr	r3, [pc, #576]	; (800504c <getInitialQuaternion+0x26c>)
 8004e0c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004e10:	4b8e      	ldr	r3, [pc, #568]	; (800504c <getInitialQuaternion+0x26c>)
 8004e12:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e1e:	ee17 0a90 	vmov	r0, s15
 8004e22:	f7fb fbc1 	bl	80005a8 <__aeabi_f2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	ec43 2b10 	vmov	d0, r2, r3
 8004e2e:	f00b fe43 	bl	8010ab8 <sqrt>
 8004e32:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 8004e36:	4b85      	ldr	r3, [pc, #532]	; (800504c <getInitialQuaternion+0x26c>)
 8004e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb fbb3 	bl	80005a8 <__aeabi_f2d>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 8004e4a:	4b80      	ldr	r3, [pc, #512]	; (800504c <getInitialQuaternion+0x26c>)
 8004e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb fba9 	bl	80005a8 <__aeabi_f2d>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 8004e5e:	4b7b      	ldr	r3, [pc, #492]	; (800504c <getInitialQuaternion+0x26c>)
 8004e60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fb9f 	bl	80005a8 <__aeabi_f2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8004e72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e7a:	f7fb fd17 	bl	80008ac <__aeabi_ddiv>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8004e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e8e:	f7fb fd0d 	bl	80008ac <__aeabi_ddiv>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 8004e9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	f7fb fd03 	bl	80008ac <__aeabi_ddiv>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8004eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	4966      	ldr	r1, [pc, #408]	; (8005050 <getInitialQuaternion+0x270>)
 8004eb8:	f7fb fa16 	bl	80002e8 <__aeabi_dsub>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	ec43 2b17 	vmov	d7, r2, r3
 8004ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ec8:	eef0 0a67 	vmov.f32	s1, s15
 8004ecc:	f00b fdf4 	bl	8010ab8 <sqrt>
 8004ed0:	ec51 0b10 	vmov	r0, r1, d0
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	4b5e      	ldr	r3, [pc, #376]	; (8005054 <getInitialQuaternion+0x274>)
 8004eda:	f7fb fbbd 	bl	8000658 <__aeabi_dmul>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	4959      	ldr	r1, [pc, #356]	; (8005054 <getInitialQuaternion+0x274>)
 8004ef0:	f7fb fcdc 	bl	80008ac <__aeabi_ddiv>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8004efc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f04:	f7fb fba8 	bl	8000658 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <getInitialQuaternion+0x274>)
 8004f16:	f7fb fb9f 	bl	8000658 <__aeabi_dmul>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8004f22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f2a:	f7fb fb95 	bl	8000658 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <getInitialQuaternion+0x274>)
 8004f3c:	f7fb fb8c 	bl	8000658 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8004f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	f7fb fb7c 	bl	8000658 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	461d      	mov	r5, r3
 8004f68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f70:	f7fb fb72 	bl	8000658 <__aeabi_dmul>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4620      	mov	r0, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	f7fb f9b6 	bl	80002ec <__adddf3>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	461d      	mov	r5, r3
 8004f88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f90:	f7fb fb62 	bl	8000658 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f9a6 	bl	80002ec <__adddf3>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb0:	f7fb fb52 	bl	8000658 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb f996 	bl	80002ec <__adddf3>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	ec43 2b17 	vmov	d7, r2, r3
 8004fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8004fcc:	eef0 0a67 	vmov.f32	s1, s15
 8004fd0:	f00b fd72 	bl	8010ab8 <sqrt>
 8004fd4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8004fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fe0:	f7fb fc64 	bl	80008ac <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	491b      	ldr	r1, [pc, #108]	; (8005058 <getInitialQuaternion+0x278>)
 8004fea:	680c      	ldr	r4, [r1, #0]
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fe2a 	bl	8000c48 <__aeabi_d2f>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8004ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ffc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005000:	f7fb fc54 	bl	80008ac <__aeabi_ddiv>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4913      	ldr	r1, [pc, #76]	; (8005058 <getInitialQuaternion+0x278>)
 800500a:	680c      	ldr	r4, [r1, #0]
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	f7fb fe1a 	bl	8000c48 <__aeabi_d2f>
 8005014:	4603      	mov	r3, r0
 8005016:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005018:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800501c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005020:	f7fb fc44 	bl	80008ac <__aeabi_ddiv>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	490b      	ldr	r1, [pc, #44]	; (8005058 <getInitialQuaternion+0x278>)
 800502a:	680c      	ldr	r4, [r1, #0]
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	f7fb fe0a 	bl	8000c48 <__aeabi_d2f>
 8005034:	4603      	mov	r3, r0
 8005036:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <getInitialQuaternion+0x278>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
}
 8005042:	bf00      	nop
 8005044:	3748      	adds	r7, #72	; 0x48
 8005046:	46bd      	mov	sp, r7
 8005048:	bdb0      	pop	{r4, r5, r7, pc}
 800504a:	bf00      	nop
 800504c:	20000650 	.word	0x20000650
 8005050:	3ff00000 	.word	0x3ff00000
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	20000004 	.word	0x20000004

0800505c <quaternionSet_zero>:



void quaternionSet_zero(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
	getInitialQuaternion();
 8005060:	f7ff febe 	bl	8004de0 <getInitialQuaternion>
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}

08005068 <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005068:	b084      	sub	sp, #16
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	f107 0c10 	add.w	ip, r7, #16
 8005074:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 800507c:	7c3b      	ldrb	r3, [r7, #16]
 800507e:	461a      	mov	r2, r3
 8005080:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005084:	fb03 f202 	mul.w	r2, r3, r2
 8005088:	7c7b      	ldrb	r3, [r7, #17]
 800508a:	4619      	mov	r1, r3
 800508c:	460b      	mov	r3, r1
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a5b      	subs	r3, r3, r1
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	7cba      	ldrb	r2, [r7, #18]
 8005098:	4413      	add	r3, r2
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 80050a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <save_time+0x6c>)
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 80050b6:	f003 fc87 	bl	80089c8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	2102      	movs	r1, #2
 80050be:	4806      	ldr	r0, [pc, #24]	; (80050d8 <save_time+0x70>)
 80050c0:	f004 ffe1 	bl	800a086 <HAL_RTCEx_BKUPWrite>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050ce:	b004      	add	sp, #16
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	00015180 	.word	0x00015180
 80050d8:	200003b4 	.word	0x200003b4

080050dc <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	f107 0c10 	add.w	ip, r7, #16
 80050e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 80050f0:	7c3b      	ldrb	r3, [r7, #16]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80050f8:	fb03 f202 	mul.w	r2, r3, r2
 80050fc:	7c7b      	ldrb	r3, [r7, #17]
 80050fe:	4619      	mov	r1, r3
 8005100:	460b      	mov	r3, r1
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a5b      	subs	r3, r3, r1
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	7cba      	ldrb	r2, [r7, #18]
 800510c:	4413      	add	r3, r2
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800511a:	461a      	mov	r2, r3
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <measure_abs_time+0x78>)
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 800512a:	f003 fc4d 	bl	80089c8 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 800512e:	2102      	movs	r1, #2
 8005130:	4809      	ldr	r0, [pc, #36]	; (8005158 <measure_abs_time+0x7c>)
 8005132:	f004 ffc2 	bl	800a0ba <HAL_RTCEx_BKUPRead>
 8005136:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	bfb8      	it	lt
 8005142:	425b      	neglt	r3, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800514e:	b004      	add	sp, #16
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	00015180 	.word	0x00015180
 8005158:	200003b4 	.word	0x200003b4

0800515c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_MspInit+0x4c>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	4a0f      	ldr	r2, [pc, #60]	; (80051a8 <HAL_MspInit+0x4c>)
 800516c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005170:	6453      	str	r3, [r2, #68]	; 0x44
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_MspInit+0x4c>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_MspInit+0x4c>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_MspInit+0x4c>)
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_MspInit+0x4c>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800

080051ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a17      	ldr	r2, [pc, #92]	; (8005228 <HAL_ADC_MspInit+0x7c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d127      	bne.n	800521e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b16      	ldr	r3, [pc, #88]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6453      	str	r3, [r2, #68]	; 0x44
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_ADC_MspInit+0x80>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8005206:	2306      	movs	r3, #6
 8005208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800520a:	2303      	movs	r3, #3
 800520c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	4619      	mov	r1, r3
 8005218:	4805      	ldr	r0, [pc, #20]	; (8005230 <HAL_ADC_MspInit+0x84>)
 800521a:	f002 f911 	bl	8007440 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800521e:	bf00      	nop
 8005220:	3728      	adds	r7, #40	; 0x28
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40012000 	.word	0x40012000
 800522c:	40023800 	.word	0x40023800
 8005230:	40020800 	.word	0x40020800

08005234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	; 0x30
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	f107 031c 	add.w	r3, r7, #28
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <HAL_I2C_MspInit+0x128>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d12c      	bne.n	80052b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	6313      	str	r3, [r2, #48]	; 0x30
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005272:	23c0      	movs	r3, #192	; 0xc0
 8005274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005276:	2312      	movs	r3, #18
 8005278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527e:	2303      	movs	r3, #3
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005282:	2304      	movs	r3, #4
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005286:	f107 031c 	add.w	r3, r7, #28
 800528a:	4619      	mov	r1, r3
 800528c:	4835      	ldr	r0, [pc, #212]	; (8005364 <HAL_I2C_MspInit+0x130>)
 800528e:	f002 f8d7 	bl	8007440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	4b32      	ldr	r3, [pc, #200]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a31      	ldr	r2, [pc, #196]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 800529c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80052ae:	e050      	b.n	8005352 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <HAL_I2C_MspInit+0x134>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d14b      	bne.n	8005352 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a27      	ldr	r2, [pc, #156]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b25      	ldr	r3, [pc, #148]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052f8:	2312      	movs	r3, #18
 80052fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005300:	2303      	movs	r3, #3
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005304:	2304      	movs	r3, #4
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	4619      	mov	r1, r3
 800530e:	4817      	ldr	r0, [pc, #92]	; (800536c <HAL_I2C_MspInit+0x138>)
 8005310:	f002 f896 	bl	8007440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800531a:	2312      	movs	r3, #18
 800531c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005322:	2303      	movs	r3, #3
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005326:	2304      	movs	r3, #4
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532a:	f107 031c 	add.w	r3, r7, #28
 800532e:	4619      	mov	r1, r3
 8005330:	480f      	ldr	r0, [pc, #60]	; (8005370 <HAL_I2C_MspInit+0x13c>)
 8005332:	f002 f885 	bl	8007440 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a08      	ldr	r2, [pc, #32]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 8005340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_I2C_MspInit+0x12c>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
}
 8005352:	bf00      	nop
 8005354:	3730      	adds	r7, #48	; 0x30
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40005400 	.word	0x40005400
 8005360:	40023800 	.word	0x40023800
 8005364:	40020400 	.word	0x40020400
 8005368:	40005c00 	.word	0x40005c00
 800536c:	40020800 	.word	0x40020800
 8005370:	40020000 	.word	0x40020000

08005374 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <HAL_I2C_MspDeInit+0x64>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10e      	bne.n	80053a4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_I2C_MspDeInit+0x68>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	4a14      	ldr	r2, [pc, #80]	; (80053dc <HAL_I2C_MspDeInit+0x68>)
 800538c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005390:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	4812      	ldr	r0, [pc, #72]	; (80053e0 <HAL_I2C_MspDeInit+0x6c>)
 8005396:	f002 f9e7 	bl	8007768 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	4810      	ldr	r0, [pc, #64]	; (80053e0 <HAL_I2C_MspDeInit+0x6c>)
 800539e:	f002 f9e3 	bl	8007768 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80053a2:	e014      	b.n	80053ce <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <HAL_I2C_MspDeInit+0x70>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10f      	bne.n	80053ce <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_I2C_MspDeInit+0x68>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <HAL_I2C_MspDeInit+0x68>)
 80053b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053b8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80053ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053be:	480a      	ldr	r0, [pc, #40]	; (80053e8 <HAL_I2C_MspDeInit+0x74>)
 80053c0:	f002 f9d2 	bl	8007768 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80053c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <HAL_I2C_MspDeInit+0x78>)
 80053ca:	f002 f9cd 	bl	8007768 <HAL_GPIO_DeInit>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40005400 	.word	0x40005400
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40005c00 	.word	0x40005c00
 80053e8:	40020800 	.word	0x40020800
 80053ec:	40020000 	.word	0x40020000

080053f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b09a      	sub	sp, #104	; 0x68
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	225c      	movs	r2, #92	; 0x5c
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f006 f9b1 	bl	800b768 <memset>
  if(hrtc->Instance==RTC)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a0c      	ldr	r2, [pc, #48]	; (800543c <HAL_RTC_MspInit+0x4c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d111      	bne.n	8005434 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005410:	2320      	movs	r3, #32
 8005412:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005418:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4618      	mov	r0, r3
 8005420:	f003 fc76 	bl	8008d10 <HAL_RCCEx_PeriphCLKConfig>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800542a:	f7ff f9af 	bl	800478c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800542e:	4b04      	ldr	r3, [pc, #16]	; (8005440 <HAL_RTC_MspInit+0x50>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005434:	bf00      	nop
 8005436:	3768      	adds	r7, #104	; 0x68
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40002800 	.word	0x40002800
 8005440:	42470e3c 	.word	0x42470e3c

08005444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08e      	sub	sp, #56	; 0x38
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	609a      	str	r2, [r3, #8]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a7f      	ldr	r2, [pc, #508]	; (8005660 <HAL_UART_MspInit+0x21c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f040 8092 	bne.w	800558c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005468:	2300      	movs	r3, #0
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <HAL_UART_MspInit+0x220>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	4a7c      	ldr	r2, [pc, #496]	; (8005664 <HAL_UART_MspInit+0x220>)
 8005472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
 8005478:	4b7a      	ldr	r3, [pc, #488]	; (8005664 <HAL_UART_MspInit+0x220>)
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	4b76      	ldr	r3, [pc, #472]	; (8005664 <HAL_UART_MspInit+0x220>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a75      	ldr	r2, [pc, #468]	; (8005664 <HAL_UART_MspInit+0x220>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6313      	str	r3, [r2, #48]	; 0x30
 8005494:	4b73      	ldr	r3, [pc, #460]	; (8005664 <HAL_UART_MspInit+0x220>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054a0:	2303      	movs	r3, #3
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a4:	2302      	movs	r3, #2
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ac:	2303      	movs	r3, #3
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054b0:	2308      	movs	r3, #8
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b8:	4619      	mov	r1, r3
 80054ba:	486b      	ldr	r0, [pc, #428]	; (8005668 <HAL_UART_MspInit+0x224>)
 80054bc:	f001 ffc0 	bl	8007440 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80054c0:	4b6a      	ldr	r3, [pc, #424]	; (800566c <HAL_UART_MspInit+0x228>)
 80054c2:	4a6b      	ldr	r2, [pc, #428]	; (8005670 <HAL_UART_MspInit+0x22c>)
 80054c4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80054c6:	4b69      	ldr	r3, [pc, #420]	; (800566c <HAL_UART_MspInit+0x228>)
 80054c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ce:	4b67      	ldr	r3, [pc, #412]	; (800566c <HAL_UART_MspInit+0x228>)
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d4:	4b65      	ldr	r3, [pc, #404]	; (800566c <HAL_UART_MspInit+0x228>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054da:	4b64      	ldr	r3, [pc, #400]	; (800566c <HAL_UART_MspInit+0x228>)
 80054dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054e2:	4b62      	ldr	r3, [pc, #392]	; (800566c <HAL_UART_MspInit+0x228>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e8:	4b60      	ldr	r3, [pc, #384]	; (800566c <HAL_UART_MspInit+0x228>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <HAL_UART_MspInit+0x228>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054f4:	4b5d      	ldr	r3, [pc, #372]	; (800566c <HAL_UART_MspInit+0x228>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054fa:	4b5c      	ldr	r3, [pc, #368]	; (800566c <HAL_UART_MspInit+0x228>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005500:	485a      	ldr	r0, [pc, #360]	; (800566c <HAL_UART_MspInit+0x228>)
 8005502:	f001 fb2f 	bl	8006b64 <HAL_DMA_Init>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800550c:	f7ff f93e 	bl	800478c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a56      	ldr	r2, [pc, #344]	; (800566c <HAL_UART_MspInit+0x228>)
 8005514:	635a      	str	r2, [r3, #52]	; 0x34
 8005516:	4a55      	ldr	r2, [pc, #340]	; (800566c <HAL_UART_MspInit+0x228>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_UART_MspInit+0x230>)
 800551e:	4a56      	ldr	r2, [pc, #344]	; (8005678 <HAL_UART_MspInit+0x234>)
 8005520:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005528:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800552a:	4b52      	ldr	r3, [pc, #328]	; (8005674 <HAL_UART_MspInit+0x230>)
 800552c:	2200      	movs	r2, #0
 800552e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005530:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005532:	2200      	movs	r2, #0
 8005534:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005536:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800553c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800553e:	4b4d      	ldr	r3, [pc, #308]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005540:	2200      	movs	r2, #0
 8005542:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005546:	2200      	movs	r2, #0
 8005548:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800554a:	4b4a      	ldr	r3, [pc, #296]	; (8005674 <HAL_UART_MspInit+0x230>)
 800554c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005550:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005552:	4b48      	ldr	r3, [pc, #288]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005554:	2200      	movs	r2, #0
 8005556:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005558:	4b46      	ldr	r3, [pc, #280]	; (8005674 <HAL_UART_MspInit+0x230>)
 800555a:	2200      	movs	r2, #0
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800555e:	4845      	ldr	r0, [pc, #276]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005560:	f001 fb00 	bl	8006b64 <HAL_DMA_Init>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800556a:	f7ff f90f 	bl	800478c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a40      	ldr	r2, [pc, #256]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005572:	639a      	str	r2, [r3, #56]	; 0x38
 8005574:	4a3f      	ldr	r2, [pc, #252]	; (8005674 <HAL_UART_MspInit+0x230>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	2034      	movs	r0, #52	; 0x34
 8005580:	f001 faab 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005584:	2034      	movs	r0, #52	; 0x34
 8005586:	f001 fac4 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800558a:	e0e4      	b.n	8005756 <HAL_UART_MspInit+0x312>
  else if(huart->Instance==USART1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3a      	ldr	r2, [pc, #232]	; (800567c <HAL_UART_MspInit+0x238>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d178      	bne.n	8005688 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <HAL_UART_MspInit+0x220>)
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	4a31      	ldr	r2, [pc, #196]	; (8005664 <HAL_UART_MspInit+0x220>)
 80055a0:	f043 0310 	orr.w	r3, r3, #16
 80055a4:	6453      	str	r3, [r2, #68]	; 0x44
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <HAL_UART_MspInit+0x220>)
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <HAL_UART_MspInit+0x220>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <HAL_UART_MspInit+0x220>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_UART_MspInit+0x220>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80055ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d4:	2302      	movs	r3, #2
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055dc:	2303      	movs	r3, #3
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055e0:	2307      	movs	r3, #7
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e8:	4619      	mov	r1, r3
 80055ea:	481f      	ldr	r0, [pc, #124]	; (8005668 <HAL_UART_MspInit+0x224>)
 80055ec:	f001 ff28 	bl	8007440 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80055f0:	4b23      	ldr	r3, [pc, #140]	; (8005680 <HAL_UART_MspInit+0x23c>)
 80055f2:	4a24      	ldr	r2, [pc, #144]	; (8005684 <HAL_UART_MspInit+0x240>)
 80055f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80055f6:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_UART_MspInit+0x23c>)
 80055f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055fe:	4b20      	ldr	r3, [pc, #128]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_UART_MspInit+0x23c>)
 800560c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005610:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005612:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005614:	2200      	movs	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005618:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_UART_MspInit+0x23c>)
 800561a:	2200      	movs	r2, #0
 800561c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800561e:	4b18      	ldr	r3, [pc, #96]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005620:	2200      	movs	r2, #0
 8005622:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005624:	4b16      	ldr	r3, [pc, #88]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005626:	2200      	movs	r2, #0
 8005628:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_UART_MspInit+0x23c>)
 800562c:	2200      	movs	r2, #0
 800562e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005630:	4813      	ldr	r0, [pc, #76]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005632:	f001 fa97 	bl	8006b64 <HAL_DMA_Init>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800563c:	f7ff f8a6 	bl	800478c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005644:	635a      	str	r2, [r3, #52]	; 0x34
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <HAL_UART_MspInit+0x23c>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800564c:	2200      	movs	r2, #0
 800564e:	2100      	movs	r1, #0
 8005650:	2025      	movs	r0, #37	; 0x25
 8005652:	f001 fa42 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005656:	2025      	movs	r0, #37	; 0x25
 8005658:	f001 fa5b 	bl	8006b12 <HAL_NVIC_EnableIRQ>
}
 800565c:	e07b      	b.n	8005756 <HAL_UART_MspInit+0x312>
 800565e:	bf00      	nop
 8005660:	40004c00 	.word	0x40004c00
 8005664:	40023800 	.word	0x40023800
 8005668:	40020000 	.word	0x40020000
 800566c:	200004a0 	.word	0x200004a0
 8005670:	40026070 	.word	0x40026070
 8005674:	20000500 	.word	0x20000500
 8005678:	40026040 	.word	0x40026040
 800567c:	40011000 	.word	0x40011000
 8005680:	20000560 	.word	0x20000560
 8005684:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a34      	ldr	r2, [pc, #208]	; (8005760 <HAL_UART_MspInit+0x31c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d161      	bne.n	8005756 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	4b33      	ldr	r3, [pc, #204]	; (8005764 <HAL_UART_MspInit+0x320>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	4a32      	ldr	r2, [pc, #200]	; (8005764 <HAL_UART_MspInit+0x320>)
 800569c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a0:	6413      	str	r3, [r2, #64]	; 0x40
 80056a2:	4b30      	ldr	r3, [pc, #192]	; (8005764 <HAL_UART_MspInit+0x320>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <HAL_UART_MspInit+0x320>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <HAL_UART_MspInit+0x320>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	4b29      	ldr	r3, [pc, #164]	; (8005764 <HAL_UART_MspInit+0x320>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056ca:	230c      	movs	r3, #12
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ce:	2302      	movs	r3, #2
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d6:	2303      	movs	r3, #3
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056da:	2307      	movs	r3, #7
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e2:	4619      	mov	r1, r3
 80056e4:	4820      	ldr	r0, [pc, #128]	; (8005768 <HAL_UART_MspInit+0x324>)
 80056e6:	f001 feab 	bl	8007440 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_UART_MspInit+0x328>)
 80056ec:	4a20      	ldr	r2, [pc, #128]	; (8005770 <HAL_UART_MspInit+0x32c>)
 80056ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80056f0:	4b1e      	ldr	r3, [pc, #120]	; (800576c <HAL_UART_MspInit+0x328>)
 80056f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056f8:	4b1c      	ldr	r3, [pc, #112]	; (800576c <HAL_UART_MspInit+0x328>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056fe:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_UART_MspInit+0x328>)
 8005700:	2200      	movs	r2, #0
 8005702:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <HAL_UART_MspInit+0x328>)
 8005706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800570a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_UART_MspInit+0x328>)
 800570e:	2200      	movs	r2, #0
 8005710:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <HAL_UART_MspInit+0x328>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <HAL_UART_MspInit+0x328>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <HAL_UART_MspInit+0x328>)
 8005720:	2200      	movs	r2, #0
 8005722:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <HAL_UART_MspInit+0x328>)
 8005726:	2200      	movs	r2, #0
 8005728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800572a:	4810      	ldr	r0, [pc, #64]	; (800576c <HAL_UART_MspInit+0x328>)
 800572c:	f001 fa1a 	bl	8006b64 <HAL_DMA_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8005736:	f7ff f829 	bl	800478c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a0b      	ldr	r2, [pc, #44]	; (800576c <HAL_UART_MspInit+0x328>)
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <HAL_UART_MspInit+0x328>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005746:	2200      	movs	r2, #0
 8005748:	2101      	movs	r1, #1
 800574a:	2026      	movs	r0, #38	; 0x26
 800574c:	f001 f9c5 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005750:	2026      	movs	r0, #38	; 0x26
 8005752:	f001 f9de 	bl	8006b12 <HAL_NVIC_EnableIRQ>
}
 8005756:	bf00      	nop
 8005758:	3738      	adds	r7, #56	; 0x38
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40004400 	.word	0x40004400
 8005764:	40023800 	.word	0x40023800
 8005768:	40020000 	.word	0x40020000
 800576c:	200005c0 	.word	0x200005c0
 8005770:	40026088 	.word	0x40026088

08005774 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a27      	ldr	r2, [pc, #156]	; (8005820 <HAL_UART_MspDeInit+0xac>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d117      	bne.n	80057b6 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8005786:	4b27      	ldr	r3, [pc, #156]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a26      	ldr	r2, [pc, #152]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 800578c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8005792:	2103      	movs	r1, #3
 8005794:	4824      	ldr	r0, [pc, #144]	; (8005828 <HAL_UART_MspDeInit+0xb4>)
 8005796:	f001 ffe7 	bl	8007768 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fa8e 	bl	8006cc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fa89 	bl	8006cc0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80057ae:	2034      	movs	r0, #52	; 0x34
 80057b0:	f001 f9bd 	bl	8006b2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80057b4:	e02f      	b.n	8005816 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_UART_MspDeInit+0xb8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d113      	bne.n	80057e8 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80057cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057d0:	4815      	ldr	r0, [pc, #84]	; (8005828 <HAL_UART_MspDeInit+0xb4>)
 80057d2:	f001 ffc9 	bl	8007768 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fa70 	bl	8006cc0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80057e0:	2025      	movs	r0, #37	; 0x25
 80057e2:	f001 f9a4 	bl	8006b2e <HAL_NVIC_DisableIRQ>
}
 80057e6:	e016      	b.n	8005816 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a10      	ldr	r2, [pc, #64]	; (8005830 <HAL_UART_MspDeInit+0xbc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d111      	bne.n	8005816 <HAL_UART_MspDeInit+0xa2>
    __HAL_RCC_USART2_CLK_DISABLE();
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a0b      	ldr	r2, [pc, #44]	; (8005824 <HAL_UART_MspDeInit+0xb0>)
 80057f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80057fe:	210c      	movs	r1, #12
 8005800:	4809      	ldr	r0, [pc, #36]	; (8005828 <HAL_UART_MspDeInit+0xb4>)
 8005802:	f001 ffb1 	bl	8007768 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fa58 	bl	8006cc0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005810:	2026      	movs	r0, #38	; 0x26
 8005812:	f001 f98c 	bl	8006b2e <HAL_NVIC_DisableIRQ>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40004c00 	.word	0x40004c00
 8005824:	40023800 	.word	0x40023800
 8005828:	40020000 	.word	0x40020000
 800582c:	40011000 	.word	0x40011000
 8005830:	40004400 	.word	0x40004400

08005834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005838:	e7fe      	b.n	8005838 <NMI_Handler+0x4>

0800583a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800583e:	e7fe      	b.n	800583e <HardFault_Handler+0x4>

08005840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005844:	e7fe      	b.n	8005844 <MemManage_Handler+0x4>

08005846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800584a:	e7fe      	b.n	800584a <BusFault_Handler+0x4>

0800584c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005850:	e7fe      	b.n	8005850 <UsageFault_Handler+0x4>

08005852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005880:	f000 fbd8 	bl	8006034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005884:	bf00      	nop
 8005886:	bd80      	pop	{r7, pc}

08005888 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800588c:	2008      	movs	r0, #8
 800588e:	f002 f893 	bl	80079b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}

08005896 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 800589a:	2010      	movs	r0, #16
 800589c:	f002 f88c 	bl	80079b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80058a0:	bf00      	nop
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80058a8:	4802      	ldr	r0, [pc, #8]	; (80058b4 <DMA1_Stream2_IRQHandler+0x10>)
 80058aa:	f001 fb51 	bl	8006f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80058ae:	bf00      	nop
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000500 	.word	0x20000500

080058b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <DMA1_Stream4_IRQHandler+0x10>)
 80058be:	f001 fb47 	bl	8006f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	200004a0 	.word	0x200004a0

080058cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80058d0:	4802      	ldr	r0, [pc, #8]	; (80058dc <DMA1_Stream5_IRQHandler+0x10>)
 80058d2:	f001 fb3d 	bl	8006f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200005c0 	.word	0x200005c0

080058e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058e4:	4802      	ldr	r0, [pc, #8]	; (80058f0 <USART1_IRQHandler+0x10>)
 80058e6:	f004 fdbd 	bl	800a464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000418 	.word	0x20000418

080058f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058f8:	4802      	ldr	r0, [pc, #8]	; (8005904 <USART2_IRQHandler+0x10>)
 80058fa:	f004 fdb3 	bl	800a464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	2000045c 	.word	0x2000045c

08005908 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800590c:	4802      	ldr	r0, [pc, #8]	; (8005918 <UART4_IRQHandler+0x10>)
 800590e:	f004 fda9 	bl	800a464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200003d4 	.word	0x200003d4

0800591c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005920:	4802      	ldr	r0, [pc, #8]	; (800592c <DMA2_Stream7_IRQHandler+0x10>)
 8005922:	f001 fb15 	bl	8006f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000560 	.word	0x20000560

08005930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
	return 1;
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <_kill>:

int _kill(int pid, int sig)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800594a:	f005 fee3 	bl	800b714 <__errno>
 800594e:	4603      	mov	r3, r0
 8005950:	2216      	movs	r2, #22
 8005952:	601a      	str	r2, [r3, #0]
	return -1;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <_exit>:

void _exit (int status)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005968:	f04f 31ff 	mov.w	r1, #4294967295
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ffe7 	bl	8005940 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005972:	e7fe      	b.n	8005972 <_exit+0x12>

08005974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e00a      	b.n	800599c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005986:	f3af 8000 	nop.w
 800598a:	4601      	mov	r1, r0
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	60ba      	str	r2, [r7, #8]
 8005992:	b2ca      	uxtb	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	3301      	adds	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	dbf0      	blt.n	8005986 <_read+0x12>
	}

return len;
 80059a4:	687b      	ldr	r3, [r7, #4]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e009      	b.n	80059d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	60ba      	str	r2, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	3301      	adds	r3, #1
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	dbf1      	blt.n	80059c0 <_write+0x12>
	}
	return len;
 80059dc:	687b      	ldr	r3, [r7, #4]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <_close>:

int _close(int file)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
	return -1;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <_isatty>:

int _isatty(int file)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
	return 1;
 8005a26:	2301      	movs	r3, #1
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <_sbrk+0x5c>)
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <_sbrk+0x60>)
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <_sbrk+0x64>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <_sbrk+0x64>)
 8005a6e:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <_sbrk+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <_sbrk+0x64>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d207      	bcs.n	8005a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a80:	f005 fe48 	bl	800b714 <__errno>
 8005a84:	4603      	mov	r3, r0
 8005a86:	220c      	movs	r2, #12
 8005a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	e009      	b.n	8005aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <_sbrk+0x64>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <_sbrk+0x64>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <_sbrk+0x64>)
 8005aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20020000 	.word	0x20020000
 8005ab0:	00000400 	.word	0x00000400
 8005ab4:	2000090c 	.word	0x2000090c
 8005ab8:	20001238 	.word	0x20001238

08005abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <SystemInit+0x20>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	4a05      	ldr	r2, [pc, #20]	; (8005adc <SystemInit+0x20>)
 8005ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000ed00 	.word	0xe000ed00

08005ae0 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <HAL_UART_RxCpltCallback+0x40>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d105      	bne.n	8005afc <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <HAL_UART_RxCpltCallback+0x44>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <HAL_UART_RxCpltCallback+0x48>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a0b      	ldr	r2, [pc, #44]	; (8005b2c <HAL_UART_RxCpltCallback+0x4c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <HAL_UART_RxCpltCallback+0x50>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <HAL_UART_RxCpltCallback+0x54>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	4619      	mov	r1, r3
 8005b12:	4806      	ldr	r0, [pc, #24]	; (8005b2c <HAL_UART_RxCpltCallback+0x4c>)
 8005b14:	f004 fc76 	bl	800a404 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	2000045c 	.word	0x2000045c
 8005b24:	20000910 	.word	0x20000910
 8005b28:	20000911 	.word	0x20000911
 8005b2c:	200003d4 	.word	0x200003d4
 8005b30:	20000780 	.word	0x20000780
 8005b34:	2000077c 	.word	0x2000077c

08005b38 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8005b40:	f240 228a 	movw	r2, #650	; 0x28a
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <UsrGpsL86Init+0x1c>)
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f004 fc5c 	bl	800a404 <HAL_UART_Receive_DMA>
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200009e8 	.word	0x200009e8

08005b58 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
    getRmc();
 8005b60:	f000 f83a 	bl	8005bd8 <getRmc>
    getGGA();
 8005b64:	f000 f95c 	bl	8005e20 <getGGA>
    if (rmcValidFlag)
 8005b68:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <Usr_GpsL86GetValues+0x74>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <Usr_GpsL86GetValues+0x74>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8005b78:	f000 f8e4 	bl	8005d44 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8005b7c:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8005b84:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8005bac:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <Usr_GpsL86GetValues+0x78>)
 8005bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8005bbc:	4805      	ldr	r0, [pc, #20]	; (8005bd4 <Usr_GpsL86GetValues+0x7c>)
 8005bbe:	f7ff ffbb 	bl	8005b38 <UsrGpsL86Init>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000912 	.word	0x20000912
 8005bd0:	200011f0 	.word	0x200011f0
 8005bd4:	2000045c 	.word	0x2000045c

08005bd8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 8005bde:	4b4a      	ldr	r3, [pc, #296]	; (8005d08 <getRmc+0x130>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 808a 	beq.w	8005cfe <getRmc+0x126>
	    {
	        MsgIndex = 0;
 8005bea:	4b48      	ldr	r3, [pc, #288]	; (8005d0c <getRmc+0x134>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005bf0:	4947      	ldr	r1, [pc, #284]	; (8005d10 <getRmc+0x138>)
 8005bf2:	4848      	ldr	r0, [pc, #288]	; (8005d14 <getRmc+0x13c>)
 8005bf4:	f006 fcd1 	bl	800c59a <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8005bf8:	4947      	ldr	r1, [pc, #284]	; (8005d18 <getRmc+0x140>)
 8005bfa:	4846      	ldr	r0, [pc, #280]	; (8005d14 <getRmc+0x13c>)
 8005bfc:	f006 fcd5 	bl	800c5aa <strstr>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4a46      	ldr	r2, [pc, #280]	; (8005d1c <getRmc+0x144>)
 8005c04:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8005c06:	4b45      	ldr	r3, [pc, #276]	; (8005d1c <getRmc+0x144>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b47      	cmp	r3, #71	; 0x47
 8005c0e:	d173      	bne.n	8005cf8 <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8005c10:	4b42      	ldr	r3, [pc, #264]	; (8005d1c <getRmc+0x144>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <getRmc+0x134>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	7811      	ldrb	r1, [r2, #0]
 8005c1a:	4a41      	ldr	r2, [pc, #260]	; (8005d20 <getRmc+0x148>)
 8005c1c:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <getRmc+0x134>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <getRmc+0x134>)
 8005c26:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8005c28:	4b3c      	ldr	r3, [pc, #240]	; (8005d1c <getRmc+0x144>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a37      	ldr	r2, [pc, #220]	; (8005d0c <getRmc+0x134>)
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	441a      	add	r2, r3
 8005c32:	4b3a      	ldr	r3, [pc, #232]	; (8005d1c <getRmc+0x144>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005c3a:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <getRmc+0x144>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b0a      	cmp	r3, #10
 8005c42:	d003      	beq.n	8005c4c <getRmc+0x74>
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <getRmc+0x134>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b5a      	cmp	r3, #90	; 0x5a
 8005c4a:	dde1      	ble.n	8005c10 <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 8005c4c:	4b2f      	ldr	r3, [pc, #188]	; (8005d0c <getRmc+0x134>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c56:	2100      	movs	r1, #0
 8005c58:	482e      	ldr	r0, [pc, #184]	; (8005d14 <getRmc+0x13c>)
 8005c5a:	f005 fd85 	bl	800b768 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 8005c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c62:	2100      	movs	r1, #0
 8005c64:	482a      	ldr	r0, [pc, #168]	; (8005d10 <getRmc+0x138>)
 8005c66:	f005 fd7f 	bl	800b768 <memset>

	                    for (int i = 0; i < 100; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	e014      	b.n	8005c9a <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8005c70:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <getRmc+0x148>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b4e      	cmp	r3, #78	; 0x4e
 8005c7a:	d102      	bne.n	8005c82 <getRmc+0xaa>
	                            f_northFlag = true;
 8005c7c:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <getRmc+0x14c>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8005c82:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <getRmc+0x148>)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b45      	cmp	r3, #69	; 0x45
 8005c8c:	d102      	bne.n	8005c94 <getRmc+0xbc>
	                            f_eastFlag = true;
 8005c8e:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <getRmc+0x150>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3301      	adds	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b63      	cmp	r3, #99	; 0x63
 8005c9e:	dde7      	ble.n	8005c70 <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8005ca0:	481f      	ldr	r0, [pc, #124]	; (8005d20 <getRmc+0x148>)
 8005ca2:	f7fa fabf 	bl	8000224 <strlen>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b0a      	cmp	r3, #10
 8005caa:	d91f      	bls.n	8005cec <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <getRmc+0x150>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01f      	beq.n	8005cf6 <getRmc+0x11e>
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <getRmc+0x14c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <getRmc+0x14c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8005cc6:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <getRmc+0x150>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <getRmc+0x154>)
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <getRmc+0x158>)
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <getRmc+0x15c>)
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <getRmc+0x160>)
 8005cd8:	4918      	ldr	r1, [pc, #96]	; (8005d3c <getRmc+0x164>)
 8005cda:	4811      	ldr	r0, [pc, #68]	; (8005d20 <getRmc+0x148>)
 8005cdc:	f006 fbec 	bl	800c4b8 <siscanf>
	                            rmcValidFlag = true;
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <getRmc+0x168>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8005ce6:	f000 f82d 	bl	8005d44 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8005cea:	e004      	b.n	8005cf6 <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005cec:	2264      	movs	r2, #100	; 0x64
 8005cee:	2100      	movs	r1, #0
 8005cf0:	480b      	ldr	r0, [pc, #44]	; (8005d20 <getRmc+0x148>)
 8005cf2:	f005 fd39 	bl	800b768 <memset>
	                    break;
 8005cf6:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <getRmc+0x130>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]

	    }

}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000910 	.word	0x20000910
 8005d0c:	20000918 	.word	0x20000918
 8005d10:	200009e8 	.word	0x200009e8
 8005d14:	20000de8 	.word	0x20000de8
 8005d18:	080126b8 	.word	0x080126b8
 8005d1c:	2000091c 	.word	0x2000091c
 8005d20:	20000920 	.word	0x20000920
 8005d24:	20000913 	.word	0x20000913
 8005d28:	20000914 	.word	0x20000914
 8005d2c:	200011f8 	.word	0x200011f8
 8005d30:	200011ec 	.word	0x200011ec
 8005d34:	200011e8 	.word	0x200011e8
 8005d38:	200011fc 	.word	0x200011fc
 8005d3c:	080126c0 	.word	0x080126c0
 8005d40:	20000912 	.word	0x20000912

08005d44 <formatLatLong>:

_io void formatLatLong(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8005d4a:	4b30      	ldr	r3, [pc, #192]	; (8005e0c <formatLatLong+0xc8>)
 8005d4c:	edd3 7a00 	vldr	s15, [r3]
 8005d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d54:	ee17 1a90 	vmov	r1, s15
 8005d58:	4b2d      	ldr	r3, [pc, #180]	; (8005e10 <formatLatLong+0xcc>)
 8005d5a:	fb83 2301 	smull	r2, r3, r3, r1
 8005d5e:	115a      	asrs	r2, r3, #5
 8005d60:	17cb      	asrs	r3, r1, #31
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <formatLatLong+0xc8>)
 8005d68:	ed93 7a00 	vldr	s14, [r3]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2264      	movs	r2, #100	; 0x64
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d80:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d8e:	edd7 6a00 	vldr	s13, [r7]
 8005d92:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8005e14 <formatLatLong+0xd0>
 8005d96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <formatLatLong+0xd4>)
 8005da0:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <formatLatLong+0xd8>)
 8005da6:	edd3 7a00 	vldr	s15, [r3]
 8005daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dae:	ee17 1a90 	vmov	r1, s15
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <formatLatLong+0xcc>)
 8005db4:	fb83 2301 	smull	r2, r3, r3, r1
 8005db8:	115a      	asrs	r2, r3, #5
 8005dba:	17cb      	asrs	r3, r1, #31
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8005dc0:	4b16      	ldr	r3, [pc, #88]	; (8005e1c <formatLatLong+0xd8>)
 8005dc2:	ed93 7a00 	vldr	s14, [r3]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2264      	movs	r2, #100	; 0x64
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dda:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005de8:	edd7 6a00 	vldr	s13, [r7]
 8005dec:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8005e14 <formatLatLong+0xd0>
 8005df0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <formatLatLong+0xd4>)
 8005dfa:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	200011e8 	.word	0x200011e8
 8005e10:	51eb851f 	.word	0x51eb851f
 8005e14:	42700000 	.word	0x42700000
 8005e18:	200011f0 	.word	0x200011f0
 8005e1c:	200011ec 	.word	0x200011ec

08005e20 <getGGA>:

_io void getGGA(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8005e26:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <getGGA+0xd8>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d060      	beq.n	8005ef2 <getGGA+0xd2>
    {
        MsgIndex = 0;
 8005e30:	4b32      	ldr	r3, [pc, #200]	; (8005efc <getGGA+0xdc>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005e36:	4932      	ldr	r1, [pc, #200]	; (8005f00 <getGGA+0xe0>)
 8005e38:	4832      	ldr	r0, [pc, #200]	; (8005f04 <getGGA+0xe4>)
 8005e3a:	f006 fbae 	bl	800c59a <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8005e3e:	4932      	ldr	r1, [pc, #200]	; (8005f08 <getGGA+0xe8>)
 8005e40:	4830      	ldr	r0, [pc, #192]	; (8005f04 <getGGA+0xe4>)
 8005e42:	f006 fbb2 	bl	800c5aa <strstr>
 8005e46:	4603      	mov	r3, r0
 8005e48:	4a30      	ldr	r2, [pc, #192]	; (8005f0c <getGGA+0xec>)
 8005e4a:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <getGGA+0xec>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b47      	cmp	r3, #71	; 0x47
 8005e54:	d14a      	bne.n	8005eec <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <getGGA+0xec>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b28      	ldr	r3, [pc, #160]	; (8005efc <getGGA+0xdc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	7811      	ldrb	r1, [r2, #0]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	; (8005f10 <getGGA+0xf0>)
 8005e62:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <getGGA+0xdc>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a24      	ldr	r2, [pc, #144]	; (8005efc <getGGA+0xdc>)
 8005e6c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <getGGA+0xec>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a22      	ldr	r2, [pc, #136]	; (8005efc <getGGA+0xdc>)
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	441a      	add	r2, r3
 8005e78:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <getGGA+0xec>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005e80:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <getGGA+0xec>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b0a      	cmp	r3, #10
 8005e88:	d003      	beq.n	8005e92 <getGGA+0x72>
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <getGGA+0xdc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b5a      	cmp	r3, #90	; 0x5a
 8005e90:	dde1      	ble.n	8005e56 <getGGA+0x36>
                {
                    MsgIndex = 0;
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <getGGA+0xdc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4819      	ldr	r0, [pc, #100]	; (8005f04 <getGGA+0xe4>)
 8005ea0:	f005 fc62 	bl	800b768 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8005ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4815      	ldr	r0, [pc, #84]	; (8005f00 <getGGA+0xe0>)
 8005eac:	f005 fc5c 	bl	800b768 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8005eb0:	4817      	ldr	r0, [pc, #92]	; (8005f10 <getGGA+0xf0>)
 8005eb2:	f7fa f9b7 	bl	8000224 <strlen>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b0a      	cmp	r3, #10
 8005eba:	d912      	bls.n	8005ee2 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <getGGA+0xf4>)
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <getGGA+0xf8>)
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <getGGA+0xfc>)
 8005ec6:	9303      	str	r3, [sp, #12]
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <getGGA+0x100>)
 8005eca:	9302      	str	r3, [sp, #8]
 8005ecc:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <getGGA+0x104>)
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <getGGA+0x108>)
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <getGGA+0x10c>)
 8005ed6:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <getGGA+0x110>)
 8005ed8:	4916      	ldr	r1, [pc, #88]	; (8005f34 <getGGA+0x114>)
 8005eda:	480d      	ldr	r0, [pc, #52]	; (8005f10 <getGGA+0xf0>)
 8005edc:	f006 faec 	bl	800c4b8 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8005ee0:	e004      	b.n	8005eec <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005ee2:	2264      	movs	r2, #100	; 0x64
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4814      	ldr	r0, [pc, #80]	; (8005f38 <getGGA+0x118>)
 8005ee8:	f005 fc3e 	bl	800b768 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <getGGA+0xd8>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 8005ef2:	bf00      	nop
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000911 	.word	0x20000911
 8005efc:	20000918 	.word	0x20000918
 8005f00:	200009e8 	.word	0x200009e8
 8005f04:	20000de8 	.word	0x20000de8
 8005f08:	080126dc 	.word	0x080126dc
 8005f0c:	2000091c 	.word	0x2000091c
 8005f10:	20000984 	.word	0x20000984
 8005f14:	2000121c 	.word	0x2000121c
 8005f18:	20001218 	.word	0x20001218
 8005f1c:	20001214 	.word	0x20001214
 8005f20:	20001210 	.word	0x20001210
 8005f24:	2000120c 	.word	0x2000120c
 8005f28:	20001208 	.word	0x20001208
 8005f2c:	20001204 	.word	0x20001204
 8005f30:	20001200 	.word	0x20001200
 8005f34:	080126e4 	.word	0x080126e4
 8005f38:	20000920 	.word	0x20000920

08005f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f40:	480d      	ldr	r0, [pc, #52]	; (8005f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f42:	490e      	ldr	r1, [pc, #56]	; (8005f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f44:	4a0e      	ldr	r2, [pc, #56]	; (8005f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f48:	e002      	b.n	8005f50 <LoopCopyDataInit>

08005f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f4e:	3304      	adds	r3, #4

08005f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f54:	d3f9      	bcc.n	8005f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f56:	4a0b      	ldr	r2, [pc, #44]	; (8005f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f58:	4c0b      	ldr	r4, [pc, #44]	; (8005f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f5c:	e001      	b.n	8005f62 <LoopFillZerobss>

08005f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f60:	3204      	adds	r2, #4

08005f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f64:	d3fb      	bcc.n	8005f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f66:	f7ff fda9 	bl	8005abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f6a:	f005 fbd9 	bl	800b720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f6e:	f7fd fd0b 	bl	8003988 <main>
  bx  lr    
 8005f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f7c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005f80:	08012ca8 	.word	0x08012ca8
  ldr r2, =_sbss
 8005f84:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005f88:	20001234 	.word	0x20001234

08005f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f8c:	e7fe      	b.n	8005f8c <ADC_IRQHandler>
	...

08005f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <HAL_Init+0x40>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <HAL_Init+0x40>)
 8005f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_Init+0x40>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <HAL_Init+0x40>)
 8005fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_Init+0x40>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <HAL_Init+0x40>)
 8005fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fb8:	2003      	movs	r0, #3
 8005fba:	f000 fd83 	bl	8006ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fbe:	200f      	movs	r0, #15
 8005fc0:	f000 f808 	bl	8005fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fc4:	f7ff f8ca 	bl	800515c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <HAL_InitTick+0x54>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b12      	ldr	r3, [pc, #72]	; (800602c <HAL_InitTick+0x58>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fda9 	bl	8006b4a <HAL_SYSTICK_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e00e      	b.n	8006020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b0f      	cmp	r3, #15
 8006006:	d80a      	bhi.n	800601e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006008:	2200      	movs	r2, #0
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	f000 fd63 	bl	8006ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <HAL_InitTick+0x5c>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000008 	.word	0x20000008
 800602c:	20000010 	.word	0x20000010
 8006030:	2000000c 	.word	0x2000000c

08006034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_IncTick+0x20>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_IncTick+0x24>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4413      	add	r3, r2
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <HAL_IncTick+0x24>)
 8006046:	6013      	str	r3, [r2, #0]
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000010 	.word	0x20000010
 8006058:	20001220 	.word	0x20001220

0800605c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return uwTick;
 8006060:	4b03      	ldr	r3, [pc, #12]	; (8006070 <HAL_GetTick+0x14>)
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	20001220 	.word	0x20001220

08006074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7ff ffee 	bl	800605c <HAL_GetTick>
 8006080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d005      	beq.n	800609a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <HAL_Delay+0x44>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800609a:	bf00      	nop
 800609c:	f7ff ffde 	bl	800605c <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d8f7      	bhi.n	800609c <HAL_Delay+0x28>
  {
  }
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000010 	.word	0x20000010

080060bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e033      	b.n	800613a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff f866 	bl	80051ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d118      	bne.n	800612c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006102:	f023 0302 	bic.w	r3, r3, #2
 8006106:	f043 0202 	orr.w	r2, r3, #2
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fae8 	bl	80066e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	f043 0201 	orr.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
 800612a:	e001      	b.n	8006130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_ADC_Start+0x1a>
 800615a:	2302      	movs	r3, #2
 800615c:	e0b2      	b.n	80062c4 <HAL_ADC_Start+0x180>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d018      	beq.n	80061a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006184:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <HAL_ADC_Start+0x18c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a52      	ldr	r2, [pc, #328]	; (80062d4 <HAL_ADC_Start+0x190>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0c9a      	lsrs	r2, r3, #18
 8006190:	4613      	mov	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006198:	e002      	b.n	80061a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f9      	bne.n	800619a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d17a      	bne.n	80062aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	d106      	bne.n	8006202 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	f023 0206 	bic.w	r2, r3, #6
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	645a      	str	r2, [r3, #68]	; 0x44
 8006200:	e002      	b.n	8006208 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006210:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <HAL_ADC_Start+0x194>)
 8006212:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800621c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2b00      	cmp	r3, #0
 8006228:	d12a      	bne.n	8006280 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <HAL_ADC_Start+0x198>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d015      	beq.n	8006260 <HAL_ADC_Start+0x11c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <HAL_ADC_Start+0x19c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d105      	bne.n	800624a <HAL_ADC_Start+0x106>
 800623e:	4b26      	ldr	r3, [pc, #152]	; (80062d8 <HAL_ADC_Start+0x194>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_ADC_Start+0x1a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d136      	bne.n	80062c2 <HAL_ADC_Start+0x17e>
 8006254:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_ADC_Start+0x194>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d130      	bne.n	80062c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d129      	bne.n	80062c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800627c:	609a      	str	r2, [r3, #8]
 800627e:	e020      	b.n	80062c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <HAL_ADC_Start+0x198>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d11b      	bne.n	80062c2 <HAL_ADC_Start+0x17e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d114      	bne.n	80062c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	e00b      	b.n	80062c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f043 0210 	orr.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000008 	.word	0x20000008
 80062d4:	431bde83 	.word	0x431bde83
 80062d8:	40012300 	.word	0x40012300
 80062dc:	40012000 	.word	0x40012000
 80062e0:	40012100 	.word	0x40012100
 80062e4:	40012200 	.word	0x40012200

080062e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_ADC_Stop+0x16>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e021      	b.n	8006342 <HAL_ADC_Stop+0x5a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0201 	bic.w	r2, r2, #1
 8006314:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d113      	bne.n	8006394 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d10b      	bne.n	8006394 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e063      	b.n	800645c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006394:	f7ff fe62 	bl	800605c <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800639a:	e021      	b.n	80063e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d01d      	beq.n	80063e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_ADC_PollForConversion+0x6c>
 80063aa:	f7ff fe57 	bl	800605c <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d212      	bcs.n	80063e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d00b      	beq.n	80063e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f043 0204 	orr.w	r2, r3, #4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e03d      	b.n	800645c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d1d6      	bne.n	800639c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f06f 0212 	mvn.w	r2, #18
 80063f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d123      	bne.n	800645a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11f      	bne.n	800645a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006432:	2b00      	cmp	r3, #0
 8006434:	d111      	bne.n	800645a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0201 	orr.w	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_ADC_ConfigChannel+0x1c>
 8006498:	2302      	movs	r3, #2
 800649a:	e113      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x244>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d925      	bls.n	80064f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68d9      	ldr	r1, [r3, #12]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	4613      	mov	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	3b1e      	subs	r3, #30
 80064c2:	2207      	movs	r2, #7
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	43da      	mvns	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	400a      	ands	r2, r1
 80064d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68d9      	ldr	r1, [r3, #12]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4618      	mov	r0, r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4403      	add	r3, r0
 80064ea:	3b1e      	subs	r3, #30
 80064ec:	409a      	lsls	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e022      	b.n	800653e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6919      	ldr	r1, [r3, #16]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	4613      	mov	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	2207      	movs	r2, #7
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43da      	mvns	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	400a      	ands	r2, r1
 800651a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6919      	ldr	r1, [r3, #16]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	4603      	mov	r3, r0
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4403      	add	r3, r0
 8006534:	409a      	lsls	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b06      	cmp	r3, #6
 8006544:	d824      	bhi.n	8006590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	3b05      	subs	r3, #5
 8006558:	221f      	movs	r2, #31
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43da      	mvns	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	400a      	ands	r2, r1
 8006566:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	4618      	mov	r0, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	3b05      	subs	r3, #5
 8006582:	fa00 f203 	lsl.w	r2, r0, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	635a      	str	r2, [r3, #52]	; 0x34
 800658e:	e04c      	b.n	800662a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d824      	bhi.n	80065e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	3b23      	subs	r3, #35	; 0x23
 80065aa:	221f      	movs	r2, #31
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	43da      	mvns	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	400a      	ands	r2, r1
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4618      	mov	r0, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	3b23      	subs	r3, #35	; 0x23
 80065d4:	fa00 f203 	lsl.w	r2, r0, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
 80065e0:	e023      	b.n	800662a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	3b41      	subs	r3, #65	; 0x41
 80065f4:	221f      	movs	r2, #31
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43da      	mvns	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	400a      	ands	r2, r1
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	4618      	mov	r0, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	3b41      	subs	r3, #65	; 0x41
 800661e:	fa00 f203 	lsl.w	r2, r0, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800662a:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <HAL_ADC_ConfigChannel+0x250>)
 800662c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <HAL_ADC_ConfigChannel+0x254>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10f      	bne.n	8006658 <HAL_ADC_ConfigChannel+0x1d8>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b12      	cmp	r3, #18
 800663e:	d10b      	bne.n	8006658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <HAL_ADC_ConfigChannel+0x254>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d12b      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x23a>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <HAL_ADC_ConfigChannel+0x258>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <HAL_ADC_ConfigChannel+0x1f4>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b11      	cmp	r3, #17
 8006672:	d122      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <HAL_ADC_ConfigChannel+0x258>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d111      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_ADC_ConfigChannel+0x25c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <HAL_ADC_ConfigChannel+0x260>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	0c9a      	lsrs	r2, r3, #18
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80066ac:	e002      	b.n	80066b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f9      	bne.n	80066ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40012300 	.word	0x40012300
 80066d4:	40012000 	.word	0x40012000
 80066d8:	10000012 	.word	0x10000012
 80066dc:	20000008 	.word	0x20000008
 80066e0:	431bde83 	.word	0x431bde83

080066e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066ec:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <ADC_Init+0x1f0>)
 80066ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	021a      	lsls	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800673c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800675e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6899      	ldr	r1, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	4a58      	ldr	r2, [pc, #352]	; (80068d8 <ADC_Init+0x1f4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800678a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6899      	ldr	r1, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6899      	ldr	r1, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	e00f      	b.n	80067e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0202 	bic.w	r2, r2, #2
 80067f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6899      	ldr	r1, [r3, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7e1b      	ldrb	r3, [r3, #24]
 80067fc:	005a      	lsls	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01b      	beq.n	8006848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800681e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800682e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	3b01      	subs	r3, #1
 800683c:	035a      	lsls	r2, r3, #13
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	e007      	b.n	8006858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006856:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	3b01      	subs	r3, #1
 8006874:	051a      	lsls	r2, r3, #20
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800688c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6899      	ldr	r1, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800689a:	025a      	lsls	r2, r3, #9
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6899      	ldr	r1, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	029a      	lsls	r2, r3, #10
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40012300 	.word	0x40012300
 80068d8:	0f000001 	.word	0x0f000001

080068dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068f8:	4013      	ands	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800690e:	4a04      	ldr	r2, [pc, #16]	; (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	60d3      	str	r3, [r2, #12]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	e000ed00 	.word	0xe000ed00

08006924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <__NVIC_GetPriorityGrouping+0x18>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	f003 0307 	and.w	r3, r3, #7
}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	e000ed00 	.word	0xe000ed00

08006940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	2b00      	cmp	r3, #0
 8006950:	db0b      	blt.n	800696a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f003 021f 	and.w	r2, r3, #31
 8006958:	4907      	ldr	r1, [pc, #28]	; (8006978 <__NVIC_EnableIRQ+0x38>)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2001      	movs	r0, #1
 8006962:	fa00 f202 	lsl.w	r2, r0, r2
 8006966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e000e100 	.word	0xe000e100

0800697c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	db12      	blt.n	80069b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	f003 021f 	and.w	r2, r3, #31
 8006994:	490a      	ldr	r1, [pc, #40]	; (80069c0 <__NVIC_DisableIRQ+0x44>)
 8006996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2001      	movs	r0, #1
 800699e:	fa00 f202 	lsl.w	r2, r0, r2
 80069a2:	3320      	adds	r3, #32
 80069a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80069a8:	f3bf 8f4f 	dsb	sy
}
 80069ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069ae:	f3bf 8f6f 	isb	sy
}
 80069b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	e000e100 	.word	0xe000e100

080069c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	6039      	str	r1, [r7, #0]
 80069ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db0a      	blt.n	80069ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	490c      	ldr	r1, [pc, #48]	; (8006a10 <__NVIC_SetPriority+0x4c>)
 80069de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e2:	0112      	lsls	r2, r2, #4
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	440b      	add	r3, r1
 80069e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069ec:	e00a      	b.n	8006a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4908      	ldr	r1, [pc, #32]	; (8006a14 <__NVIC_SetPriority+0x50>)
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	3b04      	subs	r3, #4
 80069fc:	0112      	lsls	r2, r2, #4
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	440b      	add	r3, r1
 8006a02:	761a      	strb	r2, [r3, #24]
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	e000e100 	.word	0xe000e100
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b089      	sub	sp, #36	; 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f1c3 0307 	rsb	r3, r3, #7
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	bf28      	it	cs
 8006a36:	2304      	movcs	r3, #4
 8006a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d902      	bls.n	8006a48 <NVIC_EncodePriority+0x30>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	3b03      	subs	r3, #3
 8006a46:	e000      	b.n	8006a4a <NVIC_EncodePriority+0x32>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43da      	mvns	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	43d9      	mvns	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a70:	4313      	orrs	r3, r2
         );
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3724      	adds	r7, #36	; 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a90:	d301      	bcc.n	8006a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a92:	2301      	movs	r3, #1
 8006a94:	e00f      	b.n	8006ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <SysTick_Config+0x40>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a9e:	210f      	movs	r1, #15
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	f7ff ff8e 	bl	80069c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <SysTick_Config+0x40>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <SysTick_Config+0x40>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010

08006ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff ff05 	bl	80068dc <__NVIC_SetPriorityGrouping>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006aec:	f7ff ff1a 	bl	8006924 <__NVIC_GetPriorityGrouping>
 8006af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f7ff ff8e 	bl	8006a18 <NVIC_EncodePriority>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff ff5d 	bl	80069c4 <__NVIC_SetPriority>
}
 8006b0a:	bf00      	nop
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	4603      	mov	r3, r0
 8006b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff ff0d 	bl	8006940 <__NVIC_EnableIRQ>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	4603      	mov	r3, r0
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff ff1d 	bl	800697c <__NVIC_DisableIRQ>
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ff94 	bl	8006a80 <SysTick_Config>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b70:	f7ff fa74 	bl	800605c <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e099      	b.n	8006cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ba0:	e00f      	b.n	8006bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ba2:	f7ff fa5b 	bl	800605c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d908      	bls.n	8006bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e078      	b.n	8006cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e8      	bne.n	8006ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4b38      	ldr	r3, [pc, #224]	; (8006cbc <HAL_DMA_Init+0x158>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d107      	bne.n	8006c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	4313      	orrs	r3, r2
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0307 	bic.w	r3, r3, #7
 8006c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d117      	bne.n	8006c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb6d 	bl	8007348 <DMA_CheckFifoParam>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c82:	2301      	movs	r3, #1
 8006c84:	e016      	b.n	8006cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb24 	bl	80072dc <DMA_CalcBaseAndBitshift>
 8006c94:	4603      	mov	r3, r0
 8006c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	223f      	movs	r2, #63	; 0x3f
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	f010803f 	.word	0xf010803f

08006cc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e050      	b.n	8006d74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d101      	bne.n	8006ce2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e048      	b.n	8006d74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2221      	movs	r2, #33	; 0x21
 8006d20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fada 	bl	80072dc <DMA_CalcBaseAndBitshift>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	223f      	movs	r2, #63	; 0x3f
 8006d56:	409a      	lsls	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_DMA_Start_IT+0x26>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e040      	b.n	8006e24 <HAL_DMA_Start_IT+0xa8>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d12f      	bne.n	8006e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fa58 	bl	8007280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd4:	223f      	movs	r2, #63	; 0x3f
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0216 	orr.w	r2, r2, #22
 8006dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e005      	b.n	8006e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e3a:	f7ff f90f 	bl	800605c <HAL_GetTick>
 8006e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d008      	beq.n	8006e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2280      	movs	r2, #128	; 0x80
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e052      	b.n	8006f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0216 	bic.w	r2, r2, #22
 8006e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	695a      	ldr	r2, [r3, #20]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <HAL_DMA_Abort+0x62>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0208 	bic.w	r2, r2, #8
 8006e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006eae:	e013      	b.n	8006ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006eb0:	f7ff f8d4 	bl	800605c <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d90c      	bls.n	8006ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e015      	b.n	8006f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e4      	bne.n	8006eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eea:	223f      	movs	r2, #63	; 0x3f
 8006eec:	409a      	lsls	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d004      	beq.n	8006f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2280      	movs	r2, #128	; 0x80
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e00c      	b.n	8006f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f5c:	4b8e      	ldr	r3, [pc, #568]	; (8007198 <HAL_DMA_IRQHandler+0x248>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a8e      	ldr	r2, [pc, #568]	; (800719c <HAL_DMA_IRQHandler+0x24c>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0a9b      	lsrs	r3, r3, #10
 8006f68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01a      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d013      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	2208      	movs	r2, #8
 8006faa:	409a      	lsls	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb4:	f043 0201 	orr.w	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d012      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fde:	2201      	movs	r2, #1
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f043 0202 	orr.w	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	409a      	lsls	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d012      	beq.n	8007028 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	2204      	movs	r2, #4
 8007016:	409a      	lsls	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007020:	f043 0204 	orr.w	r2, r3, #4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702c:	2210      	movs	r2, #16
 800702e:	409a      	lsls	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4013      	ands	r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d043      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03c      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704a:	2210      	movs	r2, #16
 800704c:	409a      	lsls	r2, r3
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d018      	beq.n	8007092 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d108      	bne.n	8007080 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d024      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
 800707e:	e01f      	b.n	80070c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01b      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
 8007090:	e016      	b.n	80070c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709c:	2b00      	cmp	r3, #0
 800709e:	d107      	bne.n	80070b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0208 	bic.w	r2, r2, #8
 80070ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	2220      	movs	r2, #32
 80070c6:	409a      	lsls	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 808f 	beq.w	80071f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8087 	beq.w	80071f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e6:	2220      	movs	r2, #32
 80070e8:	409a      	lsls	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d136      	bne.n	8007168 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0216 	bic.w	r2, r2, #22
 8007108:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007118:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <HAL_DMA_IRQHandler+0x1da>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0208 	bic.w	r2, r2, #8
 8007138:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713e:	223f      	movs	r2, #63	; 0x3f
 8007140:	409a      	lsls	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	2b00      	cmp	r3, #0
 800715c:	d07e      	beq.n	800725c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
        }
        return;
 8007166:	e079      	b.n	800725c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01d      	beq.n	80071b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10d      	bne.n	80071a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	2b00      	cmp	r3, #0
 800718a:	d031      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
 8007194:	e02c      	b.n	80071f0 <HAL_DMA_IRQHandler+0x2a0>
 8007196:	bf00      	nop
 8007198:	20000008 	.word	0x20000008
 800719c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d023      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
 80071b0:	e01e      	b.n	80071f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10f      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0210 	bic.w	r2, r2, #16
 80071ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d032      	beq.n	800725e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d022      	beq.n	800724a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2205      	movs	r2, #5
 8007208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3301      	adds	r3, #1
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	429a      	cmp	r2, r3
 8007226:	d307      	bcc.n	8007238 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f2      	bne.n	800721c <HAL_DMA_IRQHandler+0x2cc>
 8007236:	e000      	b.n	800723a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007238:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
 800725a:	e000      	b.n	800725e <HAL_DMA_IRQHandler+0x30e>
        return;
 800725c:	bf00      	nop
    }
  }
}
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007272:	b2db      	uxtb	r3, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800729c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d108      	bne.n	80072c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072be:	e007      	b.n	80072d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	3b10      	subs	r3, #16
 80072ec:	4a14      	ldr	r2, [pc, #80]	; (8007340 <DMA_CalcBaseAndBitshift+0x64>)
 80072ee:	fba2 2303 	umull	r2, r3, r2, r3
 80072f2:	091b      	lsrs	r3, r3, #4
 80072f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072f6:	4a13      	ldr	r2, [pc, #76]	; (8007344 <DMA_CalcBaseAndBitshift+0x68>)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d909      	bls.n	800731e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	1d1a      	adds	r2, r3, #4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	659a      	str	r2, [r3, #88]	; 0x58
 800731c:	e007      	b.n	800732e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	aaaaaaab 	.word	0xaaaaaaab
 8007344:	08012730 	.word	0x08012730

08007348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d11f      	bne.n	80073a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d856      	bhi.n	8007416 <DMA_CheckFifoParam+0xce>
 8007368:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <DMA_CheckFifoParam+0x28>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	08007381 	.word	0x08007381
 8007374:	08007393 	.word	0x08007393
 8007378:	08007381 	.word	0x08007381
 800737c:	08007417 	.word	0x08007417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d046      	beq.n	800741a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007390:	e043      	b.n	800741a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800739a:	d140      	bne.n	800741e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073a0:	e03d      	b.n	800741e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d121      	bne.n	80073f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d837      	bhi.n	8007422 <DMA_CheckFifoParam+0xda>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <DMA_CheckFifoParam+0x70>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073cf 	.word	0x080073cf
 80073c0:	080073c9 	.word	0x080073c9
 80073c4:	080073e1 	.word	0x080073e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e030      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d025      	beq.n	8007426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073de:	e022      	b.n	8007426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073e8:	d11f      	bne.n	800742a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073ee:	e01c      	b.n	800742a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d903      	bls.n	80073fe <DMA_CheckFifoParam+0xb6>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d003      	beq.n	8007404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073fc:	e018      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	e015      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
      break;
 8007414:	e00b      	b.n	800742e <DMA_CheckFifoParam+0xe6>
      break;
 8007416:	bf00      	nop
 8007418:	e00a      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;
 800741a:	bf00      	nop
 800741c:	e008      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;
 800741e:	bf00      	nop
 8007420:	e006      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;   
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <DMA_CheckFifoParam+0xe8>
      break;
 800742e:	bf00      	nop
    }
  } 
  
  return status; 
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop

08007440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007440:	b480      	push	{r7}
 8007442:	b089      	sub	sp, #36	; 0x24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007452:	2300      	movs	r3, #0
 8007454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	e165      	b.n	8007728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800745c:	2201      	movs	r2, #1
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	fa02 f303 	lsl.w	r3, r2, r3
 8007464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4013      	ands	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	429a      	cmp	r2, r3
 8007476:	f040 8154 	bne.w	8007722 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b01      	cmp	r3, #1
 8007484:	d005      	beq.n	8007492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800748e:	2b02      	cmp	r3, #2
 8007490:	d130      	bne.n	80074f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	2203      	movs	r2, #3
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	43db      	mvns	r3, r3
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074c8:	2201      	movs	r2, #1
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	43db      	mvns	r3, r3
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	4013      	ands	r3, r2
 80074d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 0201 	and.w	r2, r3, #1
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d017      	beq.n	8007530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	2203      	movs	r2, #3
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4013      	ands	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d123      	bne.n	8007584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	08da      	lsrs	r2, r3, #3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3208      	adds	r2, #8
 8007544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	220f      	movs	r2, #15
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4313      	orrs	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	08da      	lsrs	r2, r3, #3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3208      	adds	r2, #8
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	2203      	movs	r2, #3
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f003 0203 	and.w	r2, r3, #3
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80ae 	beq.w	8007722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <HAL_GPIO_Init+0x300>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	4a5c      	ldr	r2, [pc, #368]	; (8007740 <HAL_GPIO_Init+0x300>)
 80075d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d4:	6453      	str	r3, [r2, #68]	; 0x44
 80075d6:	4b5a      	ldr	r3, [pc, #360]	; (8007740 <HAL_GPIO_Init+0x300>)
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075e2:	4a58      	ldr	r2, [pc, #352]	; (8007744 <HAL_GPIO_Init+0x304>)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	089b      	lsrs	r3, r3, #2
 80075e8:	3302      	adds	r3, #2
 80075ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	220f      	movs	r2, #15
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4013      	ands	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a4f      	ldr	r2, [pc, #316]	; (8007748 <HAL_GPIO_Init+0x308>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d025      	beq.n	800765a <HAL_GPIO_Init+0x21a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a4e      	ldr	r2, [pc, #312]	; (800774c <HAL_GPIO_Init+0x30c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01f      	beq.n	8007656 <HAL_GPIO_Init+0x216>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a4d      	ldr	r2, [pc, #308]	; (8007750 <HAL_GPIO_Init+0x310>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d019      	beq.n	8007652 <HAL_GPIO_Init+0x212>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a4c      	ldr	r2, [pc, #304]	; (8007754 <HAL_GPIO_Init+0x314>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_GPIO_Init+0x20e>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <HAL_GPIO_Init+0x318>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00d      	beq.n	800764a <HAL_GPIO_Init+0x20a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a4a      	ldr	r2, [pc, #296]	; (800775c <HAL_GPIO_Init+0x31c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d007      	beq.n	8007646 <HAL_GPIO_Init+0x206>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a49      	ldr	r2, [pc, #292]	; (8007760 <HAL_GPIO_Init+0x320>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d101      	bne.n	8007642 <HAL_GPIO_Init+0x202>
 800763e:	2306      	movs	r3, #6
 8007640:	e00c      	b.n	800765c <HAL_GPIO_Init+0x21c>
 8007642:	2307      	movs	r3, #7
 8007644:	e00a      	b.n	800765c <HAL_GPIO_Init+0x21c>
 8007646:	2305      	movs	r3, #5
 8007648:	e008      	b.n	800765c <HAL_GPIO_Init+0x21c>
 800764a:	2304      	movs	r3, #4
 800764c:	e006      	b.n	800765c <HAL_GPIO_Init+0x21c>
 800764e:	2303      	movs	r3, #3
 8007650:	e004      	b.n	800765c <HAL_GPIO_Init+0x21c>
 8007652:	2302      	movs	r3, #2
 8007654:	e002      	b.n	800765c <HAL_GPIO_Init+0x21c>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <HAL_GPIO_Init+0x21c>
 800765a:	2300      	movs	r3, #0
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	f002 0203 	and.w	r2, r2, #3
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	4093      	lsls	r3, r2
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4313      	orrs	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800766c:	4935      	ldr	r1, [pc, #212]	; (8007744 <HAL_GPIO_Init+0x304>)
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	089b      	lsrs	r3, r3, #2
 8007672:	3302      	adds	r3, #2
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800767a:	4b3a      	ldr	r3, [pc, #232]	; (8007764 <HAL_GPIO_Init+0x324>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	43db      	mvns	r3, r3
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	4013      	ands	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800769e:	4a31      	ldr	r2, [pc, #196]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076a4:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4013      	ands	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076c8:	4a26      	ldr	r2, [pc, #152]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80076ce:	4b25      	ldr	r3, [pc, #148]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	43db      	mvns	r3, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	4013      	ands	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076f2:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <HAL_GPIO_Init+0x324>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	43db      	mvns	r3, r3
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	4013      	ands	r3, r2
 8007706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800771c:	4a11      	ldr	r2, [pc, #68]	; (8007764 <HAL_GPIO_Init+0x324>)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	3301      	adds	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	f67f ae96 	bls.w	800745c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	3724      	adds	r7, #36	; 0x24
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40023800 	.word	0x40023800
 8007744:	40013800 	.word	0x40013800
 8007748:	40020000 	.word	0x40020000
 800774c:	40020400 	.word	0x40020400
 8007750:	40020800 	.word	0x40020800
 8007754:	40020c00 	.word	0x40020c00
 8007758:	40021000 	.word	0x40021000
 800775c:	40021400 	.word	0x40021400
 8007760:	40021800 	.word	0x40021800
 8007764:	40013c00 	.word	0x40013c00

08007768 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007772:	2300      	movs	r3, #0
 8007774:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e0c7      	b.n	8007914 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007784:	2201      	movs	r2, #1
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4013      	ands	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	f040 80b7 	bne.w	800790e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80077a0:	4a62      	ldr	r2, [pc, #392]	; (800792c <HAL_GPIO_DeInit+0x1c4>)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	089b      	lsrs	r3, r3, #2
 80077a6:	3302      	adds	r3, #2
 80077a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	220f      	movs	r2, #15
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a5a      	ldr	r2, [pc, #360]	; (8007930 <HAL_GPIO_DeInit+0x1c8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d025      	beq.n	8007816 <HAL_GPIO_DeInit+0xae>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a59      	ldr	r2, [pc, #356]	; (8007934 <HAL_GPIO_DeInit+0x1cc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01f      	beq.n	8007812 <HAL_GPIO_DeInit+0xaa>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a58      	ldr	r2, [pc, #352]	; (8007938 <HAL_GPIO_DeInit+0x1d0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d019      	beq.n	800780e <HAL_GPIO_DeInit+0xa6>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a57      	ldr	r2, [pc, #348]	; (800793c <HAL_GPIO_DeInit+0x1d4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <HAL_GPIO_DeInit+0xa2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a56      	ldr	r2, [pc, #344]	; (8007940 <HAL_GPIO_DeInit+0x1d8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00d      	beq.n	8007806 <HAL_GPIO_DeInit+0x9e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a55      	ldr	r2, [pc, #340]	; (8007944 <HAL_GPIO_DeInit+0x1dc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d007      	beq.n	8007802 <HAL_GPIO_DeInit+0x9a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a54      	ldr	r2, [pc, #336]	; (8007948 <HAL_GPIO_DeInit+0x1e0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d101      	bne.n	80077fe <HAL_GPIO_DeInit+0x96>
 80077fa:	2306      	movs	r3, #6
 80077fc:	e00c      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 80077fe:	2307      	movs	r3, #7
 8007800:	e00a      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 8007802:	2305      	movs	r3, #5
 8007804:	e008      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 8007806:	2304      	movs	r3, #4
 8007808:	e006      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 800780a:	2303      	movs	r3, #3
 800780c:	e004      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 800780e:	2302      	movs	r3, #2
 8007810:	e002      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <HAL_GPIO_DeInit+0xb0>
 8007816:	2300      	movs	r3, #0
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	f002 0203 	and.w	r2, r2, #3
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	4093      	lsls	r3, r2
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	d132      	bne.n	800788e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007828:	4b48      	ldr	r3, [pc, #288]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	43db      	mvns	r3, r3
 8007830:	4946      	ldr	r1, [pc, #280]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 8007832:	4013      	ands	r3, r2
 8007834:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007836:	4b45      	ldr	r3, [pc, #276]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	43db      	mvns	r3, r3
 800783e:	4943      	ldr	r1, [pc, #268]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 8007840:	4013      	ands	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007844:	4b41      	ldr	r3, [pc, #260]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	43db      	mvns	r3, r3
 800784c:	493f      	ldr	r1, [pc, #252]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 800784e:	4013      	ands	r3, r2
 8007850:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007852:	4b3e      	ldr	r3, [pc, #248]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	43db      	mvns	r3, r3
 800785a:	493c      	ldr	r1, [pc, #240]	; (800794c <HAL_GPIO_DeInit+0x1e4>)
 800785c:	4013      	ands	r3, r2
 800785e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	220f      	movs	r2, #15
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007870:	4a2e      	ldr	r2, [pc, #184]	; (800792c <HAL_GPIO_DeInit+0x1c4>)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	089b      	lsrs	r3, r3, #2
 8007876:	3302      	adds	r3, #2
 8007878:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	43da      	mvns	r2, r3
 8007880:	482a      	ldr	r0, [pc, #168]	; (800792c <HAL_GPIO_DeInit+0x1c4>)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	089b      	lsrs	r3, r3, #2
 8007886:	400a      	ands	r2, r1
 8007888:	3302      	adds	r3, #2
 800788a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	2103      	movs	r1, #3
 8007898:	fa01 f303 	lsl.w	r3, r1, r3
 800789c:	43db      	mvns	r3, r3
 800789e:	401a      	ands	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	08da      	lsrs	r2, r3, #3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3208      	adds	r2, #8
 80078ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	220f      	movs	r2, #15
 80078ba:	fa02 f303 	lsl.w	r3, r2, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	08d2      	lsrs	r2, r2, #3
 80078c4:	4019      	ands	r1, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3208      	adds	r2, #8
 80078ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	2103      	movs	r1, #3
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	401a      	ands	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	2101      	movs	r1, #1
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
 80078f0:	43db      	mvns	r3, r3
 80078f2:	401a      	ands	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	2103      	movs	r1, #3
 8007902:	fa01 f303 	lsl.w	r3, r1, r3
 8007906:	43db      	mvns	r3, r3
 8007908:	401a      	ands	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	3301      	adds	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	f67f af34 	bls.w	8007784 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40013800 	.word	0x40013800
 8007930:	40020000 	.word	0x40020000
 8007934:	40020400 	.word	0x40020400
 8007938:	40020800 	.word	0x40020800
 800793c:	40020c00 	.word	0x40020c00
 8007940:	40021000 	.word	0x40021000
 8007944:	40021400 	.word	0x40021400
 8007948:	40021800 	.word	0x40021800
 800794c:	40013c00 	.word	0x40013c00

08007950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	807b      	strh	r3, [r7, #2]
 800795c:	4613      	mov	r3, r2
 800795e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007960:	787b      	ldrb	r3, [r7, #1]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007966:	887a      	ldrh	r2, [r7, #2]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800796c:	e003      	b.n	8007976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800796e:	887b      	ldrh	r3, [r7, #2]
 8007970:	041a      	lsls	r2, r3, #16
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	619a      	str	r2, [r3, #24]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007994:	887a      	ldrh	r2, [r7, #2]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4013      	ands	r3, r2
 800799a:	041a      	lsls	r2, r3, #16
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	43d9      	mvns	r1, r3
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	400b      	ands	r3, r1
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	619a      	str	r2, [r3, #24]
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d006      	beq.n	80079dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fc fe9e 	bl	8004718 <HAL_GPIO_EXTI_Callback>
  }
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40013c00 	.word	0x40013c00

080079e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e12b      	b.n	8007c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fd fc10 	bl	8005234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2224      	movs	r2, #36	; 0x24
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0201 	bic.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f001 f938 	bl	8008cc0 <HAL_RCC_GetPCLK1Freq>
 8007a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	4a81      	ldr	r2, [pc, #516]	; (8007c5c <HAL_I2C_Init+0x274>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d807      	bhi.n	8007a6c <HAL_I2C_Init+0x84>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a80      	ldr	r2, [pc, #512]	; (8007c60 <HAL_I2C_Init+0x278>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bf94      	ite	ls
 8007a64:	2301      	movls	r3, #1
 8007a66:	2300      	movhi	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	e006      	b.n	8007a7a <HAL_I2C_Init+0x92>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a7d      	ldr	r2, [pc, #500]	; (8007c64 <HAL_I2C_Init+0x27c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf94      	ite	ls
 8007a74:	2301      	movls	r3, #1
 8007a76:	2300      	movhi	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e0e7      	b.n	8007c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a78      	ldr	r2, [pc, #480]	; (8007c68 <HAL_I2C_Init+0x280>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	0c9b      	lsrs	r3, r3, #18
 8007a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a6a      	ldr	r2, [pc, #424]	; (8007c5c <HAL_I2C_Init+0x274>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d802      	bhi.n	8007abc <HAL_I2C_Init+0xd4>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	e009      	b.n	8007ad0 <HAL_I2C_Init+0xe8>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ac2:	fb02 f303 	mul.w	r3, r2, r3
 8007ac6:	4a69      	ldr	r2, [pc, #420]	; (8007c6c <HAL_I2C_Init+0x284>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	099b      	lsrs	r3, r3, #6
 8007ace:	3301      	adds	r3, #1
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	495c      	ldr	r1, [pc, #368]	; (8007c5c <HAL_I2C_Init+0x274>)
 8007aec:	428b      	cmp	r3, r1
 8007aee:	d819      	bhi.n	8007b24 <HAL_I2C_Init+0x13c>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	1e59      	subs	r1, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007afe:	1c59      	adds	r1, r3, #1
 8007b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b04:	400b      	ands	r3, r1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_I2C_Init+0x138>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1e59      	subs	r1, r3, #1
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b1e:	e051      	b.n	8007bc4 <HAL_I2C_Init+0x1dc>
 8007b20:	2304      	movs	r3, #4
 8007b22:	e04f      	b.n	8007bc4 <HAL_I2C_Init+0x1dc>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d111      	bne.n	8007b50 <HAL_I2C_Init+0x168>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1e58      	subs	r0, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6859      	ldr	r1, [r3, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	440b      	add	r3, r1
 8007b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	e012      	b.n	8007b76 <HAL_I2C_Init+0x18e>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	1e58      	subs	r0, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6859      	ldr	r1, [r3, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	0099      	lsls	r1, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b66:	3301      	adds	r3, #1
 8007b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bf0c      	ite	eq
 8007b70:	2301      	moveq	r3, #1
 8007b72:	2300      	movne	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_I2C_Init+0x196>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e022      	b.n	8007bc4 <HAL_I2C_Init+0x1dc>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10e      	bne.n	8007ba4 <HAL_I2C_Init+0x1bc>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1e58      	subs	r0, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6859      	ldr	r1, [r3, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	440b      	add	r3, r1
 8007b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba2:	e00f      	b.n	8007bc4 <HAL_I2C_Init+0x1dc>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1e58      	subs	r0, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	0099      	lsls	r1, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	6809      	ldr	r1, [r1, #0]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69da      	ldr	r2, [r3, #28]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6911      	ldr	r1, [r2, #16]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68d2      	ldr	r2, [r2, #12]
 8007bfe:	4311      	orrs	r1, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	000186a0 	.word	0x000186a0
 8007c60:	001e847f 	.word	0x001e847f
 8007c64:	003d08ff 	.word	0x003d08ff
 8007c68:	431bde83 	.word	0x431bde83
 8007c6c:	10624dd3 	.word	0x10624dd3

08007c70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e021      	b.n	8007cc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2224      	movs	r2, #36	; 0x24
 8007c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fd fb6a 	bl	8005374 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	4608      	mov	r0, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	817b      	strh	r3, [r7, #10]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	813b      	strh	r3, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cea:	f7fe f9b7 	bl	800605c <HAL_GetTick>
 8007cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	f040 80d9 	bne.w	8007eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	2319      	movs	r3, #25
 8007d04:	2201      	movs	r2, #1
 8007d06:	496d      	ldr	r1, [pc, #436]	; (8007ebc <HAL_I2C_Mem_Write+0x1ec>)
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fc7f 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d14:	2302      	movs	r3, #2
 8007d16:	e0cc      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_I2C_Mem_Write+0x56>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e0c5      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d007      	beq.n	8007d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2221      	movs	r2, #33	; 0x21
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2240      	movs	r2, #64	; 0x40
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4a4d      	ldr	r2, [pc, #308]	; (8007ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8007d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d8e:	88f8      	ldrh	r0, [r7, #6]
 8007d90:	893a      	ldrh	r2, [r7, #8]
 8007d92:	8979      	ldrh	r1, [r7, #10]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fab6 	bl	8008310 <I2C_RequestMemoryWrite>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d052      	beq.n	8007e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e081      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 fd00 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00d      	beq.n	8007dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d107      	bne.n	8007dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e06b      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d11b      	bne.n	8007e50 <HAL_I2C_Mem_Write+0x180>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d017      	beq.n	8007e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1aa      	bne.n	8007dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fcec 	bl	800883a <I2C_WaitOnBTFFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d107      	bne.n	8007e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e016      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e000      	b.n	8007eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	00100002 	.word	0x00100002
 8007ec0:	ffff0000 	.word	0xffff0000

08007ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	; 0x30
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	4608      	mov	r0, r1
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	817b      	strh	r3, [r7, #10]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	813b      	strh	r3, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ede:	f7fe f8bd 	bl	800605c <HAL_GetTick>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	f040 8208 	bne.w	8008302 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	2319      	movs	r3, #25
 8007ef8:	2201      	movs	r2, #1
 8007efa:	497b      	ldr	r1, [pc, #492]	; (80080e8 <HAL_I2C_Mem_Read+0x224>)
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fb85 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e1fb      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_I2C_Mem_Read+0x56>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e1f4      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d007      	beq.n	8007f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2222      	movs	r2, #34	; 0x22
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2240      	movs	r2, #64	; 0x40
 8007f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a5b      	ldr	r2, [pc, #364]	; (80080ec <HAL_I2C_Mem_Read+0x228>)
 8007f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f82:	88f8      	ldrh	r0, [r7, #6]
 8007f84:	893a      	ldrh	r2, [r7, #8]
 8007f86:	8979      	ldrh	r1, [r7, #10]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4603      	mov	r3, r0
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fa52 	bl	800843c <I2C_RequestMemoryRead>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e1b0      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d113      	bne.n	8007fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007faa:	2300      	movs	r3, #0
 8007fac:	623b      	str	r3, [r7, #32]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	623b      	str	r3, [r7, #32]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	623b      	str	r3, [r7, #32]
 8007fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e184      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d11b      	bne.n	8008012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e164      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008016:	2b02      	cmp	r3, #2
 8008018:	d11b      	bne.n	8008052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	e144      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008068:	e138      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806e:	2b03      	cmp	r3, #3
 8008070:	f200 80f1 	bhi.w	8008256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008078:	2b01      	cmp	r3, #1
 800807a:	d123      	bne.n	80080c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fc1b 	bl	80088bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e139      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080c2:	e10b      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d14e      	bne.n	800816a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	2200      	movs	r2, #0
 80080d4:	4906      	ldr	r1, [pc, #24]	; (80080f0 <HAL_I2C_Mem_Read+0x22c>)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fa98 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e10e      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
 80080e6:	bf00      	nop
 80080e8:	00100002 	.word	0x00100002
 80080ec:	ffff0000 	.word	0xffff0000
 80080f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008168:	e0b8      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2200      	movs	r2, #0
 8008172:	4966      	ldr	r1, [pc, #408]	; (800830c <HAL_I2C_Mem_Read+0x448>)
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fa49 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e0bf      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	2200      	movs	r2, #0
 80081ce:	494f      	ldr	r1, [pc, #316]	; (800830c <HAL_I2C_Mem_Read+0x448>)
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fa1b 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e091      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008254:	e042      	b.n	80082dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fb2e 	bl	80088bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e04c      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008292:	b29b      	uxth	r3, r3
 8008294:	3b01      	subs	r3, #1
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d118      	bne.n	80082dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691a      	ldr	r2, [r3, #16]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	b2d2      	uxtb	r2, r2
 80082b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f aec2 	bne.w	800806a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	; 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	00010004 	.word	0x00010004

08008310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	461a      	mov	r2, r3
 800831e:	4603      	mov	r3, r0
 8008320:	817b      	strh	r3, [r7, #10]
 8008322:	460b      	mov	r3, r1
 8008324:	813b      	strh	r3, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	2200      	movs	r2, #0
 8008342:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f960 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008360:	d103      	bne.n	800836a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e05f      	b.n	800842e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800836e:	897b      	ldrh	r3, [r7, #10]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800837c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	6a3a      	ldr	r2, [r7, #32]
 8008382:	492d      	ldr	r1, [pc, #180]	; (8008438 <I2C_RequestMemoryWrite+0x128>)
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f998 	bl	80086ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e04c      	b.n	800842e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ac:	6a39      	ldr	r1, [r7, #32]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fa02 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d107      	bne.n	80083d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e02b      	b.n	800842e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d105      	bne.n	80083e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083dc:	893b      	ldrh	r3, [r7, #8]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	611a      	str	r2, [r3, #16]
 80083e6:	e021      	b.n	800842c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	6a39      	ldr	r1, [r7, #32]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f9dc 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	2b04      	cmp	r3, #4
 800840c:	d107      	bne.n	800841e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800841c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e005      	b.n	800842e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008422:	893b      	ldrh	r3, [r7, #8]
 8008424:	b2da      	uxtb	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	00010002 	.word	0x00010002

0800843c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	4603      	mov	r3, r0
 800844c:	817b      	strh	r3, [r7, #10]
 800844e:	460b      	mov	r3, r1
 8008450:	813b      	strh	r3, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	2200      	movs	r2, #0
 800847e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f8c2 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849c:	d103      	bne.n	80084a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e0aa      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084aa:	897b      	ldrh	r3, [r7, #10]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	461a      	mov	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	6a3a      	ldr	r2, [r7, #32]
 80084be:	4952      	ldr	r1, [pc, #328]	; (8008608 <I2C_RequestMemoryRead+0x1cc>)
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f8fa 	bl	80086ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e097      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e8:	6a39      	ldr	r1, [r7, #32]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f964 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00d      	beq.n	8008512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d107      	bne.n	800850e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800850c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e076      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d105      	bne.n	8008524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008518:	893b      	ldrh	r3, [r7, #8]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	611a      	str	r2, [r3, #16]
 8008522:	e021      	b.n	8008568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008524:	893b      	ldrh	r3, [r7, #8]
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	b29b      	uxth	r3, r3
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008534:	6a39      	ldr	r1, [r7, #32]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f93e 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00d      	beq.n	800855e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	2b04      	cmp	r3, #4
 8008548:	d107      	bne.n	800855a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e050      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800855e:	893b      	ldrh	r3, [r7, #8]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856a:	6a39      	ldr	r1, [r7, #32]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f923 	bl	80087b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00d      	beq.n	8008594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	2b04      	cmp	r3, #4
 800857e:	d107      	bne.n	8008590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e035      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f82b 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00d      	beq.n	80085d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ca:	d103      	bne.n	80085d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e013      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085d8:	897b      	ldrh	r3, [r7, #10]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	6a3a      	ldr	r2, [r7, #32]
 80085ec:	4906      	ldr	r1, [pc, #24]	; (8008608 <I2C_RequestMemoryRead+0x1cc>)
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f863 	bl	80086ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	00010002 	.word	0x00010002

0800860c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	4613      	mov	r3, r2
 800861a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800861c:	e025      	b.n	800866a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d021      	beq.n	800866a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008626:	f7fd fd19 	bl	800605c <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d302      	bcc.n	800863c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d116      	bne.n	800866a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e023      	b.n	80086b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	0c1b      	lsrs	r3, r3, #16
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d10d      	bne.n	8008690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	43da      	mvns	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4013      	ands	r3, r2
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	bf0c      	ite	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	2300      	movne	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	e00c      	b.n	80086aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	43da      	mvns	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf0c      	ite	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	2300      	movne	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d0b6      	beq.n	800861e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086c8:	e051      	b.n	800876e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d8:	d123      	bne.n	8008722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0204 	orr.w	r2, r3, #4
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e046      	b.n	80087b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d021      	beq.n	800876e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872a:	f7fd fc97 	bl	800605c <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d116      	bne.n	800876e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f043 0220 	orr.w	r2, r3, #32
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e020      	b.n	80087b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	0c1b      	lsrs	r3, r3, #16
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	d10c      	bne.n	8008792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	43da      	mvns	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4013      	ands	r3, r2
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	bf14      	ite	ne
 800878a:	2301      	movne	r3, #1
 800878c:	2300      	moveq	r3, #0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	e00b      	b.n	80087aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	43da      	mvns	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4013      	ands	r3, r2
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bf14      	ite	ne
 80087a4:	2301      	movne	r3, #1
 80087a6:	2300      	moveq	r3, #0
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d18d      	bne.n	80086ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087c4:	e02d      	b.n	8008822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f8ce 	bl	8008968 <I2C_IsAcknowledgeFailed>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e02d      	b.n	8008832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087dc:	d021      	beq.n	8008822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087de:	f7fd fc3d 	bl	800605c <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d302      	bcc.n	80087f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d116      	bne.n	8008822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f043 0220 	orr.w	r2, r3, #32
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e007      	b.n	8008832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d1ca      	bne.n	80087c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008846:	e02d      	b.n	80088a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f88d 	bl	8008968 <I2C_IsAcknowledgeFailed>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e02d      	b.n	80088b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d021      	beq.n	80088a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008860:	f7fd fbfc 	bl	800605c <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	429a      	cmp	r2, r3
 800886e:	d302      	bcc.n	8008876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d116      	bne.n	80088a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	f043 0220 	orr.w	r2, r3, #32
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e007      	b.n	80088b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d1ca      	bne.n	8008848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088c8:	e042      	b.n	8008950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d119      	bne.n	800890c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0210 	mvn.w	r2, #16
 80088e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e029      	b.n	8008960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890c:	f7fd fba6 	bl	800605c <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d302      	bcc.n	8008922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d116      	bne.n	8008950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e007      	b.n	8008960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d1b5      	bne.n	80088ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897e:	d11b      	bne.n	80089b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	f043 0204 	orr.w	r2, r3, #4
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e000      	b.n	80089ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
	...

080089c8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80089ce:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <HAL_PWR_EnableBkUpAccess+0x24>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80089da:	687b      	ldr	r3, [r7, #4]
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	420e0020 	.word	0x420e0020
 80089ec:	40007000 	.word	0x40007000

080089f0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80089fa:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <HAL_PWREx_EnableBkUpReg+0x44>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a00:	f7fd fb2c 	bl	800605c <HAL_GetTick>
 8008a04:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008a06:	e009      	b.n	8008a1c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8008a08:	f7fd fb28 	bl	800605c <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a16:	d901      	bls.n	8008a1c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e006      	b.n	8008a2a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_PWREx_EnableBkUpReg+0x48>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d1ef      	bne.n	8008a08 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	420e00a4 	.word	0x420e00a4
 8008a38:	40007000 	.word	0x40007000

08008a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008a46:	2300      	movs	r3, #0
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4b20      	ldr	r3, [pc, #128]	; (8008acc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	; (8008acc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a54:	6413      	str	r3, [r2, #64]	; 0x40
 8008a56:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008a62:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008a64:	2201      	movs	r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a68:	f7fd faf8 	bl	800605c <HAL_GetTick>
 8008a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a6e:	e009      	b.n	8008a84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a70:	f7fd faf4 	bl	800605c <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7e:	d901      	bls.n	8008a84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e01f      	b.n	8008ac4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a90:	d1ee      	bne.n	8008a70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a92:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a98:	f7fd fae0 	bl	800605c <HAL_GetTick>
 8008a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a9e:	e009      	b.n	8008ab4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008aa0:	f7fd fadc 	bl	800605c <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aae:	d901      	bls.n	8008ab4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e007      	b.n	8008ac4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac0:	d1ee      	bne.n	8008aa0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	420e0040 	.word	0x420e0040
 8008ad4:	40007000 	.word	0x40007000
 8008ad8:	420e0044 	.word	0x420e0044

08008adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0cc      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008af0:	4b68      	ldr	r3, [pc, #416]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d90c      	bls.n	8008b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afe:	4b65      	ldr	r3, [pc, #404]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b06:	4b63      	ldr	r3, [pc, #396]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e0b8      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d020      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b30:	4b59      	ldr	r3, [pc, #356]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	4a58      	ldr	r2, [pc, #352]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b48:	4b53      	ldr	r3, [pc, #332]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4a52      	ldr	r2, [pc, #328]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b54:	4b50      	ldr	r3, [pc, #320]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	494d      	ldr	r1, [pc, #308]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d044      	beq.n	8008bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d107      	bne.n	8008b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7a:	4b47      	ldr	r3, [pc, #284]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d119      	bne.n	8008bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e07f      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d003      	beq.n	8008b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d107      	bne.n	8008baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b9a:	4b3f      	ldr	r3, [pc, #252]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e06f      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008baa:	4b3b      	ldr	r3, [pc, #236]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e067      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bba:	4b37      	ldr	r3, [pc, #220]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f023 0203 	bic.w	r2, r3, #3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4934      	ldr	r1, [pc, #208]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bcc:	f7fd fa46 	bl	800605c <HAL_GetTick>
 8008bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd2:	e00a      	b.n	8008bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd4:	f7fd fa42 	bl	800605c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e04f      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bea:	4b2b      	ldr	r3, [pc, #172]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 020c 	and.w	r2, r3, #12
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d1eb      	bne.n	8008bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bfc:	4b25      	ldr	r3, [pc, #148]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d20c      	bcs.n	8008c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c0a:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c12:	4b20      	ldr	r3, [pc, #128]	; (8008c94 <HAL_RCC_ClockConfig+0x1b8>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d001      	beq.n	8008c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e032      	b.n	8008c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c30:	4b19      	ldr	r3, [pc, #100]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4916      	ldr	r1, [pc, #88]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	490e      	ldr	r1, [pc, #56]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c62:	f000 fb7f 	bl	8009364 <HAL_RCC_GetSysClockFreq>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	091b      	lsrs	r3, r3, #4
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	490a      	ldr	r1, [pc, #40]	; (8008c9c <HAL_RCC_ClockConfig+0x1c0>)
 8008c74:	5ccb      	ldrb	r3, [r1, r3]
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd f9a6 	bl	8005fd4 <HAL_InitTick>

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40023c00 	.word	0x40023c00
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	08012718 	.word	0x08012718
 8008ca0:	20000008 	.word	0x20000008
 8008ca4:	2000000c 	.word	0x2000000c

08008ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cac:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cae:	681b      	ldr	r3, [r3, #0]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000008 	.word	0x20000008

08008cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cc4:	f7ff fff0 	bl	8008ca8 <HAL_RCC_GetHCLKFreq>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	0a9b      	lsrs	r3, r3, #10
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	4903      	ldr	r1, [pc, #12]	; (8008ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cd6:	5ccb      	ldrb	r3, [r1, r3]
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	08012728 	.word	0x08012728

08008ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cec:	f7ff ffdc 	bl	8008ca8 <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	0b5b      	lsrs	r3, r3, #13
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4903      	ldr	r1, [pc, #12]	; (8008d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	08012728 	.word	0x08012728

08008d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08c      	sub	sp, #48	; 0x30
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d010      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008d48:	4b6f      	ldr	r3, [pc, #444]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d4e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	496c      	ldr	r1, [pc, #432]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008d66:	2301      	movs	r3, #1
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008d76:	4b64      	ldr	r3, [pc, #400]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d7c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	4960      	ldr	r1, [pc, #384]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008d94:	2301      	movs	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d017      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008da4:	4b58      	ldr	r3, [pc, #352]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	4955      	ldr	r1, [pc, #340]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc2:	d101      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d017      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008de0:	4b49      	ldr	r3, [pc, #292]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	4946      	ldr	r1, [pc, #280]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dfe:	d101      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008e00:	2301      	movs	r3, #1
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 808a 	beq.w	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	4b39      	ldr	r3, [pc, #228]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	4a38      	ldr	r2, [pc, #224]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e2e:	4b36      	ldr	r3, [pc, #216]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e36:	60bb      	str	r3, [r7, #8]
 8008e38:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e3a:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a33      	ldr	r2, [pc, #204]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e46:	f7fd f909 	bl	800605c <HAL_GetTick>
 8008e4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e4c:	e008      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e4e:	f7fd f905 	bl	800605c <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e278      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e60:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0f0      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e6c:	4b26      	ldr	r3, [pc, #152]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e74:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02f      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d028      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e8a:	4b1f      	ldr	r3, [pc, #124]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e92:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e94:	4b1e      	ldr	r3, [pc, #120]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ea0:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ea6:	4b18      	ldr	r3, [pc, #96]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d114      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008eb2:	f7fd f8d3 	bl	800605c <HAL_GetTick>
 8008eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb8:	e00a      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eba:	f7fd f8cf 	bl	800605c <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e240      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed0:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0ee      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ee8:	d114      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008eea:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efe:	4902      	ldr	r1, [pc, #8]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	608b      	str	r3, [r1, #8]
 8008f04:	e00c      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008f06:	bf00      	nop
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	40007000 	.word	0x40007000
 8008f10:	42470e40 	.word	0x42470e40
 8008f14:	4b4a      	ldr	r3, [pc, #296]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	4a49      	ldr	r2, [pc, #292]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f1e:	6093      	str	r3, [r2, #8]
 8008f20:	4b47      	ldr	r3, [pc, #284]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f2c:	4944      	ldr	r1, [pc, #272]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0310 	and.w	r3, r3, #16
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008f44:	4b3f      	ldr	r3, [pc, #252]	; (8009044 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008f46:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008f54:	4b3a      	ldr	r3, [pc, #232]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	4937      	ldr	r1, [pc, #220]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f76:	4b32      	ldr	r3, [pc, #200]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f7c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f84:	492e      	ldr	r1, [pc, #184]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d011      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f98:	4b29      	ldr	r3, [pc, #164]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f9e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	4926      	ldr	r1, [pc, #152]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb6:	d101      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd6:	491a      	ldr	r1, [pc, #104]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ff0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff8:	4911      	ldr	r1, [pc, #68]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009008:	d101      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800900a:	2301      	movs	r3, #1
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d005      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800901c:	f040 80ff 	bne.w	800921e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009020:	4b09      	ldr	r3, [pc, #36]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009026:	f7fd f819 	bl	800605c <HAL_GetTick>
 800902a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800902c:	e00e      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800902e:	f7fd f815 	bl	800605c <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d907      	bls.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e188      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009040:	40023800 	.word	0x40023800
 8009044:	424711e0 	.word	0x424711e0
 8009048:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800904c:	4b7e      	ldr	r3, [pc, #504]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1ea      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d028      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d124      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009080:	4b71      	ldr	r3, [pc, #452]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	3301      	adds	r3, #1
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009092:	4b6d      	ldr	r3, [pc, #436]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009098:	0e1b      	lsrs	r3, r3, #24
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	019b      	lsls	r3, r3, #6
 80090aa:	431a      	orrs	r2, r3
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	3b01      	subs	r3, #1
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	431a      	orrs	r2, r3
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	061b      	lsls	r3, r3, #24
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	071b      	lsls	r3, r3, #28
 80090c2:	4961      	ldr	r1, [pc, #388]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d035      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f4:	d130      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80090f6:	4b54      	ldr	r3, [pc, #336]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fc:	0c1b      	lsrs	r3, r3, #16
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	3301      	adds	r3, #1
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009108:	4b4f      	ldr	r3, [pc, #316]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800910a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910e:	0f1b      	lsrs	r3, r3, #28
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	019b      	lsls	r3, r3, #6
 8009120:	431a      	orrs	r2, r3
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	085b      	lsrs	r3, r3, #1
 8009126:	3b01      	subs	r3, #1
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	061b      	lsls	r3, r3, #24
 8009132:	431a      	orrs	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	071b      	lsls	r3, r3, #28
 8009138:	4943      	ldr	r1, [pc, #268]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800913a:	4313      	orrs	r3, r2
 800913c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009140:	4b41      	ldr	r3, [pc, #260]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009146:	f023 021f 	bic.w	r2, r3, #31
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	3b01      	subs	r3, #1
 8009150:	493d      	ldr	r1, [pc, #244]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009152:	4313      	orrs	r3, r2
 8009154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009160:	2b00      	cmp	r3, #0
 8009162:	d029      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800916c:	d124      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800916e:	4b36      	ldr	r3, [pc, #216]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	3301      	adds	r3, #1
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009180:	4b31      	ldr	r3, [pc, #196]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009186:	0f1b      	lsrs	r3, r3, #28
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	019b      	lsls	r3, r3, #6
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	3b01      	subs	r3, #1
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	431a      	orrs	r2, r3
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	061b      	lsls	r3, r3, #24
 80091aa:	431a      	orrs	r2, r3
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	071b      	lsls	r3, r3, #28
 80091b0:	4925      	ldr	r1, [pc, #148]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d016      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	019b      	lsls	r3, r3, #6
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	085b      	lsrs	r3, r3, #1
 80091d6:	3b01      	subs	r3, #1
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	061b      	lsls	r3, r3, #24
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	071b      	lsls	r3, r3, #28
 80091ea:	4917      	ldr	r1, [pc, #92]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091f2:	4b16      	ldr	r3, [pc, #88]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091f8:	f7fc ff30 	bl	800605c <HAL_GetTick>
 80091fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091fe:	e008      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009200:	f7fc ff2c 	bl	800605c <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d901      	bls.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e09f      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009212:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0f0      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	2b01      	cmp	r3, #1
 8009222:	f040 8095 	bne.w	8009350 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800922c:	f7fc ff16 	bl	800605c <HAL_GetTick>
 8009230:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009232:	e00f      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009234:	f7fc ff12 	bl	800605c <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d908      	bls.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e085      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009246:	bf00      	nop
 8009248:	40023800 	.word	0x40023800
 800924c:	42470068 	.word	0x42470068
 8009250:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009254:	4b41      	ldr	r3, [pc, #260]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009260:	d0e8      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02b      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	2b00      	cmp	r3, #0
 8009288:	d127      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800928a:	4b34      	ldr	r3, [pc, #208]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800928c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009290:	0c1b      	lsrs	r3, r3, #16
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	3301      	adds	r3, #1
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	019b      	lsls	r3, r3, #6
 80092a6:	431a      	orrs	r2, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	3b01      	subs	r3, #1
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	061b      	lsls	r3, r3, #24
 80092b8:	4928      	ldr	r1, [pc, #160]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80092c0:	4b26      	ldr	r3, [pc, #152]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	3b01      	subs	r3, #1
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	4922      	ldr	r1, [pc, #136]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01d      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ee:	d118      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f6:	0e1b      	lsrs	r3, r3, #24
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	085b      	lsrs	r3, r3, #1
 8009310:	3b01      	subs	r3, #1
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	431a      	orrs	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	061b      	lsls	r3, r3, #24
 800931a:	4910      	ldr	r1, [pc, #64]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800931c:	4313      	orrs	r3, r2
 800931e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009322:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009328:	f7fc fe98 	bl	800605c <HAL_GetTick>
 800932c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009330:	f7fc fe94 	bl	800605c <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e007      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009342:	4b06      	ldr	r3, [pc, #24]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934e:	d1ef      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	42470070 	.word	0x42470070

08009364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009368:	b0ae      	sub	sp, #184	; 0xb8
 800936a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800938a:	4bcb      	ldr	r3, [pc, #812]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b0c      	cmp	r3, #12
 8009394:	f200 8206 	bhi.w	80097a4 <HAL_RCC_GetSysClockFreq+0x440>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093d5 	.word	0x080093d5
 80093a4:	080097a5 	.word	0x080097a5
 80093a8:	080097a5 	.word	0x080097a5
 80093ac:	080097a5 	.word	0x080097a5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	080097a5 	.word	0x080097a5
 80093b8:	080097a5 	.word	0x080097a5
 80093bc:	080097a5 	.word	0x080097a5
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080097a5 	.word	0x080097a5
 80093c8:	080097a5 	.word	0x080097a5
 80093cc:	080097a5 	.word	0x080097a5
 80093d0:	080095d5 	.word	0x080095d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093d4:	4bb9      	ldr	r3, [pc, #740]	; (80096bc <HAL_RCC_GetSysClockFreq+0x358>)
 80093d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80093da:	e1e7      	b.n	80097ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093dc:	4bb8      	ldr	r3, [pc, #736]	; (80096c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80093de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80093e2:	e1e3      	b.n	80097ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093e4:	4bb4      	ldr	r3, [pc, #720]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093f0:	4bb1      	ldr	r3, [pc, #708]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d071      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093fc:	4bae      	ldr	r3, [pc, #696]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	099b      	lsrs	r3, r3, #6
 8009402:	2200      	movs	r2, #0
 8009404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009408:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800940c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009418:	2300      	movs	r3, #0
 800941a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800941e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009422:	4622      	mov	r2, r4
 8009424:	462b      	mov	r3, r5
 8009426:	f04f 0000 	mov.w	r0, #0
 800942a:	f04f 0100 	mov.w	r1, #0
 800942e:	0159      	lsls	r1, r3, #5
 8009430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009434:	0150      	lsls	r0, r2, #5
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4621      	mov	r1, r4
 800943c:	1a51      	subs	r1, r2, r1
 800943e:	6439      	str	r1, [r7, #64]	; 0x40
 8009440:	4629      	mov	r1, r5
 8009442:	eb63 0301 	sbc.w	r3, r3, r1
 8009446:	647b      	str	r3, [r7, #68]	; 0x44
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009454:	4649      	mov	r1, r9
 8009456:	018b      	lsls	r3, r1, #6
 8009458:	4641      	mov	r1, r8
 800945a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800945e:	4641      	mov	r1, r8
 8009460:	018a      	lsls	r2, r1, #6
 8009462:	4641      	mov	r1, r8
 8009464:	1a51      	subs	r1, r2, r1
 8009466:	63b9      	str	r1, [r7, #56]	; 0x38
 8009468:	4649      	mov	r1, r9
 800946a:	eb63 0301 	sbc.w	r3, r3, r1
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800947c:	4649      	mov	r1, r9
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4641      	mov	r1, r8
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4641      	mov	r1, r8
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4622      	mov	r2, r4
 8009492:	189b      	adds	r3, r3, r2
 8009494:	633b      	str	r3, [r7, #48]	; 0x30
 8009496:	462b      	mov	r3, r5
 8009498:	460a      	mov	r2, r1
 800949a:	eb42 0303 	adc.w	r3, r2, r3
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80094ac:	4629      	mov	r1, r5
 80094ae:	024b      	lsls	r3, r1, #9
 80094b0:	4621      	mov	r1, r4
 80094b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094b6:	4621      	mov	r1, r4
 80094b8:	024a      	lsls	r2, r1, #9
 80094ba:	4610      	mov	r0, r2
 80094bc:	4619      	mov	r1, r3
 80094be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80094d0:	f7f7 fd68 	bl	8000fa4 <__aeabi_uldivmod>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4613      	mov	r3, r2
 80094da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094de:	e067      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094e0:	4b75      	ldr	r3, [pc, #468]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	099b      	lsrs	r3, r3, #6
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80094f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80094fa:	2300      	movs	r3, #0
 80094fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009502:	4622      	mov	r2, r4
 8009504:	462b      	mov	r3, r5
 8009506:	f04f 0000 	mov.w	r0, #0
 800950a:	f04f 0100 	mov.w	r1, #0
 800950e:	0159      	lsls	r1, r3, #5
 8009510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009514:	0150      	lsls	r0, r2, #5
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4621      	mov	r1, r4
 800951c:	1a51      	subs	r1, r2, r1
 800951e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009520:	4629      	mov	r1, r5
 8009522:	eb63 0301 	sbc.w	r3, r3, r1
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009534:	4649      	mov	r1, r9
 8009536:	018b      	lsls	r3, r1, #6
 8009538:	4641      	mov	r1, r8
 800953a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800953e:	4641      	mov	r1, r8
 8009540:	018a      	lsls	r2, r1, #6
 8009542:	4641      	mov	r1, r8
 8009544:	ebb2 0a01 	subs.w	sl, r2, r1
 8009548:	4649      	mov	r1, r9
 800954a:	eb63 0b01 	sbc.w	fp, r3, r1
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800955a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800955e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009562:	4692      	mov	sl, r2
 8009564:	469b      	mov	fp, r3
 8009566:	4623      	mov	r3, r4
 8009568:	eb1a 0303 	adds.w	r3, sl, r3
 800956c:	623b      	str	r3, [r7, #32]
 800956e:	462b      	mov	r3, r5
 8009570:	eb4b 0303 	adc.w	r3, fp, r3
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	f04f 0300 	mov.w	r3, #0
 800957e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009582:	4629      	mov	r1, r5
 8009584:	028b      	lsls	r3, r1, #10
 8009586:	4621      	mov	r1, r4
 8009588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800958c:	4621      	mov	r1, r4
 800958e:	028a      	lsls	r2, r1, #10
 8009590:	4610      	mov	r0, r2
 8009592:	4619      	mov	r1, r3
 8009594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009598:	2200      	movs	r2, #0
 800959a:	673b      	str	r3, [r7, #112]	; 0x70
 800959c:	677a      	str	r2, [r7, #116]	; 0x74
 800959e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80095a2:	f7f7 fcff 	bl	8000fa4 <__aeabi_uldivmod>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4613      	mov	r3, r2
 80095ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095b0:	4b41      	ldr	r3, [pc, #260]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	3301      	adds	r3, #1
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80095c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80095d2:	e0eb      	b.n	80097ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095d4:	4b38      	ldr	r3, [pc, #224]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095e0:	4b35      	ldr	r3, [pc, #212]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d06b      	beq.n	80096c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095ec:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	099b      	lsrs	r3, r3, #6
 80095f2:	2200      	movs	r2, #0
 80095f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009600:	2300      	movs	r3, #0
 8009602:	667b      	str	r3, [r7, #100]	; 0x64
 8009604:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009608:	4622      	mov	r2, r4
 800960a:	462b      	mov	r3, r5
 800960c:	f04f 0000 	mov.w	r0, #0
 8009610:	f04f 0100 	mov.w	r1, #0
 8009614:	0159      	lsls	r1, r3, #5
 8009616:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800961a:	0150      	lsls	r0, r2, #5
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4621      	mov	r1, r4
 8009622:	1a51      	subs	r1, r2, r1
 8009624:	61b9      	str	r1, [r7, #24]
 8009626:	4629      	mov	r1, r5
 8009628:	eb63 0301 	sbc.w	r3, r3, r1
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800963a:	4659      	mov	r1, fp
 800963c:	018b      	lsls	r3, r1, #6
 800963e:	4651      	mov	r1, sl
 8009640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009644:	4651      	mov	r1, sl
 8009646:	018a      	lsls	r2, r1, #6
 8009648:	4651      	mov	r1, sl
 800964a:	ebb2 0801 	subs.w	r8, r2, r1
 800964e:	4659      	mov	r1, fp
 8009650:	eb63 0901 	sbc.w	r9, r3, r1
 8009654:	f04f 0200 	mov.w	r2, #0
 8009658:	f04f 0300 	mov.w	r3, #0
 800965c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009660:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009664:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009668:	4690      	mov	r8, r2
 800966a:	4699      	mov	r9, r3
 800966c:	4623      	mov	r3, r4
 800966e:	eb18 0303 	adds.w	r3, r8, r3
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	462b      	mov	r3, r5
 8009676:	eb49 0303 	adc.w	r3, r9, r3
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009688:	4629      	mov	r1, r5
 800968a:	024b      	lsls	r3, r1, #9
 800968c:	4621      	mov	r1, r4
 800968e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009692:	4621      	mov	r1, r4
 8009694:	024a      	lsls	r2, r1, #9
 8009696:	4610      	mov	r0, r2
 8009698:	4619      	mov	r1, r3
 800969a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800969e:	2200      	movs	r2, #0
 80096a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80096a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80096a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096a8:	f7f7 fc7c 	bl	8000fa4 <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4613      	mov	r3, r2
 80096b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096b6:	e065      	b.n	8009784 <HAL_RCC_GetSysClockFreq+0x420>
 80096b8:	40023800 	.word	0x40023800
 80096bc:	00f42400 	.word	0x00f42400
 80096c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096c4:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <HAL_RCC_GetSysClockFreq+0x458>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	099b      	lsrs	r3, r3, #6
 80096ca:	2200      	movs	r2, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	4611      	mov	r1, r2
 80096d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80096d4:	653b      	str	r3, [r7, #80]	; 0x50
 80096d6:	2300      	movs	r3, #0
 80096d8:	657b      	str	r3, [r7, #84]	; 0x54
 80096da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f04f 0100 	mov.w	r1, #0
 80096ea:	0159      	lsls	r1, r3, #5
 80096ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096f0:	0150      	lsls	r0, r2, #5
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4641      	mov	r1, r8
 80096f8:	1a51      	subs	r1, r2, r1
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	4649      	mov	r1, r9
 80096fe:	eb63 0301 	sbc.w	r3, r3, r1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	f04f 0300 	mov.w	r3, #0
 800970c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009710:	4659      	mov	r1, fp
 8009712:	018b      	lsls	r3, r1, #6
 8009714:	4651      	mov	r1, sl
 8009716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800971a:	4651      	mov	r1, sl
 800971c:	018a      	lsls	r2, r1, #6
 800971e:	4651      	mov	r1, sl
 8009720:	1a54      	subs	r4, r2, r1
 8009722:	4659      	mov	r1, fp
 8009724:	eb63 0501 	sbc.w	r5, r3, r1
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	f04f 0300 	mov.w	r3, #0
 8009730:	00eb      	lsls	r3, r5, #3
 8009732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009736:	00e2      	lsls	r2, r4, #3
 8009738:	4614      	mov	r4, r2
 800973a:	461d      	mov	r5, r3
 800973c:	4643      	mov	r3, r8
 800973e:	18e3      	adds	r3, r4, r3
 8009740:	603b      	str	r3, [r7, #0]
 8009742:	464b      	mov	r3, r9
 8009744:	eb45 0303 	adc.w	r3, r5, r3
 8009748:	607b      	str	r3, [r7, #4]
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009756:	4629      	mov	r1, r5
 8009758:	028b      	lsls	r3, r1, #10
 800975a:	4621      	mov	r1, r4
 800975c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009760:	4621      	mov	r1, r4
 8009762:	028a      	lsls	r2, r1, #10
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800976c:	2200      	movs	r2, #0
 800976e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009770:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009776:	f7f7 fc15 	bl	8000fa4 <__aeabi_uldivmod>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4613      	mov	r3, r2
 8009780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009784:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <HAL_RCC_GetSysClockFreq+0x458>)
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	0f1b      	lsrs	r3, r3, #28
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800979a:	fbb2 f3f3 	udiv	r3, r2, r3
 800979e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80097a2:	e003      	b.n	80097ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80097a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80097aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	37b8      	adds	r7, #184	; 0xb8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ba:	bf00      	nop
 80097bc:	40023800 	.word	0x40023800
 80097c0:	00f42400 	.word	0x00f42400

080097c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e28d      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8083 	beq.w	80098ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80097e4:	4b94      	ldr	r3, [pc, #592]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 030c 	and.w	r3, r3, #12
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d019      	beq.n	8009824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80097f0:	4b91      	ldr	r3, [pc, #580]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d106      	bne.n	800980a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80097fc:	4b8e      	ldr	r3, [pc, #568]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009808:	d00c      	beq.n	8009824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800980a:	4b8b      	ldr	r3, [pc, #556]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009812:	2b0c      	cmp	r3, #12
 8009814:	d112      	bne.n	800983c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009816:	4b88      	ldr	r3, [pc, #544]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009822:	d10b      	bne.n	800983c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009824:	4b84      	ldr	r3, [pc, #528]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d05b      	beq.n	80098e8 <HAL_RCC_OscConfig+0x124>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d157      	bne.n	80098e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e25a      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009844:	d106      	bne.n	8009854 <HAL_RCC_OscConfig+0x90>
 8009846:	4b7c      	ldr	r3, [pc, #496]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a7b      	ldr	r2, [pc, #492]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800984c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	e01d      	b.n	8009890 <HAL_RCC_OscConfig+0xcc>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800985c:	d10c      	bne.n	8009878 <HAL_RCC_OscConfig+0xb4>
 800985e:	4b76      	ldr	r3, [pc, #472]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a75      	ldr	r2, [pc, #468]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4b73      	ldr	r3, [pc, #460]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a72      	ldr	r2, [pc, #456]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	e00b      	b.n	8009890 <HAL_RCC_OscConfig+0xcc>
 8009878:	4b6f      	ldr	r3, [pc, #444]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a6e      	ldr	r2, [pc, #440]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800987e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	4b6c      	ldr	r3, [pc, #432]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a6b      	ldr	r2, [pc, #428]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800988a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800988e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d013      	beq.n	80098c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009898:	f7fc fbe0 	bl	800605c <HAL_GetTick>
 800989c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800989e:	e008      	b.n	80098b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098a0:	f7fc fbdc 	bl	800605c <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b64      	cmp	r3, #100	; 0x64
 80098ac:	d901      	bls.n	80098b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e21f      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098b2:	4b61      	ldr	r3, [pc, #388]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0f0      	beq.n	80098a0 <HAL_RCC_OscConfig+0xdc>
 80098be:	e014      	b.n	80098ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c0:	f7fc fbcc 	bl	800605c <HAL_GetTick>
 80098c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098c6:	e008      	b.n	80098da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098c8:	f7fc fbc8 	bl	800605c <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b64      	cmp	r3, #100	; 0x64
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e20b      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098da:	4b57      	ldr	r3, [pc, #348]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f0      	bne.n	80098c8 <HAL_RCC_OscConfig+0x104>
 80098e6:	e000      	b.n	80098ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d06f      	beq.n	80099d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80098f6:	4b50      	ldr	r3, [pc, #320]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f003 030c 	and.w	r3, r3, #12
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d017      	beq.n	8009932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009902:	4b4d      	ldr	r3, [pc, #308]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800990a:	2b08      	cmp	r3, #8
 800990c:	d105      	bne.n	800991a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800990e:	4b4a      	ldr	r3, [pc, #296]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800991a:	4b47      	ldr	r3, [pc, #284]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009922:	2b0c      	cmp	r3, #12
 8009924:	d11c      	bne.n	8009960 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009926:	4b44      	ldr	r3, [pc, #272]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d116      	bne.n	8009960 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009932:	4b41      	ldr	r3, [pc, #260]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <HAL_RCC_OscConfig+0x186>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d001      	beq.n	800994a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e1d3      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800994a:	4b3b      	ldr	r3, [pc, #236]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	4937      	ldr	r1, [pc, #220]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800995a:	4313      	orrs	r3, r2
 800995c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800995e:	e03a      	b.n	80099d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d020      	beq.n	80099aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009968:	4b34      	ldr	r3, [pc, #208]	; (8009a3c <HAL_RCC_OscConfig+0x278>)
 800996a:	2201      	movs	r2, #1
 800996c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996e:	f7fc fb75 	bl	800605c <HAL_GetTick>
 8009972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009974:	e008      	b.n	8009988 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009976:	f7fc fb71 	bl	800605c <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d901      	bls.n	8009988 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e1b4      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009988:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0f0      	beq.n	8009976 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009994:	4b28      	ldr	r3, [pc, #160]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	4925      	ldr	r1, [pc, #148]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	600b      	str	r3, [r1, #0]
 80099a8:	e015      	b.n	80099d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099aa:	4b24      	ldr	r3, [pc, #144]	; (8009a3c <HAL_RCC_OscConfig+0x278>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b0:	f7fc fb54 	bl	800605c <HAL_GetTick>
 80099b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099b6:	e008      	b.n	80099ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099b8:	f7fc fb50 	bl	800605c <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d901      	bls.n	80099ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e193      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ca:	4b1b      	ldr	r3, [pc, #108]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f0      	bne.n	80099b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0308 	and.w	r3, r3, #8
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d036      	beq.n	8009a50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d016      	beq.n	8009a18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <HAL_RCC_OscConfig+0x27c>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099f0:	f7fc fb34 	bl	800605c <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099f8:	f7fc fb30 	bl	800605c <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e173      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCC_OscConfig+0x274>)
 8009a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0x234>
 8009a16:	e01b      	b.n	8009a50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <HAL_RCC_OscConfig+0x27c>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a1e:	f7fc fb1d 	bl	800605c <HAL_GetTick>
 8009a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a24:	e00e      	b.n	8009a44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a26:	f7fc fb19 	bl	800605c <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d907      	bls.n	8009a44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e15c      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	42470000 	.word	0x42470000
 8009a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a44:	4b8a      	ldr	r3, [pc, #552]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1ea      	bne.n	8009a26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8097 	beq.w	8009b8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a62:	4b83      	ldr	r3, [pc, #524]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10f      	bne.n	8009a8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]
 8009a72:	4b7f      	ldr	r3, [pc, #508]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	4a7e      	ldr	r2, [pc, #504]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a7e:	4b7c      	ldr	r3, [pc, #496]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a86:	60bb      	str	r3, [r7, #8]
 8009a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a8e:	4b79      	ldr	r3, [pc, #484]	; (8009c74 <HAL_RCC_OscConfig+0x4b0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d118      	bne.n	8009acc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a9a:	4b76      	ldr	r3, [pc, #472]	; (8009c74 <HAL_RCC_OscConfig+0x4b0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a75      	ldr	r2, [pc, #468]	; (8009c74 <HAL_RCC_OscConfig+0x4b0>)
 8009aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aa6:	f7fc fad9 	bl	800605c <HAL_GetTick>
 8009aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009aae:	f7fc fad5 	bl	800605c <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e118      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac0:	4b6c      	ldr	r3, [pc, #432]	; (8009c74 <HAL_RCC_OscConfig+0x4b0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0f0      	beq.n	8009aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d106      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x31e>
 8009ad4:	4b66      	ldr	r3, [pc, #408]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad8:	4a65      	ldr	r2, [pc, #404]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009ada:	f043 0301 	orr.w	r3, r3, #1
 8009ade:	6713      	str	r3, [r2, #112]	; 0x70
 8009ae0:	e01c      	b.n	8009b1c <HAL_RCC_OscConfig+0x358>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d10c      	bne.n	8009b04 <HAL_RCC_OscConfig+0x340>
 8009aea:	4b61      	ldr	r3, [pc, #388]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aee:	4a60      	ldr	r2, [pc, #384]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009af0:	f043 0304 	orr.w	r3, r3, #4
 8009af4:	6713      	str	r3, [r2, #112]	; 0x70
 8009af6:	4b5e      	ldr	r3, [pc, #376]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afa:	4a5d      	ldr	r2, [pc, #372]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009afc:	f043 0301 	orr.w	r3, r3, #1
 8009b00:	6713      	str	r3, [r2, #112]	; 0x70
 8009b02:	e00b      	b.n	8009b1c <HAL_RCC_OscConfig+0x358>
 8009b04:	4b5a      	ldr	r3, [pc, #360]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b08:	4a59      	ldr	r2, [pc, #356]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b0a:	f023 0301 	bic.w	r3, r3, #1
 8009b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b10:	4b57      	ldr	r3, [pc, #348]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b14:	4a56      	ldr	r2, [pc, #344]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b16:	f023 0304 	bic.w	r3, r3, #4
 8009b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d015      	beq.n	8009b50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b24:	f7fc fa9a 	bl	800605c <HAL_GetTick>
 8009b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b2a:	e00a      	b.n	8009b42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b2c:	f7fc fa96 	bl	800605c <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e0d7      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b42:	4b4b      	ldr	r3, [pc, #300]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0ee      	beq.n	8009b2c <HAL_RCC_OscConfig+0x368>
 8009b4e:	e014      	b.n	8009b7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b50:	f7fc fa84 	bl	800605c <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b56:	e00a      	b.n	8009b6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b58:	f7fc fa80 	bl	800605c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e0c1      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b6e:	4b40      	ldr	r3, [pc, #256]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1ee      	bne.n	8009b58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d105      	bne.n	8009b8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b80:	4b3b      	ldr	r3, [pc, #236]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b84:	4a3a      	ldr	r2, [pc, #232]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 80ad 	beq.w	8009cf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b96:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f003 030c 	and.w	r3, r3, #12
 8009b9e:	2b08      	cmp	r3, #8
 8009ba0:	d060      	beq.n	8009c64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d145      	bne.n	8009c36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009baa:	4b33      	ldr	r3, [pc, #204]	; (8009c78 <HAL_RCC_OscConfig+0x4b4>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb0:	f7fc fa54 	bl	800605c <HAL_GetTick>
 8009bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bb6:	e008      	b.n	8009bca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bb8:	f7fc fa50 	bl	800605c <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d901      	bls.n	8009bca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e093      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bca:	4b29      	ldr	r3, [pc, #164]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1f0      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69da      	ldr	r2, [r3, #28]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	019b      	lsls	r3, r3, #6
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	041b      	lsls	r3, r3, #16
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	061b      	lsls	r3, r3, #24
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	071b      	lsls	r3, r3, #28
 8009c02:	491b      	ldr	r1, [pc, #108]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c08:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <HAL_RCC_OscConfig+0x4b4>)
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0e:	f7fc fa25 	bl	800605c <HAL_GetTick>
 8009c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c14:	e008      	b.n	8009c28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c16:	f7fc fa21 	bl	800605c <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e064      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0f0      	beq.n	8009c16 <HAL_RCC_OscConfig+0x452>
 8009c34:	e05c      	b.n	8009cf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c36:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <HAL_RCC_OscConfig+0x4b4>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c3c:	f7fc fa0e 	bl	800605c <HAL_GetTick>
 8009c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c44:	f7fc fa0a 	bl	800605c <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e04d      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_RCC_OscConfig+0x4ac>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f0      	bne.n	8009c44 <HAL_RCC_OscConfig+0x480>
 8009c62:	e045      	b.n	8009cf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d107      	bne.n	8009c7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e040      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
 8009c70:	40023800 	.word	0x40023800
 8009c74:	40007000 	.word	0x40007000
 8009c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c7c:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <HAL_RCC_OscConfig+0x538>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d030      	beq.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d129      	bne.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d122      	bne.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cac:	4013      	ands	r3, r2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d119      	bne.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d10f      	bne.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d107      	bne.n	8009cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d001      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40023800 	.word	0x40023800

08009d00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e066      	b.n	8009de4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	7f5b      	ldrb	r3, [r3, #29]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d105      	bne.n	8009d2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fb fb62 	bl	80053f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	22ca      	movs	r2, #202	; 0xca
 8009d38:	625a      	str	r2, [r3, #36]	; 0x24
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2253      	movs	r2, #83	; 0x53
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f927 	bl	8009f96 <RTC_EnterInitMode>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d12c      	bne.n	8009dac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d64:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6899      	ldr	r1, [r3, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	68d2      	ldr	r2, [r2, #12]
 8009d8c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6919      	ldr	r1, [r3, #16]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	041a      	lsls	r2, r3, #16
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f92e 	bl	800a004 <RTC_ExitInitMode>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d113      	bne.n	8009dda <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699a      	ldr	r2, [r3, #24]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	22ff      	movs	r2, #255	; 0xff
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	0a1b      	lsrs	r3, r3, #8
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	0d9b      	lsrs	r3, r3, #22
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d11a      	bne.n	8009e9e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 f8ee 	bl	800a04e <RTC_Bcd2ToByte>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 f8e5 	bl	800a04e <RTC_Bcd2ToByte>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	789b      	ldrb	r3, [r3, #2]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 f8dc 	bl	800a04e <RTC_Bcd2ToByte>
 8009e96:	4603      	mov	r3, r0
 8009e98:	461a      	mov	r2, r3
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	0c1b      	lsrs	r3, r3, #16
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	0a1b      	lsrs	r3, r3, #8
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 031f 	and.w	r3, r3, #31
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	0b5b      	lsrs	r3, r3, #13
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11a      	bne.n	8009f3c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	78db      	ldrb	r3, [r3, #3]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f89f 	bl	800a04e <RTC_Bcd2ToByte>
 8009f10:	4603      	mov	r3, r0
 8009f12:	461a      	mov	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 f896 	bl	800a04e <RTC_Bcd2ToByte>
 8009f22:	4603      	mov	r3, r0
 8009f24:	461a      	mov	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f88d 	bl	800a04e <RTC_Bcd2ToByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f60:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f62:	f7fc f87b 	bl	800605c <HAL_GetTick>
 8009f66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f68:	e009      	b.n	8009f7e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f6a:	f7fc f877 	bl	800605c <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f78:	d901      	bls.n	8009f7e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e007      	b.n	8009f8e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0ee      	beq.n	8009f6a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d122      	bne.n	8009ffa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fc4:	f7fc f84a 	bl	800605c <HAL_GetTick>
 8009fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fca:	e00c      	b.n	8009fe6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fcc:	f7fc f846 	bl	800605c <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fda:	d904      	bls.n	8009fe6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2204      	movs	r2, #4
 8009fe0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <RTC_EnterInitMode+0x64>
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d1e8      	bne.n	8009fcc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a01e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f003 0320 	and.w	r3, r3, #32
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10a      	bne.n	800a044 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff ff89 	bl	8009f46 <HAL_RTC_WaitForSynchro>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2204      	movs	r2, #4
 800a03e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	4603      	mov	r3, r0
 800a056:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	b2db      	uxtb	r3, r3
 800a062:	461a      	mov	r2, r3
 800a064:	0092      	lsls	r2, r2, #2
 800a066:	4413      	add	r3, r2
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	b2da      	uxtb	r2, r3
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	4413      	add	r3, r2
 800a078:	b2db      	uxtb	r3, r3
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a086:	b480      	push	{r7}
 800a088:	b087      	sub	sp, #28
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	60b9      	str	r1, [r7, #8]
 800a090:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3350      	adds	r3, #80	; 0x50
 800a09c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b085      	sub	sp, #20
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3350      	adds	r3, #80	; 0x50
 800a0ce:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e03f      	b.n	800a17c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d106      	bne.n	800a116 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7fb f997 	bl	8005444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2224      	movs	r2, #36	; 0x24
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a12c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 f87c 	bl	800b22c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a142:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	695a      	ldr	r2, [r3, #20]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a152:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a162:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2220      	movs	r2, #32
 800a176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e021      	b.n	800a1da <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2224      	movs	r2, #36	; 0x24
 800a19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1ac:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fb fae0 	bl	8005774 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b08a      	sub	sp, #40	; 0x28
 800a1e6:	af02      	add	r7, sp, #8
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	603b      	str	r3, [r7, #0]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d17c      	bne.n	800a2fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <HAL_UART_Transmit+0x2c>
 800a208:	88fb      	ldrh	r3, [r7, #6]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e075      	b.n	800a2fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_UART_Transmit+0x3e>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e06e      	b.n	800a2fe <HAL_UART_Transmit+0x11c>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2221      	movs	r2, #33	; 0x21
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a236:	f7fb ff11 	bl	800605c <HAL_GetTick>
 800a23a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	88fa      	ldrh	r2, [r7, #6]
 800a240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	88fa      	ldrh	r2, [r7, #6]
 800a246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a250:	d108      	bne.n	800a264 <HAL_UART_Transmit+0x82>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d104      	bne.n	800a264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	61bb      	str	r3, [r7, #24]
 800a262:	e003      	b.n	800a26c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a274:	e02a      	b.n	800a2cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2200      	movs	r2, #0
 800a27e:	2180      	movs	r1, #128	; 0x80
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 fd04 	bl	800ac8e <UART_WaitOnFlagUntilTimeout>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e036      	b.n	800a2fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10b      	bne.n	800a2ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	e007      	b.n	800a2be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1cf      	bne.n	800a276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2140      	movs	r1, #64	; 0x40
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fcd4 	bl	800ac8e <UART_WaitOnFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e006      	b.n	800a2fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e000      	b.n	800a2fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a2fc:	2302      	movs	r3, #2
  }
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3720      	adds	r7, #32
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08c      	sub	sp, #48	; 0x30
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	4613      	mov	r3, r2
 800a314:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d165      	bne.n	800a3ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <HAL_UART_Transmit_DMA+0x26>
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e05e      	b.n	800a3f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d101      	bne.n	800a340 <HAL_UART_Transmit_DMA+0x38>
 800a33c:	2302      	movs	r3, #2
 800a33e:	e057      	b.n	800a3f0 <HAL_UART_Transmit_DMA+0xe8>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	88fa      	ldrh	r2, [r7, #6]
 800a358:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2221      	movs	r2, #33	; 0x21
 800a364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36c:	4a22      	ldr	r2, [pc, #136]	; (800a3f8 <HAL_UART_Transmit_DMA+0xf0>)
 800a36e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a374:	4a21      	ldr	r2, [pc, #132]	; (800a3fc <HAL_UART_Transmit_DMA+0xf4>)
 800a376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	4a20      	ldr	r2, [pc, #128]	; (800a400 <HAL_UART_Transmit_DMA+0xf8>)
 800a37e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	2200      	movs	r2, #0
 800a386:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a388:	f107 0308 	add.w	r3, r7, #8
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3304      	adds	r3, #4
 800a39c:	461a      	mov	r2, r3
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	f7fc fcec 	bl	8006d7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3314      	adds	r3, #20
 800a3d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a3d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6a39      	ldr	r1, [r7, #32]
 800a3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e5      	bne.n	800a3b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e000      	b.n	800a3f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a3ee:	2302      	movs	r3, #2
  }
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3730      	adds	r7, #48	; 0x30
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0800a9e9 	.word	0x0800a9e9
 800a3fc:	0800aa83 	.word	0x0800aa83
 800a400:	0800abfb 	.word	0x0800abfb

0800a404 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	4613      	mov	r3, r2
 800a410:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d11d      	bne.n	800a45a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <HAL_UART_Receive_DMA+0x26>
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e016      	b.n	800a45c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_UART_Receive_DMA+0x38>
 800a438:	2302      	movs	r3, #2
 800a43a:	e00f      	b.n	800a45c <HAL_UART_Receive_DMA+0x58>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	461a      	mov	r2, r3
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fc8b 	bl	800ad6c <UART_Start_Receive_DMA>
 800a456:	4603      	mov	r3, r0
 800a458:	e000      	b.n	800a45c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a45a:	2302      	movs	r3, #2
  }
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b0ba      	sub	sp, #232	; 0xe8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a490:	2300      	movs	r3, #0
 800a492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10f      	bne.n	800a4ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ae:	f003 0320 	and.w	r3, r3, #32
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d009      	beq.n	800a4ca <HAL_UART_IRQHandler+0x66>
 800a4b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fdf7 	bl	800b0b6 <UART_Receive_IT>
      return;
 800a4c8:	e256      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80de 	beq.w	800a690 <HAL_UART_IRQHandler+0x22c>
 800a4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80d1 	beq.w	800a690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <HAL_UART_IRQHandler+0xae>
 800a4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f043 0201 	orr.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a516:	f003 0304 	and.w	r3, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <HAL_UART_IRQHandler+0xd2>
 800a51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	f043 0202 	orr.w	r2, r3, #2
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00b      	beq.n	800a55a <HAL_UART_IRQHandler+0xf6>
 800a542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a552:	f043 0204 	orr.w	r2, r3, #4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d011      	beq.n	800a58a <HAL_UART_IRQHandler+0x126>
 800a566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0208 	orr.w	r2, r3, #8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 81ed 	beq.w	800a96e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d008      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x14e>
 800a5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fd82 	bl	800b0b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5bc:	2b40      	cmp	r3, #64	; 0x40
 800a5be:	bf0c      	ite	eq
 800a5c0:	2301      	moveq	r3, #1
 800a5c2:	2300      	movne	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <HAL_UART_IRQHandler+0x17a>
 800a5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d04f      	beq.n	800a67e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fc8a 	bl	800aef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b40      	cmp	r3, #64	; 0x40
 800a5f0:	d141      	bne.n	800a676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a600:	e853 3f00 	ldrex	r3, [r3]
 800a604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3314      	adds	r3, #20
 800a61a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a61e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a62a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1d9      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	d013      	beq.n	800a66e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	4a7d      	ldr	r2, [pc, #500]	; (800a840 <HAL_UART_IRQHandler+0x3dc>)
 800a64c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	4618      	mov	r0, r3
 800a654:	f7fc fc5a 	bl	8006f0c <HAL_DMA_Abort_IT>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d016      	beq.n	800a68c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66c:	e00e      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f9a4 	bl	800a9bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a674:	e00a      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9a0 	bl	800a9bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	e006      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f99c 	bl	800a9bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a68a:	e170      	b.n	800a96e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68c:	bf00      	nop
    return;
 800a68e:	e16e      	b.n	800a96e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a694:	2b01      	cmp	r3, #1
 800a696:	f040 814a 	bne.w	800a92e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69e:	f003 0310 	and.w	r3, r3, #16
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8143 	beq.w	800a92e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 813c 	beq.w	800a92e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b40      	cmp	r3, #64	; 0x40
 800a6d8:	f040 80b4 	bne.w	800a844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 8140 	beq.w	800a972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f080 8139 	bcs.w	800a972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a712:	f000 8088 	beq.w	800a826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	330c      	adds	r3, #12
 800a71c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a72c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	330c      	adds	r3, #12
 800a73e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a74e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a75a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1d9      	bne.n	800a716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3314      	adds	r3, #20
 800a768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3314      	adds	r3, #20
 800a782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a78a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a78e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e1      	bne.n	800a762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3314      	adds	r3, #20
 800a7a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e3      	bne.n	800a79e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f6:	f023 0310 	bic.w	r3, r3, #16
 800a7fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a808:	65ba      	str	r2, [r7, #88]	; 0x58
 800a80a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a80e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e3      	bne.n	800a7e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	4618      	mov	r0, r3
 800a822:	f7fc fb03 	bl	8006e2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a82e:	b29b      	uxth	r3, r3
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f8ca 	bl	800a9d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a83c:	e099      	b.n	800a972 <HAL_UART_IRQHandler+0x50e>
 800a83e:	bf00      	nop
 800a840:	0800afbf 	.word	0x0800afbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 808b 	beq.w	800a976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8086 	beq.w	800a976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	330c      	adds	r3, #12
 800a88a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a88e:	647a      	str	r2, [r7, #68]	; 0x44
 800a890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e3      	bne.n	800a86a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3314      	adds	r3, #20
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3314      	adds	r3, #20
 800a8c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e3      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	330c      	adds	r3, #12
 800a8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0310 	bic.w	r3, r3, #16
 800a8fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	330c      	adds	r3, #12
 800a908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a90c:	61fa      	str	r2, [r7, #28]
 800a90e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	617b      	str	r3, [r7, #20]
   return(result);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e3      	bne.n	800a8e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f852 	bl	800a9d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a92c:	e023      	b.n	800a976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <HAL_UART_IRQHandler+0x4ea>
 800a93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fb4d 	bl	800afe6 <UART_Transmit_IT>
    return;
 800a94c:	e014      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <HAL_UART_IRQHandler+0x514>
 800a95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fb8d 	bl	800b086 <UART_EndTransmit_IT>
    return;
 800a96c:	e004      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
    return;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
      return;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
      return;
 800a976:	bf00      	nop
  }
}
 800a978:	37e8      	adds	r7, #232	; 0xe8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop

0800a980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b090      	sub	sp, #64	; 0x40
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d137      	bne.n	800aa74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa06:	2200      	movs	r2, #0
 800aa08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3314      	adds	r3, #20
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa20:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3314      	adds	r3, #20
 800aa28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa2a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e5      	bne.n	800aa0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	330c      	adds	r3, #12
 800aa44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
 800aa56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	330c      	adds	r3, #12
 800aa5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa5e:	61fa      	str	r2, [r7, #28]
 800aa60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa72:	e002      	b.n	800aa7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa76:	f7ff ff83 	bl	800a980 <HAL_UART_TxCpltCallback>
}
 800aa7a:	bf00      	nop
 800aa7c:	3740      	adds	r7, #64	; 0x40
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7ff ff7f 	bl	800a994 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b09c      	sub	sp, #112	; 0x70
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d172      	bne.n	800aba0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aaba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aabc:	2200      	movs	r2, #0
 800aabe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aad6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	330c      	adds	r3, #12
 800aade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aae0:	65ba      	str	r2, [r7, #88]	; 0x58
 800aae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e5      	bne.n	800aac0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3314      	adds	r3, #20
 800aafa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	f023 0301 	bic.w	r3, r3, #1
 800ab0a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3314      	adds	r3, #20
 800ab12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab14:	647a      	str	r2, [r7, #68]	; 0x44
 800ab16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e5      	bne.n	800aaf4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3314      	adds	r3, #20
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	e853 3f00 	ldrex	r3, [r3]
 800ab36:	623b      	str	r3, [r7, #32]
   return(result);
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3e:	663b      	str	r3, [r7, #96]	; 0x60
 800ab40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3314      	adds	r3, #20
 800ab46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab48:	633a      	str	r2, [r7, #48]	; 0x30
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e5      	bne.n	800ab28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d119      	bne.n	800aba0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0310 	bic.w	r3, r3, #16
 800ab82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	330c      	adds	r3, #12
 800ab8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab8c:	61fa      	str	r2, [r7, #28]
 800ab8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	69b9      	ldr	r1, [r7, #24]
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e5      	bne.n	800ab6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d106      	bne.n	800abb6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abac:	4619      	mov	r1, r3
 800abae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abb0:	f7ff ff0e 	bl	800a9d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb4:	e002      	b.n	800abbc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800abb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abb8:	f7fa ff92 	bl	8005ae0 <HAL_UART_RxCpltCallback>
}
 800abbc:	bf00      	nop
 800abbe:	3770      	adds	r7, #112	; 0x70
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d108      	bne.n	800abec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4619      	mov	r1, r3
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7ff fef3 	bl	800a9d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abea:	e002      	b.n	800abf2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff fedb 	bl	800a9a8 <HAL_UART_RxHalfCpltCallback>
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac16:	2b80      	cmp	r3, #128	; 0x80
 800ac18:	bf0c      	ite	eq
 800ac1a:	2301      	moveq	r3, #1
 800ac1c:	2300      	movne	r3, #0
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b21      	cmp	r3, #33	; 0x21
 800ac2c:	d108      	bne.n	800ac40 <UART_DMAError+0x46>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2200      	movs	r2, #0
 800ac38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f000 f934 	bl	800aea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4a:	2b40      	cmp	r3, #64	; 0x40
 800ac4c:	bf0c      	ite	eq
 800ac4e:	2301      	moveq	r3, #1
 800ac50:	2300      	movne	r3, #0
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b22      	cmp	r3, #34	; 0x22
 800ac60:	d108      	bne.n	800ac74 <UART_DMAError+0x7a>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac6e:	68b8      	ldr	r0, [r7, #8]
 800ac70:	f000 f942 	bl	800aef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac78:	f043 0210 	orr.w	r2, r3, #16
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac80:	68b8      	ldr	r0, [r7, #8]
 800ac82:	f7ff fe9b 	bl	800a9bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b090      	sub	sp, #64	; 0x40
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9e:	e050      	b.n	800ad42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca6:	d04c      	beq.n	800ad42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <UART_WaitOnFlagUntilTimeout+0x30>
 800acae:	f7fb f9d5 	bl	800605c <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acba:	429a      	cmp	r2, r3
 800acbc:	d241      	bcs.n	800ad42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	330c      	adds	r3, #12
 800acc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	330c      	adds	r3, #12
 800acdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acde:	637a      	str	r2, [r7, #52]	; 0x34
 800ace0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ace4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3314      	adds	r3, #20
 800acf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	613b      	str	r3, [r7, #16]
   return(result);
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f023 0301 	bic.w	r3, r3, #1
 800ad08:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad12:	623a      	str	r2, [r7, #32]
 800ad14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	69f9      	ldr	r1, [r7, #28]
 800ad18:	6a3a      	ldr	r2, [r7, #32]
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e00f      	b.n	800ad62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	bf0c      	ite	eq
 800ad52:	2301      	moveq	r3, #1
 800ad54:	2300      	movne	r3, #0
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	461a      	mov	r2, r3
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d09f      	beq.n	800aca0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3740      	adds	r7, #64	; 0x40
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b098      	sub	sp, #96	; 0x60
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	4613      	mov	r3, r2
 800ad78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	88fa      	ldrh	r2, [r7, #6]
 800ad84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2222      	movs	r2, #34	; 0x22
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	4a40      	ldr	r2, [pc, #256]	; (800ae9c <UART_Start_Receive_DMA+0x130>)
 800ad9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	4a3f      	ldr	r2, [pc, #252]	; (800aea0 <UART_Start_Receive_DMA+0x134>)
 800ada2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	4a3e      	ldr	r2, [pc, #248]	; (800aea4 <UART_Start_Receive_DMA+0x138>)
 800adaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	2200      	movs	r2, #0
 800adb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800adb4:	f107 0308 	add.w	r3, r7, #8
 800adb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3304      	adds	r3, #4
 800adc4:	4619      	mov	r1, r3
 800adc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	f7fb ffd6 	bl	8006d7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800add0:	2300      	movs	r3, #0
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	613b      	str	r3, [r7, #16]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d019      	beq.n	800ae2a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	330c      	adds	r3, #12
 800adfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	330c      	adds	r3, #12
 800ae14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae16:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ae18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ae1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ae24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3314      	adds	r3, #20
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3c:	f043 0301 	orr.w	r3, r3, #1
 800ae40:	657b      	str	r3, [r7, #84]	; 0x54
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3314      	adds	r3, #20
 800ae48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae4a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ae4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e5      	bne.n	800ae2a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3314      	adds	r3, #20
 800ae64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	e853 3f00 	ldrex	r3, [r3]
 800ae6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae74:	653b      	str	r3, [r7, #80]	; 0x50
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3314      	adds	r3, #20
 800ae7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae7e:	627a      	str	r2, [r7, #36]	; 0x24
 800ae80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	6a39      	ldr	r1, [r7, #32]
 800ae84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e5      	bne.n	800ae5e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3760      	adds	r7, #96	; 0x60
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	0800aa9f 	.word	0x0800aa9f
 800aea0:	0800abc5 	.word	0x0800abc5
 800aea4:	0800abfb 	.word	0x0800abfb

0800aea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b089      	sub	sp, #36	; 0x24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aec6:	61fb      	str	r3, [r7, #28]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	330c      	adds	r3, #12
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	61ba      	str	r2, [r7, #24]
 800aed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed4:	6979      	ldr	r1, [r7, #20]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	e841 2300 	strex	r3, r2, [r1]
 800aedc:	613b      	str	r3, [r7, #16]
   return(result);
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e5      	bne.n	800aeb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aeec:	bf00      	nop
 800aeee:	3724      	adds	r7, #36	; 0x24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b095      	sub	sp, #84	; 0x54
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	330c      	adds	r3, #12
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	330c      	adds	r3, #12
 800af1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af20:	643a      	str	r2, [r7, #64]	; 0x40
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af28:	e841 2300 	strex	r3, r2, [r1]
 800af2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e5      	bne.n	800af00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3314      	adds	r3, #20
 800af3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	61fb      	str	r3, [r7, #28]
   return(result);
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	f023 0301 	bic.w	r3, r3, #1
 800af4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3314      	adds	r3, #20
 800af52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af5c:	e841 2300 	strex	r3, r2, [r1]
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1e5      	bne.n	800af34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d119      	bne.n	800afa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	330c      	adds	r3, #12
 800af76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	e853 3f00 	ldrex	r3, [r3]
 800af7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f023 0310 	bic.w	r3, r3, #16
 800af86:	647b      	str	r3, [r7, #68]	; 0x44
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	330c      	adds	r3, #12
 800af8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af90:	61ba      	str	r2, [r7, #24]
 800af92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	6979      	ldr	r1, [r7, #20]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	e841 2300 	strex	r3, r2, [r1]
 800af9c:	613b      	str	r3, [r7, #16]
   return(result);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e5      	bne.n	800af70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800afb2:	bf00      	nop
 800afb4:	3754      	adds	r7, #84	; 0x54
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7ff fcef 	bl	800a9bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b21      	cmp	r3, #33	; 0x21
 800aff8:	d13e      	bne.n	800b078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b002:	d114      	bne.n	800b02e <UART_Transmit_IT+0x48>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d110      	bne.n	800b02e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a1b      	ldr	r3, [r3, #32]
 800b010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	1c9a      	adds	r2, r3, #2
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	621a      	str	r2, [r3, #32]
 800b02c:	e008      	b.n	800b040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	1c59      	adds	r1, r3, #1
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	6211      	str	r1, [r2, #32]
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b01      	subs	r3, #1
 800b048:	b29b      	uxth	r3, r3
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4619      	mov	r1, r3
 800b04e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10f      	bne.n	800b074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	e000      	b.n	800b07a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b078:	2302      	movs	r3, #2
  }
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b09c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7ff fc6a 	bl	800a980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b08c      	sub	sp, #48	; 0x30
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b22      	cmp	r3, #34	; 0x22
 800b0c8:	f040 80ab 	bne.w	800b222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d4:	d117      	bne.n	800b106 <UART_Receive_IT+0x50>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d113      	bne.n	800b106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fe:	1c9a      	adds	r2, r3, #2
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	629a      	str	r2, [r3, #40]	; 0x28
 800b104:	e026      	b.n	800b154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b10c:	2300      	movs	r3, #0
 800b10e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b118:	d007      	beq.n	800b12a <UART_Receive_IT+0x74>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <UART_Receive_IT+0x82>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	b2da      	uxtb	r2, r3
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	701a      	strb	r2, [r3, #0]
 800b136:	e008      	b.n	800b14a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b144:	b2da      	uxtb	r2, r3
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	4619      	mov	r1, r3
 800b162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b164:	2b00      	cmp	r3, #0
 800b166:	d15a      	bne.n	800b21e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0220 	bic.w	r2, r2, #32
 800b176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68da      	ldr	r2, [r3, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695a      	ldr	r2, [r3, #20]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d135      	bne.n	800b214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	330c      	adds	r3, #12
 800b1b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f023 0310 	bic.w	r3, r3, #16
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	330c      	adds	r3, #12
 800b1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ce:	623a      	str	r2, [r7, #32]
 800b1d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	69f9      	ldr	r1, [r7, #28]
 800b1d4:	6a3a      	ldr	r2, [r7, #32]
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e5      	bne.n	800b1ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0310 	and.w	r3, r3, #16
 800b1ec:	2b10      	cmp	r3, #16
 800b1ee:	d10a      	bne.n	800b206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff fbdf 	bl	800a9d0 <HAL_UARTEx_RxEventCallback>
 800b212:	e002      	b.n	800b21a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7fa fc63 	bl	8005ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e002      	b.n	800b224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e000      	b.n	800b224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b222:	2302      	movs	r3, #2
  }
}
 800b224:	4618      	mov	r0, r3
 800b226:	3730      	adds	r7, #48	; 0x30
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b230:	b0c0      	sub	sp, #256	; 0x100
 800b232:	af00      	add	r7, sp, #0
 800b234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b248:	68d9      	ldr	r1, [r3, #12]
 800b24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	ea40 0301 	orr.w	r3, r0, r1
 800b254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	431a      	orrs	r2, r3
 800b264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	431a      	orrs	r2, r3
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	4313      	orrs	r3, r2
 800b274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b284:	f021 010c 	bic.w	r1, r1, #12
 800b288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b292:	430b      	orrs	r3, r1
 800b294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a6:	6999      	ldr	r1, [r3, #24]
 800b2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	ea40 0301 	orr.w	r3, r0, r1
 800b2b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b8f      	ldr	r3, [pc, #572]	; (800b4f8 <UART_SetConfig+0x2cc>)
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d005      	beq.n	800b2cc <UART_SetConfig+0xa0>
 800b2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b8d      	ldr	r3, [pc, #564]	; (800b4fc <UART_SetConfig+0x2d0>)
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d104      	bne.n	800b2d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2cc:	f7fd fd0c 	bl	8008ce8 <HAL_RCC_GetPCLK2Freq>
 800b2d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b2d4:	e003      	b.n	800b2de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b2d6:	f7fd fcf3 	bl	8008cc0 <HAL_RCC_GetPCLK1Freq>
 800b2da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2e8:	f040 810c 	bne.w	800b504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b2fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b2fe:	4622      	mov	r2, r4
 800b300:	462b      	mov	r3, r5
 800b302:	1891      	adds	r1, r2, r2
 800b304:	65b9      	str	r1, [r7, #88]	; 0x58
 800b306:	415b      	adcs	r3, r3
 800b308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b30a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b30e:	4621      	mov	r1, r4
 800b310:	eb12 0801 	adds.w	r8, r2, r1
 800b314:	4629      	mov	r1, r5
 800b316:	eb43 0901 	adc.w	r9, r3, r1
 800b31a:	f04f 0200 	mov.w	r2, #0
 800b31e:	f04f 0300 	mov.w	r3, #0
 800b322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b32a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b32e:	4690      	mov	r8, r2
 800b330:	4699      	mov	r9, r3
 800b332:	4623      	mov	r3, r4
 800b334:	eb18 0303 	adds.w	r3, r8, r3
 800b338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b33c:	462b      	mov	r3, r5
 800b33e:	eb49 0303 	adc.w	r3, r9, r3
 800b342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b35a:	460b      	mov	r3, r1
 800b35c:	18db      	adds	r3, r3, r3
 800b35e:	653b      	str	r3, [r7, #80]	; 0x50
 800b360:	4613      	mov	r3, r2
 800b362:	eb42 0303 	adc.w	r3, r2, r3
 800b366:	657b      	str	r3, [r7, #84]	; 0x54
 800b368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b36c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b370:	f7f5 fe18 	bl	8000fa4 <__aeabi_uldivmod>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4b61      	ldr	r3, [pc, #388]	; (800b500 <UART_SetConfig+0x2d4>)
 800b37a:	fba3 2302 	umull	r2, r3, r3, r2
 800b37e:	095b      	lsrs	r3, r3, #5
 800b380:	011c      	lsls	r4, r3, #4
 800b382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b386:	2200      	movs	r2, #0
 800b388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b38c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b394:	4642      	mov	r2, r8
 800b396:	464b      	mov	r3, r9
 800b398:	1891      	adds	r1, r2, r2
 800b39a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b39c:	415b      	adcs	r3, r3
 800b39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b3a4:	4641      	mov	r1, r8
 800b3a6:	eb12 0a01 	adds.w	sl, r2, r1
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	eb43 0b01 	adc.w	fp, r3, r1
 800b3b0:	f04f 0200 	mov.w	r2, #0
 800b3b4:	f04f 0300 	mov.w	r3, #0
 800b3b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3c4:	4692      	mov	sl, r2
 800b3c6:	469b      	mov	fp, r3
 800b3c8:	4643      	mov	r3, r8
 800b3ca:	eb1a 0303 	adds.w	r3, sl, r3
 800b3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3d2:	464b      	mov	r3, r9
 800b3d4:	eb4b 0303 	adc.w	r3, fp, r3
 800b3d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b3ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	18db      	adds	r3, r3, r3
 800b3f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	eb42 0303 	adc.w	r3, r2, r3
 800b3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800b3fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b406:	f7f5 fdcd 	bl	8000fa4 <__aeabi_uldivmod>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	4611      	mov	r1, r2
 800b410:	4b3b      	ldr	r3, [pc, #236]	; (800b500 <UART_SetConfig+0x2d4>)
 800b412:	fba3 2301 	umull	r2, r3, r3, r1
 800b416:	095b      	lsrs	r3, r3, #5
 800b418:	2264      	movs	r2, #100	; 0x64
 800b41a:	fb02 f303 	mul.w	r3, r2, r3
 800b41e:	1acb      	subs	r3, r1, r3
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b426:	4b36      	ldr	r3, [pc, #216]	; (800b500 <UART_SetConfig+0x2d4>)
 800b428:	fba3 2302 	umull	r2, r3, r3, r2
 800b42c:	095b      	lsrs	r3, r3, #5
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b434:	441c      	add	r4, r3
 800b436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b448:	4642      	mov	r2, r8
 800b44a:	464b      	mov	r3, r9
 800b44c:	1891      	adds	r1, r2, r2
 800b44e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b450:	415b      	adcs	r3, r3
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b458:	4641      	mov	r1, r8
 800b45a:	1851      	adds	r1, r2, r1
 800b45c:	6339      	str	r1, [r7, #48]	; 0x30
 800b45e:	4649      	mov	r1, r9
 800b460:	414b      	adcs	r3, r1
 800b462:	637b      	str	r3, [r7, #52]	; 0x34
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	f04f 0300 	mov.w	r3, #0
 800b46c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b470:	4659      	mov	r1, fp
 800b472:	00cb      	lsls	r3, r1, #3
 800b474:	4651      	mov	r1, sl
 800b476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b47a:	4651      	mov	r1, sl
 800b47c:	00ca      	lsls	r2, r1, #3
 800b47e:	4610      	mov	r0, r2
 800b480:	4619      	mov	r1, r3
 800b482:	4603      	mov	r3, r0
 800b484:	4642      	mov	r2, r8
 800b486:	189b      	adds	r3, r3, r2
 800b488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b48c:	464b      	mov	r3, r9
 800b48e:	460a      	mov	r2, r1
 800b490:	eb42 0303 	adc.w	r3, r2, r3
 800b494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b4a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	18db      	adds	r3, r3, r3
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	eb42 0303 	adc.w	r3, r2, r3
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b4c2:	f7f5 fd6f 	bl	8000fa4 <__aeabi_uldivmod>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <UART_SetConfig+0x2d4>)
 800b4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b4d0:	095b      	lsrs	r3, r3, #5
 800b4d2:	2164      	movs	r1, #100	; 0x64
 800b4d4:	fb01 f303 	mul.w	r3, r1, r3
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	3332      	adds	r3, #50	; 0x32
 800b4de:	4a08      	ldr	r2, [pc, #32]	; (800b500 <UART_SetConfig+0x2d4>)
 800b4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e4:	095b      	lsrs	r3, r3, #5
 800b4e6:	f003 0207 	and.w	r2, r3, #7
 800b4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4422      	add	r2, r4
 800b4f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4f4:	e105      	b.n	800b702 <UART_SetConfig+0x4d6>
 800b4f6:	bf00      	nop
 800b4f8:	40011000 	.word	0x40011000
 800b4fc:	40011400 	.word	0x40011400
 800b500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b508:	2200      	movs	r2, #0
 800b50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b50e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b516:	4642      	mov	r2, r8
 800b518:	464b      	mov	r3, r9
 800b51a:	1891      	adds	r1, r2, r2
 800b51c:	6239      	str	r1, [r7, #32]
 800b51e:	415b      	adcs	r3, r3
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
 800b522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b526:	4641      	mov	r1, r8
 800b528:	1854      	adds	r4, r2, r1
 800b52a:	4649      	mov	r1, r9
 800b52c:	eb43 0501 	adc.w	r5, r3, r1
 800b530:	f04f 0200 	mov.w	r2, #0
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	00eb      	lsls	r3, r5, #3
 800b53a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b53e:	00e2      	lsls	r2, r4, #3
 800b540:	4614      	mov	r4, r2
 800b542:	461d      	mov	r5, r3
 800b544:	4643      	mov	r3, r8
 800b546:	18e3      	adds	r3, r4, r3
 800b548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b54c:	464b      	mov	r3, r9
 800b54e:	eb45 0303 	adc.w	r3, r5, r3
 800b552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	f04f 0300 	mov.w	r3, #0
 800b56e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b572:	4629      	mov	r1, r5
 800b574:	008b      	lsls	r3, r1, #2
 800b576:	4621      	mov	r1, r4
 800b578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b57c:	4621      	mov	r1, r4
 800b57e:	008a      	lsls	r2, r1, #2
 800b580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b584:	f7f5 fd0e 	bl	8000fa4 <__aeabi_uldivmod>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4b60      	ldr	r3, [pc, #384]	; (800b710 <UART_SetConfig+0x4e4>)
 800b58e:	fba3 2302 	umull	r2, r3, r3, r2
 800b592:	095b      	lsrs	r3, r3, #5
 800b594:	011c      	lsls	r4, r3, #4
 800b596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	1891      	adds	r1, r2, r2
 800b5ae:	61b9      	str	r1, [r7, #24]
 800b5b0:	415b      	adcs	r3, r3
 800b5b2:	61fb      	str	r3, [r7, #28]
 800b5b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5b8:	4641      	mov	r1, r8
 800b5ba:	1851      	adds	r1, r2, r1
 800b5bc:	6139      	str	r1, [r7, #16]
 800b5be:	4649      	mov	r1, r9
 800b5c0:	414b      	adcs	r3, r1
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5d0:	4659      	mov	r1, fp
 800b5d2:	00cb      	lsls	r3, r1, #3
 800b5d4:	4651      	mov	r1, sl
 800b5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5da:	4651      	mov	r1, sl
 800b5dc:	00ca      	lsls	r2, r1, #3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5ec:	464b      	mov	r3, r9
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	eb42 0303 	adc.w	r3, r2, r3
 800b5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	67bb      	str	r3, [r7, #120]	; 0x78
 800b602:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	f04f 0300 	mov.w	r3, #0
 800b60c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b610:	4649      	mov	r1, r9
 800b612:	008b      	lsls	r3, r1, #2
 800b614:	4641      	mov	r1, r8
 800b616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b61a:	4641      	mov	r1, r8
 800b61c:	008a      	lsls	r2, r1, #2
 800b61e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b622:	f7f5 fcbf 	bl	8000fa4 <__aeabi_uldivmod>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4b39      	ldr	r3, [pc, #228]	; (800b710 <UART_SetConfig+0x4e4>)
 800b62c:	fba3 1302 	umull	r1, r3, r3, r2
 800b630:	095b      	lsrs	r3, r3, #5
 800b632:	2164      	movs	r1, #100	; 0x64
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	011b      	lsls	r3, r3, #4
 800b63c:	3332      	adds	r3, #50	; 0x32
 800b63e:	4a34      	ldr	r2, [pc, #208]	; (800b710 <UART_SetConfig+0x4e4>)
 800b640:	fba2 2303 	umull	r2, r3, r2, r3
 800b644:	095b      	lsrs	r3, r3, #5
 800b646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b64a:	441c      	add	r4, r3
 800b64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b650:	2200      	movs	r2, #0
 800b652:	673b      	str	r3, [r7, #112]	; 0x70
 800b654:	677a      	str	r2, [r7, #116]	; 0x74
 800b656:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b65a:	4642      	mov	r2, r8
 800b65c:	464b      	mov	r3, r9
 800b65e:	1891      	adds	r1, r2, r2
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	415b      	adcs	r3, r3
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b66a:	4641      	mov	r1, r8
 800b66c:	1851      	adds	r1, r2, r1
 800b66e:	6039      	str	r1, [r7, #0]
 800b670:	4649      	mov	r1, r9
 800b672:	414b      	adcs	r3, r1
 800b674:	607b      	str	r3, [r7, #4]
 800b676:	f04f 0200 	mov.w	r2, #0
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b682:	4659      	mov	r1, fp
 800b684:	00cb      	lsls	r3, r1, #3
 800b686:	4651      	mov	r1, sl
 800b688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b68c:	4651      	mov	r1, sl
 800b68e:	00ca      	lsls	r2, r1, #3
 800b690:	4610      	mov	r0, r2
 800b692:	4619      	mov	r1, r3
 800b694:	4603      	mov	r3, r0
 800b696:	4642      	mov	r2, r8
 800b698:	189b      	adds	r3, r3, r2
 800b69a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b69c:	464b      	mov	r3, r9
 800b69e:	460a      	mov	r2, r1
 800b6a0:	eb42 0303 	adc.w	r3, r2, r3
 800b6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	663b      	str	r3, [r7, #96]	; 0x60
 800b6b0:	667a      	str	r2, [r7, #100]	; 0x64
 800b6b2:	f04f 0200 	mov.w	r2, #0
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b6be:	4649      	mov	r1, r9
 800b6c0:	008b      	lsls	r3, r1, #2
 800b6c2:	4641      	mov	r1, r8
 800b6c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6c8:	4641      	mov	r1, r8
 800b6ca:	008a      	lsls	r2, r1, #2
 800b6cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6d0:	f7f5 fc68 	bl	8000fa4 <__aeabi_uldivmod>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4b0d      	ldr	r3, [pc, #52]	; (800b710 <UART_SetConfig+0x4e4>)
 800b6da:	fba3 1302 	umull	r1, r3, r3, r2
 800b6de:	095b      	lsrs	r3, r3, #5
 800b6e0:	2164      	movs	r1, #100	; 0x64
 800b6e2:	fb01 f303 	mul.w	r3, r1, r3
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	011b      	lsls	r3, r3, #4
 800b6ea:	3332      	adds	r3, #50	; 0x32
 800b6ec:	4a08      	ldr	r2, [pc, #32]	; (800b710 <UART_SetConfig+0x4e4>)
 800b6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f2:	095b      	lsrs	r3, r3, #5
 800b6f4:	f003 020f 	and.w	r2, r3, #15
 800b6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4422      	add	r2, r4
 800b700:	609a      	str	r2, [r3, #8]
}
 800b702:	bf00      	nop
 800b704:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b708:	46bd      	mov	sp, r7
 800b70a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b70e:	bf00      	nop
 800b710:	51eb851f 	.word	0x51eb851f

0800b714 <__errno>:
 800b714:	4b01      	ldr	r3, [pc, #4]	; (800b71c <__errno+0x8>)
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	20000014 	.word	0x20000014

0800b720 <__libc_init_array>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4d0d      	ldr	r5, [pc, #52]	; (800b758 <__libc_init_array+0x38>)
 800b724:	4c0d      	ldr	r4, [pc, #52]	; (800b75c <__libc_init_array+0x3c>)
 800b726:	1b64      	subs	r4, r4, r5
 800b728:	10a4      	asrs	r4, r4, #2
 800b72a:	2600      	movs	r6, #0
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	d109      	bne.n	800b744 <__libc_init_array+0x24>
 800b730:	4d0b      	ldr	r5, [pc, #44]	; (800b760 <__libc_init_array+0x40>)
 800b732:	4c0c      	ldr	r4, [pc, #48]	; (800b764 <__libc_init_array+0x44>)
 800b734:	f006 ff9a 	bl	801266c <_init>
 800b738:	1b64      	subs	r4, r4, r5
 800b73a:	10a4      	asrs	r4, r4, #2
 800b73c:	2600      	movs	r6, #0
 800b73e:	42a6      	cmp	r6, r4
 800b740:	d105      	bne.n	800b74e <__libc_init_array+0x2e>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f855 3b04 	ldr.w	r3, [r5], #4
 800b748:	4798      	blx	r3
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7ee      	b.n	800b72c <__libc_init_array+0xc>
 800b74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b752:	4798      	blx	r3
 800b754:	3601      	adds	r6, #1
 800b756:	e7f2      	b.n	800b73e <__libc_init_array+0x1e>
 800b758:	08012ca0 	.word	0x08012ca0
 800b75c:	08012ca0 	.word	0x08012ca0
 800b760:	08012ca0 	.word	0x08012ca0
 800b764:	08012ca4 	.word	0x08012ca4

0800b768 <memset>:
 800b768:	4402      	add	r2, r0
 800b76a:	4603      	mov	r3, r0
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d100      	bne.n	800b772 <memset+0xa>
 800b770:	4770      	bx	lr
 800b772:	f803 1b01 	strb.w	r1, [r3], #1
 800b776:	e7f9      	b.n	800b76c <memset+0x4>

0800b778 <__cvt>:
 800b778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	ec55 4b10 	vmov	r4, r5, d0
 800b780:	2d00      	cmp	r5, #0
 800b782:	460e      	mov	r6, r1
 800b784:	4619      	mov	r1, r3
 800b786:	462b      	mov	r3, r5
 800b788:	bfbb      	ittet	lt
 800b78a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b78e:	461d      	movlt	r5, r3
 800b790:	2300      	movge	r3, #0
 800b792:	232d      	movlt	r3, #45	; 0x2d
 800b794:	700b      	strb	r3, [r1, #0]
 800b796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b798:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b79c:	4691      	mov	r9, r2
 800b79e:	f023 0820 	bic.w	r8, r3, #32
 800b7a2:	bfbc      	itt	lt
 800b7a4:	4622      	movlt	r2, r4
 800b7a6:	4614      	movlt	r4, r2
 800b7a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7ac:	d005      	beq.n	800b7ba <__cvt+0x42>
 800b7ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7b2:	d100      	bne.n	800b7b6 <__cvt+0x3e>
 800b7b4:	3601      	adds	r6, #1
 800b7b6:	2102      	movs	r1, #2
 800b7b8:	e000      	b.n	800b7bc <__cvt+0x44>
 800b7ba:	2103      	movs	r1, #3
 800b7bc:	ab03      	add	r3, sp, #12
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	ab02      	add	r3, sp, #8
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	ec45 4b10 	vmov	d0, r4, r5
 800b7c8:	4653      	mov	r3, sl
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	f001 fe60 	bl	800d490 <_dtoa_r>
 800b7d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	d102      	bne.n	800b7de <__cvt+0x66>
 800b7d8:	f019 0f01 	tst.w	r9, #1
 800b7dc:	d022      	beq.n	800b824 <__cvt+0xac>
 800b7de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7e2:	eb07 0906 	add.w	r9, r7, r6
 800b7e6:	d110      	bne.n	800b80a <__cvt+0x92>
 800b7e8:	783b      	ldrb	r3, [r7, #0]
 800b7ea:	2b30      	cmp	r3, #48	; 0x30
 800b7ec:	d10a      	bne.n	800b804 <__cvt+0x8c>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f5 f997 	bl	8000b28 <__aeabi_dcmpeq>
 800b7fa:	b918      	cbnz	r0, 800b804 <__cvt+0x8c>
 800b7fc:	f1c6 0601 	rsb	r6, r6, #1
 800b800:	f8ca 6000 	str.w	r6, [sl]
 800b804:	f8da 3000 	ldr.w	r3, [sl]
 800b808:	4499      	add	r9, r3
 800b80a:	2200      	movs	r2, #0
 800b80c:	2300      	movs	r3, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f989 	bl	8000b28 <__aeabi_dcmpeq>
 800b816:	b108      	cbz	r0, 800b81c <__cvt+0xa4>
 800b818:	f8cd 900c 	str.w	r9, [sp, #12]
 800b81c:	2230      	movs	r2, #48	; 0x30
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	454b      	cmp	r3, r9
 800b822:	d307      	bcc.n	800b834 <__cvt+0xbc>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b828:	1bdb      	subs	r3, r3, r7
 800b82a:	4638      	mov	r0, r7
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	b004      	add	sp, #16
 800b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b834:	1c59      	adds	r1, r3, #1
 800b836:	9103      	str	r1, [sp, #12]
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	e7f0      	b.n	800b81e <__cvt+0xa6>

0800b83c <__exponent>:
 800b83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83e:	4603      	mov	r3, r0
 800b840:	2900      	cmp	r1, #0
 800b842:	bfb8      	it	lt
 800b844:	4249      	neglt	r1, r1
 800b846:	f803 2b02 	strb.w	r2, [r3], #2
 800b84a:	bfb4      	ite	lt
 800b84c:	222d      	movlt	r2, #45	; 0x2d
 800b84e:	222b      	movge	r2, #43	; 0x2b
 800b850:	2909      	cmp	r1, #9
 800b852:	7042      	strb	r2, [r0, #1]
 800b854:	dd2a      	ble.n	800b8ac <__exponent+0x70>
 800b856:	f10d 0407 	add.w	r4, sp, #7
 800b85a:	46a4      	mov	ip, r4
 800b85c:	270a      	movs	r7, #10
 800b85e:	46a6      	mov	lr, r4
 800b860:	460a      	mov	r2, r1
 800b862:	fb91 f6f7 	sdiv	r6, r1, r7
 800b866:	fb07 1516 	mls	r5, r7, r6, r1
 800b86a:	3530      	adds	r5, #48	; 0x30
 800b86c:	2a63      	cmp	r2, #99	; 0x63
 800b86e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b872:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b876:	4631      	mov	r1, r6
 800b878:	dcf1      	bgt.n	800b85e <__exponent+0x22>
 800b87a:	3130      	adds	r1, #48	; 0x30
 800b87c:	f1ae 0502 	sub.w	r5, lr, #2
 800b880:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b884:	1c44      	adds	r4, r0, #1
 800b886:	4629      	mov	r1, r5
 800b888:	4561      	cmp	r1, ip
 800b88a:	d30a      	bcc.n	800b8a2 <__exponent+0x66>
 800b88c:	f10d 0209 	add.w	r2, sp, #9
 800b890:	eba2 020e 	sub.w	r2, r2, lr
 800b894:	4565      	cmp	r5, ip
 800b896:	bf88      	it	hi
 800b898:	2200      	movhi	r2, #0
 800b89a:	4413      	add	r3, r2
 800b89c:	1a18      	subs	r0, r3, r0
 800b89e:	b003      	add	sp, #12
 800b8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8aa:	e7ed      	b.n	800b888 <__exponent+0x4c>
 800b8ac:	2330      	movs	r3, #48	; 0x30
 800b8ae:	3130      	adds	r1, #48	; 0x30
 800b8b0:	7083      	strb	r3, [r0, #2]
 800b8b2:	70c1      	strb	r1, [r0, #3]
 800b8b4:	1d03      	adds	r3, r0, #4
 800b8b6:	e7f1      	b.n	800b89c <__exponent+0x60>

0800b8b8 <_printf_float>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	ed2d 8b02 	vpush	{d8}
 800b8c0:	b08d      	sub	sp, #52	; 0x34
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8c8:	4616      	mov	r6, r2
 800b8ca:	461f      	mov	r7, r3
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	f002 ff3d 	bl	800e74c <_localeconv_r>
 800b8d2:	f8d0 a000 	ldr.w	sl, [r0]
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	f7f4 fca4 	bl	8000224 <strlen>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8ec:	3307      	adds	r3, #7
 800b8ee:	f023 0307 	bic.w	r3, r3, #7
 800b8f2:	f103 0208 	add.w	r2, r3, #8
 800b8f6:	f8c8 2000 	str.w	r2, [r8]
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b902:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b90a:	9307      	str	r3, [sp, #28]
 800b90c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b910:	ee08 0a10 	vmov	s16, r0
 800b914:	4b9f      	ldr	r3, [pc, #636]	; (800bb94 <_printf_float+0x2dc>)
 800b916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91a:	f04f 32ff 	mov.w	r2, #4294967295
 800b91e:	f7f5 f935 	bl	8000b8c <__aeabi_dcmpun>
 800b922:	bb88      	cbnz	r0, 800b988 <_printf_float+0xd0>
 800b924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b928:	4b9a      	ldr	r3, [pc, #616]	; (800bb94 <_printf_float+0x2dc>)
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295
 800b92e:	f7f5 f90f 	bl	8000b50 <__aeabi_dcmple>
 800b932:	bb48      	cbnz	r0, 800b988 <_printf_float+0xd0>
 800b934:	2200      	movs	r2, #0
 800b936:	2300      	movs	r3, #0
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	f7f5 f8fe 	bl	8000b3c <__aeabi_dcmplt>
 800b940:	b110      	cbz	r0, 800b948 <_printf_float+0x90>
 800b942:	232d      	movs	r3, #45	; 0x2d
 800b944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b948:	4b93      	ldr	r3, [pc, #588]	; (800bb98 <_printf_float+0x2e0>)
 800b94a:	4894      	ldr	r0, [pc, #592]	; (800bb9c <_printf_float+0x2e4>)
 800b94c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b950:	bf94      	ite	ls
 800b952:	4698      	movls	r8, r3
 800b954:	4680      	movhi	r8, r0
 800b956:	2303      	movs	r3, #3
 800b958:	6123      	str	r3, [r4, #16]
 800b95a:	9b05      	ldr	r3, [sp, #20]
 800b95c:	f023 0204 	bic.w	r2, r3, #4
 800b960:	6022      	str	r2, [r4, #0]
 800b962:	f04f 0900 	mov.w	r9, #0
 800b966:	9700      	str	r7, [sp, #0]
 800b968:	4633      	mov	r3, r6
 800b96a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f9d8 	bl	800bd24 <_printf_common>
 800b974:	3001      	adds	r0, #1
 800b976:	f040 8090 	bne.w	800ba9a <_printf_float+0x1e2>
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	b00d      	add	sp, #52	; 0x34
 800b980:	ecbd 8b02 	vpop	{d8}
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	4642      	mov	r2, r8
 800b98a:	464b      	mov	r3, r9
 800b98c:	4640      	mov	r0, r8
 800b98e:	4649      	mov	r1, r9
 800b990:	f7f5 f8fc 	bl	8000b8c <__aeabi_dcmpun>
 800b994:	b140      	cbz	r0, 800b9a8 <_printf_float+0xf0>
 800b996:	464b      	mov	r3, r9
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bfbc      	itt	lt
 800b99c:	232d      	movlt	r3, #45	; 0x2d
 800b99e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9a2:	487f      	ldr	r0, [pc, #508]	; (800bba0 <_printf_float+0x2e8>)
 800b9a4:	4b7f      	ldr	r3, [pc, #508]	; (800bba4 <_printf_float+0x2ec>)
 800b9a6:	e7d1      	b.n	800b94c <_printf_float+0x94>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9ae:	9206      	str	r2, [sp, #24]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	d13f      	bne.n	800ba34 <_printf_float+0x17c>
 800b9b4:	2306      	movs	r3, #6
 800b9b6:	6063      	str	r3, [r4, #4]
 800b9b8:	9b05      	ldr	r3, [sp, #20]
 800b9ba:	6861      	ldr	r1, [r4, #4]
 800b9bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9303      	str	r3, [sp, #12]
 800b9c4:	ab0a      	add	r3, sp, #40	; 0x28
 800b9c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9ca:	ab09      	add	r3, sp, #36	; 0x24
 800b9cc:	ec49 8b10 	vmov	d0, r8, r9
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	6022      	str	r2, [r4, #0]
 800b9d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f7ff fecd 	bl	800b778 <__cvt>
 800b9de:	9b06      	ldr	r3, [sp, #24]
 800b9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9e2:	2b47      	cmp	r3, #71	; 0x47
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	d108      	bne.n	800b9fa <_printf_float+0x142>
 800b9e8:	1cc8      	adds	r0, r1, #3
 800b9ea:	db02      	blt.n	800b9f2 <_printf_float+0x13a>
 800b9ec:	6863      	ldr	r3, [r4, #4]
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	dd41      	ble.n	800ba76 <_printf_float+0x1be>
 800b9f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9f6:	fa5f fb8b 	uxtb.w	fp, fp
 800b9fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9fe:	d820      	bhi.n	800ba42 <_printf_float+0x18a>
 800ba00:	3901      	subs	r1, #1
 800ba02:	465a      	mov	r2, fp
 800ba04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba08:	9109      	str	r1, [sp, #36]	; 0x24
 800ba0a:	f7ff ff17 	bl	800b83c <__exponent>
 800ba0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba10:	1813      	adds	r3, r2, r0
 800ba12:	2a01      	cmp	r2, #1
 800ba14:	4681      	mov	r9, r0
 800ba16:	6123      	str	r3, [r4, #16]
 800ba18:	dc02      	bgt.n	800ba20 <_printf_float+0x168>
 800ba1a:	6822      	ldr	r2, [r4, #0]
 800ba1c:	07d2      	lsls	r2, r2, #31
 800ba1e:	d501      	bpl.n	800ba24 <_printf_float+0x16c>
 800ba20:	3301      	adds	r3, #1
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d09c      	beq.n	800b966 <_printf_float+0xae>
 800ba2c:	232d      	movs	r3, #45	; 0x2d
 800ba2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba32:	e798      	b.n	800b966 <_printf_float+0xae>
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	2a47      	cmp	r2, #71	; 0x47
 800ba38:	d1be      	bne.n	800b9b8 <_printf_float+0x100>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1bc      	bne.n	800b9b8 <_printf_float+0x100>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e7b9      	b.n	800b9b6 <_printf_float+0xfe>
 800ba42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba46:	d118      	bne.n	800ba7a <_printf_float+0x1c2>
 800ba48:	2900      	cmp	r1, #0
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	dd0b      	ble.n	800ba66 <_printf_float+0x1ae>
 800ba4e:	6121      	str	r1, [r4, #16]
 800ba50:	b913      	cbnz	r3, 800ba58 <_printf_float+0x1a0>
 800ba52:	6822      	ldr	r2, [r4, #0]
 800ba54:	07d0      	lsls	r0, r2, #31
 800ba56:	d502      	bpl.n	800ba5e <_printf_float+0x1a6>
 800ba58:	3301      	adds	r3, #1
 800ba5a:	440b      	add	r3, r1
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba60:	f04f 0900 	mov.w	r9, #0
 800ba64:	e7de      	b.n	800ba24 <_printf_float+0x16c>
 800ba66:	b913      	cbnz	r3, 800ba6e <_printf_float+0x1b6>
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	07d2      	lsls	r2, r2, #31
 800ba6c:	d501      	bpl.n	800ba72 <_printf_float+0x1ba>
 800ba6e:	3302      	adds	r3, #2
 800ba70:	e7f4      	b.n	800ba5c <_printf_float+0x1a4>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e7f2      	b.n	800ba5c <_printf_float+0x1a4>
 800ba76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	db05      	blt.n	800ba8c <_printf_float+0x1d4>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	6121      	str	r1, [r4, #16]
 800ba84:	07d8      	lsls	r0, r3, #31
 800ba86:	d5ea      	bpl.n	800ba5e <_printf_float+0x1a6>
 800ba88:	1c4b      	adds	r3, r1, #1
 800ba8a:	e7e7      	b.n	800ba5c <_printf_float+0x1a4>
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	bfd4      	ite	le
 800ba90:	f1c1 0202 	rsble	r2, r1, #2
 800ba94:	2201      	movgt	r2, #1
 800ba96:	4413      	add	r3, r2
 800ba98:	e7e0      	b.n	800ba5c <_printf_float+0x1a4>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	055a      	lsls	r2, r3, #21
 800ba9e:	d407      	bmi.n	800bab0 <_printf_float+0x1f8>
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	4642      	mov	r2, r8
 800baa4:	4631      	mov	r1, r6
 800baa6:	4628      	mov	r0, r5
 800baa8:	47b8      	blx	r7
 800baaa:	3001      	adds	r0, #1
 800baac:	d12c      	bne.n	800bb08 <_printf_float+0x250>
 800baae:	e764      	b.n	800b97a <_printf_float+0xc2>
 800bab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bab4:	f240 80e0 	bls.w	800bc78 <_printf_float+0x3c0>
 800bab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800babc:	2200      	movs	r2, #0
 800babe:	2300      	movs	r3, #0
 800bac0:	f7f5 f832 	bl	8000b28 <__aeabi_dcmpeq>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d034      	beq.n	800bb32 <_printf_float+0x27a>
 800bac8:	4a37      	ldr	r2, [pc, #220]	; (800bba8 <_printf_float+0x2f0>)
 800baca:	2301      	movs	r3, #1
 800bacc:	4631      	mov	r1, r6
 800bace:	4628      	mov	r0, r5
 800bad0:	47b8      	blx	r7
 800bad2:	3001      	adds	r0, #1
 800bad4:	f43f af51 	beq.w	800b97a <_printf_float+0xc2>
 800bad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800badc:	429a      	cmp	r2, r3
 800bade:	db02      	blt.n	800bae6 <_printf_float+0x22e>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	07d8      	lsls	r0, r3, #31
 800bae4:	d510      	bpl.n	800bb08 <_printf_float+0x250>
 800bae6:	ee18 3a10 	vmov	r3, s16
 800baea:	4652      	mov	r2, sl
 800baec:	4631      	mov	r1, r6
 800baee:	4628      	mov	r0, r5
 800baf0:	47b8      	blx	r7
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f af41 	beq.w	800b97a <_printf_float+0xc2>
 800baf8:	f04f 0800 	mov.w	r8, #0
 800bafc:	f104 091a 	add.w	r9, r4, #26
 800bb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb02:	3b01      	subs	r3, #1
 800bb04:	4543      	cmp	r3, r8
 800bb06:	dc09      	bgt.n	800bb1c <_printf_float+0x264>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	079b      	lsls	r3, r3, #30
 800bb0c:	f100 8105 	bmi.w	800bd1a <_printf_float+0x462>
 800bb10:	68e0      	ldr	r0, [r4, #12]
 800bb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb14:	4298      	cmp	r0, r3
 800bb16:	bfb8      	it	lt
 800bb18:	4618      	movlt	r0, r3
 800bb1a:	e730      	b.n	800b97e <_printf_float+0xc6>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	464a      	mov	r2, r9
 800bb20:	4631      	mov	r1, r6
 800bb22:	4628      	mov	r0, r5
 800bb24:	47b8      	blx	r7
 800bb26:	3001      	adds	r0, #1
 800bb28:	f43f af27 	beq.w	800b97a <_printf_float+0xc2>
 800bb2c:	f108 0801 	add.w	r8, r8, #1
 800bb30:	e7e6      	b.n	800bb00 <_printf_float+0x248>
 800bb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dc39      	bgt.n	800bbac <_printf_float+0x2f4>
 800bb38:	4a1b      	ldr	r2, [pc, #108]	; (800bba8 <_printf_float+0x2f0>)
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4628      	mov	r0, r5
 800bb40:	47b8      	blx	r7
 800bb42:	3001      	adds	r0, #1
 800bb44:	f43f af19 	beq.w	800b97a <_printf_float+0xc2>
 800bb48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	d102      	bne.n	800bb56 <_printf_float+0x29e>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d5d8      	bpl.n	800bb08 <_printf_float+0x250>
 800bb56:	ee18 3a10 	vmov	r3, s16
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	47b8      	blx	r7
 800bb62:	3001      	adds	r0, #1
 800bb64:	f43f af09 	beq.w	800b97a <_printf_float+0xc2>
 800bb68:	f04f 0900 	mov.w	r9, #0
 800bb6c:	f104 0a1a 	add.w	sl, r4, #26
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	425b      	negs	r3, r3
 800bb74:	454b      	cmp	r3, r9
 800bb76:	dc01      	bgt.n	800bb7c <_printf_float+0x2c4>
 800bb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7a:	e792      	b.n	800baa2 <_printf_float+0x1ea>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4652      	mov	r2, sl
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f aef7 	beq.w	800b97a <_printf_float+0xc2>
 800bb8c:	f109 0901 	add.w	r9, r9, #1
 800bb90:	e7ee      	b.n	800bb70 <_printf_float+0x2b8>
 800bb92:	bf00      	nop
 800bb94:	7fefffff 	.word	0x7fefffff
 800bb98:	0801273c 	.word	0x0801273c
 800bb9c:	08012740 	.word	0x08012740
 800bba0:	08012748 	.word	0x08012748
 800bba4:	08012744 	.word	0x08012744
 800bba8:	08012b41 	.word	0x08012b41
 800bbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	bfa8      	it	ge
 800bbb4:	461a      	movge	r2, r3
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	4691      	mov	r9, r2
 800bbba:	dc37      	bgt.n	800bc2c <_printf_float+0x374>
 800bbbc:	f04f 0b00 	mov.w	fp, #0
 800bbc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbc4:	f104 021a 	add.w	r2, r4, #26
 800bbc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbca:	9305      	str	r3, [sp, #20]
 800bbcc:	eba3 0309 	sub.w	r3, r3, r9
 800bbd0:	455b      	cmp	r3, fp
 800bbd2:	dc33      	bgt.n	800bc3c <_printf_float+0x384>
 800bbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	db3b      	blt.n	800bc54 <_printf_float+0x39c>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	07da      	lsls	r2, r3, #31
 800bbe0:	d438      	bmi.n	800bc54 <_printf_float+0x39c>
 800bbe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe4:	9a05      	ldr	r2, [sp, #20]
 800bbe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbe8:	1a9a      	subs	r2, r3, r2
 800bbea:	eba3 0901 	sub.w	r9, r3, r1
 800bbee:	4591      	cmp	r9, r2
 800bbf0:	bfa8      	it	ge
 800bbf2:	4691      	movge	r9, r2
 800bbf4:	f1b9 0f00 	cmp.w	r9, #0
 800bbf8:	dc35      	bgt.n	800bc66 <_printf_float+0x3ae>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc02:	f104 0a1a 	add.w	sl, r4, #26
 800bc06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc0a:	1a9b      	subs	r3, r3, r2
 800bc0c:	eba3 0309 	sub.w	r3, r3, r9
 800bc10:	4543      	cmp	r3, r8
 800bc12:	f77f af79 	ble.w	800bb08 <_printf_float+0x250>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4652      	mov	r2, sl
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f aeaa 	beq.w	800b97a <_printf_float+0xc2>
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	e7ec      	b.n	800bc06 <_printf_float+0x34e>
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4642      	mov	r2, r8
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	d1c0      	bne.n	800bbbc <_printf_float+0x304>
 800bc3a:	e69e      	b.n	800b97a <_printf_float+0xc2>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	9205      	str	r2, [sp, #20]
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	f43f ae97 	beq.w	800b97a <_printf_float+0xc2>
 800bc4c:	9a05      	ldr	r2, [sp, #20]
 800bc4e:	f10b 0b01 	add.w	fp, fp, #1
 800bc52:	e7b9      	b.n	800bbc8 <_printf_float+0x310>
 800bc54:	ee18 3a10 	vmov	r3, s16
 800bc58:	4652      	mov	r2, sl
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	d1be      	bne.n	800bbe2 <_printf_float+0x32a>
 800bc64:	e689      	b.n	800b97a <_printf_float+0xc2>
 800bc66:	9a05      	ldr	r2, [sp, #20]
 800bc68:	464b      	mov	r3, r9
 800bc6a:	4442      	add	r2, r8
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	d1c1      	bne.n	800bbfa <_printf_float+0x342>
 800bc76:	e680      	b.n	800b97a <_printf_float+0xc2>
 800bc78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7a:	2a01      	cmp	r2, #1
 800bc7c:	dc01      	bgt.n	800bc82 <_printf_float+0x3ca>
 800bc7e:	07db      	lsls	r3, r3, #31
 800bc80:	d538      	bpl.n	800bcf4 <_printf_float+0x43c>
 800bc82:	2301      	movs	r3, #1
 800bc84:	4642      	mov	r2, r8
 800bc86:	4631      	mov	r1, r6
 800bc88:	4628      	mov	r0, r5
 800bc8a:	47b8      	blx	r7
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	f43f ae74 	beq.w	800b97a <_printf_float+0xc2>
 800bc92:	ee18 3a10 	vmov	r3, s16
 800bc96:	4652      	mov	r2, sl
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f ae6b 	beq.w	800b97a <_printf_float+0xc2>
 800bca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f7f4 ff3c 	bl	8000b28 <__aeabi_dcmpeq>
 800bcb0:	b9d8      	cbnz	r0, 800bcea <_printf_float+0x432>
 800bcb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb4:	f108 0201 	add.w	r2, r8, #1
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d10e      	bne.n	800bce2 <_printf_float+0x42a>
 800bcc4:	e659      	b.n	800b97a <_printf_float+0xc2>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4652      	mov	r2, sl
 800bcca:	4631      	mov	r1, r6
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f43f ae52 	beq.w	800b97a <_printf_float+0xc2>
 800bcd6:	f108 0801 	add.w	r8, r8, #1
 800bcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	4543      	cmp	r3, r8
 800bce0:	dcf1      	bgt.n	800bcc6 <_printf_float+0x40e>
 800bce2:	464b      	mov	r3, r9
 800bce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bce8:	e6dc      	b.n	800baa4 <_printf_float+0x1ec>
 800bcea:	f04f 0800 	mov.w	r8, #0
 800bcee:	f104 0a1a 	add.w	sl, r4, #26
 800bcf2:	e7f2      	b.n	800bcda <_printf_float+0x422>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4642      	mov	r2, r8
 800bcf8:	e7df      	b.n	800bcba <_printf_float+0x402>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	464a      	mov	r2, r9
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	f43f ae38 	beq.w	800b97a <_printf_float+0xc2>
 800bd0a:	f108 0801 	add.w	r8, r8, #1
 800bd0e:	68e3      	ldr	r3, [r4, #12]
 800bd10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd12:	1a5b      	subs	r3, r3, r1
 800bd14:	4543      	cmp	r3, r8
 800bd16:	dcf0      	bgt.n	800bcfa <_printf_float+0x442>
 800bd18:	e6fa      	b.n	800bb10 <_printf_float+0x258>
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	f104 0919 	add.w	r9, r4, #25
 800bd22:	e7f4      	b.n	800bd0e <_printf_float+0x456>

0800bd24 <_printf_common>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	4616      	mov	r6, r2
 800bd2a:	4699      	mov	r9, r3
 800bd2c:	688a      	ldr	r2, [r1, #8]
 800bd2e:	690b      	ldr	r3, [r1, #16]
 800bd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfb8      	it	lt
 800bd38:	4613      	movlt	r3, r2
 800bd3a:	6033      	str	r3, [r6, #0]
 800bd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd40:	4607      	mov	r7, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b10a      	cbz	r2, 800bd4a <_printf_common+0x26>
 800bd46:	3301      	adds	r3, #1
 800bd48:	6033      	str	r3, [r6, #0]
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	0699      	lsls	r1, r3, #26
 800bd4e:	bf42      	ittt	mi
 800bd50:	6833      	ldrmi	r3, [r6, #0]
 800bd52:	3302      	addmi	r3, #2
 800bd54:	6033      	strmi	r3, [r6, #0]
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	f015 0506 	ands.w	r5, r5, #6
 800bd5c:	d106      	bne.n	800bd6c <_printf_common+0x48>
 800bd5e:	f104 0a19 	add.w	sl, r4, #25
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	6832      	ldr	r2, [r6, #0]
 800bd66:	1a9b      	subs	r3, r3, r2
 800bd68:	42ab      	cmp	r3, r5
 800bd6a:	dc26      	bgt.n	800bdba <_printf_common+0x96>
 800bd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd70:	1e13      	subs	r3, r2, #0
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	bf18      	it	ne
 800bd76:	2301      	movne	r3, #1
 800bd78:	0692      	lsls	r2, r2, #26
 800bd7a:	d42b      	bmi.n	800bdd4 <_printf_common+0xb0>
 800bd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd80:	4649      	mov	r1, r9
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d01e      	beq.n	800bdc8 <_printf_common+0xa4>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	68e5      	ldr	r5, [r4, #12]
 800bd8e:	6832      	ldr	r2, [r6, #0]
 800bd90:	f003 0306 	and.w	r3, r3, #6
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	bf08      	it	eq
 800bd98:	1aad      	subeq	r5, r5, r2
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	bf0c      	ite	eq
 800bda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda4:	2500      	movne	r5, #0
 800bda6:	4293      	cmp	r3, r2
 800bda8:	bfc4      	itt	gt
 800bdaa:	1a9b      	subgt	r3, r3, r2
 800bdac:	18ed      	addgt	r5, r5, r3
 800bdae:	2600      	movs	r6, #0
 800bdb0:	341a      	adds	r4, #26
 800bdb2:	42b5      	cmp	r5, r6
 800bdb4:	d11a      	bne.n	800bdec <_printf_common+0xc8>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	e008      	b.n	800bdcc <_printf_common+0xa8>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	47c0      	blx	r8
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d103      	bne.n	800bdd0 <_printf_common+0xac>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7c6      	b.n	800bd62 <_printf_common+0x3e>
 800bdd4:	18e1      	adds	r1, r4, r3
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	2030      	movs	r0, #48	; 0x30
 800bdda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdde:	4422      	add	r2, r4
 800bde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bde8:	3302      	adds	r3, #2
 800bdea:	e7c7      	b.n	800bd7c <_printf_common+0x58>
 800bdec:	2301      	movs	r3, #1
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	47c0      	blx	r8
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d0e6      	beq.n	800bdc8 <_printf_common+0xa4>
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7d9      	b.n	800bdb2 <_printf_common+0x8e>
	...

0800be00 <_printf_i>:
 800be00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be04:	7e0f      	ldrb	r7, [r1, #24]
 800be06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be08:	2f78      	cmp	r7, #120	; 0x78
 800be0a:	4691      	mov	r9, r2
 800be0c:	4680      	mov	r8, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	469a      	mov	sl, r3
 800be12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be16:	d807      	bhi.n	800be28 <_printf_i+0x28>
 800be18:	2f62      	cmp	r7, #98	; 0x62
 800be1a:	d80a      	bhi.n	800be32 <_printf_i+0x32>
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	f000 80d8 	beq.w	800bfd2 <_printf_i+0x1d2>
 800be22:	2f58      	cmp	r7, #88	; 0x58
 800be24:	f000 80a3 	beq.w	800bf6e <_printf_i+0x16e>
 800be28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be30:	e03a      	b.n	800bea8 <_printf_i+0xa8>
 800be32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be36:	2b15      	cmp	r3, #21
 800be38:	d8f6      	bhi.n	800be28 <_printf_i+0x28>
 800be3a:	a101      	add	r1, pc, #4	; (adr r1, 800be40 <_printf_i+0x40>)
 800be3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be40:	0800be99 	.word	0x0800be99
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800be29 	.word	0x0800be29
 800be4c:	0800be29 	.word	0x0800be29
 800be50:	0800be29 	.word	0x0800be29
 800be54:	0800be29 	.word	0x0800be29
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800be29 	.word	0x0800be29
 800be60:	0800be29 	.word	0x0800be29
 800be64:	0800be29 	.word	0x0800be29
 800be68:	0800be29 	.word	0x0800be29
 800be6c:	0800bfb9 	.word	0x0800bfb9
 800be70:	0800bedd 	.word	0x0800bedd
 800be74:	0800bf9b 	.word	0x0800bf9b
 800be78:	0800be29 	.word	0x0800be29
 800be7c:	0800be29 	.word	0x0800be29
 800be80:	0800bfdb 	.word	0x0800bfdb
 800be84:	0800be29 	.word	0x0800be29
 800be88:	0800bedd 	.word	0x0800bedd
 800be8c:	0800be29 	.word	0x0800be29
 800be90:	0800be29 	.word	0x0800be29
 800be94:	0800bfa3 	.word	0x0800bfa3
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	1d1a      	adds	r2, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	602a      	str	r2, [r5, #0]
 800bea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bea8:	2301      	movs	r3, #1
 800beaa:	e0a3      	b.n	800bff4 <_printf_i+0x1f4>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	6829      	ldr	r1, [r5, #0]
 800beb0:	0606      	lsls	r6, r0, #24
 800beb2:	f101 0304 	add.w	r3, r1, #4
 800beb6:	d50a      	bpl.n	800bece <_printf_i+0xce>
 800beb8:	680e      	ldr	r6, [r1, #0]
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	da03      	bge.n	800bec8 <_printf_i+0xc8>
 800bec0:	232d      	movs	r3, #45	; 0x2d
 800bec2:	4276      	negs	r6, r6
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec8:	485e      	ldr	r0, [pc, #376]	; (800c044 <_printf_i+0x244>)
 800beca:	230a      	movs	r3, #10
 800becc:	e019      	b.n	800bf02 <_printf_i+0x102>
 800bece:	680e      	ldr	r6, [r1, #0]
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bed6:	bf18      	it	ne
 800bed8:	b236      	sxthne	r6, r6
 800beda:	e7ef      	b.n	800bebc <_printf_i+0xbc>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	6820      	ldr	r0, [r4, #0]
 800bee0:	1d19      	adds	r1, r3, #4
 800bee2:	6029      	str	r1, [r5, #0]
 800bee4:	0601      	lsls	r1, r0, #24
 800bee6:	d501      	bpl.n	800beec <_printf_i+0xec>
 800bee8:	681e      	ldr	r6, [r3, #0]
 800beea:	e002      	b.n	800bef2 <_printf_i+0xf2>
 800beec:	0646      	lsls	r6, r0, #25
 800beee:	d5fb      	bpl.n	800bee8 <_printf_i+0xe8>
 800bef0:	881e      	ldrh	r6, [r3, #0]
 800bef2:	4854      	ldr	r0, [pc, #336]	; (800c044 <_printf_i+0x244>)
 800bef4:	2f6f      	cmp	r7, #111	; 0x6f
 800bef6:	bf0c      	ite	eq
 800bef8:	2308      	moveq	r3, #8
 800befa:	230a      	movne	r3, #10
 800befc:	2100      	movs	r1, #0
 800befe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf02:	6865      	ldr	r5, [r4, #4]
 800bf04:	60a5      	str	r5, [r4, #8]
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	bfa2      	ittt	ge
 800bf0a:	6821      	ldrge	r1, [r4, #0]
 800bf0c:	f021 0104 	bicge.w	r1, r1, #4
 800bf10:	6021      	strge	r1, [r4, #0]
 800bf12:	b90e      	cbnz	r6, 800bf18 <_printf_i+0x118>
 800bf14:	2d00      	cmp	r5, #0
 800bf16:	d04d      	beq.n	800bfb4 <_printf_i+0x1b4>
 800bf18:	4615      	mov	r5, r2
 800bf1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf1e:	fb03 6711 	mls	r7, r3, r1, r6
 800bf22:	5dc7      	ldrb	r7, [r0, r7]
 800bf24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf28:	4637      	mov	r7, r6
 800bf2a:	42bb      	cmp	r3, r7
 800bf2c:	460e      	mov	r6, r1
 800bf2e:	d9f4      	bls.n	800bf1a <_printf_i+0x11a>
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d10b      	bne.n	800bf4c <_printf_i+0x14c>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	07de      	lsls	r6, r3, #31
 800bf38:	d508      	bpl.n	800bf4c <_printf_i+0x14c>
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	6861      	ldr	r1, [r4, #4]
 800bf3e:	4299      	cmp	r1, r3
 800bf40:	bfde      	ittt	le
 800bf42:	2330      	movle	r3, #48	; 0x30
 800bf44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf4c:	1b52      	subs	r2, r2, r5
 800bf4e:	6122      	str	r2, [r4, #16]
 800bf50:	f8cd a000 	str.w	sl, [sp]
 800bf54:	464b      	mov	r3, r9
 800bf56:	aa03      	add	r2, sp, #12
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	f7ff fee2 	bl	800bd24 <_printf_common>
 800bf60:	3001      	adds	r0, #1
 800bf62:	d14c      	bne.n	800bffe <_printf_i+0x1fe>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	b004      	add	sp, #16
 800bf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6e:	4835      	ldr	r0, [pc, #212]	; (800c044 <_printf_i+0x244>)
 800bf70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf74:	6829      	ldr	r1, [r5, #0]
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf7c:	6029      	str	r1, [r5, #0]
 800bf7e:	061d      	lsls	r5, r3, #24
 800bf80:	d514      	bpl.n	800bfac <_printf_i+0x1ac>
 800bf82:	07df      	lsls	r7, r3, #31
 800bf84:	bf44      	itt	mi
 800bf86:	f043 0320 	orrmi.w	r3, r3, #32
 800bf8a:	6023      	strmi	r3, [r4, #0]
 800bf8c:	b91e      	cbnz	r6, 800bf96 <_printf_i+0x196>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f023 0320 	bic.w	r3, r3, #32
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	2310      	movs	r3, #16
 800bf98:	e7b0      	b.n	800befc <_printf_i+0xfc>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	f043 0320 	orr.w	r3, r3, #32
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	2378      	movs	r3, #120	; 0x78
 800bfa4:	4828      	ldr	r0, [pc, #160]	; (800c048 <_printf_i+0x248>)
 800bfa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfaa:	e7e3      	b.n	800bf74 <_printf_i+0x174>
 800bfac:	0659      	lsls	r1, r3, #25
 800bfae:	bf48      	it	mi
 800bfb0:	b2b6      	uxthmi	r6, r6
 800bfb2:	e7e6      	b.n	800bf82 <_printf_i+0x182>
 800bfb4:	4615      	mov	r5, r2
 800bfb6:	e7bb      	b.n	800bf30 <_printf_i+0x130>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	6826      	ldr	r6, [r4, #0]
 800bfbc:	6961      	ldr	r1, [r4, #20]
 800bfbe:	1d18      	adds	r0, r3, #4
 800bfc0:	6028      	str	r0, [r5, #0]
 800bfc2:	0635      	lsls	r5, r6, #24
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	d501      	bpl.n	800bfcc <_printf_i+0x1cc>
 800bfc8:	6019      	str	r1, [r3, #0]
 800bfca:	e002      	b.n	800bfd2 <_printf_i+0x1d2>
 800bfcc:	0670      	lsls	r0, r6, #25
 800bfce:	d5fb      	bpl.n	800bfc8 <_printf_i+0x1c8>
 800bfd0:	8019      	strh	r1, [r3, #0]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	4615      	mov	r5, r2
 800bfd8:	e7ba      	b.n	800bf50 <_printf_i+0x150>
 800bfda:	682b      	ldr	r3, [r5, #0]
 800bfdc:	1d1a      	adds	r2, r3, #4
 800bfde:	602a      	str	r2, [r5, #0]
 800bfe0:	681d      	ldr	r5, [r3, #0]
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f7f4 f92a 	bl	8000240 <memchr>
 800bfec:	b108      	cbz	r0, 800bff2 <_printf_i+0x1f2>
 800bfee:	1b40      	subs	r0, r0, r5
 800bff0:	6060      	str	r0, [r4, #4]
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	2300      	movs	r3, #0
 800bff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bffc:	e7a8      	b.n	800bf50 <_printf_i+0x150>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	462a      	mov	r2, r5
 800c002:	4649      	mov	r1, r9
 800c004:	4640      	mov	r0, r8
 800c006:	47d0      	blx	sl
 800c008:	3001      	adds	r0, #1
 800c00a:	d0ab      	beq.n	800bf64 <_printf_i+0x164>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	079b      	lsls	r3, r3, #30
 800c010:	d413      	bmi.n	800c03a <_printf_i+0x23a>
 800c012:	68e0      	ldr	r0, [r4, #12]
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	4298      	cmp	r0, r3
 800c018:	bfb8      	it	lt
 800c01a:	4618      	movlt	r0, r3
 800c01c:	e7a4      	b.n	800bf68 <_printf_i+0x168>
 800c01e:	2301      	movs	r3, #1
 800c020:	4632      	mov	r2, r6
 800c022:	4649      	mov	r1, r9
 800c024:	4640      	mov	r0, r8
 800c026:	47d0      	blx	sl
 800c028:	3001      	adds	r0, #1
 800c02a:	d09b      	beq.n	800bf64 <_printf_i+0x164>
 800c02c:	3501      	adds	r5, #1
 800c02e:	68e3      	ldr	r3, [r4, #12]
 800c030:	9903      	ldr	r1, [sp, #12]
 800c032:	1a5b      	subs	r3, r3, r1
 800c034:	42ab      	cmp	r3, r5
 800c036:	dcf2      	bgt.n	800c01e <_printf_i+0x21e>
 800c038:	e7eb      	b.n	800c012 <_printf_i+0x212>
 800c03a:	2500      	movs	r5, #0
 800c03c:	f104 0619 	add.w	r6, r4, #25
 800c040:	e7f5      	b.n	800c02e <_printf_i+0x22e>
 800c042:	bf00      	nop
 800c044:	0801274c 	.word	0x0801274c
 800c048:	0801275d 	.word	0x0801275d

0800c04c <_scanf_float>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	b087      	sub	sp, #28
 800c052:	4617      	mov	r7, r2
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	688b      	ldr	r3, [r1, #8]
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c05e:	bf83      	ittte	hi
 800c060:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c064:	195b      	addhi	r3, r3, r5
 800c066:	9302      	strhi	r3, [sp, #8]
 800c068:	2300      	movls	r3, #0
 800c06a:	bf86      	itte	hi
 800c06c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c070:	608b      	strhi	r3, [r1, #8]
 800c072:	9302      	strls	r3, [sp, #8]
 800c074:	680b      	ldr	r3, [r1, #0]
 800c076:	468b      	mov	fp, r1
 800c078:	2500      	movs	r5, #0
 800c07a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c07e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c086:	4680      	mov	r8, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	465e      	mov	r6, fp
 800c08c:	46aa      	mov	sl, r5
 800c08e:	46a9      	mov	r9, r5
 800c090:	9501      	str	r5, [sp, #4]
 800c092:	68a2      	ldr	r2, [r4, #8]
 800c094:	b152      	cbz	r2, 800c0ac <_scanf_float+0x60>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b4e      	cmp	r3, #78	; 0x4e
 800c09c:	d864      	bhi.n	800c168 <_scanf_float+0x11c>
 800c09e:	2b40      	cmp	r3, #64	; 0x40
 800c0a0:	d83c      	bhi.n	800c11c <_scanf_float+0xd0>
 800c0a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0a6:	b2c8      	uxtb	r0, r1
 800c0a8:	280e      	cmp	r0, #14
 800c0aa:	d93a      	bls.n	800c122 <_scanf_float+0xd6>
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	d003      	beq.n	800c0ba <_scanf_float+0x6e>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0be:	f1ba 0f01 	cmp.w	sl, #1
 800c0c2:	f200 8113 	bhi.w	800c2ec <_scanf_float+0x2a0>
 800c0c6:	455e      	cmp	r6, fp
 800c0c8:	f200 8105 	bhi.w	800c2d6 <_scanf_float+0x28a>
 800c0cc:	2501      	movs	r5, #1
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	b007      	add	sp, #28
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c0da:	2a0d      	cmp	r2, #13
 800c0dc:	d8e6      	bhi.n	800c0ac <_scanf_float+0x60>
 800c0de:	a101      	add	r1, pc, #4	; (adr r1, 800c0e4 <_scanf_float+0x98>)
 800c0e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0e4:	0800c223 	.word	0x0800c223
 800c0e8:	0800c0ad 	.word	0x0800c0ad
 800c0ec:	0800c0ad 	.word	0x0800c0ad
 800c0f0:	0800c0ad 	.word	0x0800c0ad
 800c0f4:	0800c283 	.word	0x0800c283
 800c0f8:	0800c25b 	.word	0x0800c25b
 800c0fc:	0800c0ad 	.word	0x0800c0ad
 800c100:	0800c0ad 	.word	0x0800c0ad
 800c104:	0800c231 	.word	0x0800c231
 800c108:	0800c0ad 	.word	0x0800c0ad
 800c10c:	0800c0ad 	.word	0x0800c0ad
 800c110:	0800c0ad 	.word	0x0800c0ad
 800c114:	0800c0ad 	.word	0x0800c0ad
 800c118:	0800c1e9 	.word	0x0800c1e9
 800c11c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c120:	e7db      	b.n	800c0da <_scanf_float+0x8e>
 800c122:	290e      	cmp	r1, #14
 800c124:	d8c2      	bhi.n	800c0ac <_scanf_float+0x60>
 800c126:	a001      	add	r0, pc, #4	; (adr r0, 800c12c <_scanf_float+0xe0>)
 800c128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c12c:	0800c1db 	.word	0x0800c1db
 800c130:	0800c0ad 	.word	0x0800c0ad
 800c134:	0800c1db 	.word	0x0800c1db
 800c138:	0800c26f 	.word	0x0800c26f
 800c13c:	0800c0ad 	.word	0x0800c0ad
 800c140:	0800c189 	.word	0x0800c189
 800c144:	0800c1c5 	.word	0x0800c1c5
 800c148:	0800c1c5 	.word	0x0800c1c5
 800c14c:	0800c1c5 	.word	0x0800c1c5
 800c150:	0800c1c5 	.word	0x0800c1c5
 800c154:	0800c1c5 	.word	0x0800c1c5
 800c158:	0800c1c5 	.word	0x0800c1c5
 800c15c:	0800c1c5 	.word	0x0800c1c5
 800c160:	0800c1c5 	.word	0x0800c1c5
 800c164:	0800c1c5 	.word	0x0800c1c5
 800c168:	2b6e      	cmp	r3, #110	; 0x6e
 800c16a:	d809      	bhi.n	800c180 <_scanf_float+0x134>
 800c16c:	2b60      	cmp	r3, #96	; 0x60
 800c16e:	d8b2      	bhi.n	800c0d6 <_scanf_float+0x8a>
 800c170:	2b54      	cmp	r3, #84	; 0x54
 800c172:	d077      	beq.n	800c264 <_scanf_float+0x218>
 800c174:	2b59      	cmp	r3, #89	; 0x59
 800c176:	d199      	bne.n	800c0ac <_scanf_float+0x60>
 800c178:	2d07      	cmp	r5, #7
 800c17a:	d197      	bne.n	800c0ac <_scanf_float+0x60>
 800c17c:	2508      	movs	r5, #8
 800c17e:	e029      	b.n	800c1d4 <_scanf_float+0x188>
 800c180:	2b74      	cmp	r3, #116	; 0x74
 800c182:	d06f      	beq.n	800c264 <_scanf_float+0x218>
 800c184:	2b79      	cmp	r3, #121	; 0x79
 800c186:	e7f6      	b.n	800c176 <_scanf_float+0x12a>
 800c188:	6821      	ldr	r1, [r4, #0]
 800c18a:	05c8      	lsls	r0, r1, #23
 800c18c:	d51a      	bpl.n	800c1c4 <_scanf_float+0x178>
 800c18e:	9b02      	ldr	r3, [sp, #8]
 800c190:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c194:	6021      	str	r1, [r4, #0]
 800c196:	f109 0901 	add.w	r9, r9, #1
 800c19a:	b11b      	cbz	r3, 800c1a4 <_scanf_float+0x158>
 800c19c:	3b01      	subs	r3, #1
 800c19e:	3201      	adds	r2, #1
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	60a2      	str	r2, [r4, #8]
 800c1a4:	68a3      	ldr	r3, [r4, #8]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	60a3      	str	r3, [r4, #8]
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	6123      	str	r3, [r4, #16]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	f340 8084 	ble.w	800c2c4 <_scanf_float+0x278>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	603b      	str	r3, [r7, #0]
 800c1c2:	e766      	b.n	800c092 <_scanf_float+0x46>
 800c1c4:	eb1a 0f05 	cmn.w	sl, r5
 800c1c8:	f47f af70 	bne.w	800c0ac <_scanf_float+0x60>
 800c1cc:	6822      	ldr	r2, [r4, #0]
 800c1ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c1d2:	6022      	str	r2, [r4, #0]
 800c1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800c1d8:	e7e4      	b.n	800c1a4 <_scanf_float+0x158>
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	0610      	lsls	r0, r2, #24
 800c1de:	f57f af65 	bpl.w	800c0ac <_scanf_float+0x60>
 800c1e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1e6:	e7f4      	b.n	800c1d2 <_scanf_float+0x186>
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	d10e      	bne.n	800c20c <_scanf_float+0x1c0>
 800c1ee:	f1b9 0f00 	cmp.w	r9, #0
 800c1f2:	d10e      	bne.n	800c212 <_scanf_float+0x1c6>
 800c1f4:	6822      	ldr	r2, [r4, #0]
 800c1f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c1fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c1fe:	d108      	bne.n	800c212 <_scanf_float+0x1c6>
 800c200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	f04f 0a01 	mov.w	sl, #1
 800c20a:	e7e3      	b.n	800c1d4 <_scanf_float+0x188>
 800c20c:	f1ba 0f02 	cmp.w	sl, #2
 800c210:	d055      	beq.n	800c2be <_scanf_float+0x272>
 800c212:	2d01      	cmp	r5, #1
 800c214:	d002      	beq.n	800c21c <_scanf_float+0x1d0>
 800c216:	2d04      	cmp	r5, #4
 800c218:	f47f af48 	bne.w	800c0ac <_scanf_float+0x60>
 800c21c:	3501      	adds	r5, #1
 800c21e:	b2ed      	uxtb	r5, r5
 800c220:	e7d8      	b.n	800c1d4 <_scanf_float+0x188>
 800c222:	f1ba 0f01 	cmp.w	sl, #1
 800c226:	f47f af41 	bne.w	800c0ac <_scanf_float+0x60>
 800c22a:	f04f 0a02 	mov.w	sl, #2
 800c22e:	e7d1      	b.n	800c1d4 <_scanf_float+0x188>
 800c230:	b97d      	cbnz	r5, 800c252 <_scanf_float+0x206>
 800c232:	f1b9 0f00 	cmp.w	r9, #0
 800c236:	f47f af3c 	bne.w	800c0b2 <_scanf_float+0x66>
 800c23a:	6822      	ldr	r2, [r4, #0]
 800c23c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c240:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c244:	f47f af39 	bne.w	800c0ba <_scanf_float+0x6e>
 800c248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	2501      	movs	r5, #1
 800c250:	e7c0      	b.n	800c1d4 <_scanf_float+0x188>
 800c252:	2d03      	cmp	r5, #3
 800c254:	d0e2      	beq.n	800c21c <_scanf_float+0x1d0>
 800c256:	2d05      	cmp	r5, #5
 800c258:	e7de      	b.n	800c218 <_scanf_float+0x1cc>
 800c25a:	2d02      	cmp	r5, #2
 800c25c:	f47f af26 	bne.w	800c0ac <_scanf_float+0x60>
 800c260:	2503      	movs	r5, #3
 800c262:	e7b7      	b.n	800c1d4 <_scanf_float+0x188>
 800c264:	2d06      	cmp	r5, #6
 800c266:	f47f af21 	bne.w	800c0ac <_scanf_float+0x60>
 800c26a:	2507      	movs	r5, #7
 800c26c:	e7b2      	b.n	800c1d4 <_scanf_float+0x188>
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	0591      	lsls	r1, r2, #22
 800c272:	f57f af1b 	bpl.w	800c0ac <_scanf_float+0x60>
 800c276:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c27a:	6022      	str	r2, [r4, #0]
 800c27c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c280:	e7a8      	b.n	800c1d4 <_scanf_float+0x188>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c288:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c28c:	d006      	beq.n	800c29c <_scanf_float+0x250>
 800c28e:	0550      	lsls	r0, r2, #21
 800c290:	f57f af0c 	bpl.w	800c0ac <_scanf_float+0x60>
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	f43f af0f 	beq.w	800c0ba <_scanf_float+0x6e>
 800c29c:	0591      	lsls	r1, r2, #22
 800c29e:	bf58      	it	pl
 800c2a0:	9901      	ldrpl	r1, [sp, #4]
 800c2a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2a6:	bf58      	it	pl
 800c2a8:	eba9 0101 	subpl.w	r1, r9, r1
 800c2ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2b0:	bf58      	it	pl
 800c2b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2b6:	6022      	str	r2, [r4, #0]
 800c2b8:	f04f 0900 	mov.w	r9, #0
 800c2bc:	e78a      	b.n	800c1d4 <_scanf_float+0x188>
 800c2be:	f04f 0a03 	mov.w	sl, #3
 800c2c2:	e787      	b.n	800c1d4 <_scanf_float+0x188>
 800c2c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4798      	blx	r3
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f43f aedf 	beq.w	800c092 <_scanf_float+0x46>
 800c2d4:	e6ea      	b.n	800c0ac <_scanf_float+0x60>
 800c2d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2de:	463a      	mov	r2, r7
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	4798      	blx	r3
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	e6ec      	b.n	800c0c6 <_scanf_float+0x7a>
 800c2ec:	1e6b      	subs	r3, r5, #1
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d825      	bhi.n	800c33e <_scanf_float+0x2f2>
 800c2f2:	2d02      	cmp	r5, #2
 800c2f4:	d836      	bhi.n	800c364 <_scanf_float+0x318>
 800c2f6:	455e      	cmp	r6, fp
 800c2f8:	f67f aee8 	bls.w	800c0cc <_scanf_float+0x80>
 800c2fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c300:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c304:	463a      	mov	r2, r7
 800c306:	4640      	mov	r0, r8
 800c308:	4798      	blx	r3
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	6123      	str	r3, [r4, #16]
 800c310:	e7f1      	b.n	800c2f6 <_scanf_float+0x2aa>
 800c312:	9802      	ldr	r0, [sp, #8]
 800c314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c318:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	463a      	mov	r2, r7
 800c320:	4640      	mov	r0, r8
 800c322:	4798      	blx	r3
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	3b01      	subs	r3, #1
 800c328:	6123      	str	r3, [r4, #16]
 800c32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c32e:	fa5f fa8a 	uxtb.w	sl, sl
 800c332:	f1ba 0f02 	cmp.w	sl, #2
 800c336:	d1ec      	bne.n	800c312 <_scanf_float+0x2c6>
 800c338:	3d03      	subs	r5, #3
 800c33a:	b2ed      	uxtb	r5, r5
 800c33c:	1b76      	subs	r6, r6, r5
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	05da      	lsls	r2, r3, #23
 800c342:	d52f      	bpl.n	800c3a4 <_scanf_float+0x358>
 800c344:	055b      	lsls	r3, r3, #21
 800c346:	d510      	bpl.n	800c36a <_scanf_float+0x31e>
 800c348:	455e      	cmp	r6, fp
 800c34a:	f67f aebf 	bls.w	800c0cc <_scanf_float+0x80>
 800c34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c356:	463a      	mov	r2, r7
 800c358:	4640      	mov	r0, r8
 800c35a:	4798      	blx	r3
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	3b01      	subs	r3, #1
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	e7f1      	b.n	800c348 <_scanf_float+0x2fc>
 800c364:	46aa      	mov	sl, r5
 800c366:	9602      	str	r6, [sp, #8]
 800c368:	e7df      	b.n	800c32a <_scanf_float+0x2de>
 800c36a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	2965      	cmp	r1, #101	; 0x65
 800c372:	f103 33ff 	add.w	r3, r3, #4294967295
 800c376:	f106 35ff 	add.w	r5, r6, #4294967295
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	d00c      	beq.n	800c398 <_scanf_float+0x34c>
 800c37e:	2945      	cmp	r1, #69	; 0x45
 800c380:	d00a      	beq.n	800c398 <_scanf_float+0x34c>
 800c382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c386:	463a      	mov	r2, r7
 800c388:	4640      	mov	r0, r8
 800c38a:	4798      	blx	r3
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c392:	3b01      	subs	r3, #1
 800c394:	1eb5      	subs	r5, r6, #2
 800c396:	6123      	str	r3, [r4, #16]
 800c398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c39c:	463a      	mov	r2, r7
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4798      	blx	r3
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	6825      	ldr	r5, [r4, #0]
 800c3a6:	f015 0510 	ands.w	r5, r5, #16
 800c3aa:	d159      	bne.n	800c460 <_scanf_float+0x414>
 800c3ac:	7035      	strb	r5, [r6, #0]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3b8:	d11b      	bne.n	800c3f2 <_scanf_float+0x3a6>
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	454b      	cmp	r3, r9
 800c3be:	eba3 0209 	sub.w	r2, r3, r9
 800c3c2:	d123      	bne.n	800c40c <_scanf_float+0x3c0>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4659      	mov	r1, fp
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	f000 ff27 	bl	800d21c <_strtod_r>
 800c3ce:	6822      	ldr	r2, [r4, #0]
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	f012 0f02 	tst.w	r2, #2
 800c3d6:	ec57 6b10 	vmov	r6, r7, d0
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	d021      	beq.n	800c422 <_scanf_float+0x3d6>
 800c3de:	9903      	ldr	r1, [sp, #12]
 800c3e0:	1d1a      	adds	r2, r3, #4
 800c3e2:	600a      	str	r2, [r1, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	e9c3 6700 	strd	r6, r7, [r3]
 800c3ea:	68e3      	ldr	r3, [r4, #12]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	60e3      	str	r3, [r4, #12]
 800c3f0:	e66d      	b.n	800c0ce <_scanf_float+0x82>
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0e5      	beq.n	800c3c4 <_scanf_float+0x378>
 800c3f8:	9905      	ldr	r1, [sp, #20]
 800c3fa:	230a      	movs	r3, #10
 800c3fc:	462a      	mov	r2, r5
 800c3fe:	3101      	adds	r1, #1
 800c400:	4640      	mov	r0, r8
 800c402:	f000 ff93 	bl	800d32c <_strtol_r>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	9e05      	ldr	r6, [sp, #20]
 800c40a:	1ac2      	subs	r2, r0, r3
 800c40c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c410:	429e      	cmp	r6, r3
 800c412:	bf28      	it	cs
 800c414:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c418:	4912      	ldr	r1, [pc, #72]	; (800c464 <_scanf_float+0x418>)
 800c41a:	4630      	mov	r0, r6
 800c41c:	f000 f82c 	bl	800c478 <siprintf>
 800c420:	e7d0      	b.n	800c3c4 <_scanf_float+0x378>
 800c422:	9903      	ldr	r1, [sp, #12]
 800c424:	f012 0f04 	tst.w	r2, #4
 800c428:	f103 0204 	add.w	r2, r3, #4
 800c42c:	600a      	str	r2, [r1, #0]
 800c42e:	d1d9      	bne.n	800c3e4 <_scanf_float+0x398>
 800c430:	f8d3 8000 	ldr.w	r8, [r3]
 800c434:	ee10 2a10 	vmov	r2, s0
 800c438:	ee10 0a10 	vmov	r0, s0
 800c43c:	463b      	mov	r3, r7
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f4 fba4 	bl	8000b8c <__aeabi_dcmpun>
 800c444:	b128      	cbz	r0, 800c452 <_scanf_float+0x406>
 800c446:	4808      	ldr	r0, [pc, #32]	; (800c468 <_scanf_float+0x41c>)
 800c448:	f000 f810 	bl	800c46c <nanf>
 800c44c:	ed88 0a00 	vstr	s0, [r8]
 800c450:	e7cb      	b.n	800c3ea <_scanf_float+0x39e>
 800c452:	4630      	mov	r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	f7f4 fbf7 	bl	8000c48 <__aeabi_d2f>
 800c45a:	f8c8 0000 	str.w	r0, [r8]
 800c45e:	e7c4      	b.n	800c3ea <_scanf_float+0x39e>
 800c460:	2500      	movs	r5, #0
 800c462:	e634      	b.n	800c0ce <_scanf_float+0x82>
 800c464:	0801276e 	.word	0x0801276e
 800c468:	08012b93 	.word	0x08012b93

0800c46c <nanf>:
 800c46c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c474 <nanf+0x8>
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	7fc00000 	.word	0x7fc00000

0800c478 <siprintf>:
 800c478:	b40e      	push	{r1, r2, r3}
 800c47a:	b500      	push	{lr}
 800c47c:	b09c      	sub	sp, #112	; 0x70
 800c47e:	ab1d      	add	r3, sp, #116	; 0x74
 800c480:	9002      	str	r0, [sp, #8]
 800c482:	9006      	str	r0, [sp, #24]
 800c484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c488:	4809      	ldr	r0, [pc, #36]	; (800c4b0 <siprintf+0x38>)
 800c48a:	9107      	str	r1, [sp, #28]
 800c48c:	9104      	str	r1, [sp, #16]
 800c48e:	4909      	ldr	r1, [pc, #36]	; (800c4b4 <siprintf+0x3c>)
 800c490:	f853 2b04 	ldr.w	r2, [r3], #4
 800c494:	9105      	str	r1, [sp, #20]
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	a902      	add	r1, sp, #8
 800c49c:	f002 ffa8 	bl	800f3f0 <_svfiprintf_r>
 800c4a0:	9b02      	ldr	r3, [sp, #8]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	701a      	strb	r2, [r3, #0]
 800c4a6:	b01c      	add	sp, #112	; 0x70
 800c4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ac:	b003      	add	sp, #12
 800c4ae:	4770      	bx	lr
 800c4b0:	20000014 	.word	0x20000014
 800c4b4:	ffff0208 	.word	0xffff0208

0800c4b8 <siscanf>:
 800c4b8:	b40e      	push	{r1, r2, r3}
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	b09f      	sub	sp, #124	; 0x7c
 800c4be:	ac21      	add	r4, sp, #132	; 0x84
 800c4c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c4c4:	f854 2b04 	ldr.w	r2, [r4], #4
 800c4c8:	9201      	str	r2, [sp, #4]
 800c4ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c4ce:	9004      	str	r0, [sp, #16]
 800c4d0:	9008      	str	r0, [sp, #32]
 800c4d2:	f7f3 fea7 	bl	8000224 <strlen>
 800c4d6:	4b0c      	ldr	r3, [pc, #48]	; (800c508 <siscanf+0x50>)
 800c4d8:	9005      	str	r0, [sp, #20]
 800c4da:	9009      	str	r0, [sp, #36]	; 0x24
 800c4dc:	930d      	str	r3, [sp, #52]	; 0x34
 800c4de:	480b      	ldr	r0, [pc, #44]	; (800c50c <siscanf+0x54>)
 800c4e0:	9a01      	ldr	r2, [sp, #4]
 800c4e2:	6800      	ldr	r0, [r0, #0]
 800c4e4:	9403      	str	r4, [sp, #12]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c4ea:	9316      	str	r3, [sp, #88]	; 0x58
 800c4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c4f4:	a904      	add	r1, sp, #16
 800c4f6:	4623      	mov	r3, r4
 800c4f8:	f003 f8d4 	bl	800f6a4 <__ssvfiscanf_r>
 800c4fc:	b01f      	add	sp, #124	; 0x7c
 800c4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c502:	b003      	add	sp, #12
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	0800c533 	.word	0x0800c533
 800c50c:	20000014 	.word	0x20000014

0800c510 <__sread>:
 800c510:	b510      	push	{r4, lr}
 800c512:	460c      	mov	r4, r1
 800c514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c518:	f003 fb8e 	bl	800fc38 <_read_r>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	bfab      	itete	ge
 800c520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c522:	89a3      	ldrhlt	r3, [r4, #12]
 800c524:	181b      	addge	r3, r3, r0
 800c526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c52a:	bfac      	ite	ge
 800c52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c52e:	81a3      	strhlt	r3, [r4, #12]
 800c530:	bd10      	pop	{r4, pc}

0800c532 <__seofread>:
 800c532:	2000      	movs	r0, #0
 800c534:	4770      	bx	lr

0800c536 <__swrite>:
 800c536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53a:	461f      	mov	r7, r3
 800c53c:	898b      	ldrh	r3, [r1, #12]
 800c53e:	05db      	lsls	r3, r3, #23
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4616      	mov	r6, r2
 800c546:	d505      	bpl.n	800c554 <__swrite+0x1e>
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	2302      	movs	r3, #2
 800c54e:	2200      	movs	r2, #0
 800c550:	f002 f900 	bl	800e754 <_lseek_r>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	f000 bee1 	b.w	800d330 <_write_r>

0800c56e <__sseek>:
 800c56e:	b510      	push	{r4, lr}
 800c570:	460c      	mov	r4, r1
 800c572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c576:	f002 f8ed 	bl	800e754 <_lseek_r>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	bf15      	itete	ne
 800c580:	6560      	strne	r0, [r4, #84]	; 0x54
 800c582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c58a:	81a3      	strheq	r3, [r4, #12]
 800c58c:	bf18      	it	ne
 800c58e:	81a3      	strhne	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__sclose>:
 800c592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c596:	f000 bedd 	b.w	800d354 <_close_r>

0800c59a <strcpy>:
 800c59a:	4603      	mov	r3, r0
 800c59c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	d1f9      	bne.n	800c59c <strcpy+0x2>
 800c5a8:	4770      	bx	lr

0800c5aa <strstr>:
 800c5aa:	780a      	ldrb	r2, [r1, #0]
 800c5ac:	b570      	push	{r4, r5, r6, lr}
 800c5ae:	b96a      	cbnz	r2, 800c5cc <strstr+0x22>
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d109      	bne.n	800c5ca <strstr+0x20>
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f6      	beq.n	800c5b0 <strstr+0x6>
 800c5c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c5c6:	429e      	cmp	r6, r3
 800c5c8:	d0f7      	beq.n	800c5ba <strstr+0x10>
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	7803      	ldrb	r3, [r0, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1ef      	bne.n	800c5b2 <strstr+0x8>
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	e7ec      	b.n	800c5b0 <strstr+0x6>

0800c5d6 <sulp>:
 800c5d6:	b570      	push	{r4, r5, r6, lr}
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460d      	mov	r5, r1
 800c5dc:	ec45 4b10 	vmov	d0, r4, r5
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	f002 fc63 	bl	800eeac <__ulp>
 800c5e6:	ec51 0b10 	vmov	r0, r1, d0
 800c5ea:	b17e      	cbz	r6, 800c60c <sulp+0x36>
 800c5ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	dd09      	ble.n	800c60c <sulp+0x36>
 800c5f8:	051b      	lsls	r3, r3, #20
 800c5fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c5fe:	2400      	movs	r4, #0
 800c600:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c604:	4622      	mov	r2, r4
 800c606:	462b      	mov	r3, r5
 800c608:	f7f4 f826 	bl	8000658 <__aeabi_dmul>
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c610 <_strtod_l>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	ed2d 8b02 	vpush	{d8}
 800c618:	b09d      	sub	sp, #116	; 0x74
 800c61a:	461f      	mov	r7, r3
 800c61c:	2300      	movs	r3, #0
 800c61e:	9318      	str	r3, [sp, #96]	; 0x60
 800c620:	4ba2      	ldr	r3, [pc, #648]	; (800c8ac <_strtod_l+0x29c>)
 800c622:	9213      	str	r2, [sp, #76]	; 0x4c
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	4604      	mov	r4, r0
 800c62a:	4618      	mov	r0, r3
 800c62c:	4688      	mov	r8, r1
 800c62e:	f7f3 fdf9 	bl	8000224 <strlen>
 800c632:	f04f 0a00 	mov.w	sl, #0
 800c636:	4605      	mov	r5, r0
 800c638:	f04f 0b00 	mov.w	fp, #0
 800c63c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c642:	781a      	ldrb	r2, [r3, #0]
 800c644:	2a2b      	cmp	r2, #43	; 0x2b
 800c646:	d04e      	beq.n	800c6e6 <_strtod_l+0xd6>
 800c648:	d83b      	bhi.n	800c6c2 <_strtod_l+0xb2>
 800c64a:	2a0d      	cmp	r2, #13
 800c64c:	d834      	bhi.n	800c6b8 <_strtod_l+0xa8>
 800c64e:	2a08      	cmp	r2, #8
 800c650:	d834      	bhi.n	800c6bc <_strtod_l+0xac>
 800c652:	2a00      	cmp	r2, #0
 800c654:	d03e      	beq.n	800c6d4 <_strtod_l+0xc4>
 800c656:	2300      	movs	r3, #0
 800c658:	930a      	str	r3, [sp, #40]	; 0x28
 800c65a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c65c:	7833      	ldrb	r3, [r6, #0]
 800c65e:	2b30      	cmp	r3, #48	; 0x30
 800c660:	f040 80b0 	bne.w	800c7c4 <_strtod_l+0x1b4>
 800c664:	7873      	ldrb	r3, [r6, #1]
 800c666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c66a:	2b58      	cmp	r3, #88	; 0x58
 800c66c:	d168      	bne.n	800c740 <_strtod_l+0x130>
 800c66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	ab18      	add	r3, sp, #96	; 0x60
 800c674:	9702      	str	r7, [sp, #8]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	4a8d      	ldr	r2, [pc, #564]	; (800c8b0 <_strtod_l+0x2a0>)
 800c67a:	ab19      	add	r3, sp, #100	; 0x64
 800c67c:	a917      	add	r1, sp, #92	; 0x5c
 800c67e:	4620      	mov	r0, r4
 800c680:	f001 fd5c 	bl	800e13c <__gethex>
 800c684:	f010 0707 	ands.w	r7, r0, #7
 800c688:	4605      	mov	r5, r0
 800c68a:	d005      	beq.n	800c698 <_strtod_l+0x88>
 800c68c:	2f06      	cmp	r7, #6
 800c68e:	d12c      	bne.n	800c6ea <_strtod_l+0xda>
 800c690:	3601      	adds	r6, #1
 800c692:	2300      	movs	r3, #0
 800c694:	9617      	str	r6, [sp, #92]	; 0x5c
 800c696:	930a      	str	r3, [sp, #40]	; 0x28
 800c698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f040 8590 	bne.w	800d1c0 <_strtod_l+0xbb0>
 800c6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a2:	b1eb      	cbz	r3, 800c6e0 <_strtod_l+0xd0>
 800c6a4:	4652      	mov	r2, sl
 800c6a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6aa:	ec43 2b10 	vmov	d0, r2, r3
 800c6ae:	b01d      	add	sp, #116	; 0x74
 800c6b0:	ecbd 8b02 	vpop	{d8}
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	2a20      	cmp	r2, #32
 800c6ba:	d1cc      	bne.n	800c656 <_strtod_l+0x46>
 800c6bc:	3301      	adds	r3, #1
 800c6be:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6c0:	e7be      	b.n	800c640 <_strtod_l+0x30>
 800c6c2:	2a2d      	cmp	r2, #45	; 0x2d
 800c6c4:	d1c7      	bne.n	800c656 <_strtod_l+0x46>
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1c2      	bne.n	800c65a <_strtod_l+0x4a>
 800c6d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f040 856e 	bne.w	800d1bc <_strtod_l+0xbac>
 800c6e0:	4652      	mov	r2, sl
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	e7e1      	b.n	800c6aa <_strtod_l+0x9a>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	e7ee      	b.n	800c6c8 <_strtod_l+0xb8>
 800c6ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6ec:	b13a      	cbz	r2, 800c6fe <_strtod_l+0xee>
 800c6ee:	2135      	movs	r1, #53	; 0x35
 800c6f0:	a81a      	add	r0, sp, #104	; 0x68
 800c6f2:	f002 fce6 	bl	800f0c2 <__copybits>
 800c6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f002 f8a5 	bl	800e848 <_Bfree>
 800c6fe:	3f01      	subs	r7, #1
 800c700:	2f04      	cmp	r7, #4
 800c702:	d806      	bhi.n	800c712 <_strtod_l+0x102>
 800c704:	e8df f007 	tbb	[pc, r7]
 800c708:	1714030a 	.word	0x1714030a
 800c70c:	0a          	.byte	0x0a
 800c70d:	00          	.byte	0x00
 800c70e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c712:	0728      	lsls	r0, r5, #28
 800c714:	d5c0      	bpl.n	800c698 <_strtod_l+0x88>
 800c716:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c71a:	e7bd      	b.n	800c698 <_strtod_l+0x88>
 800c71c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c72a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c72e:	e7f0      	b.n	800c712 <_strtod_l+0x102>
 800c730:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8b4 <_strtod_l+0x2a4>
 800c734:	e7ed      	b.n	800c712 <_strtod_l+0x102>
 800c736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c73a:	f04f 3aff 	mov.w	sl, #4294967295
 800c73e:	e7e8      	b.n	800c712 <_strtod_l+0x102>
 800c740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	9217      	str	r2, [sp, #92]	; 0x5c
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b30      	cmp	r3, #48	; 0x30
 800c74a:	d0f9      	beq.n	800c740 <_strtod_l+0x130>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0a3      	beq.n	800c698 <_strtod_l+0x88>
 800c750:	2301      	movs	r3, #1
 800c752:	f04f 0900 	mov.w	r9, #0
 800c756:	9304      	str	r3, [sp, #16]
 800c758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c75a:	9308      	str	r3, [sp, #32]
 800c75c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c760:	464f      	mov	r7, r9
 800c762:	220a      	movs	r2, #10
 800c764:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c766:	7806      	ldrb	r6, [r0, #0]
 800c768:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c76c:	b2d9      	uxtb	r1, r3
 800c76e:	2909      	cmp	r1, #9
 800c770:	d92a      	bls.n	800c7c8 <_strtod_l+0x1b8>
 800c772:	9905      	ldr	r1, [sp, #20]
 800c774:	462a      	mov	r2, r5
 800c776:	f003 fac3 	bl	800fd00 <strncmp>
 800c77a:	b398      	cbz	r0, 800c7e4 <_strtod_l+0x1d4>
 800c77c:	2000      	movs	r0, #0
 800c77e:	4632      	mov	r2, r6
 800c780:	463d      	mov	r5, r7
 800c782:	9005      	str	r0, [sp, #20]
 800c784:	4603      	mov	r3, r0
 800c786:	2a65      	cmp	r2, #101	; 0x65
 800c788:	d001      	beq.n	800c78e <_strtod_l+0x17e>
 800c78a:	2a45      	cmp	r2, #69	; 0x45
 800c78c:	d118      	bne.n	800c7c0 <_strtod_l+0x1b0>
 800c78e:	b91d      	cbnz	r5, 800c798 <_strtod_l+0x188>
 800c790:	9a04      	ldr	r2, [sp, #16]
 800c792:	4302      	orrs	r2, r0
 800c794:	d09e      	beq.n	800c6d4 <_strtod_l+0xc4>
 800c796:	2500      	movs	r5, #0
 800c798:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c79c:	f108 0201 	add.w	r2, r8, #1
 800c7a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c7a6:	2a2b      	cmp	r2, #43	; 0x2b
 800c7a8:	d075      	beq.n	800c896 <_strtod_l+0x286>
 800c7aa:	2a2d      	cmp	r2, #45	; 0x2d
 800c7ac:	d07b      	beq.n	800c8a6 <_strtod_l+0x296>
 800c7ae:	f04f 0c00 	mov.w	ip, #0
 800c7b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7b6:	2909      	cmp	r1, #9
 800c7b8:	f240 8082 	bls.w	800c8c0 <_strtod_l+0x2b0>
 800c7bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7c0:	2600      	movs	r6, #0
 800c7c2:	e09d      	b.n	800c900 <_strtod_l+0x2f0>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	e7c4      	b.n	800c752 <_strtod_l+0x142>
 800c7c8:	2f08      	cmp	r7, #8
 800c7ca:	bfd8      	it	le
 800c7cc:	9907      	ldrle	r1, [sp, #28]
 800c7ce:	f100 0001 	add.w	r0, r0, #1
 800c7d2:	bfda      	itte	le
 800c7d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7d8:	9307      	strle	r3, [sp, #28]
 800c7da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c7de:	3701      	adds	r7, #1
 800c7e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c7e2:	e7bf      	b.n	800c764 <_strtod_l+0x154>
 800c7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7e6:	195a      	adds	r2, r3, r5
 800c7e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7ea:	5d5a      	ldrb	r2, [r3, r5]
 800c7ec:	2f00      	cmp	r7, #0
 800c7ee:	d037      	beq.n	800c860 <_strtod_l+0x250>
 800c7f0:	9005      	str	r0, [sp, #20]
 800c7f2:	463d      	mov	r5, r7
 800c7f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c7f8:	2b09      	cmp	r3, #9
 800c7fa:	d912      	bls.n	800c822 <_strtod_l+0x212>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e7c2      	b.n	800c786 <_strtod_l+0x176>
 800c800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	9217      	str	r2, [sp, #92]	; 0x5c
 800c806:	785a      	ldrb	r2, [r3, #1]
 800c808:	3001      	adds	r0, #1
 800c80a:	2a30      	cmp	r2, #48	; 0x30
 800c80c:	d0f8      	beq.n	800c800 <_strtod_l+0x1f0>
 800c80e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c812:	2b08      	cmp	r3, #8
 800c814:	f200 84d9 	bhi.w	800d1ca <_strtod_l+0xbba>
 800c818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c81a:	9005      	str	r0, [sp, #20]
 800c81c:	2000      	movs	r0, #0
 800c81e:	9308      	str	r3, [sp, #32]
 800c820:	4605      	mov	r5, r0
 800c822:	3a30      	subs	r2, #48	; 0x30
 800c824:	f100 0301 	add.w	r3, r0, #1
 800c828:	d014      	beq.n	800c854 <_strtod_l+0x244>
 800c82a:	9905      	ldr	r1, [sp, #20]
 800c82c:	4419      	add	r1, r3
 800c82e:	9105      	str	r1, [sp, #20]
 800c830:	462b      	mov	r3, r5
 800c832:	eb00 0e05 	add.w	lr, r0, r5
 800c836:	210a      	movs	r1, #10
 800c838:	4573      	cmp	r3, lr
 800c83a:	d113      	bne.n	800c864 <_strtod_l+0x254>
 800c83c:	182b      	adds	r3, r5, r0
 800c83e:	2b08      	cmp	r3, #8
 800c840:	f105 0501 	add.w	r5, r5, #1
 800c844:	4405      	add	r5, r0
 800c846:	dc1c      	bgt.n	800c882 <_strtod_l+0x272>
 800c848:	9907      	ldr	r1, [sp, #28]
 800c84a:	230a      	movs	r3, #10
 800c84c:	fb03 2301 	mla	r3, r3, r1, r2
 800c850:	9307      	str	r3, [sp, #28]
 800c852:	2300      	movs	r3, #0
 800c854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c856:	1c51      	adds	r1, r2, #1
 800c858:	9117      	str	r1, [sp, #92]	; 0x5c
 800c85a:	7852      	ldrb	r2, [r2, #1]
 800c85c:	4618      	mov	r0, r3
 800c85e:	e7c9      	b.n	800c7f4 <_strtod_l+0x1e4>
 800c860:	4638      	mov	r0, r7
 800c862:	e7d2      	b.n	800c80a <_strtod_l+0x1fa>
 800c864:	2b08      	cmp	r3, #8
 800c866:	dc04      	bgt.n	800c872 <_strtod_l+0x262>
 800c868:	9e07      	ldr	r6, [sp, #28]
 800c86a:	434e      	muls	r6, r1
 800c86c:	9607      	str	r6, [sp, #28]
 800c86e:	3301      	adds	r3, #1
 800c870:	e7e2      	b.n	800c838 <_strtod_l+0x228>
 800c872:	f103 0c01 	add.w	ip, r3, #1
 800c876:	f1bc 0f10 	cmp.w	ip, #16
 800c87a:	bfd8      	it	le
 800c87c:	fb01 f909 	mulle.w	r9, r1, r9
 800c880:	e7f5      	b.n	800c86e <_strtod_l+0x25e>
 800c882:	2d10      	cmp	r5, #16
 800c884:	bfdc      	itt	le
 800c886:	230a      	movle	r3, #10
 800c888:	fb03 2909 	mlale	r9, r3, r9, r2
 800c88c:	e7e1      	b.n	800c852 <_strtod_l+0x242>
 800c88e:	2300      	movs	r3, #0
 800c890:	9305      	str	r3, [sp, #20]
 800c892:	2301      	movs	r3, #1
 800c894:	e77c      	b.n	800c790 <_strtod_l+0x180>
 800c896:	f04f 0c00 	mov.w	ip, #0
 800c89a:	f108 0202 	add.w	r2, r8, #2
 800c89e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c8a4:	e785      	b.n	800c7b2 <_strtod_l+0x1a2>
 800c8a6:	f04f 0c01 	mov.w	ip, #1
 800c8aa:	e7f6      	b.n	800c89a <_strtod_l+0x28a>
 800c8ac:	080129c0 	.word	0x080129c0
 800c8b0:	08012774 	.word	0x08012774
 800c8b4:	7ff00000 	.word	0x7ff00000
 800c8b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8ba:	1c51      	adds	r1, r2, #1
 800c8bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8be:	7852      	ldrb	r2, [r2, #1]
 800c8c0:	2a30      	cmp	r2, #48	; 0x30
 800c8c2:	d0f9      	beq.n	800c8b8 <_strtod_l+0x2a8>
 800c8c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8c8:	2908      	cmp	r1, #8
 800c8ca:	f63f af79 	bhi.w	800c7c0 <_strtod_l+0x1b0>
 800c8ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c8d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8d4:	9206      	str	r2, [sp, #24]
 800c8d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8d8:	1c51      	adds	r1, r2, #1
 800c8da:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8dc:	7852      	ldrb	r2, [r2, #1]
 800c8de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c8e2:	2e09      	cmp	r6, #9
 800c8e4:	d937      	bls.n	800c956 <_strtod_l+0x346>
 800c8e6:	9e06      	ldr	r6, [sp, #24]
 800c8e8:	1b89      	subs	r1, r1, r6
 800c8ea:	2908      	cmp	r1, #8
 800c8ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c8f0:	dc02      	bgt.n	800c8f8 <_strtod_l+0x2e8>
 800c8f2:	4576      	cmp	r6, lr
 800c8f4:	bfa8      	it	ge
 800c8f6:	4676      	movge	r6, lr
 800c8f8:	f1bc 0f00 	cmp.w	ip, #0
 800c8fc:	d000      	beq.n	800c900 <_strtod_l+0x2f0>
 800c8fe:	4276      	negs	r6, r6
 800c900:	2d00      	cmp	r5, #0
 800c902:	d14d      	bne.n	800c9a0 <_strtod_l+0x390>
 800c904:	9904      	ldr	r1, [sp, #16]
 800c906:	4301      	orrs	r1, r0
 800c908:	f47f aec6 	bne.w	800c698 <_strtod_l+0x88>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f47f aee1 	bne.w	800c6d4 <_strtod_l+0xc4>
 800c912:	2a69      	cmp	r2, #105	; 0x69
 800c914:	d027      	beq.n	800c966 <_strtod_l+0x356>
 800c916:	dc24      	bgt.n	800c962 <_strtod_l+0x352>
 800c918:	2a49      	cmp	r2, #73	; 0x49
 800c91a:	d024      	beq.n	800c966 <_strtod_l+0x356>
 800c91c:	2a4e      	cmp	r2, #78	; 0x4e
 800c91e:	f47f aed9 	bne.w	800c6d4 <_strtod_l+0xc4>
 800c922:	499f      	ldr	r1, [pc, #636]	; (800cba0 <_strtod_l+0x590>)
 800c924:	a817      	add	r0, sp, #92	; 0x5c
 800c926:	f001 fe61 	bl	800e5ec <__match>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f43f aed2 	beq.w	800c6d4 <_strtod_l+0xc4>
 800c930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b28      	cmp	r3, #40	; 0x28
 800c936:	d12d      	bne.n	800c994 <_strtod_l+0x384>
 800c938:	499a      	ldr	r1, [pc, #616]	; (800cba4 <_strtod_l+0x594>)
 800c93a:	aa1a      	add	r2, sp, #104	; 0x68
 800c93c:	a817      	add	r0, sp, #92	; 0x5c
 800c93e:	f001 fe69 	bl	800e614 <__hexnan>
 800c942:	2805      	cmp	r0, #5
 800c944:	d126      	bne.n	800c994 <_strtod_l+0x384>
 800c946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c94c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c954:	e6a0      	b.n	800c698 <_strtod_l+0x88>
 800c956:	210a      	movs	r1, #10
 800c958:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c95c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c960:	e7b9      	b.n	800c8d6 <_strtod_l+0x2c6>
 800c962:	2a6e      	cmp	r2, #110	; 0x6e
 800c964:	e7db      	b.n	800c91e <_strtod_l+0x30e>
 800c966:	4990      	ldr	r1, [pc, #576]	; (800cba8 <_strtod_l+0x598>)
 800c968:	a817      	add	r0, sp, #92	; 0x5c
 800c96a:	f001 fe3f 	bl	800e5ec <__match>
 800c96e:	2800      	cmp	r0, #0
 800c970:	f43f aeb0 	beq.w	800c6d4 <_strtod_l+0xc4>
 800c974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c976:	498d      	ldr	r1, [pc, #564]	; (800cbac <_strtod_l+0x59c>)
 800c978:	3b01      	subs	r3, #1
 800c97a:	a817      	add	r0, sp, #92	; 0x5c
 800c97c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c97e:	f001 fe35 	bl	800e5ec <__match>
 800c982:	b910      	cbnz	r0, 800c98a <_strtod_l+0x37a>
 800c984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c986:	3301      	adds	r3, #1
 800c988:	9317      	str	r3, [sp, #92]	; 0x5c
 800c98a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbbc <_strtod_l+0x5ac>
 800c98e:	f04f 0a00 	mov.w	sl, #0
 800c992:	e681      	b.n	800c698 <_strtod_l+0x88>
 800c994:	4886      	ldr	r0, [pc, #536]	; (800cbb0 <_strtod_l+0x5a0>)
 800c996:	f003 f963 	bl	800fc60 <nan>
 800c99a:	ec5b ab10 	vmov	sl, fp, d0
 800c99e:	e67b      	b.n	800c698 <_strtod_l+0x88>
 800c9a0:	9b05      	ldr	r3, [sp, #20]
 800c9a2:	9807      	ldr	r0, [sp, #28]
 800c9a4:	1af3      	subs	r3, r6, r3
 800c9a6:	2f00      	cmp	r7, #0
 800c9a8:	bf08      	it	eq
 800c9aa:	462f      	moveq	r7, r5
 800c9ac:	2d10      	cmp	r5, #16
 800c9ae:	9306      	str	r3, [sp, #24]
 800c9b0:	46a8      	mov	r8, r5
 800c9b2:	bfa8      	it	ge
 800c9b4:	f04f 0810 	movge.w	r8, #16
 800c9b8:	f7f3 fdd4 	bl	8000564 <__aeabi_ui2d>
 800c9bc:	2d09      	cmp	r5, #9
 800c9be:	4682      	mov	sl, r0
 800c9c0:	468b      	mov	fp, r1
 800c9c2:	dd13      	ble.n	800c9ec <_strtod_l+0x3dc>
 800c9c4:	4b7b      	ldr	r3, [pc, #492]	; (800cbb4 <_strtod_l+0x5a4>)
 800c9c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c9ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9ce:	f7f3 fe43 	bl	8000658 <__aeabi_dmul>
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	4648      	mov	r0, r9
 800c9d6:	468b      	mov	fp, r1
 800c9d8:	f7f3 fdc4 	bl	8000564 <__aeabi_ui2d>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	4659      	mov	r1, fp
 800c9e4:	f7f3 fc82 	bl	80002ec <__adddf3>
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	468b      	mov	fp, r1
 800c9ec:	2d0f      	cmp	r5, #15
 800c9ee:	dc38      	bgt.n	800ca62 <_strtod_l+0x452>
 800c9f0:	9b06      	ldr	r3, [sp, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f43f ae50 	beq.w	800c698 <_strtod_l+0x88>
 800c9f8:	dd24      	ble.n	800ca44 <_strtod_l+0x434>
 800c9fa:	2b16      	cmp	r3, #22
 800c9fc:	dc0b      	bgt.n	800ca16 <_strtod_l+0x406>
 800c9fe:	496d      	ldr	r1, [pc, #436]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca08:	4652      	mov	r2, sl
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	f7f3 fe24 	bl	8000658 <__aeabi_dmul>
 800ca10:	4682      	mov	sl, r0
 800ca12:	468b      	mov	fp, r1
 800ca14:	e640      	b.n	800c698 <_strtod_l+0x88>
 800ca16:	9a06      	ldr	r2, [sp, #24]
 800ca18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	db20      	blt.n	800ca62 <_strtod_l+0x452>
 800ca20:	4c64      	ldr	r4, [pc, #400]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca22:	f1c5 050f 	rsb	r5, r5, #15
 800ca26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca32:	f7f3 fe11 	bl	8000658 <__aeabi_dmul>
 800ca36:	9b06      	ldr	r3, [sp, #24]
 800ca38:	1b5d      	subs	r5, r3, r5
 800ca3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca42:	e7e3      	b.n	800ca0c <_strtod_l+0x3fc>
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	3316      	adds	r3, #22
 800ca48:	db0b      	blt.n	800ca62 <_strtod_l+0x452>
 800ca4a:	9b05      	ldr	r3, [sp, #20]
 800ca4c:	1b9e      	subs	r6, r3, r6
 800ca4e:	4b59      	ldr	r3, [pc, #356]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca58:	4650      	mov	r0, sl
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	f7f3 ff26 	bl	80008ac <__aeabi_ddiv>
 800ca60:	e7d6      	b.n	800ca10 <_strtod_l+0x400>
 800ca62:	9b06      	ldr	r3, [sp, #24]
 800ca64:	eba5 0808 	sub.w	r8, r5, r8
 800ca68:	4498      	add	r8, r3
 800ca6a:	f1b8 0f00 	cmp.w	r8, #0
 800ca6e:	dd74      	ble.n	800cb5a <_strtod_l+0x54a>
 800ca70:	f018 030f 	ands.w	r3, r8, #15
 800ca74:	d00a      	beq.n	800ca8c <_strtod_l+0x47c>
 800ca76:	494f      	ldr	r1, [pc, #316]	; (800cbb4 <_strtod_l+0x5a4>)
 800ca78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca7c:	4652      	mov	r2, sl
 800ca7e:	465b      	mov	r3, fp
 800ca80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca84:	f7f3 fde8 	bl	8000658 <__aeabi_dmul>
 800ca88:	4682      	mov	sl, r0
 800ca8a:	468b      	mov	fp, r1
 800ca8c:	f038 080f 	bics.w	r8, r8, #15
 800ca90:	d04f      	beq.n	800cb32 <_strtod_l+0x522>
 800ca92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ca96:	dd22      	ble.n	800cade <_strtod_l+0x4ce>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	462e      	mov	r6, r5
 800ca9c:	9507      	str	r5, [sp, #28]
 800ca9e:	9505      	str	r5, [sp, #20]
 800caa0:	2322      	movs	r3, #34	; 0x22
 800caa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbbc <_strtod_l+0x5ac>
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	f04f 0a00 	mov.w	sl, #0
 800caac:	9b07      	ldr	r3, [sp, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f43f adf2 	beq.w	800c698 <_strtod_l+0x88>
 800cab4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cab6:	4620      	mov	r0, r4
 800cab8:	f001 fec6 	bl	800e848 <_Bfree>
 800cabc:	9905      	ldr	r1, [sp, #20]
 800cabe:	4620      	mov	r0, r4
 800cac0:	f001 fec2 	bl	800e848 <_Bfree>
 800cac4:	4631      	mov	r1, r6
 800cac6:	4620      	mov	r0, r4
 800cac8:	f001 febe 	bl	800e848 <_Bfree>
 800cacc:	9907      	ldr	r1, [sp, #28]
 800cace:	4620      	mov	r0, r4
 800cad0:	f001 feba 	bl	800e848 <_Bfree>
 800cad4:	4629      	mov	r1, r5
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 feb6 	bl	800e848 <_Bfree>
 800cadc:	e5dc      	b.n	800c698 <_strtod_l+0x88>
 800cade:	4b36      	ldr	r3, [pc, #216]	; (800cbb8 <_strtod_l+0x5a8>)
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	2300      	movs	r3, #0
 800cae4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cae8:	4650      	mov	r0, sl
 800caea:	4659      	mov	r1, fp
 800caec:	4699      	mov	r9, r3
 800caee:	f1b8 0f01 	cmp.w	r8, #1
 800caf2:	dc21      	bgt.n	800cb38 <_strtod_l+0x528>
 800caf4:	b10b      	cbz	r3, 800cafa <_strtod_l+0x4ea>
 800caf6:	4682      	mov	sl, r0
 800caf8:	468b      	mov	fp, r1
 800cafa:	4b2f      	ldr	r3, [pc, #188]	; (800cbb8 <_strtod_l+0x5a8>)
 800cafc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cb04:	4652      	mov	r2, sl
 800cb06:	465b      	mov	r3, fp
 800cb08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb0c:	f7f3 fda4 	bl	8000658 <__aeabi_dmul>
 800cb10:	4b2a      	ldr	r3, [pc, #168]	; (800cbbc <_strtod_l+0x5ac>)
 800cb12:	460a      	mov	r2, r1
 800cb14:	400b      	ands	r3, r1
 800cb16:	492a      	ldr	r1, [pc, #168]	; (800cbc0 <_strtod_l+0x5b0>)
 800cb18:	428b      	cmp	r3, r1
 800cb1a:	4682      	mov	sl, r0
 800cb1c:	d8bc      	bhi.n	800ca98 <_strtod_l+0x488>
 800cb1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb22:	428b      	cmp	r3, r1
 800cb24:	bf86      	itte	hi
 800cb26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cbc4 <_strtod_l+0x5b4>
 800cb2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb32:	2300      	movs	r3, #0
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	e084      	b.n	800cc42 <_strtod_l+0x632>
 800cb38:	f018 0f01 	tst.w	r8, #1
 800cb3c:	d005      	beq.n	800cb4a <_strtod_l+0x53a>
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	f7f3 fd88 	bl	8000658 <__aeabi_dmul>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	3208      	adds	r2, #8
 800cb4e:	f109 0901 	add.w	r9, r9, #1
 800cb52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb56:	9204      	str	r2, [sp, #16]
 800cb58:	e7c9      	b.n	800caee <_strtod_l+0x4de>
 800cb5a:	d0ea      	beq.n	800cb32 <_strtod_l+0x522>
 800cb5c:	f1c8 0800 	rsb	r8, r8, #0
 800cb60:	f018 020f 	ands.w	r2, r8, #15
 800cb64:	d00a      	beq.n	800cb7c <_strtod_l+0x56c>
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <_strtod_l+0x5a4>)
 800cb68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	4659      	mov	r1, fp
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fe9a 	bl	80008ac <__aeabi_ddiv>
 800cb78:	4682      	mov	sl, r0
 800cb7a:	468b      	mov	fp, r1
 800cb7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cb80:	d0d7      	beq.n	800cb32 <_strtod_l+0x522>
 800cb82:	f1b8 0f1f 	cmp.w	r8, #31
 800cb86:	dd1f      	ble.n	800cbc8 <_strtod_l+0x5b8>
 800cb88:	2500      	movs	r5, #0
 800cb8a:	462e      	mov	r6, r5
 800cb8c:	9507      	str	r5, [sp, #28]
 800cb8e:	9505      	str	r5, [sp, #20]
 800cb90:	2322      	movs	r3, #34	; 0x22
 800cb92:	f04f 0a00 	mov.w	sl, #0
 800cb96:	f04f 0b00 	mov.w	fp, #0
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	e786      	b.n	800caac <_strtod_l+0x49c>
 800cb9e:	bf00      	nop
 800cba0:	08012749 	.word	0x08012749
 800cba4:	08012788 	.word	0x08012788
 800cba8:	08012741 	.word	0x08012741
 800cbac:	080128cc 	.word	0x080128cc
 800cbb0:	08012b93 	.word	0x08012b93
 800cbb4:	08012a58 	.word	0x08012a58
 800cbb8:	08012a30 	.word	0x08012a30
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	7ca00000 	.word	0x7ca00000
 800cbc4:	7fefffff 	.word	0x7fefffff
 800cbc8:	f018 0310 	ands.w	r3, r8, #16
 800cbcc:	bf18      	it	ne
 800cbce:	236a      	movne	r3, #106	; 0x6a
 800cbd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cf80 <_strtod_l+0x970>
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f018 0f01 	tst.w	r8, #1
 800cbe0:	d004      	beq.n	800cbec <_strtod_l+0x5dc>
 800cbe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbe6:	f7f3 fd37 	bl	8000658 <__aeabi_dmul>
 800cbea:	2301      	movs	r3, #1
 800cbec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cbf0:	f109 0908 	add.w	r9, r9, #8
 800cbf4:	d1f2      	bne.n	800cbdc <_strtod_l+0x5cc>
 800cbf6:	b10b      	cbz	r3, 800cbfc <_strtod_l+0x5ec>
 800cbf8:	4682      	mov	sl, r0
 800cbfa:	468b      	mov	fp, r1
 800cbfc:	9b04      	ldr	r3, [sp, #16]
 800cbfe:	b1c3      	cbz	r3, 800cc32 <_strtod_l+0x622>
 800cc00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	4659      	mov	r1, fp
 800cc0c:	dd11      	ble.n	800cc32 <_strtod_l+0x622>
 800cc0e:	2b1f      	cmp	r3, #31
 800cc10:	f340 8124 	ble.w	800ce5c <_strtod_l+0x84c>
 800cc14:	2b34      	cmp	r3, #52	; 0x34
 800cc16:	bfde      	ittt	le
 800cc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc1c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc20:	fa03 f202 	lslle.w	r2, r3, r2
 800cc24:	f04f 0a00 	mov.w	sl, #0
 800cc28:	bfcc      	ite	gt
 800cc2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc2e:	ea02 0b01 	andle.w	fp, r2, r1
 800cc32:	2200      	movs	r2, #0
 800cc34:	2300      	movs	r3, #0
 800cc36:	4650      	mov	r0, sl
 800cc38:	4659      	mov	r1, fp
 800cc3a:	f7f3 ff75 	bl	8000b28 <__aeabi_dcmpeq>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d1a2      	bne.n	800cb88 <_strtod_l+0x578>
 800cc42:	9b07      	ldr	r3, [sp, #28]
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	9908      	ldr	r1, [sp, #32]
 800cc48:	462b      	mov	r3, r5
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f001 fe63 	bl	800e918 <__s2b>
 800cc52:	9007      	str	r0, [sp, #28]
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f43f af1f 	beq.w	800ca98 <_strtod_l+0x488>
 800cc5a:	9b05      	ldr	r3, [sp, #20]
 800cc5c:	1b9e      	subs	r6, r3, r6
 800cc5e:	9b06      	ldr	r3, [sp, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bfb4      	ite	lt
 800cc64:	4633      	movlt	r3, r6
 800cc66:	2300      	movge	r3, #0
 800cc68:	930c      	str	r3, [sp, #48]	; 0x30
 800cc6a:	9b06      	ldr	r3, [sp, #24]
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc72:	9312      	str	r3, [sp, #72]	; 0x48
 800cc74:	462e      	mov	r6, r5
 800cc76:	9b07      	ldr	r3, [sp, #28]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	6859      	ldr	r1, [r3, #4]
 800cc7c:	f001 fda4 	bl	800e7c8 <_Balloc>
 800cc80:	9005      	str	r0, [sp, #20]
 800cc82:	2800      	cmp	r0, #0
 800cc84:	f43f af0c 	beq.w	800caa0 <_strtod_l+0x490>
 800cc88:	9b07      	ldr	r3, [sp, #28]
 800cc8a:	691a      	ldr	r2, [r3, #16]
 800cc8c:	3202      	adds	r2, #2
 800cc8e:	f103 010c 	add.w	r1, r3, #12
 800cc92:	0092      	lsls	r2, r2, #2
 800cc94:	300c      	adds	r0, #12
 800cc96:	f001 fd89 	bl	800e7ac <memcpy>
 800cc9a:	ec4b ab10 	vmov	d0, sl, fp
 800cc9e:	aa1a      	add	r2, sp, #104	; 0x68
 800cca0:	a919      	add	r1, sp, #100	; 0x64
 800cca2:	4620      	mov	r0, r4
 800cca4:	f002 f97e 	bl	800efa4 <__d2b>
 800cca8:	ec4b ab18 	vmov	d8, sl, fp
 800ccac:	9018      	str	r0, [sp, #96]	; 0x60
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f43f aef6 	beq.w	800caa0 <_strtod_l+0x490>
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f001 fec8 	bl	800ea4c <__i2b>
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f43f aeee 	beq.w	800caa0 <_strtod_l+0x490>
 800ccc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccc6:	9904      	ldr	r1, [sp, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfab      	itete	ge
 800cccc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ccd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ccd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ccd6:	bfac      	ite	ge
 800ccd8:	eb03 0902 	addge.w	r9, r3, r2
 800ccdc:	1ad7      	sublt	r7, r2, r3
 800ccde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cce0:	eba3 0801 	sub.w	r8, r3, r1
 800cce4:	4490      	add	r8, r2
 800cce6:	4ba1      	ldr	r3, [pc, #644]	; (800cf6c <_strtod_l+0x95c>)
 800cce8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccec:	4598      	cmp	r8, r3
 800ccee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ccf2:	f280 80c7 	bge.w	800ce84 <_strtod_l+0x874>
 800ccf6:	eba3 0308 	sub.w	r3, r3, r8
 800ccfa:	2b1f      	cmp	r3, #31
 800ccfc:	eba2 0203 	sub.w	r2, r2, r3
 800cd00:	f04f 0101 	mov.w	r1, #1
 800cd04:	f300 80b1 	bgt.w	800ce6a <_strtod_l+0x85a>
 800cd08:	fa01 f303 	lsl.w	r3, r1, r3
 800cd0c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9308      	str	r3, [sp, #32]
 800cd12:	eb09 0802 	add.w	r8, r9, r2
 800cd16:	9b04      	ldr	r3, [sp, #16]
 800cd18:	45c1      	cmp	r9, r8
 800cd1a:	4417      	add	r7, r2
 800cd1c:	441f      	add	r7, r3
 800cd1e:	464b      	mov	r3, r9
 800cd20:	bfa8      	it	ge
 800cd22:	4643      	movge	r3, r8
 800cd24:	42bb      	cmp	r3, r7
 800cd26:	bfa8      	it	ge
 800cd28:	463b      	movge	r3, r7
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	bfc2      	ittt	gt
 800cd2e:	eba8 0803 	subgt.w	r8, r8, r3
 800cd32:	1aff      	subgt	r7, r7, r3
 800cd34:	eba9 0903 	subgt.w	r9, r9, r3
 800cd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dd17      	ble.n	800cd6e <_strtod_l+0x75e>
 800cd3e:	4631      	mov	r1, r6
 800cd40:	461a      	mov	r2, r3
 800cd42:	4620      	mov	r0, r4
 800cd44:	f001 ff42 	bl	800ebcc <__pow5mult>
 800cd48:	4606      	mov	r6, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	f43f aea8 	beq.w	800caa0 <_strtod_l+0x490>
 800cd50:	4601      	mov	r1, r0
 800cd52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd54:	4620      	mov	r0, r4
 800cd56:	f001 fe8f 	bl	800ea78 <__multiply>
 800cd5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	f43f ae9f 	beq.w	800caa0 <_strtod_l+0x490>
 800cd62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 fd6f 	bl	800e848 <_Bfree>
 800cd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd6c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd6e:	f1b8 0f00 	cmp.w	r8, #0
 800cd72:	f300 808c 	bgt.w	800ce8e <_strtod_l+0x87e>
 800cd76:	9b06      	ldr	r3, [sp, #24]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	dd08      	ble.n	800cd8e <_strtod_l+0x77e>
 800cd7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd7e:	9905      	ldr	r1, [sp, #20]
 800cd80:	4620      	mov	r0, r4
 800cd82:	f001 ff23 	bl	800ebcc <__pow5mult>
 800cd86:	9005      	str	r0, [sp, #20]
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	f43f ae89 	beq.w	800caa0 <_strtod_l+0x490>
 800cd8e:	2f00      	cmp	r7, #0
 800cd90:	dd08      	ble.n	800cda4 <_strtod_l+0x794>
 800cd92:	9905      	ldr	r1, [sp, #20]
 800cd94:	463a      	mov	r2, r7
 800cd96:	4620      	mov	r0, r4
 800cd98:	f001 ff72 	bl	800ec80 <__lshift>
 800cd9c:	9005      	str	r0, [sp, #20]
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f43f ae7e 	beq.w	800caa0 <_strtod_l+0x490>
 800cda4:	f1b9 0f00 	cmp.w	r9, #0
 800cda8:	dd08      	ble.n	800cdbc <_strtod_l+0x7ac>
 800cdaa:	4631      	mov	r1, r6
 800cdac:	464a      	mov	r2, r9
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f001 ff66 	bl	800ec80 <__lshift>
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f ae72 	beq.w	800caa0 <_strtod_l+0x490>
 800cdbc:	9a05      	ldr	r2, [sp, #20]
 800cdbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f001 ffe9 	bl	800ed98 <__mdiff>
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f ae69 	beq.w	800caa0 <_strtod_l+0x490>
 800cdce:	68c3      	ldr	r3, [r0, #12]
 800cdd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60c3      	str	r3, [r0, #12]
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	f001 ffc2 	bl	800ed60 <__mcmp>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	da60      	bge.n	800cea2 <_strtod_l+0x892>
 800cde0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde2:	ea53 030a 	orrs.w	r3, r3, sl
 800cde6:	f040 8082 	bne.w	800ceee <_strtod_l+0x8de>
 800cdea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d17d      	bne.n	800ceee <_strtod_l+0x8de>
 800cdf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdf6:	0d1b      	lsrs	r3, r3, #20
 800cdf8:	051b      	lsls	r3, r3, #20
 800cdfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cdfe:	d976      	bls.n	800ceee <_strtod_l+0x8de>
 800ce00:	696b      	ldr	r3, [r5, #20]
 800ce02:	b913      	cbnz	r3, 800ce0a <_strtod_l+0x7fa>
 800ce04:	692b      	ldr	r3, [r5, #16]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	dd71      	ble.n	800ceee <_strtod_l+0x8de>
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f001 ff36 	bl	800ec80 <__lshift>
 800ce14:	4631      	mov	r1, r6
 800ce16:	4605      	mov	r5, r0
 800ce18:	f001 ffa2 	bl	800ed60 <__mcmp>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	dd66      	ble.n	800ceee <_strtod_l+0x8de>
 800ce20:	9904      	ldr	r1, [sp, #16]
 800ce22:	4a53      	ldr	r2, [pc, #332]	; (800cf70 <_strtod_l+0x960>)
 800ce24:	465b      	mov	r3, fp
 800ce26:	2900      	cmp	r1, #0
 800ce28:	f000 8081 	beq.w	800cf2e <_strtod_l+0x91e>
 800ce2c:	ea02 010b 	and.w	r1, r2, fp
 800ce30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce34:	dc7b      	bgt.n	800cf2e <_strtod_l+0x91e>
 800ce36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce3a:	f77f aea9 	ble.w	800cb90 <_strtod_l+0x580>
 800ce3e:	4b4d      	ldr	r3, [pc, #308]	; (800cf74 <_strtod_l+0x964>)
 800ce40:	4650      	mov	r0, sl
 800ce42:	4659      	mov	r1, fp
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7f3 fc07 	bl	8000658 <__aeabi_dmul>
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	4303      	orrs	r3, r0
 800ce4e:	bf08      	it	eq
 800ce50:	2322      	moveq	r3, #34	; 0x22
 800ce52:	4682      	mov	sl, r0
 800ce54:	468b      	mov	fp, r1
 800ce56:	bf08      	it	eq
 800ce58:	6023      	streq	r3, [r4, #0]
 800ce5a:	e62b      	b.n	800cab4 <_strtod_l+0x4a4>
 800ce5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	ea03 0a0a 	and.w	sl, r3, sl
 800ce68:	e6e3      	b.n	800cc32 <_strtod_l+0x622>
 800ce6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ce72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ce76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ce7a:	fa01 f308 	lsl.w	r3, r1, r8
 800ce7e:	9308      	str	r3, [sp, #32]
 800ce80:	910d      	str	r1, [sp, #52]	; 0x34
 800ce82:	e746      	b.n	800cd12 <_strtod_l+0x702>
 800ce84:	2300      	movs	r3, #0
 800ce86:	9308      	str	r3, [sp, #32]
 800ce88:	2301      	movs	r3, #1
 800ce8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce8c:	e741      	b.n	800cd12 <_strtod_l+0x702>
 800ce8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce90:	4642      	mov	r2, r8
 800ce92:	4620      	mov	r0, r4
 800ce94:	f001 fef4 	bl	800ec80 <__lshift>
 800ce98:	9018      	str	r0, [sp, #96]	; 0x60
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	f47f af6b 	bne.w	800cd76 <_strtod_l+0x766>
 800cea0:	e5fe      	b.n	800caa0 <_strtod_l+0x490>
 800cea2:	465f      	mov	r7, fp
 800cea4:	d16e      	bne.n	800cf84 <_strtod_l+0x974>
 800cea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceac:	b342      	cbz	r2, 800cf00 <_strtod_l+0x8f0>
 800ceae:	4a32      	ldr	r2, [pc, #200]	; (800cf78 <_strtod_l+0x968>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d128      	bne.n	800cf06 <_strtod_l+0x8f6>
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	4651      	mov	r1, sl
 800ceb8:	b1eb      	cbz	r3, 800cef6 <_strtod_l+0x8e6>
 800ceba:	4b2d      	ldr	r3, [pc, #180]	; (800cf70 <_strtod_l+0x960>)
 800cebc:	403b      	ands	r3, r7
 800cebe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cec2:	f04f 32ff 	mov.w	r2, #4294967295
 800cec6:	d819      	bhi.n	800cefc <_strtod_l+0x8ec>
 800cec8:	0d1b      	lsrs	r3, r3, #20
 800ceca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cece:	fa02 f303 	lsl.w	r3, r2, r3
 800ced2:	4299      	cmp	r1, r3
 800ced4:	d117      	bne.n	800cf06 <_strtod_l+0x8f6>
 800ced6:	4b29      	ldr	r3, [pc, #164]	; (800cf7c <_strtod_l+0x96c>)
 800ced8:	429f      	cmp	r7, r3
 800ceda:	d102      	bne.n	800cee2 <_strtod_l+0x8d2>
 800cedc:	3101      	adds	r1, #1
 800cede:	f43f addf 	beq.w	800caa0 <_strtod_l+0x490>
 800cee2:	4b23      	ldr	r3, [pc, #140]	; (800cf70 <_strtod_l+0x960>)
 800cee4:	403b      	ands	r3, r7
 800cee6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ceea:	f04f 0a00 	mov.w	sl, #0
 800ceee:	9b04      	ldr	r3, [sp, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1a4      	bne.n	800ce3e <_strtod_l+0x82e>
 800cef4:	e5de      	b.n	800cab4 <_strtod_l+0x4a4>
 800cef6:	f04f 33ff 	mov.w	r3, #4294967295
 800cefa:	e7ea      	b.n	800ced2 <_strtod_l+0x8c2>
 800cefc:	4613      	mov	r3, r2
 800cefe:	e7e8      	b.n	800ced2 <_strtod_l+0x8c2>
 800cf00:	ea53 030a 	orrs.w	r3, r3, sl
 800cf04:	d08c      	beq.n	800ce20 <_strtod_l+0x810>
 800cf06:	9b08      	ldr	r3, [sp, #32]
 800cf08:	b1db      	cbz	r3, 800cf42 <_strtod_l+0x932>
 800cf0a:	423b      	tst	r3, r7
 800cf0c:	d0ef      	beq.n	800ceee <_strtod_l+0x8de>
 800cf0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf10:	9a04      	ldr	r2, [sp, #16]
 800cf12:	4650      	mov	r0, sl
 800cf14:	4659      	mov	r1, fp
 800cf16:	b1c3      	cbz	r3, 800cf4a <_strtod_l+0x93a>
 800cf18:	f7ff fb5d 	bl	800c5d6 <sulp>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	ec51 0b18 	vmov	r0, r1, d8
 800cf24:	f7f3 f9e2 	bl	80002ec <__adddf3>
 800cf28:	4682      	mov	sl, r0
 800cf2a:	468b      	mov	fp, r1
 800cf2c:	e7df      	b.n	800ceee <_strtod_l+0x8de>
 800cf2e:	4013      	ands	r3, r2
 800cf30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf3c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf40:	e7d5      	b.n	800ceee <_strtod_l+0x8de>
 800cf42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf44:	ea13 0f0a 	tst.w	r3, sl
 800cf48:	e7e0      	b.n	800cf0c <_strtod_l+0x8fc>
 800cf4a:	f7ff fb44 	bl	800c5d6 <sulp>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	ec51 0b18 	vmov	r0, r1, d8
 800cf56:	f7f3 f9c7 	bl	80002e8 <__aeabi_dsub>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4682      	mov	sl, r0
 800cf60:	468b      	mov	fp, r1
 800cf62:	f7f3 fde1 	bl	8000b28 <__aeabi_dcmpeq>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d0c1      	beq.n	800ceee <_strtod_l+0x8de>
 800cf6a:	e611      	b.n	800cb90 <_strtod_l+0x580>
 800cf6c:	fffffc02 	.word	0xfffffc02
 800cf70:	7ff00000 	.word	0x7ff00000
 800cf74:	39500000 	.word	0x39500000
 800cf78:	000fffff 	.word	0x000fffff
 800cf7c:	7fefffff 	.word	0x7fefffff
 800cf80:	080127a0 	.word	0x080127a0
 800cf84:	4631      	mov	r1, r6
 800cf86:	4628      	mov	r0, r5
 800cf88:	f002 f868 	bl	800f05c <__ratio>
 800cf8c:	ec59 8b10 	vmov	r8, r9, d0
 800cf90:	ee10 0a10 	vmov	r0, s0
 800cf94:	2200      	movs	r2, #0
 800cf96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	f7f3 fdd8 	bl	8000b50 <__aeabi_dcmple>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d07a      	beq.n	800d09a <_strtod_l+0xa8a>
 800cfa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d04a      	beq.n	800d040 <_strtod_l+0xa30>
 800cfaa:	4b95      	ldr	r3, [pc, #596]	; (800d200 <_strtod_l+0xbf0>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d200 <_strtod_l+0xbf0>
 800cfb6:	f04f 0800 	mov.w	r8, #0
 800cfba:	4b92      	ldr	r3, [pc, #584]	; (800d204 <_strtod_l+0xbf4>)
 800cfbc:	403b      	ands	r3, r7
 800cfbe:	930d      	str	r3, [sp, #52]	; 0x34
 800cfc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfc2:	4b91      	ldr	r3, [pc, #580]	; (800d208 <_strtod_l+0xbf8>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	f040 80b0 	bne.w	800d12a <_strtod_l+0xb1a>
 800cfca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cfd2:	ec4b ab10 	vmov	d0, sl, fp
 800cfd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfda:	f001 ff67 	bl	800eeac <__ulp>
 800cfde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfe2:	ec53 2b10 	vmov	r2, r3, d0
 800cfe6:	f7f3 fb37 	bl	8000658 <__aeabi_dmul>
 800cfea:	4652      	mov	r2, sl
 800cfec:	465b      	mov	r3, fp
 800cfee:	f7f3 f97d 	bl	80002ec <__adddf3>
 800cff2:	460b      	mov	r3, r1
 800cff4:	4983      	ldr	r1, [pc, #524]	; (800d204 <_strtod_l+0xbf4>)
 800cff6:	4a85      	ldr	r2, [pc, #532]	; (800d20c <_strtod_l+0xbfc>)
 800cff8:	4019      	ands	r1, r3
 800cffa:	4291      	cmp	r1, r2
 800cffc:	4682      	mov	sl, r0
 800cffe:	d960      	bls.n	800d0c2 <_strtod_l+0xab2>
 800d000:	ee18 3a90 	vmov	r3, s17
 800d004:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d008:	4293      	cmp	r3, r2
 800d00a:	d104      	bne.n	800d016 <_strtod_l+0xa06>
 800d00c:	ee18 3a10 	vmov	r3, s16
 800d010:	3301      	adds	r3, #1
 800d012:	f43f ad45 	beq.w	800caa0 <_strtod_l+0x490>
 800d016:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d218 <_strtod_l+0xc08>
 800d01a:	f04f 3aff 	mov.w	sl, #4294967295
 800d01e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d020:	4620      	mov	r0, r4
 800d022:	f001 fc11 	bl	800e848 <_Bfree>
 800d026:	9905      	ldr	r1, [sp, #20]
 800d028:	4620      	mov	r0, r4
 800d02a:	f001 fc0d 	bl	800e848 <_Bfree>
 800d02e:	4631      	mov	r1, r6
 800d030:	4620      	mov	r0, r4
 800d032:	f001 fc09 	bl	800e848 <_Bfree>
 800d036:	4629      	mov	r1, r5
 800d038:	4620      	mov	r0, r4
 800d03a:	f001 fc05 	bl	800e848 <_Bfree>
 800d03e:	e61a      	b.n	800cc76 <_strtod_l+0x666>
 800d040:	f1ba 0f00 	cmp.w	sl, #0
 800d044:	d11b      	bne.n	800d07e <_strtod_l+0xa6e>
 800d046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d04a:	b9f3      	cbnz	r3, 800d08a <_strtod_l+0xa7a>
 800d04c:	4b6c      	ldr	r3, [pc, #432]	; (800d200 <_strtod_l+0xbf0>)
 800d04e:	2200      	movs	r2, #0
 800d050:	4640      	mov	r0, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f7f3 fd72 	bl	8000b3c <__aeabi_dcmplt>
 800d058:	b9d0      	cbnz	r0, 800d090 <_strtod_l+0xa80>
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	4b6c      	ldr	r3, [pc, #432]	; (800d210 <_strtod_l+0xc00>)
 800d060:	2200      	movs	r2, #0
 800d062:	f7f3 faf9 	bl	8000658 <__aeabi_dmul>
 800d066:	4680      	mov	r8, r0
 800d068:	4689      	mov	r9, r1
 800d06a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d06e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d072:	9315      	str	r3, [sp, #84]	; 0x54
 800d074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d07c:	e79d      	b.n	800cfba <_strtod_l+0x9aa>
 800d07e:	f1ba 0f01 	cmp.w	sl, #1
 800d082:	d102      	bne.n	800d08a <_strtod_l+0xa7a>
 800d084:	2f00      	cmp	r7, #0
 800d086:	f43f ad83 	beq.w	800cb90 <_strtod_l+0x580>
 800d08a:	4b62      	ldr	r3, [pc, #392]	; (800d214 <_strtod_l+0xc04>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	e78e      	b.n	800cfae <_strtod_l+0x99e>
 800d090:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d210 <_strtod_l+0xc00>
 800d094:	f04f 0800 	mov.w	r8, #0
 800d098:	e7e7      	b.n	800d06a <_strtod_l+0xa5a>
 800d09a:	4b5d      	ldr	r3, [pc, #372]	; (800d210 <_strtod_l+0xc00>)
 800d09c:	4640      	mov	r0, r8
 800d09e:	4649      	mov	r1, r9
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f7f3 fad9 	bl	8000658 <__aeabi_dmul>
 800d0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	4689      	mov	r9, r1
 800d0ac:	b933      	cbnz	r3, 800d0bc <_strtod_l+0xaac>
 800d0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0b2:	900e      	str	r0, [sp, #56]	; 0x38
 800d0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0ba:	e7dd      	b.n	800d078 <_strtod_l+0xa68>
 800d0bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d0c0:	e7f9      	b.n	800d0b6 <_strtod_l+0xaa6>
 800d0c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1a8      	bne.n	800d01e <_strtod_l+0xa0e>
 800d0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0d2:	0d1b      	lsrs	r3, r3, #20
 800d0d4:	051b      	lsls	r3, r3, #20
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d1a1      	bne.n	800d01e <_strtod_l+0xa0e>
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 ff79 	bl	8000fd4 <__aeabi_d2lz>
 800d0e2:	f7f3 fa8b 	bl	80005fc <__aeabi_l2d>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	f7f3 f8fb 	bl	80002e8 <__aeabi_dsub>
 800d0f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0f8:	ea43 030a 	orr.w	r3, r3, sl
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	4680      	mov	r8, r0
 800d100:	4689      	mov	r9, r1
 800d102:	d055      	beq.n	800d1b0 <_strtod_l+0xba0>
 800d104:	a336      	add	r3, pc, #216	; (adr r3, 800d1e0 <_strtod_l+0xbd0>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7f3 fd17 	bl	8000b3c <__aeabi_dcmplt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	f47f acd0 	bne.w	800cab4 <_strtod_l+0x4a4>
 800d114:	a334      	add	r3, pc, #208	; (adr r3, 800d1e8 <_strtod_l+0xbd8>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	f7f3 fd2b 	bl	8000b78 <__aeabi_dcmpgt>
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f af7b 	beq.w	800d01e <_strtod_l+0xa0e>
 800d128:	e4c4      	b.n	800cab4 <_strtod_l+0x4a4>
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	b333      	cbz	r3, 800d17c <_strtod_l+0xb6c>
 800d12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d130:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d134:	d822      	bhi.n	800d17c <_strtod_l+0xb6c>
 800d136:	a32e      	add	r3, pc, #184	; (adr r3, 800d1f0 <_strtod_l+0xbe0>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	4640      	mov	r0, r8
 800d13e:	4649      	mov	r1, r9
 800d140:	f7f3 fd06 	bl	8000b50 <__aeabi_dcmple>
 800d144:	b1a0      	cbz	r0, 800d170 <_strtod_l+0xb60>
 800d146:	4649      	mov	r1, r9
 800d148:	4640      	mov	r0, r8
 800d14a:	f7f3 fd5d 	bl	8000c08 <__aeabi_d2uiz>
 800d14e:	2801      	cmp	r0, #1
 800d150:	bf38      	it	cc
 800d152:	2001      	movcc	r0, #1
 800d154:	f7f3 fa06 	bl	8000564 <__aeabi_ui2d>
 800d158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15a:	4680      	mov	r8, r0
 800d15c:	4689      	mov	r9, r1
 800d15e:	bb23      	cbnz	r3, 800d1aa <_strtod_l+0xb9a>
 800d160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d164:	9010      	str	r0, [sp, #64]	; 0x40
 800d166:	9311      	str	r3, [sp, #68]	; 0x44
 800d168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d16c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d174:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	9309      	str	r3, [sp, #36]	; 0x24
 800d17c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d180:	eeb0 0a48 	vmov.f32	s0, s16
 800d184:	eef0 0a68 	vmov.f32	s1, s17
 800d188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d18c:	f001 fe8e 	bl	800eeac <__ulp>
 800d190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d194:	ec53 2b10 	vmov	r2, r3, d0
 800d198:	f7f3 fa5e 	bl	8000658 <__aeabi_dmul>
 800d19c:	ec53 2b18 	vmov	r2, r3, d8
 800d1a0:	f7f3 f8a4 	bl	80002ec <__adddf3>
 800d1a4:	4682      	mov	sl, r0
 800d1a6:	468b      	mov	fp, r1
 800d1a8:	e78d      	b.n	800d0c6 <_strtod_l+0xab6>
 800d1aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d1ae:	e7db      	b.n	800d168 <_strtod_l+0xb58>
 800d1b0:	a311      	add	r3, pc, #68	; (adr r3, 800d1f8 <_strtod_l+0xbe8>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 fcc1 	bl	8000b3c <__aeabi_dcmplt>
 800d1ba:	e7b2      	b.n	800d122 <_strtod_l+0xb12>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	930a      	str	r3, [sp, #40]	; 0x28
 800d1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	f7ff ba6b 	b.w	800c6a0 <_strtod_l+0x90>
 800d1ca:	2a65      	cmp	r2, #101	; 0x65
 800d1cc:	f43f ab5f 	beq.w	800c88e <_strtod_l+0x27e>
 800d1d0:	2a45      	cmp	r2, #69	; 0x45
 800d1d2:	f43f ab5c 	beq.w	800c88e <_strtod_l+0x27e>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	f7ff bb94 	b.w	800c904 <_strtod_l+0x2f4>
 800d1dc:	f3af 8000 	nop.w
 800d1e0:	94a03595 	.word	0x94a03595
 800d1e4:	3fdfffff 	.word	0x3fdfffff
 800d1e8:	35afe535 	.word	0x35afe535
 800d1ec:	3fe00000 	.word	0x3fe00000
 800d1f0:	ffc00000 	.word	0xffc00000
 800d1f4:	41dfffff 	.word	0x41dfffff
 800d1f8:	94a03595 	.word	0x94a03595
 800d1fc:	3fcfffff 	.word	0x3fcfffff
 800d200:	3ff00000 	.word	0x3ff00000
 800d204:	7ff00000 	.word	0x7ff00000
 800d208:	7fe00000 	.word	0x7fe00000
 800d20c:	7c9fffff 	.word	0x7c9fffff
 800d210:	3fe00000 	.word	0x3fe00000
 800d214:	bff00000 	.word	0xbff00000
 800d218:	7fefffff 	.word	0x7fefffff

0800d21c <_strtod_r>:
 800d21c:	4b01      	ldr	r3, [pc, #4]	; (800d224 <_strtod_r+0x8>)
 800d21e:	f7ff b9f7 	b.w	800c610 <_strtod_l>
 800d222:	bf00      	nop
 800d224:	2000007c 	.word	0x2000007c

0800d228 <_strtol_l.constprop.0>:
 800d228:	2b01      	cmp	r3, #1
 800d22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d22e:	d001      	beq.n	800d234 <_strtol_l.constprop.0+0xc>
 800d230:	2b24      	cmp	r3, #36	; 0x24
 800d232:	d906      	bls.n	800d242 <_strtol_l.constprop.0+0x1a>
 800d234:	f7fe fa6e 	bl	800b714 <__errno>
 800d238:	2316      	movs	r3, #22
 800d23a:	6003      	str	r3, [r0, #0]
 800d23c:	2000      	movs	r0, #0
 800d23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d328 <_strtol_l.constprop.0+0x100>
 800d246:	460d      	mov	r5, r1
 800d248:	462e      	mov	r6, r5
 800d24a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d24e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d252:	f017 0708 	ands.w	r7, r7, #8
 800d256:	d1f7      	bne.n	800d248 <_strtol_l.constprop.0+0x20>
 800d258:	2c2d      	cmp	r4, #45	; 0x2d
 800d25a:	d132      	bne.n	800d2c2 <_strtol_l.constprop.0+0x9a>
 800d25c:	782c      	ldrb	r4, [r5, #0]
 800d25e:	2701      	movs	r7, #1
 800d260:	1cb5      	adds	r5, r6, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d05b      	beq.n	800d31e <_strtol_l.constprop.0+0xf6>
 800d266:	2b10      	cmp	r3, #16
 800d268:	d109      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d26a:	2c30      	cmp	r4, #48	; 0x30
 800d26c:	d107      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d26e:	782c      	ldrb	r4, [r5, #0]
 800d270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d274:	2c58      	cmp	r4, #88	; 0x58
 800d276:	d14d      	bne.n	800d314 <_strtol_l.constprop.0+0xec>
 800d278:	786c      	ldrb	r4, [r5, #1]
 800d27a:	2310      	movs	r3, #16
 800d27c:	3502      	adds	r5, #2
 800d27e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d282:	f108 38ff 	add.w	r8, r8, #4294967295
 800d286:	f04f 0c00 	mov.w	ip, #0
 800d28a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d28e:	4666      	mov	r6, ip
 800d290:	fb03 8a19 	mls	sl, r3, r9, r8
 800d294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d298:	f1be 0f09 	cmp.w	lr, #9
 800d29c:	d816      	bhi.n	800d2cc <_strtol_l.constprop.0+0xa4>
 800d29e:	4674      	mov	r4, lr
 800d2a0:	42a3      	cmp	r3, r4
 800d2a2:	dd24      	ble.n	800d2ee <_strtol_l.constprop.0+0xc6>
 800d2a4:	f1bc 0f00 	cmp.w	ip, #0
 800d2a8:	db1e      	blt.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2aa:	45b1      	cmp	r9, r6
 800d2ac:	d31c      	bcc.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2ae:	d101      	bne.n	800d2b4 <_strtol_l.constprop.0+0x8c>
 800d2b0:	45a2      	cmp	sl, r4
 800d2b2:	db19      	blt.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2b4:	fb06 4603 	mla	r6, r6, r3, r4
 800d2b8:	f04f 0c01 	mov.w	ip, #1
 800d2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2c0:	e7e8      	b.n	800d294 <_strtol_l.constprop.0+0x6c>
 800d2c2:	2c2b      	cmp	r4, #43	; 0x2b
 800d2c4:	bf04      	itt	eq
 800d2c6:	782c      	ldrbeq	r4, [r5, #0]
 800d2c8:	1cb5      	addeq	r5, r6, #2
 800d2ca:	e7ca      	b.n	800d262 <_strtol_l.constprop.0+0x3a>
 800d2cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d2d0:	f1be 0f19 	cmp.w	lr, #25
 800d2d4:	d801      	bhi.n	800d2da <_strtol_l.constprop.0+0xb2>
 800d2d6:	3c37      	subs	r4, #55	; 0x37
 800d2d8:	e7e2      	b.n	800d2a0 <_strtol_l.constprop.0+0x78>
 800d2da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d2de:	f1be 0f19 	cmp.w	lr, #25
 800d2e2:	d804      	bhi.n	800d2ee <_strtol_l.constprop.0+0xc6>
 800d2e4:	3c57      	subs	r4, #87	; 0x57
 800d2e6:	e7db      	b.n	800d2a0 <_strtol_l.constprop.0+0x78>
 800d2e8:	f04f 3cff 	mov.w	ip, #4294967295
 800d2ec:	e7e6      	b.n	800d2bc <_strtol_l.constprop.0+0x94>
 800d2ee:	f1bc 0f00 	cmp.w	ip, #0
 800d2f2:	da05      	bge.n	800d300 <_strtol_l.constprop.0+0xd8>
 800d2f4:	2322      	movs	r3, #34	; 0x22
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	4646      	mov	r6, r8
 800d2fa:	b942      	cbnz	r2, 800d30e <_strtol_l.constprop.0+0xe6>
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	e79e      	b.n	800d23e <_strtol_l.constprop.0+0x16>
 800d300:	b107      	cbz	r7, 800d304 <_strtol_l.constprop.0+0xdc>
 800d302:	4276      	negs	r6, r6
 800d304:	2a00      	cmp	r2, #0
 800d306:	d0f9      	beq.n	800d2fc <_strtol_l.constprop.0+0xd4>
 800d308:	f1bc 0f00 	cmp.w	ip, #0
 800d30c:	d000      	beq.n	800d310 <_strtol_l.constprop.0+0xe8>
 800d30e:	1e69      	subs	r1, r5, #1
 800d310:	6011      	str	r1, [r2, #0]
 800d312:	e7f3      	b.n	800d2fc <_strtol_l.constprop.0+0xd4>
 800d314:	2430      	movs	r4, #48	; 0x30
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1b1      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d31a:	2308      	movs	r3, #8
 800d31c:	e7af      	b.n	800d27e <_strtol_l.constprop.0+0x56>
 800d31e:	2c30      	cmp	r4, #48	; 0x30
 800d320:	d0a5      	beq.n	800d26e <_strtol_l.constprop.0+0x46>
 800d322:	230a      	movs	r3, #10
 800d324:	e7ab      	b.n	800d27e <_strtol_l.constprop.0+0x56>
 800d326:	bf00      	nop
 800d328:	080127c9 	.word	0x080127c9

0800d32c <_strtol_r>:
 800d32c:	f7ff bf7c 	b.w	800d228 <_strtol_l.constprop.0>

0800d330 <_write_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d07      	ldr	r5, [pc, #28]	; (800d350 <_write_r+0x20>)
 800d334:	4604      	mov	r4, r0
 800d336:	4608      	mov	r0, r1
 800d338:	4611      	mov	r1, r2
 800d33a:	2200      	movs	r2, #0
 800d33c:	602a      	str	r2, [r5, #0]
 800d33e:	461a      	mov	r2, r3
 800d340:	f7f8 fb35 	bl	80059ae <_write>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d102      	bne.n	800d34e <_write_r+0x1e>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	b103      	cbz	r3, 800d34e <_write_r+0x1e>
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	2000122c 	.word	0x2000122c

0800d354 <_close_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d06      	ldr	r5, [pc, #24]	; (800d370 <_close_r+0x1c>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	602b      	str	r3, [r5, #0]
 800d360:	f7f8 fb41 	bl	80059e6 <_close>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_close_r+0x1a>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_close_r+0x1a>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	2000122c 	.word	0x2000122c

0800d374 <quorem>:
 800d374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	6903      	ldr	r3, [r0, #16]
 800d37a:	690c      	ldr	r4, [r1, #16]
 800d37c:	42a3      	cmp	r3, r4
 800d37e:	4607      	mov	r7, r0
 800d380:	f2c0 8081 	blt.w	800d486 <quorem+0x112>
 800d384:	3c01      	subs	r4, #1
 800d386:	f101 0814 	add.w	r8, r1, #20
 800d38a:	f100 0514 	add.w	r5, r0, #20
 800d38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d392:	9301      	str	r3, [sp, #4]
 800d394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d39c:	3301      	adds	r3, #1
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3ac:	d331      	bcc.n	800d412 <quorem+0x9e>
 800d3ae:	f04f 0e00 	mov.w	lr, #0
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	46ac      	mov	ip, r5
 800d3b6:	46f2      	mov	sl, lr
 800d3b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3bc:	b293      	uxth	r3, r2
 800d3be:	fb06 e303 	mla	r3, r6, r3, lr
 800d3c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d3cc:	f8dc a000 	ldr.w	sl, [ip]
 800d3d0:	0c12      	lsrs	r2, r2, #16
 800d3d2:	fa13 f38a 	uxtah	r3, r3, sl
 800d3d6:	fb06 e202 	mla	r2, r6, r2, lr
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	9b00      	ldr	r3, [sp, #0]
 800d3de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3e2:	b292      	uxth	r2, r2
 800d3e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800d3f0:	4581      	cmp	r9, r0
 800d3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3f6:	f84c 3b04 	str.w	r3, [ip], #4
 800d3fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3fe:	d2db      	bcs.n	800d3b8 <quorem+0x44>
 800d400:	f855 300b 	ldr.w	r3, [r5, fp]
 800d404:	b92b      	cbnz	r3, 800d412 <quorem+0x9e>
 800d406:	9b01      	ldr	r3, [sp, #4]
 800d408:	3b04      	subs	r3, #4
 800d40a:	429d      	cmp	r5, r3
 800d40c:	461a      	mov	r2, r3
 800d40e:	d32e      	bcc.n	800d46e <quorem+0xfa>
 800d410:	613c      	str	r4, [r7, #16]
 800d412:	4638      	mov	r0, r7
 800d414:	f001 fca4 	bl	800ed60 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	db24      	blt.n	800d466 <quorem+0xf2>
 800d41c:	3601      	adds	r6, #1
 800d41e:	4628      	mov	r0, r5
 800d420:	f04f 0c00 	mov.w	ip, #0
 800d424:	f858 2b04 	ldr.w	r2, [r8], #4
 800d428:	f8d0 e000 	ldr.w	lr, [r0]
 800d42c:	b293      	uxth	r3, r2
 800d42e:	ebac 0303 	sub.w	r3, ip, r3
 800d432:	0c12      	lsrs	r2, r2, #16
 800d434:	fa13 f38e 	uxtah	r3, r3, lr
 800d438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d440:	b29b      	uxth	r3, r3
 800d442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d446:	45c1      	cmp	r9, r8
 800d448:	f840 3b04 	str.w	r3, [r0], #4
 800d44c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d450:	d2e8      	bcs.n	800d424 <quorem+0xb0>
 800d452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d45a:	b922      	cbnz	r2, 800d466 <quorem+0xf2>
 800d45c:	3b04      	subs	r3, #4
 800d45e:	429d      	cmp	r5, r3
 800d460:	461a      	mov	r2, r3
 800d462:	d30a      	bcc.n	800d47a <quorem+0x106>
 800d464:	613c      	str	r4, [r7, #16]
 800d466:	4630      	mov	r0, r6
 800d468:	b003      	add	sp, #12
 800d46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46e:	6812      	ldr	r2, [r2, #0]
 800d470:	3b04      	subs	r3, #4
 800d472:	2a00      	cmp	r2, #0
 800d474:	d1cc      	bne.n	800d410 <quorem+0x9c>
 800d476:	3c01      	subs	r4, #1
 800d478:	e7c7      	b.n	800d40a <quorem+0x96>
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	3b04      	subs	r3, #4
 800d47e:	2a00      	cmp	r2, #0
 800d480:	d1f0      	bne.n	800d464 <quorem+0xf0>
 800d482:	3c01      	subs	r4, #1
 800d484:	e7eb      	b.n	800d45e <quorem+0xea>
 800d486:	2000      	movs	r0, #0
 800d488:	e7ee      	b.n	800d468 <quorem+0xf4>
 800d48a:	0000      	movs	r0, r0
 800d48c:	0000      	movs	r0, r0
	...

0800d490 <_dtoa_r>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	ed2d 8b04 	vpush	{d8-d9}
 800d498:	ec57 6b10 	vmov	r6, r7, d0
 800d49c:	b093      	sub	sp, #76	; 0x4c
 800d49e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4a4:	9106      	str	r1, [sp, #24]
 800d4a6:	ee10 aa10 	vmov	sl, s0
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d4b0:	46bb      	mov	fp, r7
 800d4b2:	b975      	cbnz	r5, 800d4d2 <_dtoa_r+0x42>
 800d4b4:	2010      	movs	r0, #16
 800d4b6:	f001 f95f 	bl	800e778 <malloc>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	6260      	str	r0, [r4, #36]	; 0x24
 800d4be:	b920      	cbnz	r0, 800d4ca <_dtoa_r+0x3a>
 800d4c0:	4ba7      	ldr	r3, [pc, #668]	; (800d760 <_dtoa_r+0x2d0>)
 800d4c2:	21ea      	movs	r1, #234	; 0xea
 800d4c4:	48a7      	ldr	r0, [pc, #668]	; (800d764 <_dtoa_r+0x2d4>)
 800d4c6:	f002 fceb 	bl	800fea0 <__assert_func>
 800d4ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4ce:	6005      	str	r5, [r0, #0]
 800d4d0:	60c5      	str	r5, [r0, #12]
 800d4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4d4:	6819      	ldr	r1, [r3, #0]
 800d4d6:	b151      	cbz	r1, 800d4ee <_dtoa_r+0x5e>
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	604a      	str	r2, [r1, #4]
 800d4dc:	2301      	movs	r3, #1
 800d4de:	4093      	lsls	r3, r2
 800d4e0:	608b      	str	r3, [r1, #8]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f001 f9b0 	bl	800e848 <_Bfree>
 800d4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	1e3b      	subs	r3, r7, #0
 800d4f0:	bfaa      	itet	ge
 800d4f2:	2300      	movge	r3, #0
 800d4f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d4f8:	f8c8 3000 	strge.w	r3, [r8]
 800d4fc:	4b9a      	ldr	r3, [pc, #616]	; (800d768 <_dtoa_r+0x2d8>)
 800d4fe:	bfbc      	itt	lt
 800d500:	2201      	movlt	r2, #1
 800d502:	f8c8 2000 	strlt.w	r2, [r8]
 800d506:	ea33 030b 	bics.w	r3, r3, fp
 800d50a:	d11b      	bne.n	800d544 <_dtoa_r+0xb4>
 800d50c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d50e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d518:	4333      	orrs	r3, r6
 800d51a:	f000 8592 	beq.w	800e042 <_dtoa_r+0xbb2>
 800d51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d520:	b963      	cbnz	r3, 800d53c <_dtoa_r+0xac>
 800d522:	4b92      	ldr	r3, [pc, #584]	; (800d76c <_dtoa_r+0x2dc>)
 800d524:	e022      	b.n	800d56c <_dtoa_r+0xdc>
 800d526:	4b92      	ldr	r3, [pc, #584]	; (800d770 <_dtoa_r+0x2e0>)
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	3308      	adds	r3, #8
 800d52c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	9801      	ldr	r0, [sp, #4]
 800d532:	b013      	add	sp, #76	; 0x4c
 800d534:	ecbd 8b04 	vpop	{d8-d9}
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	4b8b      	ldr	r3, [pc, #556]	; (800d76c <_dtoa_r+0x2dc>)
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	3303      	adds	r3, #3
 800d542:	e7f3      	b.n	800d52c <_dtoa_r+0x9c>
 800d544:	2200      	movs	r2, #0
 800d546:	2300      	movs	r3, #0
 800d548:	4650      	mov	r0, sl
 800d54a:	4659      	mov	r1, fp
 800d54c:	f7f3 faec 	bl	8000b28 <__aeabi_dcmpeq>
 800d550:	ec4b ab19 	vmov	d9, sl, fp
 800d554:	4680      	mov	r8, r0
 800d556:	b158      	cbz	r0, 800d570 <_dtoa_r+0xe0>
 800d558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d55a:	2301      	movs	r3, #1
 800d55c:	6013      	str	r3, [r2, #0]
 800d55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 856b 	beq.w	800e03c <_dtoa_r+0xbac>
 800d566:	4883      	ldr	r0, [pc, #524]	; (800d774 <_dtoa_r+0x2e4>)
 800d568:	6018      	str	r0, [r3, #0]
 800d56a:	1e43      	subs	r3, r0, #1
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	e7df      	b.n	800d530 <_dtoa_r+0xa0>
 800d570:	ec4b ab10 	vmov	d0, sl, fp
 800d574:	aa10      	add	r2, sp, #64	; 0x40
 800d576:	a911      	add	r1, sp, #68	; 0x44
 800d578:	4620      	mov	r0, r4
 800d57a:	f001 fd13 	bl	800efa4 <__d2b>
 800d57e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d582:	ee08 0a10 	vmov	s16, r0
 800d586:	2d00      	cmp	r5, #0
 800d588:	f000 8084 	beq.w	800d694 <_dtoa_r+0x204>
 800d58c:	ee19 3a90 	vmov	r3, s19
 800d590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d598:	4656      	mov	r6, sl
 800d59a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d59e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5a6:	4b74      	ldr	r3, [pc, #464]	; (800d778 <_dtoa_r+0x2e8>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	f7f2 fe9b 	bl	80002e8 <__aeabi_dsub>
 800d5b2:	a365      	add	r3, pc, #404	; (adr r3, 800d748 <_dtoa_r+0x2b8>)
 800d5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b8:	f7f3 f84e 	bl	8000658 <__aeabi_dmul>
 800d5bc:	a364      	add	r3, pc, #400	; (adr r3, 800d750 <_dtoa_r+0x2c0>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f2 fe93 	bl	80002ec <__adddf3>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	f7f2 ffda 	bl	8000584 <__aeabi_i2d>
 800d5d0:	a361      	add	r3, pc, #388	; (adr r3, 800d758 <_dtoa_r+0x2c8>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f7f3 f83f 	bl	8000658 <__aeabi_dmul>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	4630      	mov	r0, r6
 800d5e0:	4639      	mov	r1, r7
 800d5e2:	f7f2 fe83 	bl	80002ec <__adddf3>
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	460f      	mov	r7, r1
 800d5ea:	f7f3 fae5 	bl	8000bb8 <__aeabi_d2iz>
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	9000      	str	r0, [sp, #0]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	f7f3 faa0 	bl	8000b3c <__aeabi_dcmplt>
 800d5fc:	b150      	cbz	r0, 800d614 <_dtoa_r+0x184>
 800d5fe:	9800      	ldr	r0, [sp, #0]
 800d600:	f7f2 ffc0 	bl	8000584 <__aeabi_i2d>
 800d604:	4632      	mov	r2, r6
 800d606:	463b      	mov	r3, r7
 800d608:	f7f3 fa8e 	bl	8000b28 <__aeabi_dcmpeq>
 800d60c:	b910      	cbnz	r0, 800d614 <_dtoa_r+0x184>
 800d60e:	9b00      	ldr	r3, [sp, #0]
 800d610:	3b01      	subs	r3, #1
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	2b16      	cmp	r3, #22
 800d618:	d85a      	bhi.n	800d6d0 <_dtoa_r+0x240>
 800d61a:	9a00      	ldr	r2, [sp, #0]
 800d61c:	4b57      	ldr	r3, [pc, #348]	; (800d77c <_dtoa_r+0x2ec>)
 800d61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	ec51 0b19 	vmov	r0, r1, d9
 800d62a:	f7f3 fa87 	bl	8000b3c <__aeabi_dcmplt>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d050      	beq.n	800d6d4 <_dtoa_r+0x244>
 800d632:	9b00      	ldr	r3, [sp, #0]
 800d634:	3b01      	subs	r3, #1
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	2300      	movs	r3, #0
 800d63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d63e:	1b5d      	subs	r5, r3, r5
 800d640:	1e6b      	subs	r3, r5, #1
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	bf45      	ittet	mi
 800d646:	f1c5 0301 	rsbmi	r3, r5, #1
 800d64a:	9304      	strmi	r3, [sp, #16]
 800d64c:	2300      	movpl	r3, #0
 800d64e:	2300      	movmi	r3, #0
 800d650:	bf4c      	ite	mi
 800d652:	9305      	strmi	r3, [sp, #20]
 800d654:	9304      	strpl	r3, [sp, #16]
 800d656:	9b00      	ldr	r3, [sp, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	db3d      	blt.n	800d6d8 <_dtoa_r+0x248>
 800d65c:	9b05      	ldr	r3, [sp, #20]
 800d65e:	9a00      	ldr	r2, [sp, #0]
 800d660:	920a      	str	r2, [sp, #40]	; 0x28
 800d662:	4413      	add	r3, r2
 800d664:	9305      	str	r3, [sp, #20]
 800d666:	2300      	movs	r3, #0
 800d668:	9307      	str	r3, [sp, #28]
 800d66a:	9b06      	ldr	r3, [sp, #24]
 800d66c:	2b09      	cmp	r3, #9
 800d66e:	f200 8089 	bhi.w	800d784 <_dtoa_r+0x2f4>
 800d672:	2b05      	cmp	r3, #5
 800d674:	bfc4      	itt	gt
 800d676:	3b04      	subgt	r3, #4
 800d678:	9306      	strgt	r3, [sp, #24]
 800d67a:	9b06      	ldr	r3, [sp, #24]
 800d67c:	f1a3 0302 	sub.w	r3, r3, #2
 800d680:	bfcc      	ite	gt
 800d682:	2500      	movgt	r5, #0
 800d684:	2501      	movle	r5, #1
 800d686:	2b03      	cmp	r3, #3
 800d688:	f200 8087 	bhi.w	800d79a <_dtoa_r+0x30a>
 800d68c:	e8df f003 	tbb	[pc, r3]
 800d690:	59383a2d 	.word	0x59383a2d
 800d694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d698:	441d      	add	r5, r3
 800d69a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d69e:	2b20      	cmp	r3, #32
 800d6a0:	bfc1      	itttt	gt
 800d6a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6b2:	bfda      	itte	le
 800d6b4:	f1c3 0320 	rsble	r3, r3, #32
 800d6b8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6bc:	4318      	orrgt	r0, r3
 800d6be:	f7f2 ff51 	bl	8000564 <__aeabi_ui2d>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6ca:	3d01      	subs	r5, #1
 800d6cc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6ce:	e76a      	b.n	800d5a6 <_dtoa_r+0x116>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e7b2      	b.n	800d63a <_dtoa_r+0x1aa>
 800d6d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6d6:	e7b1      	b.n	800d63c <_dtoa_r+0x1ac>
 800d6d8:	9b04      	ldr	r3, [sp, #16]
 800d6da:	9a00      	ldr	r2, [sp, #0]
 800d6dc:	1a9b      	subs	r3, r3, r2
 800d6de:	9304      	str	r3, [sp, #16]
 800d6e0:	4253      	negs	r3, r2
 800d6e2:	9307      	str	r3, [sp, #28]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6e8:	e7bf      	b.n	800d66a <_dtoa_r+0x1da>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	9308      	str	r3, [sp, #32]
 800d6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dc55      	bgt.n	800d7a0 <_dtoa_r+0x310>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6fe:	e00c      	b.n	800d71a <_dtoa_r+0x28a>
 800d700:	2301      	movs	r3, #1
 800d702:	e7f3      	b.n	800d6ec <_dtoa_r+0x25c>
 800d704:	2300      	movs	r3, #0
 800d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d708:	9308      	str	r3, [sp, #32]
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	4413      	add	r3, r2
 800d70e:	9302      	str	r3, [sp, #8]
 800d710:	3301      	adds	r3, #1
 800d712:	2b01      	cmp	r3, #1
 800d714:	9303      	str	r3, [sp, #12]
 800d716:	bfb8      	it	lt
 800d718:	2301      	movlt	r3, #1
 800d71a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d71c:	2200      	movs	r2, #0
 800d71e:	6042      	str	r2, [r0, #4]
 800d720:	2204      	movs	r2, #4
 800d722:	f102 0614 	add.w	r6, r2, #20
 800d726:	429e      	cmp	r6, r3
 800d728:	6841      	ldr	r1, [r0, #4]
 800d72a:	d93d      	bls.n	800d7a8 <_dtoa_r+0x318>
 800d72c:	4620      	mov	r0, r4
 800d72e:	f001 f84b 	bl	800e7c8 <_Balloc>
 800d732:	9001      	str	r0, [sp, #4]
 800d734:	2800      	cmp	r0, #0
 800d736:	d13b      	bne.n	800d7b0 <_dtoa_r+0x320>
 800d738:	4b11      	ldr	r3, [pc, #68]	; (800d780 <_dtoa_r+0x2f0>)
 800d73a:	4602      	mov	r2, r0
 800d73c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d740:	e6c0      	b.n	800d4c4 <_dtoa_r+0x34>
 800d742:	2301      	movs	r3, #1
 800d744:	e7df      	b.n	800d706 <_dtoa_r+0x276>
 800d746:	bf00      	nop
 800d748:	636f4361 	.word	0x636f4361
 800d74c:	3fd287a7 	.word	0x3fd287a7
 800d750:	8b60c8b3 	.word	0x8b60c8b3
 800d754:	3fc68a28 	.word	0x3fc68a28
 800d758:	509f79fb 	.word	0x509f79fb
 800d75c:	3fd34413 	.word	0x3fd34413
 800d760:	080128d6 	.word	0x080128d6
 800d764:	080128ed 	.word	0x080128ed
 800d768:	7ff00000 	.word	0x7ff00000
 800d76c:	080128d2 	.word	0x080128d2
 800d770:	080128c9 	.word	0x080128c9
 800d774:	08012b42 	.word	0x08012b42
 800d778:	3ff80000 	.word	0x3ff80000
 800d77c:	08012a58 	.word	0x08012a58
 800d780:	08012948 	.word	0x08012948
 800d784:	2501      	movs	r5, #1
 800d786:	2300      	movs	r3, #0
 800d788:	9306      	str	r3, [sp, #24]
 800d78a:	9508      	str	r5, [sp, #32]
 800d78c:	f04f 33ff 	mov.w	r3, #4294967295
 800d790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d794:	2200      	movs	r2, #0
 800d796:	2312      	movs	r3, #18
 800d798:	e7b0      	b.n	800d6fc <_dtoa_r+0x26c>
 800d79a:	2301      	movs	r3, #1
 800d79c:	9308      	str	r3, [sp, #32]
 800d79e:	e7f5      	b.n	800d78c <_dtoa_r+0x2fc>
 800d7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7a6:	e7b8      	b.n	800d71a <_dtoa_r+0x28a>
 800d7a8:	3101      	adds	r1, #1
 800d7aa:	6041      	str	r1, [r0, #4]
 800d7ac:	0052      	lsls	r2, r2, #1
 800d7ae:	e7b8      	b.n	800d722 <_dtoa_r+0x292>
 800d7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b2:	9a01      	ldr	r2, [sp, #4]
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	2b0e      	cmp	r3, #14
 800d7ba:	f200 809d 	bhi.w	800d8f8 <_dtoa_r+0x468>
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	f000 809a 	beq.w	800d8f8 <_dtoa_r+0x468>
 800d7c4:	9b00      	ldr	r3, [sp, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd32      	ble.n	800d830 <_dtoa_r+0x3a0>
 800d7ca:	4ab7      	ldr	r2, [pc, #732]	; (800daa8 <_dtoa_r+0x618>)
 800d7cc:	f003 030f 	and.w	r3, r3, #15
 800d7d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7d8:	9b00      	ldr	r3, [sp, #0]
 800d7da:	05d8      	lsls	r0, r3, #23
 800d7dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7e0:	d516      	bpl.n	800d810 <_dtoa_r+0x380>
 800d7e2:	4bb2      	ldr	r3, [pc, #712]	; (800daac <_dtoa_r+0x61c>)
 800d7e4:	ec51 0b19 	vmov	r0, r1, d9
 800d7e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7ec:	f7f3 f85e 	bl	80008ac <__aeabi_ddiv>
 800d7f0:	f007 070f 	and.w	r7, r7, #15
 800d7f4:	4682      	mov	sl, r0
 800d7f6:	468b      	mov	fp, r1
 800d7f8:	2503      	movs	r5, #3
 800d7fa:	4eac      	ldr	r6, [pc, #688]	; (800daac <_dtoa_r+0x61c>)
 800d7fc:	b957      	cbnz	r7, 800d814 <_dtoa_r+0x384>
 800d7fe:	4642      	mov	r2, r8
 800d800:	464b      	mov	r3, r9
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f3 f851 	bl	80008ac <__aeabi_ddiv>
 800d80a:	4682      	mov	sl, r0
 800d80c:	468b      	mov	fp, r1
 800d80e:	e028      	b.n	800d862 <_dtoa_r+0x3d2>
 800d810:	2502      	movs	r5, #2
 800d812:	e7f2      	b.n	800d7fa <_dtoa_r+0x36a>
 800d814:	07f9      	lsls	r1, r7, #31
 800d816:	d508      	bpl.n	800d82a <_dtoa_r+0x39a>
 800d818:	4640      	mov	r0, r8
 800d81a:	4649      	mov	r1, r9
 800d81c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d820:	f7f2 ff1a 	bl	8000658 <__aeabi_dmul>
 800d824:	3501      	adds	r5, #1
 800d826:	4680      	mov	r8, r0
 800d828:	4689      	mov	r9, r1
 800d82a:	107f      	asrs	r7, r7, #1
 800d82c:	3608      	adds	r6, #8
 800d82e:	e7e5      	b.n	800d7fc <_dtoa_r+0x36c>
 800d830:	f000 809b 	beq.w	800d96a <_dtoa_r+0x4da>
 800d834:	9b00      	ldr	r3, [sp, #0]
 800d836:	4f9d      	ldr	r7, [pc, #628]	; (800daac <_dtoa_r+0x61c>)
 800d838:	425e      	negs	r6, r3
 800d83a:	4b9b      	ldr	r3, [pc, #620]	; (800daa8 <_dtoa_r+0x618>)
 800d83c:	f006 020f 	and.w	r2, r6, #15
 800d840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	ec51 0b19 	vmov	r0, r1, d9
 800d84c:	f7f2 ff04 	bl	8000658 <__aeabi_dmul>
 800d850:	1136      	asrs	r6, r6, #4
 800d852:	4682      	mov	sl, r0
 800d854:	468b      	mov	fp, r1
 800d856:	2300      	movs	r3, #0
 800d858:	2502      	movs	r5, #2
 800d85a:	2e00      	cmp	r6, #0
 800d85c:	d17a      	bne.n	800d954 <_dtoa_r+0x4c4>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1d3      	bne.n	800d80a <_dtoa_r+0x37a>
 800d862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 8082 	beq.w	800d96e <_dtoa_r+0x4de>
 800d86a:	4b91      	ldr	r3, [pc, #580]	; (800dab0 <_dtoa_r+0x620>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	4650      	mov	r0, sl
 800d870:	4659      	mov	r1, fp
 800d872:	f7f3 f963 	bl	8000b3c <__aeabi_dcmplt>
 800d876:	2800      	cmp	r0, #0
 800d878:	d079      	beq.n	800d96e <_dtoa_r+0x4de>
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d076      	beq.n	800d96e <_dtoa_r+0x4de>
 800d880:	9b02      	ldr	r3, [sp, #8]
 800d882:	2b00      	cmp	r3, #0
 800d884:	dd36      	ble.n	800d8f4 <_dtoa_r+0x464>
 800d886:	9b00      	ldr	r3, [sp, #0]
 800d888:	4650      	mov	r0, sl
 800d88a:	4659      	mov	r1, fp
 800d88c:	1e5f      	subs	r7, r3, #1
 800d88e:	2200      	movs	r2, #0
 800d890:	4b88      	ldr	r3, [pc, #544]	; (800dab4 <_dtoa_r+0x624>)
 800d892:	f7f2 fee1 	bl	8000658 <__aeabi_dmul>
 800d896:	9e02      	ldr	r6, [sp, #8]
 800d898:	4682      	mov	sl, r0
 800d89a:	468b      	mov	fp, r1
 800d89c:	3501      	adds	r5, #1
 800d89e:	4628      	mov	r0, r5
 800d8a0:	f7f2 fe70 	bl	8000584 <__aeabi_i2d>
 800d8a4:	4652      	mov	r2, sl
 800d8a6:	465b      	mov	r3, fp
 800d8a8:	f7f2 fed6 	bl	8000658 <__aeabi_dmul>
 800d8ac:	4b82      	ldr	r3, [pc, #520]	; (800dab8 <_dtoa_r+0x628>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f7f2 fd1c 	bl	80002ec <__adddf3>
 800d8b4:	46d0      	mov	r8, sl
 800d8b6:	46d9      	mov	r9, fp
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8be:	2e00      	cmp	r6, #0
 800d8c0:	d158      	bne.n	800d974 <_dtoa_r+0x4e4>
 800d8c2:	4b7e      	ldr	r3, [pc, #504]	; (800dabc <_dtoa_r+0x62c>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	4649      	mov	r1, r9
 800d8ca:	f7f2 fd0d 	bl	80002e8 <__aeabi_dsub>
 800d8ce:	4652      	mov	r2, sl
 800d8d0:	465b      	mov	r3, fp
 800d8d2:	4680      	mov	r8, r0
 800d8d4:	4689      	mov	r9, r1
 800d8d6:	f7f3 f94f 	bl	8000b78 <__aeabi_dcmpgt>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f040 8295 	bne.w	800de0a <_dtoa_r+0x97a>
 800d8e0:	4652      	mov	r2, sl
 800d8e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	f7f3 f927 	bl	8000b3c <__aeabi_dcmplt>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f040 8289 	bne.w	800de06 <_dtoa_r+0x976>
 800d8f4:	ec5b ab19 	vmov	sl, fp, d9
 800d8f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f2c0 8148 	blt.w	800db90 <_dtoa_r+0x700>
 800d900:	9a00      	ldr	r2, [sp, #0]
 800d902:	2a0e      	cmp	r2, #14
 800d904:	f300 8144 	bgt.w	800db90 <_dtoa_r+0x700>
 800d908:	4b67      	ldr	r3, [pc, #412]	; (800daa8 <_dtoa_r+0x618>)
 800d90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d90e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d914:	2b00      	cmp	r3, #0
 800d916:	f280 80d5 	bge.w	800dac4 <_dtoa_r+0x634>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f300 80d1 	bgt.w	800dac4 <_dtoa_r+0x634>
 800d922:	f040 826f 	bne.w	800de04 <_dtoa_r+0x974>
 800d926:	4b65      	ldr	r3, [pc, #404]	; (800dabc <_dtoa_r+0x62c>)
 800d928:	2200      	movs	r2, #0
 800d92a:	4640      	mov	r0, r8
 800d92c:	4649      	mov	r1, r9
 800d92e:	f7f2 fe93 	bl	8000658 <__aeabi_dmul>
 800d932:	4652      	mov	r2, sl
 800d934:	465b      	mov	r3, fp
 800d936:	f7f3 f915 	bl	8000b64 <__aeabi_dcmpge>
 800d93a:	9e03      	ldr	r6, [sp, #12]
 800d93c:	4637      	mov	r7, r6
 800d93e:	2800      	cmp	r0, #0
 800d940:	f040 8245 	bne.w	800ddce <_dtoa_r+0x93e>
 800d944:	9d01      	ldr	r5, [sp, #4]
 800d946:	2331      	movs	r3, #49	; 0x31
 800d948:	f805 3b01 	strb.w	r3, [r5], #1
 800d94c:	9b00      	ldr	r3, [sp, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	e240      	b.n	800ddd6 <_dtoa_r+0x946>
 800d954:	07f2      	lsls	r2, r6, #31
 800d956:	d505      	bpl.n	800d964 <_dtoa_r+0x4d4>
 800d958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d95c:	f7f2 fe7c 	bl	8000658 <__aeabi_dmul>
 800d960:	3501      	adds	r5, #1
 800d962:	2301      	movs	r3, #1
 800d964:	1076      	asrs	r6, r6, #1
 800d966:	3708      	adds	r7, #8
 800d968:	e777      	b.n	800d85a <_dtoa_r+0x3ca>
 800d96a:	2502      	movs	r5, #2
 800d96c:	e779      	b.n	800d862 <_dtoa_r+0x3d2>
 800d96e:	9f00      	ldr	r7, [sp, #0]
 800d970:	9e03      	ldr	r6, [sp, #12]
 800d972:	e794      	b.n	800d89e <_dtoa_r+0x40e>
 800d974:	9901      	ldr	r1, [sp, #4]
 800d976:	4b4c      	ldr	r3, [pc, #304]	; (800daa8 <_dtoa_r+0x618>)
 800d978:	4431      	add	r1, r6
 800d97a:	910d      	str	r1, [sp, #52]	; 0x34
 800d97c:	9908      	ldr	r1, [sp, #32]
 800d97e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d986:	2900      	cmp	r1, #0
 800d988:	d043      	beq.n	800da12 <_dtoa_r+0x582>
 800d98a:	494d      	ldr	r1, [pc, #308]	; (800dac0 <_dtoa_r+0x630>)
 800d98c:	2000      	movs	r0, #0
 800d98e:	f7f2 ff8d 	bl	80008ac <__aeabi_ddiv>
 800d992:	4652      	mov	r2, sl
 800d994:	465b      	mov	r3, fp
 800d996:	f7f2 fca7 	bl	80002e8 <__aeabi_dsub>
 800d99a:	9d01      	ldr	r5, [sp, #4]
 800d99c:	4682      	mov	sl, r0
 800d99e:	468b      	mov	fp, r1
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7f3 f908 	bl	8000bb8 <__aeabi_d2iz>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	f7f2 fdeb 	bl	8000584 <__aeabi_i2d>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fc97 	bl	80002e8 <__aeabi_dsub>
 800d9ba:	3630      	adds	r6, #48	; 0x30
 800d9bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d9c0:	4652      	mov	r2, sl
 800d9c2:	465b      	mov	r3, fp
 800d9c4:	4680      	mov	r8, r0
 800d9c6:	4689      	mov	r9, r1
 800d9c8:	f7f3 f8b8 	bl	8000b3c <__aeabi_dcmplt>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d163      	bne.n	800da98 <_dtoa_r+0x608>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	4936      	ldr	r1, [pc, #216]	; (800dab0 <_dtoa_r+0x620>)
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	f7f2 fc86 	bl	80002e8 <__aeabi_dsub>
 800d9dc:	4652      	mov	r2, sl
 800d9de:	465b      	mov	r3, fp
 800d9e0:	f7f3 f8ac 	bl	8000b3c <__aeabi_dcmplt>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	f040 80b5 	bne.w	800db54 <_dtoa_r+0x6c4>
 800d9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9ec:	429d      	cmp	r5, r3
 800d9ee:	d081      	beq.n	800d8f4 <_dtoa_r+0x464>
 800d9f0:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <_dtoa_r+0x624>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	4659      	mov	r1, fp
 800d9f8:	f7f2 fe2e 	bl	8000658 <__aeabi_dmul>
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <_dtoa_r+0x624>)
 800d9fe:	4682      	mov	sl, r0
 800da00:	468b      	mov	fp, r1
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	2200      	movs	r2, #0
 800da08:	f7f2 fe26 	bl	8000658 <__aeabi_dmul>
 800da0c:	4680      	mov	r8, r0
 800da0e:	4689      	mov	r9, r1
 800da10:	e7c6      	b.n	800d9a0 <_dtoa_r+0x510>
 800da12:	4650      	mov	r0, sl
 800da14:	4659      	mov	r1, fp
 800da16:	f7f2 fe1f 	bl	8000658 <__aeabi_dmul>
 800da1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da1c:	9d01      	ldr	r5, [sp, #4]
 800da1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da20:	4682      	mov	sl, r0
 800da22:	468b      	mov	fp, r1
 800da24:	4649      	mov	r1, r9
 800da26:	4640      	mov	r0, r8
 800da28:	f7f3 f8c6 	bl	8000bb8 <__aeabi_d2iz>
 800da2c:	4606      	mov	r6, r0
 800da2e:	f7f2 fda9 	bl	8000584 <__aeabi_i2d>
 800da32:	3630      	adds	r6, #48	; 0x30
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4640      	mov	r0, r8
 800da3a:	4649      	mov	r1, r9
 800da3c:	f7f2 fc54 	bl	80002e8 <__aeabi_dsub>
 800da40:	f805 6b01 	strb.w	r6, [r5], #1
 800da44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da46:	429d      	cmp	r5, r3
 800da48:	4680      	mov	r8, r0
 800da4a:	4689      	mov	r9, r1
 800da4c:	f04f 0200 	mov.w	r2, #0
 800da50:	d124      	bne.n	800da9c <_dtoa_r+0x60c>
 800da52:	4b1b      	ldr	r3, [pc, #108]	; (800dac0 <_dtoa_r+0x630>)
 800da54:	4650      	mov	r0, sl
 800da56:	4659      	mov	r1, fp
 800da58:	f7f2 fc48 	bl	80002ec <__adddf3>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4640      	mov	r0, r8
 800da62:	4649      	mov	r1, r9
 800da64:	f7f3 f888 	bl	8000b78 <__aeabi_dcmpgt>
 800da68:	2800      	cmp	r0, #0
 800da6a:	d173      	bne.n	800db54 <_dtoa_r+0x6c4>
 800da6c:	4652      	mov	r2, sl
 800da6e:	465b      	mov	r3, fp
 800da70:	4913      	ldr	r1, [pc, #76]	; (800dac0 <_dtoa_r+0x630>)
 800da72:	2000      	movs	r0, #0
 800da74:	f7f2 fc38 	bl	80002e8 <__aeabi_dsub>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4640      	mov	r0, r8
 800da7e:	4649      	mov	r1, r9
 800da80:	f7f3 f85c 	bl	8000b3c <__aeabi_dcmplt>
 800da84:	2800      	cmp	r0, #0
 800da86:	f43f af35 	beq.w	800d8f4 <_dtoa_r+0x464>
 800da8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da8c:	1e6b      	subs	r3, r5, #1
 800da8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da94:	2b30      	cmp	r3, #48	; 0x30
 800da96:	d0f8      	beq.n	800da8a <_dtoa_r+0x5fa>
 800da98:	9700      	str	r7, [sp, #0]
 800da9a:	e049      	b.n	800db30 <_dtoa_r+0x6a0>
 800da9c:	4b05      	ldr	r3, [pc, #20]	; (800dab4 <_dtoa_r+0x624>)
 800da9e:	f7f2 fddb 	bl	8000658 <__aeabi_dmul>
 800daa2:	4680      	mov	r8, r0
 800daa4:	4689      	mov	r9, r1
 800daa6:	e7bd      	b.n	800da24 <_dtoa_r+0x594>
 800daa8:	08012a58 	.word	0x08012a58
 800daac:	08012a30 	.word	0x08012a30
 800dab0:	3ff00000 	.word	0x3ff00000
 800dab4:	40240000 	.word	0x40240000
 800dab8:	401c0000 	.word	0x401c0000
 800dabc:	40140000 	.word	0x40140000
 800dac0:	3fe00000 	.word	0x3fe00000
 800dac4:	9d01      	ldr	r5, [sp, #4]
 800dac6:	4656      	mov	r6, sl
 800dac8:	465f      	mov	r7, fp
 800daca:	4642      	mov	r2, r8
 800dacc:	464b      	mov	r3, r9
 800dace:	4630      	mov	r0, r6
 800dad0:	4639      	mov	r1, r7
 800dad2:	f7f2 feeb 	bl	80008ac <__aeabi_ddiv>
 800dad6:	f7f3 f86f 	bl	8000bb8 <__aeabi_d2iz>
 800dada:	4682      	mov	sl, r0
 800dadc:	f7f2 fd52 	bl	8000584 <__aeabi_i2d>
 800dae0:	4642      	mov	r2, r8
 800dae2:	464b      	mov	r3, r9
 800dae4:	f7f2 fdb8 	bl	8000658 <__aeabi_dmul>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4630      	mov	r0, r6
 800daee:	4639      	mov	r1, r7
 800daf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800daf4:	f7f2 fbf8 	bl	80002e8 <__aeabi_dsub>
 800daf8:	f805 6b01 	strb.w	r6, [r5], #1
 800dafc:	9e01      	ldr	r6, [sp, #4]
 800dafe:	9f03      	ldr	r7, [sp, #12]
 800db00:	1bae      	subs	r6, r5, r6
 800db02:	42b7      	cmp	r7, r6
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	d135      	bne.n	800db76 <_dtoa_r+0x6e6>
 800db0a:	f7f2 fbef 	bl	80002ec <__adddf3>
 800db0e:	4642      	mov	r2, r8
 800db10:	464b      	mov	r3, r9
 800db12:	4606      	mov	r6, r0
 800db14:	460f      	mov	r7, r1
 800db16:	f7f3 f82f 	bl	8000b78 <__aeabi_dcmpgt>
 800db1a:	b9d0      	cbnz	r0, 800db52 <_dtoa_r+0x6c2>
 800db1c:	4642      	mov	r2, r8
 800db1e:	464b      	mov	r3, r9
 800db20:	4630      	mov	r0, r6
 800db22:	4639      	mov	r1, r7
 800db24:	f7f3 f800 	bl	8000b28 <__aeabi_dcmpeq>
 800db28:	b110      	cbz	r0, 800db30 <_dtoa_r+0x6a0>
 800db2a:	f01a 0f01 	tst.w	sl, #1
 800db2e:	d110      	bne.n	800db52 <_dtoa_r+0x6c2>
 800db30:	4620      	mov	r0, r4
 800db32:	ee18 1a10 	vmov	r1, s16
 800db36:	f000 fe87 	bl	800e848 <_Bfree>
 800db3a:	2300      	movs	r3, #0
 800db3c:	9800      	ldr	r0, [sp, #0]
 800db3e:	702b      	strb	r3, [r5, #0]
 800db40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db42:	3001      	adds	r0, #1
 800db44:	6018      	str	r0, [r3, #0]
 800db46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f43f acf1 	beq.w	800d530 <_dtoa_r+0xa0>
 800db4e:	601d      	str	r5, [r3, #0]
 800db50:	e4ee      	b.n	800d530 <_dtoa_r+0xa0>
 800db52:	9f00      	ldr	r7, [sp, #0]
 800db54:	462b      	mov	r3, r5
 800db56:	461d      	mov	r5, r3
 800db58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db5c:	2a39      	cmp	r2, #57	; 0x39
 800db5e:	d106      	bne.n	800db6e <_dtoa_r+0x6de>
 800db60:	9a01      	ldr	r2, [sp, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d1f7      	bne.n	800db56 <_dtoa_r+0x6c6>
 800db66:	9901      	ldr	r1, [sp, #4]
 800db68:	2230      	movs	r2, #48	; 0x30
 800db6a:	3701      	adds	r7, #1
 800db6c:	700a      	strb	r2, [r1, #0]
 800db6e:	781a      	ldrb	r2, [r3, #0]
 800db70:	3201      	adds	r2, #1
 800db72:	701a      	strb	r2, [r3, #0]
 800db74:	e790      	b.n	800da98 <_dtoa_r+0x608>
 800db76:	4ba6      	ldr	r3, [pc, #664]	; (800de10 <_dtoa_r+0x980>)
 800db78:	2200      	movs	r2, #0
 800db7a:	f7f2 fd6d 	bl	8000658 <__aeabi_dmul>
 800db7e:	2200      	movs	r2, #0
 800db80:	2300      	movs	r3, #0
 800db82:	4606      	mov	r6, r0
 800db84:	460f      	mov	r7, r1
 800db86:	f7f2 ffcf 	bl	8000b28 <__aeabi_dcmpeq>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d09d      	beq.n	800daca <_dtoa_r+0x63a>
 800db8e:	e7cf      	b.n	800db30 <_dtoa_r+0x6a0>
 800db90:	9a08      	ldr	r2, [sp, #32]
 800db92:	2a00      	cmp	r2, #0
 800db94:	f000 80d7 	beq.w	800dd46 <_dtoa_r+0x8b6>
 800db98:	9a06      	ldr	r2, [sp, #24]
 800db9a:	2a01      	cmp	r2, #1
 800db9c:	f300 80ba 	bgt.w	800dd14 <_dtoa_r+0x884>
 800dba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	f000 80b2 	beq.w	800dd0c <_dtoa_r+0x87c>
 800dba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbac:	9e07      	ldr	r6, [sp, #28]
 800dbae:	9d04      	ldr	r5, [sp, #16]
 800dbb0:	9a04      	ldr	r2, [sp, #16]
 800dbb2:	441a      	add	r2, r3
 800dbb4:	9204      	str	r2, [sp, #16]
 800dbb6:	9a05      	ldr	r2, [sp, #20]
 800dbb8:	2101      	movs	r1, #1
 800dbba:	441a      	add	r2, r3
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	9205      	str	r2, [sp, #20]
 800dbc0:	f000 ff44 	bl	800ea4c <__i2b>
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	2d00      	cmp	r5, #0
 800dbc8:	dd0c      	ble.n	800dbe4 <_dtoa_r+0x754>
 800dbca:	9b05      	ldr	r3, [sp, #20]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dd09      	ble.n	800dbe4 <_dtoa_r+0x754>
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	9a04      	ldr	r2, [sp, #16]
 800dbd4:	bfa8      	it	ge
 800dbd6:	462b      	movge	r3, r5
 800dbd8:	1ad2      	subs	r2, r2, r3
 800dbda:	9204      	str	r2, [sp, #16]
 800dbdc:	9a05      	ldr	r2, [sp, #20]
 800dbde:	1aed      	subs	r5, r5, r3
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	9b07      	ldr	r3, [sp, #28]
 800dbe6:	b31b      	cbz	r3, 800dc30 <_dtoa_r+0x7a0>
 800dbe8:	9b08      	ldr	r3, [sp, #32]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 80af 	beq.w	800dd4e <_dtoa_r+0x8be>
 800dbf0:	2e00      	cmp	r6, #0
 800dbf2:	dd13      	ble.n	800dc1c <_dtoa_r+0x78c>
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 ffe7 	bl	800ebcc <__pow5mult>
 800dbfe:	ee18 2a10 	vmov	r2, s16
 800dc02:	4601      	mov	r1, r0
 800dc04:	4607      	mov	r7, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 ff36 	bl	800ea78 <__multiply>
 800dc0c:	ee18 1a10 	vmov	r1, s16
 800dc10:	4680      	mov	r8, r0
 800dc12:	4620      	mov	r0, r4
 800dc14:	f000 fe18 	bl	800e848 <_Bfree>
 800dc18:	ee08 8a10 	vmov	s16, r8
 800dc1c:	9b07      	ldr	r3, [sp, #28]
 800dc1e:	1b9a      	subs	r2, r3, r6
 800dc20:	d006      	beq.n	800dc30 <_dtoa_r+0x7a0>
 800dc22:	ee18 1a10 	vmov	r1, s16
 800dc26:	4620      	mov	r0, r4
 800dc28:	f000 ffd0 	bl	800ebcc <__pow5mult>
 800dc2c:	ee08 0a10 	vmov	s16, r0
 800dc30:	2101      	movs	r1, #1
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 ff0a 	bl	800ea4c <__i2b>
 800dc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	f340 8088 	ble.w	800dd52 <_dtoa_r+0x8c2>
 800dc42:	461a      	mov	r2, r3
 800dc44:	4601      	mov	r1, r0
 800dc46:	4620      	mov	r0, r4
 800dc48:	f000 ffc0 	bl	800ebcc <__pow5mult>
 800dc4c:	9b06      	ldr	r3, [sp, #24]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	4606      	mov	r6, r0
 800dc52:	f340 8081 	ble.w	800dd58 <_dtoa_r+0x8c8>
 800dc56:	f04f 0800 	mov.w	r8, #0
 800dc5a:	6933      	ldr	r3, [r6, #16]
 800dc5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc60:	6918      	ldr	r0, [r3, #16]
 800dc62:	f000 fea3 	bl	800e9ac <__hi0bits>
 800dc66:	f1c0 0020 	rsb	r0, r0, #32
 800dc6a:	9b05      	ldr	r3, [sp, #20]
 800dc6c:	4418      	add	r0, r3
 800dc6e:	f010 001f 	ands.w	r0, r0, #31
 800dc72:	f000 8092 	beq.w	800dd9a <_dtoa_r+0x90a>
 800dc76:	f1c0 0320 	rsb	r3, r0, #32
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	f340 808a 	ble.w	800dd94 <_dtoa_r+0x904>
 800dc80:	f1c0 001c 	rsb	r0, r0, #28
 800dc84:	9b04      	ldr	r3, [sp, #16]
 800dc86:	4403      	add	r3, r0
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	9b05      	ldr	r3, [sp, #20]
 800dc8c:	4403      	add	r3, r0
 800dc8e:	4405      	add	r5, r0
 800dc90:	9305      	str	r3, [sp, #20]
 800dc92:	9b04      	ldr	r3, [sp, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	dd07      	ble.n	800dca8 <_dtoa_r+0x818>
 800dc98:	ee18 1a10 	vmov	r1, s16
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f000 ffee 	bl	800ec80 <__lshift>
 800dca4:	ee08 0a10 	vmov	s16, r0
 800dca8:	9b05      	ldr	r3, [sp, #20]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	dd05      	ble.n	800dcba <_dtoa_r+0x82a>
 800dcae:	4631      	mov	r1, r6
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f000 ffe4 	bl	800ec80 <__lshift>
 800dcb8:	4606      	mov	r6, r0
 800dcba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d06e      	beq.n	800dd9e <_dtoa_r+0x90e>
 800dcc0:	ee18 0a10 	vmov	r0, s16
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	f001 f84b 	bl	800ed60 <__mcmp>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	da67      	bge.n	800dd9e <_dtoa_r+0x90e>
 800dcce:	9b00      	ldr	r3, [sp, #0]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	ee18 1a10 	vmov	r1, s16
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	220a      	movs	r2, #10
 800dcda:	2300      	movs	r3, #0
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 fdd5 	bl	800e88c <__multadd>
 800dce2:	9b08      	ldr	r3, [sp, #32]
 800dce4:	ee08 0a10 	vmov	s16, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 81b1 	beq.w	800e050 <_dtoa_r+0xbc0>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	220a      	movs	r2, #10
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f000 fdc9 	bl	800e88c <__multadd>
 800dcfa:	9b02      	ldr	r3, [sp, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	4607      	mov	r7, r0
 800dd00:	f300 808e 	bgt.w	800de20 <_dtoa_r+0x990>
 800dd04:	9b06      	ldr	r3, [sp, #24]
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	dc51      	bgt.n	800ddae <_dtoa_r+0x91e>
 800dd0a:	e089      	b.n	800de20 <_dtoa_r+0x990>
 800dd0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd12:	e74b      	b.n	800dbac <_dtoa_r+0x71c>
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	1e5e      	subs	r6, r3, #1
 800dd18:	9b07      	ldr	r3, [sp, #28]
 800dd1a:	42b3      	cmp	r3, r6
 800dd1c:	bfbf      	itttt	lt
 800dd1e:	9b07      	ldrlt	r3, [sp, #28]
 800dd20:	9607      	strlt	r6, [sp, #28]
 800dd22:	1af2      	sublt	r2, r6, r3
 800dd24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd26:	bfb6      	itet	lt
 800dd28:	189b      	addlt	r3, r3, r2
 800dd2a:	1b9e      	subge	r6, r3, r6
 800dd2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	bfb8      	it	lt
 800dd32:	2600      	movlt	r6, #0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfb7      	itett	lt
 800dd38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd40:	1a9d      	sublt	r5, r3, r2
 800dd42:	2300      	movlt	r3, #0
 800dd44:	e734      	b.n	800dbb0 <_dtoa_r+0x720>
 800dd46:	9e07      	ldr	r6, [sp, #28]
 800dd48:	9d04      	ldr	r5, [sp, #16]
 800dd4a:	9f08      	ldr	r7, [sp, #32]
 800dd4c:	e73b      	b.n	800dbc6 <_dtoa_r+0x736>
 800dd4e:	9a07      	ldr	r2, [sp, #28]
 800dd50:	e767      	b.n	800dc22 <_dtoa_r+0x792>
 800dd52:	9b06      	ldr	r3, [sp, #24]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	dc18      	bgt.n	800dd8a <_dtoa_r+0x8fa>
 800dd58:	f1ba 0f00 	cmp.w	sl, #0
 800dd5c:	d115      	bne.n	800dd8a <_dtoa_r+0x8fa>
 800dd5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd62:	b993      	cbnz	r3, 800dd8a <_dtoa_r+0x8fa>
 800dd64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd68:	0d1b      	lsrs	r3, r3, #20
 800dd6a:	051b      	lsls	r3, r3, #20
 800dd6c:	b183      	cbz	r3, 800dd90 <_dtoa_r+0x900>
 800dd6e:	9b04      	ldr	r3, [sp, #16]
 800dd70:	3301      	adds	r3, #1
 800dd72:	9304      	str	r3, [sp, #16]
 800dd74:	9b05      	ldr	r3, [sp, #20]
 800dd76:	3301      	adds	r3, #1
 800dd78:	9305      	str	r3, [sp, #20]
 800dd7a:	f04f 0801 	mov.w	r8, #1
 800dd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f47f af6a 	bne.w	800dc5a <_dtoa_r+0x7ca>
 800dd86:	2001      	movs	r0, #1
 800dd88:	e76f      	b.n	800dc6a <_dtoa_r+0x7da>
 800dd8a:	f04f 0800 	mov.w	r8, #0
 800dd8e:	e7f6      	b.n	800dd7e <_dtoa_r+0x8ee>
 800dd90:	4698      	mov	r8, r3
 800dd92:	e7f4      	b.n	800dd7e <_dtoa_r+0x8ee>
 800dd94:	f43f af7d 	beq.w	800dc92 <_dtoa_r+0x802>
 800dd98:	4618      	mov	r0, r3
 800dd9a:	301c      	adds	r0, #28
 800dd9c:	e772      	b.n	800dc84 <_dtoa_r+0x7f4>
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc37      	bgt.n	800de14 <_dtoa_r+0x984>
 800dda4:	9b06      	ldr	r3, [sp, #24]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	dd34      	ble.n	800de14 <_dtoa_r+0x984>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	9302      	str	r3, [sp, #8]
 800ddae:	9b02      	ldr	r3, [sp, #8]
 800ddb0:	b96b      	cbnz	r3, 800ddce <_dtoa_r+0x93e>
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	2205      	movs	r2, #5
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 fd68 	bl	800e88c <__multadd>
 800ddbc:	4601      	mov	r1, r0
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	ee18 0a10 	vmov	r0, s16
 800ddc4:	f000 ffcc 	bl	800ed60 <__mcmp>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	f73f adbb 	bgt.w	800d944 <_dtoa_r+0x4b4>
 800ddce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd0:	9d01      	ldr	r5, [sp, #4]
 800ddd2:	43db      	mvns	r3, r3
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	f04f 0800 	mov.w	r8, #0
 800ddda:	4631      	mov	r1, r6
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 fd33 	bl	800e848 <_Bfree>
 800dde2:	2f00      	cmp	r7, #0
 800dde4:	f43f aea4 	beq.w	800db30 <_dtoa_r+0x6a0>
 800dde8:	f1b8 0f00 	cmp.w	r8, #0
 800ddec:	d005      	beq.n	800ddfa <_dtoa_r+0x96a>
 800ddee:	45b8      	cmp	r8, r7
 800ddf0:	d003      	beq.n	800ddfa <_dtoa_r+0x96a>
 800ddf2:	4641      	mov	r1, r8
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f000 fd27 	bl	800e848 <_Bfree>
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f000 fd23 	bl	800e848 <_Bfree>
 800de02:	e695      	b.n	800db30 <_dtoa_r+0x6a0>
 800de04:	2600      	movs	r6, #0
 800de06:	4637      	mov	r7, r6
 800de08:	e7e1      	b.n	800ddce <_dtoa_r+0x93e>
 800de0a:	9700      	str	r7, [sp, #0]
 800de0c:	4637      	mov	r7, r6
 800de0e:	e599      	b.n	800d944 <_dtoa_r+0x4b4>
 800de10:	40240000 	.word	0x40240000
 800de14:	9b08      	ldr	r3, [sp, #32]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 80ca 	beq.w	800dfb0 <_dtoa_r+0xb20>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	9302      	str	r3, [sp, #8]
 800de20:	2d00      	cmp	r5, #0
 800de22:	dd05      	ble.n	800de30 <_dtoa_r+0x9a0>
 800de24:	4639      	mov	r1, r7
 800de26:	462a      	mov	r2, r5
 800de28:	4620      	mov	r0, r4
 800de2a:	f000 ff29 	bl	800ec80 <__lshift>
 800de2e:	4607      	mov	r7, r0
 800de30:	f1b8 0f00 	cmp.w	r8, #0
 800de34:	d05b      	beq.n	800deee <_dtoa_r+0xa5e>
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 fcc5 	bl	800e7c8 <_Balloc>
 800de3e:	4605      	mov	r5, r0
 800de40:	b928      	cbnz	r0, 800de4e <_dtoa_r+0x9be>
 800de42:	4b87      	ldr	r3, [pc, #540]	; (800e060 <_dtoa_r+0xbd0>)
 800de44:	4602      	mov	r2, r0
 800de46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de4a:	f7ff bb3b 	b.w	800d4c4 <_dtoa_r+0x34>
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	3202      	adds	r2, #2
 800de52:	0092      	lsls	r2, r2, #2
 800de54:	f107 010c 	add.w	r1, r7, #12
 800de58:	300c      	adds	r0, #12
 800de5a:	f000 fca7 	bl	800e7ac <memcpy>
 800de5e:	2201      	movs	r2, #1
 800de60:	4629      	mov	r1, r5
 800de62:	4620      	mov	r0, r4
 800de64:	f000 ff0c 	bl	800ec80 <__lshift>
 800de68:	9b01      	ldr	r3, [sp, #4]
 800de6a:	f103 0901 	add.w	r9, r3, #1
 800de6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de72:	4413      	add	r3, r2
 800de74:	9305      	str	r3, [sp, #20]
 800de76:	f00a 0301 	and.w	r3, sl, #1
 800de7a:	46b8      	mov	r8, r7
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	4607      	mov	r7, r0
 800de80:	4631      	mov	r1, r6
 800de82:	ee18 0a10 	vmov	r0, s16
 800de86:	f7ff fa75 	bl	800d374 <quorem>
 800de8a:	4641      	mov	r1, r8
 800de8c:	9002      	str	r0, [sp, #8]
 800de8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de92:	ee18 0a10 	vmov	r0, s16
 800de96:	f000 ff63 	bl	800ed60 <__mcmp>
 800de9a:	463a      	mov	r2, r7
 800de9c:	9003      	str	r0, [sp, #12]
 800de9e:	4631      	mov	r1, r6
 800dea0:	4620      	mov	r0, r4
 800dea2:	f000 ff79 	bl	800ed98 <__mdiff>
 800dea6:	68c2      	ldr	r2, [r0, #12]
 800dea8:	f109 3bff 	add.w	fp, r9, #4294967295
 800deac:	4605      	mov	r5, r0
 800deae:	bb02      	cbnz	r2, 800def2 <_dtoa_r+0xa62>
 800deb0:	4601      	mov	r1, r0
 800deb2:	ee18 0a10 	vmov	r0, s16
 800deb6:	f000 ff53 	bl	800ed60 <__mcmp>
 800deba:	4602      	mov	r2, r0
 800debc:	4629      	mov	r1, r5
 800debe:	4620      	mov	r0, r4
 800dec0:	9207      	str	r2, [sp, #28]
 800dec2:	f000 fcc1 	bl	800e848 <_Bfree>
 800dec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800deca:	ea43 0102 	orr.w	r1, r3, r2
 800dece:	9b04      	ldr	r3, [sp, #16]
 800ded0:	430b      	orrs	r3, r1
 800ded2:	464d      	mov	r5, r9
 800ded4:	d10f      	bne.n	800def6 <_dtoa_r+0xa66>
 800ded6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800deda:	d02a      	beq.n	800df32 <_dtoa_r+0xaa2>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dd02      	ble.n	800dee8 <_dtoa_r+0xa58>
 800dee2:	9b02      	ldr	r3, [sp, #8]
 800dee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dee8:	f88b a000 	strb.w	sl, [fp]
 800deec:	e775      	b.n	800ddda <_dtoa_r+0x94a>
 800deee:	4638      	mov	r0, r7
 800def0:	e7ba      	b.n	800de68 <_dtoa_r+0x9d8>
 800def2:	2201      	movs	r2, #1
 800def4:	e7e2      	b.n	800debc <_dtoa_r+0xa2c>
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	db04      	blt.n	800df06 <_dtoa_r+0xa76>
 800defc:	9906      	ldr	r1, [sp, #24]
 800defe:	430b      	orrs	r3, r1
 800df00:	9904      	ldr	r1, [sp, #16]
 800df02:	430b      	orrs	r3, r1
 800df04:	d122      	bne.n	800df4c <_dtoa_r+0xabc>
 800df06:	2a00      	cmp	r2, #0
 800df08:	ddee      	ble.n	800dee8 <_dtoa_r+0xa58>
 800df0a:	ee18 1a10 	vmov	r1, s16
 800df0e:	2201      	movs	r2, #1
 800df10:	4620      	mov	r0, r4
 800df12:	f000 feb5 	bl	800ec80 <__lshift>
 800df16:	4631      	mov	r1, r6
 800df18:	ee08 0a10 	vmov	s16, r0
 800df1c:	f000 ff20 	bl	800ed60 <__mcmp>
 800df20:	2800      	cmp	r0, #0
 800df22:	dc03      	bgt.n	800df2c <_dtoa_r+0xa9c>
 800df24:	d1e0      	bne.n	800dee8 <_dtoa_r+0xa58>
 800df26:	f01a 0f01 	tst.w	sl, #1
 800df2a:	d0dd      	beq.n	800dee8 <_dtoa_r+0xa58>
 800df2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df30:	d1d7      	bne.n	800dee2 <_dtoa_r+0xa52>
 800df32:	2339      	movs	r3, #57	; 0x39
 800df34:	f88b 3000 	strb.w	r3, [fp]
 800df38:	462b      	mov	r3, r5
 800df3a:	461d      	mov	r5, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df42:	2a39      	cmp	r2, #57	; 0x39
 800df44:	d071      	beq.n	800e02a <_dtoa_r+0xb9a>
 800df46:	3201      	adds	r2, #1
 800df48:	701a      	strb	r2, [r3, #0]
 800df4a:	e746      	b.n	800ddda <_dtoa_r+0x94a>
 800df4c:	2a00      	cmp	r2, #0
 800df4e:	dd07      	ble.n	800df60 <_dtoa_r+0xad0>
 800df50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df54:	d0ed      	beq.n	800df32 <_dtoa_r+0xaa2>
 800df56:	f10a 0301 	add.w	r3, sl, #1
 800df5a:	f88b 3000 	strb.w	r3, [fp]
 800df5e:	e73c      	b.n	800ddda <_dtoa_r+0x94a>
 800df60:	9b05      	ldr	r3, [sp, #20]
 800df62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df66:	4599      	cmp	r9, r3
 800df68:	d047      	beq.n	800dffa <_dtoa_r+0xb6a>
 800df6a:	ee18 1a10 	vmov	r1, s16
 800df6e:	2300      	movs	r3, #0
 800df70:	220a      	movs	r2, #10
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fc8a 	bl	800e88c <__multadd>
 800df78:	45b8      	cmp	r8, r7
 800df7a:	ee08 0a10 	vmov	s16, r0
 800df7e:	f04f 0300 	mov.w	r3, #0
 800df82:	f04f 020a 	mov.w	r2, #10
 800df86:	4641      	mov	r1, r8
 800df88:	4620      	mov	r0, r4
 800df8a:	d106      	bne.n	800df9a <_dtoa_r+0xb0a>
 800df8c:	f000 fc7e 	bl	800e88c <__multadd>
 800df90:	4680      	mov	r8, r0
 800df92:	4607      	mov	r7, r0
 800df94:	f109 0901 	add.w	r9, r9, #1
 800df98:	e772      	b.n	800de80 <_dtoa_r+0x9f0>
 800df9a:	f000 fc77 	bl	800e88c <__multadd>
 800df9e:	4639      	mov	r1, r7
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	220a      	movs	r2, #10
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 fc70 	bl	800e88c <__multadd>
 800dfac:	4607      	mov	r7, r0
 800dfae:	e7f1      	b.n	800df94 <_dtoa_r+0xb04>
 800dfb0:	9b03      	ldr	r3, [sp, #12]
 800dfb2:	9302      	str	r3, [sp, #8]
 800dfb4:	9d01      	ldr	r5, [sp, #4]
 800dfb6:	ee18 0a10 	vmov	r0, s16
 800dfba:	4631      	mov	r1, r6
 800dfbc:	f7ff f9da 	bl	800d374 <quorem>
 800dfc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfc4:	9b01      	ldr	r3, [sp, #4]
 800dfc6:	f805 ab01 	strb.w	sl, [r5], #1
 800dfca:	1aea      	subs	r2, r5, r3
 800dfcc:	9b02      	ldr	r3, [sp, #8]
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	dd09      	ble.n	800dfe6 <_dtoa_r+0xb56>
 800dfd2:	ee18 1a10 	vmov	r1, s16
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	220a      	movs	r2, #10
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f000 fc56 	bl	800e88c <__multadd>
 800dfe0:	ee08 0a10 	vmov	s16, r0
 800dfe4:	e7e7      	b.n	800dfb6 <_dtoa_r+0xb26>
 800dfe6:	9b02      	ldr	r3, [sp, #8]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	bfc8      	it	gt
 800dfec:	461d      	movgt	r5, r3
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	bfd8      	it	le
 800dff2:	2501      	movle	r5, #1
 800dff4:	441d      	add	r5, r3
 800dff6:	f04f 0800 	mov.w	r8, #0
 800dffa:	ee18 1a10 	vmov	r1, s16
 800dffe:	2201      	movs	r2, #1
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fe3d 	bl	800ec80 <__lshift>
 800e006:	4631      	mov	r1, r6
 800e008:	ee08 0a10 	vmov	s16, r0
 800e00c:	f000 fea8 	bl	800ed60 <__mcmp>
 800e010:	2800      	cmp	r0, #0
 800e012:	dc91      	bgt.n	800df38 <_dtoa_r+0xaa8>
 800e014:	d102      	bne.n	800e01c <_dtoa_r+0xb8c>
 800e016:	f01a 0f01 	tst.w	sl, #1
 800e01a:	d18d      	bne.n	800df38 <_dtoa_r+0xaa8>
 800e01c:	462b      	mov	r3, r5
 800e01e:	461d      	mov	r5, r3
 800e020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e024:	2a30      	cmp	r2, #48	; 0x30
 800e026:	d0fa      	beq.n	800e01e <_dtoa_r+0xb8e>
 800e028:	e6d7      	b.n	800ddda <_dtoa_r+0x94a>
 800e02a:	9a01      	ldr	r2, [sp, #4]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d184      	bne.n	800df3a <_dtoa_r+0xaaa>
 800e030:	9b00      	ldr	r3, [sp, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	2331      	movs	r3, #49	; 0x31
 800e038:	7013      	strb	r3, [r2, #0]
 800e03a:	e6ce      	b.n	800ddda <_dtoa_r+0x94a>
 800e03c:	4b09      	ldr	r3, [pc, #36]	; (800e064 <_dtoa_r+0xbd4>)
 800e03e:	f7ff ba95 	b.w	800d56c <_dtoa_r+0xdc>
 800e042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e044:	2b00      	cmp	r3, #0
 800e046:	f47f aa6e 	bne.w	800d526 <_dtoa_r+0x96>
 800e04a:	4b07      	ldr	r3, [pc, #28]	; (800e068 <_dtoa_r+0xbd8>)
 800e04c:	f7ff ba8e 	b.w	800d56c <_dtoa_r+0xdc>
 800e050:	9b02      	ldr	r3, [sp, #8]
 800e052:	2b00      	cmp	r3, #0
 800e054:	dcae      	bgt.n	800dfb4 <_dtoa_r+0xb24>
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	2b02      	cmp	r3, #2
 800e05a:	f73f aea8 	bgt.w	800ddae <_dtoa_r+0x91e>
 800e05e:	e7a9      	b.n	800dfb4 <_dtoa_r+0xb24>
 800e060:	08012948 	.word	0x08012948
 800e064:	08012b41 	.word	0x08012b41
 800e068:	080128c9 	.word	0x080128c9

0800e06c <rshift>:
 800e06c:	6903      	ldr	r3, [r0, #16]
 800e06e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e076:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e07a:	f100 0414 	add.w	r4, r0, #20
 800e07e:	dd45      	ble.n	800e10c <rshift+0xa0>
 800e080:	f011 011f 	ands.w	r1, r1, #31
 800e084:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e088:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e08c:	d10c      	bne.n	800e0a8 <rshift+0x3c>
 800e08e:	f100 0710 	add.w	r7, r0, #16
 800e092:	4629      	mov	r1, r5
 800e094:	42b1      	cmp	r1, r6
 800e096:	d334      	bcc.n	800e102 <rshift+0x96>
 800e098:	1a9b      	subs	r3, r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	1eea      	subs	r2, r5, #3
 800e09e:	4296      	cmp	r6, r2
 800e0a0:	bf38      	it	cc
 800e0a2:	2300      	movcc	r3, #0
 800e0a4:	4423      	add	r3, r4
 800e0a6:	e015      	b.n	800e0d4 <rshift+0x68>
 800e0a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0ac:	f1c1 0820 	rsb	r8, r1, #32
 800e0b0:	40cf      	lsrs	r7, r1
 800e0b2:	f105 0e04 	add.w	lr, r5, #4
 800e0b6:	46a1      	mov	r9, r4
 800e0b8:	4576      	cmp	r6, lr
 800e0ba:	46f4      	mov	ip, lr
 800e0bc:	d815      	bhi.n	800e0ea <rshift+0x7e>
 800e0be:	1a9a      	subs	r2, r3, r2
 800e0c0:	0092      	lsls	r2, r2, #2
 800e0c2:	3a04      	subs	r2, #4
 800e0c4:	3501      	adds	r5, #1
 800e0c6:	42ae      	cmp	r6, r5
 800e0c8:	bf38      	it	cc
 800e0ca:	2200      	movcc	r2, #0
 800e0cc:	18a3      	adds	r3, r4, r2
 800e0ce:	50a7      	str	r7, [r4, r2]
 800e0d0:	b107      	cbz	r7, 800e0d4 <rshift+0x68>
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	1b1a      	subs	r2, r3, r4
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0dc:	bf08      	it	eq
 800e0de:	2300      	moveq	r3, #0
 800e0e0:	6102      	str	r2, [r0, #16]
 800e0e2:	bf08      	it	eq
 800e0e4:	6143      	streq	r3, [r0, #20]
 800e0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ea:	f8dc c000 	ldr.w	ip, [ip]
 800e0ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800e0f2:	ea4c 0707 	orr.w	r7, ip, r7
 800e0f6:	f849 7b04 	str.w	r7, [r9], #4
 800e0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0fe:	40cf      	lsrs	r7, r1
 800e100:	e7da      	b.n	800e0b8 <rshift+0x4c>
 800e102:	f851 cb04 	ldr.w	ip, [r1], #4
 800e106:	f847 cf04 	str.w	ip, [r7, #4]!
 800e10a:	e7c3      	b.n	800e094 <rshift+0x28>
 800e10c:	4623      	mov	r3, r4
 800e10e:	e7e1      	b.n	800e0d4 <rshift+0x68>

0800e110 <__hexdig_fun>:
 800e110:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e114:	2b09      	cmp	r3, #9
 800e116:	d802      	bhi.n	800e11e <__hexdig_fun+0xe>
 800e118:	3820      	subs	r0, #32
 800e11a:	b2c0      	uxtb	r0, r0
 800e11c:	4770      	bx	lr
 800e11e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e122:	2b05      	cmp	r3, #5
 800e124:	d801      	bhi.n	800e12a <__hexdig_fun+0x1a>
 800e126:	3847      	subs	r0, #71	; 0x47
 800e128:	e7f7      	b.n	800e11a <__hexdig_fun+0xa>
 800e12a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e12e:	2b05      	cmp	r3, #5
 800e130:	d801      	bhi.n	800e136 <__hexdig_fun+0x26>
 800e132:	3827      	subs	r0, #39	; 0x27
 800e134:	e7f1      	b.n	800e11a <__hexdig_fun+0xa>
 800e136:	2000      	movs	r0, #0
 800e138:	4770      	bx	lr
	...

0800e13c <__gethex>:
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	ed2d 8b02 	vpush	{d8}
 800e144:	b089      	sub	sp, #36	; 0x24
 800e146:	ee08 0a10 	vmov	s16, r0
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	4bb4      	ldr	r3, [pc, #720]	; (800e420 <__gethex+0x2e4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	9301      	str	r3, [sp, #4]
 800e152:	4618      	mov	r0, r3
 800e154:	468b      	mov	fp, r1
 800e156:	4690      	mov	r8, r2
 800e158:	f7f2 f864 	bl	8000224 <strlen>
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	f8db 2000 	ldr.w	r2, [fp]
 800e162:	4403      	add	r3, r0
 800e164:	4682      	mov	sl, r0
 800e166:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e16a:	9305      	str	r3, [sp, #20]
 800e16c:	1c93      	adds	r3, r2, #2
 800e16e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e172:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e176:	32fe      	adds	r2, #254	; 0xfe
 800e178:	18d1      	adds	r1, r2, r3
 800e17a:	461f      	mov	r7, r3
 800e17c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e180:	9100      	str	r1, [sp, #0]
 800e182:	2830      	cmp	r0, #48	; 0x30
 800e184:	d0f8      	beq.n	800e178 <__gethex+0x3c>
 800e186:	f7ff ffc3 	bl	800e110 <__hexdig_fun>
 800e18a:	4604      	mov	r4, r0
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d13a      	bne.n	800e206 <__gethex+0xca>
 800e190:	9901      	ldr	r1, [sp, #4]
 800e192:	4652      	mov	r2, sl
 800e194:	4638      	mov	r0, r7
 800e196:	f001 fdb3 	bl	800fd00 <strncmp>
 800e19a:	4605      	mov	r5, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d168      	bne.n	800e272 <__gethex+0x136>
 800e1a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e1a4:	eb07 060a 	add.w	r6, r7, sl
 800e1a8:	f7ff ffb2 	bl	800e110 <__hexdig_fun>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d062      	beq.n	800e276 <__gethex+0x13a>
 800e1b0:	4633      	mov	r3, r6
 800e1b2:	7818      	ldrb	r0, [r3, #0]
 800e1b4:	2830      	cmp	r0, #48	; 0x30
 800e1b6:	461f      	mov	r7, r3
 800e1b8:	f103 0301 	add.w	r3, r3, #1
 800e1bc:	d0f9      	beq.n	800e1b2 <__gethex+0x76>
 800e1be:	f7ff ffa7 	bl	800e110 <__hexdig_fun>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	fab0 f480 	clz	r4, r0
 800e1c8:	0964      	lsrs	r4, r4, #5
 800e1ca:	4635      	mov	r5, r6
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	463a      	mov	r2, r7
 800e1d0:	4616      	mov	r6, r2
 800e1d2:	3201      	adds	r2, #1
 800e1d4:	7830      	ldrb	r0, [r6, #0]
 800e1d6:	f7ff ff9b 	bl	800e110 <__hexdig_fun>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d1f8      	bne.n	800e1d0 <__gethex+0x94>
 800e1de:	9901      	ldr	r1, [sp, #4]
 800e1e0:	4652      	mov	r2, sl
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f001 fd8c 	bl	800fd00 <strncmp>
 800e1e8:	b980      	cbnz	r0, 800e20c <__gethex+0xd0>
 800e1ea:	b94d      	cbnz	r5, 800e200 <__gethex+0xc4>
 800e1ec:	eb06 050a 	add.w	r5, r6, sl
 800e1f0:	462a      	mov	r2, r5
 800e1f2:	4616      	mov	r6, r2
 800e1f4:	3201      	adds	r2, #1
 800e1f6:	7830      	ldrb	r0, [r6, #0]
 800e1f8:	f7ff ff8a 	bl	800e110 <__hexdig_fun>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d1f8      	bne.n	800e1f2 <__gethex+0xb6>
 800e200:	1bad      	subs	r5, r5, r6
 800e202:	00ad      	lsls	r5, r5, #2
 800e204:	e004      	b.n	800e210 <__gethex+0xd4>
 800e206:	2400      	movs	r4, #0
 800e208:	4625      	mov	r5, r4
 800e20a:	e7e0      	b.n	800e1ce <__gethex+0x92>
 800e20c:	2d00      	cmp	r5, #0
 800e20e:	d1f7      	bne.n	800e200 <__gethex+0xc4>
 800e210:	7833      	ldrb	r3, [r6, #0]
 800e212:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e216:	2b50      	cmp	r3, #80	; 0x50
 800e218:	d13b      	bne.n	800e292 <__gethex+0x156>
 800e21a:	7873      	ldrb	r3, [r6, #1]
 800e21c:	2b2b      	cmp	r3, #43	; 0x2b
 800e21e:	d02c      	beq.n	800e27a <__gethex+0x13e>
 800e220:	2b2d      	cmp	r3, #45	; 0x2d
 800e222:	d02e      	beq.n	800e282 <__gethex+0x146>
 800e224:	1c71      	adds	r1, r6, #1
 800e226:	f04f 0900 	mov.w	r9, #0
 800e22a:	7808      	ldrb	r0, [r1, #0]
 800e22c:	f7ff ff70 	bl	800e110 <__hexdig_fun>
 800e230:	1e43      	subs	r3, r0, #1
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b18      	cmp	r3, #24
 800e236:	d82c      	bhi.n	800e292 <__gethex+0x156>
 800e238:	f1a0 0210 	sub.w	r2, r0, #16
 800e23c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e240:	f7ff ff66 	bl	800e110 <__hexdig_fun>
 800e244:	1e43      	subs	r3, r0, #1
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b18      	cmp	r3, #24
 800e24a:	d91d      	bls.n	800e288 <__gethex+0x14c>
 800e24c:	f1b9 0f00 	cmp.w	r9, #0
 800e250:	d000      	beq.n	800e254 <__gethex+0x118>
 800e252:	4252      	negs	r2, r2
 800e254:	4415      	add	r5, r2
 800e256:	f8cb 1000 	str.w	r1, [fp]
 800e25a:	b1e4      	cbz	r4, 800e296 <__gethex+0x15a>
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bf14      	ite	ne
 800e262:	2700      	movne	r7, #0
 800e264:	2706      	moveq	r7, #6
 800e266:	4638      	mov	r0, r7
 800e268:	b009      	add	sp, #36	; 0x24
 800e26a:	ecbd 8b02 	vpop	{d8}
 800e26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e272:	463e      	mov	r6, r7
 800e274:	4625      	mov	r5, r4
 800e276:	2401      	movs	r4, #1
 800e278:	e7ca      	b.n	800e210 <__gethex+0xd4>
 800e27a:	f04f 0900 	mov.w	r9, #0
 800e27e:	1cb1      	adds	r1, r6, #2
 800e280:	e7d3      	b.n	800e22a <__gethex+0xee>
 800e282:	f04f 0901 	mov.w	r9, #1
 800e286:	e7fa      	b.n	800e27e <__gethex+0x142>
 800e288:	230a      	movs	r3, #10
 800e28a:	fb03 0202 	mla	r2, r3, r2, r0
 800e28e:	3a10      	subs	r2, #16
 800e290:	e7d4      	b.n	800e23c <__gethex+0x100>
 800e292:	4631      	mov	r1, r6
 800e294:	e7df      	b.n	800e256 <__gethex+0x11a>
 800e296:	1bf3      	subs	r3, r6, r7
 800e298:	3b01      	subs	r3, #1
 800e29a:	4621      	mov	r1, r4
 800e29c:	2b07      	cmp	r3, #7
 800e29e:	dc0b      	bgt.n	800e2b8 <__gethex+0x17c>
 800e2a0:	ee18 0a10 	vmov	r0, s16
 800e2a4:	f000 fa90 	bl	800e7c8 <_Balloc>
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	b940      	cbnz	r0, 800e2be <__gethex+0x182>
 800e2ac:	4b5d      	ldr	r3, [pc, #372]	; (800e424 <__gethex+0x2e8>)
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	21de      	movs	r1, #222	; 0xde
 800e2b2:	485d      	ldr	r0, [pc, #372]	; (800e428 <__gethex+0x2ec>)
 800e2b4:	f001 fdf4 	bl	800fea0 <__assert_func>
 800e2b8:	3101      	adds	r1, #1
 800e2ba:	105b      	asrs	r3, r3, #1
 800e2bc:	e7ee      	b.n	800e29c <__gethex+0x160>
 800e2be:	f100 0914 	add.w	r9, r0, #20
 800e2c2:	f04f 0b00 	mov.w	fp, #0
 800e2c6:	f1ca 0301 	rsb	r3, sl, #1
 800e2ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2ce:	f8cd b000 	str.w	fp, [sp]
 800e2d2:	9306      	str	r3, [sp, #24]
 800e2d4:	42b7      	cmp	r7, r6
 800e2d6:	d340      	bcc.n	800e35a <__gethex+0x21e>
 800e2d8:	9802      	ldr	r0, [sp, #8]
 800e2da:	9b00      	ldr	r3, [sp, #0]
 800e2dc:	f840 3b04 	str.w	r3, [r0], #4
 800e2e0:	eba0 0009 	sub.w	r0, r0, r9
 800e2e4:	1080      	asrs	r0, r0, #2
 800e2e6:	0146      	lsls	r6, r0, #5
 800e2e8:	6120      	str	r0, [r4, #16]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 fb5e 	bl	800e9ac <__hi0bits>
 800e2f0:	1a30      	subs	r0, r6, r0
 800e2f2:	f8d8 6000 	ldr.w	r6, [r8]
 800e2f6:	42b0      	cmp	r0, r6
 800e2f8:	dd63      	ble.n	800e3c2 <__gethex+0x286>
 800e2fa:	1b87      	subs	r7, r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 ff02 	bl	800f108 <__any_on>
 800e304:	4682      	mov	sl, r0
 800e306:	b1a8      	cbz	r0, 800e334 <__gethex+0x1f8>
 800e308:	1e7b      	subs	r3, r7, #1
 800e30a:	1159      	asrs	r1, r3, #5
 800e30c:	f003 021f 	and.w	r2, r3, #31
 800e310:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e314:	f04f 0a01 	mov.w	sl, #1
 800e318:	fa0a f202 	lsl.w	r2, sl, r2
 800e31c:	420a      	tst	r2, r1
 800e31e:	d009      	beq.n	800e334 <__gethex+0x1f8>
 800e320:	4553      	cmp	r3, sl
 800e322:	dd05      	ble.n	800e330 <__gethex+0x1f4>
 800e324:	1eb9      	subs	r1, r7, #2
 800e326:	4620      	mov	r0, r4
 800e328:	f000 feee 	bl	800f108 <__any_on>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d145      	bne.n	800e3bc <__gethex+0x280>
 800e330:	f04f 0a02 	mov.w	sl, #2
 800e334:	4639      	mov	r1, r7
 800e336:	4620      	mov	r0, r4
 800e338:	f7ff fe98 	bl	800e06c <rshift>
 800e33c:	443d      	add	r5, r7
 800e33e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e342:	42ab      	cmp	r3, r5
 800e344:	da4c      	bge.n	800e3e0 <__gethex+0x2a4>
 800e346:	ee18 0a10 	vmov	r0, s16
 800e34a:	4621      	mov	r1, r4
 800e34c:	f000 fa7c 	bl	800e848 <_Bfree>
 800e350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e352:	2300      	movs	r3, #0
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	27a3      	movs	r7, #163	; 0xa3
 800e358:	e785      	b.n	800e266 <__gethex+0x12a>
 800e35a:	1e73      	subs	r3, r6, #1
 800e35c:	9a05      	ldr	r2, [sp, #20]
 800e35e:	9303      	str	r3, [sp, #12]
 800e360:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e364:	4293      	cmp	r3, r2
 800e366:	d019      	beq.n	800e39c <__gethex+0x260>
 800e368:	f1bb 0f20 	cmp.w	fp, #32
 800e36c:	d107      	bne.n	800e37e <__gethex+0x242>
 800e36e:	9b02      	ldr	r3, [sp, #8]
 800e370:	9a00      	ldr	r2, [sp, #0]
 800e372:	f843 2b04 	str.w	r2, [r3], #4
 800e376:	9302      	str	r3, [sp, #8]
 800e378:	2300      	movs	r3, #0
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	469b      	mov	fp, r3
 800e37e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e382:	f7ff fec5 	bl	800e110 <__hexdig_fun>
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	f000 000f 	and.w	r0, r0, #15
 800e38c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e390:	4303      	orrs	r3, r0
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	f10b 0b04 	add.w	fp, fp, #4
 800e398:	9b03      	ldr	r3, [sp, #12]
 800e39a:	e00d      	b.n	800e3b8 <__gethex+0x27c>
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	9a06      	ldr	r2, [sp, #24]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	42bb      	cmp	r3, r7
 800e3a4:	d3e0      	bcc.n	800e368 <__gethex+0x22c>
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	9901      	ldr	r1, [sp, #4]
 800e3aa:	9307      	str	r3, [sp, #28]
 800e3ac:	4652      	mov	r2, sl
 800e3ae:	f001 fca7 	bl	800fd00 <strncmp>
 800e3b2:	9b07      	ldr	r3, [sp, #28]
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d1d7      	bne.n	800e368 <__gethex+0x22c>
 800e3b8:	461e      	mov	r6, r3
 800e3ba:	e78b      	b.n	800e2d4 <__gethex+0x198>
 800e3bc:	f04f 0a03 	mov.w	sl, #3
 800e3c0:	e7b8      	b.n	800e334 <__gethex+0x1f8>
 800e3c2:	da0a      	bge.n	800e3da <__gethex+0x29e>
 800e3c4:	1a37      	subs	r7, r6, r0
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	ee18 0a10 	vmov	r0, s16
 800e3cc:	463a      	mov	r2, r7
 800e3ce:	f000 fc57 	bl	800ec80 <__lshift>
 800e3d2:	1bed      	subs	r5, r5, r7
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	f100 0914 	add.w	r9, r0, #20
 800e3da:	f04f 0a00 	mov.w	sl, #0
 800e3de:	e7ae      	b.n	800e33e <__gethex+0x202>
 800e3e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3e4:	42a8      	cmp	r0, r5
 800e3e6:	dd72      	ble.n	800e4ce <__gethex+0x392>
 800e3e8:	1b45      	subs	r5, r0, r5
 800e3ea:	42ae      	cmp	r6, r5
 800e3ec:	dc36      	bgt.n	800e45c <__gethex+0x320>
 800e3ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d02a      	beq.n	800e44c <__gethex+0x310>
 800e3f6:	2b03      	cmp	r3, #3
 800e3f8:	d02c      	beq.n	800e454 <__gethex+0x318>
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d11c      	bne.n	800e438 <__gethex+0x2fc>
 800e3fe:	42ae      	cmp	r6, r5
 800e400:	d11a      	bne.n	800e438 <__gethex+0x2fc>
 800e402:	2e01      	cmp	r6, #1
 800e404:	d112      	bne.n	800e42c <__gethex+0x2f0>
 800e406:	9a04      	ldr	r2, [sp, #16]
 800e408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	2301      	movs	r3, #1
 800e410:	6123      	str	r3, [r4, #16]
 800e412:	f8c9 3000 	str.w	r3, [r9]
 800e416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e418:	2762      	movs	r7, #98	; 0x62
 800e41a:	601c      	str	r4, [r3, #0]
 800e41c:	e723      	b.n	800e266 <__gethex+0x12a>
 800e41e:	bf00      	nop
 800e420:	080129c0 	.word	0x080129c0
 800e424:	08012948 	.word	0x08012948
 800e428:	08012959 	.word	0x08012959
 800e42c:	1e71      	subs	r1, r6, #1
 800e42e:	4620      	mov	r0, r4
 800e430:	f000 fe6a 	bl	800f108 <__any_on>
 800e434:	2800      	cmp	r0, #0
 800e436:	d1e6      	bne.n	800e406 <__gethex+0x2ca>
 800e438:	ee18 0a10 	vmov	r0, s16
 800e43c:	4621      	mov	r1, r4
 800e43e:	f000 fa03 	bl	800e848 <_Bfree>
 800e442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e444:	2300      	movs	r3, #0
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	2750      	movs	r7, #80	; 0x50
 800e44a:	e70c      	b.n	800e266 <__gethex+0x12a>
 800e44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1f2      	bne.n	800e438 <__gethex+0x2fc>
 800e452:	e7d8      	b.n	800e406 <__gethex+0x2ca>
 800e454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1d5      	bne.n	800e406 <__gethex+0x2ca>
 800e45a:	e7ed      	b.n	800e438 <__gethex+0x2fc>
 800e45c:	1e6f      	subs	r7, r5, #1
 800e45e:	f1ba 0f00 	cmp.w	sl, #0
 800e462:	d131      	bne.n	800e4c8 <__gethex+0x38c>
 800e464:	b127      	cbz	r7, 800e470 <__gethex+0x334>
 800e466:	4639      	mov	r1, r7
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 fe4d 	bl	800f108 <__any_on>
 800e46e:	4682      	mov	sl, r0
 800e470:	117b      	asrs	r3, r7, #5
 800e472:	2101      	movs	r1, #1
 800e474:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e478:	f007 071f 	and.w	r7, r7, #31
 800e47c:	fa01 f707 	lsl.w	r7, r1, r7
 800e480:	421f      	tst	r7, r3
 800e482:	4629      	mov	r1, r5
 800e484:	4620      	mov	r0, r4
 800e486:	bf18      	it	ne
 800e488:	f04a 0a02 	orrne.w	sl, sl, #2
 800e48c:	1b76      	subs	r6, r6, r5
 800e48e:	f7ff fded 	bl	800e06c <rshift>
 800e492:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e496:	2702      	movs	r7, #2
 800e498:	f1ba 0f00 	cmp.w	sl, #0
 800e49c:	d048      	beq.n	800e530 <__gethex+0x3f4>
 800e49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d015      	beq.n	800e4d2 <__gethex+0x396>
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d017      	beq.n	800e4da <__gethex+0x39e>
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d109      	bne.n	800e4c2 <__gethex+0x386>
 800e4ae:	f01a 0f02 	tst.w	sl, #2
 800e4b2:	d006      	beq.n	800e4c2 <__gethex+0x386>
 800e4b4:	f8d9 0000 	ldr.w	r0, [r9]
 800e4b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e4bc:	f01a 0f01 	tst.w	sl, #1
 800e4c0:	d10e      	bne.n	800e4e0 <__gethex+0x3a4>
 800e4c2:	f047 0710 	orr.w	r7, r7, #16
 800e4c6:	e033      	b.n	800e530 <__gethex+0x3f4>
 800e4c8:	f04f 0a01 	mov.w	sl, #1
 800e4cc:	e7d0      	b.n	800e470 <__gethex+0x334>
 800e4ce:	2701      	movs	r7, #1
 800e4d0:	e7e2      	b.n	800e498 <__gethex+0x35c>
 800e4d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4d4:	f1c3 0301 	rsb	r3, r3, #1
 800e4d8:	9315      	str	r3, [sp, #84]	; 0x54
 800e4da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d0f0      	beq.n	800e4c2 <__gethex+0x386>
 800e4e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4e4:	f104 0314 	add.w	r3, r4, #20
 800e4e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4f0:	f04f 0c00 	mov.w	ip, #0
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4fe:	d01c      	beq.n	800e53a <__gethex+0x3fe>
 800e500:	3201      	adds	r2, #1
 800e502:	6002      	str	r2, [r0, #0]
 800e504:	2f02      	cmp	r7, #2
 800e506:	f104 0314 	add.w	r3, r4, #20
 800e50a:	d13f      	bne.n	800e58c <__gethex+0x450>
 800e50c:	f8d8 2000 	ldr.w	r2, [r8]
 800e510:	3a01      	subs	r2, #1
 800e512:	42b2      	cmp	r2, r6
 800e514:	d10a      	bne.n	800e52c <__gethex+0x3f0>
 800e516:	1171      	asrs	r1, r6, #5
 800e518:	2201      	movs	r2, #1
 800e51a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e51e:	f006 061f 	and.w	r6, r6, #31
 800e522:	fa02 f606 	lsl.w	r6, r2, r6
 800e526:	421e      	tst	r6, r3
 800e528:	bf18      	it	ne
 800e52a:	4617      	movne	r7, r2
 800e52c:	f047 0720 	orr.w	r7, r7, #32
 800e530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e532:	601c      	str	r4, [r3, #0]
 800e534:	9b04      	ldr	r3, [sp, #16]
 800e536:	601d      	str	r5, [r3, #0]
 800e538:	e695      	b.n	800e266 <__gethex+0x12a>
 800e53a:	4299      	cmp	r1, r3
 800e53c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e540:	d8d8      	bhi.n	800e4f4 <__gethex+0x3b8>
 800e542:	68a3      	ldr	r3, [r4, #8]
 800e544:	459b      	cmp	fp, r3
 800e546:	db19      	blt.n	800e57c <__gethex+0x440>
 800e548:	6861      	ldr	r1, [r4, #4]
 800e54a:	ee18 0a10 	vmov	r0, s16
 800e54e:	3101      	adds	r1, #1
 800e550:	f000 f93a 	bl	800e7c8 <_Balloc>
 800e554:	4681      	mov	r9, r0
 800e556:	b918      	cbnz	r0, 800e560 <__gethex+0x424>
 800e558:	4b1a      	ldr	r3, [pc, #104]	; (800e5c4 <__gethex+0x488>)
 800e55a:	4602      	mov	r2, r0
 800e55c:	2184      	movs	r1, #132	; 0x84
 800e55e:	e6a8      	b.n	800e2b2 <__gethex+0x176>
 800e560:	6922      	ldr	r2, [r4, #16]
 800e562:	3202      	adds	r2, #2
 800e564:	f104 010c 	add.w	r1, r4, #12
 800e568:	0092      	lsls	r2, r2, #2
 800e56a:	300c      	adds	r0, #12
 800e56c:	f000 f91e 	bl	800e7ac <memcpy>
 800e570:	4621      	mov	r1, r4
 800e572:	ee18 0a10 	vmov	r0, s16
 800e576:	f000 f967 	bl	800e848 <_Bfree>
 800e57a:	464c      	mov	r4, r9
 800e57c:	6923      	ldr	r3, [r4, #16]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e584:	6122      	str	r2, [r4, #16]
 800e586:	2201      	movs	r2, #1
 800e588:	615a      	str	r2, [r3, #20]
 800e58a:	e7bb      	b.n	800e504 <__gethex+0x3c8>
 800e58c:	6922      	ldr	r2, [r4, #16]
 800e58e:	455a      	cmp	r2, fp
 800e590:	dd0b      	ble.n	800e5aa <__gethex+0x46e>
 800e592:	2101      	movs	r1, #1
 800e594:	4620      	mov	r0, r4
 800e596:	f7ff fd69 	bl	800e06c <rshift>
 800e59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e59e:	3501      	adds	r5, #1
 800e5a0:	42ab      	cmp	r3, r5
 800e5a2:	f6ff aed0 	blt.w	800e346 <__gethex+0x20a>
 800e5a6:	2701      	movs	r7, #1
 800e5a8:	e7c0      	b.n	800e52c <__gethex+0x3f0>
 800e5aa:	f016 061f 	ands.w	r6, r6, #31
 800e5ae:	d0fa      	beq.n	800e5a6 <__gethex+0x46a>
 800e5b0:	4453      	add	r3, sl
 800e5b2:	f1c6 0620 	rsb	r6, r6, #32
 800e5b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5ba:	f000 f9f7 	bl	800e9ac <__hi0bits>
 800e5be:	42b0      	cmp	r0, r6
 800e5c0:	dbe7      	blt.n	800e592 <__gethex+0x456>
 800e5c2:	e7f0      	b.n	800e5a6 <__gethex+0x46a>
 800e5c4:	08012948 	.word	0x08012948

0800e5c8 <L_shift>:
 800e5c8:	f1c2 0208 	rsb	r2, r2, #8
 800e5cc:	0092      	lsls	r2, r2, #2
 800e5ce:	b570      	push	{r4, r5, r6, lr}
 800e5d0:	f1c2 0620 	rsb	r6, r2, #32
 800e5d4:	6843      	ldr	r3, [r0, #4]
 800e5d6:	6804      	ldr	r4, [r0, #0]
 800e5d8:	fa03 f506 	lsl.w	r5, r3, r6
 800e5dc:	432c      	orrs	r4, r5
 800e5de:	40d3      	lsrs	r3, r2
 800e5e0:	6004      	str	r4, [r0, #0]
 800e5e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5e6:	4288      	cmp	r0, r1
 800e5e8:	d3f4      	bcc.n	800e5d4 <L_shift+0xc>
 800e5ea:	bd70      	pop	{r4, r5, r6, pc}

0800e5ec <__match>:
 800e5ec:	b530      	push	{r4, r5, lr}
 800e5ee:	6803      	ldr	r3, [r0, #0]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5f6:	b914      	cbnz	r4, 800e5fe <__match+0x12>
 800e5f8:	6003      	str	r3, [r0, #0]
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	bd30      	pop	{r4, r5, pc}
 800e5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e606:	2d19      	cmp	r5, #25
 800e608:	bf98      	it	ls
 800e60a:	3220      	addls	r2, #32
 800e60c:	42a2      	cmp	r2, r4
 800e60e:	d0f0      	beq.n	800e5f2 <__match+0x6>
 800e610:	2000      	movs	r0, #0
 800e612:	e7f3      	b.n	800e5fc <__match+0x10>

0800e614 <__hexnan>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	680b      	ldr	r3, [r1, #0]
 800e61a:	115e      	asrs	r6, r3, #5
 800e61c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e620:	f013 031f 	ands.w	r3, r3, #31
 800e624:	b087      	sub	sp, #28
 800e626:	bf18      	it	ne
 800e628:	3604      	addne	r6, #4
 800e62a:	2500      	movs	r5, #0
 800e62c:	1f37      	subs	r7, r6, #4
 800e62e:	4690      	mov	r8, r2
 800e630:	6802      	ldr	r2, [r0, #0]
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	4682      	mov	sl, r0
 800e636:	f846 5c04 	str.w	r5, [r6, #-4]
 800e63a:	46b9      	mov	r9, r7
 800e63c:	463c      	mov	r4, r7
 800e63e:	9502      	str	r5, [sp, #8]
 800e640:	46ab      	mov	fp, r5
 800e642:	7851      	ldrb	r1, [r2, #1]
 800e644:	1c53      	adds	r3, r2, #1
 800e646:	9303      	str	r3, [sp, #12]
 800e648:	b341      	cbz	r1, 800e69c <__hexnan+0x88>
 800e64a:	4608      	mov	r0, r1
 800e64c:	9205      	str	r2, [sp, #20]
 800e64e:	9104      	str	r1, [sp, #16]
 800e650:	f7ff fd5e 	bl	800e110 <__hexdig_fun>
 800e654:	2800      	cmp	r0, #0
 800e656:	d14f      	bne.n	800e6f8 <__hexnan+0xe4>
 800e658:	9904      	ldr	r1, [sp, #16]
 800e65a:	9a05      	ldr	r2, [sp, #20]
 800e65c:	2920      	cmp	r1, #32
 800e65e:	d818      	bhi.n	800e692 <__hexnan+0x7e>
 800e660:	9b02      	ldr	r3, [sp, #8]
 800e662:	459b      	cmp	fp, r3
 800e664:	dd13      	ble.n	800e68e <__hexnan+0x7a>
 800e666:	454c      	cmp	r4, r9
 800e668:	d206      	bcs.n	800e678 <__hexnan+0x64>
 800e66a:	2d07      	cmp	r5, #7
 800e66c:	dc04      	bgt.n	800e678 <__hexnan+0x64>
 800e66e:	462a      	mov	r2, r5
 800e670:	4649      	mov	r1, r9
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff ffa8 	bl	800e5c8 <L_shift>
 800e678:	4544      	cmp	r4, r8
 800e67a:	d950      	bls.n	800e71e <__hexnan+0x10a>
 800e67c:	2300      	movs	r3, #0
 800e67e:	f1a4 0904 	sub.w	r9, r4, #4
 800e682:	f844 3c04 	str.w	r3, [r4, #-4]
 800e686:	f8cd b008 	str.w	fp, [sp, #8]
 800e68a:	464c      	mov	r4, r9
 800e68c:	461d      	mov	r5, r3
 800e68e:	9a03      	ldr	r2, [sp, #12]
 800e690:	e7d7      	b.n	800e642 <__hexnan+0x2e>
 800e692:	2929      	cmp	r1, #41	; 0x29
 800e694:	d156      	bne.n	800e744 <__hexnan+0x130>
 800e696:	3202      	adds	r2, #2
 800e698:	f8ca 2000 	str.w	r2, [sl]
 800e69c:	f1bb 0f00 	cmp.w	fp, #0
 800e6a0:	d050      	beq.n	800e744 <__hexnan+0x130>
 800e6a2:	454c      	cmp	r4, r9
 800e6a4:	d206      	bcs.n	800e6b4 <__hexnan+0xa0>
 800e6a6:	2d07      	cmp	r5, #7
 800e6a8:	dc04      	bgt.n	800e6b4 <__hexnan+0xa0>
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	4649      	mov	r1, r9
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f7ff ff8a 	bl	800e5c8 <L_shift>
 800e6b4:	4544      	cmp	r4, r8
 800e6b6:	d934      	bls.n	800e722 <__hexnan+0x10e>
 800e6b8:	f1a8 0204 	sub.w	r2, r8, #4
 800e6bc:	4623      	mov	r3, r4
 800e6be:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6c6:	429f      	cmp	r7, r3
 800e6c8:	d2f9      	bcs.n	800e6be <__hexnan+0xaa>
 800e6ca:	1b3b      	subs	r3, r7, r4
 800e6cc:	f023 0303 	bic.w	r3, r3, #3
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	3401      	adds	r4, #1
 800e6d4:	3e03      	subs	r6, #3
 800e6d6:	42b4      	cmp	r4, r6
 800e6d8:	bf88      	it	hi
 800e6da:	2304      	movhi	r3, #4
 800e6dc:	4443      	add	r3, r8
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f843 2b04 	str.w	r2, [r3], #4
 800e6e4:	429f      	cmp	r7, r3
 800e6e6:	d2fb      	bcs.n	800e6e0 <__hexnan+0xcc>
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	b91b      	cbnz	r3, 800e6f4 <__hexnan+0xe0>
 800e6ec:	4547      	cmp	r7, r8
 800e6ee:	d127      	bne.n	800e740 <__hexnan+0x12c>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	603b      	str	r3, [r7, #0]
 800e6f4:	2005      	movs	r0, #5
 800e6f6:	e026      	b.n	800e746 <__hexnan+0x132>
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	2d08      	cmp	r5, #8
 800e6fc:	f10b 0b01 	add.w	fp, fp, #1
 800e700:	dd06      	ble.n	800e710 <__hexnan+0xfc>
 800e702:	4544      	cmp	r4, r8
 800e704:	d9c3      	bls.n	800e68e <__hexnan+0x7a>
 800e706:	2300      	movs	r3, #0
 800e708:	f844 3c04 	str.w	r3, [r4, #-4]
 800e70c:	2501      	movs	r5, #1
 800e70e:	3c04      	subs	r4, #4
 800e710:	6822      	ldr	r2, [r4, #0]
 800e712:	f000 000f 	and.w	r0, r0, #15
 800e716:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	e7b7      	b.n	800e68e <__hexnan+0x7a>
 800e71e:	2508      	movs	r5, #8
 800e720:	e7b5      	b.n	800e68e <__hexnan+0x7a>
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d0df      	beq.n	800e6e8 <__hexnan+0xd4>
 800e728:	f04f 32ff 	mov.w	r2, #4294967295
 800e72c:	f1c3 0320 	rsb	r3, r3, #32
 800e730:	fa22 f303 	lsr.w	r3, r2, r3
 800e734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e738:	401a      	ands	r2, r3
 800e73a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e73e:	e7d3      	b.n	800e6e8 <__hexnan+0xd4>
 800e740:	3f04      	subs	r7, #4
 800e742:	e7d1      	b.n	800e6e8 <__hexnan+0xd4>
 800e744:	2004      	movs	r0, #4
 800e746:	b007      	add	sp, #28
 800e748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e74c <_localeconv_r>:
 800e74c:	4800      	ldr	r0, [pc, #0]	; (800e750 <_localeconv_r+0x4>)
 800e74e:	4770      	bx	lr
 800e750:	2000016c 	.word	0x2000016c

0800e754 <_lseek_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4d07      	ldr	r5, [pc, #28]	; (800e774 <_lseek_r+0x20>)
 800e758:	4604      	mov	r4, r0
 800e75a:	4608      	mov	r0, r1
 800e75c:	4611      	mov	r1, r2
 800e75e:	2200      	movs	r2, #0
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f7f7 f966 	bl	8005a34 <_lseek>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_lseek_r+0x1e>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_lseek_r+0x1e>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	2000122c 	.word	0x2000122c

0800e778 <malloc>:
 800e778:	4b02      	ldr	r3, [pc, #8]	; (800e784 <malloc+0xc>)
 800e77a:	4601      	mov	r1, r0
 800e77c:	6818      	ldr	r0, [r3, #0]
 800e77e:	f000 bd67 	b.w	800f250 <_malloc_r>
 800e782:	bf00      	nop
 800e784:	20000014 	.word	0x20000014

0800e788 <__ascii_mbtowc>:
 800e788:	b082      	sub	sp, #8
 800e78a:	b901      	cbnz	r1, 800e78e <__ascii_mbtowc+0x6>
 800e78c:	a901      	add	r1, sp, #4
 800e78e:	b142      	cbz	r2, 800e7a2 <__ascii_mbtowc+0x1a>
 800e790:	b14b      	cbz	r3, 800e7a6 <__ascii_mbtowc+0x1e>
 800e792:	7813      	ldrb	r3, [r2, #0]
 800e794:	600b      	str	r3, [r1, #0]
 800e796:	7812      	ldrb	r2, [r2, #0]
 800e798:	1e10      	subs	r0, r2, #0
 800e79a:	bf18      	it	ne
 800e79c:	2001      	movne	r0, #1
 800e79e:	b002      	add	sp, #8
 800e7a0:	4770      	bx	lr
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	e7fb      	b.n	800e79e <__ascii_mbtowc+0x16>
 800e7a6:	f06f 0001 	mvn.w	r0, #1
 800e7aa:	e7f8      	b.n	800e79e <__ascii_mbtowc+0x16>

0800e7ac <memcpy>:
 800e7ac:	440a      	add	r2, r1
 800e7ae:	4291      	cmp	r1, r2
 800e7b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7b4:	d100      	bne.n	800e7b8 <memcpy+0xc>
 800e7b6:	4770      	bx	lr
 800e7b8:	b510      	push	{r4, lr}
 800e7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7c2:	4291      	cmp	r1, r2
 800e7c4:	d1f9      	bne.n	800e7ba <memcpy+0xe>
 800e7c6:	bd10      	pop	{r4, pc}

0800e7c8 <_Balloc>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	460d      	mov	r5, r1
 800e7d0:	b976      	cbnz	r6, 800e7f0 <_Balloc+0x28>
 800e7d2:	2010      	movs	r0, #16
 800e7d4:	f7ff ffd0 	bl	800e778 <malloc>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	6260      	str	r0, [r4, #36]	; 0x24
 800e7dc:	b920      	cbnz	r0, 800e7e8 <_Balloc+0x20>
 800e7de:	4b18      	ldr	r3, [pc, #96]	; (800e840 <_Balloc+0x78>)
 800e7e0:	4818      	ldr	r0, [pc, #96]	; (800e844 <_Balloc+0x7c>)
 800e7e2:	2166      	movs	r1, #102	; 0x66
 800e7e4:	f001 fb5c 	bl	800fea0 <__assert_func>
 800e7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7ec:	6006      	str	r6, [r0, #0]
 800e7ee:	60c6      	str	r6, [r0, #12]
 800e7f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e7f2:	68f3      	ldr	r3, [r6, #12]
 800e7f4:	b183      	cbz	r3, 800e818 <_Balloc+0x50>
 800e7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7fe:	b9b8      	cbnz	r0, 800e830 <_Balloc+0x68>
 800e800:	2101      	movs	r1, #1
 800e802:	fa01 f605 	lsl.w	r6, r1, r5
 800e806:	1d72      	adds	r2, r6, #5
 800e808:	0092      	lsls	r2, r2, #2
 800e80a:	4620      	mov	r0, r4
 800e80c:	f000 fc9d 	bl	800f14a <_calloc_r>
 800e810:	b160      	cbz	r0, 800e82c <_Balloc+0x64>
 800e812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e816:	e00e      	b.n	800e836 <_Balloc+0x6e>
 800e818:	2221      	movs	r2, #33	; 0x21
 800e81a:	2104      	movs	r1, #4
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fc94 	bl	800f14a <_calloc_r>
 800e822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e824:	60f0      	str	r0, [r6, #12]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1e4      	bne.n	800e7f6 <_Balloc+0x2e>
 800e82c:	2000      	movs	r0, #0
 800e82e:	bd70      	pop	{r4, r5, r6, pc}
 800e830:	6802      	ldr	r2, [r0, #0]
 800e832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e836:	2300      	movs	r3, #0
 800e838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e83c:	e7f7      	b.n	800e82e <_Balloc+0x66>
 800e83e:	bf00      	nop
 800e840:	080128d6 	.word	0x080128d6
 800e844:	080129d4 	.word	0x080129d4

0800e848 <_Bfree>:
 800e848:	b570      	push	{r4, r5, r6, lr}
 800e84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e84c:	4605      	mov	r5, r0
 800e84e:	460c      	mov	r4, r1
 800e850:	b976      	cbnz	r6, 800e870 <_Bfree+0x28>
 800e852:	2010      	movs	r0, #16
 800e854:	f7ff ff90 	bl	800e778 <malloc>
 800e858:	4602      	mov	r2, r0
 800e85a:	6268      	str	r0, [r5, #36]	; 0x24
 800e85c:	b920      	cbnz	r0, 800e868 <_Bfree+0x20>
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <_Bfree+0x3c>)
 800e860:	4809      	ldr	r0, [pc, #36]	; (800e888 <_Bfree+0x40>)
 800e862:	218a      	movs	r1, #138	; 0x8a
 800e864:	f001 fb1c 	bl	800fea0 <__assert_func>
 800e868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e86c:	6006      	str	r6, [r0, #0]
 800e86e:	60c6      	str	r6, [r0, #12]
 800e870:	b13c      	cbz	r4, 800e882 <_Bfree+0x3a>
 800e872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e874:	6862      	ldr	r2, [r4, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e87c:	6021      	str	r1, [r4, #0]
 800e87e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	080128d6 	.word	0x080128d6
 800e888:	080129d4 	.word	0x080129d4

0800e88c <__multadd>:
 800e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	690d      	ldr	r5, [r1, #16]
 800e892:	4607      	mov	r7, r0
 800e894:	460c      	mov	r4, r1
 800e896:	461e      	mov	r6, r3
 800e898:	f101 0c14 	add.w	ip, r1, #20
 800e89c:	2000      	movs	r0, #0
 800e89e:	f8dc 3000 	ldr.w	r3, [ip]
 800e8a2:	b299      	uxth	r1, r3
 800e8a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e8a8:	0c1e      	lsrs	r6, r3, #16
 800e8aa:	0c0b      	lsrs	r3, r1, #16
 800e8ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e8b0:	b289      	uxth	r1, r1
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8b8:	4285      	cmp	r5, r0
 800e8ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e8be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8c2:	dcec      	bgt.n	800e89e <__multadd+0x12>
 800e8c4:	b30e      	cbz	r6, 800e90a <__multadd+0x7e>
 800e8c6:	68a3      	ldr	r3, [r4, #8]
 800e8c8:	42ab      	cmp	r3, r5
 800e8ca:	dc19      	bgt.n	800e900 <__multadd+0x74>
 800e8cc:	6861      	ldr	r1, [r4, #4]
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	3101      	adds	r1, #1
 800e8d2:	f7ff ff79 	bl	800e7c8 <_Balloc>
 800e8d6:	4680      	mov	r8, r0
 800e8d8:	b928      	cbnz	r0, 800e8e6 <__multadd+0x5a>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	4b0c      	ldr	r3, [pc, #48]	; (800e910 <__multadd+0x84>)
 800e8de:	480d      	ldr	r0, [pc, #52]	; (800e914 <__multadd+0x88>)
 800e8e0:	21b5      	movs	r1, #181	; 0xb5
 800e8e2:	f001 fadd 	bl	800fea0 <__assert_func>
 800e8e6:	6922      	ldr	r2, [r4, #16]
 800e8e8:	3202      	adds	r2, #2
 800e8ea:	f104 010c 	add.w	r1, r4, #12
 800e8ee:	0092      	lsls	r2, r2, #2
 800e8f0:	300c      	adds	r0, #12
 800e8f2:	f7ff ff5b 	bl	800e7ac <memcpy>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	4638      	mov	r0, r7
 800e8fa:	f7ff ffa5 	bl	800e848 <_Bfree>
 800e8fe:	4644      	mov	r4, r8
 800e900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e904:	3501      	adds	r5, #1
 800e906:	615e      	str	r6, [r3, #20]
 800e908:	6125      	str	r5, [r4, #16]
 800e90a:	4620      	mov	r0, r4
 800e90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e910:	08012948 	.word	0x08012948
 800e914:	080129d4 	.word	0x080129d4

0800e918 <__s2b>:
 800e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	460c      	mov	r4, r1
 800e91e:	4615      	mov	r5, r2
 800e920:	461f      	mov	r7, r3
 800e922:	2209      	movs	r2, #9
 800e924:	3308      	adds	r3, #8
 800e926:	4606      	mov	r6, r0
 800e928:	fb93 f3f2 	sdiv	r3, r3, r2
 800e92c:	2100      	movs	r1, #0
 800e92e:	2201      	movs	r2, #1
 800e930:	429a      	cmp	r2, r3
 800e932:	db09      	blt.n	800e948 <__s2b+0x30>
 800e934:	4630      	mov	r0, r6
 800e936:	f7ff ff47 	bl	800e7c8 <_Balloc>
 800e93a:	b940      	cbnz	r0, 800e94e <__s2b+0x36>
 800e93c:	4602      	mov	r2, r0
 800e93e:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <__s2b+0x8c>)
 800e940:	4819      	ldr	r0, [pc, #100]	; (800e9a8 <__s2b+0x90>)
 800e942:	21ce      	movs	r1, #206	; 0xce
 800e944:	f001 faac 	bl	800fea0 <__assert_func>
 800e948:	0052      	lsls	r2, r2, #1
 800e94a:	3101      	adds	r1, #1
 800e94c:	e7f0      	b.n	800e930 <__s2b+0x18>
 800e94e:	9b08      	ldr	r3, [sp, #32]
 800e950:	6143      	str	r3, [r0, #20]
 800e952:	2d09      	cmp	r5, #9
 800e954:	f04f 0301 	mov.w	r3, #1
 800e958:	6103      	str	r3, [r0, #16]
 800e95a:	dd16      	ble.n	800e98a <__s2b+0x72>
 800e95c:	f104 0909 	add.w	r9, r4, #9
 800e960:	46c8      	mov	r8, r9
 800e962:	442c      	add	r4, r5
 800e964:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e968:	4601      	mov	r1, r0
 800e96a:	3b30      	subs	r3, #48	; 0x30
 800e96c:	220a      	movs	r2, #10
 800e96e:	4630      	mov	r0, r6
 800e970:	f7ff ff8c 	bl	800e88c <__multadd>
 800e974:	45a0      	cmp	r8, r4
 800e976:	d1f5      	bne.n	800e964 <__s2b+0x4c>
 800e978:	f1a5 0408 	sub.w	r4, r5, #8
 800e97c:	444c      	add	r4, r9
 800e97e:	1b2d      	subs	r5, r5, r4
 800e980:	1963      	adds	r3, r4, r5
 800e982:	42bb      	cmp	r3, r7
 800e984:	db04      	blt.n	800e990 <__s2b+0x78>
 800e986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98a:	340a      	adds	r4, #10
 800e98c:	2509      	movs	r5, #9
 800e98e:	e7f6      	b.n	800e97e <__s2b+0x66>
 800e990:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e994:	4601      	mov	r1, r0
 800e996:	3b30      	subs	r3, #48	; 0x30
 800e998:	220a      	movs	r2, #10
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7ff ff76 	bl	800e88c <__multadd>
 800e9a0:	e7ee      	b.n	800e980 <__s2b+0x68>
 800e9a2:	bf00      	nop
 800e9a4:	08012948 	.word	0x08012948
 800e9a8:	080129d4 	.word	0x080129d4

0800e9ac <__hi0bits>:
 800e9ac:	0c03      	lsrs	r3, r0, #16
 800e9ae:	041b      	lsls	r3, r3, #16
 800e9b0:	b9d3      	cbnz	r3, 800e9e8 <__hi0bits+0x3c>
 800e9b2:	0400      	lsls	r0, r0, #16
 800e9b4:	2310      	movs	r3, #16
 800e9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e9ba:	bf04      	itt	eq
 800e9bc:	0200      	lsleq	r0, r0, #8
 800e9be:	3308      	addeq	r3, #8
 800e9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e9c4:	bf04      	itt	eq
 800e9c6:	0100      	lsleq	r0, r0, #4
 800e9c8:	3304      	addeq	r3, #4
 800e9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e9ce:	bf04      	itt	eq
 800e9d0:	0080      	lsleq	r0, r0, #2
 800e9d2:	3302      	addeq	r3, #2
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	db05      	blt.n	800e9e4 <__hi0bits+0x38>
 800e9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e9dc:	f103 0301 	add.w	r3, r3, #1
 800e9e0:	bf08      	it	eq
 800e9e2:	2320      	moveq	r3, #32
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	4770      	bx	lr
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	e7e4      	b.n	800e9b6 <__hi0bits+0xa>

0800e9ec <__lo0bits>:
 800e9ec:	6803      	ldr	r3, [r0, #0]
 800e9ee:	f013 0207 	ands.w	r2, r3, #7
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	d00b      	beq.n	800ea0e <__lo0bits+0x22>
 800e9f6:	07da      	lsls	r2, r3, #31
 800e9f8:	d423      	bmi.n	800ea42 <__lo0bits+0x56>
 800e9fa:	0798      	lsls	r0, r3, #30
 800e9fc:	bf49      	itett	mi
 800e9fe:	085b      	lsrmi	r3, r3, #1
 800ea00:	089b      	lsrpl	r3, r3, #2
 800ea02:	2001      	movmi	r0, #1
 800ea04:	600b      	strmi	r3, [r1, #0]
 800ea06:	bf5c      	itt	pl
 800ea08:	600b      	strpl	r3, [r1, #0]
 800ea0a:	2002      	movpl	r0, #2
 800ea0c:	4770      	bx	lr
 800ea0e:	b298      	uxth	r0, r3
 800ea10:	b9a8      	cbnz	r0, 800ea3e <__lo0bits+0x52>
 800ea12:	0c1b      	lsrs	r3, r3, #16
 800ea14:	2010      	movs	r0, #16
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	b90a      	cbnz	r2, 800ea1e <__lo0bits+0x32>
 800ea1a:	3008      	adds	r0, #8
 800ea1c:	0a1b      	lsrs	r3, r3, #8
 800ea1e:	071a      	lsls	r2, r3, #28
 800ea20:	bf04      	itt	eq
 800ea22:	091b      	lsreq	r3, r3, #4
 800ea24:	3004      	addeq	r0, #4
 800ea26:	079a      	lsls	r2, r3, #30
 800ea28:	bf04      	itt	eq
 800ea2a:	089b      	lsreq	r3, r3, #2
 800ea2c:	3002      	addeq	r0, #2
 800ea2e:	07da      	lsls	r2, r3, #31
 800ea30:	d403      	bmi.n	800ea3a <__lo0bits+0x4e>
 800ea32:	085b      	lsrs	r3, r3, #1
 800ea34:	f100 0001 	add.w	r0, r0, #1
 800ea38:	d005      	beq.n	800ea46 <__lo0bits+0x5a>
 800ea3a:	600b      	str	r3, [r1, #0]
 800ea3c:	4770      	bx	lr
 800ea3e:	4610      	mov	r0, r2
 800ea40:	e7e9      	b.n	800ea16 <__lo0bits+0x2a>
 800ea42:	2000      	movs	r0, #0
 800ea44:	4770      	bx	lr
 800ea46:	2020      	movs	r0, #32
 800ea48:	4770      	bx	lr
	...

0800ea4c <__i2b>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	460c      	mov	r4, r1
 800ea50:	2101      	movs	r1, #1
 800ea52:	f7ff feb9 	bl	800e7c8 <_Balloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	b928      	cbnz	r0, 800ea66 <__i2b+0x1a>
 800ea5a:	4b05      	ldr	r3, [pc, #20]	; (800ea70 <__i2b+0x24>)
 800ea5c:	4805      	ldr	r0, [pc, #20]	; (800ea74 <__i2b+0x28>)
 800ea5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea62:	f001 fa1d 	bl	800fea0 <__assert_func>
 800ea66:	2301      	movs	r3, #1
 800ea68:	6144      	str	r4, [r0, #20]
 800ea6a:	6103      	str	r3, [r0, #16]
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	bf00      	nop
 800ea70:	08012948 	.word	0x08012948
 800ea74:	080129d4 	.word	0x080129d4

0800ea78 <__multiply>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	4691      	mov	r9, r2
 800ea7e:	690a      	ldr	r2, [r1, #16]
 800ea80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	bfb8      	it	lt
 800ea88:	460b      	movlt	r3, r1
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	bfbc      	itt	lt
 800ea8e:	464c      	movlt	r4, r9
 800ea90:	4699      	movlt	r9, r3
 800ea92:	6927      	ldr	r7, [r4, #16]
 800ea94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea98:	68a3      	ldr	r3, [r4, #8]
 800ea9a:	6861      	ldr	r1, [r4, #4]
 800ea9c:	eb07 060a 	add.w	r6, r7, sl
 800eaa0:	42b3      	cmp	r3, r6
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	bfb8      	it	lt
 800eaa6:	3101      	addlt	r1, #1
 800eaa8:	f7ff fe8e 	bl	800e7c8 <_Balloc>
 800eaac:	b930      	cbnz	r0, 800eabc <__multiply+0x44>
 800eaae:	4602      	mov	r2, r0
 800eab0:	4b44      	ldr	r3, [pc, #272]	; (800ebc4 <__multiply+0x14c>)
 800eab2:	4845      	ldr	r0, [pc, #276]	; (800ebc8 <__multiply+0x150>)
 800eab4:	f240 115d 	movw	r1, #349	; 0x15d
 800eab8:	f001 f9f2 	bl	800fea0 <__assert_func>
 800eabc:	f100 0514 	add.w	r5, r0, #20
 800eac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eac4:	462b      	mov	r3, r5
 800eac6:	2200      	movs	r2, #0
 800eac8:	4543      	cmp	r3, r8
 800eaca:	d321      	bcc.n	800eb10 <__multiply+0x98>
 800eacc:	f104 0314 	add.w	r3, r4, #20
 800ead0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ead4:	f109 0314 	add.w	r3, r9, #20
 800ead8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eadc:	9202      	str	r2, [sp, #8]
 800eade:	1b3a      	subs	r2, r7, r4
 800eae0:	3a15      	subs	r2, #21
 800eae2:	f022 0203 	bic.w	r2, r2, #3
 800eae6:	3204      	adds	r2, #4
 800eae8:	f104 0115 	add.w	r1, r4, #21
 800eaec:	428f      	cmp	r7, r1
 800eaee:	bf38      	it	cc
 800eaf0:	2204      	movcc	r2, #4
 800eaf2:	9201      	str	r2, [sp, #4]
 800eaf4:	9a02      	ldr	r2, [sp, #8]
 800eaf6:	9303      	str	r3, [sp, #12]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d80c      	bhi.n	800eb16 <__multiply+0x9e>
 800eafc:	2e00      	cmp	r6, #0
 800eafe:	dd03      	ble.n	800eb08 <__multiply+0x90>
 800eb00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d05a      	beq.n	800ebbe <__multiply+0x146>
 800eb08:	6106      	str	r6, [r0, #16]
 800eb0a:	b005      	add	sp, #20
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	f843 2b04 	str.w	r2, [r3], #4
 800eb14:	e7d8      	b.n	800eac8 <__multiply+0x50>
 800eb16:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb1a:	f1ba 0f00 	cmp.w	sl, #0
 800eb1e:	d024      	beq.n	800eb6a <__multiply+0xf2>
 800eb20:	f104 0e14 	add.w	lr, r4, #20
 800eb24:	46a9      	mov	r9, r5
 800eb26:	f04f 0c00 	mov.w	ip, #0
 800eb2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eb2e:	f8d9 1000 	ldr.w	r1, [r9]
 800eb32:	fa1f fb82 	uxth.w	fp, r2
 800eb36:	b289      	uxth	r1, r1
 800eb38:	fb0a 110b 	mla	r1, sl, fp, r1
 800eb3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eb40:	f8d9 2000 	ldr.w	r2, [r9]
 800eb44:	4461      	add	r1, ip
 800eb46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800eb4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb52:	b289      	uxth	r1, r1
 800eb54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb58:	4577      	cmp	r7, lr
 800eb5a:	f849 1b04 	str.w	r1, [r9], #4
 800eb5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb62:	d8e2      	bhi.n	800eb2a <__multiply+0xb2>
 800eb64:	9a01      	ldr	r2, [sp, #4]
 800eb66:	f845 c002 	str.w	ip, [r5, r2]
 800eb6a:	9a03      	ldr	r2, [sp, #12]
 800eb6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb70:	3304      	adds	r3, #4
 800eb72:	f1b9 0f00 	cmp.w	r9, #0
 800eb76:	d020      	beq.n	800ebba <__multiply+0x142>
 800eb78:	6829      	ldr	r1, [r5, #0]
 800eb7a:	f104 0c14 	add.w	ip, r4, #20
 800eb7e:	46ae      	mov	lr, r5
 800eb80:	f04f 0a00 	mov.w	sl, #0
 800eb84:	f8bc b000 	ldrh.w	fp, [ip]
 800eb88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb8c:	fb09 220b 	mla	r2, r9, fp, r2
 800eb90:	4492      	add	sl, r2
 800eb92:	b289      	uxth	r1, r1
 800eb94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb98:	f84e 1b04 	str.w	r1, [lr], #4
 800eb9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eba0:	f8be 1000 	ldrh.w	r1, [lr]
 800eba4:	0c12      	lsrs	r2, r2, #16
 800eba6:	fb09 1102 	mla	r1, r9, r2, r1
 800ebaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ebae:	4567      	cmp	r7, ip
 800ebb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ebb4:	d8e6      	bhi.n	800eb84 <__multiply+0x10c>
 800ebb6:	9a01      	ldr	r2, [sp, #4]
 800ebb8:	50a9      	str	r1, [r5, r2]
 800ebba:	3504      	adds	r5, #4
 800ebbc:	e79a      	b.n	800eaf4 <__multiply+0x7c>
 800ebbe:	3e01      	subs	r6, #1
 800ebc0:	e79c      	b.n	800eafc <__multiply+0x84>
 800ebc2:	bf00      	nop
 800ebc4:	08012948 	.word	0x08012948
 800ebc8:	080129d4 	.word	0x080129d4

0800ebcc <__pow5mult>:
 800ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd0:	4615      	mov	r5, r2
 800ebd2:	f012 0203 	ands.w	r2, r2, #3
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	460f      	mov	r7, r1
 800ebda:	d007      	beq.n	800ebec <__pow5mult+0x20>
 800ebdc:	4c25      	ldr	r4, [pc, #148]	; (800ec74 <__pow5mult+0xa8>)
 800ebde:	3a01      	subs	r2, #1
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebe6:	f7ff fe51 	bl	800e88c <__multadd>
 800ebea:	4607      	mov	r7, r0
 800ebec:	10ad      	asrs	r5, r5, #2
 800ebee:	d03d      	beq.n	800ec6c <__pow5mult+0xa0>
 800ebf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebf2:	b97c      	cbnz	r4, 800ec14 <__pow5mult+0x48>
 800ebf4:	2010      	movs	r0, #16
 800ebf6:	f7ff fdbf 	bl	800e778 <malloc>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	6270      	str	r0, [r6, #36]	; 0x24
 800ebfe:	b928      	cbnz	r0, 800ec0c <__pow5mult+0x40>
 800ec00:	4b1d      	ldr	r3, [pc, #116]	; (800ec78 <__pow5mult+0xac>)
 800ec02:	481e      	ldr	r0, [pc, #120]	; (800ec7c <__pow5mult+0xb0>)
 800ec04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec08:	f001 f94a 	bl	800fea0 <__assert_func>
 800ec0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec10:	6004      	str	r4, [r0, #0]
 800ec12:	60c4      	str	r4, [r0, #12]
 800ec14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec1c:	b94c      	cbnz	r4, 800ec32 <__pow5mult+0x66>
 800ec1e:	f240 2171 	movw	r1, #625	; 0x271
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7ff ff12 	bl	800ea4c <__i2b>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec2e:	4604      	mov	r4, r0
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	f04f 0900 	mov.w	r9, #0
 800ec36:	07eb      	lsls	r3, r5, #31
 800ec38:	d50a      	bpl.n	800ec50 <__pow5mult+0x84>
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4630      	mov	r0, r6
 800ec40:	f7ff ff1a 	bl	800ea78 <__multiply>
 800ec44:	4639      	mov	r1, r7
 800ec46:	4680      	mov	r8, r0
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f7ff fdfd 	bl	800e848 <_Bfree>
 800ec4e:	4647      	mov	r7, r8
 800ec50:	106d      	asrs	r5, r5, #1
 800ec52:	d00b      	beq.n	800ec6c <__pow5mult+0xa0>
 800ec54:	6820      	ldr	r0, [r4, #0]
 800ec56:	b938      	cbnz	r0, 800ec68 <__pow5mult+0x9c>
 800ec58:	4622      	mov	r2, r4
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f7ff ff0b 	bl	800ea78 <__multiply>
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	f8c0 9000 	str.w	r9, [r0]
 800ec68:	4604      	mov	r4, r0
 800ec6a:	e7e4      	b.n	800ec36 <__pow5mult+0x6a>
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec72:	bf00      	nop
 800ec74:	08012b20 	.word	0x08012b20
 800ec78:	080128d6 	.word	0x080128d6
 800ec7c:	080129d4 	.word	0x080129d4

0800ec80 <__lshift>:
 800ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec84:	460c      	mov	r4, r1
 800ec86:	6849      	ldr	r1, [r1, #4]
 800ec88:	6923      	ldr	r3, [r4, #16]
 800ec8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec8e:	68a3      	ldr	r3, [r4, #8]
 800ec90:	4607      	mov	r7, r0
 800ec92:	4691      	mov	r9, r2
 800ec94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec98:	f108 0601 	add.w	r6, r8, #1
 800ec9c:	42b3      	cmp	r3, r6
 800ec9e:	db0b      	blt.n	800ecb8 <__lshift+0x38>
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff fd91 	bl	800e7c8 <_Balloc>
 800eca6:	4605      	mov	r5, r0
 800eca8:	b948      	cbnz	r0, 800ecbe <__lshift+0x3e>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	4b2a      	ldr	r3, [pc, #168]	; (800ed58 <__lshift+0xd8>)
 800ecae:	482b      	ldr	r0, [pc, #172]	; (800ed5c <__lshift+0xdc>)
 800ecb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ecb4:	f001 f8f4 	bl	800fea0 <__assert_func>
 800ecb8:	3101      	adds	r1, #1
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	e7ee      	b.n	800ec9c <__lshift+0x1c>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f100 0114 	add.w	r1, r0, #20
 800ecc4:	f100 0210 	add.w	r2, r0, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	4553      	cmp	r3, sl
 800eccc:	db37      	blt.n	800ed3e <__lshift+0xbe>
 800ecce:	6920      	ldr	r0, [r4, #16]
 800ecd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecd4:	f104 0314 	add.w	r3, r4, #20
 800ecd8:	f019 091f 	ands.w	r9, r9, #31
 800ecdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ece0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ece4:	d02f      	beq.n	800ed46 <__lshift+0xc6>
 800ece6:	f1c9 0e20 	rsb	lr, r9, #32
 800ecea:	468a      	mov	sl, r1
 800ecec:	f04f 0c00 	mov.w	ip, #0
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	fa02 f209 	lsl.w	r2, r2, r9
 800ecf6:	ea42 020c 	orr.w	r2, r2, ip
 800ecfa:	f84a 2b04 	str.w	r2, [sl], #4
 800ecfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed02:	4298      	cmp	r0, r3
 800ed04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ed08:	d8f2      	bhi.n	800ecf0 <__lshift+0x70>
 800ed0a:	1b03      	subs	r3, r0, r4
 800ed0c:	3b15      	subs	r3, #21
 800ed0e:	f023 0303 	bic.w	r3, r3, #3
 800ed12:	3304      	adds	r3, #4
 800ed14:	f104 0215 	add.w	r2, r4, #21
 800ed18:	4290      	cmp	r0, r2
 800ed1a:	bf38      	it	cc
 800ed1c:	2304      	movcc	r3, #4
 800ed1e:	f841 c003 	str.w	ip, [r1, r3]
 800ed22:	f1bc 0f00 	cmp.w	ip, #0
 800ed26:	d001      	beq.n	800ed2c <__lshift+0xac>
 800ed28:	f108 0602 	add.w	r6, r8, #2
 800ed2c:	3e01      	subs	r6, #1
 800ed2e:	4638      	mov	r0, r7
 800ed30:	612e      	str	r6, [r5, #16]
 800ed32:	4621      	mov	r1, r4
 800ed34:	f7ff fd88 	bl	800e848 <_Bfree>
 800ed38:	4628      	mov	r0, r5
 800ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed42:	3301      	adds	r3, #1
 800ed44:	e7c1      	b.n	800ecca <__lshift+0x4a>
 800ed46:	3904      	subs	r1, #4
 800ed48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed50:	4298      	cmp	r0, r3
 800ed52:	d8f9      	bhi.n	800ed48 <__lshift+0xc8>
 800ed54:	e7ea      	b.n	800ed2c <__lshift+0xac>
 800ed56:	bf00      	nop
 800ed58:	08012948 	.word	0x08012948
 800ed5c:	080129d4 	.word	0x080129d4

0800ed60 <__mcmp>:
 800ed60:	b530      	push	{r4, r5, lr}
 800ed62:	6902      	ldr	r2, [r0, #16]
 800ed64:	690c      	ldr	r4, [r1, #16]
 800ed66:	1b12      	subs	r2, r2, r4
 800ed68:	d10e      	bne.n	800ed88 <__mcmp+0x28>
 800ed6a:	f100 0314 	add.w	r3, r0, #20
 800ed6e:	3114      	adds	r1, #20
 800ed70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed80:	42a5      	cmp	r5, r4
 800ed82:	d003      	beq.n	800ed8c <__mcmp+0x2c>
 800ed84:	d305      	bcc.n	800ed92 <__mcmp+0x32>
 800ed86:	2201      	movs	r2, #1
 800ed88:	4610      	mov	r0, r2
 800ed8a:	bd30      	pop	{r4, r5, pc}
 800ed8c:	4283      	cmp	r3, r0
 800ed8e:	d3f3      	bcc.n	800ed78 <__mcmp+0x18>
 800ed90:	e7fa      	b.n	800ed88 <__mcmp+0x28>
 800ed92:	f04f 32ff 	mov.w	r2, #4294967295
 800ed96:	e7f7      	b.n	800ed88 <__mcmp+0x28>

0800ed98 <__mdiff>:
 800ed98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	4606      	mov	r6, r0
 800eda0:	4611      	mov	r1, r2
 800eda2:	4620      	mov	r0, r4
 800eda4:	4690      	mov	r8, r2
 800eda6:	f7ff ffdb 	bl	800ed60 <__mcmp>
 800edaa:	1e05      	subs	r5, r0, #0
 800edac:	d110      	bne.n	800edd0 <__mdiff+0x38>
 800edae:	4629      	mov	r1, r5
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7ff fd09 	bl	800e7c8 <_Balloc>
 800edb6:	b930      	cbnz	r0, 800edc6 <__mdiff+0x2e>
 800edb8:	4b3a      	ldr	r3, [pc, #232]	; (800eea4 <__mdiff+0x10c>)
 800edba:	4602      	mov	r2, r0
 800edbc:	f240 2132 	movw	r1, #562	; 0x232
 800edc0:	4839      	ldr	r0, [pc, #228]	; (800eea8 <__mdiff+0x110>)
 800edc2:	f001 f86d 	bl	800fea0 <__assert_func>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800edcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd0:	bfa4      	itt	ge
 800edd2:	4643      	movge	r3, r8
 800edd4:	46a0      	movge	r8, r4
 800edd6:	4630      	mov	r0, r6
 800edd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eddc:	bfa6      	itte	ge
 800edde:	461c      	movge	r4, r3
 800ede0:	2500      	movge	r5, #0
 800ede2:	2501      	movlt	r5, #1
 800ede4:	f7ff fcf0 	bl	800e7c8 <_Balloc>
 800ede8:	b920      	cbnz	r0, 800edf4 <__mdiff+0x5c>
 800edea:	4b2e      	ldr	r3, [pc, #184]	; (800eea4 <__mdiff+0x10c>)
 800edec:	4602      	mov	r2, r0
 800edee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800edf2:	e7e5      	b.n	800edc0 <__mdiff+0x28>
 800edf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800edf8:	6926      	ldr	r6, [r4, #16]
 800edfa:	60c5      	str	r5, [r0, #12]
 800edfc:	f104 0914 	add.w	r9, r4, #20
 800ee00:	f108 0514 	add.w	r5, r8, #20
 800ee04:	f100 0e14 	add.w	lr, r0, #20
 800ee08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee10:	f108 0210 	add.w	r2, r8, #16
 800ee14:	46f2      	mov	sl, lr
 800ee16:	2100      	movs	r1, #0
 800ee18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee20:	fa1f f883 	uxth.w	r8, r3
 800ee24:	fa11 f18b 	uxtah	r1, r1, fp
 800ee28:	0c1b      	lsrs	r3, r3, #16
 800ee2a:	eba1 0808 	sub.w	r8, r1, r8
 800ee2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee36:	fa1f f888 	uxth.w	r8, r8
 800ee3a:	1419      	asrs	r1, r3, #16
 800ee3c:	454e      	cmp	r6, r9
 800ee3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ee42:	f84a 3b04 	str.w	r3, [sl], #4
 800ee46:	d8e7      	bhi.n	800ee18 <__mdiff+0x80>
 800ee48:	1b33      	subs	r3, r6, r4
 800ee4a:	3b15      	subs	r3, #21
 800ee4c:	f023 0303 	bic.w	r3, r3, #3
 800ee50:	3304      	adds	r3, #4
 800ee52:	3415      	adds	r4, #21
 800ee54:	42a6      	cmp	r6, r4
 800ee56:	bf38      	it	cc
 800ee58:	2304      	movcc	r3, #4
 800ee5a:	441d      	add	r5, r3
 800ee5c:	4473      	add	r3, lr
 800ee5e:	469e      	mov	lr, r3
 800ee60:	462e      	mov	r6, r5
 800ee62:	4566      	cmp	r6, ip
 800ee64:	d30e      	bcc.n	800ee84 <__mdiff+0xec>
 800ee66:	f10c 0203 	add.w	r2, ip, #3
 800ee6a:	1b52      	subs	r2, r2, r5
 800ee6c:	f022 0203 	bic.w	r2, r2, #3
 800ee70:	3d03      	subs	r5, #3
 800ee72:	45ac      	cmp	ip, r5
 800ee74:	bf38      	it	cc
 800ee76:	2200      	movcc	r2, #0
 800ee78:	441a      	add	r2, r3
 800ee7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee7e:	b17b      	cbz	r3, 800eea0 <__mdiff+0x108>
 800ee80:	6107      	str	r7, [r0, #16]
 800ee82:	e7a3      	b.n	800edcc <__mdiff+0x34>
 800ee84:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee88:	fa11 f288 	uxtah	r2, r1, r8
 800ee8c:	1414      	asrs	r4, r2, #16
 800ee8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee92:	b292      	uxth	r2, r2
 800ee94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee98:	f84e 2b04 	str.w	r2, [lr], #4
 800ee9c:	1421      	asrs	r1, r4, #16
 800ee9e:	e7e0      	b.n	800ee62 <__mdiff+0xca>
 800eea0:	3f01      	subs	r7, #1
 800eea2:	e7ea      	b.n	800ee7a <__mdiff+0xe2>
 800eea4:	08012948 	.word	0x08012948
 800eea8:	080129d4 	.word	0x080129d4

0800eeac <__ulp>:
 800eeac:	b082      	sub	sp, #8
 800eeae:	ed8d 0b00 	vstr	d0, [sp]
 800eeb2:	9b01      	ldr	r3, [sp, #4]
 800eeb4:	4912      	ldr	r1, [pc, #72]	; (800ef00 <__ulp+0x54>)
 800eeb6:	4019      	ands	r1, r3
 800eeb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eebc:	2900      	cmp	r1, #0
 800eebe:	dd05      	ble.n	800eecc <__ulp+0x20>
 800eec0:	2200      	movs	r2, #0
 800eec2:	460b      	mov	r3, r1
 800eec4:	ec43 2b10 	vmov	d0, r2, r3
 800eec8:	b002      	add	sp, #8
 800eeca:	4770      	bx	lr
 800eecc:	4249      	negs	r1, r1
 800eece:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eed2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eed6:	f04f 0200 	mov.w	r2, #0
 800eeda:	f04f 0300 	mov.w	r3, #0
 800eede:	da04      	bge.n	800eeea <__ulp+0x3e>
 800eee0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eee4:	fa41 f300 	asr.w	r3, r1, r0
 800eee8:	e7ec      	b.n	800eec4 <__ulp+0x18>
 800eeea:	f1a0 0114 	sub.w	r1, r0, #20
 800eeee:	291e      	cmp	r1, #30
 800eef0:	bfda      	itte	le
 800eef2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eef6:	fa20 f101 	lsrle.w	r1, r0, r1
 800eefa:	2101      	movgt	r1, #1
 800eefc:	460a      	mov	r2, r1
 800eefe:	e7e1      	b.n	800eec4 <__ulp+0x18>
 800ef00:	7ff00000 	.word	0x7ff00000

0800ef04 <__b2d>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	6905      	ldr	r5, [r0, #16]
 800ef08:	f100 0714 	add.w	r7, r0, #20
 800ef0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ef10:	1f2e      	subs	r6, r5, #4
 800ef12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7ff fd48 	bl	800e9ac <__hi0bits>
 800ef1c:	f1c0 0320 	rsb	r3, r0, #32
 800ef20:	280a      	cmp	r0, #10
 800ef22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800efa0 <__b2d+0x9c>
 800ef26:	600b      	str	r3, [r1, #0]
 800ef28:	dc14      	bgt.n	800ef54 <__b2d+0x50>
 800ef2a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ef2e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ef32:	42b7      	cmp	r7, r6
 800ef34:	ea41 030c 	orr.w	r3, r1, ip
 800ef38:	bf34      	ite	cc
 800ef3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef3e:	2100      	movcs	r1, #0
 800ef40:	3015      	adds	r0, #21
 800ef42:	fa04 f000 	lsl.w	r0, r4, r0
 800ef46:	fa21 f10e 	lsr.w	r1, r1, lr
 800ef4a:	ea40 0201 	orr.w	r2, r0, r1
 800ef4e:	ec43 2b10 	vmov	d0, r2, r3
 800ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef54:	42b7      	cmp	r7, r6
 800ef56:	bf3a      	itte	cc
 800ef58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef5c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ef60:	2100      	movcs	r1, #0
 800ef62:	380b      	subs	r0, #11
 800ef64:	d017      	beq.n	800ef96 <__b2d+0x92>
 800ef66:	f1c0 0c20 	rsb	ip, r0, #32
 800ef6a:	fa04 f500 	lsl.w	r5, r4, r0
 800ef6e:	42be      	cmp	r6, r7
 800ef70:	fa21 f40c 	lsr.w	r4, r1, ip
 800ef74:	ea45 0504 	orr.w	r5, r5, r4
 800ef78:	bf8c      	ite	hi
 800ef7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ef7e:	2400      	movls	r4, #0
 800ef80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ef84:	fa01 f000 	lsl.w	r0, r1, r0
 800ef88:	fa24 f40c 	lsr.w	r4, r4, ip
 800ef8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ef90:	ea40 0204 	orr.w	r2, r0, r4
 800ef94:	e7db      	b.n	800ef4e <__b2d+0x4a>
 800ef96:	ea44 030c 	orr.w	r3, r4, ip
 800ef9a:	460a      	mov	r2, r1
 800ef9c:	e7d7      	b.n	800ef4e <__b2d+0x4a>
 800ef9e:	bf00      	nop
 800efa0:	3ff00000 	.word	0x3ff00000

0800efa4 <__d2b>:
 800efa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efa8:	4689      	mov	r9, r1
 800efaa:	2101      	movs	r1, #1
 800efac:	ec57 6b10 	vmov	r6, r7, d0
 800efb0:	4690      	mov	r8, r2
 800efb2:	f7ff fc09 	bl	800e7c8 <_Balloc>
 800efb6:	4604      	mov	r4, r0
 800efb8:	b930      	cbnz	r0, 800efc8 <__d2b+0x24>
 800efba:	4602      	mov	r2, r0
 800efbc:	4b25      	ldr	r3, [pc, #148]	; (800f054 <__d2b+0xb0>)
 800efbe:	4826      	ldr	r0, [pc, #152]	; (800f058 <__d2b+0xb4>)
 800efc0:	f240 310a 	movw	r1, #778	; 0x30a
 800efc4:	f000 ff6c 	bl	800fea0 <__assert_func>
 800efc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800efcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efd0:	bb35      	cbnz	r5, 800f020 <__d2b+0x7c>
 800efd2:	2e00      	cmp	r6, #0
 800efd4:	9301      	str	r3, [sp, #4]
 800efd6:	d028      	beq.n	800f02a <__d2b+0x86>
 800efd8:	4668      	mov	r0, sp
 800efda:	9600      	str	r6, [sp, #0]
 800efdc:	f7ff fd06 	bl	800e9ec <__lo0bits>
 800efe0:	9900      	ldr	r1, [sp, #0]
 800efe2:	b300      	cbz	r0, 800f026 <__d2b+0x82>
 800efe4:	9a01      	ldr	r2, [sp, #4]
 800efe6:	f1c0 0320 	rsb	r3, r0, #32
 800efea:	fa02 f303 	lsl.w	r3, r2, r3
 800efee:	430b      	orrs	r3, r1
 800eff0:	40c2      	lsrs	r2, r0
 800eff2:	6163      	str	r3, [r4, #20]
 800eff4:	9201      	str	r2, [sp, #4]
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	61a3      	str	r3, [r4, #24]
 800effa:	2b00      	cmp	r3, #0
 800effc:	bf14      	ite	ne
 800effe:	2202      	movne	r2, #2
 800f000:	2201      	moveq	r2, #1
 800f002:	6122      	str	r2, [r4, #16]
 800f004:	b1d5      	cbz	r5, 800f03c <__d2b+0x98>
 800f006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f00a:	4405      	add	r5, r0
 800f00c:	f8c9 5000 	str.w	r5, [r9]
 800f010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f014:	f8c8 0000 	str.w	r0, [r8]
 800f018:	4620      	mov	r0, r4
 800f01a:	b003      	add	sp, #12
 800f01c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f024:	e7d5      	b.n	800efd2 <__d2b+0x2e>
 800f026:	6161      	str	r1, [r4, #20]
 800f028:	e7e5      	b.n	800eff6 <__d2b+0x52>
 800f02a:	a801      	add	r0, sp, #4
 800f02c:	f7ff fcde 	bl	800e9ec <__lo0bits>
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	6163      	str	r3, [r4, #20]
 800f034:	2201      	movs	r2, #1
 800f036:	6122      	str	r2, [r4, #16]
 800f038:	3020      	adds	r0, #32
 800f03a:	e7e3      	b.n	800f004 <__d2b+0x60>
 800f03c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f044:	f8c9 0000 	str.w	r0, [r9]
 800f048:	6918      	ldr	r0, [r3, #16]
 800f04a:	f7ff fcaf 	bl	800e9ac <__hi0bits>
 800f04e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f052:	e7df      	b.n	800f014 <__d2b+0x70>
 800f054:	08012948 	.word	0x08012948
 800f058:	080129d4 	.word	0x080129d4

0800f05c <__ratio>:
 800f05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	4688      	mov	r8, r1
 800f062:	4669      	mov	r1, sp
 800f064:	4681      	mov	r9, r0
 800f066:	f7ff ff4d 	bl	800ef04 <__b2d>
 800f06a:	a901      	add	r1, sp, #4
 800f06c:	4640      	mov	r0, r8
 800f06e:	ec55 4b10 	vmov	r4, r5, d0
 800f072:	f7ff ff47 	bl	800ef04 <__b2d>
 800f076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f07a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f07e:	eba3 0c02 	sub.w	ip, r3, r2
 800f082:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f086:	1a9b      	subs	r3, r3, r2
 800f088:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f08c:	ec51 0b10 	vmov	r0, r1, d0
 800f090:	2b00      	cmp	r3, #0
 800f092:	bfd6      	itet	le
 800f094:	460a      	movle	r2, r1
 800f096:	462a      	movgt	r2, r5
 800f098:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f09c:	468b      	mov	fp, r1
 800f09e:	462f      	mov	r7, r5
 800f0a0:	bfd4      	ite	le
 800f0a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f0a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	ee10 2a10 	vmov	r2, s0
 800f0b0:	465b      	mov	r3, fp
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	f7f1 fbfa 	bl	80008ac <__aeabi_ddiv>
 800f0b8:	ec41 0b10 	vmov	d0, r0, r1
 800f0bc:	b003      	add	sp, #12
 800f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0c2 <__copybits>:
 800f0c2:	3901      	subs	r1, #1
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	1149      	asrs	r1, r1, #5
 800f0c8:	6914      	ldr	r4, [r2, #16]
 800f0ca:	3101      	adds	r1, #1
 800f0cc:	f102 0314 	add.w	r3, r2, #20
 800f0d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0d8:	1f05      	subs	r5, r0, #4
 800f0da:	42a3      	cmp	r3, r4
 800f0dc:	d30c      	bcc.n	800f0f8 <__copybits+0x36>
 800f0de:	1aa3      	subs	r3, r4, r2
 800f0e0:	3b11      	subs	r3, #17
 800f0e2:	f023 0303 	bic.w	r3, r3, #3
 800f0e6:	3211      	adds	r2, #17
 800f0e8:	42a2      	cmp	r2, r4
 800f0ea:	bf88      	it	hi
 800f0ec:	2300      	movhi	r3, #0
 800f0ee:	4418      	add	r0, r3
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	4288      	cmp	r0, r1
 800f0f4:	d305      	bcc.n	800f102 <__copybits+0x40>
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f100:	e7eb      	b.n	800f0da <__copybits+0x18>
 800f102:	f840 3b04 	str.w	r3, [r0], #4
 800f106:	e7f4      	b.n	800f0f2 <__copybits+0x30>

0800f108 <__any_on>:
 800f108:	f100 0214 	add.w	r2, r0, #20
 800f10c:	6900      	ldr	r0, [r0, #16]
 800f10e:	114b      	asrs	r3, r1, #5
 800f110:	4298      	cmp	r0, r3
 800f112:	b510      	push	{r4, lr}
 800f114:	db11      	blt.n	800f13a <__any_on+0x32>
 800f116:	dd0a      	ble.n	800f12e <__any_on+0x26>
 800f118:	f011 011f 	ands.w	r1, r1, #31
 800f11c:	d007      	beq.n	800f12e <__any_on+0x26>
 800f11e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f122:	fa24 f001 	lsr.w	r0, r4, r1
 800f126:	fa00 f101 	lsl.w	r1, r0, r1
 800f12a:	428c      	cmp	r4, r1
 800f12c:	d10b      	bne.n	800f146 <__any_on+0x3e>
 800f12e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f132:	4293      	cmp	r3, r2
 800f134:	d803      	bhi.n	800f13e <__any_on+0x36>
 800f136:	2000      	movs	r0, #0
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	4603      	mov	r3, r0
 800f13c:	e7f7      	b.n	800f12e <__any_on+0x26>
 800f13e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f142:	2900      	cmp	r1, #0
 800f144:	d0f5      	beq.n	800f132 <__any_on+0x2a>
 800f146:	2001      	movs	r0, #1
 800f148:	e7f6      	b.n	800f138 <__any_on+0x30>

0800f14a <_calloc_r>:
 800f14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f14c:	fba1 2402 	umull	r2, r4, r1, r2
 800f150:	b94c      	cbnz	r4, 800f166 <_calloc_r+0x1c>
 800f152:	4611      	mov	r1, r2
 800f154:	9201      	str	r2, [sp, #4]
 800f156:	f000 f87b 	bl	800f250 <_malloc_r>
 800f15a:	9a01      	ldr	r2, [sp, #4]
 800f15c:	4605      	mov	r5, r0
 800f15e:	b930      	cbnz	r0, 800f16e <_calloc_r+0x24>
 800f160:	4628      	mov	r0, r5
 800f162:	b003      	add	sp, #12
 800f164:	bd30      	pop	{r4, r5, pc}
 800f166:	220c      	movs	r2, #12
 800f168:	6002      	str	r2, [r0, #0]
 800f16a:	2500      	movs	r5, #0
 800f16c:	e7f8      	b.n	800f160 <_calloc_r+0x16>
 800f16e:	4621      	mov	r1, r4
 800f170:	f7fc fafa 	bl	800b768 <memset>
 800f174:	e7f4      	b.n	800f160 <_calloc_r+0x16>
	...

0800f178 <_free_r>:
 800f178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f17a:	2900      	cmp	r1, #0
 800f17c:	d044      	beq.n	800f208 <_free_r+0x90>
 800f17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f182:	9001      	str	r0, [sp, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	f1a1 0404 	sub.w	r4, r1, #4
 800f18a:	bfb8      	it	lt
 800f18c:	18e4      	addlt	r4, r4, r3
 800f18e:	f001 f88b 	bl	80102a8 <__malloc_lock>
 800f192:	4a1e      	ldr	r2, [pc, #120]	; (800f20c <_free_r+0x94>)
 800f194:	9801      	ldr	r0, [sp, #4]
 800f196:	6813      	ldr	r3, [r2, #0]
 800f198:	b933      	cbnz	r3, 800f1a8 <_free_r+0x30>
 800f19a:	6063      	str	r3, [r4, #4]
 800f19c:	6014      	str	r4, [r2, #0]
 800f19e:	b003      	add	sp, #12
 800f1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1a4:	f001 b886 	b.w	80102b4 <__malloc_unlock>
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	d908      	bls.n	800f1be <_free_r+0x46>
 800f1ac:	6825      	ldr	r5, [r4, #0]
 800f1ae:	1961      	adds	r1, r4, r5
 800f1b0:	428b      	cmp	r3, r1
 800f1b2:	bf01      	itttt	eq
 800f1b4:	6819      	ldreq	r1, [r3, #0]
 800f1b6:	685b      	ldreq	r3, [r3, #4]
 800f1b8:	1949      	addeq	r1, r1, r5
 800f1ba:	6021      	streq	r1, [r4, #0]
 800f1bc:	e7ed      	b.n	800f19a <_free_r+0x22>
 800f1be:	461a      	mov	r2, r3
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	b10b      	cbz	r3, 800f1c8 <_free_r+0x50>
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	d9fa      	bls.n	800f1be <_free_r+0x46>
 800f1c8:	6811      	ldr	r1, [r2, #0]
 800f1ca:	1855      	adds	r5, r2, r1
 800f1cc:	42a5      	cmp	r5, r4
 800f1ce:	d10b      	bne.n	800f1e8 <_free_r+0x70>
 800f1d0:	6824      	ldr	r4, [r4, #0]
 800f1d2:	4421      	add	r1, r4
 800f1d4:	1854      	adds	r4, r2, r1
 800f1d6:	42a3      	cmp	r3, r4
 800f1d8:	6011      	str	r1, [r2, #0]
 800f1da:	d1e0      	bne.n	800f19e <_free_r+0x26>
 800f1dc:	681c      	ldr	r4, [r3, #0]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	6053      	str	r3, [r2, #4]
 800f1e2:	4421      	add	r1, r4
 800f1e4:	6011      	str	r1, [r2, #0]
 800f1e6:	e7da      	b.n	800f19e <_free_r+0x26>
 800f1e8:	d902      	bls.n	800f1f0 <_free_r+0x78>
 800f1ea:	230c      	movs	r3, #12
 800f1ec:	6003      	str	r3, [r0, #0]
 800f1ee:	e7d6      	b.n	800f19e <_free_r+0x26>
 800f1f0:	6825      	ldr	r5, [r4, #0]
 800f1f2:	1961      	adds	r1, r4, r5
 800f1f4:	428b      	cmp	r3, r1
 800f1f6:	bf04      	itt	eq
 800f1f8:	6819      	ldreq	r1, [r3, #0]
 800f1fa:	685b      	ldreq	r3, [r3, #4]
 800f1fc:	6063      	str	r3, [r4, #4]
 800f1fe:	bf04      	itt	eq
 800f200:	1949      	addeq	r1, r1, r5
 800f202:	6021      	streq	r1, [r4, #0]
 800f204:	6054      	str	r4, [r2, #4]
 800f206:	e7ca      	b.n	800f19e <_free_r+0x26>
 800f208:	b003      	add	sp, #12
 800f20a:	bd30      	pop	{r4, r5, pc}
 800f20c:	20001224 	.word	0x20001224

0800f210 <sbrk_aligned>:
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	4e0e      	ldr	r6, [pc, #56]	; (800f24c <sbrk_aligned+0x3c>)
 800f214:	460c      	mov	r4, r1
 800f216:	6831      	ldr	r1, [r6, #0]
 800f218:	4605      	mov	r5, r0
 800f21a:	b911      	cbnz	r1, 800f222 <sbrk_aligned+0x12>
 800f21c:	f000 fd28 	bl	800fc70 <_sbrk_r>
 800f220:	6030      	str	r0, [r6, #0]
 800f222:	4621      	mov	r1, r4
 800f224:	4628      	mov	r0, r5
 800f226:	f000 fd23 	bl	800fc70 <_sbrk_r>
 800f22a:	1c43      	adds	r3, r0, #1
 800f22c:	d00a      	beq.n	800f244 <sbrk_aligned+0x34>
 800f22e:	1cc4      	adds	r4, r0, #3
 800f230:	f024 0403 	bic.w	r4, r4, #3
 800f234:	42a0      	cmp	r0, r4
 800f236:	d007      	beq.n	800f248 <sbrk_aligned+0x38>
 800f238:	1a21      	subs	r1, r4, r0
 800f23a:	4628      	mov	r0, r5
 800f23c:	f000 fd18 	bl	800fc70 <_sbrk_r>
 800f240:	3001      	adds	r0, #1
 800f242:	d101      	bne.n	800f248 <sbrk_aligned+0x38>
 800f244:	f04f 34ff 	mov.w	r4, #4294967295
 800f248:	4620      	mov	r0, r4
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
 800f24c:	20001228 	.word	0x20001228

0800f250 <_malloc_r>:
 800f250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f254:	1ccd      	adds	r5, r1, #3
 800f256:	f025 0503 	bic.w	r5, r5, #3
 800f25a:	3508      	adds	r5, #8
 800f25c:	2d0c      	cmp	r5, #12
 800f25e:	bf38      	it	cc
 800f260:	250c      	movcc	r5, #12
 800f262:	2d00      	cmp	r5, #0
 800f264:	4607      	mov	r7, r0
 800f266:	db01      	blt.n	800f26c <_malloc_r+0x1c>
 800f268:	42a9      	cmp	r1, r5
 800f26a:	d905      	bls.n	800f278 <_malloc_r+0x28>
 800f26c:	230c      	movs	r3, #12
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	2600      	movs	r6, #0
 800f272:	4630      	mov	r0, r6
 800f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f278:	4e2e      	ldr	r6, [pc, #184]	; (800f334 <_malloc_r+0xe4>)
 800f27a:	f001 f815 	bl	80102a8 <__malloc_lock>
 800f27e:	6833      	ldr	r3, [r6, #0]
 800f280:	461c      	mov	r4, r3
 800f282:	bb34      	cbnz	r4, 800f2d2 <_malloc_r+0x82>
 800f284:	4629      	mov	r1, r5
 800f286:	4638      	mov	r0, r7
 800f288:	f7ff ffc2 	bl	800f210 <sbrk_aligned>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	4604      	mov	r4, r0
 800f290:	d14d      	bne.n	800f32e <_malloc_r+0xde>
 800f292:	6834      	ldr	r4, [r6, #0]
 800f294:	4626      	mov	r6, r4
 800f296:	2e00      	cmp	r6, #0
 800f298:	d140      	bne.n	800f31c <_malloc_r+0xcc>
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	4631      	mov	r1, r6
 800f29e:	4638      	mov	r0, r7
 800f2a0:	eb04 0803 	add.w	r8, r4, r3
 800f2a4:	f000 fce4 	bl	800fc70 <_sbrk_r>
 800f2a8:	4580      	cmp	r8, r0
 800f2aa:	d13a      	bne.n	800f322 <_malloc_r+0xd2>
 800f2ac:	6821      	ldr	r1, [r4, #0]
 800f2ae:	3503      	adds	r5, #3
 800f2b0:	1a6d      	subs	r5, r5, r1
 800f2b2:	f025 0503 	bic.w	r5, r5, #3
 800f2b6:	3508      	adds	r5, #8
 800f2b8:	2d0c      	cmp	r5, #12
 800f2ba:	bf38      	it	cc
 800f2bc:	250c      	movcc	r5, #12
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f7ff ffa5 	bl	800f210 <sbrk_aligned>
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d02b      	beq.n	800f322 <_malloc_r+0xd2>
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	442b      	add	r3, r5
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	e00e      	b.n	800f2f0 <_malloc_r+0xa0>
 800f2d2:	6822      	ldr	r2, [r4, #0]
 800f2d4:	1b52      	subs	r2, r2, r5
 800f2d6:	d41e      	bmi.n	800f316 <_malloc_r+0xc6>
 800f2d8:	2a0b      	cmp	r2, #11
 800f2da:	d916      	bls.n	800f30a <_malloc_r+0xba>
 800f2dc:	1961      	adds	r1, r4, r5
 800f2de:	42a3      	cmp	r3, r4
 800f2e0:	6025      	str	r5, [r4, #0]
 800f2e2:	bf18      	it	ne
 800f2e4:	6059      	strne	r1, [r3, #4]
 800f2e6:	6863      	ldr	r3, [r4, #4]
 800f2e8:	bf08      	it	eq
 800f2ea:	6031      	streq	r1, [r6, #0]
 800f2ec:	5162      	str	r2, [r4, r5]
 800f2ee:	604b      	str	r3, [r1, #4]
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f104 060b 	add.w	r6, r4, #11
 800f2f6:	f000 ffdd 	bl	80102b4 <__malloc_unlock>
 800f2fa:	f026 0607 	bic.w	r6, r6, #7
 800f2fe:	1d23      	adds	r3, r4, #4
 800f300:	1af2      	subs	r2, r6, r3
 800f302:	d0b6      	beq.n	800f272 <_malloc_r+0x22>
 800f304:	1b9b      	subs	r3, r3, r6
 800f306:	50a3      	str	r3, [r4, r2]
 800f308:	e7b3      	b.n	800f272 <_malloc_r+0x22>
 800f30a:	6862      	ldr	r2, [r4, #4]
 800f30c:	42a3      	cmp	r3, r4
 800f30e:	bf0c      	ite	eq
 800f310:	6032      	streq	r2, [r6, #0]
 800f312:	605a      	strne	r2, [r3, #4]
 800f314:	e7ec      	b.n	800f2f0 <_malloc_r+0xa0>
 800f316:	4623      	mov	r3, r4
 800f318:	6864      	ldr	r4, [r4, #4]
 800f31a:	e7b2      	b.n	800f282 <_malloc_r+0x32>
 800f31c:	4634      	mov	r4, r6
 800f31e:	6876      	ldr	r6, [r6, #4]
 800f320:	e7b9      	b.n	800f296 <_malloc_r+0x46>
 800f322:	230c      	movs	r3, #12
 800f324:	603b      	str	r3, [r7, #0]
 800f326:	4638      	mov	r0, r7
 800f328:	f000 ffc4 	bl	80102b4 <__malloc_unlock>
 800f32c:	e7a1      	b.n	800f272 <_malloc_r+0x22>
 800f32e:	6025      	str	r5, [r4, #0]
 800f330:	e7de      	b.n	800f2f0 <_malloc_r+0xa0>
 800f332:	bf00      	nop
 800f334:	20001224 	.word	0x20001224

0800f338 <__ssputs_r>:
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	688e      	ldr	r6, [r1, #8]
 800f33e:	429e      	cmp	r6, r3
 800f340:	4682      	mov	sl, r0
 800f342:	460c      	mov	r4, r1
 800f344:	4690      	mov	r8, r2
 800f346:	461f      	mov	r7, r3
 800f348:	d838      	bhi.n	800f3bc <__ssputs_r+0x84>
 800f34a:	898a      	ldrh	r2, [r1, #12]
 800f34c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f350:	d032      	beq.n	800f3b8 <__ssputs_r+0x80>
 800f352:	6825      	ldr	r5, [r4, #0]
 800f354:	6909      	ldr	r1, [r1, #16]
 800f356:	eba5 0901 	sub.w	r9, r5, r1
 800f35a:	6965      	ldr	r5, [r4, #20]
 800f35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f364:	3301      	adds	r3, #1
 800f366:	444b      	add	r3, r9
 800f368:	106d      	asrs	r5, r5, #1
 800f36a:	429d      	cmp	r5, r3
 800f36c:	bf38      	it	cc
 800f36e:	461d      	movcc	r5, r3
 800f370:	0553      	lsls	r3, r2, #21
 800f372:	d531      	bpl.n	800f3d8 <__ssputs_r+0xa0>
 800f374:	4629      	mov	r1, r5
 800f376:	f7ff ff6b 	bl	800f250 <_malloc_r>
 800f37a:	4606      	mov	r6, r0
 800f37c:	b950      	cbnz	r0, 800f394 <__ssputs_r+0x5c>
 800f37e:	230c      	movs	r3, #12
 800f380:	f8ca 3000 	str.w	r3, [sl]
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f38a:	81a3      	strh	r3, [r4, #12]
 800f38c:	f04f 30ff 	mov.w	r0, #4294967295
 800f390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f394:	6921      	ldr	r1, [r4, #16]
 800f396:	464a      	mov	r2, r9
 800f398:	f7ff fa08 	bl	800e7ac <memcpy>
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	6126      	str	r6, [r4, #16]
 800f3aa:	6165      	str	r5, [r4, #20]
 800f3ac:	444e      	add	r6, r9
 800f3ae:	eba5 0509 	sub.w	r5, r5, r9
 800f3b2:	6026      	str	r6, [r4, #0]
 800f3b4:	60a5      	str	r5, [r4, #8]
 800f3b6:	463e      	mov	r6, r7
 800f3b8:	42be      	cmp	r6, r7
 800f3ba:	d900      	bls.n	800f3be <__ssputs_r+0x86>
 800f3bc:	463e      	mov	r6, r7
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	4632      	mov	r2, r6
 800f3c2:	4641      	mov	r1, r8
 800f3c4:	f000 ff56 	bl	8010274 <memmove>
 800f3c8:	68a3      	ldr	r3, [r4, #8]
 800f3ca:	1b9b      	subs	r3, r3, r6
 800f3cc:	60a3      	str	r3, [r4, #8]
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	4433      	add	r3, r6
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e7db      	b.n	800f390 <__ssputs_r+0x58>
 800f3d8:	462a      	mov	r2, r5
 800f3da:	f000 ff71 	bl	80102c0 <_realloc_r>
 800f3de:	4606      	mov	r6, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1e1      	bne.n	800f3a8 <__ssputs_r+0x70>
 800f3e4:	6921      	ldr	r1, [r4, #16]
 800f3e6:	4650      	mov	r0, sl
 800f3e8:	f7ff fec6 	bl	800f178 <_free_r>
 800f3ec:	e7c7      	b.n	800f37e <__ssputs_r+0x46>
	...

0800f3f0 <_svfiprintf_r>:
 800f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	4698      	mov	r8, r3
 800f3f6:	898b      	ldrh	r3, [r1, #12]
 800f3f8:	061b      	lsls	r3, r3, #24
 800f3fa:	b09d      	sub	sp, #116	; 0x74
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	460d      	mov	r5, r1
 800f400:	4614      	mov	r4, r2
 800f402:	d50e      	bpl.n	800f422 <_svfiprintf_r+0x32>
 800f404:	690b      	ldr	r3, [r1, #16]
 800f406:	b963      	cbnz	r3, 800f422 <_svfiprintf_r+0x32>
 800f408:	2140      	movs	r1, #64	; 0x40
 800f40a:	f7ff ff21 	bl	800f250 <_malloc_r>
 800f40e:	6028      	str	r0, [r5, #0]
 800f410:	6128      	str	r0, [r5, #16]
 800f412:	b920      	cbnz	r0, 800f41e <_svfiprintf_r+0x2e>
 800f414:	230c      	movs	r3, #12
 800f416:	603b      	str	r3, [r7, #0]
 800f418:	f04f 30ff 	mov.w	r0, #4294967295
 800f41c:	e0d1      	b.n	800f5c2 <_svfiprintf_r+0x1d2>
 800f41e:	2340      	movs	r3, #64	; 0x40
 800f420:	616b      	str	r3, [r5, #20]
 800f422:	2300      	movs	r3, #0
 800f424:	9309      	str	r3, [sp, #36]	; 0x24
 800f426:	2320      	movs	r3, #32
 800f428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f430:	2330      	movs	r3, #48	; 0x30
 800f432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5dc <_svfiprintf_r+0x1ec>
 800f436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f43a:	f04f 0901 	mov.w	r9, #1
 800f43e:	4623      	mov	r3, r4
 800f440:	469a      	mov	sl, r3
 800f442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f446:	b10a      	cbz	r2, 800f44c <_svfiprintf_r+0x5c>
 800f448:	2a25      	cmp	r2, #37	; 0x25
 800f44a:	d1f9      	bne.n	800f440 <_svfiprintf_r+0x50>
 800f44c:	ebba 0b04 	subs.w	fp, sl, r4
 800f450:	d00b      	beq.n	800f46a <_svfiprintf_r+0x7a>
 800f452:	465b      	mov	r3, fp
 800f454:	4622      	mov	r2, r4
 800f456:	4629      	mov	r1, r5
 800f458:	4638      	mov	r0, r7
 800f45a:	f7ff ff6d 	bl	800f338 <__ssputs_r>
 800f45e:	3001      	adds	r0, #1
 800f460:	f000 80aa 	beq.w	800f5b8 <_svfiprintf_r+0x1c8>
 800f464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f466:	445a      	add	r2, fp
 800f468:	9209      	str	r2, [sp, #36]	; 0x24
 800f46a:	f89a 3000 	ldrb.w	r3, [sl]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f000 80a2 	beq.w	800f5b8 <_svfiprintf_r+0x1c8>
 800f474:	2300      	movs	r3, #0
 800f476:	f04f 32ff 	mov.w	r2, #4294967295
 800f47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f47e:	f10a 0a01 	add.w	sl, sl, #1
 800f482:	9304      	str	r3, [sp, #16]
 800f484:	9307      	str	r3, [sp, #28]
 800f486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f48a:	931a      	str	r3, [sp, #104]	; 0x68
 800f48c:	4654      	mov	r4, sl
 800f48e:	2205      	movs	r2, #5
 800f490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f494:	4851      	ldr	r0, [pc, #324]	; (800f5dc <_svfiprintf_r+0x1ec>)
 800f496:	f7f0 fed3 	bl	8000240 <memchr>
 800f49a:	9a04      	ldr	r2, [sp, #16]
 800f49c:	b9d8      	cbnz	r0, 800f4d6 <_svfiprintf_r+0xe6>
 800f49e:	06d0      	lsls	r0, r2, #27
 800f4a0:	bf44      	itt	mi
 800f4a2:	2320      	movmi	r3, #32
 800f4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4a8:	0711      	lsls	r1, r2, #28
 800f4aa:	bf44      	itt	mi
 800f4ac:	232b      	movmi	r3, #43	; 0x2b
 800f4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4b8:	d015      	beq.n	800f4e6 <_svfiprintf_r+0xf6>
 800f4ba:	9a07      	ldr	r2, [sp, #28]
 800f4bc:	4654      	mov	r4, sl
 800f4be:	2000      	movs	r0, #0
 800f4c0:	f04f 0c0a 	mov.w	ip, #10
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4ca:	3b30      	subs	r3, #48	; 0x30
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d94e      	bls.n	800f56e <_svfiprintf_r+0x17e>
 800f4d0:	b1b0      	cbz	r0, 800f500 <_svfiprintf_r+0x110>
 800f4d2:	9207      	str	r2, [sp, #28]
 800f4d4:	e014      	b.n	800f500 <_svfiprintf_r+0x110>
 800f4d6:	eba0 0308 	sub.w	r3, r0, r8
 800f4da:	fa09 f303 	lsl.w	r3, r9, r3
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	9304      	str	r3, [sp, #16]
 800f4e2:	46a2      	mov	sl, r4
 800f4e4:	e7d2      	b.n	800f48c <_svfiprintf_r+0x9c>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	1d19      	adds	r1, r3, #4
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	9103      	str	r1, [sp, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	bfbb      	ittet	lt
 800f4f2:	425b      	neglt	r3, r3
 800f4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f4f8:	9307      	strge	r3, [sp, #28]
 800f4fa:	9307      	strlt	r3, [sp, #28]
 800f4fc:	bfb8      	it	lt
 800f4fe:	9204      	strlt	r2, [sp, #16]
 800f500:	7823      	ldrb	r3, [r4, #0]
 800f502:	2b2e      	cmp	r3, #46	; 0x2e
 800f504:	d10c      	bne.n	800f520 <_svfiprintf_r+0x130>
 800f506:	7863      	ldrb	r3, [r4, #1]
 800f508:	2b2a      	cmp	r3, #42	; 0x2a
 800f50a:	d135      	bne.n	800f578 <_svfiprintf_r+0x188>
 800f50c:	9b03      	ldr	r3, [sp, #12]
 800f50e:	1d1a      	adds	r2, r3, #4
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	9203      	str	r2, [sp, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	bfb8      	it	lt
 800f518:	f04f 33ff 	movlt.w	r3, #4294967295
 800f51c:	3402      	adds	r4, #2
 800f51e:	9305      	str	r3, [sp, #20]
 800f520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5ec <_svfiprintf_r+0x1fc>
 800f524:	7821      	ldrb	r1, [r4, #0]
 800f526:	2203      	movs	r2, #3
 800f528:	4650      	mov	r0, sl
 800f52a:	f7f0 fe89 	bl	8000240 <memchr>
 800f52e:	b140      	cbz	r0, 800f542 <_svfiprintf_r+0x152>
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	eba0 000a 	sub.w	r0, r0, sl
 800f536:	fa03 f000 	lsl.w	r0, r3, r0
 800f53a:	9b04      	ldr	r3, [sp, #16]
 800f53c:	4303      	orrs	r3, r0
 800f53e:	3401      	adds	r4, #1
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f546:	4826      	ldr	r0, [pc, #152]	; (800f5e0 <_svfiprintf_r+0x1f0>)
 800f548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f54c:	2206      	movs	r2, #6
 800f54e:	f7f0 fe77 	bl	8000240 <memchr>
 800f552:	2800      	cmp	r0, #0
 800f554:	d038      	beq.n	800f5c8 <_svfiprintf_r+0x1d8>
 800f556:	4b23      	ldr	r3, [pc, #140]	; (800f5e4 <_svfiprintf_r+0x1f4>)
 800f558:	bb1b      	cbnz	r3, 800f5a2 <_svfiprintf_r+0x1b2>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	3307      	adds	r3, #7
 800f55e:	f023 0307 	bic.w	r3, r3, #7
 800f562:	3308      	adds	r3, #8
 800f564:	9303      	str	r3, [sp, #12]
 800f566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f568:	4433      	add	r3, r6
 800f56a:	9309      	str	r3, [sp, #36]	; 0x24
 800f56c:	e767      	b.n	800f43e <_svfiprintf_r+0x4e>
 800f56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f572:	460c      	mov	r4, r1
 800f574:	2001      	movs	r0, #1
 800f576:	e7a5      	b.n	800f4c4 <_svfiprintf_r+0xd4>
 800f578:	2300      	movs	r3, #0
 800f57a:	3401      	adds	r4, #1
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	4619      	mov	r1, r3
 800f580:	f04f 0c0a 	mov.w	ip, #10
 800f584:	4620      	mov	r0, r4
 800f586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f58a:	3a30      	subs	r2, #48	; 0x30
 800f58c:	2a09      	cmp	r2, #9
 800f58e:	d903      	bls.n	800f598 <_svfiprintf_r+0x1a8>
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0c5      	beq.n	800f520 <_svfiprintf_r+0x130>
 800f594:	9105      	str	r1, [sp, #20]
 800f596:	e7c3      	b.n	800f520 <_svfiprintf_r+0x130>
 800f598:	fb0c 2101 	mla	r1, ip, r1, r2
 800f59c:	4604      	mov	r4, r0
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e7f0      	b.n	800f584 <_svfiprintf_r+0x194>
 800f5a2:	ab03      	add	r3, sp, #12
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	462a      	mov	r2, r5
 800f5a8:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <_svfiprintf_r+0x1f8>)
 800f5aa:	a904      	add	r1, sp, #16
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	f7fc f983 	bl	800b8b8 <_printf_float>
 800f5b2:	1c42      	adds	r2, r0, #1
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	d1d6      	bne.n	800f566 <_svfiprintf_r+0x176>
 800f5b8:	89ab      	ldrh	r3, [r5, #12]
 800f5ba:	065b      	lsls	r3, r3, #25
 800f5bc:	f53f af2c 	bmi.w	800f418 <_svfiprintf_r+0x28>
 800f5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5c2:	b01d      	add	sp, #116	; 0x74
 800f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c8:	ab03      	add	r3, sp, #12
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <_svfiprintf_r+0x1f8>)
 800f5d0:	a904      	add	r1, sp, #16
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	f7fc fc14 	bl	800be00 <_printf_i>
 800f5d8:	e7eb      	b.n	800f5b2 <_svfiprintf_r+0x1c2>
 800f5da:	bf00      	nop
 800f5dc:	08012b2c 	.word	0x08012b2c
 800f5e0:	08012b36 	.word	0x08012b36
 800f5e4:	0800b8b9 	.word	0x0800b8b9
 800f5e8:	0800f339 	.word	0x0800f339
 800f5ec:	08012b32 	.word	0x08012b32

0800f5f0 <_sungetc_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	1c4b      	adds	r3, r1, #1
 800f5f4:	4614      	mov	r4, r2
 800f5f6:	d103      	bne.n	800f600 <_sungetc_r+0x10>
 800f5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	8993      	ldrh	r3, [r2, #12]
 800f602:	f023 0320 	bic.w	r3, r3, #32
 800f606:	8193      	strh	r3, [r2, #12]
 800f608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f60a:	6852      	ldr	r2, [r2, #4]
 800f60c:	b2cd      	uxtb	r5, r1
 800f60e:	b18b      	cbz	r3, 800f634 <_sungetc_r+0x44>
 800f610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f612:	4293      	cmp	r3, r2
 800f614:	dd08      	ble.n	800f628 <_sungetc_r+0x38>
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	1e5a      	subs	r2, r3, #1
 800f61a:	6022      	str	r2, [r4, #0]
 800f61c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f620:	6863      	ldr	r3, [r4, #4]
 800f622:	3301      	adds	r3, #1
 800f624:	6063      	str	r3, [r4, #4]
 800f626:	e7e9      	b.n	800f5fc <_sungetc_r+0xc>
 800f628:	4621      	mov	r1, r4
 800f62a:	f000 fbf1 	bl	800fe10 <__submore>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0f1      	beq.n	800f616 <_sungetc_r+0x26>
 800f632:	e7e1      	b.n	800f5f8 <_sungetc_r+0x8>
 800f634:	6921      	ldr	r1, [r4, #16]
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	b151      	cbz	r1, 800f650 <_sungetc_r+0x60>
 800f63a:	4299      	cmp	r1, r3
 800f63c:	d208      	bcs.n	800f650 <_sungetc_r+0x60>
 800f63e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f642:	42a9      	cmp	r1, r5
 800f644:	d104      	bne.n	800f650 <_sungetc_r+0x60>
 800f646:	3b01      	subs	r3, #1
 800f648:	3201      	adds	r2, #1
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	6062      	str	r2, [r4, #4]
 800f64e:	e7d5      	b.n	800f5fc <_sungetc_r+0xc>
 800f650:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f658:	6363      	str	r3, [r4, #52]	; 0x34
 800f65a:	2303      	movs	r3, #3
 800f65c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f65e:	4623      	mov	r3, r4
 800f660:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	2301      	movs	r3, #1
 800f668:	e7dc      	b.n	800f624 <_sungetc_r+0x34>

0800f66a <__ssrefill_r>:
 800f66a:	b510      	push	{r4, lr}
 800f66c:	460c      	mov	r4, r1
 800f66e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f670:	b169      	cbz	r1, 800f68e <__ssrefill_r+0x24>
 800f672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f676:	4299      	cmp	r1, r3
 800f678:	d001      	beq.n	800f67e <__ssrefill_r+0x14>
 800f67a:	f7ff fd7d 	bl	800f178 <_free_r>
 800f67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f680:	6063      	str	r3, [r4, #4]
 800f682:	2000      	movs	r0, #0
 800f684:	6360      	str	r0, [r4, #52]	; 0x34
 800f686:	b113      	cbz	r3, 800f68e <__ssrefill_r+0x24>
 800f688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f68a:	6023      	str	r3, [r4, #0]
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	6923      	ldr	r3, [r4, #16]
 800f690:	6023      	str	r3, [r4, #0]
 800f692:	2300      	movs	r3, #0
 800f694:	6063      	str	r3, [r4, #4]
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	f043 0320 	orr.w	r3, r3, #32
 800f69c:	81a3      	strh	r3, [r4, #12]
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	e7f3      	b.n	800f68c <__ssrefill_r+0x22>

0800f6a4 <__ssvfiscanf_r>:
 800f6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f6b4:	49a6      	ldr	r1, [pc, #664]	; (800f950 <__ssvfiscanf_r+0x2ac>)
 800f6b6:	91a0      	str	r1, [sp, #640]	; 0x280
 800f6b8:	f10d 0804 	add.w	r8, sp, #4
 800f6bc:	49a5      	ldr	r1, [pc, #660]	; (800f954 <__ssvfiscanf_r+0x2b0>)
 800f6be:	4fa6      	ldr	r7, [pc, #664]	; (800f958 <__ssvfiscanf_r+0x2b4>)
 800f6c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f95c <__ssvfiscanf_r+0x2b8>
 800f6c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	91a1      	str	r1, [sp, #644]	; 0x284
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	7813      	ldrb	r3, [r2, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 815a 	beq.w	800f98a <__ssvfiscanf_r+0x2e6>
 800f6d6:	5dd9      	ldrb	r1, [r3, r7]
 800f6d8:	f011 0108 	ands.w	r1, r1, #8
 800f6dc:	f102 0501 	add.w	r5, r2, #1
 800f6e0:	d019      	beq.n	800f716 <__ssvfiscanf_r+0x72>
 800f6e2:	6863      	ldr	r3, [r4, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dd0f      	ble.n	800f708 <__ssvfiscanf_r+0x64>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	781a      	ldrb	r2, [r3, #0]
 800f6ec:	5cba      	ldrb	r2, [r7, r2]
 800f6ee:	0712      	lsls	r2, r2, #28
 800f6f0:	d401      	bmi.n	800f6f6 <__ssvfiscanf_r+0x52>
 800f6f2:	462a      	mov	r2, r5
 800f6f4:	e7eb      	b.n	800f6ce <__ssvfiscanf_r+0x2a>
 800f6f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f6f8:	3201      	adds	r2, #1
 800f6fa:	9245      	str	r2, [sp, #276]	; 0x114
 800f6fc:	6862      	ldr	r2, [r4, #4]
 800f6fe:	3301      	adds	r3, #1
 800f700:	3a01      	subs	r2, #1
 800f702:	6062      	str	r2, [r4, #4]
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	e7ec      	b.n	800f6e2 <__ssvfiscanf_r+0x3e>
 800f708:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f70a:	4621      	mov	r1, r4
 800f70c:	4630      	mov	r0, r6
 800f70e:	4798      	blx	r3
 800f710:	2800      	cmp	r0, #0
 800f712:	d0e9      	beq.n	800f6e8 <__ssvfiscanf_r+0x44>
 800f714:	e7ed      	b.n	800f6f2 <__ssvfiscanf_r+0x4e>
 800f716:	2b25      	cmp	r3, #37	; 0x25
 800f718:	d012      	beq.n	800f740 <__ssvfiscanf_r+0x9c>
 800f71a:	469a      	mov	sl, r3
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f340 8091 	ble.w	800f846 <__ssvfiscanf_r+0x1a2>
 800f724:	6822      	ldr	r2, [r4, #0]
 800f726:	7813      	ldrb	r3, [r2, #0]
 800f728:	4553      	cmp	r3, sl
 800f72a:	f040 812e 	bne.w	800f98a <__ssvfiscanf_r+0x2e6>
 800f72e:	6863      	ldr	r3, [r4, #4]
 800f730:	3b01      	subs	r3, #1
 800f732:	6063      	str	r3, [r4, #4]
 800f734:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f736:	3201      	adds	r2, #1
 800f738:	3301      	adds	r3, #1
 800f73a:	6022      	str	r2, [r4, #0]
 800f73c:	9345      	str	r3, [sp, #276]	; 0x114
 800f73e:	e7d8      	b.n	800f6f2 <__ssvfiscanf_r+0x4e>
 800f740:	9141      	str	r1, [sp, #260]	; 0x104
 800f742:	9143      	str	r1, [sp, #268]	; 0x10c
 800f744:	7853      	ldrb	r3, [r2, #1]
 800f746:	2b2a      	cmp	r3, #42	; 0x2a
 800f748:	bf02      	ittt	eq
 800f74a:	2310      	moveq	r3, #16
 800f74c:	1c95      	addeq	r5, r2, #2
 800f74e:	9341      	streq	r3, [sp, #260]	; 0x104
 800f750:	220a      	movs	r2, #10
 800f752:	46aa      	mov	sl, r5
 800f754:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f758:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f75c:	2b09      	cmp	r3, #9
 800f75e:	d91d      	bls.n	800f79c <__ssvfiscanf_r+0xf8>
 800f760:	487e      	ldr	r0, [pc, #504]	; (800f95c <__ssvfiscanf_r+0x2b8>)
 800f762:	2203      	movs	r2, #3
 800f764:	f7f0 fd6c 	bl	8000240 <memchr>
 800f768:	b140      	cbz	r0, 800f77c <__ssvfiscanf_r+0xd8>
 800f76a:	2301      	movs	r3, #1
 800f76c:	eba0 0009 	sub.w	r0, r0, r9
 800f770:	fa03 f000 	lsl.w	r0, r3, r0
 800f774:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f776:	4318      	orrs	r0, r3
 800f778:	9041      	str	r0, [sp, #260]	; 0x104
 800f77a:	4655      	mov	r5, sl
 800f77c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f780:	2b78      	cmp	r3, #120	; 0x78
 800f782:	d806      	bhi.n	800f792 <__ssvfiscanf_r+0xee>
 800f784:	2b57      	cmp	r3, #87	; 0x57
 800f786:	d810      	bhi.n	800f7aa <__ssvfiscanf_r+0x106>
 800f788:	2b25      	cmp	r3, #37	; 0x25
 800f78a:	d0c6      	beq.n	800f71a <__ssvfiscanf_r+0x76>
 800f78c:	d856      	bhi.n	800f83c <__ssvfiscanf_r+0x198>
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d064      	beq.n	800f85c <__ssvfiscanf_r+0x1b8>
 800f792:	2303      	movs	r3, #3
 800f794:	9347      	str	r3, [sp, #284]	; 0x11c
 800f796:	230a      	movs	r3, #10
 800f798:	9342      	str	r3, [sp, #264]	; 0x108
 800f79a:	e071      	b.n	800f880 <__ssvfiscanf_r+0x1dc>
 800f79c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f79e:	fb02 1103 	mla	r1, r2, r3, r1
 800f7a2:	3930      	subs	r1, #48	; 0x30
 800f7a4:	9143      	str	r1, [sp, #268]	; 0x10c
 800f7a6:	4655      	mov	r5, sl
 800f7a8:	e7d3      	b.n	800f752 <__ssvfiscanf_r+0xae>
 800f7aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f7ae:	2a20      	cmp	r2, #32
 800f7b0:	d8ef      	bhi.n	800f792 <__ssvfiscanf_r+0xee>
 800f7b2:	a101      	add	r1, pc, #4	; (adr r1, 800f7b8 <__ssvfiscanf_r+0x114>)
 800f7b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7b8:	0800f86b 	.word	0x0800f86b
 800f7bc:	0800f793 	.word	0x0800f793
 800f7c0:	0800f793 	.word	0x0800f793
 800f7c4:	0800f8c9 	.word	0x0800f8c9
 800f7c8:	0800f793 	.word	0x0800f793
 800f7cc:	0800f793 	.word	0x0800f793
 800f7d0:	0800f793 	.word	0x0800f793
 800f7d4:	0800f793 	.word	0x0800f793
 800f7d8:	0800f793 	.word	0x0800f793
 800f7dc:	0800f793 	.word	0x0800f793
 800f7e0:	0800f793 	.word	0x0800f793
 800f7e4:	0800f8df 	.word	0x0800f8df
 800f7e8:	0800f8b5 	.word	0x0800f8b5
 800f7ec:	0800f843 	.word	0x0800f843
 800f7f0:	0800f843 	.word	0x0800f843
 800f7f4:	0800f843 	.word	0x0800f843
 800f7f8:	0800f793 	.word	0x0800f793
 800f7fc:	0800f8b9 	.word	0x0800f8b9
 800f800:	0800f793 	.word	0x0800f793
 800f804:	0800f793 	.word	0x0800f793
 800f808:	0800f793 	.word	0x0800f793
 800f80c:	0800f793 	.word	0x0800f793
 800f810:	0800f8ef 	.word	0x0800f8ef
 800f814:	0800f8c1 	.word	0x0800f8c1
 800f818:	0800f863 	.word	0x0800f863
 800f81c:	0800f793 	.word	0x0800f793
 800f820:	0800f793 	.word	0x0800f793
 800f824:	0800f8eb 	.word	0x0800f8eb
 800f828:	0800f793 	.word	0x0800f793
 800f82c:	0800f8b5 	.word	0x0800f8b5
 800f830:	0800f793 	.word	0x0800f793
 800f834:	0800f793 	.word	0x0800f793
 800f838:	0800f86b 	.word	0x0800f86b
 800f83c:	3b45      	subs	r3, #69	; 0x45
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d8a7      	bhi.n	800f792 <__ssvfiscanf_r+0xee>
 800f842:	2305      	movs	r3, #5
 800f844:	e01b      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f846:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f848:	4621      	mov	r1, r4
 800f84a:	4630      	mov	r0, r6
 800f84c:	4798      	blx	r3
 800f84e:	2800      	cmp	r0, #0
 800f850:	f43f af68 	beq.w	800f724 <__ssvfiscanf_r+0x80>
 800f854:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f856:	2800      	cmp	r0, #0
 800f858:	f040 808d 	bne.w	800f976 <__ssvfiscanf_r+0x2d2>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	e08f      	b.n	800f982 <__ssvfiscanf_r+0x2de>
 800f862:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f864:	f042 0220 	orr.w	r2, r2, #32
 800f868:	9241      	str	r2, [sp, #260]	; 0x104
 800f86a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f86c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f870:	9241      	str	r2, [sp, #260]	; 0x104
 800f872:	2210      	movs	r2, #16
 800f874:	2b6f      	cmp	r3, #111	; 0x6f
 800f876:	9242      	str	r2, [sp, #264]	; 0x108
 800f878:	bf34      	ite	cc
 800f87a:	2303      	movcc	r3, #3
 800f87c:	2304      	movcs	r3, #4
 800f87e:	9347      	str	r3, [sp, #284]	; 0x11c
 800f880:	6863      	ldr	r3, [r4, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	dd42      	ble.n	800f90c <__ssvfiscanf_r+0x268>
 800f886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f888:	0659      	lsls	r1, r3, #25
 800f88a:	d404      	bmi.n	800f896 <__ssvfiscanf_r+0x1f2>
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	781a      	ldrb	r2, [r3, #0]
 800f890:	5cba      	ldrb	r2, [r7, r2]
 800f892:	0712      	lsls	r2, r2, #28
 800f894:	d441      	bmi.n	800f91a <__ssvfiscanf_r+0x276>
 800f896:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f898:	2b02      	cmp	r3, #2
 800f89a:	dc50      	bgt.n	800f93e <__ssvfiscanf_r+0x29a>
 800f89c:	466b      	mov	r3, sp
 800f89e:	4622      	mov	r2, r4
 800f8a0:	a941      	add	r1, sp, #260	; 0x104
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f000 f876 	bl	800f994 <_scanf_chars>
 800f8a8:	2801      	cmp	r0, #1
 800f8aa:	d06e      	beq.n	800f98a <__ssvfiscanf_r+0x2e6>
 800f8ac:	2802      	cmp	r0, #2
 800f8ae:	f47f af20 	bne.w	800f6f2 <__ssvfiscanf_r+0x4e>
 800f8b2:	e7cf      	b.n	800f854 <__ssvfiscanf_r+0x1b0>
 800f8b4:	220a      	movs	r2, #10
 800f8b6:	e7dd      	b.n	800f874 <__ssvfiscanf_r+0x1d0>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9342      	str	r3, [sp, #264]	; 0x108
 800f8bc:	2303      	movs	r3, #3
 800f8be:	e7de      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f8c0:	2308      	movs	r3, #8
 800f8c2:	9342      	str	r3, [sp, #264]	; 0x108
 800f8c4:	2304      	movs	r3, #4
 800f8c6:	e7da      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	4640      	mov	r0, r8
 800f8cc:	f000 f9e0 	bl	800fc90 <__sccl>
 800f8d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8d6:	9341      	str	r3, [sp, #260]	; 0x104
 800f8d8:	4605      	mov	r5, r0
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e7cf      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f8de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8e4:	9341      	str	r3, [sp, #260]	; 0x104
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e7c9      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f8ea:	2302      	movs	r3, #2
 800f8ec:	e7c7      	b.n	800f87e <__ssvfiscanf_r+0x1da>
 800f8ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f8f0:	06c3      	lsls	r3, r0, #27
 800f8f2:	f53f aefe 	bmi.w	800f6f2 <__ssvfiscanf_r+0x4e>
 800f8f6:	9b00      	ldr	r3, [sp, #0]
 800f8f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f8fa:	1d19      	adds	r1, r3, #4
 800f8fc:	9100      	str	r1, [sp, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f010 0f01 	tst.w	r0, #1
 800f904:	bf14      	ite	ne
 800f906:	801a      	strhne	r2, [r3, #0]
 800f908:	601a      	streq	r2, [r3, #0]
 800f90a:	e6f2      	b.n	800f6f2 <__ssvfiscanf_r+0x4e>
 800f90c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f90e:	4621      	mov	r1, r4
 800f910:	4630      	mov	r0, r6
 800f912:	4798      	blx	r3
 800f914:	2800      	cmp	r0, #0
 800f916:	d0b6      	beq.n	800f886 <__ssvfiscanf_r+0x1e2>
 800f918:	e79c      	b.n	800f854 <__ssvfiscanf_r+0x1b0>
 800f91a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f91c:	3201      	adds	r2, #1
 800f91e:	9245      	str	r2, [sp, #276]	; 0x114
 800f920:	6862      	ldr	r2, [r4, #4]
 800f922:	3a01      	subs	r2, #1
 800f924:	2a00      	cmp	r2, #0
 800f926:	6062      	str	r2, [r4, #4]
 800f928:	dd02      	ble.n	800f930 <__ssvfiscanf_r+0x28c>
 800f92a:	3301      	adds	r3, #1
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	e7ad      	b.n	800f88c <__ssvfiscanf_r+0x1e8>
 800f930:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f932:	4621      	mov	r1, r4
 800f934:	4630      	mov	r0, r6
 800f936:	4798      	blx	r3
 800f938:	2800      	cmp	r0, #0
 800f93a:	d0a7      	beq.n	800f88c <__ssvfiscanf_r+0x1e8>
 800f93c:	e78a      	b.n	800f854 <__ssvfiscanf_r+0x1b0>
 800f93e:	2b04      	cmp	r3, #4
 800f940:	dc0e      	bgt.n	800f960 <__ssvfiscanf_r+0x2bc>
 800f942:	466b      	mov	r3, sp
 800f944:	4622      	mov	r2, r4
 800f946:	a941      	add	r1, sp, #260	; 0x104
 800f948:	4630      	mov	r0, r6
 800f94a:	f000 f87d 	bl	800fa48 <_scanf_i>
 800f94e:	e7ab      	b.n	800f8a8 <__ssvfiscanf_r+0x204>
 800f950:	0800f5f1 	.word	0x0800f5f1
 800f954:	0800f66b 	.word	0x0800f66b
 800f958:	080127c9 	.word	0x080127c9
 800f95c:	08012b32 	.word	0x08012b32
 800f960:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <__ssvfiscanf_r+0x2ec>)
 800f962:	2b00      	cmp	r3, #0
 800f964:	f43f aec5 	beq.w	800f6f2 <__ssvfiscanf_r+0x4e>
 800f968:	466b      	mov	r3, sp
 800f96a:	4622      	mov	r2, r4
 800f96c:	a941      	add	r1, sp, #260	; 0x104
 800f96e:	4630      	mov	r0, r6
 800f970:	f7fc fb6c 	bl	800c04c <_scanf_float>
 800f974:	e798      	b.n	800f8a8 <__ssvfiscanf_r+0x204>
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f97c:	bf18      	it	ne
 800f97e:	f04f 30ff 	movne.w	r0, #4294967295
 800f982:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f98c:	e7f9      	b.n	800f982 <__ssvfiscanf_r+0x2de>
 800f98e:	bf00      	nop
 800f990:	0800c04d 	.word	0x0800c04d

0800f994 <_scanf_chars>:
 800f994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f998:	4615      	mov	r5, r2
 800f99a:	688a      	ldr	r2, [r1, #8]
 800f99c:	4680      	mov	r8, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	b932      	cbnz	r2, 800f9b0 <_scanf_chars+0x1c>
 800f9a2:	698a      	ldr	r2, [r1, #24]
 800f9a4:	2a00      	cmp	r2, #0
 800f9a6:	bf0c      	ite	eq
 800f9a8:	2201      	moveq	r2, #1
 800f9aa:	f04f 32ff 	movne.w	r2, #4294967295
 800f9ae:	608a      	str	r2, [r1, #8]
 800f9b0:	6822      	ldr	r2, [r4, #0]
 800f9b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fa44 <_scanf_chars+0xb0>
 800f9b6:	06d1      	lsls	r1, r2, #27
 800f9b8:	bf5f      	itttt	pl
 800f9ba:	681a      	ldrpl	r2, [r3, #0]
 800f9bc:	1d11      	addpl	r1, r2, #4
 800f9be:	6019      	strpl	r1, [r3, #0]
 800f9c0:	6816      	ldrpl	r6, [r2, #0]
 800f9c2:	2700      	movs	r7, #0
 800f9c4:	69a0      	ldr	r0, [r4, #24]
 800f9c6:	b188      	cbz	r0, 800f9ec <_scanf_chars+0x58>
 800f9c8:	2801      	cmp	r0, #1
 800f9ca:	d107      	bne.n	800f9dc <_scanf_chars+0x48>
 800f9cc:	682a      	ldr	r2, [r5, #0]
 800f9ce:	7811      	ldrb	r1, [r2, #0]
 800f9d0:	6962      	ldr	r2, [r4, #20]
 800f9d2:	5c52      	ldrb	r2, [r2, r1]
 800f9d4:	b952      	cbnz	r2, 800f9ec <_scanf_chars+0x58>
 800f9d6:	2f00      	cmp	r7, #0
 800f9d8:	d031      	beq.n	800fa3e <_scanf_chars+0xaa>
 800f9da:	e022      	b.n	800fa22 <_scanf_chars+0x8e>
 800f9dc:	2802      	cmp	r0, #2
 800f9de:	d120      	bne.n	800fa22 <_scanf_chars+0x8e>
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f9e8:	071b      	lsls	r3, r3, #28
 800f9ea:	d41a      	bmi.n	800fa22 <_scanf_chars+0x8e>
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	06da      	lsls	r2, r3, #27
 800f9f0:	bf5e      	ittt	pl
 800f9f2:	682b      	ldrpl	r3, [r5, #0]
 800f9f4:	781b      	ldrbpl	r3, [r3, #0]
 800f9f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f9fa:	682a      	ldr	r2, [r5, #0]
 800f9fc:	686b      	ldr	r3, [r5, #4]
 800f9fe:	3201      	adds	r2, #1
 800fa00:	602a      	str	r2, [r5, #0]
 800fa02:	68a2      	ldr	r2, [r4, #8]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	3a01      	subs	r2, #1
 800fa08:	606b      	str	r3, [r5, #4]
 800fa0a:	3701      	adds	r7, #1
 800fa0c:	60a2      	str	r2, [r4, #8]
 800fa0e:	b142      	cbz	r2, 800fa22 <_scanf_chars+0x8e>
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	dcd7      	bgt.n	800f9c4 <_scanf_chars+0x30>
 800fa14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa18:	4629      	mov	r1, r5
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	4798      	blx	r3
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d0d0      	beq.n	800f9c4 <_scanf_chars+0x30>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	f013 0310 	ands.w	r3, r3, #16
 800fa28:	d105      	bne.n	800fa36 <_scanf_chars+0xa2>
 800fa2a:	68e2      	ldr	r2, [r4, #12]
 800fa2c:	3201      	adds	r2, #1
 800fa2e:	60e2      	str	r2, [r4, #12]
 800fa30:	69a2      	ldr	r2, [r4, #24]
 800fa32:	b102      	cbz	r2, 800fa36 <_scanf_chars+0xa2>
 800fa34:	7033      	strb	r3, [r6, #0]
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	443b      	add	r3, r7
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa42:	bf00      	nop
 800fa44:	080127c9 	.word	0x080127c9

0800fa48 <_scanf_i>:
 800fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	4698      	mov	r8, r3
 800fa4e:	4b76      	ldr	r3, [pc, #472]	; (800fc28 <_scanf_i+0x1e0>)
 800fa50:	460c      	mov	r4, r1
 800fa52:	4682      	mov	sl, r0
 800fa54:	4616      	mov	r6, r2
 800fa56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	ab03      	add	r3, sp, #12
 800fa5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa62:	4b72      	ldr	r3, [pc, #456]	; (800fc2c <_scanf_i+0x1e4>)
 800fa64:	69a1      	ldr	r1, [r4, #24]
 800fa66:	4a72      	ldr	r2, [pc, #456]	; (800fc30 <_scanf_i+0x1e8>)
 800fa68:	2903      	cmp	r1, #3
 800fa6a:	bf18      	it	ne
 800fa6c:	461a      	movne	r2, r3
 800fa6e:	68a3      	ldr	r3, [r4, #8]
 800fa70:	9201      	str	r2, [sp, #4]
 800fa72:	1e5a      	subs	r2, r3, #1
 800fa74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fa78:	bf88      	it	hi
 800fa7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fa7e:	4627      	mov	r7, r4
 800fa80:	bf82      	ittt	hi
 800fa82:	eb03 0905 	addhi.w	r9, r3, r5
 800fa86:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fa8a:	60a3      	strhi	r3, [r4, #8]
 800fa8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fa90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fa94:	bf98      	it	ls
 800fa96:	f04f 0900 	movls.w	r9, #0
 800fa9a:	6023      	str	r3, [r4, #0]
 800fa9c:	463d      	mov	r5, r7
 800fa9e:	f04f 0b00 	mov.w	fp, #0
 800faa2:	6831      	ldr	r1, [r6, #0]
 800faa4:	ab03      	add	r3, sp, #12
 800faa6:	7809      	ldrb	r1, [r1, #0]
 800faa8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800faac:	2202      	movs	r2, #2
 800faae:	f7f0 fbc7 	bl	8000240 <memchr>
 800fab2:	b328      	cbz	r0, 800fb00 <_scanf_i+0xb8>
 800fab4:	f1bb 0f01 	cmp.w	fp, #1
 800fab8:	d159      	bne.n	800fb6e <_scanf_i+0x126>
 800faba:	6862      	ldr	r2, [r4, #4]
 800fabc:	b92a      	cbnz	r2, 800faca <_scanf_i+0x82>
 800fabe:	6822      	ldr	r2, [r4, #0]
 800fac0:	2308      	movs	r3, #8
 800fac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fac6:	6063      	str	r3, [r4, #4]
 800fac8:	6022      	str	r2, [r4, #0]
 800faca:	6822      	ldr	r2, [r4, #0]
 800facc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fad0:	6022      	str	r2, [r4, #0]
 800fad2:	68a2      	ldr	r2, [r4, #8]
 800fad4:	1e51      	subs	r1, r2, #1
 800fad6:	60a1      	str	r1, [r4, #8]
 800fad8:	b192      	cbz	r2, 800fb00 <_scanf_i+0xb8>
 800fada:	6832      	ldr	r2, [r6, #0]
 800fadc:	1c51      	adds	r1, r2, #1
 800fade:	6031      	str	r1, [r6, #0]
 800fae0:	7812      	ldrb	r2, [r2, #0]
 800fae2:	f805 2b01 	strb.w	r2, [r5], #1
 800fae6:	6872      	ldr	r2, [r6, #4]
 800fae8:	3a01      	subs	r2, #1
 800faea:	2a00      	cmp	r2, #0
 800faec:	6072      	str	r2, [r6, #4]
 800faee:	dc07      	bgt.n	800fb00 <_scanf_i+0xb8>
 800faf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800faf4:	4631      	mov	r1, r6
 800faf6:	4650      	mov	r0, sl
 800faf8:	4790      	blx	r2
 800fafa:	2800      	cmp	r0, #0
 800fafc:	f040 8085 	bne.w	800fc0a <_scanf_i+0x1c2>
 800fb00:	f10b 0b01 	add.w	fp, fp, #1
 800fb04:	f1bb 0f03 	cmp.w	fp, #3
 800fb08:	d1cb      	bne.n	800faa2 <_scanf_i+0x5a>
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	b90b      	cbnz	r3, 800fb12 <_scanf_i+0xca>
 800fb0e:	230a      	movs	r3, #10
 800fb10:	6063      	str	r3, [r4, #4]
 800fb12:	6863      	ldr	r3, [r4, #4]
 800fb14:	4947      	ldr	r1, [pc, #284]	; (800fc34 <_scanf_i+0x1ec>)
 800fb16:	6960      	ldr	r0, [r4, #20]
 800fb18:	1ac9      	subs	r1, r1, r3
 800fb1a:	f000 f8b9 	bl	800fc90 <__sccl>
 800fb1e:	f04f 0b00 	mov.w	fp, #0
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	6822      	ldr	r2, [r4, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d03d      	beq.n	800fba6 <_scanf_i+0x15e>
 800fb2a:	6831      	ldr	r1, [r6, #0]
 800fb2c:	6960      	ldr	r0, [r4, #20]
 800fb2e:	f891 c000 	ldrb.w	ip, [r1]
 800fb32:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d035      	beq.n	800fba6 <_scanf_i+0x15e>
 800fb3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fb3e:	d124      	bne.n	800fb8a <_scanf_i+0x142>
 800fb40:	0510      	lsls	r0, r2, #20
 800fb42:	d522      	bpl.n	800fb8a <_scanf_i+0x142>
 800fb44:	f10b 0b01 	add.w	fp, fp, #1
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	d003      	beq.n	800fb56 <_scanf_i+0x10e>
 800fb4e:	3301      	adds	r3, #1
 800fb50:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb54:	60a3      	str	r3, [r4, #8]
 800fb56:	6873      	ldr	r3, [r6, #4]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	6073      	str	r3, [r6, #4]
 800fb5e:	dd1b      	ble.n	800fb98 <_scanf_i+0x150>
 800fb60:	6833      	ldr	r3, [r6, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	6033      	str	r3, [r6, #0]
 800fb66:	68a3      	ldr	r3, [r4, #8]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	60a3      	str	r3, [r4, #8]
 800fb6c:	e7d9      	b.n	800fb22 <_scanf_i+0xda>
 800fb6e:	f1bb 0f02 	cmp.w	fp, #2
 800fb72:	d1ae      	bne.n	800fad2 <_scanf_i+0x8a>
 800fb74:	6822      	ldr	r2, [r4, #0]
 800fb76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fb7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fb7e:	d1bf      	bne.n	800fb00 <_scanf_i+0xb8>
 800fb80:	2310      	movs	r3, #16
 800fb82:	6063      	str	r3, [r4, #4]
 800fb84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb88:	e7a2      	b.n	800fad0 <_scanf_i+0x88>
 800fb8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fb8e:	6022      	str	r2, [r4, #0]
 800fb90:	780b      	ldrb	r3, [r1, #0]
 800fb92:	f805 3b01 	strb.w	r3, [r5], #1
 800fb96:	e7de      	b.n	800fb56 <_scanf_i+0x10e>
 800fb98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	4650      	mov	r0, sl
 800fba0:	4798      	blx	r3
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d0df      	beq.n	800fb66 <_scanf_i+0x11e>
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	05db      	lsls	r3, r3, #23
 800fbaa:	d50d      	bpl.n	800fbc8 <_scanf_i+0x180>
 800fbac:	42bd      	cmp	r5, r7
 800fbae:	d909      	bls.n	800fbc4 <_scanf_i+0x17c>
 800fbb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fbb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbb8:	4632      	mov	r2, r6
 800fbba:	4650      	mov	r0, sl
 800fbbc:	4798      	blx	r3
 800fbbe:	f105 39ff 	add.w	r9, r5, #4294967295
 800fbc2:	464d      	mov	r5, r9
 800fbc4:	42bd      	cmp	r5, r7
 800fbc6:	d02d      	beq.n	800fc24 <_scanf_i+0x1dc>
 800fbc8:	6822      	ldr	r2, [r4, #0]
 800fbca:	f012 0210 	ands.w	r2, r2, #16
 800fbce:	d113      	bne.n	800fbf8 <_scanf_i+0x1b0>
 800fbd0:	702a      	strb	r2, [r5, #0]
 800fbd2:	6863      	ldr	r3, [r4, #4]
 800fbd4:	9e01      	ldr	r6, [sp, #4]
 800fbd6:	4639      	mov	r1, r7
 800fbd8:	4650      	mov	r0, sl
 800fbda:	47b0      	blx	r6
 800fbdc:	6821      	ldr	r1, [r4, #0]
 800fbde:	f8d8 3000 	ldr.w	r3, [r8]
 800fbe2:	f011 0f20 	tst.w	r1, #32
 800fbe6:	d013      	beq.n	800fc10 <_scanf_i+0x1c8>
 800fbe8:	1d1a      	adds	r2, r3, #4
 800fbea:	f8c8 2000 	str.w	r2, [r8]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6018      	str	r0, [r3, #0]
 800fbf2:	68e3      	ldr	r3, [r4, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60e3      	str	r3, [r4, #12]
 800fbf8:	1bed      	subs	r5, r5, r7
 800fbfa:	44ab      	add	fp, r5
 800fbfc:	6925      	ldr	r5, [r4, #16]
 800fbfe:	445d      	add	r5, fp
 800fc00:	6125      	str	r5, [r4, #16]
 800fc02:	2000      	movs	r0, #0
 800fc04:	b007      	add	sp, #28
 800fc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0a:	f04f 0b00 	mov.w	fp, #0
 800fc0e:	e7ca      	b.n	800fba6 <_scanf_i+0x15e>
 800fc10:	1d1a      	adds	r2, r3, #4
 800fc12:	f8c8 2000 	str.w	r2, [r8]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f011 0f01 	tst.w	r1, #1
 800fc1c:	bf14      	ite	ne
 800fc1e:	8018      	strhne	r0, [r3, #0]
 800fc20:	6018      	streq	r0, [r3, #0]
 800fc22:	e7e6      	b.n	800fbf2 <_scanf_i+0x1aa>
 800fc24:	2001      	movs	r0, #1
 800fc26:	e7ed      	b.n	800fc04 <_scanf_i+0x1bc>
 800fc28:	0801270c 	.word	0x0801270c
 800fc2c:	0800fe0d 	.word	0x0800fe0d
 800fc30:	0800d32d 	.word	0x0800d32d
 800fc34:	08012b56 	.word	0x08012b56

0800fc38 <_read_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d07      	ldr	r5, [pc, #28]	; (800fc58 <_read_r+0x20>)
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	4608      	mov	r0, r1
 800fc40:	4611      	mov	r1, r2
 800fc42:	2200      	movs	r2, #0
 800fc44:	602a      	str	r2, [r5, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	f7f5 fe94 	bl	8005974 <_read>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_read_r+0x1e>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_read_r+0x1e>
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	2000122c 	.word	0x2000122c
 800fc5c:	00000000 	.word	0x00000000

0800fc60 <nan>:
 800fc60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc68 <nan+0x8>
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	00000000 	.word	0x00000000
 800fc6c:	7ff80000 	.word	0x7ff80000

0800fc70 <_sbrk_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d06      	ldr	r5, [pc, #24]	; (800fc8c <_sbrk_r+0x1c>)
 800fc74:	2300      	movs	r3, #0
 800fc76:	4604      	mov	r4, r0
 800fc78:	4608      	mov	r0, r1
 800fc7a:	602b      	str	r3, [r5, #0]
 800fc7c:	f7f5 fee8 	bl	8005a50 <_sbrk>
 800fc80:	1c43      	adds	r3, r0, #1
 800fc82:	d102      	bne.n	800fc8a <_sbrk_r+0x1a>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	b103      	cbz	r3, 800fc8a <_sbrk_r+0x1a>
 800fc88:	6023      	str	r3, [r4, #0]
 800fc8a:	bd38      	pop	{r3, r4, r5, pc}
 800fc8c:	2000122c 	.word	0x2000122c

0800fc90 <__sccl>:
 800fc90:	b570      	push	{r4, r5, r6, lr}
 800fc92:	780b      	ldrb	r3, [r1, #0]
 800fc94:	4604      	mov	r4, r0
 800fc96:	2b5e      	cmp	r3, #94	; 0x5e
 800fc98:	bf0b      	itete	eq
 800fc9a:	784b      	ldrbeq	r3, [r1, #1]
 800fc9c:	1c48      	addne	r0, r1, #1
 800fc9e:	1c88      	addeq	r0, r1, #2
 800fca0:	2200      	movne	r2, #0
 800fca2:	bf08      	it	eq
 800fca4:	2201      	moveq	r2, #1
 800fca6:	1e61      	subs	r1, r4, #1
 800fca8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fcac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fcb0:	42a9      	cmp	r1, r5
 800fcb2:	d1fb      	bne.n	800fcac <__sccl+0x1c>
 800fcb4:	b90b      	cbnz	r3, 800fcba <__sccl+0x2a>
 800fcb6:	3801      	subs	r0, #1
 800fcb8:	bd70      	pop	{r4, r5, r6, pc}
 800fcba:	f082 0201 	eor.w	r2, r2, #1
 800fcbe:	54e2      	strb	r2, [r4, r3]
 800fcc0:	4605      	mov	r5, r0
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fcc8:	292d      	cmp	r1, #45	; 0x2d
 800fcca:	d006      	beq.n	800fcda <__sccl+0x4a>
 800fccc:	295d      	cmp	r1, #93	; 0x5d
 800fcce:	d0f3      	beq.n	800fcb8 <__sccl+0x28>
 800fcd0:	b909      	cbnz	r1, 800fcd6 <__sccl+0x46>
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	e7f0      	b.n	800fcb8 <__sccl+0x28>
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	e7f1      	b.n	800fcbe <__sccl+0x2e>
 800fcda:	786e      	ldrb	r6, [r5, #1]
 800fcdc:	2e5d      	cmp	r6, #93	; 0x5d
 800fcde:	d0fa      	beq.n	800fcd6 <__sccl+0x46>
 800fce0:	42b3      	cmp	r3, r6
 800fce2:	dcf8      	bgt.n	800fcd6 <__sccl+0x46>
 800fce4:	3502      	adds	r5, #2
 800fce6:	4619      	mov	r1, r3
 800fce8:	3101      	adds	r1, #1
 800fcea:	428e      	cmp	r6, r1
 800fcec:	5462      	strb	r2, [r4, r1]
 800fcee:	dcfb      	bgt.n	800fce8 <__sccl+0x58>
 800fcf0:	1af1      	subs	r1, r6, r3
 800fcf2:	3901      	subs	r1, #1
 800fcf4:	1c58      	adds	r0, r3, #1
 800fcf6:	42b3      	cmp	r3, r6
 800fcf8:	bfa8      	it	ge
 800fcfa:	2100      	movge	r1, #0
 800fcfc:	1843      	adds	r3, r0, r1
 800fcfe:	e7e0      	b.n	800fcc2 <__sccl+0x32>

0800fd00 <strncmp>:
 800fd00:	b510      	push	{r4, lr}
 800fd02:	b17a      	cbz	r2, 800fd24 <strncmp+0x24>
 800fd04:	4603      	mov	r3, r0
 800fd06:	3901      	subs	r1, #1
 800fd08:	1884      	adds	r4, r0, r2
 800fd0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd12:	4290      	cmp	r0, r2
 800fd14:	d101      	bne.n	800fd1a <strncmp+0x1a>
 800fd16:	42a3      	cmp	r3, r4
 800fd18:	d101      	bne.n	800fd1e <strncmp+0x1e>
 800fd1a:	1a80      	subs	r0, r0, r2
 800fd1c:	bd10      	pop	{r4, pc}
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d1f3      	bne.n	800fd0a <strncmp+0xa>
 800fd22:	e7fa      	b.n	800fd1a <strncmp+0x1a>
 800fd24:	4610      	mov	r0, r2
 800fd26:	e7f9      	b.n	800fd1c <strncmp+0x1c>

0800fd28 <_strtoul_l.constprop.0>:
 800fd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd2c:	4f36      	ldr	r7, [pc, #216]	; (800fe08 <_strtoul_l.constprop.0+0xe0>)
 800fd2e:	4686      	mov	lr, r0
 800fd30:	460d      	mov	r5, r1
 800fd32:	4628      	mov	r0, r5
 800fd34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd38:	5de6      	ldrb	r6, [r4, r7]
 800fd3a:	f016 0608 	ands.w	r6, r6, #8
 800fd3e:	d1f8      	bne.n	800fd32 <_strtoul_l.constprop.0+0xa>
 800fd40:	2c2d      	cmp	r4, #45	; 0x2d
 800fd42:	d12f      	bne.n	800fda4 <_strtoul_l.constprop.0+0x7c>
 800fd44:	782c      	ldrb	r4, [r5, #0]
 800fd46:	2601      	movs	r6, #1
 800fd48:	1c85      	adds	r5, r0, #2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d057      	beq.n	800fdfe <_strtoul_l.constprop.0+0xd6>
 800fd4e:	2b10      	cmp	r3, #16
 800fd50:	d109      	bne.n	800fd66 <_strtoul_l.constprop.0+0x3e>
 800fd52:	2c30      	cmp	r4, #48	; 0x30
 800fd54:	d107      	bne.n	800fd66 <_strtoul_l.constprop.0+0x3e>
 800fd56:	7828      	ldrb	r0, [r5, #0]
 800fd58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fd5c:	2858      	cmp	r0, #88	; 0x58
 800fd5e:	d149      	bne.n	800fdf4 <_strtoul_l.constprop.0+0xcc>
 800fd60:	786c      	ldrb	r4, [r5, #1]
 800fd62:	2310      	movs	r3, #16
 800fd64:	3502      	adds	r5, #2
 800fd66:	f04f 38ff 	mov.w	r8, #4294967295
 800fd6a:	2700      	movs	r7, #0
 800fd6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800fd70:	fb03 f908 	mul.w	r9, r3, r8
 800fd74:	ea6f 0909 	mvn.w	r9, r9
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fd7e:	f1bc 0f09 	cmp.w	ip, #9
 800fd82:	d814      	bhi.n	800fdae <_strtoul_l.constprop.0+0x86>
 800fd84:	4664      	mov	r4, ip
 800fd86:	42a3      	cmp	r3, r4
 800fd88:	dd22      	ble.n	800fdd0 <_strtoul_l.constprop.0+0xa8>
 800fd8a:	2f00      	cmp	r7, #0
 800fd8c:	db1d      	blt.n	800fdca <_strtoul_l.constprop.0+0xa2>
 800fd8e:	4580      	cmp	r8, r0
 800fd90:	d31b      	bcc.n	800fdca <_strtoul_l.constprop.0+0xa2>
 800fd92:	d101      	bne.n	800fd98 <_strtoul_l.constprop.0+0x70>
 800fd94:	45a1      	cmp	r9, r4
 800fd96:	db18      	blt.n	800fdca <_strtoul_l.constprop.0+0xa2>
 800fd98:	fb00 4003 	mla	r0, r0, r3, r4
 800fd9c:	2701      	movs	r7, #1
 800fd9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fda2:	e7ea      	b.n	800fd7a <_strtoul_l.constprop.0+0x52>
 800fda4:	2c2b      	cmp	r4, #43	; 0x2b
 800fda6:	bf04      	itt	eq
 800fda8:	782c      	ldrbeq	r4, [r5, #0]
 800fdaa:	1c85      	addeq	r5, r0, #2
 800fdac:	e7cd      	b.n	800fd4a <_strtoul_l.constprop.0+0x22>
 800fdae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fdb2:	f1bc 0f19 	cmp.w	ip, #25
 800fdb6:	d801      	bhi.n	800fdbc <_strtoul_l.constprop.0+0x94>
 800fdb8:	3c37      	subs	r4, #55	; 0x37
 800fdba:	e7e4      	b.n	800fd86 <_strtoul_l.constprop.0+0x5e>
 800fdbc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fdc0:	f1bc 0f19 	cmp.w	ip, #25
 800fdc4:	d804      	bhi.n	800fdd0 <_strtoul_l.constprop.0+0xa8>
 800fdc6:	3c57      	subs	r4, #87	; 0x57
 800fdc8:	e7dd      	b.n	800fd86 <_strtoul_l.constprop.0+0x5e>
 800fdca:	f04f 37ff 	mov.w	r7, #4294967295
 800fdce:	e7e6      	b.n	800fd9e <_strtoul_l.constprop.0+0x76>
 800fdd0:	2f00      	cmp	r7, #0
 800fdd2:	da07      	bge.n	800fde4 <_strtoul_l.constprop.0+0xbc>
 800fdd4:	2322      	movs	r3, #34	; 0x22
 800fdd6:	f8ce 3000 	str.w	r3, [lr]
 800fdda:	f04f 30ff 	mov.w	r0, #4294967295
 800fdde:	b932      	cbnz	r2, 800fdee <_strtoul_l.constprop.0+0xc6>
 800fde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fde4:	b106      	cbz	r6, 800fde8 <_strtoul_l.constprop.0+0xc0>
 800fde6:	4240      	negs	r0, r0
 800fde8:	2a00      	cmp	r2, #0
 800fdea:	d0f9      	beq.n	800fde0 <_strtoul_l.constprop.0+0xb8>
 800fdec:	b107      	cbz	r7, 800fdf0 <_strtoul_l.constprop.0+0xc8>
 800fdee:	1e69      	subs	r1, r5, #1
 800fdf0:	6011      	str	r1, [r2, #0]
 800fdf2:	e7f5      	b.n	800fde0 <_strtoul_l.constprop.0+0xb8>
 800fdf4:	2430      	movs	r4, #48	; 0x30
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1b5      	bne.n	800fd66 <_strtoul_l.constprop.0+0x3e>
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	e7b3      	b.n	800fd66 <_strtoul_l.constprop.0+0x3e>
 800fdfe:	2c30      	cmp	r4, #48	; 0x30
 800fe00:	d0a9      	beq.n	800fd56 <_strtoul_l.constprop.0+0x2e>
 800fe02:	230a      	movs	r3, #10
 800fe04:	e7af      	b.n	800fd66 <_strtoul_l.constprop.0+0x3e>
 800fe06:	bf00      	nop
 800fe08:	080127c9 	.word	0x080127c9

0800fe0c <_strtoul_r>:
 800fe0c:	f7ff bf8c 	b.w	800fd28 <_strtoul_l.constprop.0>

0800fe10 <__submore>:
 800fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe14:	460c      	mov	r4, r1
 800fe16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fe18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe1c:	4299      	cmp	r1, r3
 800fe1e:	d11d      	bne.n	800fe5c <__submore+0x4c>
 800fe20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe24:	f7ff fa14 	bl	800f250 <_malloc_r>
 800fe28:	b918      	cbnz	r0, 800fe32 <__submore+0x22>
 800fe2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe36:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fe3c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fe42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fe46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fe4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fe4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fe52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fe56:	6020      	str	r0, [r4, #0]
 800fe58:	2000      	movs	r0, #0
 800fe5a:	e7e8      	b.n	800fe2e <__submore+0x1e>
 800fe5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fe5e:	0077      	lsls	r7, r6, #1
 800fe60:	463a      	mov	r2, r7
 800fe62:	f000 fa2d 	bl	80102c0 <_realloc_r>
 800fe66:	4605      	mov	r5, r0
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d0de      	beq.n	800fe2a <__submore+0x1a>
 800fe6c:	eb00 0806 	add.w	r8, r0, r6
 800fe70:	4601      	mov	r1, r0
 800fe72:	4632      	mov	r2, r6
 800fe74:	4640      	mov	r0, r8
 800fe76:	f7fe fc99 	bl	800e7ac <memcpy>
 800fe7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fe7e:	f8c4 8000 	str.w	r8, [r4]
 800fe82:	e7e9      	b.n	800fe58 <__submore+0x48>

0800fe84 <__ascii_wctomb>:
 800fe84:	b149      	cbz	r1, 800fe9a <__ascii_wctomb+0x16>
 800fe86:	2aff      	cmp	r2, #255	; 0xff
 800fe88:	bf85      	ittet	hi
 800fe8a:	238a      	movhi	r3, #138	; 0x8a
 800fe8c:	6003      	strhi	r3, [r0, #0]
 800fe8e:	700a      	strbls	r2, [r1, #0]
 800fe90:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe94:	bf98      	it	ls
 800fe96:	2001      	movls	r0, #1
 800fe98:	4770      	bx	lr
 800fe9a:	4608      	mov	r0, r1
 800fe9c:	4770      	bx	lr
	...

0800fea0 <__assert_func>:
 800fea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fea2:	4614      	mov	r4, r2
 800fea4:	461a      	mov	r2, r3
 800fea6:	4b09      	ldr	r3, [pc, #36]	; (800fecc <__assert_func+0x2c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4605      	mov	r5, r0
 800feac:	68d8      	ldr	r0, [r3, #12]
 800feae:	b14c      	cbz	r4, 800fec4 <__assert_func+0x24>
 800feb0:	4b07      	ldr	r3, [pc, #28]	; (800fed0 <__assert_func+0x30>)
 800feb2:	9100      	str	r1, [sp, #0]
 800feb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feb8:	4906      	ldr	r1, [pc, #24]	; (800fed4 <__assert_func+0x34>)
 800feba:	462b      	mov	r3, r5
 800febc:	f000 f9a6 	bl	801020c <fiprintf>
 800fec0:	f000 fc46 	bl	8010750 <abort>
 800fec4:	4b04      	ldr	r3, [pc, #16]	; (800fed8 <__assert_func+0x38>)
 800fec6:	461c      	mov	r4, r3
 800fec8:	e7f3      	b.n	800feb2 <__assert_func+0x12>
 800feca:	bf00      	nop
 800fecc:	20000014 	.word	0x20000014
 800fed0:	08012b58 	.word	0x08012b58
 800fed4:	08012b65 	.word	0x08012b65
 800fed8:	08012b93 	.word	0x08012b93

0800fedc <__sflush_r>:
 800fedc:	898a      	ldrh	r2, [r1, #12]
 800fede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee2:	4605      	mov	r5, r0
 800fee4:	0710      	lsls	r0, r2, #28
 800fee6:	460c      	mov	r4, r1
 800fee8:	d458      	bmi.n	800ff9c <__sflush_r+0xc0>
 800feea:	684b      	ldr	r3, [r1, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	dc05      	bgt.n	800fefc <__sflush_r+0x20>
 800fef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dc02      	bgt.n	800fefc <__sflush_r+0x20>
 800fef6:	2000      	movs	r0, #0
 800fef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fefe:	2e00      	cmp	r6, #0
 800ff00:	d0f9      	beq.n	800fef6 <__sflush_r+0x1a>
 800ff02:	2300      	movs	r3, #0
 800ff04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff08:	682f      	ldr	r7, [r5, #0]
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	d032      	beq.n	800ff74 <__sflush_r+0x98>
 800ff0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff10:	89a3      	ldrh	r3, [r4, #12]
 800ff12:	075a      	lsls	r2, r3, #29
 800ff14:	d505      	bpl.n	800ff22 <__sflush_r+0x46>
 800ff16:	6863      	ldr	r3, [r4, #4]
 800ff18:	1ac0      	subs	r0, r0, r3
 800ff1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff1c:	b10b      	cbz	r3, 800ff22 <__sflush_r+0x46>
 800ff1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff20:	1ac0      	subs	r0, r0, r3
 800ff22:	2300      	movs	r3, #0
 800ff24:	4602      	mov	r2, r0
 800ff26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff28:	6a21      	ldr	r1, [r4, #32]
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	47b0      	blx	r6
 800ff2e:	1c43      	adds	r3, r0, #1
 800ff30:	89a3      	ldrh	r3, [r4, #12]
 800ff32:	d106      	bne.n	800ff42 <__sflush_r+0x66>
 800ff34:	6829      	ldr	r1, [r5, #0]
 800ff36:	291d      	cmp	r1, #29
 800ff38:	d82c      	bhi.n	800ff94 <__sflush_r+0xb8>
 800ff3a:	4a2a      	ldr	r2, [pc, #168]	; (800ffe4 <__sflush_r+0x108>)
 800ff3c:	40ca      	lsrs	r2, r1
 800ff3e:	07d6      	lsls	r6, r2, #31
 800ff40:	d528      	bpl.n	800ff94 <__sflush_r+0xb8>
 800ff42:	2200      	movs	r2, #0
 800ff44:	6062      	str	r2, [r4, #4]
 800ff46:	04d9      	lsls	r1, r3, #19
 800ff48:	6922      	ldr	r2, [r4, #16]
 800ff4a:	6022      	str	r2, [r4, #0]
 800ff4c:	d504      	bpl.n	800ff58 <__sflush_r+0x7c>
 800ff4e:	1c42      	adds	r2, r0, #1
 800ff50:	d101      	bne.n	800ff56 <__sflush_r+0x7a>
 800ff52:	682b      	ldr	r3, [r5, #0]
 800ff54:	b903      	cbnz	r3, 800ff58 <__sflush_r+0x7c>
 800ff56:	6560      	str	r0, [r4, #84]	; 0x54
 800ff58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff5a:	602f      	str	r7, [r5, #0]
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	d0ca      	beq.n	800fef6 <__sflush_r+0x1a>
 800ff60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff64:	4299      	cmp	r1, r3
 800ff66:	d002      	beq.n	800ff6e <__sflush_r+0x92>
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f7ff f905 	bl	800f178 <_free_r>
 800ff6e:	2000      	movs	r0, #0
 800ff70:	6360      	str	r0, [r4, #52]	; 0x34
 800ff72:	e7c1      	b.n	800fef8 <__sflush_r+0x1c>
 800ff74:	6a21      	ldr	r1, [r4, #32]
 800ff76:	2301      	movs	r3, #1
 800ff78:	4628      	mov	r0, r5
 800ff7a:	47b0      	blx	r6
 800ff7c:	1c41      	adds	r1, r0, #1
 800ff7e:	d1c7      	bne.n	800ff10 <__sflush_r+0x34>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0c4      	beq.n	800ff10 <__sflush_r+0x34>
 800ff86:	2b1d      	cmp	r3, #29
 800ff88:	d001      	beq.n	800ff8e <__sflush_r+0xb2>
 800ff8a:	2b16      	cmp	r3, #22
 800ff8c:	d101      	bne.n	800ff92 <__sflush_r+0xb6>
 800ff8e:	602f      	str	r7, [r5, #0]
 800ff90:	e7b1      	b.n	800fef6 <__sflush_r+0x1a>
 800ff92:	89a3      	ldrh	r3, [r4, #12]
 800ff94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff98:	81a3      	strh	r3, [r4, #12]
 800ff9a:	e7ad      	b.n	800fef8 <__sflush_r+0x1c>
 800ff9c:	690f      	ldr	r7, [r1, #16]
 800ff9e:	2f00      	cmp	r7, #0
 800ffa0:	d0a9      	beq.n	800fef6 <__sflush_r+0x1a>
 800ffa2:	0793      	lsls	r3, r2, #30
 800ffa4:	680e      	ldr	r6, [r1, #0]
 800ffa6:	bf08      	it	eq
 800ffa8:	694b      	ldreq	r3, [r1, #20]
 800ffaa:	600f      	str	r7, [r1, #0]
 800ffac:	bf18      	it	ne
 800ffae:	2300      	movne	r3, #0
 800ffb0:	eba6 0807 	sub.w	r8, r6, r7
 800ffb4:	608b      	str	r3, [r1, #8]
 800ffb6:	f1b8 0f00 	cmp.w	r8, #0
 800ffba:	dd9c      	ble.n	800fef6 <__sflush_r+0x1a>
 800ffbc:	6a21      	ldr	r1, [r4, #32]
 800ffbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ffc0:	4643      	mov	r3, r8
 800ffc2:	463a      	mov	r2, r7
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	47b0      	blx	r6
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	dc06      	bgt.n	800ffda <__sflush_r+0xfe>
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffd2:	81a3      	strh	r3, [r4, #12]
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	e78e      	b.n	800fef8 <__sflush_r+0x1c>
 800ffda:	4407      	add	r7, r0
 800ffdc:	eba8 0800 	sub.w	r8, r8, r0
 800ffe0:	e7e9      	b.n	800ffb6 <__sflush_r+0xda>
 800ffe2:	bf00      	nop
 800ffe4:	20400001 	.word	0x20400001

0800ffe8 <_fflush_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	690b      	ldr	r3, [r1, #16]
 800ffec:	4605      	mov	r5, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	b913      	cbnz	r3, 800fff8 <_fflush_r+0x10>
 800fff2:	2500      	movs	r5, #0
 800fff4:	4628      	mov	r0, r5
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	b118      	cbz	r0, 8010002 <_fflush_r+0x1a>
 800fffa:	6983      	ldr	r3, [r0, #24]
 800fffc:	b90b      	cbnz	r3, 8010002 <_fflush_r+0x1a>
 800fffe:	f000 f887 	bl	8010110 <__sinit>
 8010002:	4b14      	ldr	r3, [pc, #80]	; (8010054 <_fflush_r+0x6c>)
 8010004:	429c      	cmp	r4, r3
 8010006:	d11b      	bne.n	8010040 <_fflush_r+0x58>
 8010008:	686c      	ldr	r4, [r5, #4]
 801000a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d0ef      	beq.n	800fff2 <_fflush_r+0xa>
 8010012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010014:	07d0      	lsls	r0, r2, #31
 8010016:	d404      	bmi.n	8010022 <_fflush_r+0x3a>
 8010018:	0599      	lsls	r1, r3, #22
 801001a:	d402      	bmi.n	8010022 <_fflush_r+0x3a>
 801001c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801001e:	f000 f927 	bl	8010270 <__retarget_lock_acquire_recursive>
 8010022:	4628      	mov	r0, r5
 8010024:	4621      	mov	r1, r4
 8010026:	f7ff ff59 	bl	800fedc <__sflush_r>
 801002a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801002c:	07da      	lsls	r2, r3, #31
 801002e:	4605      	mov	r5, r0
 8010030:	d4e0      	bmi.n	800fff4 <_fflush_r+0xc>
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	059b      	lsls	r3, r3, #22
 8010036:	d4dd      	bmi.n	800fff4 <_fflush_r+0xc>
 8010038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801003a:	f000 f91a 	bl	8010272 <__retarget_lock_release_recursive>
 801003e:	e7d9      	b.n	800fff4 <_fflush_r+0xc>
 8010040:	4b05      	ldr	r3, [pc, #20]	; (8010058 <_fflush_r+0x70>)
 8010042:	429c      	cmp	r4, r3
 8010044:	d101      	bne.n	801004a <_fflush_r+0x62>
 8010046:	68ac      	ldr	r4, [r5, #8]
 8010048:	e7df      	b.n	801000a <_fflush_r+0x22>
 801004a:	4b04      	ldr	r3, [pc, #16]	; (801005c <_fflush_r+0x74>)
 801004c:	429c      	cmp	r4, r3
 801004e:	bf08      	it	eq
 8010050:	68ec      	ldreq	r4, [r5, #12]
 8010052:	e7da      	b.n	801000a <_fflush_r+0x22>
 8010054:	08012bb4 	.word	0x08012bb4
 8010058:	08012bd4 	.word	0x08012bd4
 801005c:	08012b94 	.word	0x08012b94

08010060 <std>:
 8010060:	2300      	movs	r3, #0
 8010062:	b510      	push	{r4, lr}
 8010064:	4604      	mov	r4, r0
 8010066:	e9c0 3300 	strd	r3, r3, [r0]
 801006a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801006e:	6083      	str	r3, [r0, #8]
 8010070:	8181      	strh	r1, [r0, #12]
 8010072:	6643      	str	r3, [r0, #100]	; 0x64
 8010074:	81c2      	strh	r2, [r0, #14]
 8010076:	6183      	str	r3, [r0, #24]
 8010078:	4619      	mov	r1, r3
 801007a:	2208      	movs	r2, #8
 801007c:	305c      	adds	r0, #92	; 0x5c
 801007e:	f7fb fb73 	bl	800b768 <memset>
 8010082:	4b05      	ldr	r3, [pc, #20]	; (8010098 <std+0x38>)
 8010084:	6263      	str	r3, [r4, #36]	; 0x24
 8010086:	4b05      	ldr	r3, [pc, #20]	; (801009c <std+0x3c>)
 8010088:	62a3      	str	r3, [r4, #40]	; 0x28
 801008a:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <std+0x40>)
 801008c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801008e:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <std+0x44>)
 8010090:	6224      	str	r4, [r4, #32]
 8010092:	6323      	str	r3, [r4, #48]	; 0x30
 8010094:	bd10      	pop	{r4, pc}
 8010096:	bf00      	nop
 8010098:	0800c511 	.word	0x0800c511
 801009c:	0800c537 	.word	0x0800c537
 80100a0:	0800c56f 	.word	0x0800c56f
 80100a4:	0800c593 	.word	0x0800c593

080100a8 <_cleanup_r>:
 80100a8:	4901      	ldr	r1, [pc, #4]	; (80100b0 <_cleanup_r+0x8>)
 80100aa:	f000 b8c1 	b.w	8010230 <_fwalk_reent>
 80100ae:	bf00      	nop
 80100b0:	0800ffe9 	.word	0x0800ffe9

080100b4 <__sfmoreglue>:
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	2268      	movs	r2, #104	; 0x68
 80100b8:	1e4d      	subs	r5, r1, #1
 80100ba:	4355      	muls	r5, r2
 80100bc:	460e      	mov	r6, r1
 80100be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80100c2:	f7ff f8c5 	bl	800f250 <_malloc_r>
 80100c6:	4604      	mov	r4, r0
 80100c8:	b140      	cbz	r0, 80100dc <__sfmoreglue+0x28>
 80100ca:	2100      	movs	r1, #0
 80100cc:	e9c0 1600 	strd	r1, r6, [r0]
 80100d0:	300c      	adds	r0, #12
 80100d2:	60a0      	str	r0, [r4, #8]
 80100d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100d8:	f7fb fb46 	bl	800b768 <memset>
 80100dc:	4620      	mov	r0, r4
 80100de:	bd70      	pop	{r4, r5, r6, pc}

080100e0 <__sfp_lock_acquire>:
 80100e0:	4801      	ldr	r0, [pc, #4]	; (80100e8 <__sfp_lock_acquire+0x8>)
 80100e2:	f000 b8c5 	b.w	8010270 <__retarget_lock_acquire_recursive>
 80100e6:	bf00      	nop
 80100e8:	20001231 	.word	0x20001231

080100ec <__sfp_lock_release>:
 80100ec:	4801      	ldr	r0, [pc, #4]	; (80100f4 <__sfp_lock_release+0x8>)
 80100ee:	f000 b8c0 	b.w	8010272 <__retarget_lock_release_recursive>
 80100f2:	bf00      	nop
 80100f4:	20001231 	.word	0x20001231

080100f8 <__sinit_lock_acquire>:
 80100f8:	4801      	ldr	r0, [pc, #4]	; (8010100 <__sinit_lock_acquire+0x8>)
 80100fa:	f000 b8b9 	b.w	8010270 <__retarget_lock_acquire_recursive>
 80100fe:	bf00      	nop
 8010100:	20001232 	.word	0x20001232

08010104 <__sinit_lock_release>:
 8010104:	4801      	ldr	r0, [pc, #4]	; (801010c <__sinit_lock_release+0x8>)
 8010106:	f000 b8b4 	b.w	8010272 <__retarget_lock_release_recursive>
 801010a:	bf00      	nop
 801010c:	20001232 	.word	0x20001232

08010110 <__sinit>:
 8010110:	b510      	push	{r4, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	f7ff fff0 	bl	80100f8 <__sinit_lock_acquire>
 8010118:	69a3      	ldr	r3, [r4, #24]
 801011a:	b11b      	cbz	r3, 8010124 <__sinit+0x14>
 801011c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010120:	f7ff bff0 	b.w	8010104 <__sinit_lock_release>
 8010124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010128:	6523      	str	r3, [r4, #80]	; 0x50
 801012a:	4b13      	ldr	r3, [pc, #76]	; (8010178 <__sinit+0x68>)
 801012c:	4a13      	ldr	r2, [pc, #76]	; (801017c <__sinit+0x6c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	62a2      	str	r2, [r4, #40]	; 0x28
 8010132:	42a3      	cmp	r3, r4
 8010134:	bf04      	itt	eq
 8010136:	2301      	moveq	r3, #1
 8010138:	61a3      	streq	r3, [r4, #24]
 801013a:	4620      	mov	r0, r4
 801013c:	f000 f820 	bl	8010180 <__sfp>
 8010140:	6060      	str	r0, [r4, #4]
 8010142:	4620      	mov	r0, r4
 8010144:	f000 f81c 	bl	8010180 <__sfp>
 8010148:	60a0      	str	r0, [r4, #8]
 801014a:	4620      	mov	r0, r4
 801014c:	f000 f818 	bl	8010180 <__sfp>
 8010150:	2200      	movs	r2, #0
 8010152:	60e0      	str	r0, [r4, #12]
 8010154:	2104      	movs	r1, #4
 8010156:	6860      	ldr	r0, [r4, #4]
 8010158:	f7ff ff82 	bl	8010060 <std>
 801015c:	68a0      	ldr	r0, [r4, #8]
 801015e:	2201      	movs	r2, #1
 8010160:	2109      	movs	r1, #9
 8010162:	f7ff ff7d 	bl	8010060 <std>
 8010166:	68e0      	ldr	r0, [r4, #12]
 8010168:	2202      	movs	r2, #2
 801016a:	2112      	movs	r1, #18
 801016c:	f7ff ff78 	bl	8010060 <std>
 8010170:	2301      	movs	r3, #1
 8010172:	61a3      	str	r3, [r4, #24]
 8010174:	e7d2      	b.n	801011c <__sinit+0xc>
 8010176:	bf00      	nop
 8010178:	08012738 	.word	0x08012738
 801017c:	080100a9 	.word	0x080100a9

08010180 <__sfp>:
 8010180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010182:	4607      	mov	r7, r0
 8010184:	f7ff ffac 	bl	80100e0 <__sfp_lock_acquire>
 8010188:	4b1e      	ldr	r3, [pc, #120]	; (8010204 <__sfp+0x84>)
 801018a:	681e      	ldr	r6, [r3, #0]
 801018c:	69b3      	ldr	r3, [r6, #24]
 801018e:	b913      	cbnz	r3, 8010196 <__sfp+0x16>
 8010190:	4630      	mov	r0, r6
 8010192:	f7ff ffbd 	bl	8010110 <__sinit>
 8010196:	3648      	adds	r6, #72	; 0x48
 8010198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801019c:	3b01      	subs	r3, #1
 801019e:	d503      	bpl.n	80101a8 <__sfp+0x28>
 80101a0:	6833      	ldr	r3, [r6, #0]
 80101a2:	b30b      	cbz	r3, 80101e8 <__sfp+0x68>
 80101a4:	6836      	ldr	r6, [r6, #0]
 80101a6:	e7f7      	b.n	8010198 <__sfp+0x18>
 80101a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101ac:	b9d5      	cbnz	r5, 80101e4 <__sfp+0x64>
 80101ae:	4b16      	ldr	r3, [pc, #88]	; (8010208 <__sfp+0x88>)
 80101b0:	60e3      	str	r3, [r4, #12]
 80101b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101b6:	6665      	str	r5, [r4, #100]	; 0x64
 80101b8:	f000 f859 	bl	801026e <__retarget_lock_init_recursive>
 80101bc:	f7ff ff96 	bl	80100ec <__sfp_lock_release>
 80101c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80101c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80101c8:	6025      	str	r5, [r4, #0]
 80101ca:	61a5      	str	r5, [r4, #24]
 80101cc:	2208      	movs	r2, #8
 80101ce:	4629      	mov	r1, r5
 80101d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80101d4:	f7fb fac8 	bl	800b768 <memset>
 80101d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101e0:	4620      	mov	r0, r4
 80101e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101e4:	3468      	adds	r4, #104	; 0x68
 80101e6:	e7d9      	b.n	801019c <__sfp+0x1c>
 80101e8:	2104      	movs	r1, #4
 80101ea:	4638      	mov	r0, r7
 80101ec:	f7ff ff62 	bl	80100b4 <__sfmoreglue>
 80101f0:	4604      	mov	r4, r0
 80101f2:	6030      	str	r0, [r6, #0]
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d1d5      	bne.n	80101a4 <__sfp+0x24>
 80101f8:	f7ff ff78 	bl	80100ec <__sfp_lock_release>
 80101fc:	230c      	movs	r3, #12
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	e7ee      	b.n	80101e0 <__sfp+0x60>
 8010202:	bf00      	nop
 8010204:	08012738 	.word	0x08012738
 8010208:	ffff0001 	.word	0xffff0001

0801020c <fiprintf>:
 801020c:	b40e      	push	{r1, r2, r3}
 801020e:	b503      	push	{r0, r1, lr}
 8010210:	4601      	mov	r1, r0
 8010212:	ab03      	add	r3, sp, #12
 8010214:	4805      	ldr	r0, [pc, #20]	; (801022c <fiprintf+0x20>)
 8010216:	f853 2b04 	ldr.w	r2, [r3], #4
 801021a:	6800      	ldr	r0, [r0, #0]
 801021c:	9301      	str	r3, [sp, #4]
 801021e:	f000 f8a7 	bl	8010370 <_vfiprintf_r>
 8010222:	b002      	add	sp, #8
 8010224:	f85d eb04 	ldr.w	lr, [sp], #4
 8010228:	b003      	add	sp, #12
 801022a:	4770      	bx	lr
 801022c:	20000014 	.word	0x20000014

08010230 <_fwalk_reent>:
 8010230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010234:	4606      	mov	r6, r0
 8010236:	4688      	mov	r8, r1
 8010238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801023c:	2700      	movs	r7, #0
 801023e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010242:	f1b9 0901 	subs.w	r9, r9, #1
 8010246:	d505      	bpl.n	8010254 <_fwalk_reent+0x24>
 8010248:	6824      	ldr	r4, [r4, #0]
 801024a:	2c00      	cmp	r4, #0
 801024c:	d1f7      	bne.n	801023e <_fwalk_reent+0xe>
 801024e:	4638      	mov	r0, r7
 8010250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010254:	89ab      	ldrh	r3, [r5, #12]
 8010256:	2b01      	cmp	r3, #1
 8010258:	d907      	bls.n	801026a <_fwalk_reent+0x3a>
 801025a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801025e:	3301      	adds	r3, #1
 8010260:	d003      	beq.n	801026a <_fwalk_reent+0x3a>
 8010262:	4629      	mov	r1, r5
 8010264:	4630      	mov	r0, r6
 8010266:	47c0      	blx	r8
 8010268:	4307      	orrs	r7, r0
 801026a:	3568      	adds	r5, #104	; 0x68
 801026c:	e7e9      	b.n	8010242 <_fwalk_reent+0x12>

0801026e <__retarget_lock_init_recursive>:
 801026e:	4770      	bx	lr

08010270 <__retarget_lock_acquire_recursive>:
 8010270:	4770      	bx	lr

08010272 <__retarget_lock_release_recursive>:
 8010272:	4770      	bx	lr

08010274 <memmove>:
 8010274:	4288      	cmp	r0, r1
 8010276:	b510      	push	{r4, lr}
 8010278:	eb01 0402 	add.w	r4, r1, r2
 801027c:	d902      	bls.n	8010284 <memmove+0x10>
 801027e:	4284      	cmp	r4, r0
 8010280:	4623      	mov	r3, r4
 8010282:	d807      	bhi.n	8010294 <memmove+0x20>
 8010284:	1e43      	subs	r3, r0, #1
 8010286:	42a1      	cmp	r1, r4
 8010288:	d008      	beq.n	801029c <memmove+0x28>
 801028a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801028e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010292:	e7f8      	b.n	8010286 <memmove+0x12>
 8010294:	4402      	add	r2, r0
 8010296:	4601      	mov	r1, r0
 8010298:	428a      	cmp	r2, r1
 801029a:	d100      	bne.n	801029e <memmove+0x2a>
 801029c:	bd10      	pop	{r4, pc}
 801029e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102a6:	e7f7      	b.n	8010298 <memmove+0x24>

080102a8 <__malloc_lock>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__malloc_lock+0x8>)
 80102aa:	f7ff bfe1 	b.w	8010270 <__retarget_lock_acquire_recursive>
 80102ae:	bf00      	nop
 80102b0:	20001230 	.word	0x20001230

080102b4 <__malloc_unlock>:
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__malloc_unlock+0x8>)
 80102b6:	f7ff bfdc 	b.w	8010272 <__retarget_lock_release_recursive>
 80102ba:	bf00      	nop
 80102bc:	20001230 	.word	0x20001230

080102c0 <_realloc_r>:
 80102c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c4:	4680      	mov	r8, r0
 80102c6:	4614      	mov	r4, r2
 80102c8:	460e      	mov	r6, r1
 80102ca:	b921      	cbnz	r1, 80102d6 <_realloc_r+0x16>
 80102cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d0:	4611      	mov	r1, r2
 80102d2:	f7fe bfbd 	b.w	800f250 <_malloc_r>
 80102d6:	b92a      	cbnz	r2, 80102e4 <_realloc_r+0x24>
 80102d8:	f7fe ff4e 	bl	800f178 <_free_r>
 80102dc:	4625      	mov	r5, r4
 80102de:	4628      	mov	r0, r5
 80102e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e4:	f000 faa0 	bl	8010828 <_malloc_usable_size_r>
 80102e8:	4284      	cmp	r4, r0
 80102ea:	4607      	mov	r7, r0
 80102ec:	d802      	bhi.n	80102f4 <_realloc_r+0x34>
 80102ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102f2:	d812      	bhi.n	801031a <_realloc_r+0x5a>
 80102f4:	4621      	mov	r1, r4
 80102f6:	4640      	mov	r0, r8
 80102f8:	f7fe ffaa 	bl	800f250 <_malloc_r>
 80102fc:	4605      	mov	r5, r0
 80102fe:	2800      	cmp	r0, #0
 8010300:	d0ed      	beq.n	80102de <_realloc_r+0x1e>
 8010302:	42bc      	cmp	r4, r7
 8010304:	4622      	mov	r2, r4
 8010306:	4631      	mov	r1, r6
 8010308:	bf28      	it	cs
 801030a:	463a      	movcs	r2, r7
 801030c:	f7fe fa4e 	bl	800e7ac <memcpy>
 8010310:	4631      	mov	r1, r6
 8010312:	4640      	mov	r0, r8
 8010314:	f7fe ff30 	bl	800f178 <_free_r>
 8010318:	e7e1      	b.n	80102de <_realloc_r+0x1e>
 801031a:	4635      	mov	r5, r6
 801031c:	e7df      	b.n	80102de <_realloc_r+0x1e>

0801031e <__sfputc_r>:
 801031e:	6893      	ldr	r3, [r2, #8]
 8010320:	3b01      	subs	r3, #1
 8010322:	2b00      	cmp	r3, #0
 8010324:	b410      	push	{r4}
 8010326:	6093      	str	r3, [r2, #8]
 8010328:	da08      	bge.n	801033c <__sfputc_r+0x1e>
 801032a:	6994      	ldr	r4, [r2, #24]
 801032c:	42a3      	cmp	r3, r4
 801032e:	db01      	blt.n	8010334 <__sfputc_r+0x16>
 8010330:	290a      	cmp	r1, #10
 8010332:	d103      	bne.n	801033c <__sfputc_r+0x1e>
 8010334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010338:	f000 b94a 	b.w	80105d0 <__swbuf_r>
 801033c:	6813      	ldr	r3, [r2, #0]
 801033e:	1c58      	adds	r0, r3, #1
 8010340:	6010      	str	r0, [r2, #0]
 8010342:	7019      	strb	r1, [r3, #0]
 8010344:	4608      	mov	r0, r1
 8010346:	f85d 4b04 	ldr.w	r4, [sp], #4
 801034a:	4770      	bx	lr

0801034c <__sfputs_r>:
 801034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034e:	4606      	mov	r6, r0
 8010350:	460f      	mov	r7, r1
 8010352:	4614      	mov	r4, r2
 8010354:	18d5      	adds	r5, r2, r3
 8010356:	42ac      	cmp	r4, r5
 8010358:	d101      	bne.n	801035e <__sfputs_r+0x12>
 801035a:	2000      	movs	r0, #0
 801035c:	e007      	b.n	801036e <__sfputs_r+0x22>
 801035e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010362:	463a      	mov	r2, r7
 8010364:	4630      	mov	r0, r6
 8010366:	f7ff ffda 	bl	801031e <__sfputc_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d1f3      	bne.n	8010356 <__sfputs_r+0xa>
 801036e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010370 <_vfiprintf_r>:
 8010370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	460d      	mov	r5, r1
 8010376:	b09d      	sub	sp, #116	; 0x74
 8010378:	4614      	mov	r4, r2
 801037a:	4698      	mov	r8, r3
 801037c:	4606      	mov	r6, r0
 801037e:	b118      	cbz	r0, 8010388 <_vfiprintf_r+0x18>
 8010380:	6983      	ldr	r3, [r0, #24]
 8010382:	b90b      	cbnz	r3, 8010388 <_vfiprintf_r+0x18>
 8010384:	f7ff fec4 	bl	8010110 <__sinit>
 8010388:	4b89      	ldr	r3, [pc, #548]	; (80105b0 <_vfiprintf_r+0x240>)
 801038a:	429d      	cmp	r5, r3
 801038c:	d11b      	bne.n	80103c6 <_vfiprintf_r+0x56>
 801038e:	6875      	ldr	r5, [r6, #4]
 8010390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010392:	07d9      	lsls	r1, r3, #31
 8010394:	d405      	bmi.n	80103a2 <_vfiprintf_r+0x32>
 8010396:	89ab      	ldrh	r3, [r5, #12]
 8010398:	059a      	lsls	r2, r3, #22
 801039a:	d402      	bmi.n	80103a2 <_vfiprintf_r+0x32>
 801039c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801039e:	f7ff ff67 	bl	8010270 <__retarget_lock_acquire_recursive>
 80103a2:	89ab      	ldrh	r3, [r5, #12]
 80103a4:	071b      	lsls	r3, r3, #28
 80103a6:	d501      	bpl.n	80103ac <_vfiprintf_r+0x3c>
 80103a8:	692b      	ldr	r3, [r5, #16]
 80103aa:	b9eb      	cbnz	r3, 80103e8 <_vfiprintf_r+0x78>
 80103ac:	4629      	mov	r1, r5
 80103ae:	4630      	mov	r0, r6
 80103b0:	f000 f960 	bl	8010674 <__swsetup_r>
 80103b4:	b1c0      	cbz	r0, 80103e8 <_vfiprintf_r+0x78>
 80103b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103b8:	07dc      	lsls	r4, r3, #31
 80103ba:	d50e      	bpl.n	80103da <_vfiprintf_r+0x6a>
 80103bc:	f04f 30ff 	mov.w	r0, #4294967295
 80103c0:	b01d      	add	sp, #116	; 0x74
 80103c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c6:	4b7b      	ldr	r3, [pc, #492]	; (80105b4 <_vfiprintf_r+0x244>)
 80103c8:	429d      	cmp	r5, r3
 80103ca:	d101      	bne.n	80103d0 <_vfiprintf_r+0x60>
 80103cc:	68b5      	ldr	r5, [r6, #8]
 80103ce:	e7df      	b.n	8010390 <_vfiprintf_r+0x20>
 80103d0:	4b79      	ldr	r3, [pc, #484]	; (80105b8 <_vfiprintf_r+0x248>)
 80103d2:	429d      	cmp	r5, r3
 80103d4:	bf08      	it	eq
 80103d6:	68f5      	ldreq	r5, [r6, #12]
 80103d8:	e7da      	b.n	8010390 <_vfiprintf_r+0x20>
 80103da:	89ab      	ldrh	r3, [r5, #12]
 80103dc:	0598      	lsls	r0, r3, #22
 80103de:	d4ed      	bmi.n	80103bc <_vfiprintf_r+0x4c>
 80103e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103e2:	f7ff ff46 	bl	8010272 <__retarget_lock_release_recursive>
 80103e6:	e7e9      	b.n	80103bc <_vfiprintf_r+0x4c>
 80103e8:	2300      	movs	r3, #0
 80103ea:	9309      	str	r3, [sp, #36]	; 0x24
 80103ec:	2320      	movs	r3, #32
 80103ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80103f6:	2330      	movs	r3, #48	; 0x30
 80103f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105bc <_vfiprintf_r+0x24c>
 80103fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010400:	f04f 0901 	mov.w	r9, #1
 8010404:	4623      	mov	r3, r4
 8010406:	469a      	mov	sl, r3
 8010408:	f813 2b01 	ldrb.w	r2, [r3], #1
 801040c:	b10a      	cbz	r2, 8010412 <_vfiprintf_r+0xa2>
 801040e:	2a25      	cmp	r2, #37	; 0x25
 8010410:	d1f9      	bne.n	8010406 <_vfiprintf_r+0x96>
 8010412:	ebba 0b04 	subs.w	fp, sl, r4
 8010416:	d00b      	beq.n	8010430 <_vfiprintf_r+0xc0>
 8010418:	465b      	mov	r3, fp
 801041a:	4622      	mov	r2, r4
 801041c:	4629      	mov	r1, r5
 801041e:	4630      	mov	r0, r6
 8010420:	f7ff ff94 	bl	801034c <__sfputs_r>
 8010424:	3001      	adds	r0, #1
 8010426:	f000 80aa 	beq.w	801057e <_vfiprintf_r+0x20e>
 801042a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801042c:	445a      	add	r2, fp
 801042e:	9209      	str	r2, [sp, #36]	; 0x24
 8010430:	f89a 3000 	ldrb.w	r3, [sl]
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 80a2 	beq.w	801057e <_vfiprintf_r+0x20e>
 801043a:	2300      	movs	r3, #0
 801043c:	f04f 32ff 	mov.w	r2, #4294967295
 8010440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010444:	f10a 0a01 	add.w	sl, sl, #1
 8010448:	9304      	str	r3, [sp, #16]
 801044a:	9307      	str	r3, [sp, #28]
 801044c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010450:	931a      	str	r3, [sp, #104]	; 0x68
 8010452:	4654      	mov	r4, sl
 8010454:	2205      	movs	r2, #5
 8010456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801045a:	4858      	ldr	r0, [pc, #352]	; (80105bc <_vfiprintf_r+0x24c>)
 801045c:	f7ef fef0 	bl	8000240 <memchr>
 8010460:	9a04      	ldr	r2, [sp, #16]
 8010462:	b9d8      	cbnz	r0, 801049c <_vfiprintf_r+0x12c>
 8010464:	06d1      	lsls	r1, r2, #27
 8010466:	bf44      	itt	mi
 8010468:	2320      	movmi	r3, #32
 801046a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801046e:	0713      	lsls	r3, r2, #28
 8010470:	bf44      	itt	mi
 8010472:	232b      	movmi	r3, #43	; 0x2b
 8010474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010478:	f89a 3000 	ldrb.w	r3, [sl]
 801047c:	2b2a      	cmp	r3, #42	; 0x2a
 801047e:	d015      	beq.n	80104ac <_vfiprintf_r+0x13c>
 8010480:	9a07      	ldr	r2, [sp, #28]
 8010482:	4654      	mov	r4, sl
 8010484:	2000      	movs	r0, #0
 8010486:	f04f 0c0a 	mov.w	ip, #10
 801048a:	4621      	mov	r1, r4
 801048c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010490:	3b30      	subs	r3, #48	; 0x30
 8010492:	2b09      	cmp	r3, #9
 8010494:	d94e      	bls.n	8010534 <_vfiprintf_r+0x1c4>
 8010496:	b1b0      	cbz	r0, 80104c6 <_vfiprintf_r+0x156>
 8010498:	9207      	str	r2, [sp, #28]
 801049a:	e014      	b.n	80104c6 <_vfiprintf_r+0x156>
 801049c:	eba0 0308 	sub.w	r3, r0, r8
 80104a0:	fa09 f303 	lsl.w	r3, r9, r3
 80104a4:	4313      	orrs	r3, r2
 80104a6:	9304      	str	r3, [sp, #16]
 80104a8:	46a2      	mov	sl, r4
 80104aa:	e7d2      	b.n	8010452 <_vfiprintf_r+0xe2>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	1d19      	adds	r1, r3, #4
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	9103      	str	r1, [sp, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	bfbb      	ittet	lt
 80104b8:	425b      	neglt	r3, r3
 80104ba:	f042 0202 	orrlt.w	r2, r2, #2
 80104be:	9307      	strge	r3, [sp, #28]
 80104c0:	9307      	strlt	r3, [sp, #28]
 80104c2:	bfb8      	it	lt
 80104c4:	9204      	strlt	r2, [sp, #16]
 80104c6:	7823      	ldrb	r3, [r4, #0]
 80104c8:	2b2e      	cmp	r3, #46	; 0x2e
 80104ca:	d10c      	bne.n	80104e6 <_vfiprintf_r+0x176>
 80104cc:	7863      	ldrb	r3, [r4, #1]
 80104ce:	2b2a      	cmp	r3, #42	; 0x2a
 80104d0:	d135      	bne.n	801053e <_vfiprintf_r+0x1ce>
 80104d2:	9b03      	ldr	r3, [sp, #12]
 80104d4:	1d1a      	adds	r2, r3, #4
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	9203      	str	r2, [sp, #12]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	bfb8      	it	lt
 80104de:	f04f 33ff 	movlt.w	r3, #4294967295
 80104e2:	3402      	adds	r4, #2
 80104e4:	9305      	str	r3, [sp, #20]
 80104e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105cc <_vfiprintf_r+0x25c>
 80104ea:	7821      	ldrb	r1, [r4, #0]
 80104ec:	2203      	movs	r2, #3
 80104ee:	4650      	mov	r0, sl
 80104f0:	f7ef fea6 	bl	8000240 <memchr>
 80104f4:	b140      	cbz	r0, 8010508 <_vfiprintf_r+0x198>
 80104f6:	2340      	movs	r3, #64	; 0x40
 80104f8:	eba0 000a 	sub.w	r0, r0, sl
 80104fc:	fa03 f000 	lsl.w	r0, r3, r0
 8010500:	9b04      	ldr	r3, [sp, #16]
 8010502:	4303      	orrs	r3, r0
 8010504:	3401      	adds	r4, #1
 8010506:	9304      	str	r3, [sp, #16]
 8010508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050c:	482c      	ldr	r0, [pc, #176]	; (80105c0 <_vfiprintf_r+0x250>)
 801050e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010512:	2206      	movs	r2, #6
 8010514:	f7ef fe94 	bl	8000240 <memchr>
 8010518:	2800      	cmp	r0, #0
 801051a:	d03f      	beq.n	801059c <_vfiprintf_r+0x22c>
 801051c:	4b29      	ldr	r3, [pc, #164]	; (80105c4 <_vfiprintf_r+0x254>)
 801051e:	bb1b      	cbnz	r3, 8010568 <_vfiprintf_r+0x1f8>
 8010520:	9b03      	ldr	r3, [sp, #12]
 8010522:	3307      	adds	r3, #7
 8010524:	f023 0307 	bic.w	r3, r3, #7
 8010528:	3308      	adds	r3, #8
 801052a:	9303      	str	r3, [sp, #12]
 801052c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801052e:	443b      	add	r3, r7
 8010530:	9309      	str	r3, [sp, #36]	; 0x24
 8010532:	e767      	b.n	8010404 <_vfiprintf_r+0x94>
 8010534:	fb0c 3202 	mla	r2, ip, r2, r3
 8010538:	460c      	mov	r4, r1
 801053a:	2001      	movs	r0, #1
 801053c:	e7a5      	b.n	801048a <_vfiprintf_r+0x11a>
 801053e:	2300      	movs	r3, #0
 8010540:	3401      	adds	r4, #1
 8010542:	9305      	str	r3, [sp, #20]
 8010544:	4619      	mov	r1, r3
 8010546:	f04f 0c0a 	mov.w	ip, #10
 801054a:	4620      	mov	r0, r4
 801054c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010550:	3a30      	subs	r2, #48	; 0x30
 8010552:	2a09      	cmp	r2, #9
 8010554:	d903      	bls.n	801055e <_vfiprintf_r+0x1ee>
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0c5      	beq.n	80104e6 <_vfiprintf_r+0x176>
 801055a:	9105      	str	r1, [sp, #20]
 801055c:	e7c3      	b.n	80104e6 <_vfiprintf_r+0x176>
 801055e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010562:	4604      	mov	r4, r0
 8010564:	2301      	movs	r3, #1
 8010566:	e7f0      	b.n	801054a <_vfiprintf_r+0x1da>
 8010568:	ab03      	add	r3, sp, #12
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	462a      	mov	r2, r5
 801056e:	4b16      	ldr	r3, [pc, #88]	; (80105c8 <_vfiprintf_r+0x258>)
 8010570:	a904      	add	r1, sp, #16
 8010572:	4630      	mov	r0, r6
 8010574:	f7fb f9a0 	bl	800b8b8 <_printf_float>
 8010578:	4607      	mov	r7, r0
 801057a:	1c78      	adds	r0, r7, #1
 801057c:	d1d6      	bne.n	801052c <_vfiprintf_r+0x1bc>
 801057e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010580:	07d9      	lsls	r1, r3, #31
 8010582:	d405      	bmi.n	8010590 <_vfiprintf_r+0x220>
 8010584:	89ab      	ldrh	r3, [r5, #12]
 8010586:	059a      	lsls	r2, r3, #22
 8010588:	d402      	bmi.n	8010590 <_vfiprintf_r+0x220>
 801058a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801058c:	f7ff fe71 	bl	8010272 <__retarget_lock_release_recursive>
 8010590:	89ab      	ldrh	r3, [r5, #12]
 8010592:	065b      	lsls	r3, r3, #25
 8010594:	f53f af12 	bmi.w	80103bc <_vfiprintf_r+0x4c>
 8010598:	9809      	ldr	r0, [sp, #36]	; 0x24
 801059a:	e711      	b.n	80103c0 <_vfiprintf_r+0x50>
 801059c:	ab03      	add	r3, sp, #12
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	462a      	mov	r2, r5
 80105a2:	4b09      	ldr	r3, [pc, #36]	; (80105c8 <_vfiprintf_r+0x258>)
 80105a4:	a904      	add	r1, sp, #16
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7fb fc2a 	bl	800be00 <_printf_i>
 80105ac:	e7e4      	b.n	8010578 <_vfiprintf_r+0x208>
 80105ae:	bf00      	nop
 80105b0:	08012bb4 	.word	0x08012bb4
 80105b4:	08012bd4 	.word	0x08012bd4
 80105b8:	08012b94 	.word	0x08012b94
 80105bc:	08012b2c 	.word	0x08012b2c
 80105c0:	08012b36 	.word	0x08012b36
 80105c4:	0800b8b9 	.word	0x0800b8b9
 80105c8:	0801034d 	.word	0x0801034d
 80105cc:	08012b32 	.word	0x08012b32

080105d0 <__swbuf_r>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	460e      	mov	r6, r1
 80105d4:	4614      	mov	r4, r2
 80105d6:	4605      	mov	r5, r0
 80105d8:	b118      	cbz	r0, 80105e2 <__swbuf_r+0x12>
 80105da:	6983      	ldr	r3, [r0, #24]
 80105dc:	b90b      	cbnz	r3, 80105e2 <__swbuf_r+0x12>
 80105de:	f7ff fd97 	bl	8010110 <__sinit>
 80105e2:	4b21      	ldr	r3, [pc, #132]	; (8010668 <__swbuf_r+0x98>)
 80105e4:	429c      	cmp	r4, r3
 80105e6:	d12b      	bne.n	8010640 <__swbuf_r+0x70>
 80105e8:	686c      	ldr	r4, [r5, #4]
 80105ea:	69a3      	ldr	r3, [r4, #24]
 80105ec:	60a3      	str	r3, [r4, #8]
 80105ee:	89a3      	ldrh	r3, [r4, #12]
 80105f0:	071a      	lsls	r2, r3, #28
 80105f2:	d52f      	bpl.n	8010654 <__swbuf_r+0x84>
 80105f4:	6923      	ldr	r3, [r4, #16]
 80105f6:	b36b      	cbz	r3, 8010654 <__swbuf_r+0x84>
 80105f8:	6923      	ldr	r3, [r4, #16]
 80105fa:	6820      	ldr	r0, [r4, #0]
 80105fc:	1ac0      	subs	r0, r0, r3
 80105fe:	6963      	ldr	r3, [r4, #20]
 8010600:	b2f6      	uxtb	r6, r6
 8010602:	4283      	cmp	r3, r0
 8010604:	4637      	mov	r7, r6
 8010606:	dc04      	bgt.n	8010612 <__swbuf_r+0x42>
 8010608:	4621      	mov	r1, r4
 801060a:	4628      	mov	r0, r5
 801060c:	f7ff fcec 	bl	800ffe8 <_fflush_r>
 8010610:	bb30      	cbnz	r0, 8010660 <__swbuf_r+0x90>
 8010612:	68a3      	ldr	r3, [r4, #8]
 8010614:	3b01      	subs	r3, #1
 8010616:	60a3      	str	r3, [r4, #8]
 8010618:	6823      	ldr	r3, [r4, #0]
 801061a:	1c5a      	adds	r2, r3, #1
 801061c:	6022      	str	r2, [r4, #0]
 801061e:	701e      	strb	r6, [r3, #0]
 8010620:	6963      	ldr	r3, [r4, #20]
 8010622:	3001      	adds	r0, #1
 8010624:	4283      	cmp	r3, r0
 8010626:	d004      	beq.n	8010632 <__swbuf_r+0x62>
 8010628:	89a3      	ldrh	r3, [r4, #12]
 801062a:	07db      	lsls	r3, r3, #31
 801062c:	d506      	bpl.n	801063c <__swbuf_r+0x6c>
 801062e:	2e0a      	cmp	r6, #10
 8010630:	d104      	bne.n	801063c <__swbuf_r+0x6c>
 8010632:	4621      	mov	r1, r4
 8010634:	4628      	mov	r0, r5
 8010636:	f7ff fcd7 	bl	800ffe8 <_fflush_r>
 801063a:	b988      	cbnz	r0, 8010660 <__swbuf_r+0x90>
 801063c:	4638      	mov	r0, r7
 801063e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010640:	4b0a      	ldr	r3, [pc, #40]	; (801066c <__swbuf_r+0x9c>)
 8010642:	429c      	cmp	r4, r3
 8010644:	d101      	bne.n	801064a <__swbuf_r+0x7a>
 8010646:	68ac      	ldr	r4, [r5, #8]
 8010648:	e7cf      	b.n	80105ea <__swbuf_r+0x1a>
 801064a:	4b09      	ldr	r3, [pc, #36]	; (8010670 <__swbuf_r+0xa0>)
 801064c:	429c      	cmp	r4, r3
 801064e:	bf08      	it	eq
 8010650:	68ec      	ldreq	r4, [r5, #12]
 8010652:	e7ca      	b.n	80105ea <__swbuf_r+0x1a>
 8010654:	4621      	mov	r1, r4
 8010656:	4628      	mov	r0, r5
 8010658:	f000 f80c 	bl	8010674 <__swsetup_r>
 801065c:	2800      	cmp	r0, #0
 801065e:	d0cb      	beq.n	80105f8 <__swbuf_r+0x28>
 8010660:	f04f 37ff 	mov.w	r7, #4294967295
 8010664:	e7ea      	b.n	801063c <__swbuf_r+0x6c>
 8010666:	bf00      	nop
 8010668:	08012bb4 	.word	0x08012bb4
 801066c:	08012bd4 	.word	0x08012bd4
 8010670:	08012b94 	.word	0x08012b94

08010674 <__swsetup_r>:
 8010674:	4b32      	ldr	r3, [pc, #200]	; (8010740 <__swsetup_r+0xcc>)
 8010676:	b570      	push	{r4, r5, r6, lr}
 8010678:	681d      	ldr	r5, [r3, #0]
 801067a:	4606      	mov	r6, r0
 801067c:	460c      	mov	r4, r1
 801067e:	b125      	cbz	r5, 801068a <__swsetup_r+0x16>
 8010680:	69ab      	ldr	r3, [r5, #24]
 8010682:	b913      	cbnz	r3, 801068a <__swsetup_r+0x16>
 8010684:	4628      	mov	r0, r5
 8010686:	f7ff fd43 	bl	8010110 <__sinit>
 801068a:	4b2e      	ldr	r3, [pc, #184]	; (8010744 <__swsetup_r+0xd0>)
 801068c:	429c      	cmp	r4, r3
 801068e:	d10f      	bne.n	80106b0 <__swsetup_r+0x3c>
 8010690:	686c      	ldr	r4, [r5, #4]
 8010692:	89a3      	ldrh	r3, [r4, #12]
 8010694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010698:	0719      	lsls	r1, r3, #28
 801069a:	d42c      	bmi.n	80106f6 <__swsetup_r+0x82>
 801069c:	06dd      	lsls	r5, r3, #27
 801069e:	d411      	bmi.n	80106c4 <__swsetup_r+0x50>
 80106a0:	2309      	movs	r3, #9
 80106a2:	6033      	str	r3, [r6, #0]
 80106a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106a8:	81a3      	strh	r3, [r4, #12]
 80106aa:	f04f 30ff 	mov.w	r0, #4294967295
 80106ae:	e03e      	b.n	801072e <__swsetup_r+0xba>
 80106b0:	4b25      	ldr	r3, [pc, #148]	; (8010748 <__swsetup_r+0xd4>)
 80106b2:	429c      	cmp	r4, r3
 80106b4:	d101      	bne.n	80106ba <__swsetup_r+0x46>
 80106b6:	68ac      	ldr	r4, [r5, #8]
 80106b8:	e7eb      	b.n	8010692 <__swsetup_r+0x1e>
 80106ba:	4b24      	ldr	r3, [pc, #144]	; (801074c <__swsetup_r+0xd8>)
 80106bc:	429c      	cmp	r4, r3
 80106be:	bf08      	it	eq
 80106c0:	68ec      	ldreq	r4, [r5, #12]
 80106c2:	e7e6      	b.n	8010692 <__swsetup_r+0x1e>
 80106c4:	0758      	lsls	r0, r3, #29
 80106c6:	d512      	bpl.n	80106ee <__swsetup_r+0x7a>
 80106c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106ca:	b141      	cbz	r1, 80106de <__swsetup_r+0x6a>
 80106cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106d0:	4299      	cmp	r1, r3
 80106d2:	d002      	beq.n	80106da <__swsetup_r+0x66>
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7fe fd4f 	bl	800f178 <_free_r>
 80106da:	2300      	movs	r3, #0
 80106dc:	6363      	str	r3, [r4, #52]	; 0x34
 80106de:	89a3      	ldrh	r3, [r4, #12]
 80106e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106e4:	81a3      	strh	r3, [r4, #12]
 80106e6:	2300      	movs	r3, #0
 80106e8:	6063      	str	r3, [r4, #4]
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	89a3      	ldrh	r3, [r4, #12]
 80106f0:	f043 0308 	orr.w	r3, r3, #8
 80106f4:	81a3      	strh	r3, [r4, #12]
 80106f6:	6923      	ldr	r3, [r4, #16]
 80106f8:	b94b      	cbnz	r3, 801070e <__swsetup_r+0x9a>
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010704:	d003      	beq.n	801070e <__swsetup_r+0x9a>
 8010706:	4621      	mov	r1, r4
 8010708:	4630      	mov	r0, r6
 801070a:	f000 f84d 	bl	80107a8 <__smakebuf_r>
 801070e:	89a0      	ldrh	r0, [r4, #12]
 8010710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010714:	f010 0301 	ands.w	r3, r0, #1
 8010718:	d00a      	beq.n	8010730 <__swsetup_r+0xbc>
 801071a:	2300      	movs	r3, #0
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	6963      	ldr	r3, [r4, #20]
 8010720:	425b      	negs	r3, r3
 8010722:	61a3      	str	r3, [r4, #24]
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	b943      	cbnz	r3, 801073a <__swsetup_r+0xc6>
 8010728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801072c:	d1ba      	bne.n	80106a4 <__swsetup_r+0x30>
 801072e:	bd70      	pop	{r4, r5, r6, pc}
 8010730:	0781      	lsls	r1, r0, #30
 8010732:	bf58      	it	pl
 8010734:	6963      	ldrpl	r3, [r4, #20]
 8010736:	60a3      	str	r3, [r4, #8]
 8010738:	e7f4      	b.n	8010724 <__swsetup_r+0xb0>
 801073a:	2000      	movs	r0, #0
 801073c:	e7f7      	b.n	801072e <__swsetup_r+0xba>
 801073e:	bf00      	nop
 8010740:	20000014 	.word	0x20000014
 8010744:	08012bb4 	.word	0x08012bb4
 8010748:	08012bd4 	.word	0x08012bd4
 801074c:	08012b94 	.word	0x08012b94

08010750 <abort>:
 8010750:	b508      	push	{r3, lr}
 8010752:	2006      	movs	r0, #6
 8010754:	f000 f898 	bl	8010888 <raise>
 8010758:	2001      	movs	r0, #1
 801075a:	f7f5 f901 	bl	8005960 <_exit>

0801075e <__swhatbuf_r>:
 801075e:	b570      	push	{r4, r5, r6, lr}
 8010760:	460e      	mov	r6, r1
 8010762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010766:	2900      	cmp	r1, #0
 8010768:	b096      	sub	sp, #88	; 0x58
 801076a:	4614      	mov	r4, r2
 801076c:	461d      	mov	r5, r3
 801076e:	da08      	bge.n	8010782 <__swhatbuf_r+0x24>
 8010770:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	602a      	str	r2, [r5, #0]
 8010778:	061a      	lsls	r2, r3, #24
 801077a:	d410      	bmi.n	801079e <__swhatbuf_r+0x40>
 801077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010780:	e00e      	b.n	80107a0 <__swhatbuf_r+0x42>
 8010782:	466a      	mov	r2, sp
 8010784:	f000 f89c 	bl	80108c0 <_fstat_r>
 8010788:	2800      	cmp	r0, #0
 801078a:	dbf1      	blt.n	8010770 <__swhatbuf_r+0x12>
 801078c:	9a01      	ldr	r2, [sp, #4]
 801078e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010796:	425a      	negs	r2, r3
 8010798:	415a      	adcs	r2, r3
 801079a:	602a      	str	r2, [r5, #0]
 801079c:	e7ee      	b.n	801077c <__swhatbuf_r+0x1e>
 801079e:	2340      	movs	r3, #64	; 0x40
 80107a0:	2000      	movs	r0, #0
 80107a2:	6023      	str	r3, [r4, #0]
 80107a4:	b016      	add	sp, #88	; 0x58
 80107a6:	bd70      	pop	{r4, r5, r6, pc}

080107a8 <__smakebuf_r>:
 80107a8:	898b      	ldrh	r3, [r1, #12]
 80107aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107ac:	079d      	lsls	r5, r3, #30
 80107ae:	4606      	mov	r6, r0
 80107b0:	460c      	mov	r4, r1
 80107b2:	d507      	bpl.n	80107c4 <__smakebuf_r+0x1c>
 80107b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	6123      	str	r3, [r4, #16]
 80107bc:	2301      	movs	r3, #1
 80107be:	6163      	str	r3, [r4, #20]
 80107c0:	b002      	add	sp, #8
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	ab01      	add	r3, sp, #4
 80107c6:	466a      	mov	r2, sp
 80107c8:	f7ff ffc9 	bl	801075e <__swhatbuf_r>
 80107cc:	9900      	ldr	r1, [sp, #0]
 80107ce:	4605      	mov	r5, r0
 80107d0:	4630      	mov	r0, r6
 80107d2:	f7fe fd3d 	bl	800f250 <_malloc_r>
 80107d6:	b948      	cbnz	r0, 80107ec <__smakebuf_r+0x44>
 80107d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107dc:	059a      	lsls	r2, r3, #22
 80107de:	d4ef      	bmi.n	80107c0 <__smakebuf_r+0x18>
 80107e0:	f023 0303 	bic.w	r3, r3, #3
 80107e4:	f043 0302 	orr.w	r3, r3, #2
 80107e8:	81a3      	strh	r3, [r4, #12]
 80107ea:	e7e3      	b.n	80107b4 <__smakebuf_r+0xc>
 80107ec:	4b0d      	ldr	r3, [pc, #52]	; (8010824 <__smakebuf_r+0x7c>)
 80107ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	6020      	str	r0, [r4, #0]
 80107f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107f8:	81a3      	strh	r3, [r4, #12]
 80107fa:	9b00      	ldr	r3, [sp, #0]
 80107fc:	6163      	str	r3, [r4, #20]
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	6120      	str	r0, [r4, #16]
 8010802:	b15b      	cbz	r3, 801081c <__smakebuf_r+0x74>
 8010804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010808:	4630      	mov	r0, r6
 801080a:	f000 f86b 	bl	80108e4 <_isatty_r>
 801080e:	b128      	cbz	r0, 801081c <__smakebuf_r+0x74>
 8010810:	89a3      	ldrh	r3, [r4, #12]
 8010812:	f023 0303 	bic.w	r3, r3, #3
 8010816:	f043 0301 	orr.w	r3, r3, #1
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	89a0      	ldrh	r0, [r4, #12]
 801081e:	4305      	orrs	r5, r0
 8010820:	81a5      	strh	r5, [r4, #12]
 8010822:	e7cd      	b.n	80107c0 <__smakebuf_r+0x18>
 8010824:	080100a9 	.word	0x080100a9

08010828 <_malloc_usable_size_r>:
 8010828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801082c:	1f18      	subs	r0, r3, #4
 801082e:	2b00      	cmp	r3, #0
 8010830:	bfbc      	itt	lt
 8010832:	580b      	ldrlt	r3, [r1, r0]
 8010834:	18c0      	addlt	r0, r0, r3
 8010836:	4770      	bx	lr

08010838 <_raise_r>:
 8010838:	291f      	cmp	r1, #31
 801083a:	b538      	push	{r3, r4, r5, lr}
 801083c:	4604      	mov	r4, r0
 801083e:	460d      	mov	r5, r1
 8010840:	d904      	bls.n	801084c <_raise_r+0x14>
 8010842:	2316      	movs	r3, #22
 8010844:	6003      	str	r3, [r0, #0]
 8010846:	f04f 30ff 	mov.w	r0, #4294967295
 801084a:	bd38      	pop	{r3, r4, r5, pc}
 801084c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801084e:	b112      	cbz	r2, 8010856 <_raise_r+0x1e>
 8010850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010854:	b94b      	cbnz	r3, 801086a <_raise_r+0x32>
 8010856:	4620      	mov	r0, r4
 8010858:	f000 f830 	bl	80108bc <_getpid_r>
 801085c:	462a      	mov	r2, r5
 801085e:	4601      	mov	r1, r0
 8010860:	4620      	mov	r0, r4
 8010862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010866:	f000 b817 	b.w	8010898 <_kill_r>
 801086a:	2b01      	cmp	r3, #1
 801086c:	d00a      	beq.n	8010884 <_raise_r+0x4c>
 801086e:	1c59      	adds	r1, r3, #1
 8010870:	d103      	bne.n	801087a <_raise_r+0x42>
 8010872:	2316      	movs	r3, #22
 8010874:	6003      	str	r3, [r0, #0]
 8010876:	2001      	movs	r0, #1
 8010878:	e7e7      	b.n	801084a <_raise_r+0x12>
 801087a:	2400      	movs	r4, #0
 801087c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010880:	4628      	mov	r0, r5
 8010882:	4798      	blx	r3
 8010884:	2000      	movs	r0, #0
 8010886:	e7e0      	b.n	801084a <_raise_r+0x12>

08010888 <raise>:
 8010888:	4b02      	ldr	r3, [pc, #8]	; (8010894 <raise+0xc>)
 801088a:	4601      	mov	r1, r0
 801088c:	6818      	ldr	r0, [r3, #0]
 801088e:	f7ff bfd3 	b.w	8010838 <_raise_r>
 8010892:	bf00      	nop
 8010894:	20000014 	.word	0x20000014

08010898 <_kill_r>:
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	4d07      	ldr	r5, [pc, #28]	; (80108b8 <_kill_r+0x20>)
 801089c:	2300      	movs	r3, #0
 801089e:	4604      	mov	r4, r0
 80108a0:	4608      	mov	r0, r1
 80108a2:	4611      	mov	r1, r2
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	f7f5 f84b 	bl	8005940 <_kill>
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	d102      	bne.n	80108b4 <_kill_r+0x1c>
 80108ae:	682b      	ldr	r3, [r5, #0]
 80108b0:	b103      	cbz	r3, 80108b4 <_kill_r+0x1c>
 80108b2:	6023      	str	r3, [r4, #0]
 80108b4:	bd38      	pop	{r3, r4, r5, pc}
 80108b6:	bf00      	nop
 80108b8:	2000122c 	.word	0x2000122c

080108bc <_getpid_r>:
 80108bc:	f7f5 b838 	b.w	8005930 <_getpid>

080108c0 <_fstat_r>:
 80108c0:	b538      	push	{r3, r4, r5, lr}
 80108c2:	4d07      	ldr	r5, [pc, #28]	; (80108e0 <_fstat_r+0x20>)
 80108c4:	2300      	movs	r3, #0
 80108c6:	4604      	mov	r4, r0
 80108c8:	4608      	mov	r0, r1
 80108ca:	4611      	mov	r1, r2
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	f7f5 f896 	bl	80059fe <_fstat>
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	d102      	bne.n	80108dc <_fstat_r+0x1c>
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	b103      	cbz	r3, 80108dc <_fstat_r+0x1c>
 80108da:	6023      	str	r3, [r4, #0]
 80108dc:	bd38      	pop	{r3, r4, r5, pc}
 80108de:	bf00      	nop
 80108e0:	2000122c 	.word	0x2000122c

080108e4 <_isatty_r>:
 80108e4:	b538      	push	{r3, r4, r5, lr}
 80108e6:	4d06      	ldr	r5, [pc, #24]	; (8010900 <_isatty_r+0x1c>)
 80108e8:	2300      	movs	r3, #0
 80108ea:	4604      	mov	r4, r0
 80108ec:	4608      	mov	r0, r1
 80108ee:	602b      	str	r3, [r5, #0]
 80108f0:	f7f5 f895 	bl	8005a1e <_isatty>
 80108f4:	1c43      	adds	r3, r0, #1
 80108f6:	d102      	bne.n	80108fe <_isatty_r+0x1a>
 80108f8:	682b      	ldr	r3, [r5, #0]
 80108fa:	b103      	cbz	r3, 80108fe <_isatty_r+0x1a>
 80108fc:	6023      	str	r3, [r4, #0]
 80108fe:	bd38      	pop	{r3, r4, r5, pc}
 8010900:	2000122c 	.word	0x2000122c

08010904 <acos>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	ed2d 8b02 	vpush	{d8}
 801090a:	ec55 4b10 	vmov	r4, r5, d0
 801090e:	f000 f91f 	bl	8010b50 <__ieee754_acos>
 8010912:	4622      	mov	r2, r4
 8010914:	462b      	mov	r3, r5
 8010916:	4620      	mov	r0, r4
 8010918:	4629      	mov	r1, r5
 801091a:	eeb0 8a40 	vmov.f32	s16, s0
 801091e:	eef0 8a60 	vmov.f32	s17, s1
 8010922:	f7f0 f933 	bl	8000b8c <__aeabi_dcmpun>
 8010926:	b9a8      	cbnz	r0, 8010954 <acos+0x50>
 8010928:	ec45 4b10 	vmov	d0, r4, r5
 801092c:	f001 fe04 	bl	8012538 <fabs>
 8010930:	4b0c      	ldr	r3, [pc, #48]	; (8010964 <acos+0x60>)
 8010932:	ec51 0b10 	vmov	r0, r1, d0
 8010936:	2200      	movs	r2, #0
 8010938:	f7f0 f91e 	bl	8000b78 <__aeabi_dcmpgt>
 801093c:	b150      	cbz	r0, 8010954 <acos+0x50>
 801093e:	f7fa fee9 	bl	800b714 <__errno>
 8010942:	ecbd 8b02 	vpop	{d8}
 8010946:	2321      	movs	r3, #33	; 0x21
 8010948:	6003      	str	r3, [r0, #0]
 801094a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801094e:	4806      	ldr	r0, [pc, #24]	; (8010968 <acos+0x64>)
 8010950:	f7ff b986 	b.w	800fc60 <nan>
 8010954:	eeb0 0a48 	vmov.f32	s0, s16
 8010958:	eef0 0a68 	vmov.f32	s1, s17
 801095c:	ecbd 8b02 	vpop	{d8}
 8010960:	bd38      	pop	{r3, r4, r5, pc}
 8010962:	bf00      	nop
 8010964:	3ff00000 	.word	0x3ff00000
 8010968:	08012b93 	.word	0x08012b93

0801096c <asin>:
 801096c:	b538      	push	{r3, r4, r5, lr}
 801096e:	ed2d 8b02 	vpush	{d8}
 8010972:	ec55 4b10 	vmov	r4, r5, d0
 8010976:	f000 fb4b 	bl	8011010 <__ieee754_asin>
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	eeb0 8a40 	vmov.f32	s16, s0
 8010986:	eef0 8a60 	vmov.f32	s17, s1
 801098a:	f7f0 f8ff 	bl	8000b8c <__aeabi_dcmpun>
 801098e:	b9a8      	cbnz	r0, 80109bc <asin+0x50>
 8010990:	ec45 4b10 	vmov	d0, r4, r5
 8010994:	f001 fdd0 	bl	8012538 <fabs>
 8010998:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <asin+0x60>)
 801099a:	ec51 0b10 	vmov	r0, r1, d0
 801099e:	2200      	movs	r2, #0
 80109a0:	f7f0 f8ea 	bl	8000b78 <__aeabi_dcmpgt>
 80109a4:	b150      	cbz	r0, 80109bc <asin+0x50>
 80109a6:	f7fa feb5 	bl	800b714 <__errno>
 80109aa:	ecbd 8b02 	vpop	{d8}
 80109ae:	2321      	movs	r3, #33	; 0x21
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109b6:	4806      	ldr	r0, [pc, #24]	; (80109d0 <asin+0x64>)
 80109b8:	f7ff b952 	b.w	800fc60 <nan>
 80109bc:	eeb0 0a48 	vmov.f32	s0, s16
 80109c0:	eef0 0a68 	vmov.f32	s1, s17
 80109c4:	ecbd 8b02 	vpop	{d8}
 80109c8:	bd38      	pop	{r3, r4, r5, pc}
 80109ca:	bf00      	nop
 80109cc:	3ff00000 	.word	0x3ff00000
 80109d0:	08012b93 	.word	0x08012b93

080109d4 <atan2>:
 80109d4:	f000 bd30 	b.w	8011438 <__ieee754_atan2>

080109d8 <pow>:
 80109d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109da:	ed2d 8b02 	vpush	{d8}
 80109de:	eeb0 8a40 	vmov.f32	s16, s0
 80109e2:	eef0 8a60 	vmov.f32	s17, s1
 80109e6:	ec55 4b11 	vmov	r4, r5, d1
 80109ea:	f000 fdf1 	bl	80115d0 <__ieee754_pow>
 80109ee:	4622      	mov	r2, r4
 80109f0:	462b      	mov	r3, r5
 80109f2:	4620      	mov	r0, r4
 80109f4:	4629      	mov	r1, r5
 80109f6:	ec57 6b10 	vmov	r6, r7, d0
 80109fa:	f7f0 f8c7 	bl	8000b8c <__aeabi_dcmpun>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d13b      	bne.n	8010a7a <pow+0xa2>
 8010a02:	ec51 0b18 	vmov	r0, r1, d8
 8010a06:	2200      	movs	r2, #0
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f7f0 f88d 	bl	8000b28 <__aeabi_dcmpeq>
 8010a0e:	b1b8      	cbz	r0, 8010a40 <pow+0x68>
 8010a10:	2200      	movs	r2, #0
 8010a12:	2300      	movs	r3, #0
 8010a14:	4620      	mov	r0, r4
 8010a16:	4629      	mov	r1, r5
 8010a18:	f7f0 f886 	bl	8000b28 <__aeabi_dcmpeq>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d146      	bne.n	8010aae <pow+0xd6>
 8010a20:	ec45 4b10 	vmov	d0, r4, r5
 8010a24:	f001 fd91 	bl	801254a <finite>
 8010a28:	b338      	cbz	r0, 8010a7a <pow+0xa2>
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4620      	mov	r0, r4
 8010a30:	4629      	mov	r1, r5
 8010a32:	f7f0 f883 	bl	8000b3c <__aeabi_dcmplt>
 8010a36:	b300      	cbz	r0, 8010a7a <pow+0xa2>
 8010a38:	f7fa fe6c 	bl	800b714 <__errno>
 8010a3c:	2322      	movs	r3, #34	; 0x22
 8010a3e:	e01b      	b.n	8010a78 <pow+0xa0>
 8010a40:	ec47 6b10 	vmov	d0, r6, r7
 8010a44:	f001 fd81 	bl	801254a <finite>
 8010a48:	b9e0      	cbnz	r0, 8010a84 <pow+0xac>
 8010a4a:	eeb0 0a48 	vmov.f32	s0, s16
 8010a4e:	eef0 0a68 	vmov.f32	s1, s17
 8010a52:	f001 fd7a 	bl	801254a <finite>
 8010a56:	b1a8      	cbz	r0, 8010a84 <pow+0xac>
 8010a58:	ec45 4b10 	vmov	d0, r4, r5
 8010a5c:	f001 fd75 	bl	801254a <finite>
 8010a60:	b180      	cbz	r0, 8010a84 <pow+0xac>
 8010a62:	4632      	mov	r2, r6
 8010a64:	463b      	mov	r3, r7
 8010a66:	4630      	mov	r0, r6
 8010a68:	4639      	mov	r1, r7
 8010a6a:	f7f0 f88f 	bl	8000b8c <__aeabi_dcmpun>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d0e2      	beq.n	8010a38 <pow+0x60>
 8010a72:	f7fa fe4f 	bl	800b714 <__errno>
 8010a76:	2321      	movs	r3, #33	; 0x21
 8010a78:	6003      	str	r3, [r0, #0]
 8010a7a:	ecbd 8b02 	vpop	{d8}
 8010a7e:	ec47 6b10 	vmov	d0, r6, r7
 8010a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a84:	2200      	movs	r2, #0
 8010a86:	2300      	movs	r3, #0
 8010a88:	4630      	mov	r0, r6
 8010a8a:	4639      	mov	r1, r7
 8010a8c:	f7f0 f84c 	bl	8000b28 <__aeabi_dcmpeq>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d0f2      	beq.n	8010a7a <pow+0xa2>
 8010a94:	eeb0 0a48 	vmov.f32	s0, s16
 8010a98:	eef0 0a68 	vmov.f32	s1, s17
 8010a9c:	f001 fd55 	bl	801254a <finite>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d0ea      	beq.n	8010a7a <pow+0xa2>
 8010aa4:	ec45 4b10 	vmov	d0, r4, r5
 8010aa8:	f001 fd4f 	bl	801254a <finite>
 8010aac:	e7c3      	b.n	8010a36 <pow+0x5e>
 8010aae:	4f01      	ldr	r7, [pc, #4]	; (8010ab4 <pow+0xdc>)
 8010ab0:	2600      	movs	r6, #0
 8010ab2:	e7e2      	b.n	8010a7a <pow+0xa2>
 8010ab4:	3ff00000 	.word	0x3ff00000

08010ab8 <sqrt>:
 8010ab8:	b538      	push	{r3, r4, r5, lr}
 8010aba:	ed2d 8b02 	vpush	{d8}
 8010abe:	ec55 4b10 	vmov	r4, r5, d0
 8010ac2:	f001 fab3 	bl	801202c <__ieee754_sqrt>
 8010ac6:	4622      	mov	r2, r4
 8010ac8:	462b      	mov	r3, r5
 8010aca:	4620      	mov	r0, r4
 8010acc:	4629      	mov	r1, r5
 8010ace:	eeb0 8a40 	vmov.f32	s16, s0
 8010ad2:	eef0 8a60 	vmov.f32	s17, s1
 8010ad6:	f7f0 f859 	bl	8000b8c <__aeabi_dcmpun>
 8010ada:	b990      	cbnz	r0, 8010b02 <sqrt+0x4a>
 8010adc:	2200      	movs	r2, #0
 8010ade:	2300      	movs	r3, #0
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f7f0 f82a 	bl	8000b3c <__aeabi_dcmplt>
 8010ae8:	b158      	cbz	r0, 8010b02 <sqrt+0x4a>
 8010aea:	f7fa fe13 	bl	800b714 <__errno>
 8010aee:	2321      	movs	r3, #33	; 0x21
 8010af0:	6003      	str	r3, [r0, #0]
 8010af2:	2200      	movs	r2, #0
 8010af4:	2300      	movs	r3, #0
 8010af6:	4610      	mov	r0, r2
 8010af8:	4619      	mov	r1, r3
 8010afa:	f7ef fed7 	bl	80008ac <__aeabi_ddiv>
 8010afe:	ec41 0b18 	vmov	d8, r0, r1
 8010b02:	eeb0 0a48 	vmov.f32	s0, s16
 8010b06:	eef0 0a68 	vmov.f32	s1, s17
 8010b0a:	ecbd 8b02 	vpop	{d8}
 8010b0e:	bd38      	pop	{r3, r4, r5, pc}

08010b10 <sqrtf>:
 8010b10:	b508      	push	{r3, lr}
 8010b12:	ed2d 8b02 	vpush	{d8}
 8010b16:	eeb0 8a40 	vmov.f32	s16, s0
 8010b1a:	f001 fb39 	bl	8012190 <__ieee754_sqrtf>
 8010b1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	d60c      	bvs.n	8010b42 <sqrtf+0x32>
 8010b28:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010b48 <sqrtf+0x38>
 8010b2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b34:	d505      	bpl.n	8010b42 <sqrtf+0x32>
 8010b36:	f7fa fded 	bl	800b714 <__errno>
 8010b3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b3e:	2321      	movs	r3, #33	; 0x21
 8010b40:	6003      	str	r3, [r0, #0]
 8010b42:	ecbd 8b02 	vpop	{d8}
 8010b46:	bd08      	pop	{r3, pc}
	...

08010b50 <__ieee754_acos>:
 8010b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	ec55 4b10 	vmov	r4, r5, d0
 8010b58:	49b7      	ldr	r1, [pc, #732]	; (8010e38 <__ieee754_acos+0x2e8>)
 8010b5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010b5e:	428b      	cmp	r3, r1
 8010b60:	dd1b      	ble.n	8010b9a <__ieee754_acos+0x4a>
 8010b62:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010b66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010b6a:	4323      	orrs	r3, r4
 8010b6c:	d106      	bne.n	8010b7c <__ieee754_acos+0x2c>
 8010b6e:	2d00      	cmp	r5, #0
 8010b70:	f300 8211 	bgt.w	8010f96 <__ieee754_acos+0x446>
 8010b74:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010dd0 <__ieee754_acos+0x280>
 8010b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7c:	ee10 2a10 	vmov	r2, s0
 8010b80:	462b      	mov	r3, r5
 8010b82:	ee10 0a10 	vmov	r0, s0
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fbae 	bl	80002e8 <__aeabi_dsub>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	460b      	mov	r3, r1
 8010b90:	f7ef fe8c 	bl	80008ac <__aeabi_ddiv>
 8010b94:	ec41 0b10 	vmov	d0, r0, r1
 8010b98:	e7ee      	b.n	8010b78 <__ieee754_acos+0x28>
 8010b9a:	49a8      	ldr	r1, [pc, #672]	; (8010e3c <__ieee754_acos+0x2ec>)
 8010b9c:	428b      	cmp	r3, r1
 8010b9e:	f300 8087 	bgt.w	8010cb0 <__ieee754_acos+0x160>
 8010ba2:	4aa7      	ldr	r2, [pc, #668]	; (8010e40 <__ieee754_acos+0x2f0>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	f340 81f9 	ble.w	8010f9c <__ieee754_acos+0x44c>
 8010baa:	ee10 2a10 	vmov	r2, s0
 8010bae:	ee10 0a10 	vmov	r0, s0
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	f7ef fd4f 	bl	8000658 <__aeabi_dmul>
 8010bba:	a387      	add	r3, pc, #540	; (adr r3, 8010dd8 <__ieee754_acos+0x288>)
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	460f      	mov	r7, r1
 8010bc4:	f7ef fd48 	bl	8000658 <__aeabi_dmul>
 8010bc8:	a385      	add	r3, pc, #532	; (adr r3, 8010de0 <__ieee754_acos+0x290>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb8d 	bl	80002ec <__adddf3>
 8010bd2:	4632      	mov	r2, r6
 8010bd4:	463b      	mov	r3, r7
 8010bd6:	f7ef fd3f 	bl	8000658 <__aeabi_dmul>
 8010bda:	a383      	add	r3, pc, #524	; (adr r3, 8010de8 <__ieee754_acos+0x298>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f7ef fb82 	bl	80002e8 <__aeabi_dsub>
 8010be4:	4632      	mov	r2, r6
 8010be6:	463b      	mov	r3, r7
 8010be8:	f7ef fd36 	bl	8000658 <__aeabi_dmul>
 8010bec:	a380      	add	r3, pc, #512	; (adr r3, 8010df0 <__ieee754_acos+0x2a0>)
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	f7ef fb7b 	bl	80002ec <__adddf3>
 8010bf6:	4632      	mov	r2, r6
 8010bf8:	463b      	mov	r3, r7
 8010bfa:	f7ef fd2d 	bl	8000658 <__aeabi_dmul>
 8010bfe:	a37e      	add	r3, pc, #504	; (adr r3, 8010df8 <__ieee754_acos+0x2a8>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fb70 	bl	80002e8 <__aeabi_dsub>
 8010c08:	4632      	mov	r2, r6
 8010c0a:	463b      	mov	r3, r7
 8010c0c:	f7ef fd24 	bl	8000658 <__aeabi_dmul>
 8010c10:	a37b      	add	r3, pc, #492	; (adr r3, 8010e00 <__ieee754_acos+0x2b0>)
 8010c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c16:	f7ef fb69 	bl	80002ec <__adddf3>
 8010c1a:	4632      	mov	r2, r6
 8010c1c:	463b      	mov	r3, r7
 8010c1e:	f7ef fd1b 	bl	8000658 <__aeabi_dmul>
 8010c22:	a379      	add	r3, pc, #484	; (adr r3, 8010e08 <__ieee754_acos+0x2b8>)
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	4630      	mov	r0, r6
 8010c2e:	4639      	mov	r1, r7
 8010c30:	f7ef fd12 	bl	8000658 <__aeabi_dmul>
 8010c34:	a376      	add	r3, pc, #472	; (adr r3, 8010e10 <__ieee754_acos+0x2c0>)
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	f7ef fb55 	bl	80002e8 <__aeabi_dsub>
 8010c3e:	4632      	mov	r2, r6
 8010c40:	463b      	mov	r3, r7
 8010c42:	f7ef fd09 	bl	8000658 <__aeabi_dmul>
 8010c46:	a374      	add	r3, pc, #464	; (adr r3, 8010e18 <__ieee754_acos+0x2c8>)
 8010c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4c:	f7ef fb4e 	bl	80002ec <__adddf3>
 8010c50:	4632      	mov	r2, r6
 8010c52:	463b      	mov	r3, r7
 8010c54:	f7ef fd00 	bl	8000658 <__aeabi_dmul>
 8010c58:	a371      	add	r3, pc, #452	; (adr r3, 8010e20 <__ieee754_acos+0x2d0>)
 8010c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5e:	f7ef fb43 	bl	80002e8 <__aeabi_dsub>
 8010c62:	4632      	mov	r2, r6
 8010c64:	463b      	mov	r3, r7
 8010c66:	f7ef fcf7 	bl	8000658 <__aeabi_dmul>
 8010c6a:	4b76      	ldr	r3, [pc, #472]	; (8010e44 <__ieee754_acos+0x2f4>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f7ef fb3d 	bl	80002ec <__adddf3>
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	4640      	mov	r0, r8
 8010c78:	4649      	mov	r1, r9
 8010c7a:	f7ef fe17 	bl	80008ac <__aeabi_ddiv>
 8010c7e:	4622      	mov	r2, r4
 8010c80:	462b      	mov	r3, r5
 8010c82:	f7ef fce9 	bl	8000658 <__aeabi_dmul>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	a167      	add	r1, pc, #412	; (adr r1, 8010e28 <__ieee754_acos+0x2d8>)
 8010c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c90:	f7ef fb2a 	bl	80002e8 <__aeabi_dsub>
 8010c94:	4602      	mov	r2, r0
 8010c96:	460b      	mov	r3, r1
 8010c98:	4620      	mov	r0, r4
 8010c9a:	4629      	mov	r1, r5
 8010c9c:	f7ef fb24 	bl	80002e8 <__aeabi_dsub>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	a162      	add	r1, pc, #392	; (adr r1, 8010e30 <__ieee754_acos+0x2e0>)
 8010ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010caa:	f7ef fb1d 	bl	80002e8 <__aeabi_dsub>
 8010cae:	e771      	b.n	8010b94 <__ieee754_acos+0x44>
 8010cb0:	2d00      	cmp	r5, #0
 8010cb2:	f280 80cb 	bge.w	8010e4c <__ieee754_acos+0x2fc>
 8010cb6:	ee10 0a10 	vmov	r0, s0
 8010cba:	4b62      	ldr	r3, [pc, #392]	; (8010e44 <__ieee754_acos+0x2f4>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fb14 	bl	80002ec <__adddf3>
 8010cc4:	4b60      	ldr	r3, [pc, #384]	; (8010e48 <__ieee754_acos+0x2f8>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f7ef fcc6 	bl	8000658 <__aeabi_dmul>
 8010ccc:	a342      	add	r3, pc, #264	; (adr r3, 8010dd8 <__ieee754_acos+0x288>)
 8010cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	f7ef fcbf 	bl	8000658 <__aeabi_dmul>
 8010cda:	a341      	add	r3, pc, #260	; (adr r3, 8010de0 <__ieee754_acos+0x290>)
 8010cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce0:	f7ef fb04 	bl	80002ec <__adddf3>
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	462b      	mov	r3, r5
 8010ce8:	f7ef fcb6 	bl	8000658 <__aeabi_dmul>
 8010cec:	a33e      	add	r3, pc, #248	; (adr r3, 8010de8 <__ieee754_acos+0x298>)
 8010cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf2:	f7ef faf9 	bl	80002e8 <__aeabi_dsub>
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	462b      	mov	r3, r5
 8010cfa:	f7ef fcad 	bl	8000658 <__aeabi_dmul>
 8010cfe:	a33c      	add	r3, pc, #240	; (adr r3, 8010df0 <__ieee754_acos+0x2a0>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	f7ef faf2 	bl	80002ec <__adddf3>
 8010d08:	4622      	mov	r2, r4
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	f7ef fca4 	bl	8000658 <__aeabi_dmul>
 8010d10:	a339      	add	r3, pc, #228	; (adr r3, 8010df8 <__ieee754_acos+0x2a8>)
 8010d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d16:	f7ef fae7 	bl	80002e8 <__aeabi_dsub>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	f7ef fc9b 	bl	8000658 <__aeabi_dmul>
 8010d22:	a337      	add	r3, pc, #220	; (adr r3, 8010e00 <__ieee754_acos+0x2b0>)
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	f7ef fae0 	bl	80002ec <__adddf3>
 8010d2c:	4622      	mov	r2, r4
 8010d2e:	462b      	mov	r3, r5
 8010d30:	f7ef fc92 	bl	8000658 <__aeabi_dmul>
 8010d34:	ec45 4b10 	vmov	d0, r4, r5
 8010d38:	4680      	mov	r8, r0
 8010d3a:	4689      	mov	r9, r1
 8010d3c:	f001 f976 	bl	801202c <__ieee754_sqrt>
 8010d40:	a331      	add	r3, pc, #196	; (adr r3, 8010e08 <__ieee754_acos+0x2b8>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	4620      	mov	r0, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	ec57 6b10 	vmov	r6, r7, d0
 8010d4e:	f7ef fc83 	bl	8000658 <__aeabi_dmul>
 8010d52:	a32f      	add	r3, pc, #188	; (adr r3, 8010e10 <__ieee754_acos+0x2c0>)
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	f7ef fac6 	bl	80002e8 <__aeabi_dsub>
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	462b      	mov	r3, r5
 8010d60:	f7ef fc7a 	bl	8000658 <__aeabi_dmul>
 8010d64:	a32c      	add	r3, pc, #176	; (adr r3, 8010e18 <__ieee754_acos+0x2c8>)
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	f7ef fabf 	bl	80002ec <__adddf3>
 8010d6e:	4622      	mov	r2, r4
 8010d70:	462b      	mov	r3, r5
 8010d72:	f7ef fc71 	bl	8000658 <__aeabi_dmul>
 8010d76:	a32a      	add	r3, pc, #168	; (adr r3, 8010e20 <__ieee754_acos+0x2d0>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f7ef fab4 	bl	80002e8 <__aeabi_dsub>
 8010d80:	4622      	mov	r2, r4
 8010d82:	462b      	mov	r3, r5
 8010d84:	f7ef fc68 	bl	8000658 <__aeabi_dmul>
 8010d88:	4b2e      	ldr	r3, [pc, #184]	; (8010e44 <__ieee754_acos+0x2f4>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f7ef faae 	bl	80002ec <__adddf3>
 8010d90:	4602      	mov	r2, r0
 8010d92:	460b      	mov	r3, r1
 8010d94:	4640      	mov	r0, r8
 8010d96:	4649      	mov	r1, r9
 8010d98:	f7ef fd88 	bl	80008ac <__aeabi_ddiv>
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	463b      	mov	r3, r7
 8010da0:	f7ef fc5a 	bl	8000658 <__aeabi_dmul>
 8010da4:	a320      	add	r3, pc, #128	; (adr r3, 8010e28 <__ieee754_acos+0x2d8>)
 8010da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010daa:	f7ef fa9d 	bl	80002e8 <__aeabi_dsub>
 8010dae:	4632      	mov	r2, r6
 8010db0:	463b      	mov	r3, r7
 8010db2:	f7ef fa9b 	bl	80002ec <__adddf3>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	f7ef fa97 	bl	80002ec <__adddf3>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	a103      	add	r1, pc, #12	; (adr r1, 8010dd0 <__ieee754_acos+0x280>)
 8010dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dc8:	e76f      	b.n	8010caa <__ieee754_acos+0x15a>
 8010dca:	bf00      	nop
 8010dcc:	f3af 8000 	nop.w
 8010dd0:	54442d18 	.word	0x54442d18
 8010dd4:	400921fb 	.word	0x400921fb
 8010dd8:	0dfdf709 	.word	0x0dfdf709
 8010ddc:	3f023de1 	.word	0x3f023de1
 8010de0:	7501b288 	.word	0x7501b288
 8010de4:	3f49efe0 	.word	0x3f49efe0
 8010de8:	b5688f3b 	.word	0xb5688f3b
 8010dec:	3fa48228 	.word	0x3fa48228
 8010df0:	0e884455 	.word	0x0e884455
 8010df4:	3fc9c155 	.word	0x3fc9c155
 8010df8:	03eb6f7d 	.word	0x03eb6f7d
 8010dfc:	3fd4d612 	.word	0x3fd4d612
 8010e00:	55555555 	.word	0x55555555
 8010e04:	3fc55555 	.word	0x3fc55555
 8010e08:	b12e9282 	.word	0xb12e9282
 8010e0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010e10:	1b8d0159 	.word	0x1b8d0159
 8010e14:	3fe6066c 	.word	0x3fe6066c
 8010e18:	9c598ac8 	.word	0x9c598ac8
 8010e1c:	40002ae5 	.word	0x40002ae5
 8010e20:	1c8a2d4b 	.word	0x1c8a2d4b
 8010e24:	40033a27 	.word	0x40033a27
 8010e28:	33145c07 	.word	0x33145c07
 8010e2c:	3c91a626 	.word	0x3c91a626
 8010e30:	54442d18 	.word	0x54442d18
 8010e34:	3ff921fb 	.word	0x3ff921fb
 8010e38:	3fefffff 	.word	0x3fefffff
 8010e3c:	3fdfffff 	.word	0x3fdfffff
 8010e40:	3c600000 	.word	0x3c600000
 8010e44:	3ff00000 	.word	0x3ff00000
 8010e48:	3fe00000 	.word	0x3fe00000
 8010e4c:	ee10 2a10 	vmov	r2, s0
 8010e50:	462b      	mov	r3, r5
 8010e52:	496d      	ldr	r1, [pc, #436]	; (8011008 <__ieee754_acos+0x4b8>)
 8010e54:	2000      	movs	r0, #0
 8010e56:	f7ef fa47 	bl	80002e8 <__aeabi_dsub>
 8010e5a:	4b6c      	ldr	r3, [pc, #432]	; (801100c <__ieee754_acos+0x4bc>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f7ef fbfb 	bl	8000658 <__aeabi_dmul>
 8010e62:	4604      	mov	r4, r0
 8010e64:	460d      	mov	r5, r1
 8010e66:	ec45 4b10 	vmov	d0, r4, r5
 8010e6a:	f001 f8df 	bl	801202c <__ieee754_sqrt>
 8010e6e:	a34e      	add	r3, pc, #312	; (adr r3, 8010fa8 <__ieee754_acos+0x458>)
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	4620      	mov	r0, r4
 8010e76:	4629      	mov	r1, r5
 8010e78:	ec59 8b10 	vmov	r8, r9, d0
 8010e7c:	f7ef fbec 	bl	8000658 <__aeabi_dmul>
 8010e80:	a34b      	add	r3, pc, #300	; (adr r3, 8010fb0 <__ieee754_acos+0x460>)
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	f7ef fa31 	bl	80002ec <__adddf3>
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	f7ef fbe3 	bl	8000658 <__aeabi_dmul>
 8010e92:	a349      	add	r3, pc, #292	; (adr r3, 8010fb8 <__ieee754_acos+0x468>)
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	f7ef fa26 	bl	80002e8 <__aeabi_dsub>
 8010e9c:	4622      	mov	r2, r4
 8010e9e:	462b      	mov	r3, r5
 8010ea0:	f7ef fbda 	bl	8000658 <__aeabi_dmul>
 8010ea4:	a346      	add	r3, pc, #280	; (adr r3, 8010fc0 <__ieee754_acos+0x470>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef fa1f 	bl	80002ec <__adddf3>
 8010eae:	4622      	mov	r2, r4
 8010eb0:	462b      	mov	r3, r5
 8010eb2:	f7ef fbd1 	bl	8000658 <__aeabi_dmul>
 8010eb6:	a344      	add	r3, pc, #272	; (adr r3, 8010fc8 <__ieee754_acos+0x478>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef fa14 	bl	80002e8 <__aeabi_dsub>
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	f7ef fbc8 	bl	8000658 <__aeabi_dmul>
 8010ec8:	a341      	add	r3, pc, #260	; (adr r3, 8010fd0 <__ieee754_acos+0x480>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef fa0d 	bl	80002ec <__adddf3>
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	f7ef fbbf 	bl	8000658 <__aeabi_dmul>
 8010eda:	a33f      	add	r3, pc, #252	; (adr r3, 8010fd8 <__ieee754_acos+0x488>)
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	4682      	mov	sl, r0
 8010ee2:	468b      	mov	fp, r1
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	f7ef fbb6 	bl	8000658 <__aeabi_dmul>
 8010eec:	a33c      	add	r3, pc, #240	; (adr r3, 8010fe0 <__ieee754_acos+0x490>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	f7ef f9f9 	bl	80002e8 <__aeabi_dsub>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	462b      	mov	r3, r5
 8010efa:	f7ef fbad 	bl	8000658 <__aeabi_dmul>
 8010efe:	a33a      	add	r3, pc, #232	; (adr r3, 8010fe8 <__ieee754_acos+0x498>)
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	f7ef f9f2 	bl	80002ec <__adddf3>
 8010f08:	4622      	mov	r2, r4
 8010f0a:	462b      	mov	r3, r5
 8010f0c:	f7ef fba4 	bl	8000658 <__aeabi_dmul>
 8010f10:	a337      	add	r3, pc, #220	; (adr r3, 8010ff0 <__ieee754_acos+0x4a0>)
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	f7ef f9e7 	bl	80002e8 <__aeabi_dsub>
 8010f1a:	4622      	mov	r2, r4
 8010f1c:	462b      	mov	r3, r5
 8010f1e:	f7ef fb9b 	bl	8000658 <__aeabi_dmul>
 8010f22:	4b39      	ldr	r3, [pc, #228]	; (8011008 <__ieee754_acos+0x4b8>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	f7ef f9e1 	bl	80002ec <__adddf3>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4650      	mov	r0, sl
 8010f30:	4659      	mov	r1, fp
 8010f32:	f7ef fcbb 	bl	80008ac <__aeabi_ddiv>
 8010f36:	4642      	mov	r2, r8
 8010f38:	464b      	mov	r3, r9
 8010f3a:	f7ef fb8d 	bl	8000658 <__aeabi_dmul>
 8010f3e:	2600      	movs	r6, #0
 8010f40:	4682      	mov	sl, r0
 8010f42:	468b      	mov	fp, r1
 8010f44:	4632      	mov	r2, r6
 8010f46:	464b      	mov	r3, r9
 8010f48:	4630      	mov	r0, r6
 8010f4a:	4649      	mov	r1, r9
 8010f4c:	f7ef fb84 	bl	8000658 <__aeabi_dmul>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4620      	mov	r0, r4
 8010f56:	4629      	mov	r1, r5
 8010f58:	f7ef f9c6 	bl	80002e8 <__aeabi_dsub>
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	464b      	mov	r3, r9
 8010f64:	4640      	mov	r0, r8
 8010f66:	4649      	mov	r1, r9
 8010f68:	f7ef f9c0 	bl	80002ec <__adddf3>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	460b      	mov	r3, r1
 8010f70:	4620      	mov	r0, r4
 8010f72:	4629      	mov	r1, r5
 8010f74:	f7ef fc9a 	bl	80008ac <__aeabi_ddiv>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	4659      	mov	r1, fp
 8010f80:	f7ef f9b4 	bl	80002ec <__adddf3>
 8010f84:	4632      	mov	r2, r6
 8010f86:	464b      	mov	r3, r9
 8010f88:	f7ef f9b0 	bl	80002ec <__adddf3>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	460b      	mov	r3, r1
 8010f90:	f7ef f9ac 	bl	80002ec <__adddf3>
 8010f94:	e5fe      	b.n	8010b94 <__ieee754_acos+0x44>
 8010f96:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010ff8 <__ieee754_acos+0x4a8>
 8010f9a:	e5ed      	b.n	8010b78 <__ieee754_acos+0x28>
 8010f9c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011000 <__ieee754_acos+0x4b0>
 8010fa0:	e5ea      	b.n	8010b78 <__ieee754_acos+0x28>
 8010fa2:	bf00      	nop
 8010fa4:	f3af 8000 	nop.w
 8010fa8:	0dfdf709 	.word	0x0dfdf709
 8010fac:	3f023de1 	.word	0x3f023de1
 8010fb0:	7501b288 	.word	0x7501b288
 8010fb4:	3f49efe0 	.word	0x3f49efe0
 8010fb8:	b5688f3b 	.word	0xb5688f3b
 8010fbc:	3fa48228 	.word	0x3fa48228
 8010fc0:	0e884455 	.word	0x0e884455
 8010fc4:	3fc9c155 	.word	0x3fc9c155
 8010fc8:	03eb6f7d 	.word	0x03eb6f7d
 8010fcc:	3fd4d612 	.word	0x3fd4d612
 8010fd0:	55555555 	.word	0x55555555
 8010fd4:	3fc55555 	.word	0x3fc55555
 8010fd8:	b12e9282 	.word	0xb12e9282
 8010fdc:	3fb3b8c5 	.word	0x3fb3b8c5
 8010fe0:	1b8d0159 	.word	0x1b8d0159
 8010fe4:	3fe6066c 	.word	0x3fe6066c
 8010fe8:	9c598ac8 	.word	0x9c598ac8
 8010fec:	40002ae5 	.word	0x40002ae5
 8010ff0:	1c8a2d4b 	.word	0x1c8a2d4b
 8010ff4:	40033a27 	.word	0x40033a27
	...
 8011000:	54442d18 	.word	0x54442d18
 8011004:	3ff921fb 	.word	0x3ff921fb
 8011008:	3ff00000 	.word	0x3ff00000
 801100c:	3fe00000 	.word	0x3fe00000

08011010 <__ieee754_asin>:
 8011010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	ed2d 8b04 	vpush	{d8-d9}
 8011018:	ec55 4b10 	vmov	r4, r5, d0
 801101c:	4bcc      	ldr	r3, [pc, #816]	; (8011350 <__ieee754_asin+0x340>)
 801101e:	b083      	sub	sp, #12
 8011020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011024:	4598      	cmp	r8, r3
 8011026:	9501      	str	r5, [sp, #4]
 8011028:	dd35      	ble.n	8011096 <__ieee754_asin+0x86>
 801102a:	ee10 3a10 	vmov	r3, s0
 801102e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8011032:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8011036:	ea58 0303 	orrs.w	r3, r8, r3
 801103a:	d117      	bne.n	801106c <__ieee754_asin+0x5c>
 801103c:	a3aa      	add	r3, pc, #680	; (adr r3, 80112e8 <__ieee754_asin+0x2d8>)
 801103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011042:	ee10 0a10 	vmov	r0, s0
 8011046:	4629      	mov	r1, r5
 8011048:	f7ef fb06 	bl	8000658 <__aeabi_dmul>
 801104c:	a3a8      	add	r3, pc, #672	; (adr r3, 80112f0 <__ieee754_asin+0x2e0>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	4606      	mov	r6, r0
 8011054:	460f      	mov	r7, r1
 8011056:	4620      	mov	r0, r4
 8011058:	4629      	mov	r1, r5
 801105a:	f7ef fafd 	bl	8000658 <__aeabi_dmul>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	4630      	mov	r0, r6
 8011064:	4639      	mov	r1, r7
 8011066:	f7ef f941 	bl	80002ec <__adddf3>
 801106a:	e00b      	b.n	8011084 <__ieee754_asin+0x74>
 801106c:	ee10 2a10 	vmov	r2, s0
 8011070:	462b      	mov	r3, r5
 8011072:	ee10 0a10 	vmov	r0, s0
 8011076:	4629      	mov	r1, r5
 8011078:	f7ef f936 	bl	80002e8 <__aeabi_dsub>
 801107c:	4602      	mov	r2, r0
 801107e:	460b      	mov	r3, r1
 8011080:	f7ef fc14 	bl	80008ac <__aeabi_ddiv>
 8011084:	4604      	mov	r4, r0
 8011086:	460d      	mov	r5, r1
 8011088:	ec45 4b10 	vmov	d0, r4, r5
 801108c:	b003      	add	sp, #12
 801108e:	ecbd 8b04 	vpop	{d8-d9}
 8011092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011096:	4baf      	ldr	r3, [pc, #700]	; (8011354 <__ieee754_asin+0x344>)
 8011098:	4598      	cmp	r8, r3
 801109a:	dc11      	bgt.n	80110c0 <__ieee754_asin+0xb0>
 801109c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80110a0:	f280 80ae 	bge.w	8011200 <__ieee754_asin+0x1f0>
 80110a4:	a394      	add	r3, pc, #592	; (adr r3, 80112f8 <__ieee754_asin+0x2e8>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	ee10 0a10 	vmov	r0, s0
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7ef f91c 	bl	80002ec <__adddf3>
 80110b4:	4ba8      	ldr	r3, [pc, #672]	; (8011358 <__ieee754_asin+0x348>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	f7ef fd5e 	bl	8000b78 <__aeabi_dcmpgt>
 80110bc:	2800      	cmp	r0, #0
 80110be:	d1e3      	bne.n	8011088 <__ieee754_asin+0x78>
 80110c0:	ec45 4b10 	vmov	d0, r4, r5
 80110c4:	f001 fa38 	bl	8012538 <fabs>
 80110c8:	49a3      	ldr	r1, [pc, #652]	; (8011358 <__ieee754_asin+0x348>)
 80110ca:	ec53 2b10 	vmov	r2, r3, d0
 80110ce:	2000      	movs	r0, #0
 80110d0:	f7ef f90a 	bl	80002e8 <__aeabi_dsub>
 80110d4:	4ba1      	ldr	r3, [pc, #644]	; (801135c <__ieee754_asin+0x34c>)
 80110d6:	2200      	movs	r2, #0
 80110d8:	f7ef fabe 	bl	8000658 <__aeabi_dmul>
 80110dc:	a388      	add	r3, pc, #544	; (adr r3, 8011300 <__ieee754_asin+0x2f0>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	4604      	mov	r4, r0
 80110e4:	460d      	mov	r5, r1
 80110e6:	f7ef fab7 	bl	8000658 <__aeabi_dmul>
 80110ea:	a387      	add	r3, pc, #540	; (adr r3, 8011308 <__ieee754_asin+0x2f8>)
 80110ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f0:	f7ef f8fc 	bl	80002ec <__adddf3>
 80110f4:	4622      	mov	r2, r4
 80110f6:	462b      	mov	r3, r5
 80110f8:	f7ef faae 	bl	8000658 <__aeabi_dmul>
 80110fc:	a384      	add	r3, pc, #528	; (adr r3, 8011310 <__ieee754_asin+0x300>)
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	f7ef f8f1 	bl	80002e8 <__aeabi_dsub>
 8011106:	4622      	mov	r2, r4
 8011108:	462b      	mov	r3, r5
 801110a:	f7ef faa5 	bl	8000658 <__aeabi_dmul>
 801110e:	a382      	add	r3, pc, #520	; (adr r3, 8011318 <__ieee754_asin+0x308>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	f7ef f8ea 	bl	80002ec <__adddf3>
 8011118:	4622      	mov	r2, r4
 801111a:	462b      	mov	r3, r5
 801111c:	f7ef fa9c 	bl	8000658 <__aeabi_dmul>
 8011120:	a37f      	add	r3, pc, #508	; (adr r3, 8011320 <__ieee754_asin+0x310>)
 8011122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011126:	f7ef f8df 	bl	80002e8 <__aeabi_dsub>
 801112a:	4622      	mov	r2, r4
 801112c:	462b      	mov	r3, r5
 801112e:	f7ef fa93 	bl	8000658 <__aeabi_dmul>
 8011132:	a37d      	add	r3, pc, #500	; (adr r3, 8011328 <__ieee754_asin+0x318>)
 8011134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011138:	f7ef f8d8 	bl	80002ec <__adddf3>
 801113c:	4622      	mov	r2, r4
 801113e:	462b      	mov	r3, r5
 8011140:	f7ef fa8a 	bl	8000658 <__aeabi_dmul>
 8011144:	a37a      	add	r3, pc, #488	; (adr r3, 8011330 <__ieee754_asin+0x320>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	ec41 0b18 	vmov	d8, r0, r1
 801114e:	4620      	mov	r0, r4
 8011150:	4629      	mov	r1, r5
 8011152:	f7ef fa81 	bl	8000658 <__aeabi_dmul>
 8011156:	a378      	add	r3, pc, #480	; (adr r3, 8011338 <__ieee754_asin+0x328>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	f7ef f8c4 	bl	80002e8 <__aeabi_dsub>
 8011160:	4622      	mov	r2, r4
 8011162:	462b      	mov	r3, r5
 8011164:	f7ef fa78 	bl	8000658 <__aeabi_dmul>
 8011168:	a375      	add	r3, pc, #468	; (adr r3, 8011340 <__ieee754_asin+0x330>)
 801116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116e:	f7ef f8bd 	bl	80002ec <__adddf3>
 8011172:	4622      	mov	r2, r4
 8011174:	462b      	mov	r3, r5
 8011176:	f7ef fa6f 	bl	8000658 <__aeabi_dmul>
 801117a:	a373      	add	r3, pc, #460	; (adr r3, 8011348 <__ieee754_asin+0x338>)
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	f7ef f8b2 	bl	80002e8 <__aeabi_dsub>
 8011184:	4622      	mov	r2, r4
 8011186:	462b      	mov	r3, r5
 8011188:	f7ef fa66 	bl	8000658 <__aeabi_dmul>
 801118c:	4b72      	ldr	r3, [pc, #456]	; (8011358 <__ieee754_asin+0x348>)
 801118e:	2200      	movs	r2, #0
 8011190:	f7ef f8ac 	bl	80002ec <__adddf3>
 8011194:	ec45 4b10 	vmov	d0, r4, r5
 8011198:	4606      	mov	r6, r0
 801119a:	460f      	mov	r7, r1
 801119c:	f000 ff46 	bl	801202c <__ieee754_sqrt>
 80111a0:	4b6f      	ldr	r3, [pc, #444]	; (8011360 <__ieee754_asin+0x350>)
 80111a2:	4598      	cmp	r8, r3
 80111a4:	ec5b ab10 	vmov	sl, fp, d0
 80111a8:	f340 80dc 	ble.w	8011364 <__ieee754_asin+0x354>
 80111ac:	4632      	mov	r2, r6
 80111ae:	463b      	mov	r3, r7
 80111b0:	ec51 0b18 	vmov	r0, r1, d8
 80111b4:	f7ef fb7a 	bl	80008ac <__aeabi_ddiv>
 80111b8:	4652      	mov	r2, sl
 80111ba:	465b      	mov	r3, fp
 80111bc:	f7ef fa4c 	bl	8000658 <__aeabi_dmul>
 80111c0:	4652      	mov	r2, sl
 80111c2:	465b      	mov	r3, fp
 80111c4:	f7ef f892 	bl	80002ec <__adddf3>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	f7ef f88e 	bl	80002ec <__adddf3>
 80111d0:	a347      	add	r3, pc, #284	; (adr r3, 80112f0 <__ieee754_asin+0x2e0>)
 80111d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d6:	f7ef f887 	bl	80002e8 <__aeabi_dsub>
 80111da:	4602      	mov	r2, r0
 80111dc:	460b      	mov	r3, r1
 80111de:	a142      	add	r1, pc, #264	; (adr r1, 80112e8 <__ieee754_asin+0x2d8>)
 80111e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111e4:	f7ef f880 	bl	80002e8 <__aeabi_dsub>
 80111e8:	9b01      	ldr	r3, [sp, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	bfdc      	itt	le
 80111ee:	4602      	movle	r2, r0
 80111f0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80111f4:	4604      	mov	r4, r0
 80111f6:	460d      	mov	r5, r1
 80111f8:	bfdc      	itt	le
 80111fa:	4614      	movle	r4, r2
 80111fc:	461d      	movle	r5, r3
 80111fe:	e743      	b.n	8011088 <__ieee754_asin+0x78>
 8011200:	ee10 2a10 	vmov	r2, s0
 8011204:	ee10 0a10 	vmov	r0, s0
 8011208:	462b      	mov	r3, r5
 801120a:	4629      	mov	r1, r5
 801120c:	f7ef fa24 	bl	8000658 <__aeabi_dmul>
 8011210:	a33b      	add	r3, pc, #236	; (adr r3, 8011300 <__ieee754_asin+0x2f0>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	4606      	mov	r6, r0
 8011218:	460f      	mov	r7, r1
 801121a:	f7ef fa1d 	bl	8000658 <__aeabi_dmul>
 801121e:	a33a      	add	r3, pc, #232	; (adr r3, 8011308 <__ieee754_asin+0x2f8>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ef f862 	bl	80002ec <__adddf3>
 8011228:	4632      	mov	r2, r6
 801122a:	463b      	mov	r3, r7
 801122c:	f7ef fa14 	bl	8000658 <__aeabi_dmul>
 8011230:	a337      	add	r3, pc, #220	; (adr r3, 8011310 <__ieee754_asin+0x300>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	f7ef f857 	bl	80002e8 <__aeabi_dsub>
 801123a:	4632      	mov	r2, r6
 801123c:	463b      	mov	r3, r7
 801123e:	f7ef fa0b 	bl	8000658 <__aeabi_dmul>
 8011242:	a335      	add	r3, pc, #212	; (adr r3, 8011318 <__ieee754_asin+0x308>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f850 	bl	80002ec <__adddf3>
 801124c:	4632      	mov	r2, r6
 801124e:	463b      	mov	r3, r7
 8011250:	f7ef fa02 	bl	8000658 <__aeabi_dmul>
 8011254:	a332      	add	r3, pc, #200	; (adr r3, 8011320 <__ieee754_asin+0x310>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f845 	bl	80002e8 <__aeabi_dsub>
 801125e:	4632      	mov	r2, r6
 8011260:	463b      	mov	r3, r7
 8011262:	f7ef f9f9 	bl	8000658 <__aeabi_dmul>
 8011266:	a330      	add	r3, pc, #192	; (adr r3, 8011328 <__ieee754_asin+0x318>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f83e 	bl	80002ec <__adddf3>
 8011270:	4632      	mov	r2, r6
 8011272:	463b      	mov	r3, r7
 8011274:	f7ef f9f0 	bl	8000658 <__aeabi_dmul>
 8011278:	a32d      	add	r3, pc, #180	; (adr r3, 8011330 <__ieee754_asin+0x320>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	4680      	mov	r8, r0
 8011280:	4689      	mov	r9, r1
 8011282:	4630      	mov	r0, r6
 8011284:	4639      	mov	r1, r7
 8011286:	f7ef f9e7 	bl	8000658 <__aeabi_dmul>
 801128a:	a32b      	add	r3, pc, #172	; (adr r3, 8011338 <__ieee754_asin+0x328>)
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	f7ef f82a 	bl	80002e8 <__aeabi_dsub>
 8011294:	4632      	mov	r2, r6
 8011296:	463b      	mov	r3, r7
 8011298:	f7ef f9de 	bl	8000658 <__aeabi_dmul>
 801129c:	a328      	add	r3, pc, #160	; (adr r3, 8011340 <__ieee754_asin+0x330>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ef f823 	bl	80002ec <__adddf3>
 80112a6:	4632      	mov	r2, r6
 80112a8:	463b      	mov	r3, r7
 80112aa:	f7ef f9d5 	bl	8000658 <__aeabi_dmul>
 80112ae:	a326      	add	r3, pc, #152	; (adr r3, 8011348 <__ieee754_asin+0x338>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	f7ef f818 	bl	80002e8 <__aeabi_dsub>
 80112b8:	4632      	mov	r2, r6
 80112ba:	463b      	mov	r3, r7
 80112bc:	f7ef f9cc 	bl	8000658 <__aeabi_dmul>
 80112c0:	4b25      	ldr	r3, [pc, #148]	; (8011358 <__ieee754_asin+0x348>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	f7ef f812 	bl	80002ec <__adddf3>
 80112c8:	4602      	mov	r2, r0
 80112ca:	460b      	mov	r3, r1
 80112cc:	4640      	mov	r0, r8
 80112ce:	4649      	mov	r1, r9
 80112d0:	f7ef faec 	bl	80008ac <__aeabi_ddiv>
 80112d4:	4622      	mov	r2, r4
 80112d6:	462b      	mov	r3, r5
 80112d8:	f7ef f9be 	bl	8000658 <__aeabi_dmul>
 80112dc:	4602      	mov	r2, r0
 80112de:	460b      	mov	r3, r1
 80112e0:	4620      	mov	r0, r4
 80112e2:	4629      	mov	r1, r5
 80112e4:	e6bf      	b.n	8011066 <__ieee754_asin+0x56>
 80112e6:	bf00      	nop
 80112e8:	54442d18 	.word	0x54442d18
 80112ec:	3ff921fb 	.word	0x3ff921fb
 80112f0:	33145c07 	.word	0x33145c07
 80112f4:	3c91a626 	.word	0x3c91a626
 80112f8:	8800759c 	.word	0x8800759c
 80112fc:	7e37e43c 	.word	0x7e37e43c
 8011300:	0dfdf709 	.word	0x0dfdf709
 8011304:	3f023de1 	.word	0x3f023de1
 8011308:	7501b288 	.word	0x7501b288
 801130c:	3f49efe0 	.word	0x3f49efe0
 8011310:	b5688f3b 	.word	0xb5688f3b
 8011314:	3fa48228 	.word	0x3fa48228
 8011318:	0e884455 	.word	0x0e884455
 801131c:	3fc9c155 	.word	0x3fc9c155
 8011320:	03eb6f7d 	.word	0x03eb6f7d
 8011324:	3fd4d612 	.word	0x3fd4d612
 8011328:	55555555 	.word	0x55555555
 801132c:	3fc55555 	.word	0x3fc55555
 8011330:	b12e9282 	.word	0xb12e9282
 8011334:	3fb3b8c5 	.word	0x3fb3b8c5
 8011338:	1b8d0159 	.word	0x1b8d0159
 801133c:	3fe6066c 	.word	0x3fe6066c
 8011340:	9c598ac8 	.word	0x9c598ac8
 8011344:	40002ae5 	.word	0x40002ae5
 8011348:	1c8a2d4b 	.word	0x1c8a2d4b
 801134c:	40033a27 	.word	0x40033a27
 8011350:	3fefffff 	.word	0x3fefffff
 8011354:	3fdfffff 	.word	0x3fdfffff
 8011358:	3ff00000 	.word	0x3ff00000
 801135c:	3fe00000 	.word	0x3fe00000
 8011360:	3fef3332 	.word	0x3fef3332
 8011364:	ee10 2a10 	vmov	r2, s0
 8011368:	ee10 0a10 	vmov	r0, s0
 801136c:	465b      	mov	r3, fp
 801136e:	4659      	mov	r1, fp
 8011370:	f7ee ffbc 	bl	80002ec <__adddf3>
 8011374:	4632      	mov	r2, r6
 8011376:	463b      	mov	r3, r7
 8011378:	ec41 0b19 	vmov	d9, r0, r1
 801137c:	ec51 0b18 	vmov	r0, r1, d8
 8011380:	f7ef fa94 	bl	80008ac <__aeabi_ddiv>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	ec51 0b19 	vmov	r0, r1, d9
 801138c:	f7ef f964 	bl	8000658 <__aeabi_dmul>
 8011390:	f04f 0800 	mov.w	r8, #0
 8011394:	4606      	mov	r6, r0
 8011396:	460f      	mov	r7, r1
 8011398:	4642      	mov	r2, r8
 801139a:	465b      	mov	r3, fp
 801139c:	4640      	mov	r0, r8
 801139e:	4659      	mov	r1, fp
 80113a0:	f7ef f95a 	bl	8000658 <__aeabi_dmul>
 80113a4:	4602      	mov	r2, r0
 80113a6:	460b      	mov	r3, r1
 80113a8:	4620      	mov	r0, r4
 80113aa:	4629      	mov	r1, r5
 80113ac:	f7ee ff9c 	bl	80002e8 <__aeabi_dsub>
 80113b0:	4642      	mov	r2, r8
 80113b2:	4604      	mov	r4, r0
 80113b4:	460d      	mov	r5, r1
 80113b6:	465b      	mov	r3, fp
 80113b8:	4650      	mov	r0, sl
 80113ba:	4659      	mov	r1, fp
 80113bc:	f7ee ff96 	bl	80002ec <__adddf3>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	4620      	mov	r0, r4
 80113c6:	4629      	mov	r1, r5
 80113c8:	f7ef fa70 	bl	80008ac <__aeabi_ddiv>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	f7ee ff8c 	bl	80002ec <__adddf3>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	a113      	add	r1, pc, #76	; (adr r1, 8011428 <__ieee754_asin+0x418>)
 80113da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113de:	f7ee ff83 	bl	80002e8 <__aeabi_dsub>
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4630      	mov	r0, r6
 80113e8:	4639      	mov	r1, r7
 80113ea:	f7ee ff7d 	bl	80002e8 <__aeabi_dsub>
 80113ee:	4642      	mov	r2, r8
 80113f0:	4604      	mov	r4, r0
 80113f2:	460d      	mov	r5, r1
 80113f4:	465b      	mov	r3, fp
 80113f6:	4640      	mov	r0, r8
 80113f8:	4659      	mov	r1, fp
 80113fa:	f7ee ff77 	bl	80002ec <__adddf3>
 80113fe:	4602      	mov	r2, r0
 8011400:	460b      	mov	r3, r1
 8011402:	a10b      	add	r1, pc, #44	; (adr r1, 8011430 <__ieee754_asin+0x420>)
 8011404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011408:	f7ee ff6e 	bl	80002e8 <__aeabi_dsub>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	4620      	mov	r0, r4
 8011412:	4629      	mov	r1, r5
 8011414:	f7ee ff68 	bl	80002e8 <__aeabi_dsub>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	a104      	add	r1, pc, #16	; (adr r1, 8011430 <__ieee754_asin+0x420>)
 801141e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011422:	e6df      	b.n	80111e4 <__ieee754_asin+0x1d4>
 8011424:	f3af 8000 	nop.w
 8011428:	33145c07 	.word	0x33145c07
 801142c:	3c91a626 	.word	0x3c91a626
 8011430:	54442d18 	.word	0x54442d18
 8011434:	3fe921fb 	.word	0x3fe921fb

08011438 <__ieee754_atan2>:
 8011438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801143c:	ec57 6b11 	vmov	r6, r7, d1
 8011440:	4273      	negs	r3, r6
 8011442:	f8df e184 	ldr.w	lr, [pc, #388]	; 80115c8 <__ieee754_atan2+0x190>
 8011446:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801144a:	4333      	orrs	r3, r6
 801144c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011450:	4573      	cmp	r3, lr
 8011452:	ec51 0b10 	vmov	r0, r1, d0
 8011456:	ee11 8a10 	vmov	r8, s2
 801145a:	d80a      	bhi.n	8011472 <__ieee754_atan2+0x3a>
 801145c:	4244      	negs	r4, r0
 801145e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011462:	4304      	orrs	r4, r0
 8011464:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011468:	4574      	cmp	r4, lr
 801146a:	ee10 9a10 	vmov	r9, s0
 801146e:	468c      	mov	ip, r1
 8011470:	d907      	bls.n	8011482 <__ieee754_atan2+0x4a>
 8011472:	4632      	mov	r2, r6
 8011474:	463b      	mov	r3, r7
 8011476:	f7ee ff39 	bl	80002ec <__adddf3>
 801147a:	ec41 0b10 	vmov	d0, r0, r1
 801147e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011482:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011486:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801148a:	4334      	orrs	r4, r6
 801148c:	d103      	bne.n	8011496 <__ieee754_atan2+0x5e>
 801148e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011492:	f000 beb1 	b.w	80121f8 <atan>
 8011496:	17bc      	asrs	r4, r7, #30
 8011498:	f004 0402 	and.w	r4, r4, #2
 801149c:	ea53 0909 	orrs.w	r9, r3, r9
 80114a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80114a4:	d107      	bne.n	80114b6 <__ieee754_atan2+0x7e>
 80114a6:	2c02      	cmp	r4, #2
 80114a8:	d060      	beq.n	801156c <__ieee754_atan2+0x134>
 80114aa:	2c03      	cmp	r4, #3
 80114ac:	d1e5      	bne.n	801147a <__ieee754_atan2+0x42>
 80114ae:	a142      	add	r1, pc, #264	; (adr r1, 80115b8 <__ieee754_atan2+0x180>)
 80114b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114b4:	e7e1      	b.n	801147a <__ieee754_atan2+0x42>
 80114b6:	ea52 0808 	orrs.w	r8, r2, r8
 80114ba:	d106      	bne.n	80114ca <__ieee754_atan2+0x92>
 80114bc:	f1bc 0f00 	cmp.w	ip, #0
 80114c0:	da5f      	bge.n	8011582 <__ieee754_atan2+0x14a>
 80114c2:	a13f      	add	r1, pc, #252	; (adr r1, 80115c0 <__ieee754_atan2+0x188>)
 80114c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c8:	e7d7      	b.n	801147a <__ieee754_atan2+0x42>
 80114ca:	4572      	cmp	r2, lr
 80114cc:	d10f      	bne.n	80114ee <__ieee754_atan2+0xb6>
 80114ce:	4293      	cmp	r3, r2
 80114d0:	f104 34ff 	add.w	r4, r4, #4294967295
 80114d4:	d107      	bne.n	80114e6 <__ieee754_atan2+0xae>
 80114d6:	2c02      	cmp	r4, #2
 80114d8:	d84c      	bhi.n	8011574 <__ieee754_atan2+0x13c>
 80114da:	4b35      	ldr	r3, [pc, #212]	; (80115b0 <__ieee754_atan2+0x178>)
 80114dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80114e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80114e4:	e7c9      	b.n	801147a <__ieee754_atan2+0x42>
 80114e6:	2c02      	cmp	r4, #2
 80114e8:	d848      	bhi.n	801157c <__ieee754_atan2+0x144>
 80114ea:	4b32      	ldr	r3, [pc, #200]	; (80115b4 <__ieee754_atan2+0x17c>)
 80114ec:	e7f6      	b.n	80114dc <__ieee754_atan2+0xa4>
 80114ee:	4573      	cmp	r3, lr
 80114f0:	d0e4      	beq.n	80114bc <__ieee754_atan2+0x84>
 80114f2:	1a9b      	subs	r3, r3, r2
 80114f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80114f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114fc:	da1e      	bge.n	801153c <__ieee754_atan2+0x104>
 80114fe:	2f00      	cmp	r7, #0
 8011500:	da01      	bge.n	8011506 <__ieee754_atan2+0xce>
 8011502:	323c      	adds	r2, #60	; 0x3c
 8011504:	db1e      	blt.n	8011544 <__ieee754_atan2+0x10c>
 8011506:	4632      	mov	r2, r6
 8011508:	463b      	mov	r3, r7
 801150a:	f7ef f9cf 	bl	80008ac <__aeabi_ddiv>
 801150e:	ec41 0b10 	vmov	d0, r0, r1
 8011512:	f001 f811 	bl	8012538 <fabs>
 8011516:	f000 fe6f 	bl	80121f8 <atan>
 801151a:	ec51 0b10 	vmov	r0, r1, d0
 801151e:	2c01      	cmp	r4, #1
 8011520:	d013      	beq.n	801154a <__ieee754_atan2+0x112>
 8011522:	2c02      	cmp	r4, #2
 8011524:	d015      	beq.n	8011552 <__ieee754_atan2+0x11a>
 8011526:	2c00      	cmp	r4, #0
 8011528:	d0a7      	beq.n	801147a <__ieee754_atan2+0x42>
 801152a:	a319      	add	r3, pc, #100	; (adr r3, 8011590 <__ieee754_atan2+0x158>)
 801152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011530:	f7ee feda 	bl	80002e8 <__aeabi_dsub>
 8011534:	a318      	add	r3, pc, #96	; (adr r3, 8011598 <__ieee754_atan2+0x160>)
 8011536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153a:	e014      	b.n	8011566 <__ieee754_atan2+0x12e>
 801153c:	a118      	add	r1, pc, #96	; (adr r1, 80115a0 <__ieee754_atan2+0x168>)
 801153e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011542:	e7ec      	b.n	801151e <__ieee754_atan2+0xe6>
 8011544:	2000      	movs	r0, #0
 8011546:	2100      	movs	r1, #0
 8011548:	e7e9      	b.n	801151e <__ieee754_atan2+0xe6>
 801154a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801154e:	4619      	mov	r1, r3
 8011550:	e793      	b.n	801147a <__ieee754_atan2+0x42>
 8011552:	a30f      	add	r3, pc, #60	; (adr r3, 8011590 <__ieee754_atan2+0x158>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7ee fec6 	bl	80002e8 <__aeabi_dsub>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	a10d      	add	r1, pc, #52	; (adr r1, 8011598 <__ieee754_atan2+0x160>)
 8011562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011566:	f7ee febf 	bl	80002e8 <__aeabi_dsub>
 801156a:	e786      	b.n	801147a <__ieee754_atan2+0x42>
 801156c:	a10a      	add	r1, pc, #40	; (adr r1, 8011598 <__ieee754_atan2+0x160>)
 801156e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011572:	e782      	b.n	801147a <__ieee754_atan2+0x42>
 8011574:	a10c      	add	r1, pc, #48	; (adr r1, 80115a8 <__ieee754_atan2+0x170>)
 8011576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801157a:	e77e      	b.n	801147a <__ieee754_atan2+0x42>
 801157c:	2000      	movs	r0, #0
 801157e:	2100      	movs	r1, #0
 8011580:	e77b      	b.n	801147a <__ieee754_atan2+0x42>
 8011582:	a107      	add	r1, pc, #28	; (adr r1, 80115a0 <__ieee754_atan2+0x168>)
 8011584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011588:	e777      	b.n	801147a <__ieee754_atan2+0x42>
 801158a:	bf00      	nop
 801158c:	f3af 8000 	nop.w
 8011590:	33145c07 	.word	0x33145c07
 8011594:	3ca1a626 	.word	0x3ca1a626
 8011598:	54442d18 	.word	0x54442d18
 801159c:	400921fb 	.word	0x400921fb
 80115a0:	54442d18 	.word	0x54442d18
 80115a4:	3ff921fb 	.word	0x3ff921fb
 80115a8:	54442d18 	.word	0x54442d18
 80115ac:	3fe921fb 	.word	0x3fe921fb
 80115b0:	08012bf8 	.word	0x08012bf8
 80115b4:	08012c10 	.word	0x08012c10
 80115b8:	54442d18 	.word	0x54442d18
 80115bc:	c00921fb 	.word	0xc00921fb
 80115c0:	54442d18 	.word	0x54442d18
 80115c4:	bff921fb 	.word	0xbff921fb
 80115c8:	7ff00000 	.word	0x7ff00000
 80115cc:	00000000 	.word	0x00000000

080115d0 <__ieee754_pow>:
 80115d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d4:	ed2d 8b06 	vpush	{d8-d10}
 80115d8:	b089      	sub	sp, #36	; 0x24
 80115da:	ed8d 1b00 	vstr	d1, [sp]
 80115de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80115e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80115e6:	ea58 0102 	orrs.w	r1, r8, r2
 80115ea:	ec57 6b10 	vmov	r6, r7, d0
 80115ee:	d115      	bne.n	801161c <__ieee754_pow+0x4c>
 80115f0:	19b3      	adds	r3, r6, r6
 80115f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80115f6:	4152      	adcs	r2, r2
 80115f8:	4299      	cmp	r1, r3
 80115fa:	4b89      	ldr	r3, [pc, #548]	; (8011820 <__ieee754_pow+0x250>)
 80115fc:	4193      	sbcs	r3, r2
 80115fe:	f080 84d2 	bcs.w	8011fa6 <__ieee754_pow+0x9d6>
 8011602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011606:	4630      	mov	r0, r6
 8011608:	4639      	mov	r1, r7
 801160a:	f7ee fe6f 	bl	80002ec <__adddf3>
 801160e:	ec41 0b10 	vmov	d0, r0, r1
 8011612:	b009      	add	sp, #36	; 0x24
 8011614:	ecbd 8b06 	vpop	{d8-d10}
 8011618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161c:	4b81      	ldr	r3, [pc, #516]	; (8011824 <__ieee754_pow+0x254>)
 801161e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011622:	429c      	cmp	r4, r3
 8011624:	ee10 aa10 	vmov	sl, s0
 8011628:	463d      	mov	r5, r7
 801162a:	dc06      	bgt.n	801163a <__ieee754_pow+0x6a>
 801162c:	d101      	bne.n	8011632 <__ieee754_pow+0x62>
 801162e:	2e00      	cmp	r6, #0
 8011630:	d1e7      	bne.n	8011602 <__ieee754_pow+0x32>
 8011632:	4598      	cmp	r8, r3
 8011634:	dc01      	bgt.n	801163a <__ieee754_pow+0x6a>
 8011636:	d10f      	bne.n	8011658 <__ieee754_pow+0x88>
 8011638:	b172      	cbz	r2, 8011658 <__ieee754_pow+0x88>
 801163a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801163e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011642:	ea55 050a 	orrs.w	r5, r5, sl
 8011646:	d1dc      	bne.n	8011602 <__ieee754_pow+0x32>
 8011648:	e9dd 3200 	ldrd	r3, r2, [sp]
 801164c:	18db      	adds	r3, r3, r3
 801164e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011652:	4152      	adcs	r2, r2
 8011654:	429d      	cmp	r5, r3
 8011656:	e7d0      	b.n	80115fa <__ieee754_pow+0x2a>
 8011658:	2d00      	cmp	r5, #0
 801165a:	da3b      	bge.n	80116d4 <__ieee754_pow+0x104>
 801165c:	4b72      	ldr	r3, [pc, #456]	; (8011828 <__ieee754_pow+0x258>)
 801165e:	4598      	cmp	r8, r3
 8011660:	dc51      	bgt.n	8011706 <__ieee754_pow+0x136>
 8011662:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011666:	4598      	cmp	r8, r3
 8011668:	f340 84ac 	ble.w	8011fc4 <__ieee754_pow+0x9f4>
 801166c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011670:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011674:	2b14      	cmp	r3, #20
 8011676:	dd0f      	ble.n	8011698 <__ieee754_pow+0xc8>
 8011678:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801167c:	fa22 f103 	lsr.w	r1, r2, r3
 8011680:	fa01 f303 	lsl.w	r3, r1, r3
 8011684:	4293      	cmp	r3, r2
 8011686:	f040 849d 	bne.w	8011fc4 <__ieee754_pow+0x9f4>
 801168a:	f001 0101 	and.w	r1, r1, #1
 801168e:	f1c1 0302 	rsb	r3, r1, #2
 8011692:	9304      	str	r3, [sp, #16]
 8011694:	b182      	cbz	r2, 80116b8 <__ieee754_pow+0xe8>
 8011696:	e05f      	b.n	8011758 <__ieee754_pow+0x188>
 8011698:	2a00      	cmp	r2, #0
 801169a:	d15b      	bne.n	8011754 <__ieee754_pow+0x184>
 801169c:	f1c3 0314 	rsb	r3, r3, #20
 80116a0:	fa48 f103 	asr.w	r1, r8, r3
 80116a4:	fa01 f303 	lsl.w	r3, r1, r3
 80116a8:	4543      	cmp	r3, r8
 80116aa:	f040 8488 	bne.w	8011fbe <__ieee754_pow+0x9ee>
 80116ae:	f001 0101 	and.w	r1, r1, #1
 80116b2:	f1c1 0302 	rsb	r3, r1, #2
 80116b6:	9304      	str	r3, [sp, #16]
 80116b8:	4b5c      	ldr	r3, [pc, #368]	; (801182c <__ieee754_pow+0x25c>)
 80116ba:	4598      	cmp	r8, r3
 80116bc:	d132      	bne.n	8011724 <__ieee754_pow+0x154>
 80116be:	f1b9 0f00 	cmp.w	r9, #0
 80116c2:	f280 8478 	bge.w	8011fb6 <__ieee754_pow+0x9e6>
 80116c6:	4959      	ldr	r1, [pc, #356]	; (801182c <__ieee754_pow+0x25c>)
 80116c8:	4632      	mov	r2, r6
 80116ca:	463b      	mov	r3, r7
 80116cc:	2000      	movs	r0, #0
 80116ce:	f7ef f8ed 	bl	80008ac <__aeabi_ddiv>
 80116d2:	e79c      	b.n	801160e <__ieee754_pow+0x3e>
 80116d4:	2300      	movs	r3, #0
 80116d6:	9304      	str	r3, [sp, #16]
 80116d8:	2a00      	cmp	r2, #0
 80116da:	d13d      	bne.n	8011758 <__ieee754_pow+0x188>
 80116dc:	4b51      	ldr	r3, [pc, #324]	; (8011824 <__ieee754_pow+0x254>)
 80116de:	4598      	cmp	r8, r3
 80116e0:	d1ea      	bne.n	80116b8 <__ieee754_pow+0xe8>
 80116e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80116e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80116ea:	ea53 030a 	orrs.w	r3, r3, sl
 80116ee:	f000 845a 	beq.w	8011fa6 <__ieee754_pow+0x9d6>
 80116f2:	4b4f      	ldr	r3, [pc, #316]	; (8011830 <__ieee754_pow+0x260>)
 80116f4:	429c      	cmp	r4, r3
 80116f6:	dd08      	ble.n	801170a <__ieee754_pow+0x13a>
 80116f8:	f1b9 0f00 	cmp.w	r9, #0
 80116fc:	f2c0 8457 	blt.w	8011fae <__ieee754_pow+0x9de>
 8011700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011704:	e783      	b.n	801160e <__ieee754_pow+0x3e>
 8011706:	2302      	movs	r3, #2
 8011708:	e7e5      	b.n	80116d6 <__ieee754_pow+0x106>
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	f04f 0000 	mov.w	r0, #0
 8011712:	f04f 0100 	mov.w	r1, #0
 8011716:	f6bf af7a 	bge.w	801160e <__ieee754_pow+0x3e>
 801171a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801171e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011722:	e774      	b.n	801160e <__ieee754_pow+0x3e>
 8011724:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011728:	d106      	bne.n	8011738 <__ieee754_pow+0x168>
 801172a:	4632      	mov	r2, r6
 801172c:	463b      	mov	r3, r7
 801172e:	4630      	mov	r0, r6
 8011730:	4639      	mov	r1, r7
 8011732:	f7ee ff91 	bl	8000658 <__aeabi_dmul>
 8011736:	e76a      	b.n	801160e <__ieee754_pow+0x3e>
 8011738:	4b3e      	ldr	r3, [pc, #248]	; (8011834 <__ieee754_pow+0x264>)
 801173a:	4599      	cmp	r9, r3
 801173c:	d10c      	bne.n	8011758 <__ieee754_pow+0x188>
 801173e:	2d00      	cmp	r5, #0
 8011740:	db0a      	blt.n	8011758 <__ieee754_pow+0x188>
 8011742:	ec47 6b10 	vmov	d0, r6, r7
 8011746:	b009      	add	sp, #36	; 0x24
 8011748:	ecbd 8b06 	vpop	{d8-d10}
 801174c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	f000 bc6c 	b.w	801202c <__ieee754_sqrt>
 8011754:	2300      	movs	r3, #0
 8011756:	9304      	str	r3, [sp, #16]
 8011758:	ec47 6b10 	vmov	d0, r6, r7
 801175c:	f000 feec 	bl	8012538 <fabs>
 8011760:	ec51 0b10 	vmov	r0, r1, d0
 8011764:	f1ba 0f00 	cmp.w	sl, #0
 8011768:	d129      	bne.n	80117be <__ieee754_pow+0x1ee>
 801176a:	b124      	cbz	r4, 8011776 <__ieee754_pow+0x1a6>
 801176c:	4b2f      	ldr	r3, [pc, #188]	; (801182c <__ieee754_pow+0x25c>)
 801176e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011772:	429a      	cmp	r2, r3
 8011774:	d123      	bne.n	80117be <__ieee754_pow+0x1ee>
 8011776:	f1b9 0f00 	cmp.w	r9, #0
 801177a:	da05      	bge.n	8011788 <__ieee754_pow+0x1b8>
 801177c:	4602      	mov	r2, r0
 801177e:	460b      	mov	r3, r1
 8011780:	2000      	movs	r0, #0
 8011782:	492a      	ldr	r1, [pc, #168]	; (801182c <__ieee754_pow+0x25c>)
 8011784:	f7ef f892 	bl	80008ac <__aeabi_ddiv>
 8011788:	2d00      	cmp	r5, #0
 801178a:	f6bf af40 	bge.w	801160e <__ieee754_pow+0x3e>
 801178e:	9b04      	ldr	r3, [sp, #16]
 8011790:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011794:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011798:	4323      	orrs	r3, r4
 801179a:	d108      	bne.n	80117ae <__ieee754_pow+0x1de>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	4610      	mov	r0, r2
 80117a2:	4619      	mov	r1, r3
 80117a4:	f7ee fda0 	bl	80002e8 <__aeabi_dsub>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	e78f      	b.n	80116ce <__ieee754_pow+0xfe>
 80117ae:	9b04      	ldr	r3, [sp, #16]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	f47f af2c 	bne.w	801160e <__ieee754_pow+0x3e>
 80117b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117ba:	4619      	mov	r1, r3
 80117bc:	e727      	b.n	801160e <__ieee754_pow+0x3e>
 80117be:	0feb      	lsrs	r3, r5, #31
 80117c0:	3b01      	subs	r3, #1
 80117c2:	9306      	str	r3, [sp, #24]
 80117c4:	9a06      	ldr	r2, [sp, #24]
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	4313      	orrs	r3, r2
 80117ca:	d102      	bne.n	80117d2 <__ieee754_pow+0x202>
 80117cc:	4632      	mov	r2, r6
 80117ce:	463b      	mov	r3, r7
 80117d0:	e7e6      	b.n	80117a0 <__ieee754_pow+0x1d0>
 80117d2:	4b19      	ldr	r3, [pc, #100]	; (8011838 <__ieee754_pow+0x268>)
 80117d4:	4598      	cmp	r8, r3
 80117d6:	f340 80fb 	ble.w	80119d0 <__ieee754_pow+0x400>
 80117da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80117de:	4598      	cmp	r8, r3
 80117e0:	4b13      	ldr	r3, [pc, #76]	; (8011830 <__ieee754_pow+0x260>)
 80117e2:	dd0c      	ble.n	80117fe <__ieee754_pow+0x22e>
 80117e4:	429c      	cmp	r4, r3
 80117e6:	dc0f      	bgt.n	8011808 <__ieee754_pow+0x238>
 80117e8:	f1b9 0f00 	cmp.w	r9, #0
 80117ec:	da0f      	bge.n	801180e <__ieee754_pow+0x23e>
 80117ee:	2000      	movs	r0, #0
 80117f0:	b009      	add	sp, #36	; 0x24
 80117f2:	ecbd 8b06 	vpop	{d8-d10}
 80117f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fa:	f000 bcf3 	b.w	80121e4 <__math_oflow>
 80117fe:	429c      	cmp	r4, r3
 8011800:	dbf2      	blt.n	80117e8 <__ieee754_pow+0x218>
 8011802:	4b0a      	ldr	r3, [pc, #40]	; (801182c <__ieee754_pow+0x25c>)
 8011804:	429c      	cmp	r4, r3
 8011806:	dd19      	ble.n	801183c <__ieee754_pow+0x26c>
 8011808:	f1b9 0f00 	cmp.w	r9, #0
 801180c:	dcef      	bgt.n	80117ee <__ieee754_pow+0x21e>
 801180e:	2000      	movs	r0, #0
 8011810:	b009      	add	sp, #36	; 0x24
 8011812:	ecbd 8b06 	vpop	{d8-d10}
 8011816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801181a:	f000 bcda 	b.w	80121d2 <__math_uflow>
 801181e:	bf00      	nop
 8011820:	fff00000 	.word	0xfff00000
 8011824:	7ff00000 	.word	0x7ff00000
 8011828:	433fffff 	.word	0x433fffff
 801182c:	3ff00000 	.word	0x3ff00000
 8011830:	3fefffff 	.word	0x3fefffff
 8011834:	3fe00000 	.word	0x3fe00000
 8011838:	41e00000 	.word	0x41e00000
 801183c:	4b60      	ldr	r3, [pc, #384]	; (80119c0 <__ieee754_pow+0x3f0>)
 801183e:	2200      	movs	r2, #0
 8011840:	f7ee fd52 	bl	80002e8 <__aeabi_dsub>
 8011844:	a354      	add	r3, pc, #336	; (adr r3, 8011998 <__ieee754_pow+0x3c8>)
 8011846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184a:	4604      	mov	r4, r0
 801184c:	460d      	mov	r5, r1
 801184e:	f7ee ff03 	bl	8000658 <__aeabi_dmul>
 8011852:	a353      	add	r3, pc, #332	; (adr r3, 80119a0 <__ieee754_pow+0x3d0>)
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	4606      	mov	r6, r0
 801185a:	460f      	mov	r7, r1
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	f7ee fefa 	bl	8000658 <__aeabi_dmul>
 8011864:	4b57      	ldr	r3, [pc, #348]	; (80119c4 <__ieee754_pow+0x3f4>)
 8011866:	4682      	mov	sl, r0
 8011868:	468b      	mov	fp, r1
 801186a:	2200      	movs	r2, #0
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fef2 	bl	8000658 <__aeabi_dmul>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	a14b      	add	r1, pc, #300	; (adr r1, 80119a8 <__ieee754_pow+0x3d8>)
 801187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801187e:	f7ee fd33 	bl	80002e8 <__aeabi_dsub>
 8011882:	4622      	mov	r2, r4
 8011884:	462b      	mov	r3, r5
 8011886:	f7ee fee7 	bl	8000658 <__aeabi_dmul>
 801188a:	4602      	mov	r2, r0
 801188c:	460b      	mov	r3, r1
 801188e:	2000      	movs	r0, #0
 8011890:	494d      	ldr	r1, [pc, #308]	; (80119c8 <__ieee754_pow+0x3f8>)
 8011892:	f7ee fd29 	bl	80002e8 <__aeabi_dsub>
 8011896:	4622      	mov	r2, r4
 8011898:	4680      	mov	r8, r0
 801189a:	4689      	mov	r9, r1
 801189c:	462b      	mov	r3, r5
 801189e:	4620      	mov	r0, r4
 80118a0:	4629      	mov	r1, r5
 80118a2:	f7ee fed9 	bl	8000658 <__aeabi_dmul>
 80118a6:	4602      	mov	r2, r0
 80118a8:	460b      	mov	r3, r1
 80118aa:	4640      	mov	r0, r8
 80118ac:	4649      	mov	r1, r9
 80118ae:	f7ee fed3 	bl	8000658 <__aeabi_dmul>
 80118b2:	a33f      	add	r3, pc, #252	; (adr r3, 80119b0 <__ieee754_pow+0x3e0>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	f7ee fece 	bl	8000658 <__aeabi_dmul>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	4650      	mov	r0, sl
 80118c2:	4659      	mov	r1, fp
 80118c4:	f7ee fd10 	bl	80002e8 <__aeabi_dsub>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	4680      	mov	r8, r0
 80118ce:	4689      	mov	r9, r1
 80118d0:	4630      	mov	r0, r6
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ee fd0a 	bl	80002ec <__adddf3>
 80118d8:	2000      	movs	r0, #0
 80118da:	4632      	mov	r2, r6
 80118dc:	463b      	mov	r3, r7
 80118de:	4604      	mov	r4, r0
 80118e0:	460d      	mov	r5, r1
 80118e2:	f7ee fd01 	bl	80002e8 <__aeabi_dsub>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	4640      	mov	r0, r8
 80118ec:	4649      	mov	r1, r9
 80118ee:	f7ee fcfb 	bl	80002e8 <__aeabi_dsub>
 80118f2:	9b04      	ldr	r3, [sp, #16]
 80118f4:	9a06      	ldr	r2, [sp, #24]
 80118f6:	3b01      	subs	r3, #1
 80118f8:	4313      	orrs	r3, r2
 80118fa:	4682      	mov	sl, r0
 80118fc:	468b      	mov	fp, r1
 80118fe:	f040 81e7 	bne.w	8011cd0 <__ieee754_pow+0x700>
 8011902:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80119b8 <__ieee754_pow+0x3e8>
 8011906:	eeb0 8a47 	vmov.f32	s16, s14
 801190a:	eef0 8a67 	vmov.f32	s17, s15
 801190e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011912:	2600      	movs	r6, #0
 8011914:	4632      	mov	r2, r6
 8011916:	463b      	mov	r3, r7
 8011918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801191c:	f7ee fce4 	bl	80002e8 <__aeabi_dsub>
 8011920:	4622      	mov	r2, r4
 8011922:	462b      	mov	r3, r5
 8011924:	f7ee fe98 	bl	8000658 <__aeabi_dmul>
 8011928:	e9dd 2300 	ldrd	r2, r3, [sp]
 801192c:	4680      	mov	r8, r0
 801192e:	4689      	mov	r9, r1
 8011930:	4650      	mov	r0, sl
 8011932:	4659      	mov	r1, fp
 8011934:	f7ee fe90 	bl	8000658 <__aeabi_dmul>
 8011938:	4602      	mov	r2, r0
 801193a:	460b      	mov	r3, r1
 801193c:	4640      	mov	r0, r8
 801193e:	4649      	mov	r1, r9
 8011940:	f7ee fcd4 	bl	80002ec <__adddf3>
 8011944:	4632      	mov	r2, r6
 8011946:	463b      	mov	r3, r7
 8011948:	4680      	mov	r8, r0
 801194a:	4689      	mov	r9, r1
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fe82 	bl	8000658 <__aeabi_dmul>
 8011954:	460b      	mov	r3, r1
 8011956:	4604      	mov	r4, r0
 8011958:	460d      	mov	r5, r1
 801195a:	4602      	mov	r2, r0
 801195c:	4649      	mov	r1, r9
 801195e:	4640      	mov	r0, r8
 8011960:	f7ee fcc4 	bl	80002ec <__adddf3>
 8011964:	4b19      	ldr	r3, [pc, #100]	; (80119cc <__ieee754_pow+0x3fc>)
 8011966:	4299      	cmp	r1, r3
 8011968:	ec45 4b19 	vmov	d9, r4, r5
 801196c:	4606      	mov	r6, r0
 801196e:	460f      	mov	r7, r1
 8011970:	468b      	mov	fp, r1
 8011972:	f340 82f1 	ble.w	8011f58 <__ieee754_pow+0x988>
 8011976:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801197a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801197e:	4303      	orrs	r3, r0
 8011980:	f000 81e4 	beq.w	8011d4c <__ieee754_pow+0x77c>
 8011984:	ec51 0b18 	vmov	r0, r1, d8
 8011988:	2200      	movs	r2, #0
 801198a:	2300      	movs	r3, #0
 801198c:	f7ef f8d6 	bl	8000b3c <__aeabi_dcmplt>
 8011990:	3800      	subs	r0, #0
 8011992:	bf18      	it	ne
 8011994:	2001      	movne	r0, #1
 8011996:	e72b      	b.n	80117f0 <__ieee754_pow+0x220>
 8011998:	60000000 	.word	0x60000000
 801199c:	3ff71547 	.word	0x3ff71547
 80119a0:	f85ddf44 	.word	0xf85ddf44
 80119a4:	3e54ae0b 	.word	0x3e54ae0b
 80119a8:	55555555 	.word	0x55555555
 80119ac:	3fd55555 	.word	0x3fd55555
 80119b0:	652b82fe 	.word	0x652b82fe
 80119b4:	3ff71547 	.word	0x3ff71547
 80119b8:	00000000 	.word	0x00000000
 80119bc:	bff00000 	.word	0xbff00000
 80119c0:	3ff00000 	.word	0x3ff00000
 80119c4:	3fd00000 	.word	0x3fd00000
 80119c8:	3fe00000 	.word	0x3fe00000
 80119cc:	408fffff 	.word	0x408fffff
 80119d0:	4bd5      	ldr	r3, [pc, #852]	; (8011d28 <__ieee754_pow+0x758>)
 80119d2:	402b      	ands	r3, r5
 80119d4:	2200      	movs	r2, #0
 80119d6:	b92b      	cbnz	r3, 80119e4 <__ieee754_pow+0x414>
 80119d8:	4bd4      	ldr	r3, [pc, #848]	; (8011d2c <__ieee754_pow+0x75c>)
 80119da:	f7ee fe3d 	bl	8000658 <__aeabi_dmul>
 80119de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80119e2:	460c      	mov	r4, r1
 80119e4:	1523      	asrs	r3, r4, #20
 80119e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80119ea:	4413      	add	r3, r2
 80119ec:	9305      	str	r3, [sp, #20]
 80119ee:	4bd0      	ldr	r3, [pc, #832]	; (8011d30 <__ieee754_pow+0x760>)
 80119f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80119f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80119f8:	429c      	cmp	r4, r3
 80119fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80119fe:	dd08      	ble.n	8011a12 <__ieee754_pow+0x442>
 8011a00:	4bcc      	ldr	r3, [pc, #816]	; (8011d34 <__ieee754_pow+0x764>)
 8011a02:	429c      	cmp	r4, r3
 8011a04:	f340 8162 	ble.w	8011ccc <__ieee754_pow+0x6fc>
 8011a08:	9b05      	ldr	r3, [sp, #20]
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	9305      	str	r3, [sp, #20]
 8011a0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a12:	2400      	movs	r4, #0
 8011a14:	00e3      	lsls	r3, r4, #3
 8011a16:	9307      	str	r3, [sp, #28]
 8011a18:	4bc7      	ldr	r3, [pc, #796]	; (8011d38 <__ieee754_pow+0x768>)
 8011a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a1e:	ed93 7b00 	vldr	d7, [r3]
 8011a22:	4629      	mov	r1, r5
 8011a24:	ec53 2b17 	vmov	r2, r3, d7
 8011a28:	eeb0 9a47 	vmov.f32	s18, s14
 8011a2c:	eef0 9a67 	vmov.f32	s19, s15
 8011a30:	4682      	mov	sl, r0
 8011a32:	f7ee fc59 	bl	80002e8 <__aeabi_dsub>
 8011a36:	4652      	mov	r2, sl
 8011a38:	4606      	mov	r6, r0
 8011a3a:	460f      	mov	r7, r1
 8011a3c:	462b      	mov	r3, r5
 8011a3e:	ec51 0b19 	vmov	r0, r1, d9
 8011a42:	f7ee fc53 	bl	80002ec <__adddf3>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	49bb      	ldr	r1, [pc, #748]	; (8011d3c <__ieee754_pow+0x76c>)
 8011a4e:	f7ee ff2d 	bl	80008ac <__aeabi_ddiv>
 8011a52:	ec41 0b1a 	vmov	d10, r0, r1
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	f7ee fdfb 	bl	8000658 <__aeabi_dmul>
 8011a62:	2300      	movs	r3, #0
 8011a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a68:	9302      	str	r3, [sp, #8]
 8011a6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011a6e:	46ab      	mov	fp, r5
 8011a70:	106d      	asrs	r5, r5, #1
 8011a72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011a76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011a7a:	ec41 0b18 	vmov	d8, r0, r1
 8011a7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011a82:	2200      	movs	r2, #0
 8011a84:	4640      	mov	r0, r8
 8011a86:	4649      	mov	r1, r9
 8011a88:	4614      	mov	r4, r2
 8011a8a:	461d      	mov	r5, r3
 8011a8c:	f7ee fde4 	bl	8000658 <__aeabi_dmul>
 8011a90:	4602      	mov	r2, r0
 8011a92:	460b      	mov	r3, r1
 8011a94:	4630      	mov	r0, r6
 8011a96:	4639      	mov	r1, r7
 8011a98:	f7ee fc26 	bl	80002e8 <__aeabi_dsub>
 8011a9c:	ec53 2b19 	vmov	r2, r3, d9
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	460f      	mov	r7, r1
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	f7ee fc1e 	bl	80002e8 <__aeabi_dsub>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	4650      	mov	r0, sl
 8011ab2:	4659      	mov	r1, fp
 8011ab4:	f7ee fc18 	bl	80002e8 <__aeabi_dsub>
 8011ab8:	4642      	mov	r2, r8
 8011aba:	464b      	mov	r3, r9
 8011abc:	f7ee fdcc 	bl	8000658 <__aeabi_dmul>
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	4639      	mov	r1, r7
 8011ac8:	f7ee fc0e 	bl	80002e8 <__aeabi_dsub>
 8011acc:	ec53 2b1a 	vmov	r2, r3, d10
 8011ad0:	f7ee fdc2 	bl	8000658 <__aeabi_dmul>
 8011ad4:	ec53 2b18 	vmov	r2, r3, d8
 8011ad8:	ec41 0b19 	vmov	d9, r0, r1
 8011adc:	ec51 0b18 	vmov	r0, r1, d8
 8011ae0:	f7ee fdba 	bl	8000658 <__aeabi_dmul>
 8011ae4:	a37c      	add	r3, pc, #496	; (adr r3, 8011cd8 <__ieee754_pow+0x708>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	4604      	mov	r4, r0
 8011aec:	460d      	mov	r5, r1
 8011aee:	f7ee fdb3 	bl	8000658 <__aeabi_dmul>
 8011af2:	a37b      	add	r3, pc, #492	; (adr r3, 8011ce0 <__ieee754_pow+0x710>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f7ee fbf8 	bl	80002ec <__adddf3>
 8011afc:	4622      	mov	r2, r4
 8011afe:	462b      	mov	r3, r5
 8011b00:	f7ee fdaa 	bl	8000658 <__aeabi_dmul>
 8011b04:	a378      	add	r3, pc, #480	; (adr r3, 8011ce8 <__ieee754_pow+0x718>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f7ee fbef 	bl	80002ec <__adddf3>
 8011b0e:	4622      	mov	r2, r4
 8011b10:	462b      	mov	r3, r5
 8011b12:	f7ee fda1 	bl	8000658 <__aeabi_dmul>
 8011b16:	a376      	add	r3, pc, #472	; (adr r3, 8011cf0 <__ieee754_pow+0x720>)
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	f7ee fbe6 	bl	80002ec <__adddf3>
 8011b20:	4622      	mov	r2, r4
 8011b22:	462b      	mov	r3, r5
 8011b24:	f7ee fd98 	bl	8000658 <__aeabi_dmul>
 8011b28:	a373      	add	r3, pc, #460	; (adr r3, 8011cf8 <__ieee754_pow+0x728>)
 8011b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2e:	f7ee fbdd 	bl	80002ec <__adddf3>
 8011b32:	4622      	mov	r2, r4
 8011b34:	462b      	mov	r3, r5
 8011b36:	f7ee fd8f 	bl	8000658 <__aeabi_dmul>
 8011b3a:	a371      	add	r3, pc, #452	; (adr r3, 8011d00 <__ieee754_pow+0x730>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f7ee fbd4 	bl	80002ec <__adddf3>
 8011b44:	4622      	mov	r2, r4
 8011b46:	4606      	mov	r6, r0
 8011b48:	460f      	mov	r7, r1
 8011b4a:	462b      	mov	r3, r5
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee fd82 	bl	8000658 <__aeabi_dmul>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f7ee fd7c 	bl	8000658 <__aeabi_dmul>
 8011b60:	4642      	mov	r2, r8
 8011b62:	4604      	mov	r4, r0
 8011b64:	460d      	mov	r5, r1
 8011b66:	464b      	mov	r3, r9
 8011b68:	ec51 0b18 	vmov	r0, r1, d8
 8011b6c:	f7ee fbbe 	bl	80002ec <__adddf3>
 8011b70:	ec53 2b19 	vmov	r2, r3, d9
 8011b74:	f7ee fd70 	bl	8000658 <__aeabi_dmul>
 8011b78:	4622      	mov	r2, r4
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	f7ee fbb6 	bl	80002ec <__adddf3>
 8011b80:	4642      	mov	r2, r8
 8011b82:	4682      	mov	sl, r0
 8011b84:	468b      	mov	fp, r1
 8011b86:	464b      	mov	r3, r9
 8011b88:	4640      	mov	r0, r8
 8011b8a:	4649      	mov	r1, r9
 8011b8c:	f7ee fd64 	bl	8000658 <__aeabi_dmul>
 8011b90:	4b6b      	ldr	r3, [pc, #428]	; (8011d40 <__ieee754_pow+0x770>)
 8011b92:	2200      	movs	r2, #0
 8011b94:	4606      	mov	r6, r0
 8011b96:	460f      	mov	r7, r1
 8011b98:	f7ee fba8 	bl	80002ec <__adddf3>
 8011b9c:	4652      	mov	r2, sl
 8011b9e:	465b      	mov	r3, fp
 8011ba0:	f7ee fba4 	bl	80002ec <__adddf3>
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	460d      	mov	r5, r1
 8011baa:	4602      	mov	r2, r0
 8011bac:	460b      	mov	r3, r1
 8011bae:	4640      	mov	r0, r8
 8011bb0:	4649      	mov	r1, r9
 8011bb2:	f7ee fd51 	bl	8000658 <__aeabi_dmul>
 8011bb6:	4b62      	ldr	r3, [pc, #392]	; (8011d40 <__ieee754_pow+0x770>)
 8011bb8:	4680      	mov	r8, r0
 8011bba:	4689      	mov	r9, r1
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f7ee fb91 	bl	80002e8 <__aeabi_dsub>
 8011bc6:	4632      	mov	r2, r6
 8011bc8:	463b      	mov	r3, r7
 8011bca:	f7ee fb8d 	bl	80002e8 <__aeabi_dsub>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	4650      	mov	r0, sl
 8011bd4:	4659      	mov	r1, fp
 8011bd6:	f7ee fb87 	bl	80002e8 <__aeabi_dsub>
 8011bda:	ec53 2b18 	vmov	r2, r3, d8
 8011bde:	f7ee fd3b 	bl	8000658 <__aeabi_dmul>
 8011be2:	4622      	mov	r2, r4
 8011be4:	4606      	mov	r6, r0
 8011be6:	460f      	mov	r7, r1
 8011be8:	462b      	mov	r3, r5
 8011bea:	ec51 0b19 	vmov	r0, r1, d9
 8011bee:	f7ee fd33 	bl	8000658 <__aeabi_dmul>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	4639      	mov	r1, r7
 8011bfa:	f7ee fb77 	bl	80002ec <__adddf3>
 8011bfe:	4606      	mov	r6, r0
 8011c00:	460f      	mov	r7, r1
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4640      	mov	r0, r8
 8011c08:	4649      	mov	r1, r9
 8011c0a:	f7ee fb6f 	bl	80002ec <__adddf3>
 8011c0e:	a33e      	add	r3, pc, #248	; (adr r3, 8011d08 <__ieee754_pow+0x738>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	2000      	movs	r0, #0
 8011c16:	4604      	mov	r4, r0
 8011c18:	460d      	mov	r5, r1
 8011c1a:	f7ee fd1d 	bl	8000658 <__aeabi_dmul>
 8011c1e:	4642      	mov	r2, r8
 8011c20:	ec41 0b18 	vmov	d8, r0, r1
 8011c24:	464b      	mov	r3, r9
 8011c26:	4620      	mov	r0, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	f7ee fb5d 	bl	80002e8 <__aeabi_dsub>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4630      	mov	r0, r6
 8011c34:	4639      	mov	r1, r7
 8011c36:	f7ee fb57 	bl	80002e8 <__aeabi_dsub>
 8011c3a:	a335      	add	r3, pc, #212	; (adr r3, 8011d10 <__ieee754_pow+0x740>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	f7ee fd0a 	bl	8000658 <__aeabi_dmul>
 8011c44:	a334      	add	r3, pc, #208	; (adr r3, 8011d18 <__ieee754_pow+0x748>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	460f      	mov	r7, r1
 8011c4e:	4620      	mov	r0, r4
 8011c50:	4629      	mov	r1, r5
 8011c52:	f7ee fd01 	bl	8000658 <__aeabi_dmul>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	f7ee fb45 	bl	80002ec <__adddf3>
 8011c62:	9a07      	ldr	r2, [sp, #28]
 8011c64:	4b37      	ldr	r3, [pc, #220]	; (8011d44 <__ieee754_pow+0x774>)
 8011c66:	4413      	add	r3, r2
 8011c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6c:	f7ee fb3e 	bl	80002ec <__adddf3>
 8011c70:	4682      	mov	sl, r0
 8011c72:	9805      	ldr	r0, [sp, #20]
 8011c74:	468b      	mov	fp, r1
 8011c76:	f7ee fc85 	bl	8000584 <__aeabi_i2d>
 8011c7a:	9a07      	ldr	r2, [sp, #28]
 8011c7c:	4b32      	ldr	r3, [pc, #200]	; (8011d48 <__ieee754_pow+0x778>)
 8011c7e:	4413      	add	r3, r2
 8011c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c84:	4606      	mov	r6, r0
 8011c86:	460f      	mov	r7, r1
 8011c88:	4652      	mov	r2, sl
 8011c8a:	465b      	mov	r3, fp
 8011c8c:	ec51 0b18 	vmov	r0, r1, d8
 8011c90:	f7ee fb2c 	bl	80002ec <__adddf3>
 8011c94:	4642      	mov	r2, r8
 8011c96:	464b      	mov	r3, r9
 8011c98:	f7ee fb28 	bl	80002ec <__adddf3>
 8011c9c:	4632      	mov	r2, r6
 8011c9e:	463b      	mov	r3, r7
 8011ca0:	f7ee fb24 	bl	80002ec <__adddf3>
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	4632      	mov	r2, r6
 8011ca8:	463b      	mov	r3, r7
 8011caa:	4604      	mov	r4, r0
 8011cac:	460d      	mov	r5, r1
 8011cae:	f7ee fb1b 	bl	80002e8 <__aeabi_dsub>
 8011cb2:	4642      	mov	r2, r8
 8011cb4:	464b      	mov	r3, r9
 8011cb6:	f7ee fb17 	bl	80002e8 <__aeabi_dsub>
 8011cba:	ec53 2b18 	vmov	r2, r3, d8
 8011cbe:	f7ee fb13 	bl	80002e8 <__aeabi_dsub>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	4650      	mov	r0, sl
 8011cc8:	4659      	mov	r1, fp
 8011cca:	e610      	b.n	80118ee <__ieee754_pow+0x31e>
 8011ccc:	2401      	movs	r4, #1
 8011cce:	e6a1      	b.n	8011a14 <__ieee754_pow+0x444>
 8011cd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011d20 <__ieee754_pow+0x750>
 8011cd4:	e617      	b.n	8011906 <__ieee754_pow+0x336>
 8011cd6:	bf00      	nop
 8011cd8:	4a454eef 	.word	0x4a454eef
 8011cdc:	3fca7e28 	.word	0x3fca7e28
 8011ce0:	93c9db65 	.word	0x93c9db65
 8011ce4:	3fcd864a 	.word	0x3fcd864a
 8011ce8:	a91d4101 	.word	0xa91d4101
 8011cec:	3fd17460 	.word	0x3fd17460
 8011cf0:	518f264d 	.word	0x518f264d
 8011cf4:	3fd55555 	.word	0x3fd55555
 8011cf8:	db6fabff 	.word	0xdb6fabff
 8011cfc:	3fdb6db6 	.word	0x3fdb6db6
 8011d00:	33333303 	.word	0x33333303
 8011d04:	3fe33333 	.word	0x3fe33333
 8011d08:	e0000000 	.word	0xe0000000
 8011d0c:	3feec709 	.word	0x3feec709
 8011d10:	dc3a03fd 	.word	0xdc3a03fd
 8011d14:	3feec709 	.word	0x3feec709
 8011d18:	145b01f5 	.word	0x145b01f5
 8011d1c:	be3e2fe0 	.word	0xbe3e2fe0
 8011d20:	00000000 	.word	0x00000000
 8011d24:	3ff00000 	.word	0x3ff00000
 8011d28:	7ff00000 	.word	0x7ff00000
 8011d2c:	43400000 	.word	0x43400000
 8011d30:	0003988e 	.word	0x0003988e
 8011d34:	000bb679 	.word	0x000bb679
 8011d38:	08012c28 	.word	0x08012c28
 8011d3c:	3ff00000 	.word	0x3ff00000
 8011d40:	40080000 	.word	0x40080000
 8011d44:	08012c48 	.word	0x08012c48
 8011d48:	08012c38 	.word	0x08012c38
 8011d4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012024 <__ieee754_pow+0xa54>)
 8011d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d52:	4640      	mov	r0, r8
 8011d54:	4649      	mov	r1, r9
 8011d56:	f7ee fac9 	bl	80002ec <__adddf3>
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	ec41 0b1a 	vmov	d10, r0, r1
 8011d60:	462b      	mov	r3, r5
 8011d62:	4630      	mov	r0, r6
 8011d64:	4639      	mov	r1, r7
 8011d66:	f7ee fabf 	bl	80002e8 <__aeabi_dsub>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	ec51 0b1a 	vmov	r0, r1, d10
 8011d72:	f7ee ff01 	bl	8000b78 <__aeabi_dcmpgt>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	f47f ae04 	bne.w	8011984 <__ieee754_pow+0x3b4>
 8011d7c:	4aa4      	ldr	r2, [pc, #656]	; (8012010 <__ieee754_pow+0xa40>)
 8011d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d82:	4293      	cmp	r3, r2
 8011d84:	f340 8108 	ble.w	8011f98 <__ieee754_pow+0x9c8>
 8011d88:	151b      	asrs	r3, r3, #20
 8011d8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011d8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011d92:	fa4a f303 	asr.w	r3, sl, r3
 8011d96:	445b      	add	r3, fp
 8011d98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011d9c:	4e9d      	ldr	r6, [pc, #628]	; (8012014 <__ieee754_pow+0xa44>)
 8011d9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011da2:	4116      	asrs	r6, r2
 8011da4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011da8:	2000      	movs	r0, #0
 8011daa:	ea23 0106 	bic.w	r1, r3, r6
 8011dae:	f1c2 0214 	rsb	r2, r2, #20
 8011db2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011db6:	fa4a fa02 	asr.w	sl, sl, r2
 8011dba:	f1bb 0f00 	cmp.w	fp, #0
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	bfb8      	it	lt
 8011dc8:	f1ca 0a00 	rsblt	sl, sl, #0
 8011dcc:	f7ee fa8c 	bl	80002e8 <__aeabi_dsub>
 8011dd0:	ec41 0b19 	vmov	d9, r0, r1
 8011dd4:	4642      	mov	r2, r8
 8011dd6:	464b      	mov	r3, r9
 8011dd8:	ec51 0b19 	vmov	r0, r1, d9
 8011ddc:	f7ee fa86 	bl	80002ec <__adddf3>
 8011de0:	a37b      	add	r3, pc, #492	; (adr r3, 8011fd0 <__ieee754_pow+0xa00>)
 8011de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de6:	2000      	movs	r0, #0
 8011de8:	4604      	mov	r4, r0
 8011dea:	460d      	mov	r5, r1
 8011dec:	f7ee fc34 	bl	8000658 <__aeabi_dmul>
 8011df0:	ec53 2b19 	vmov	r2, r3, d9
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	4620      	mov	r0, r4
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	f7ee fa74 	bl	80002e8 <__aeabi_dsub>
 8011e00:	4602      	mov	r2, r0
 8011e02:	460b      	mov	r3, r1
 8011e04:	4640      	mov	r0, r8
 8011e06:	4649      	mov	r1, r9
 8011e08:	f7ee fa6e 	bl	80002e8 <__aeabi_dsub>
 8011e0c:	a372      	add	r3, pc, #456	; (adr r3, 8011fd8 <__ieee754_pow+0xa08>)
 8011e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e12:	f7ee fc21 	bl	8000658 <__aeabi_dmul>
 8011e16:	a372      	add	r3, pc, #456	; (adr r3, 8011fe0 <__ieee754_pow+0xa10>)
 8011e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4689      	mov	r9, r1
 8011e20:	4620      	mov	r0, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	f7ee fc18 	bl	8000658 <__aeabi_dmul>
 8011e28:	4602      	mov	r2, r0
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	4640      	mov	r0, r8
 8011e2e:	4649      	mov	r1, r9
 8011e30:	f7ee fa5c 	bl	80002ec <__adddf3>
 8011e34:	4604      	mov	r4, r0
 8011e36:	460d      	mov	r5, r1
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	4639      	mov	r1, r7
 8011e40:	f7ee fa54 	bl	80002ec <__adddf3>
 8011e44:	4632      	mov	r2, r6
 8011e46:	463b      	mov	r3, r7
 8011e48:	4680      	mov	r8, r0
 8011e4a:	4689      	mov	r9, r1
 8011e4c:	f7ee fa4c 	bl	80002e8 <__aeabi_dsub>
 8011e50:	4602      	mov	r2, r0
 8011e52:	460b      	mov	r3, r1
 8011e54:	4620      	mov	r0, r4
 8011e56:	4629      	mov	r1, r5
 8011e58:	f7ee fa46 	bl	80002e8 <__aeabi_dsub>
 8011e5c:	4642      	mov	r2, r8
 8011e5e:	4606      	mov	r6, r0
 8011e60:	460f      	mov	r7, r1
 8011e62:	464b      	mov	r3, r9
 8011e64:	4640      	mov	r0, r8
 8011e66:	4649      	mov	r1, r9
 8011e68:	f7ee fbf6 	bl	8000658 <__aeabi_dmul>
 8011e6c:	a35e      	add	r3, pc, #376	; (adr r3, 8011fe8 <__ieee754_pow+0xa18>)
 8011e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e72:	4604      	mov	r4, r0
 8011e74:	460d      	mov	r5, r1
 8011e76:	f7ee fbef 	bl	8000658 <__aeabi_dmul>
 8011e7a:	a35d      	add	r3, pc, #372	; (adr r3, 8011ff0 <__ieee754_pow+0xa20>)
 8011e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e80:	f7ee fa32 	bl	80002e8 <__aeabi_dsub>
 8011e84:	4622      	mov	r2, r4
 8011e86:	462b      	mov	r3, r5
 8011e88:	f7ee fbe6 	bl	8000658 <__aeabi_dmul>
 8011e8c:	a35a      	add	r3, pc, #360	; (adr r3, 8011ff8 <__ieee754_pow+0xa28>)
 8011e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e92:	f7ee fa2b 	bl	80002ec <__adddf3>
 8011e96:	4622      	mov	r2, r4
 8011e98:	462b      	mov	r3, r5
 8011e9a:	f7ee fbdd 	bl	8000658 <__aeabi_dmul>
 8011e9e:	a358      	add	r3, pc, #352	; (adr r3, 8012000 <__ieee754_pow+0xa30>)
 8011ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea4:	f7ee fa20 	bl	80002e8 <__aeabi_dsub>
 8011ea8:	4622      	mov	r2, r4
 8011eaa:	462b      	mov	r3, r5
 8011eac:	f7ee fbd4 	bl	8000658 <__aeabi_dmul>
 8011eb0:	a355      	add	r3, pc, #340	; (adr r3, 8012008 <__ieee754_pow+0xa38>)
 8011eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb6:	f7ee fa19 	bl	80002ec <__adddf3>
 8011eba:	4622      	mov	r2, r4
 8011ebc:	462b      	mov	r3, r5
 8011ebe:	f7ee fbcb 	bl	8000658 <__aeabi_dmul>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4649      	mov	r1, r9
 8011eca:	f7ee fa0d 	bl	80002e8 <__aeabi_dsub>
 8011ece:	4604      	mov	r4, r0
 8011ed0:	460d      	mov	r5, r1
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	4649      	mov	r1, r9
 8011eda:	f7ee fbbd 	bl	8000658 <__aeabi_dmul>
 8011ede:	2200      	movs	r2, #0
 8011ee0:	ec41 0b19 	vmov	d9, r0, r1
 8011ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ee8:	4620      	mov	r0, r4
 8011eea:	4629      	mov	r1, r5
 8011eec:	f7ee f9fc 	bl	80002e8 <__aeabi_dsub>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	ec51 0b19 	vmov	r0, r1, d9
 8011ef8:	f7ee fcd8 	bl	80008ac <__aeabi_ddiv>
 8011efc:	4632      	mov	r2, r6
 8011efe:	4604      	mov	r4, r0
 8011f00:	460d      	mov	r5, r1
 8011f02:	463b      	mov	r3, r7
 8011f04:	4640      	mov	r0, r8
 8011f06:	4649      	mov	r1, r9
 8011f08:	f7ee fba6 	bl	8000658 <__aeabi_dmul>
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	463b      	mov	r3, r7
 8011f10:	f7ee f9ec 	bl	80002ec <__adddf3>
 8011f14:	4602      	mov	r2, r0
 8011f16:	460b      	mov	r3, r1
 8011f18:	4620      	mov	r0, r4
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	f7ee f9e4 	bl	80002e8 <__aeabi_dsub>
 8011f20:	4642      	mov	r2, r8
 8011f22:	464b      	mov	r3, r9
 8011f24:	f7ee f9e0 	bl	80002e8 <__aeabi_dsub>
 8011f28:	460b      	mov	r3, r1
 8011f2a:	4602      	mov	r2, r0
 8011f2c:	493a      	ldr	r1, [pc, #232]	; (8012018 <__ieee754_pow+0xa48>)
 8011f2e:	2000      	movs	r0, #0
 8011f30:	f7ee f9da 	bl	80002e8 <__aeabi_dsub>
 8011f34:	ec41 0b10 	vmov	d0, r0, r1
 8011f38:	ee10 3a90 	vmov	r3, s1
 8011f3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f44:	da2b      	bge.n	8011f9e <__ieee754_pow+0x9ce>
 8011f46:	4650      	mov	r0, sl
 8011f48:	f000 fb0a 	bl	8012560 <scalbn>
 8011f4c:	ec51 0b10 	vmov	r0, r1, d0
 8011f50:	ec53 2b18 	vmov	r2, r3, d8
 8011f54:	f7ff bbed 	b.w	8011732 <__ieee754_pow+0x162>
 8011f58:	4b30      	ldr	r3, [pc, #192]	; (801201c <__ieee754_pow+0xa4c>)
 8011f5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011f5e:	429e      	cmp	r6, r3
 8011f60:	f77f af0c 	ble.w	8011d7c <__ieee754_pow+0x7ac>
 8011f64:	4b2e      	ldr	r3, [pc, #184]	; (8012020 <__ieee754_pow+0xa50>)
 8011f66:	440b      	add	r3, r1
 8011f68:	4303      	orrs	r3, r0
 8011f6a:	d009      	beq.n	8011f80 <__ieee754_pow+0x9b0>
 8011f6c:	ec51 0b18 	vmov	r0, r1, d8
 8011f70:	2200      	movs	r2, #0
 8011f72:	2300      	movs	r3, #0
 8011f74:	f7ee fde2 	bl	8000b3c <__aeabi_dcmplt>
 8011f78:	3800      	subs	r0, #0
 8011f7a:	bf18      	it	ne
 8011f7c:	2001      	movne	r0, #1
 8011f7e:	e447      	b.n	8011810 <__ieee754_pow+0x240>
 8011f80:	4622      	mov	r2, r4
 8011f82:	462b      	mov	r3, r5
 8011f84:	f7ee f9b0 	bl	80002e8 <__aeabi_dsub>
 8011f88:	4642      	mov	r2, r8
 8011f8a:	464b      	mov	r3, r9
 8011f8c:	f7ee fdea 	bl	8000b64 <__aeabi_dcmpge>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	f43f aef3 	beq.w	8011d7c <__ieee754_pow+0x7ac>
 8011f96:	e7e9      	b.n	8011f6c <__ieee754_pow+0x99c>
 8011f98:	f04f 0a00 	mov.w	sl, #0
 8011f9c:	e71a      	b.n	8011dd4 <__ieee754_pow+0x804>
 8011f9e:	ec51 0b10 	vmov	r0, r1, d0
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	e7d4      	b.n	8011f50 <__ieee754_pow+0x980>
 8011fa6:	491c      	ldr	r1, [pc, #112]	; (8012018 <__ieee754_pow+0xa48>)
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7ff bb30 	b.w	801160e <__ieee754_pow+0x3e>
 8011fae:	2000      	movs	r0, #0
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	f7ff bb2c 	b.w	801160e <__ieee754_pow+0x3e>
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	4639      	mov	r1, r7
 8011fba:	f7ff bb28 	b.w	801160e <__ieee754_pow+0x3e>
 8011fbe:	9204      	str	r2, [sp, #16]
 8011fc0:	f7ff bb7a 	b.w	80116b8 <__ieee754_pow+0xe8>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	f7ff bb64 	b.w	8011692 <__ieee754_pow+0xc2>
 8011fca:	bf00      	nop
 8011fcc:	f3af 8000 	nop.w
 8011fd0:	00000000 	.word	0x00000000
 8011fd4:	3fe62e43 	.word	0x3fe62e43
 8011fd8:	fefa39ef 	.word	0xfefa39ef
 8011fdc:	3fe62e42 	.word	0x3fe62e42
 8011fe0:	0ca86c39 	.word	0x0ca86c39
 8011fe4:	be205c61 	.word	0xbe205c61
 8011fe8:	72bea4d0 	.word	0x72bea4d0
 8011fec:	3e663769 	.word	0x3e663769
 8011ff0:	c5d26bf1 	.word	0xc5d26bf1
 8011ff4:	3ebbbd41 	.word	0x3ebbbd41
 8011ff8:	af25de2c 	.word	0xaf25de2c
 8011ffc:	3f11566a 	.word	0x3f11566a
 8012000:	16bebd93 	.word	0x16bebd93
 8012004:	3f66c16c 	.word	0x3f66c16c
 8012008:	5555553e 	.word	0x5555553e
 801200c:	3fc55555 	.word	0x3fc55555
 8012010:	3fe00000 	.word	0x3fe00000
 8012014:	000fffff 	.word	0x000fffff
 8012018:	3ff00000 	.word	0x3ff00000
 801201c:	4090cbff 	.word	0x4090cbff
 8012020:	3f6f3400 	.word	0x3f6f3400
 8012024:	652b82fe 	.word	0x652b82fe
 8012028:	3c971547 	.word	0x3c971547

0801202c <__ieee754_sqrt>:
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	ec55 4b10 	vmov	r4, r5, d0
 8012034:	4e55      	ldr	r6, [pc, #340]	; (801218c <__ieee754_sqrt+0x160>)
 8012036:	43ae      	bics	r6, r5
 8012038:	ee10 0a10 	vmov	r0, s0
 801203c:	ee10 3a10 	vmov	r3, s0
 8012040:	462a      	mov	r2, r5
 8012042:	4629      	mov	r1, r5
 8012044:	d110      	bne.n	8012068 <__ieee754_sqrt+0x3c>
 8012046:	ee10 2a10 	vmov	r2, s0
 801204a:	462b      	mov	r3, r5
 801204c:	f7ee fb04 	bl	8000658 <__aeabi_dmul>
 8012050:	4602      	mov	r2, r0
 8012052:	460b      	mov	r3, r1
 8012054:	4620      	mov	r0, r4
 8012056:	4629      	mov	r1, r5
 8012058:	f7ee f948 	bl	80002ec <__adddf3>
 801205c:	4604      	mov	r4, r0
 801205e:	460d      	mov	r5, r1
 8012060:	ec45 4b10 	vmov	d0, r4, r5
 8012064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012068:	2d00      	cmp	r5, #0
 801206a:	dc10      	bgt.n	801208e <__ieee754_sqrt+0x62>
 801206c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012070:	4330      	orrs	r0, r6
 8012072:	d0f5      	beq.n	8012060 <__ieee754_sqrt+0x34>
 8012074:	b15d      	cbz	r5, 801208e <__ieee754_sqrt+0x62>
 8012076:	ee10 2a10 	vmov	r2, s0
 801207a:	462b      	mov	r3, r5
 801207c:	ee10 0a10 	vmov	r0, s0
 8012080:	f7ee f932 	bl	80002e8 <__aeabi_dsub>
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	f7ee fc10 	bl	80008ac <__aeabi_ddiv>
 801208c:	e7e6      	b.n	801205c <__ieee754_sqrt+0x30>
 801208e:	1512      	asrs	r2, r2, #20
 8012090:	d074      	beq.n	801217c <__ieee754_sqrt+0x150>
 8012092:	07d4      	lsls	r4, r2, #31
 8012094:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012098:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801209c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80120a0:	bf5e      	ittt	pl
 80120a2:	0fda      	lsrpl	r2, r3, #31
 80120a4:	005b      	lslpl	r3, r3, #1
 80120a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80120aa:	2400      	movs	r4, #0
 80120ac:	0fda      	lsrs	r2, r3, #31
 80120ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80120b2:	107f      	asrs	r7, r7, #1
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	2516      	movs	r5, #22
 80120b8:	4620      	mov	r0, r4
 80120ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80120be:	1886      	adds	r6, r0, r2
 80120c0:	428e      	cmp	r6, r1
 80120c2:	bfde      	ittt	le
 80120c4:	1b89      	suble	r1, r1, r6
 80120c6:	18b0      	addle	r0, r6, r2
 80120c8:	18a4      	addle	r4, r4, r2
 80120ca:	0049      	lsls	r1, r1, #1
 80120cc:	3d01      	subs	r5, #1
 80120ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80120d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80120d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80120da:	d1f0      	bne.n	80120be <__ieee754_sqrt+0x92>
 80120dc:	462a      	mov	r2, r5
 80120de:	f04f 0e20 	mov.w	lr, #32
 80120e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80120e6:	4281      	cmp	r1, r0
 80120e8:	eb06 0c05 	add.w	ip, r6, r5
 80120ec:	dc02      	bgt.n	80120f4 <__ieee754_sqrt+0xc8>
 80120ee:	d113      	bne.n	8012118 <__ieee754_sqrt+0xec>
 80120f0:	459c      	cmp	ip, r3
 80120f2:	d811      	bhi.n	8012118 <__ieee754_sqrt+0xec>
 80120f4:	f1bc 0f00 	cmp.w	ip, #0
 80120f8:	eb0c 0506 	add.w	r5, ip, r6
 80120fc:	da43      	bge.n	8012186 <__ieee754_sqrt+0x15a>
 80120fe:	2d00      	cmp	r5, #0
 8012100:	db41      	blt.n	8012186 <__ieee754_sqrt+0x15a>
 8012102:	f100 0801 	add.w	r8, r0, #1
 8012106:	1a09      	subs	r1, r1, r0
 8012108:	459c      	cmp	ip, r3
 801210a:	bf88      	it	hi
 801210c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012110:	eba3 030c 	sub.w	r3, r3, ip
 8012114:	4432      	add	r2, r6
 8012116:	4640      	mov	r0, r8
 8012118:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801211c:	f1be 0e01 	subs.w	lr, lr, #1
 8012120:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012124:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012128:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801212c:	d1db      	bne.n	80120e6 <__ieee754_sqrt+0xba>
 801212e:	430b      	orrs	r3, r1
 8012130:	d006      	beq.n	8012140 <__ieee754_sqrt+0x114>
 8012132:	1c50      	adds	r0, r2, #1
 8012134:	bf13      	iteet	ne
 8012136:	3201      	addne	r2, #1
 8012138:	3401      	addeq	r4, #1
 801213a:	4672      	moveq	r2, lr
 801213c:	f022 0201 	bicne.w	r2, r2, #1
 8012140:	1063      	asrs	r3, r4, #1
 8012142:	0852      	lsrs	r2, r2, #1
 8012144:	07e1      	lsls	r1, r4, #31
 8012146:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801214a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801214e:	bf48      	it	mi
 8012150:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012154:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012158:	4614      	mov	r4, r2
 801215a:	e781      	b.n	8012060 <__ieee754_sqrt+0x34>
 801215c:	0ad9      	lsrs	r1, r3, #11
 801215e:	3815      	subs	r0, #21
 8012160:	055b      	lsls	r3, r3, #21
 8012162:	2900      	cmp	r1, #0
 8012164:	d0fa      	beq.n	801215c <__ieee754_sqrt+0x130>
 8012166:	02cd      	lsls	r5, r1, #11
 8012168:	d50a      	bpl.n	8012180 <__ieee754_sqrt+0x154>
 801216a:	f1c2 0420 	rsb	r4, r2, #32
 801216e:	fa23 f404 	lsr.w	r4, r3, r4
 8012172:	1e55      	subs	r5, r2, #1
 8012174:	4093      	lsls	r3, r2
 8012176:	4321      	orrs	r1, r4
 8012178:	1b42      	subs	r2, r0, r5
 801217a:	e78a      	b.n	8012092 <__ieee754_sqrt+0x66>
 801217c:	4610      	mov	r0, r2
 801217e:	e7f0      	b.n	8012162 <__ieee754_sqrt+0x136>
 8012180:	0049      	lsls	r1, r1, #1
 8012182:	3201      	adds	r2, #1
 8012184:	e7ef      	b.n	8012166 <__ieee754_sqrt+0x13a>
 8012186:	4680      	mov	r8, r0
 8012188:	e7bd      	b.n	8012106 <__ieee754_sqrt+0xda>
 801218a:	bf00      	nop
 801218c:	7ff00000 	.word	0x7ff00000

08012190 <__ieee754_sqrtf>:
 8012190:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012194:	4770      	bx	lr

08012196 <with_errno>:
 8012196:	b570      	push	{r4, r5, r6, lr}
 8012198:	4604      	mov	r4, r0
 801219a:	460d      	mov	r5, r1
 801219c:	4616      	mov	r6, r2
 801219e:	f7f9 fab9 	bl	800b714 <__errno>
 80121a2:	4629      	mov	r1, r5
 80121a4:	6006      	str	r6, [r0, #0]
 80121a6:	4620      	mov	r0, r4
 80121a8:	bd70      	pop	{r4, r5, r6, pc}

080121aa <xflow>:
 80121aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121ac:	4614      	mov	r4, r2
 80121ae:	461d      	mov	r5, r3
 80121b0:	b108      	cbz	r0, 80121b6 <xflow+0xc>
 80121b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80121b6:	e9cd 2300 	strd	r2, r3, [sp]
 80121ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121be:	4620      	mov	r0, r4
 80121c0:	4629      	mov	r1, r5
 80121c2:	f7ee fa49 	bl	8000658 <__aeabi_dmul>
 80121c6:	2222      	movs	r2, #34	; 0x22
 80121c8:	b003      	add	sp, #12
 80121ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121ce:	f7ff bfe2 	b.w	8012196 <with_errno>

080121d2 <__math_uflow>:
 80121d2:	b508      	push	{r3, lr}
 80121d4:	2200      	movs	r2, #0
 80121d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121da:	f7ff ffe6 	bl	80121aa <xflow>
 80121de:	ec41 0b10 	vmov	d0, r0, r1
 80121e2:	bd08      	pop	{r3, pc}

080121e4 <__math_oflow>:
 80121e4:	b508      	push	{r3, lr}
 80121e6:	2200      	movs	r2, #0
 80121e8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80121ec:	f7ff ffdd 	bl	80121aa <xflow>
 80121f0:	ec41 0b10 	vmov	d0, r0, r1
 80121f4:	bd08      	pop	{r3, pc}
	...

080121f8 <atan>:
 80121f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121fc:	ec55 4b10 	vmov	r4, r5, d0
 8012200:	4bc3      	ldr	r3, [pc, #780]	; (8012510 <atan+0x318>)
 8012202:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012206:	429e      	cmp	r6, r3
 8012208:	46ab      	mov	fp, r5
 801220a:	dd18      	ble.n	801223e <atan+0x46>
 801220c:	4bc1      	ldr	r3, [pc, #772]	; (8012514 <atan+0x31c>)
 801220e:	429e      	cmp	r6, r3
 8012210:	dc01      	bgt.n	8012216 <atan+0x1e>
 8012212:	d109      	bne.n	8012228 <atan+0x30>
 8012214:	b144      	cbz	r4, 8012228 <atan+0x30>
 8012216:	4622      	mov	r2, r4
 8012218:	462b      	mov	r3, r5
 801221a:	4620      	mov	r0, r4
 801221c:	4629      	mov	r1, r5
 801221e:	f7ee f865 	bl	80002ec <__adddf3>
 8012222:	4604      	mov	r4, r0
 8012224:	460d      	mov	r5, r1
 8012226:	e006      	b.n	8012236 <atan+0x3e>
 8012228:	f1bb 0f00 	cmp.w	fp, #0
 801222c:	f300 8131 	bgt.w	8012492 <atan+0x29a>
 8012230:	a59b      	add	r5, pc, #620	; (adr r5, 80124a0 <atan+0x2a8>)
 8012232:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012236:	ec45 4b10 	vmov	d0, r4, r5
 801223a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223e:	4bb6      	ldr	r3, [pc, #728]	; (8012518 <atan+0x320>)
 8012240:	429e      	cmp	r6, r3
 8012242:	dc14      	bgt.n	801226e <atan+0x76>
 8012244:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012248:	429e      	cmp	r6, r3
 801224a:	dc0d      	bgt.n	8012268 <atan+0x70>
 801224c:	a396      	add	r3, pc, #600	; (adr r3, 80124a8 <atan+0x2b0>)
 801224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012252:	ee10 0a10 	vmov	r0, s0
 8012256:	4629      	mov	r1, r5
 8012258:	f7ee f848 	bl	80002ec <__adddf3>
 801225c:	4baf      	ldr	r3, [pc, #700]	; (801251c <atan+0x324>)
 801225e:	2200      	movs	r2, #0
 8012260:	f7ee fc8a 	bl	8000b78 <__aeabi_dcmpgt>
 8012264:	2800      	cmp	r0, #0
 8012266:	d1e6      	bne.n	8012236 <atan+0x3e>
 8012268:	f04f 3aff 	mov.w	sl, #4294967295
 801226c:	e02b      	b.n	80122c6 <atan+0xce>
 801226e:	f000 f963 	bl	8012538 <fabs>
 8012272:	4bab      	ldr	r3, [pc, #684]	; (8012520 <atan+0x328>)
 8012274:	429e      	cmp	r6, r3
 8012276:	ec55 4b10 	vmov	r4, r5, d0
 801227a:	f300 80bf 	bgt.w	80123fc <atan+0x204>
 801227e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012282:	429e      	cmp	r6, r3
 8012284:	f300 80a0 	bgt.w	80123c8 <atan+0x1d0>
 8012288:	ee10 2a10 	vmov	r2, s0
 801228c:	ee10 0a10 	vmov	r0, s0
 8012290:	462b      	mov	r3, r5
 8012292:	4629      	mov	r1, r5
 8012294:	f7ee f82a 	bl	80002ec <__adddf3>
 8012298:	4ba0      	ldr	r3, [pc, #640]	; (801251c <atan+0x324>)
 801229a:	2200      	movs	r2, #0
 801229c:	f7ee f824 	bl	80002e8 <__aeabi_dsub>
 80122a0:	2200      	movs	r2, #0
 80122a2:	4606      	mov	r6, r0
 80122a4:	460f      	mov	r7, r1
 80122a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122aa:	4620      	mov	r0, r4
 80122ac:	4629      	mov	r1, r5
 80122ae:	f7ee f81d 	bl	80002ec <__adddf3>
 80122b2:	4602      	mov	r2, r0
 80122b4:	460b      	mov	r3, r1
 80122b6:	4630      	mov	r0, r6
 80122b8:	4639      	mov	r1, r7
 80122ba:	f7ee faf7 	bl	80008ac <__aeabi_ddiv>
 80122be:	f04f 0a00 	mov.w	sl, #0
 80122c2:	4604      	mov	r4, r0
 80122c4:	460d      	mov	r5, r1
 80122c6:	4622      	mov	r2, r4
 80122c8:	462b      	mov	r3, r5
 80122ca:	4620      	mov	r0, r4
 80122cc:	4629      	mov	r1, r5
 80122ce:	f7ee f9c3 	bl	8000658 <__aeabi_dmul>
 80122d2:	4602      	mov	r2, r0
 80122d4:	460b      	mov	r3, r1
 80122d6:	4680      	mov	r8, r0
 80122d8:	4689      	mov	r9, r1
 80122da:	f7ee f9bd 	bl	8000658 <__aeabi_dmul>
 80122de:	a374      	add	r3, pc, #464	; (adr r3, 80124b0 <atan+0x2b8>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	f7ee f9b6 	bl	8000658 <__aeabi_dmul>
 80122ec:	a372      	add	r3, pc, #456	; (adr r3, 80124b8 <atan+0x2c0>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	f7ed fffb 	bl	80002ec <__adddf3>
 80122f6:	4632      	mov	r2, r6
 80122f8:	463b      	mov	r3, r7
 80122fa:	f7ee f9ad 	bl	8000658 <__aeabi_dmul>
 80122fe:	a370      	add	r3, pc, #448	; (adr r3, 80124c0 <atan+0x2c8>)
 8012300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012304:	f7ed fff2 	bl	80002ec <__adddf3>
 8012308:	4632      	mov	r2, r6
 801230a:	463b      	mov	r3, r7
 801230c:	f7ee f9a4 	bl	8000658 <__aeabi_dmul>
 8012310:	a36d      	add	r3, pc, #436	; (adr r3, 80124c8 <atan+0x2d0>)
 8012312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012316:	f7ed ffe9 	bl	80002ec <__adddf3>
 801231a:	4632      	mov	r2, r6
 801231c:	463b      	mov	r3, r7
 801231e:	f7ee f99b 	bl	8000658 <__aeabi_dmul>
 8012322:	a36b      	add	r3, pc, #428	; (adr r3, 80124d0 <atan+0x2d8>)
 8012324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012328:	f7ed ffe0 	bl	80002ec <__adddf3>
 801232c:	4632      	mov	r2, r6
 801232e:	463b      	mov	r3, r7
 8012330:	f7ee f992 	bl	8000658 <__aeabi_dmul>
 8012334:	a368      	add	r3, pc, #416	; (adr r3, 80124d8 <atan+0x2e0>)
 8012336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233a:	f7ed ffd7 	bl	80002ec <__adddf3>
 801233e:	4642      	mov	r2, r8
 8012340:	464b      	mov	r3, r9
 8012342:	f7ee f989 	bl	8000658 <__aeabi_dmul>
 8012346:	a366      	add	r3, pc, #408	; (adr r3, 80124e0 <atan+0x2e8>)
 8012348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234c:	4680      	mov	r8, r0
 801234e:	4689      	mov	r9, r1
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	f7ee f980 	bl	8000658 <__aeabi_dmul>
 8012358:	a363      	add	r3, pc, #396	; (adr r3, 80124e8 <atan+0x2f0>)
 801235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235e:	f7ed ffc3 	bl	80002e8 <__aeabi_dsub>
 8012362:	4632      	mov	r2, r6
 8012364:	463b      	mov	r3, r7
 8012366:	f7ee f977 	bl	8000658 <__aeabi_dmul>
 801236a:	a361      	add	r3, pc, #388	; (adr r3, 80124f0 <atan+0x2f8>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	f7ed ffba 	bl	80002e8 <__aeabi_dsub>
 8012374:	4632      	mov	r2, r6
 8012376:	463b      	mov	r3, r7
 8012378:	f7ee f96e 	bl	8000658 <__aeabi_dmul>
 801237c:	a35e      	add	r3, pc, #376	; (adr r3, 80124f8 <atan+0x300>)
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	f7ed ffb1 	bl	80002e8 <__aeabi_dsub>
 8012386:	4632      	mov	r2, r6
 8012388:	463b      	mov	r3, r7
 801238a:	f7ee f965 	bl	8000658 <__aeabi_dmul>
 801238e:	a35c      	add	r3, pc, #368	; (adr r3, 8012500 <atan+0x308>)
 8012390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012394:	f7ed ffa8 	bl	80002e8 <__aeabi_dsub>
 8012398:	4632      	mov	r2, r6
 801239a:	463b      	mov	r3, r7
 801239c:	f7ee f95c 	bl	8000658 <__aeabi_dmul>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4640      	mov	r0, r8
 80123a6:	4649      	mov	r1, r9
 80123a8:	f7ed ffa0 	bl	80002ec <__adddf3>
 80123ac:	4622      	mov	r2, r4
 80123ae:	462b      	mov	r3, r5
 80123b0:	f7ee f952 	bl	8000658 <__aeabi_dmul>
 80123b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	d14b      	bne.n	8012456 <atan+0x25e>
 80123be:	4620      	mov	r0, r4
 80123c0:	4629      	mov	r1, r5
 80123c2:	f7ed ff91 	bl	80002e8 <__aeabi_dsub>
 80123c6:	e72c      	b.n	8012222 <atan+0x2a>
 80123c8:	ee10 0a10 	vmov	r0, s0
 80123cc:	4b53      	ldr	r3, [pc, #332]	; (801251c <atan+0x324>)
 80123ce:	2200      	movs	r2, #0
 80123d0:	4629      	mov	r1, r5
 80123d2:	f7ed ff89 	bl	80002e8 <__aeabi_dsub>
 80123d6:	4b51      	ldr	r3, [pc, #324]	; (801251c <atan+0x324>)
 80123d8:	4606      	mov	r6, r0
 80123da:	460f      	mov	r7, r1
 80123dc:	2200      	movs	r2, #0
 80123de:	4620      	mov	r0, r4
 80123e0:	4629      	mov	r1, r5
 80123e2:	f7ed ff83 	bl	80002ec <__adddf3>
 80123e6:	4602      	mov	r2, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	4630      	mov	r0, r6
 80123ec:	4639      	mov	r1, r7
 80123ee:	f7ee fa5d 	bl	80008ac <__aeabi_ddiv>
 80123f2:	f04f 0a01 	mov.w	sl, #1
 80123f6:	4604      	mov	r4, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	e764      	b.n	80122c6 <atan+0xce>
 80123fc:	4b49      	ldr	r3, [pc, #292]	; (8012524 <atan+0x32c>)
 80123fe:	429e      	cmp	r6, r3
 8012400:	da1d      	bge.n	801243e <atan+0x246>
 8012402:	ee10 0a10 	vmov	r0, s0
 8012406:	4b48      	ldr	r3, [pc, #288]	; (8012528 <atan+0x330>)
 8012408:	2200      	movs	r2, #0
 801240a:	4629      	mov	r1, r5
 801240c:	f7ed ff6c 	bl	80002e8 <__aeabi_dsub>
 8012410:	4b45      	ldr	r3, [pc, #276]	; (8012528 <atan+0x330>)
 8012412:	4606      	mov	r6, r0
 8012414:	460f      	mov	r7, r1
 8012416:	2200      	movs	r2, #0
 8012418:	4620      	mov	r0, r4
 801241a:	4629      	mov	r1, r5
 801241c:	f7ee f91c 	bl	8000658 <__aeabi_dmul>
 8012420:	4b3e      	ldr	r3, [pc, #248]	; (801251c <atan+0x324>)
 8012422:	2200      	movs	r2, #0
 8012424:	f7ed ff62 	bl	80002ec <__adddf3>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4630      	mov	r0, r6
 801242e:	4639      	mov	r1, r7
 8012430:	f7ee fa3c 	bl	80008ac <__aeabi_ddiv>
 8012434:	f04f 0a02 	mov.w	sl, #2
 8012438:	4604      	mov	r4, r0
 801243a:	460d      	mov	r5, r1
 801243c:	e743      	b.n	80122c6 <atan+0xce>
 801243e:	462b      	mov	r3, r5
 8012440:	ee10 2a10 	vmov	r2, s0
 8012444:	4939      	ldr	r1, [pc, #228]	; (801252c <atan+0x334>)
 8012446:	2000      	movs	r0, #0
 8012448:	f7ee fa30 	bl	80008ac <__aeabi_ddiv>
 801244c:	f04f 0a03 	mov.w	sl, #3
 8012450:	4604      	mov	r4, r0
 8012452:	460d      	mov	r5, r1
 8012454:	e737      	b.n	80122c6 <atan+0xce>
 8012456:	4b36      	ldr	r3, [pc, #216]	; (8012530 <atan+0x338>)
 8012458:	4e36      	ldr	r6, [pc, #216]	; (8012534 <atan+0x33c>)
 801245a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801245e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012462:	e9da 2300 	ldrd	r2, r3, [sl]
 8012466:	f7ed ff3f 	bl	80002e8 <__aeabi_dsub>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ed ff3b 	bl	80002e8 <__aeabi_dsub>
 8012472:	4602      	mov	r2, r0
 8012474:	460b      	mov	r3, r1
 8012476:	e9d6 0100 	ldrd	r0, r1, [r6]
 801247a:	f7ed ff35 	bl	80002e8 <__aeabi_dsub>
 801247e:	f1bb 0f00 	cmp.w	fp, #0
 8012482:	4604      	mov	r4, r0
 8012484:	460d      	mov	r5, r1
 8012486:	f6bf aed6 	bge.w	8012236 <atan+0x3e>
 801248a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801248e:	461d      	mov	r5, r3
 8012490:	e6d1      	b.n	8012236 <atan+0x3e>
 8012492:	a51d      	add	r5, pc, #116	; (adr r5, 8012508 <atan+0x310>)
 8012494:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012498:	e6cd      	b.n	8012236 <atan+0x3e>
 801249a:	bf00      	nop
 801249c:	f3af 8000 	nop.w
 80124a0:	54442d18 	.word	0x54442d18
 80124a4:	bff921fb 	.word	0xbff921fb
 80124a8:	8800759c 	.word	0x8800759c
 80124ac:	7e37e43c 	.word	0x7e37e43c
 80124b0:	e322da11 	.word	0xe322da11
 80124b4:	3f90ad3a 	.word	0x3f90ad3a
 80124b8:	24760deb 	.word	0x24760deb
 80124bc:	3fa97b4b 	.word	0x3fa97b4b
 80124c0:	a0d03d51 	.word	0xa0d03d51
 80124c4:	3fb10d66 	.word	0x3fb10d66
 80124c8:	c54c206e 	.word	0xc54c206e
 80124cc:	3fb745cd 	.word	0x3fb745cd
 80124d0:	920083ff 	.word	0x920083ff
 80124d4:	3fc24924 	.word	0x3fc24924
 80124d8:	5555550d 	.word	0x5555550d
 80124dc:	3fd55555 	.word	0x3fd55555
 80124e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80124e4:	bfa2b444 	.word	0xbfa2b444
 80124e8:	52defd9a 	.word	0x52defd9a
 80124ec:	3fadde2d 	.word	0x3fadde2d
 80124f0:	af749a6d 	.word	0xaf749a6d
 80124f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80124f8:	fe231671 	.word	0xfe231671
 80124fc:	3fbc71c6 	.word	0x3fbc71c6
 8012500:	9998ebc4 	.word	0x9998ebc4
 8012504:	3fc99999 	.word	0x3fc99999
 8012508:	54442d18 	.word	0x54442d18
 801250c:	3ff921fb 	.word	0x3ff921fb
 8012510:	440fffff 	.word	0x440fffff
 8012514:	7ff00000 	.word	0x7ff00000
 8012518:	3fdbffff 	.word	0x3fdbffff
 801251c:	3ff00000 	.word	0x3ff00000
 8012520:	3ff2ffff 	.word	0x3ff2ffff
 8012524:	40038000 	.word	0x40038000
 8012528:	3ff80000 	.word	0x3ff80000
 801252c:	bff00000 	.word	0xbff00000
 8012530:	08012c78 	.word	0x08012c78
 8012534:	08012c58 	.word	0x08012c58

08012538 <fabs>:
 8012538:	ec51 0b10 	vmov	r0, r1, d0
 801253c:	ee10 2a10 	vmov	r2, s0
 8012540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012544:	ec43 2b10 	vmov	d0, r2, r3
 8012548:	4770      	bx	lr

0801254a <finite>:
 801254a:	b082      	sub	sp, #8
 801254c:	ed8d 0b00 	vstr	d0, [sp]
 8012550:	9801      	ldr	r0, [sp, #4]
 8012552:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012556:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801255a:	0fc0      	lsrs	r0, r0, #31
 801255c:	b002      	add	sp, #8
 801255e:	4770      	bx	lr

08012560 <scalbn>:
 8012560:	b570      	push	{r4, r5, r6, lr}
 8012562:	ec55 4b10 	vmov	r4, r5, d0
 8012566:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801256a:	4606      	mov	r6, r0
 801256c:	462b      	mov	r3, r5
 801256e:	b99a      	cbnz	r2, 8012598 <scalbn+0x38>
 8012570:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012574:	4323      	orrs	r3, r4
 8012576:	d036      	beq.n	80125e6 <scalbn+0x86>
 8012578:	4b39      	ldr	r3, [pc, #228]	; (8012660 <scalbn+0x100>)
 801257a:	4629      	mov	r1, r5
 801257c:	ee10 0a10 	vmov	r0, s0
 8012580:	2200      	movs	r2, #0
 8012582:	f7ee f869 	bl	8000658 <__aeabi_dmul>
 8012586:	4b37      	ldr	r3, [pc, #220]	; (8012664 <scalbn+0x104>)
 8012588:	429e      	cmp	r6, r3
 801258a:	4604      	mov	r4, r0
 801258c:	460d      	mov	r5, r1
 801258e:	da10      	bge.n	80125b2 <scalbn+0x52>
 8012590:	a32b      	add	r3, pc, #172	; (adr r3, 8012640 <scalbn+0xe0>)
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	e03a      	b.n	801260e <scalbn+0xae>
 8012598:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801259c:	428a      	cmp	r2, r1
 801259e:	d10c      	bne.n	80125ba <scalbn+0x5a>
 80125a0:	ee10 2a10 	vmov	r2, s0
 80125a4:	4620      	mov	r0, r4
 80125a6:	4629      	mov	r1, r5
 80125a8:	f7ed fea0 	bl	80002ec <__adddf3>
 80125ac:	4604      	mov	r4, r0
 80125ae:	460d      	mov	r5, r1
 80125b0:	e019      	b.n	80125e6 <scalbn+0x86>
 80125b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80125b6:	460b      	mov	r3, r1
 80125b8:	3a36      	subs	r2, #54	; 0x36
 80125ba:	4432      	add	r2, r6
 80125bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80125c0:	428a      	cmp	r2, r1
 80125c2:	dd08      	ble.n	80125d6 <scalbn+0x76>
 80125c4:	2d00      	cmp	r5, #0
 80125c6:	a120      	add	r1, pc, #128	; (adr r1, 8012648 <scalbn+0xe8>)
 80125c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125cc:	da1c      	bge.n	8012608 <scalbn+0xa8>
 80125ce:	a120      	add	r1, pc, #128	; (adr r1, 8012650 <scalbn+0xf0>)
 80125d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125d4:	e018      	b.n	8012608 <scalbn+0xa8>
 80125d6:	2a00      	cmp	r2, #0
 80125d8:	dd08      	ble.n	80125ec <scalbn+0x8c>
 80125da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80125de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80125e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80125e6:	ec45 4b10 	vmov	d0, r4, r5
 80125ea:	bd70      	pop	{r4, r5, r6, pc}
 80125ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80125f0:	da19      	bge.n	8012626 <scalbn+0xc6>
 80125f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80125f6:	429e      	cmp	r6, r3
 80125f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80125fc:	dd0a      	ble.n	8012614 <scalbn+0xb4>
 80125fe:	a112      	add	r1, pc, #72	; (adr r1, 8012648 <scalbn+0xe8>)
 8012600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1e2      	bne.n	80125ce <scalbn+0x6e>
 8012608:	a30f      	add	r3, pc, #60	; (adr r3, 8012648 <scalbn+0xe8>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	f7ee f823 	bl	8000658 <__aeabi_dmul>
 8012612:	e7cb      	b.n	80125ac <scalbn+0x4c>
 8012614:	a10a      	add	r1, pc, #40	; (adr r1, 8012640 <scalbn+0xe0>)
 8012616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d0b8      	beq.n	8012590 <scalbn+0x30>
 801261e:	a10e      	add	r1, pc, #56	; (adr r1, 8012658 <scalbn+0xf8>)
 8012620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012624:	e7b4      	b.n	8012590 <scalbn+0x30>
 8012626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801262a:	3236      	adds	r2, #54	; 0x36
 801262c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012630:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012634:	4620      	mov	r0, r4
 8012636:	4b0c      	ldr	r3, [pc, #48]	; (8012668 <scalbn+0x108>)
 8012638:	2200      	movs	r2, #0
 801263a:	e7e8      	b.n	801260e <scalbn+0xae>
 801263c:	f3af 8000 	nop.w
 8012640:	c2f8f359 	.word	0xc2f8f359
 8012644:	01a56e1f 	.word	0x01a56e1f
 8012648:	8800759c 	.word	0x8800759c
 801264c:	7e37e43c 	.word	0x7e37e43c
 8012650:	8800759c 	.word	0x8800759c
 8012654:	fe37e43c 	.word	0xfe37e43c
 8012658:	c2f8f359 	.word	0xc2f8f359
 801265c:	81a56e1f 	.word	0x81a56e1f
 8012660:	43500000 	.word	0x43500000
 8012664:	ffff3cb0 	.word	0xffff3cb0
 8012668:	3c900000 	.word	0x3c900000

0801266c <_init>:
 801266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266e:	bf00      	nop
 8012670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012672:	bc08      	pop	{r3}
 8012674:	469e      	mov	lr, r3
 8012676:	4770      	bx	lr

08012678 <_fini>:
 8012678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267a:	bf00      	nop
 801267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801267e:	bc08      	pop	{r3}
 8012680:	469e      	mov	lr, r3
 8012682:	4770      	bx	lr
