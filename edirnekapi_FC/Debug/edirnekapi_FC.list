
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001751c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  080176f0  080176f0  000276f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183c0  080183c0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080183c0  080183c0  000283c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183c8  080183c8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080183c8  080183c8  000283c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080183cc  080183cc  000283cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080183d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000475c  20000200  080185d0  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000495c  080185d0  0003495c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202b2  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c2e  00000000  00000000  000504e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00055110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  000568f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a46e  00000000  00000000  00057ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253ef  00000000  00000000  0008235e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e609a  00000000  00000000  000a774d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018d7e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eb0  00000000  00000000  0018d838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080176d4 	.word	0x080176d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080176d4 	.word	0x080176d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0000      	movs	r0, r0
	...

080012f8 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001302:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001328 <sqr+0x30>
 8001306:	ed97 0b00 	vldr	d0, [r7]
 800130a:	f014 fb99 	bl	8015a40 <pow>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
}
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000

08001330 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001338:	f005 ff7c 	bl	8007234 <HAL_GetTick>
 800133c:	ee07 0a90 	vmov	s15, r0
 8001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f91e 	bl	8000588 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <algorithm_1_update+0x218>)
 8001352:	f7ff fa9b 	bl	800088c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc63 	bl	8000c28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <algorithm_1_update+0x21c>)
 8001366:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <algorithm_1_update+0x21c>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <algorithm_1_update+0x220>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	a36e      	add	r3, pc, #440	; (adr r3, 8001540 <algorithm_1_update+0x210>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <algorithm_1_update+0x224>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <algorithm_1_update+0x21c>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <algorithm_1_update+0x220>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <algorithm_1_update+0x224>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <algorithm_1_update+0x21c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a60      	ldr	r2, [pc, #384]	; (8001550 <algorithm_1_update+0x220>)
 80013ce:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <algorithm_1_update+0x228>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <algorithm_1_update+0x228>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80ab 	beq.w	8001536 <algorithm_1_update+0x206>
  {
	isUpdated_1 = 0;
 80013e0:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <algorithm_1_update+0x228>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013ec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd09      	ble.n	800140e <algorithm_1_update+0xde>
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <algorithm_1_update+0x22c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001402:	4b57      	ldr	r3, [pc, #348]	; (8001560 <algorithm_1_update+0x230>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a55      	ldr	r2, [pc, #340]	; (8001560 <algorithm_1_update+0x230>)
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e002      	b.n	8001414 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <algorithm_1_update+0x230>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <algorithm_1_update+0x230>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d11c      	bne.n	8001456 <algorithm_1_update+0x126>
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <algorithm_1_update+0x22c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d118      	bne.n	8001456 <algorithm_1_update+0x126>
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <algorithm_1_update+0x234>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d114      	bne.n	8001456 <algorithm_1_update+0x126>
	{
	  isRising = 1;
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <algorithm_1_update+0x22c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001432:	f005 feff 	bl	8007234 <HAL_GetTick>
 8001436:	4603      	mov	r3, r0
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <algorithm_1_update+0x238>)
 800143a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <algorithm_1_update+0x23c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <algorithm_1_update+0x23c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2a02      	cmp	r2, #2
 8001448:	bf38      	it	cc
 800144a:	2202      	movcc	r2, #2
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001450:	4847      	ldr	r0, [pc, #284]	; (8001570 <algorithm_1_update+0x240>)
 8001452:	f002 f999 	bl	8003788 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800145c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d50f      	bpl.n	800148a <algorithm_1_update+0x15a>
 800146a:	f005 fee3 	bl	8007234 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <algorithm_1_update+0x238>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800147a:	4293      	cmp	r3, r2
 800147c:	d905      	bls.n	800148a <algorithm_1_update+0x15a>
	{
	  fallingCounter++;
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <algorithm_1_update+0x244>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <algorithm_1_update+0x244>)
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <algorithm_1_update+0x160>
	}
	else
	{
	  fallingCounter = 0;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <algorithm_1_update+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <algorithm_1_update+0x244>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d120      	bne.n	80014da <algorithm_1_update+0x1aa>
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <algorithm_1_update+0x22c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d11c      	bne.n	80014da <algorithm_1_update+0x1aa>
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <algorithm_1_update+0x234>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <algorithm_1_update+0x1aa>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ae:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001578 <algorithm_1_update+0x248>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dd0e      	ble.n	80014da <algorithm_1_update+0x1aa>
	{
	  isFalling = 1;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <algorithm_1_update+0x234>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <algorithm_1_update+0x23c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <algorithm_1_update+0x23c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2a04      	cmp	r2, #4
 80014ce:	bf38      	it	cc
 80014d0:	2204      	movcc	r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014d6:	f003 fecb 	bl	8005270 <deploy_p_1>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800157c <algorithm_1_update+0x24c>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d50d      	bpl.n	800150a <algorithm_1_update+0x1da>
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <algorithm_1_update+0x234>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d109      	bne.n	800150a <algorithm_1_update+0x1da>
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <algorithm_1_update+0x250>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <algorithm_1_update+0x1da>
	{
		second_p_counter_1++;
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <algorithm_1_update+0x254>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <algorithm_1_update+0x254>)
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <algorithm_1_update+0x1e0>
	}
	else{
		second_p_counter_1 = 0;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <algorithm_1_update+0x254>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <algorithm_1_update+0x254>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d10e      	bne.n	8001536 <algorithm_1_update+0x206>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <algorithm_1_update+0x23c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <algorithm_1_update+0x23c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2a05      	cmp	r2, #5
 8001524:	bf38      	it	cc
 8001526:	2205      	movcc	r2, #5
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <algorithm_1_update+0x250>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001532:	f003 fead 	bl	8005290 <deploy_p_2>
	}
  }
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	9999999a 	.word	0x9999999a
 8001544:	3fb99999 	.word	0x3fb99999
 8001548:	408f4000 	.word	0x408f4000
 800154c:	2000021c 	.word	0x2000021c
 8001550:	20000220 	.word	0x20000220
 8001554:	20000224 	.word	0x20000224
 8001558:	20000248 	.word	0x20000248
 800155c:	20000246 	.word	0x20000246
 8001560:	20000228 	.word	0x20000228
 8001564:	20000244 	.word	0x20000244
 8001568:	2000023c 	.word	0x2000023c
 800156c:	20000008 	.word	0x20000008
 8001570:	2000087c 	.word	0x2000087c
 8001574:	2000022c 	.word	0x2000022c
 8001578:	447a0000 	.word	0x447a0000
 800157c:	440e8000 	.word	0x440e8000
 8001580:	2000024a 	.word	0x2000024a
 8001584:	2000024c 	.word	0x2000024c

08001588 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fff5 	bl	8000588 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f7ff fea7 	bl	80012f8 <sqr>
 80015aa:	ec55 4b10 	vmov	r4, r5, d0
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffe7 	bl	8000588 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b10 	vmov	d0, r2, r3
 80015c2:	f7ff fe99 	bl	80012f8 <sqr>
 80015c6:	ec53 2b10 	vmov	r2, r3, d0
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe7d 	bl	80002cc <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffd1 	bl	8000588 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b10 	vmov	d0, r2, r3
 80015ee:	f7ff fe83 	bl	80012f8 <sqr>
 80015f2:	ec53 2b10 	vmov	r2, r3, d0
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fe67 	bl	80002cc <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fb0f 	bl	8000c28 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	ee00 3a10 	vmov	s0, r3
 8001610:	f014 fab2 	bl	8015b78 <sqrtf>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80018b8 <algorithm_2_update+0x330>
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd39      	ble.n	800169a <algorithm_2_update+0x112>
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <algorithm_2_update+0x334>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d135      	bne.n	800169a <algorithm_2_update+0x112>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001634:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80018c0 <algorithm_2_update+0x338>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d516      	bpl.n	8001670 <algorithm_2_update+0xe8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001648:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80018c4 <algorithm_2_update+0x33c>
 800164c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	dd0c      	ble.n	8001670 <algorithm_2_update+0xe8>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800165c:	4b9a      	ldr	r3, [pc, #616]	; (80018c8 <algorithm_2_update+0x340>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001664:	4b98      	ldr	r3, [pc, #608]	; (80018c8 <algorithm_2_update+0x340>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <algorithm_2_update+0x334>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
		algorithm_2_start_time_u32 = HAL_GetTick();
 8001676:	f005 fddd 	bl	8007234 <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	4a93      	ldr	r2, [pc, #588]	; (80018cc <algorithm_2_update+0x344>)
 800167e:	6013      	str	r3, [r2, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 8001680:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <algorithm_2_update+0x340>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <algorithm_2_update+0x340>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2a02      	cmp	r2, #2
 800168c:	bf38      	it	cc
 800168e:	2202      	movcc	r2, #2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 8001694:	488e      	ldr	r0, [pc, #568]	; (80018d0 <algorithm_2_update+0x348>)
 8001696:	f002 f877 	bl	8003788 <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 12)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016a0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80018d4 <algorithm_2_update+0x34c>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d50c      	bpl.n	80016c8 <algorithm_2_update+0x140>
 80016ae:	4b83      	ldr	r3, [pc, #524]	; (80018bc <algorithm_2_update+0x334>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <algorithm_2_update+0x140>
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <algorithm_2_update+0x350>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b0b      	cmp	r3, #11
 80016bc:	dc04      	bgt.n	80016c8 <algorithm_2_update+0x140>
	{
		burnout_counter++;
 80016be:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <algorithm_2_update+0x350>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a84      	ldr	r2, [pc, #528]	; (80018d8 <algorithm_2_update+0x350>)
 80016c6:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016c8:	4b83      	ldr	r3, [pc, #524]	; (80018d8 <algorithm_2_update+0x350>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b0a      	cmp	r3, #10
 80016ce:	d10c      	bne.n	80016ea <algorithm_2_update+0x162>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016d0:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <algorithm_2_update+0x340>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <algorithm_2_update+0x340>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2a03      	cmp	r2, #3
 80016dc:	bf38      	it	cc
 80016de:	2203      	movcc	r2, #3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016e4:	487a      	ldr	r0, [pc, #488]	; (80018d0 <algorithm_2_update+0x348>)
 80016e6:	f002 f84f 	bl	8003788 <ext_pin_open>
	}

	//quaternion setting to zero
	if((HAL_GetTick() - algorithm_2_start_time_u32) > QUATERNION_ZERO_TIME && is_quaternion_zeroed == 0 && isRising_2 == 1)
 80016ea:	f005 fda3 	bl	8007234 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b76      	ldr	r3, [pc, #472]	; (80018cc <algorithm_2_update+0x344>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d90f      	bls.n	800171e <algorithm_2_update+0x196>
 80016fe:	4b77      	ldr	r3, [pc, #476]	; (80018dc <algorithm_2_update+0x354>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <algorithm_2_update+0x196>
 8001706:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <algorithm_2_update+0x334>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <algorithm_2_update+0x196>
	{
	  quaternionSet_zero();
 800170e:	f004 fa35 	bl	8005b7c <quaternionSet_zero>
	  is_quaternion_zeroed = 1;
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <algorithm_2_update+0x354>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001718:	486d      	ldr	r0, [pc, #436]	; (80018d0 <algorithm_2_update+0x348>)
 800171a:	f002 f835 	bl	8003788 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BMI->angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && HAL_GetTick() - algorithm_2_start_time_u32 > ALGORITHM_2_LOCKOUT_TIME)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8001724:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80018e0 <algorithm_2_update+0x358>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd20      	ble.n	8001774 <algorithm_2_update+0x1ec>
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <algorithm_2_update+0x334>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d11c      	bne.n	8001774 <algorithm_2_update+0x1ec>
 800173a:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <algorithm_2_update+0x35c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <algorithm_2_update+0x1ec>
 8001742:	f005 fd77 	bl	8007234 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	4b60      	ldr	r3, [pc, #384]	; (80018cc <algorithm_2_update+0x344>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001752:	4293      	cmp	r3, r2
 8001754:	d90e      	bls.n	8001774 <algorithm_2_update+0x1ec>
	{
		isFalling_2 = 1;
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <algorithm_2_update+0x35c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <algorithm_2_update+0x340>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <algorithm_2_update+0x340>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2a04      	cmp	r2, #4
 8001768:	bf38      	it	cc
 800176a:	2204      	movcc	r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001770:	f003 fd7e 	bl	8005270 <deploy_p_1>
	}

	if(is_BME_ok == 1)
 8001774:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <algorithm_2_update+0x360>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12d      	bne.n	80017d8 <algorithm_2_update+0x250>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001782:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80018ec <algorithm_2_update+0x364>
 8001786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d50d      	bpl.n	80017ac <algorithm_2_update+0x224>
 8001790:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <algorithm_2_update+0x35c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d109      	bne.n	80017ac <algorithm_2_update+0x224>
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <algorithm_2_update+0x368>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <algorithm_2_update+0x224>
		{
			secondP_counter++;
 80017a0:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <algorithm_2_update+0x36c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <algorithm_2_update+0x36c>)
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e002      	b.n	80017b2 <algorithm_2_update+0x22a>
		}
		else{
			secondP_counter = 0;
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <algorithm_2_update+0x36c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <algorithm_2_update+0x36c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d10e      	bne.n	80017d8 <algorithm_2_update+0x250>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <algorithm_2_update+0x340>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <algorithm_2_update+0x340>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2a05      	cmp	r2, #5
 80017c6:	bf38      	it	cc
 80017c8:	2205      	movcc	r2, #5
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <algorithm_2_update+0x368>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017d4:	f003 fd5c 	bl	8005290 <deploy_p_2>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f7ff fd87 	bl	80012f8 <sqr>
 80017ea:	ec55 4b10 	vmov	r4, r5, d0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f7ff fd7c 	bl	80012f8 <sqr>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd60 	bl	80002cc <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800181a:	eeb0 0a47 	vmov.f32	s0, s14
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	f7ff fd69 	bl	80012f8 <sqr>
 8001826:	ec53 2b10 	vmov	r2, r3, d0
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fd4d 	bl	80002cc <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f014 f96d 	bl	8015b20 <sqrt>
 8001846:	ec51 0b10 	vmov	r0, r1, d0
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <algorithm_2_update+0x370>)
 8001850:	f7ff f964 	bl	8000b1c <__aeabi_dcmplt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d011      	beq.n	800187e <algorithm_2_update+0x2f6>
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <algorithm_2_update+0x35c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <algorithm_2_update+0x2f6>
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <algorithm_2_update+0x368>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d109      	bne.n	800187e <algorithm_2_update+0x2f6>
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <algorithm_2_update+0x374>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <algorithm_2_update+0x2f6>
	{
			TD_counter++;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <algorithm_2_update+0x378>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <algorithm_2_update+0x378>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e002      	b.n	8001884 <algorithm_2_update+0x2fc>
	}
	else{
		TD_counter = 0;
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <algorithm_2_update+0x378>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <algorithm_2_update+0x378>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188c:	dd0f      	ble.n	80018ae <algorithm_2_update+0x326>
	{
		is_TD = 1;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <algorithm_2_update+0x374>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <algorithm_2_update+0x340>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <algorithm_2_update+0x340>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2a06      	cmp	r2, #6
 80018a0:	bf38      	it	cc
 80018a2:	2206      	movcc	r2, #6
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <algorithm_2_update+0x348>)
 80018aa:	f001 ff6d 	bl	8003788 <ext_pin_open>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	453b8000 	.word	0x453b8000
 80018bc:	20000247 	.word	0x20000247
 80018c0:	43480000 	.word	0x43480000
 80018c4:	c3480000 	.word	0xc3480000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000240 	.word	0x20000240
 80018d0:	2000087c 	.word	0x2000087c
 80018d4:	c4fa0000 	.word	0xc4fa0000
 80018d8:	20000250 	.word	0x20000250
 80018dc:	20000230 	.word	0x20000230
 80018e0:	42a00000 	.word	0x42a00000
 80018e4:	20000245 	.word	0x20000245
 80018e8:	200008c4 	.word	0x200008c4
 80018ec:	440e8000 	.word	0x440e8000
 80018f0:	20000249 	.word	0x20000249
 80018f4:	20000238 	.word	0x20000238
 80018f8:	40240000 	.word	0x40240000
 80018fc:	20000254 	.word	0x20000254
 8001900:	20000234 	.word	0x20000234

08001904 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <bme280_getVals+0xac>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	2301      	movs	r3, #1
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	22f3      	movs	r2, #243	; 0xf3
 800191e:	21ec      	movs	r1, #236	; 0xec
 8001920:	f007 fbbc 	bl	800909c <HAL_I2C_Mem_Read>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <bme280_getVals+0xb0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 8001932:	793b      	ldrb	r3, [r7, #4]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d035      	beq.n	80019a8 <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <bme280_getVals+0xac>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2314      	movs	r3, #20
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2308      	movs	r3, #8
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	22f7      	movs	r2, #247	; 0xf7
 8001950:	21ec      	movs	r1, #236	; 0xec
 8001952:	f007 fba3 	bl	800909c <HAL_I2C_Mem_Read>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d123      	bne.n	80019a8 <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <bme280_getVals+0xb0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	031a      	lsls	r2, r3, #12
 800196e:	7a3b      	ldrb	r3, [r7, #8]
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4313      	orrs	r3, r2
 8001974:	7a7a      	ldrb	r2, [r7, #9]
 8001976:	0912      	lsrs	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	431a      	orrs	r2, r3
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <bme280_getVals+0xb0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 8001982:	793b      	ldrb	r3, [r7, #4]
 8001984:	031a      	lsls	r2, r3, #12
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4313      	orrs	r3, r2
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	0912      	lsrs	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	431a      	orrs	r2, r3
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <bme280_getVals+0xb0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 800199a:	7abb      	ldrb	r3, [r7, #10]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	7afa      	ldrb	r2, [r7, #11]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <bme280_getVals+0xb0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000258 	.word	0x20000258
 80019b4:	2000025c 	.word	0x2000025c

080019b8 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <bme280_get_altitude+0xd0>)
 80019c0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <bme280_get_altitude+0xd4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019d2:	ee16 0a90 	vmov	r0, s13
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a78 <bme280_get_altitude+0xc0>
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f014 f82b 	bl	8015a40 <pow>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <bme280_get_altitude+0xd8>)
 80019f4:	f7fe fc68 	bl	80002c8 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	a31f      	add	r3, pc, #124	; (adr r3, 8001a80 <bme280_get_altitude+0xc8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fe17 	bl	8000638 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f909 	bl	8000c28 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	ed97 7a00 	vldr	s14, [r7]
 8001a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dc00      	bgt.n	8001a4e <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a4c:	e00e      	b.n	8001a6c <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d005      	beq.n	8001a6c <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	ccd9456c 	.word	0xccd9456c
 8001a7c:	3fc85b95 	.word	0x3fc85b95
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40e5a540 	.word	0x40e5a540
 8001a88:	447d5000 	.word	0x447d5000
 8001a8c:	2000025c 	.word	0x2000025c
 8001a90:	3ff00000 	.word	0x3ff00000
 8001a94:	20000008 	.word	0x20000008

08001a98 <bme280_config>:
void bme280_config()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001a9e:	4b9a      	ldr	r3, [pc, #616]	; (8001d08 <bme280_config+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001aa8:	4b98      	ldr	r3, [pc, #608]	; (8001d0c <bme280_config+0x274>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 f9cb 	bl	8008e48 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f005 fbca 	bl	800724c <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001ab8:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <bme280_config+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 f87f 	bl	8008bc0 <HAL_I2C_Init>
	HAL_Delay(5);
 8001ac2:	2005      	movs	r0, #5
 8001ac4:	f005 fbc2 	bl	800724c <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001ac8:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <bme280_config+0x274>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	23c8      	movs	r3, #200	; 0xc8
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	2288      	movs	r2, #136	; 0x88
 8001adc:	21ec      	movs	r1, #236	; 0xec
 8001ade:	f007 fadd 	bl	800909c <HAL_I2C_Mem_Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001ae6:	793b      	ldrb	r3, [r7, #4]
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <bme280_config+0x278>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	b292      	uxth	r2, r2
 8001afc:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	b219      	sxth	r1, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <bme280_config+0x278>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	b212      	sxth	r2, r2
 8001b12:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	b219      	sxth	r1, r3
 8001b18:	7a7b      	ldrb	r3, [r7, #9]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <bme280_config+0x278>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	b212      	sxth	r2, r2
 8001b28:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b2a:	7abb      	ldrb	r3, [r7, #10]
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <bme280_config+0x278>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	b219      	sxth	r1, r3
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <bme280_config+0x278>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	b212      	sxth	r2, r2
 8001b56:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b219      	sxth	r1, r3
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <bme280_config+0x278>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	b212      	sxth	r2, r2
 8001b6c:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	b219      	sxth	r1, r3
 8001b72:	7c7b      	ldrb	r3, [r7, #17]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <bme280_config+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	b212      	sxth	r2, r2
 8001b82:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b84:	7cbb      	ldrb	r3, [r7, #18]
 8001b86:	b219      	sxth	r1, r3
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <bme280_config+0x278>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	b212      	sxth	r2, r2
 8001b98:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001b9a:	7d3b      	ldrb	r3, [r7, #20]
 8001b9c:	b219      	sxth	r1, r3
 8001b9e:	7d7b      	ldrb	r3, [r7, #21]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <bme280_config+0x278>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	b212      	sxth	r2, r2
 8001bae:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001bb0:	7dbb      	ldrb	r3, [r7, #22]
 8001bb2:	b219      	sxth	r1, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <bme280_config+0x278>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001bc6:	7e3b      	ldrb	r3, [r7, #24]
 8001bc8:	b219      	sxth	r1, r3
 8001bca:	7e7b      	ldrb	r3, [r7, #25]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <bme280_config+0x278>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	b212      	sxth	r2, r2
 8001bda:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bdc:	7ebb      	ldrb	r3, [r7, #26]
 8001bde:	b219      	sxth	r1, r3
 8001be0:	7efb      	ldrb	r3, [r7, #27]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <bme280_config+0x278>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	b212      	sxth	r2, r2
 8001bf0:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <bme280_config+0x278>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	7f3a      	ldrb	r2, [r7, #28]
 8001bfa:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <bme280_config+0x274>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	2332      	movs	r3, #50	; 0x32
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2307      	movs	r3, #7
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	22e1      	movs	r2, #225	; 0xe1
 8001c10:	21ec      	movs	r1, #236	; 0xec
 8001c12:	f007 fa43 	bl	800909c <HAL_I2C_Mem_Read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001c1a:	793b      	ldrb	r3, [r7, #4]
 8001c1c:	b219      	sxth	r1, r3
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <bme280_config+0x278>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	b212      	sxth	r2, r2
 8001c2e:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <bme280_config+0x278>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	79ba      	ldrb	r2, [r7, #6]
 8001c38:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c3a:	7a3b      	ldrb	r3, [r7, #8]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	b219      	sxth	r1, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <bme280_config+0x278>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	b212      	sxth	r2, r2
 8001c54:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	b219      	sxth	r1, r3
 8001c5e:	7a7b      	ldrb	r3, [r7, #9]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <bme280_config+0x278>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	b212      	sxth	r2, r2
 8001c6e:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c70:	7aba      	ldrb	r2, [r7, #10]
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <bme280_config+0x278>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b252      	sxtb	r2, r2
 8001c7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <bme280_config+0x278>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	7c5b      	ldrb	r3, [r3, #17]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <bme280_config+0x274>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	2332      	movs	r3, #50	; 0x32
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	1cfb      	adds	r3, r7, #3
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	22f2      	movs	r2, #242	; 0xf2
 8001ca0:	21ec      	movs	r1, #236	; 0xec
 8001ca2:	f007 f901 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <bme280_config+0x278>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	7c1b      	ldrb	r3, [r3, #16]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <bme280_config+0x278>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	7c5b      	ldrb	r3, [r3, #17]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <bme280_config+0x278>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	015b      	lsls	r3, r3, #5
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <bme280_config+0x274>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	2332      	movs	r3, #50	; 0x32
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	1cfb      	adds	r3, r7, #3
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2301      	movs	r3, #1
 8001cee:	22f4      	movs	r2, #244	; 0xf4
 8001cf0:	21ec      	movs	r1, #236	; 0xec
 8001cf2:	f007 f8d9 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <bme280_config+0x278>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7c9b      	ldrb	r3, [r3, #18]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e005      	b.n	8001d14 <bme280_config+0x27c>
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000258 	.word	0x20000258
 8001d10:	2000025c 	.word	0x2000025c
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <bme280_config+0x308>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2332      	movs	r3, #50	; 0x32
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	1cfb      	adds	r3, r7, #3
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	22f5      	movs	r2, #245	; 0xf5
 8001d2e:	21ec      	movs	r1, #236	; 0xec
 8001d30:	f007 f8ba 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8001d34:	4603      	mov	r3, r0
 8001d36:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f005 fa84 	bl	800724c <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	e011      	b.n	8001d6e <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d4a:	f000 f865 	bl	8001e18 <bme280_update>
	  base +=  BME->altitude;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <bme280_config+0x30c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d62:	201e      	movs	r0, #30
 8001d64:	f005 fa72 	bl	800724c <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	2b1d      	cmp	r3, #29
 8001d72:	ddea      	ble.n	8001d4a <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <bme280_config+0x310>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d7c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d84:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001d88:	f000 f846 	bl	8001e18 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <bme280_config+0x310>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000258 	.word	0x20000258
 8001da4:	2000025c 	.word	0x2000025c
 8001da8:	20000008 	.word	0x20000008

08001dac <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <bme280_init+0x5c>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <bme280_init+0x60>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <bme280_init+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <bme280_init+0x5c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3214      	adds	r2, #20
 8001dcc:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <bme280_init+0x60>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	2332      	movs	r3, #50	; 0x32
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	22d0      	movs	r2, #208	; 0xd0
 8001de4:	21ec      	movs	r1, #236	; 0xec
 8001de6:	f007 f959 	bl	800909c <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	2b60      	cmp	r3, #96	; 0x60
 8001dee:	d103      	bne.n	8001df8 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <bme280_init+0x68>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001df6:	e002      	b.n	8001dfe <bme280_init+0x52>
		is_BME_ok = 0;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <bme280_init+0x68>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000025c 	.word	0x2000025c
 8001e0c:	20000258 	.word	0x20000258
 8001e10:	20000008 	.word	0x20000008
 8001e14:	200008c4 	.word	0x200008c4

08001e18 <bme280_update>:


void bme280_update(){
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b0d2      	sub	sp, #328	; 0x148
 8001e1e:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e20:	f7ff fd70 	bl	8001904 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e24:	4bd4      	ldr	r3, [pc, #848]	; (8002178 <bme280_update+0x360>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 83bc 	bne.w	80025aa <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e32:	4bd1      	ldr	r3, [pc, #836]	; (8002178 <bme280_update+0x360>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e40:	10da      	asrs	r2, r3, #3
 8001e42:	4bcd      	ldr	r3, [pc, #820]	; (8002178 <bme280_update+0x360>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	4bc9      	ldr	r3, [pc, #804]	; (8002178 <bme280_update+0x360>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	12db      	asrs	r3, r3, #11
 8001e60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e68:	111a      	asrs	r2, r3, #4
 8001e6a:	4bc3      	ldr	r3, [pc, #780]	; (8002178 <bme280_update+0x360>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	1ad1      	subs	r1, r2, r3
 8001e76:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e7a:	111a      	asrs	r2, r3, #4
 8001e7c:	4bbe      	ldr	r3, [pc, #760]	; (8002178 <bme280_update+0x360>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	131a      	asrs	r2, r3, #12
 8001e8e:	4bba      	ldr	r3, [pc, #744]	; (8002178 <bme280_update+0x360>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	889b      	ldrh	r3, [r3, #4]
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	139b      	asrs	r3, r3, #14
 8001e9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001ea2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001eaa:	4413      	add	r3, r2
 8001eac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001eb0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3380      	adds	r3, #128	; 0x80
 8001ebc:	121b      	asrs	r3, r3, #8
 8001ebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ece:	4baa      	ldr	r3, [pc, #680]	; (8002178 <bme280_update+0x360>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800217c <bme280_update+0x364>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ede:	4ba6      	ldr	r3, [pc, #664]	; (8002178 <bme280_update+0x360>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ee8:	657a      	str	r2, [r7, #84]	; 0x54
 8001eea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eee:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ef6:	17da      	asrs	r2, r3, #31
 8001ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001efc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f00:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f04:	460b      	mov	r3, r1
 8001f06:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f18:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001f1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f24:	fb03 f102 	mul.w	r1, r3, r2
 8001f28:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	18ca      	adds	r2, r1, r3
 8001f36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f3a:	fba3 4503 	umull	r4, r5, r3, r3
 8001f3e:	1953      	adds	r3, r2, r5
 8001f40:	461d      	mov	r5, r3
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <bme280_update+0x360>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	8a1b      	ldrh	r3, [r3, #16]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	17da      	asrs	r2, r3, #31
 8001f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f58:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	fb03 f205 	mul.w	r2, r3, r5
 8001f62:	460b      	mov	r3, r1
 8001f64:	fb04 f303 	mul.w	r3, r4, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f70:	445b      	add	r3, fp
 8001f72:	469b      	mov	fp, r3
 8001f74:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f78:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <bme280_update+0x360>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	89db      	ldrh	r3, [r3, #14]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	17da      	asrs	r2, r3, #31
 8001f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f8e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f96:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	fb02 f203 	mul.w	r2, r2, r3
 8001fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	fba3 8901 	umull	r8, r9, r3, r1
 8001fb6:	eb02 0309 	add.w	r3, r2, r9
 8001fba:	4699      	mov	r9, r3
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fc8:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fcc:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fd0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fd4:	1814      	adds	r4, r2, r0
 8001fd6:	643c      	str	r4, [r7, #64]	; 0x40
 8001fd8:	414b      	adcs	r3, r1
 8001fda:	647b      	str	r3, [r7, #68]	; 0x44
 8001fdc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fe0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <bme280_update+0x360>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	899b      	ldrh	r3, [r3, #12]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	17da      	asrs	r2, r3, #31
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ff6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	2000      	movs	r0, #0
 800200a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800200e:	1814      	adds	r4, r2, r0
 8002010:	63bc      	str	r4, [r7, #56]	; 0x38
 8002012:	414b      	adcs	r3, r1
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002016:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800201a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 800201e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002026:	fb03 f102 	mul.w	r1, r3, r2
 800202a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800202e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	18ca      	adds	r2, r1, r3
 8002038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203c:	fba3 1303 	umull	r1, r3, r3, r3
 8002040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002044:	460b      	mov	r3, r1
 8002046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800204a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800204e:	18d3      	adds	r3, r2, r3
 8002050:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <bme280_update+0x360>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	895b      	ldrh	r3, [r3, #10]
 800205c:	b21b      	sxth	r3, r3
 800205e:	b21b      	sxth	r3, r3
 8002060:	17da      	asrs	r2, r3, #31
 8002062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002066:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800206a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800206e:	462b      	mov	r3, r5
 8002070:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002074:	4642      	mov	r2, r8
 8002076:	fb02 f203 	mul.w	r2, r2, r3
 800207a:	464b      	mov	r3, r9
 800207c:	4621      	mov	r1, r4
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	4622      	mov	r2, r4
 8002086:	4641      	mov	r1, r8
 8002088:	fba2 1201 	umull	r1, r2, r2, r1
 800208c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002090:	460a      	mov	r2, r1
 8002092:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002096:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800209a:	4413      	add	r3, r2
 800209c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80020a0:	f04f 0000 	mov.w	r0, #0
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80020ac:	4623      	mov	r3, r4
 80020ae:	0a18      	lsrs	r0, r3, #8
 80020b0:	462b      	mov	r3, r5
 80020b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020b6:	462b      	mov	r3, r5
 80020b8:	1219      	asrs	r1, r3, #8
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <bme280_update+0x360>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	891b      	ldrh	r3, [r3, #8]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	17da      	asrs	r2, r3, #31
 80020c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020cc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020d4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020d8:	464a      	mov	r2, r9
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020e2:	4644      	mov	r4, r8
 80020e4:	fb04 f303 	mul.w	r3, r4, r3
 80020e8:	441a      	add	r2, r3
 80020ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ee:	4644      	mov	r4, r8
 80020f0:	fba3 4304 	umull	r4, r3, r3, r4
 80020f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020f8:	4623      	mov	r3, r4
 80020fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002102:	18d3      	adds	r3, r2, r3
 8002104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002114:	464c      	mov	r4, r9
 8002116:	0323      	lsls	r3, r4, #12
 8002118:	4644      	mov	r4, r8
 800211a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800211e:	4644      	mov	r4, r8
 8002120:	0322      	lsls	r2, r4, #12
 8002122:	1884      	adds	r4, r0, r2
 8002124:	633c      	str	r4, [r7, #48]	; 0x30
 8002126:	eb41 0303 	adc.w	r3, r1, r3
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
 800212c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002130:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8002134:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002138:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800213c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002140:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <bme280_update+0x360>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	88db      	ldrh	r3, [r3, #6]
 800214c:	b29b      	uxth	r3, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	2200      	movs	r2, #0
 8002152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800215a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800215e:	462b      	mov	r3, r5
 8002160:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002164:	4642      	mov	r2, r8
 8002166:	fb02 f203 	mul.w	r2, r2, r3
 800216a:	464b      	mov	r3, r9
 800216c:	4621      	mov	r1, r4
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	e004      	b.n	8002180 <bme280_update+0x368>
 8002176:	bf00      	nop
 8002178:	2000025c 	.word	0x2000025c
 800217c:	42c80000 	.word	0x42c80000
 8002180:	4622      	mov	r2, r4
 8002182:	4641      	mov	r1, r8
 8002184:	fba2 1201 	umull	r1, r2, r2, r1
 8002188:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800218c:	460a      	mov	r2, r1
 800218e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002192:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002196:	4413      	add	r3, r2
 8002198:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021a8:	4629      	mov	r1, r5
 80021aa:	104a      	asrs	r2, r1, #1
 80021ac:	4629      	mov	r1, r5
 80021ae:	17cb      	asrs	r3, r1, #31
 80021b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 80021b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d106      	bne.n	80021ca <bme280_update+0x3b2>
		{
			P = 0;
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021c8:	e14b      	b.n	8002462 <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021ce:	2100      	movs	r1, #0
 80021d0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80021d6:	eb61 0303 	sbc.w	r3, r1, r3
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021e0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021e4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	07d9      	lsls	r1, r3, #31
 80021f2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80021f6:	07d0      	lsls	r0, r2, #31
 80021f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021fc:	1a84      	subs	r4, r0, r2
 80021fe:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002202:	eb61 0303 	sbc.w	r3, r1, r3
 8002206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800220a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	1891      	adds	r1, r2, r2
 8002214:	6239      	str	r1, [r7, #32]
 8002216:	415b      	adcs	r3, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800221e:	4621      	mov	r1, r4
 8002220:	1851      	adds	r1, r2, r1
 8002222:	61b9      	str	r1, [r7, #24]
 8002224:	4629      	mov	r1, r5
 8002226:	414b      	adcs	r3, r1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002236:	4649      	mov	r1, r9
 8002238:	018b      	lsls	r3, r1, #6
 800223a:	4641      	mov	r1, r8
 800223c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002240:	4641      	mov	r1, r8
 8002242:	018a      	lsls	r2, r1, #6
 8002244:	4641      	mov	r1, r8
 8002246:	1889      	adds	r1, r1, r2
 8002248:	6139      	str	r1, [r7, #16]
 800224a:	4649      	mov	r1, r9
 800224c:	eb43 0101 	adc.w	r1, r3, r1
 8002250:	6179      	str	r1, [r7, #20]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800225e:	4649      	mov	r1, r9
 8002260:	008b      	lsls	r3, r1, #2
 8002262:	4641      	mov	r1, r8
 8002264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002268:	4641      	mov	r1, r8
 800226a:	008a      	lsls	r2, r1, #2
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	4603      	mov	r3, r0
 8002272:	4622      	mov	r2, r4
 8002274:	189b      	adds	r3, r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	460b      	mov	r3, r1
 800227a:	462a      	mov	r2, r5
 800227c:	eb42 0303 	adc.w	r3, r2, r3
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800228e:	4649      	mov	r1, r9
 8002290:	008b      	lsls	r3, r1, #2
 8002292:	4641      	mov	r1, r8
 8002294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002298:	4641      	mov	r1, r8
 800229a:	008a      	lsls	r2, r1, #2
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	4622      	mov	r2, r4
 80022a4:	189b      	adds	r3, r3, r2
 80022a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022aa:	462b      	mov	r3, r5
 80022ac:	460a      	mov	r2, r1
 80022ae:	eb42 0303 	adc.w	r3, r2, r3
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80022ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022be:	f7fe fe11 	bl	8000ee4 <__aeabi_ldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022ca:	4bbb      	ldr	r3, [pc, #748]	; (80025b8 <bme280_update+0x7a0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	8adb      	ldrh	r3, [r3, #22]
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	17da      	asrs	r2, r3, #31
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	0b50      	lsrs	r0, r2, #13
 80022ea:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022ee:	1359      	asrs	r1, r3, #13
 80022f0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022f4:	462b      	mov	r3, r5
 80022f6:	fb00 f203 	mul.w	r2, r0, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	fb03 f301 	mul.w	r3, r3, r1
 8002300:	4413      	add	r3, r2
 8002302:	4622      	mov	r2, r4
 8002304:	fba2 1200 	umull	r1, r2, r2, r0
 8002308:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800230c:	460a      	mov	r2, r1
 800230e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002312:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002316:	4413      	add	r3, r2
 8002318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800231c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002320:	f04f 0000 	mov.w	r0, #0
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	0b50      	lsrs	r0, r2, #13
 800232a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800232e:	1359      	asrs	r1, r3, #13
 8002330:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002334:	462b      	mov	r3, r5
 8002336:	fb00 f203 	mul.w	r2, r0, r3
 800233a:	4623      	mov	r3, r4
 800233c:	fb03 f301 	mul.w	r3, r3, r1
 8002340:	4413      	add	r3, r2
 8002342:	4622      	mov	r2, r4
 8002344:	fba2 1200 	umull	r1, r2, r2, r0
 8002348:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800234c:	460a      	mov	r2, r1
 800234e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002352:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002356:	4413      	add	r3, r2
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002368:	4621      	mov	r1, r4
 800236a:	0e4a      	lsrs	r2, r1, #25
 800236c:	4629      	mov	r1, r5
 800236e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002372:	4629      	mov	r1, r5
 8002374:	164b      	asrs	r3, r1, #25
 8002376:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800237a:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <bme280_update+0x7a0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	8a9b      	ldrh	r3, [r3, #20]
 8002382:	b21b      	sxth	r3, r3
 8002384:	b21b      	sxth	r3, r3
 8002386:	17da      	asrs	r2, r3, #31
 8002388:	673b      	str	r3, [r7, #112]	; 0x70
 800238a:	677a      	str	r2, [r7, #116]	; 0x74
 800238c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002390:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002394:	462a      	mov	r2, r5
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800239e:	4621      	mov	r1, r4
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80023aa:	4621      	mov	r1, r4
 80023ac:	fba2 1201 	umull	r1, r2, r2, r1
 80023b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023b4:	460a      	mov	r2, r1
 80023b6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023be:	4413      	add	r3, r2
 80023c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023d0:	4621      	mov	r1, r4
 80023d2:	0cca      	lsrs	r2, r1, #19
 80023d4:	4629      	mov	r1, r5
 80023d6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023da:	4629      	mov	r1, r5
 80023dc:	14cb      	asrs	r3, r1, #19
 80023de:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023e2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ea:	1884      	adds	r4, r0, r2
 80023ec:	66bc      	str	r4, [r7, #104]	; 0x68
 80023ee:	eb41 0303 	adc.w	r3, r1, r3
 80023f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023f4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023f8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80023fc:	4621      	mov	r1, r4
 80023fe:	1889      	adds	r1, r1, r2
 8002400:	6639      	str	r1, [r7, #96]	; 0x60
 8002402:	4629      	mov	r1, r5
 8002404:	eb43 0101 	adc.w	r1, r3, r1
 8002408:	6679      	str	r1, [r7, #100]	; 0x64
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002416:	4623      	mov	r3, r4
 8002418:	0a18      	lsrs	r0, r3, #8
 800241a:	462b      	mov	r3, r5
 800241c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002420:	462b      	mov	r3, r5
 8002422:	1219      	asrs	r1, r3, #8
 8002424:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <bme280_update+0x7a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	8a5b      	ldrh	r3, [r3, #18]
 800242c:	b21b      	sxth	r3, r3
 800242e:	b21b      	sxth	r3, r3
 8002430:	17da      	asrs	r2, r3, #31
 8002432:	65bb      	str	r3, [r7, #88]	; 0x58
 8002434:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002442:	464c      	mov	r4, r9
 8002444:	0123      	lsls	r3, r4, #4
 8002446:	4644      	mov	r4, r8
 8002448:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800244c:	4644      	mov	r4, r8
 800244e:	0122      	lsls	r2, r4, #4
 8002450:	1884      	adds	r4, r0, r2
 8002452:	603c      	str	r4, [r7, #0]
 8002454:	eb41 0303 	adc.w	r3, r1, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800245e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8002462:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002466:	f7fe fcff 	bl	8000e68 <__aeabi_l2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f88b 	bl	8000588 <__aeabi_f2d>
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <bme280_update+0x7a4>)
 8002478:	f7fe fa08 	bl	800088c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <bme280_update+0x7a8>)
 800248a:	f7fe f9ff 	bl	800088c <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4949      	ldr	r1, [pc, #292]	; (80025b8 <bme280_update+0x7a0>)
 8002494:	680c      	ldr	r4, [r1, #0]
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fbc5 	bl	8000c28 <__aeabi_d2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <bme280_update+0x7a0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 80024ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024b0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80024b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 80024b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024bc:	039b      	lsls	r3, r3, #14
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <bme280_update+0x7a0>)
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	8bd2      	ldrh	r2, [r2, #30]
 80024c6:	b212      	sxth	r2, r2
 80024c8:	0512      	lsls	r2, r2, #20
 80024ca:	1a9a      	subs	r2, r3, r2
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <bme280_update+0x7a0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	8c1b      	ldrh	r3, [r3, #32]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024e6:	0bdb      	lsrs	r3, r3, #15
 80024e8:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <bme280_update+0x7a0>)
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80024f2:	b252      	sxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024fa:	fb01 f202 	mul.w	r2, r1, r2
 80024fe:	0a92      	lsrs	r2, r2, #10
 8002500:	492d      	ldr	r1, [pc, #180]	; (80025b8 <bme280_update+0x7a0>)
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	6809      	ldr	r1, [r1, #0]
 8002506:	7f09      	ldrb	r1, [r1, #28]
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	4608      	mov	r0, r1
 800250c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002510:	fb00 f101 	mul.w	r1, r0, r1
 8002514:	0ac9      	lsrs	r1, r1, #11
 8002516:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800251a:	fb01 f202 	mul.w	r2, r1, r2
 800251e:	0a92      	lsrs	r2, r2, #10
 8002520:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002524:	4924      	ldr	r1, [pc, #144]	; (80025b8 <bme280_update+0x7a0>)
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	6809      	ldr	r1, [r1, #0]
 800252a:	8b49      	ldrh	r1, [r1, #26]
 800252c:	b209      	sxth	r1, r1
 800252e:	fb01 f202 	mul.w	r2, r1, r2
 8002532:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002536:	0b92      	lsrs	r2, r2, #14
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002544:	0bdb      	lsrs	r3, r3, #15
 8002546:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800254a:	0bd2      	lsrs	r2, r2, #15
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	09db      	lsrs	r3, r3, #7
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <bme280_update+0x7a0>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	7e12      	ldrb	r2, [r2, #24]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800256c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002570:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002574:	bf28      	it	cs
 8002576:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 800257a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800257e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002582:	0b1b      	lsrs	r3, r3, #12
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <bme280_update+0x7a0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025c4 <bme280_update+0x7ac>
 8002594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002598:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 800259c:	f7ff fa0c 	bl	80019b8 <bme280_get_altitude>
		BME->isUpdated = 0;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <bme280_update+0x7a0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 80025aa:	bf00      	nop
 80025ac:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	2000025c 	.word	0x2000025c
 80025bc:	40700000 	.word	0x40700000
 80025c0:	40590000 	.word	0x40590000
 80025c4:	44800000 	.word	0x44800000

080025c8 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ce:	2009      	movs	r0, #9
 80025d0:	f005 fb8b 	bl	8007cea <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025d4:	200a      	movs	r0, #10
 80025d6:	f005 fb88 	bl	8007cea <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025de:	2301      	movs	r3, #1
 80025e0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025e2:	4bb7      	ldr	r3, [pc, #732]	; (80028c0 <bmi088_config+0x2f8>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	2364      	movs	r3, #100	; 0x64
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	227c      	movs	r2, #124	; 0x7c
 80025f6:	2130      	movs	r1, #48	; 0x30
 80025f8:	f006 fc56 	bl	8008ea8 <HAL_I2C_Mem_Write>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	4313      	orrs	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800260a:	4bad      	ldr	r3, [pc, #692]	; (80028c0 <bmi088_config+0x2f8>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	2364      	movs	r3, #100	; 0x64
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	2301      	movs	r3, #1
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	227d      	movs	r2, #125	; 0x7d
 800261e:	2130      	movs	r1, #48	; 0x30
 8002620:	f006 fc42 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4313      	orrs	r3, r2
 800262c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 800262e:	2014      	movs	r0, #20
 8002630:	f004 fe0c 	bl	800724c <HAL_Delay>

	buf[0] = ACC_RESET;
 8002634:	23b6      	movs	r3, #182	; 0xb6
 8002636:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002638:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <bmi088_config+0x2f8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2301      	movs	r3, #1
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	227e      	movs	r2, #126	; 0x7e
 800264c:	2130      	movs	r1, #48	; 0x30
 800264e:	f006 fc2b 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4313      	orrs	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <bmi088_config+0xa0>
 8002662:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <bmi088_config+0x2fc>)
 8002664:	2285      	movs	r2, #133	; 0x85
 8002666:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002668:	200a      	movs	r0, #10
 800266a:	f004 fdef 	bl	800724c <HAL_Delay>

	buf[0] = FIFO_RESET;
 800266e:	23b0      	movs	r3, #176	; 0xb0
 8002670:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002672:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <bmi088_config+0x2f8>)
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	2364      	movs	r3, #100	; 0x64
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	2301      	movs	r3, #1
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	227e      	movs	r2, #126	; 0x7e
 8002686:	2130      	movs	r1, #48	; 0x30
 8002688:	f006 fc0e 	bl	8008ea8 <HAL_I2C_Mem_Write>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	4313      	orrs	r3, r2
 8002694:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <bmi088_config+0xda>
 800269c:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <bmi088_config+0x2fc>)
 800269e:	228a      	movs	r2, #138	; 0x8a
 80026a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f004 fdd2 	bl	800724c <HAL_Delay>

	buf[0] = GYRO_RESET;
 80026a8:	23b6      	movs	r3, #182	; 0xb6
 80026aa:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80026ac:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <bmi088_config+0x2f8>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	2364      	movs	r3, #100	; 0x64
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2301      	movs	r3, #1
 80026be:	2214      	movs	r2, #20
 80026c0:	21d0      	movs	r1, #208	; 0xd0
 80026c2:	f006 fbf1 	bl	8008ea8 <HAL_I2C_Mem_Write>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <bmi088_config+0x114>
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <bmi088_config+0x2fc>)
 80026d8:	228f      	movs	r2, #143	; 0x8f
 80026da:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026dc:	200a      	movs	r0, #10
 80026de:	f004 fdb5 	bl	800724c <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026e2:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <bmi088_config+0x300>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	7e5b      	ldrb	r3, [r3, #25]
 80026e8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80026ea:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <bmi088_config+0x2f8>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	2364      	movs	r3, #100	; 0x64
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2301      	movs	r3, #1
 80026fc:	220f      	movs	r2, #15
 80026fe:	21d0      	movs	r1, #208	; 0xd0
 8002700:	f006 fbd2 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4313      	orrs	r3, r2
 800270c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <bmi088_config+0x152>
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <bmi088_config+0x2fc>)
 8002716:	2295      	movs	r2, #149	; 0x95
 8002718:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 800271a:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <bmi088_config+0x300>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <bmi088_config+0x2f8>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	2314      	movs	r3, #20
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2301      	movs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2301      	movs	r3, #1
 8002734:	2210      	movs	r2, #16
 8002736:	21d0      	movs	r1, #208	; 0xd0
 8002738:	f006 fbb6 	bl	8008ea8 <HAL_I2C_Mem_Write>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4313      	orrs	r3, r2
 8002744:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <bmi088_config+0x18a>
 800274c:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <bmi088_config+0x2fc>)
 800274e:	2299      	movs	r2, #153	; 0x99
 8002750:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <bmi088_config+0x300>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	7ddb      	ldrb	r3, [r3, #23]
 8002758:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800275a:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <bmi088_config+0x2f8>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	2314      	movs	r3, #20
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2301      	movs	r3, #1
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2211      	movs	r2, #17
 800276e:	21d0      	movs	r1, #208	; 0xd0
 8002770:	f006 fb9a 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	4313      	orrs	r3, r2
 800277c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <bmi088_config+0x1c2>
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <bmi088_config+0x2fc>)
 8002786:	229d      	movs	r2, #157	; 0x9d
 8002788:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800278a:	2014      	movs	r0, #20
 800278c:	f004 fd5e 	bl	800724c <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <bmi088_config+0x2f8>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	2314      	movs	r3, #20
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2301      	movs	r3, #1
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2301      	movs	r3, #1
 80027a6:	2215      	movs	r2, #21
 80027a8:	21d0      	movs	r1, #208	; 0xd0
 80027aa:	f006 fb7d 	bl	8008ea8 <HAL_I2C_Mem_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <bmi088_config+0x1fc>
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <bmi088_config+0x2fc>)
 80027c0:	22a3      	movs	r2, #163	; 0xa3
 80027c2:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027c4:	2301      	movs	r3, #1
 80027c6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <bmi088_config+0x2f8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	2314      	movs	r3, #20
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2301      	movs	r3, #1
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2216      	movs	r2, #22
 80027dc:	21d0      	movs	r1, #208	; 0xd0
 80027de:	f006 fb63 	bl	8008ea8 <HAL_I2C_Mem_Write>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <bmi088_config+0x230>
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <bmi088_config+0x2fc>)
 80027f4:	22a7      	movs	r2, #167	; 0xa7
 80027f6:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80027f8:	2301      	movs	r3, #1
 80027fa:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80027fc:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <bmi088_config+0x2f8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	2314      	movs	r3, #20
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	2218      	movs	r2, #24
 8002810:	21d0      	movs	r1, #208	; 0xd0
 8002812:	f006 fb49 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4313      	orrs	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <bmi088_config+0x264>
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <bmi088_config+0x2fc>)
 8002828:	22ab      	movs	r2, #171	; 0xab
 800282a:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800282c:	2304      	movs	r3, #4
 800282e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <bmi088_config+0x2f8>)
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	2314      	movs	r3, #20
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	2301      	movs	r3, #1
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2301      	movs	r3, #1
 8002842:	227d      	movs	r2, #125	; 0x7d
 8002844:	2130      	movs	r1, #48	; 0x30
 8002846:	f006 fb2f 	bl	8008ea8 <HAL_I2C_Mem_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4313      	orrs	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <bmi088_config+0x298>
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <bmi088_config+0x2fc>)
 800285c:	22b0      	movs	r2, #176	; 0xb0
 800285e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002860:	2008      	movs	r0, #8
 8002862:	f004 fcf3 	bl	800724c <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <bmi088_config+0x300>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	7cdb      	ldrb	r3, [r3, #19]
 800286c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <bmi088_config+0x2f8>)
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	2314      	movs	r3, #20
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	2301      	movs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	227c      	movs	r2, #124	; 0x7c
 8002882:	2130      	movs	r1, #48	; 0x30
 8002884:	f006 fb10 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4313      	orrs	r3, r2
 8002890:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <bmi088_config+0x2d6>
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <bmi088_config+0x2fc>)
 800289a:	22b5      	movs	r2, #181	; 0xb5
 800289c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800289e:	2008      	movs	r0, #8
 80028a0:	f004 fcd4 	bl	800724c <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <bmi088_config+0x300>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	7d5b      	ldrb	r3, [r3, #21]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	b25a      	sxtb	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <bmi088_config+0x300>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	7d9b      	ldrb	r3, [r3, #22]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	713b      	strb	r3, [r7, #4]
 80028be:	e005      	b.n	80028cc <bmi088_config+0x304>
 80028c0:	20000260 	.word	0x20000260
 80028c4:	2000026c 	.word	0x2000026c
 80028c8:	20000264 	.word	0x20000264
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <bmi088_config+0x3d0>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	2314      	movs	r3, #20
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	2301      	movs	r3, #1
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	2130      	movs	r1, #48	; 0x30
 80028e2:	f006 fae1 	bl	8008ea8 <HAL_I2C_Mem_Write>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <bmi088_config+0x334>
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <bmi088_config+0x3d4>)
 80028f8:	22ba      	movs	r2, #186	; 0xba
 80028fa:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <bmi088_config+0x3d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	7d1b      	ldrb	r3, [r3, #20]
 8002902:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <bmi088_config+0x3d0>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	2314      	movs	r3, #20
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	2301      	movs	r3, #1
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	2130      	movs	r1, #48	; 0x30
 800291a:	f006 fac5 	bl	8008ea8 <HAL_I2C_Mem_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4313      	orrs	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <bmi088_config+0x36c>
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <bmi088_config+0x3d4>)
 8002930:	22be      	movs	r2, #190	; 0xbe
 8002932:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002934:	230a      	movs	r3, #10
 8002936:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <bmi088_config+0x3d0>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	2314      	movs	r3, #20
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	2301      	movs	r3, #1
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	2253      	movs	r2, #83	; 0x53
 800294c:	2130      	movs	r1, #48	; 0x30
 800294e:	f006 faab 	bl	8008ea8 <HAL_I2C_Mem_Write>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4313      	orrs	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800295c:	2304      	movs	r3, #4
 800295e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <bmi088_config+0x3d0>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	2314      	movs	r3, #20
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2301      	movs	r3, #1
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	2258      	movs	r2, #88	; 0x58
 8002974:	2130      	movs	r1, #48	; 0x30
 8002976:	f006 fa97 	bl	8008ea8 <HAL_I2C_Mem_Write>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4313      	orrs	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002984:	2009      	movs	r0, #9
 8002986:	f005 f9b0 	bl	8007cea <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800298a:	200a      	movs	r0, #10
 800298c:	f005 f9ad 	bl	8007cea <HAL_NVIC_EnableIRQ>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000260 	.word	0x20000260
 800299c:	2000026c 	.word	0x2000026c
 80029a0:	20000264 	.word	0x20000264

080029a4 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <bmi088_init+0x90>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <bmi088_init+0x94>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <bmi088_init+0x94>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <bmi088_init+0x94>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <bmi088_init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <bmi088_init+0x9c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029d6:	2332      	movs	r3, #50	; 0x32
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	2301      	movs	r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2301      	movs	r3, #1
 80029e6:	2200      	movs	r2, #0
 80029e8:	21d0      	movs	r1, #208	; 0xd0
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f006 fb56 	bl	800909c <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80029f0:	7b3b      	ldrb	r3, [r7, #12]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	d103      	bne.n	80029fe <bmi088_init+0x5a>
		is_BMI_ok = 1;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <bmi088_init+0xa0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 80029fc:	e016      	b.n	8002a2c <bmi088_init+0x88>
		is_BMI_ok = 0;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <bmi088_init+0xa0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <bmi088_init+0xa4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a0c:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <bmi088_init+0xa4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <bmi088_init+0xa4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <bmi088_init+0xa4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000260 	.word	0x20000260
 8002a38:	20000264 	.word	0x20000264
 8002a3c:	20000268 	.word	0x20000268
 8002a40:	20000269 	.word	0x20000269
 8002a44:	200008c8 	.word	0x200008c8
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	00000000 	.word	0x00000000

08002a50 <bmi088_update>:
void bmi088_update()
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b08d      	sub	sp, #52	; 0x34
 8002a56:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <bmi088_update+0x94>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	7c9b      	ldrb	r3, [r3, #18]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 820b 	beq.w	8002e7e <bmi088_update+0x42e>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <bmi088_update+0x98>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <bmi088_update+0x94>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	2314      	movs	r3, #20
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	2309      	movs	r3, #9
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	2212      	movs	r2, #18
 8002a80:	2130      	movs	r1, #48	; 0x30
 8002a82:	f006 fb0b 	bl	800909c <HAL_I2C_Mem_Read>
 8002a86:	4603      	mov	r3, r0
 8002a88:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 83c9 	bne.w	8003224 <bmi088_update+0x7d4>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <bmi088_update+0x98>)
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <bmi088_update+0x94>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3309      	adds	r3, #9
 8002a9c:	2214      	movs	r2, #20
 8002a9e:	9202      	str	r2, [sp, #8]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	9201      	str	r2, [sp, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2222      	movs	r2, #34	; 0x22
 8002aaa:	2130      	movs	r1, #48	; 0x30
 8002aac:	f006 faf6 	bl	800909c <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <bmi088_update+0x94>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	7a5b      	ldrb	r3, [r3, #9]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <bmi088_update+0x94>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	7a9b      	ldrb	r3, [r3, #10]
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ad0:	8bbb      	ldrh	r3, [r7, #28]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d309      	bcc.n	8002aec <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002ad8:	8bbb      	ldrh	r3, [r7, #28]
 8002ada:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	837b      	strh	r3, [r7, #26]
 8002ae2:	e029      	b.n	8002b38 <bmi088_update+0xe8>
 8002ae4:	20000264 	.word	0x20000264
 8002ae8:	20000260 	.word	0x20000260
			}
			else{
				Temp_int11 = Temp_uint11;
 8002aec:	8bbb      	ldrh	r3, [r7, #28]
 8002aee:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002af0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afc:	ee17 0a90 	vmov	r0, s15
 8002b00:	f7fd fd42 	bl	8000588 <__aeabi_f2d>
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002b0c:	f7fd fd94 	bl	8000638 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4bc4      	ldr	r3, [pc, #784]	; (8002e30 <bmi088_update+0x3e0>)
 8002b1e:	f7fd fbd5 	bl	80002cc <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	49c3      	ldr	r1, [pc, #780]	; (8002e34 <bmi088_update+0x3e4>)
 8002b28:	680e      	ldr	r6, [r1, #0]
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f87b 	bl	8000c28 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b38:	4bbe      	ldr	r3, [pc, #760]	; (8002e34 <bmi088_update+0x3e4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	7a1b      	ldrb	r3, [r3, #8]
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	4bbc      	ldr	r3, [pc, #752]	; (8002e34 <bmi088_update+0x3e4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	79db      	ldrb	r3, [r3, #7]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	4aba      	ldr	r2, [pc, #744]	; (8002e34 <bmi088_update+0x3e4>)
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	7992      	ldrb	r2, [r2, #6]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fd11 	bl	8000588 <__aeabi_f2d>
 8002b66:	a3ac      	add	r3, pc, #688	; (adr r3, 8002e18 <bmi088_update+0x3c8>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fd64 	bl	8000638 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	a3a9      	add	r3, pc, #676	; (adr r3, 8002e20 <bmi088_update+0x3d0>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fe85 	bl	800088c <__aeabi_ddiv>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	49ab      	ldr	r1, [pc, #684]	; (8002e34 <bmi088_update+0x3e4>)
 8002b88:	680e      	ldr	r6, [r1, #0]
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f84b 	bl	8000c28 <__aeabi_d2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002b98:	4ba6      	ldr	r3, [pc, #664]	; (8002e34 <bmi088_update+0x3e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	795b      	ldrb	r3, [r3, #5]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	4ba4      	ldr	r3, [pc, #656]	; (8002e34 <bmi088_update+0x3e4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	791b      	ldrb	r3, [r3, #4]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002bae:	4ba1      	ldr	r3, [pc, #644]	; (8002e34 <bmi088_update+0x3e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <bmi088_update+0x3e4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	789b      	ldrb	r3, [r3, #2]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002bc4:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <bmi088_update+0x3e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	4b99      	ldr	r3, [pc, #612]	; (8002e34 <bmi088_update+0x3e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be6:	ee17 0a90 	vmov	r0, s15
 8002bea:	f7fd fccd 	bl	8000588 <__aeabi_f2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <bmi088_update+0x3e8>)
 8002bf4:	f7fd fe4a 	bl	800088c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b8d      	ldr	r3, [pc, #564]	; (8002e3c <bmi088_update+0x3ec>)
 8002c06:	f7fd fd17 	bl	8000638 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <bmi088_update+0x3f0>)
 8002c18:	f7fd fd0e 	bl	8000638 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4692      	mov	sl, r2
 8002c22:	469b      	mov	fp, r3
 8002c24:	4b83      	ldr	r3, [pc, #524]	; (8002e34 <bmi088_update+0x3e4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	7d1b      	ldrb	r3, [r3, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c34:	ee17 0a90 	vmov	r0, s15
 8002c38:	f7fd fca6 	bl	8000588 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	ec43 2b11 	vmov	d1, r2, r3
 8002c44:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8002e28 <bmi088_update+0x3d8>
 8002c48:	f012 fefa 	bl	8015a40 <pow>
 8002c4c:	ec53 2b10 	vmov	r2, r3, d0
 8002c50:	4650      	mov	r0, sl
 8002c52:	4659      	mov	r1, fp
 8002c54:	f7fd fcf0 	bl	8000638 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <bmi088_update+0x3f4>)
 8002c66:	f7fd fb2f 	bl	80002c8 <__aeabi_dsub>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4971      	ldr	r1, [pc, #452]	; (8002e34 <bmi088_update+0x3e4>)
 8002c70:	680e      	ldr	r6, [r1, #0]
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd ffd7 	bl	8000c28 <__aeabi_d2f>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8c:	ee17 0a90 	vmov	r0, s15
 8002c90:	f7fd fc7a 	bl	8000588 <__aeabi_f2d>
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <bmi088_update+0x3e8>)
 8002c9a:	f7fd fdf7 	bl	800088c <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <bmi088_update+0x3ec>)
 8002cac:	f7fd fcc4 	bl	8000638 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <bmi088_update+0x3f0>)
 8002cbe:	f7fd fcbb 	bl	8000638 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4692      	mov	sl, r2
 8002cc8:	469b      	mov	fp, r3
 8002cca:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <bmi088_update+0x3e4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	7d1b      	ldrb	r3, [r3, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cda:	ee17 0a90 	vmov	r0, s15
 8002cde:	f7fd fc53 	bl	8000588 <__aeabi_f2d>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	ec43 2b11 	vmov	d1, r2, r3
 8002cea:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8002e28 <bmi088_update+0x3d8>
 8002cee:	f012 fea7 	bl	8015a40 <pow>
 8002cf2:	ec53 2b10 	vmov	r2, r3, d0
 8002cf6:	4650      	mov	r0, sl
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	f7fd fc9d 	bl	8000638 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <bmi088_update+0x3f8>)
 8002d0c:	f7fd fade 	bl	80002cc <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4947      	ldr	r1, [pc, #284]	; (8002e34 <bmi088_update+0x3e4>)
 8002d16:	680e      	ldr	r6, [r1, #0]
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff84 	bl	8000c28 <__aeabi_d2f>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc27 	bl	8000588 <__aeabi_f2d>
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <bmi088_update+0x3e8>)
 8002d40:	f7fd fda4 	bl	800088c <__aeabi_ddiv>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <bmi088_update+0x3ec>)
 8002d52:	f7fd fc71 	bl	8000638 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <bmi088_update+0x3f0>)
 8002d64:	f7fd fc68 	bl	8000638 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4692      	mov	sl, r2
 8002d6e:	469b      	mov	fp, r3
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <bmi088_update+0x3e4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	7d1b      	ldrb	r3, [r3, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d80:	ee17 0a90 	vmov	r0, s15
 8002d84:	f7fd fc00 	bl	8000588 <__aeabi_f2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	ec43 2b11 	vmov	d1, r2, r3
 8002d90:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002e28 <bmi088_update+0x3d8>
 8002d94:	f012 fe54 	bl	8015a40 <pow>
 8002d98:	ec53 2b10 	vmov	r2, r3, d0
 8002d9c:	4650      	mov	r0, sl
 8002d9e:	4659      	mov	r1, fp
 8002da0:	f7fd fc4a 	bl	8000638 <__aeabi_dmul>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <bmi088_update+0x3f4>)
 8002db2:	f7fd fa8b 	bl	80002cc <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	491e      	ldr	r1, [pc, #120]	; (8002e34 <bmi088_update+0x3e4>)
 8002dbc:	680e      	ldr	r6, [r1, #0]
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd ff31 	bl	8000c28 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <bmi088_update+0x3fc>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03f      	beq.n	8002e54 <bmi088_update+0x404>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <bmi088_update+0x3e4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <bmi088_update+0x3e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	d502      	bpl.n	8002df8 <bmi088_update+0x3a8>
 8002df2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002e50 <bmi088_update+0x400>
 8002df6:	e009      	b.n	8002e0c <bmi088_update+0x3bc>
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <bmi088_update+0x3e4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <bmi088_update+0x3e4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <bmi088_update+0x3e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002e14:	e024      	b.n	8002e60 <bmi088_update+0x410>
 8002e16:	bf00      	nop
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	40438800 	.word	0x40438800
 8002e20:	00000000 	.word	0x00000000
 8002e24:	412e8480 	.word	0x412e8480
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	40000000 	.word	0x40000000
 8002e30:	40370000 	.word	0x40370000
 8002e34:	20000264 	.word	0x20000264
 8002e38:	40e00000 	.word	0x40e00000
 8002e3c:	408f4000 	.word	0x408f4000
 8002e40:	3ff80000 	.word	0x3ff80000
 8002e44:	40100000 	.word	0x40100000
 8002e48:	402e0000 	.word	0x402e0000
 8002e4c:	20000269 	.word	0x20000269
 8002e50:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002e54:	4bb6      	ldr	r3, [pc, #728]	; (8003130 <bmi088_update+0x6e0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4bb4      	ldr	r3, [pc, #720]	; (8003130 <bmi088_update+0x6e0>)
 8002e5e:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e60:	4bb4      	ldr	r3, [pc, #720]	; (8003134 <bmi088_update+0x6e4>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4bb3      	ldr	r3, [pc, #716]	; (8003134 <bmi088_update+0x6e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e6c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e70:	4bb0      	ldr	r3, [pc, #704]	; (8003134 <bmi088_update+0x6e4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e78:	4baf      	ldr	r3, [pc, #700]	; (8003138 <bmi088_update+0x6e8>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e7e:	4bad      	ldr	r3, [pc, #692]	; (8003134 <bmi088_update+0x6e4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	7c5b      	ldrb	r3, [r3, #17]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 81d0 	beq.w	800322a <bmi088_update+0x7da>
 8002e8a:	4bab      	ldr	r3, [pc, #684]	; (8003138 <bmi088_update+0x6e8>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 81cb 	beq.w	800322a <bmi088_update+0x7da>
		{
			if(isStarded){
 8002e94:	4ba6      	ldr	r3, [pc, #664]	; (8003130 <bmi088_update+0x6e0>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 81bb 	beq.w	8003214 <bmi088_update+0x7c4>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e9e:	4ba7      	ldr	r3, [pc, #668]	; (800313c <bmi088_update+0x6ec>)
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	4ba4      	ldr	r3, [pc, #656]	; (8003134 <bmi088_update+0x6e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330b      	adds	r3, #11
 8002ea8:	220a      	movs	r2, #10
 8002eaa:	9202      	str	r2, [sp, #8]
 8002eac:	2206      	movs	r2, #6
 8002eae:	9201      	str	r2, [sp, #4]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	21d0      	movs	r1, #208	; 0xd0
 8002eb8:	f006 f8f0 	bl	800909c <HAL_I2C_Mem_Read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 81b0 	bne.w	8003228 <bmi088_update+0x7d8>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <bmi088_update+0x6e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	7c1b      	ldrb	r3, [r3, #16]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	4b98      	ldr	r3, [pc, #608]	; (8003134 <bmi088_update+0x6e4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	7bdb      	ldrb	r3, [r3, #15]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002ede:	4b95      	ldr	r3, [pc, #596]	; (8003134 <bmi088_update+0x6e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	7b9b      	ldrb	r3, [r3, #14]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b92      	ldr	r3, [pc, #584]	; (8003134 <bmi088_update+0x6e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	7b5b      	ldrb	r3, [r3, #13]
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <bmi088_update+0x6e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	7b1b      	ldrb	r3, [r3, #12]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b8d      	ldr	r3, [pc, #564]	; (8003134 <bmi088_update+0x6e4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	7adb      	ldrb	r3, [r3, #11]
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002f0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fb28 	bl	8000564 <__aeabi_i2d>
 8002f14:	a384      	add	r3, pc, #528	; (adr r3, 8003128 <bmi088_update+0x6d8>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd fcb7 	bl	800088c <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4692      	mov	sl, r2
 8002f24:	469b      	mov	fp, r3
 8002f26:	4b83      	ldr	r3, [pc, #524]	; (8003134 <bmi088_update+0x6e4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	7e5b      	ldrb	r3, [r3, #25]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f32:	4113      	asrs	r3, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fb15 	bl	8000564 <__aeabi_i2d>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4650      	mov	r0, sl
 8002f40:	4659      	mov	r1, fp
 8002f42:	f7fd fb79 	bl	8000638 <__aeabi_dmul>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <bmi088_update+0x6f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f56:	4e77      	ldr	r6, [pc, #476]	; (8003134 <bmi088_update+0x6e4>)
 8002f58:	6836      	ldr	r6, [r6, #0]
 8002f5a:	f7fd f9b5 	bl	80002c8 <__aeabi_dsub>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fafa 	bl	8000564 <__aeabi_i2d>
 8002f70:	a36d      	add	r3, pc, #436	; (adr r3, 8003128 <bmi088_update+0x6d8>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd fc89 	bl	800088c <__aeabi_ddiv>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4692      	mov	sl, r2
 8002f80:	469b      	mov	fp, r3
 8002f82:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <bmi088_update+0x6e4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	7e5b      	ldrb	r3, [r3, #25]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f8e:	4113      	asrs	r3, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fae7 	bl	8000564 <__aeabi_i2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4650      	mov	r0, sl
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	f7fd fb4b 	bl	8000638 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <bmi088_update+0x6f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002fb2:	4e60      	ldr	r6, [pc, #384]	; (8003134 <bmi088_update+0x6e4>)
 8002fb4:	6836      	ldr	r6, [r6, #0]
 8002fb6:	f7fd f987 	bl	80002c8 <__aeabi_dsub>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002fc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd facc 	bl	8000564 <__aeabi_i2d>
 8002fcc:	a356      	add	r3, pc, #344	; (adr r3, 8003128 <bmi088_update+0x6d8>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fc5b 	bl	800088c <__aeabi_ddiv>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4692      	mov	sl, r2
 8002fdc:	469b      	mov	fp, r3
 8002fde:	4b55      	ldr	r3, [pc, #340]	; (8003134 <bmi088_update+0x6e4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7e5b      	ldrb	r3, [r3, #25]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fea:	4113      	asrs	r3, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fab9 	bl	8000564 <__aeabi_i2d>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4650      	mov	r0, sl
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	f7fd fb1d 	bl	8000638 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	4b4e      	ldr	r3, [pc, #312]	; (8003140 <bmi088_update+0x6f0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800300e:	4e49      	ldr	r6, [pc, #292]	; (8003134 <bmi088_update+0x6e4>)
 8003010:	6836      	ldr	r6, [r6, #0]
 8003012:	f7fd f959 	bl	80002c8 <__aeabi_dsub>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 800301e:	4b45      	ldr	r3, [pc, #276]	; (8003134 <bmi088_update+0x6e4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd faae 	bl	8000588 <__aeabi_f2d>
 800302c:	e9c7 0100 	strd	r0, r1, [r7]
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <bmi088_update+0x6e4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8003038:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <bmi088_update+0x6e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd faa1 	bl	8000588 <__aeabi_f2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4650      	mov	r0, sl
 800304c:	4659      	mov	r1, fp
 800304e:	f7fd faf3 	bl	8000638 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800305a:	f7fd f937 	bl	80002cc <__adddf3>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4934      	ldr	r1, [pc, #208]	; (8003134 <bmi088_update+0x6e4>)
 8003064:	680e      	ldr	r6, [r1, #0]
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fddd 	bl	8000c28 <__aeabi_d2f>
 800306e:	4603      	mov	r3, r0
 8003070:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <bmi088_update+0x6e4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa83 	bl	8000588 <__aeabi_f2d>
 8003082:	e9c7 0100 	strd	r0, r1, [r7]
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <bmi088_update+0x6e4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <bmi088_update+0x6e4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa76 	bl	8000588 <__aeabi_f2d>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4650      	mov	r0, sl
 80030a2:	4659      	mov	r1, fp
 80030a4:	f7fd fac8 	bl	8000638 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030b0:	f7fd f90c 	bl	80002cc <__adddf3>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	491e      	ldr	r1, [pc, #120]	; (8003134 <bmi088_update+0x6e4>)
 80030ba:	680e      	ldr	r6, [r1, #0]
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fd fdb2 	bl	8000c28 <__aeabi_d2f>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <bmi088_update+0x6e4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa58 	bl	8000588 <__aeabi_f2d>
 80030d8:	e9c7 0100 	strd	r0, r1, [r7]
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <bmi088_update+0x6e4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <bmi088_update+0x6e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa4b 	bl	8000588 <__aeabi_f2d>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4650      	mov	r0, sl
 80030f8:	4659      	mov	r1, fp
 80030fa:	f7fd fa9d 	bl	8000638 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003106:	f7fd f8e1 	bl	80002cc <__adddf3>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4909      	ldr	r1, [pc, #36]	; (8003134 <bmi088_update+0x6e4>)
 8003110:	680e      	ldr	r6, [r1, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f7fd fd87 	bl	8000c28 <__aeabi_d2f>
 800311a:	4603      	mov	r3, r0
 800311c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8003120:	e010      	b.n	8003144 <bmi088_update+0x6f4>
 8003122:	bf00      	nop
 8003124:	f3af 8000 	nop.w
 8003128:	00000000 	.word	0x00000000
 800312c:	40dfffc0 	.word	0x40dfffc0
 8003130:	20000269 	.word	0x20000269
 8003134:	20000264 	.word	0x20000264
 8003138:	20000268 	.word	0x20000268
 800313c:	20000260 	.word	0x20000260
 8003140:	20000008 	.word	0x20000008


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <bmi088_update+0x7f0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800314c:	4690      	mov	r8, r2
 800314e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003152:	a339      	add	r3, pc, #228	; (adr r3, 8003238 <bmi088_update+0x7e8>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	4640      	mov	r0, r8
 800315a:	4649      	mov	r1, r9
 800315c:	f7fd fa6c 	bl	8000638 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <bmi088_update+0x7f4>)
 800316e:	f7fd fb8d 	bl	800088c <__aeabi_ddiv>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f7fd fd55 	bl	8000c28 <__aeabi_d2f>
 800317e:	4606      	mov	r6, r0
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <bmi088_update+0x7f0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003188:	a32b      	add	r3, pc, #172	; (adr r3, 8003238 <bmi088_update+0x7e8>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fa53 	bl	8000638 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <bmi088_update+0x7f4>)
 80031a0:	f7fd fb74 	bl	800088c <__aeabi_ddiv>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7fd fd3c 	bl	8000c28 <__aeabi_d2f>
 80031b0:	4680      	mov	r8, r0
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <bmi088_update+0x7f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80031ba:	4614      	mov	r4, r2
 80031bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80031c0:	a31d      	add	r3, pc, #116	; (adr r3, 8003238 <bmi088_update+0x7e8>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	4620      	mov	r0, r4
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7fd fa35 	bl	8000638 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <bmi088_update+0x7f4>)
 80031dc:	f7fd fb56 	bl	800088c <__aeabi_ddiv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fd1e 	bl	8000c28 <__aeabi_d2f>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <bmi088_update+0x7f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80031f6:	eef0 1a67 	vmov.f32	s3, s15
 80031fa:	ee01 2a10 	vmov	s2, r2
 80031fe:	ee00 8a90 	vmov	s1, r8
 8003202:	ee00 6a10 	vmov	s0, r6
 8003206:	f002 f883 	bl	8005310 <updateQuaternion>
				quaternionToEuler();
 800320a:	f002 f9cd 	bl	80055a8 <quaternionToEuler>

				is_gyro_offset = 1;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <bmi088_update+0x7f8>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <bmi088_update+0x7f0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <bmi088_update+0x7fc>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e002      	b.n	800322a <bmi088_update+0x7da>
				return;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <bmi088_update+0x7da>
					return;
 8003228:	bf00      	nop
		}


}
 800322a:	3724      	adds	r7, #36	; 0x24
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	f3af 8000 	nop.w
 8003238:	54442d18 	.word	0x54442d18
 800323c:	400921fb 	.word	0x400921fb
 8003240:	20000264 	.word	0x20000264
 8003244:	40668000 	.word	0x40668000
 8003248:	2000026a 	.word	0x2000026a
 800324c:	20000268 	.word	0x20000268

08003250 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <bmi088_getAccelDatas_INT+0x18>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	749a      	strb	r2, [r3, #18]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000264 	.word	0x20000264

0800326c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <bmi088_getGyroDatas_INT+0x18>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	745a      	strb	r2, [r3, #17]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000264 	.word	0x20000264

08003288 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 800328c:	f7ff fbe0 	bl	8002a50 <bmi088_update>
		if(is_gyro_offset == 1)
 8003290:	4b3e      	ldr	r3, [pc, #248]	; (800338c <getOffset+0x104>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d1f9      	bne.n	800328c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003298:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <getOffset+0x108>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a0:	da32      	bge.n	8003308 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <getOffset+0x10c>)
 80032a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <getOffset+0x110>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80032b0:	f7fd f80c 	bl	80002cc <__adddf3>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4936      	ldr	r1, [pc, #216]	; (8003394 <getOffset+0x10c>)
 80032ba:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <getOffset+0x10c>)
 80032c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032c4:	4b34      	ldr	r3, [pc, #208]	; (8003398 <getOffset+0x110>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80032cc:	f7fc fffe 	bl	80002cc <__adddf3>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	492f      	ldr	r1, [pc, #188]	; (8003394 <getOffset+0x10c>)
 80032d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <getOffset+0x10c>)
 80032dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <getOffset+0x110>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80032e8:	f7fc fff0 	bl	80002cc <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4928      	ldr	r1, [pc, #160]	; (8003394 <getOffset+0x10c>)
 80032f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <getOffset+0x108>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	4a24      	ldr	r2, [pc, #144]	; (8003390 <getOffset+0x108>)
 80032fe:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 getInitialQuaternion();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8003300:	4b22      	ldr	r3, [pc, #136]	; (800338c <getOffset+0x104>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e7c1      	b.n	800328c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <getOffset+0x10c>)
 800330a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <getOffset+0x114>)
 8003314:	f7fd faba 	bl	800088c <__aeabi_ddiv>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	491d      	ldr	r1, [pc, #116]	; (8003394 <getOffset+0x10c>)
 800331e:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <getOffset+0x10c>)
 8003324:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <getOffset+0x114>)
 800332e:	f7fd faad 	bl	800088c <__aeabi_ddiv>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4917      	ldr	r1, [pc, #92]	; (8003394 <getOffset+0x10c>)
 8003338:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <getOffset+0x10c>)
 800333e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <getOffset+0x114>)
 8003348:	f7fd faa0 	bl	800088c <__aeabi_ddiv>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4910      	ldr	r1, [pc, #64]	; (8003394 <getOffset+0x10c>)
 8003352:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <getOffset+0x118>)
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <getOffset+0x10c>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <getOffset+0x118>)
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <getOffset+0x10c>)
 800336a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800336e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <getOffset+0x118>)
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <getOffset+0x10c>)
 8003378:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800337c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 getInitialQuaternion();
 8003380:	f002 fabe 	bl	8005900 <getInitialQuaternion>
					 break;
 8003384:	bf00      	nop
		}

	}
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2000026a 	.word	0x2000026a
 8003390:	200002a0 	.word	0x200002a0
 8003394:	20000270 	.word	0x20000270
 8003398:	20000264 	.word	0x20000264
 800339c:	408f4000 	.word	0x408f4000
 80033a0:	20000008 	.word	0x20000008

080033a4 <calculateCRC>:

union DataPack veriler;
uint8_t bufferPrint[400];

static uint8_t calculateCRC()
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
	int check_sum = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80033ae:	2301      	movs	r3, #1
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	e00a      	b.n	80033ca <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 80033b4:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <calculateCRC+0x48>)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b3c      	cmp	r3, #60	; 0x3c
 80033ce:	d9f1      	bls.n	80033b4 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	425a      	negs	r2, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	bf58      	it	pl
 80033da:	4253      	negpl	r3, r2
 80033dc:	b2db      	uxtb	r3, r3
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200002a4 	.word	0x200002a4

080033f0 <sendRF>:

static void sendRF()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 80033f4:	4806      	ldr	r0, [pc, #24]	; (8003410 <sendRF+0x20>)
 80033f6:	f005 f821 	bl	800843c <HAL_DMA_GetState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d004      	beq.n	800340a <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.arr));
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	4904      	ldr	r1, [pc, #16]	; (8003414 <sendRF+0x24>)
 8003404:	4804      	ldr	r0, [pc, #16]	; (8003418 <sendRF+0x28>)
 8003406:	f008 fca9 	bl	800bd5c <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000560 	.word	0x20000560
 8003414:	200002a4 	.word	0x200002a4
 8003418:	20000450 	.word	0x20000450

0800341c <sendPC>:

static void sendPC()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 8003420:	4806      	ldr	r0, [pc, #24]	; (800343c <sendPC+0x20>)
 8003422:	f005 f80b 	bl	800843c <HAL_DMA_GetState>
 8003426:	4603      	mov	r3, r0
 8003428:	2b02      	cmp	r3, #2
 800342a:	d004      	beq.n	8003436 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4904      	ldr	r1, [pc, #16]	; (8003440 <sendPC+0x24>)
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <sendPC+0x28>)
 8003432:	f008 fc93 	bl	800bd5c <HAL_UART_Transmit_DMA>
	}
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000620 	.word	0x20000620
 8003440:	200002a4 	.word	0x200002a4
 8003444:	20000494 	.word	0x20000494

08003448 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6178      	str	r0, [r7, #20]
 8003450:	6139      	str	r1, [r7, #16]
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8003456:	4b73      	ldr	r3, [pc, #460]	; (8003624 <packDatas+0x1dc>)
 8003458:	22ff      	movs	r2, #255	; 0xff
 800345a:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	edd3 7a03 	vldr	s15, [r3, #12]
 800346a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346e:	ee17 3a90 	vmov	r3, s15
 8003472:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <packDatas+0x1e0>)
 8003478:	fb82 1203 	smull	r1, r2, r2, r3
 800347c:	1151      	asrs	r1, r2, #5
 800347e:	17da      	asrs	r2, r3, #31
 8003480:	1a8a      	subs	r2, r1, r2
 8003482:	2164      	movs	r1, #100	; 0x64
 8003484:	fb01 f202 	mul.w	r2, r1, r2
 8003488:	1a9a      	subs	r2, r3, r2
 800348a:	4613      	mov	r3, r2
 800348c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <packDatas+0x1e0>)
 8003492:	fb82 1203 	smull	r1, r2, r2, r3
 8003496:	1152      	asrs	r2, r2, #5
 8003498:	17db      	asrs	r3, r3, #31
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4a61      	ldr	r2, [pc, #388]	; (8003628 <packDatas+0x1e0>)
 80034a2:	fb82 1203 	smull	r1, r2, r2, r3
 80034a6:	1151      	asrs	r1, r2, #5
 80034a8:	17da      	asrs	r2, r3, #31
 80034aa:	1a8a      	subs	r2, r1, r2
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	fb01 f202 	mul.w	r2, r1, r2
 80034b2:	1a9a      	subs	r2, r3, r2
 80034b4:	4613      	mov	r3, r2
 80034b6:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	b25a      	sxtb	r2, r3
 80034be:	7fbb      	ldrb	r3, [r7, #30]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 80034cc:	7fbb      	ldrb	r3, [r7, #30]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	b25a      	sxtb	r2, r3
 80034d2:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80034d6:	4313      	orrs	r3, r2
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <packDatas+0x1dc>)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80034e2:	4a50      	ldr	r2, [pc, #320]	; (8003624 <packDatas+0x1dc>)
 80034e4:	7fbb      	ldrb	r3, [r7, #30]
 80034e6:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800362c <packDatas+0x1e4>
 80034f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fa:	ee17 3a90 	vmov	r3, s15
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b48      	ldr	r3, [pc, #288]	; (8003624 <packDatas+0x1dc>)
 8003502:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	edd3 7a03 	vldr	s15, [r3, #12]
 800350a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800350e:	ee17 3a90 	vmov	r3, s15
 8003512:	b29a      	uxth	r2, r3
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <packDatas+0x1dc>)
 8003516:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	edd3 7a05 	vldr	s15, [r3, #20]
 800351e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003526:	edc7 7a01 	vstr	s15, [r7, #4]
 800352a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <packDatas+0x1dc>)
 8003530:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	edd3 7a07 	vldr	s15, [r3, #28]
 8003538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003540:	793a      	ldrb	r2, [r7, #4]
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <packDatas+0x1dc>)
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	4a35      	ldr	r2, [pc, #212]	; (8003624 <packDatas+0x1dc>)
 800354e:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <packDatas+0x1e8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800355c:	ee17 3a90 	vmov	r3, s15
 8003560:	b21a      	sxth	r2, r3
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <packDatas+0x1dc>)
 8003564:	875a      	strh	r2, [r3, #58]	; 0x3a
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	4a2e      	ldr	r2, [pc, #184]	; (8003624 <packDatas+0x1dc>)
 800356c:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <packDatas+0x1dc>)
 8003574:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <packDatas+0x1dc>)
 800357c:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f7fd fb4e 	bl	8000c28 <__aeabi_d2f>
 800358c:	4603      	mov	r3, r0
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <packDatas+0x1dc>)
 8003598:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fd fb3f 	bl	8000c28 <__aeabi_d2f>
 80035aa:	4603      	mov	r3, r0
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef1 7a67 	vneg.f32	s15, s15
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <packDatas+0x1dc>)
 80035b6:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	f7fd fb30 	bl	8000c28 <__aeabi_d2f>
 80035c8:	4603      	mov	r3, r0
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef1 7a67 	vneg.f32	s15, s15
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <packDatas+0x1dc>)
 80035d4:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80035de:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003634 <packDatas+0x1ec>
 80035e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <packDatas+0x1dc>)
 80035e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035f2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003634 <packDatas+0x1ec>
 80035f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <packDatas+0x1dc>)
 80035fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 8003600:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003604:	2b01      	cmp	r3, #1
 8003606:	d917      	bls.n	8003638 <packDatas+0x1f0>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800360e:	eeb1 7a67 	vneg.f32	s14, s15
 8003612:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003634 <packDatas+0x1ec>
 8003616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800361a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800361e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003622:	e010      	b.n	8003646 <packDatas+0x1fe>
 8003624:	200002a4 	.word	0x200002a4
 8003628:	51eb851f 	.word	0x51eb851f
 800362c:	42c80000 	.word	0x42c80000
 8003630:	20000008 	.word	0x20000008
 8003634:	447a0000 	.word	0x447a0000
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800363e:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003634 <packDatas+0x1ec>
 8003642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003646:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <packDatas+0x338>)
 8003648:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	b25a      	sxtb	r2, r3
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <packDatas+0x33c>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003660:	ee17 3a90 	vmov	r3, s15
 8003664:	135b      	asrs	r3, r3, #13
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	b25b      	sxtb	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b25a      	sxtb	r2, r3
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <packDatas+0x33c>)
 8003674:	edd3 7a01 	vldr	s15, [r3, #4]
 8003678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800367c:	ee17 3a90 	vmov	r3, s15
 8003680:	139b      	asrs	r3, r3, #14
 8003682:	b25b      	sxtb	r3, r3
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b25a      	sxtb	r2, r3
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <packDatas+0x33c>)
 8003690:	edd3 7a02 	vldr	s15, [r3, #8]
 8003694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003698:	ee17 3a90 	vmov	r3, s15
 800369c:	13db      	asrs	r3, r3, #15
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b34      	ldr	r3, [pc, #208]	; (8003780 <packDatas+0x338>)
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c4:	ee17 3a90 	vmov	r3, s15
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <packDatas+0x338>)
 80036cc:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80036ce:	f002 f857 	bl	8005780 <quaternionToTheta>
 80036d2:	eef0 7a40 	vmov.f32	s15, s0
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <packDatas+0x338>)
 80036d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <packDatas+0x33c>)
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e6:	ee17 3a90 	vmov	r3, s15
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	425b      	neglt	r3, r3
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <packDatas+0x338>)
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <packDatas+0x33c>)
 80036fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	ee17 3a90 	vmov	r3, s15
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfb8      	it	lt
 800370a:	425b      	neglt	r3, r3
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <packDatas+0x338>)
 8003710:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <packDatas+0x33c>)
 8003716:	edd3 7a02 	vldr	s15, [r3, #8]
 800371a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371e:	ee17 3a90 	vmov	r3, s15
 8003722:	2b00      	cmp	r3, #0
 8003724:	bfb8      	it	lt
 8003726:	425b      	neglt	r3, r3
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <packDatas+0x338>)
 800372c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003730:	f7ff fe38 	bl	80033a4 <calculateCRC>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <packDatas+0x338>)
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <packDatas+0x338>)
 8003740:	220d      	movs	r2, #13
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <packDatas+0x338>)
 8003748:	220a      	movs	r2, #10
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	dd06      	ble.n	8003770 <packDatas+0x328>
		lora_activate();
 8003762:	f000 fd69 	bl	8004238 <lora_activate>
		sendRF();
 8003766:	f7ff fe43 	bl	80033f0 <sendRF>
		sendPC();
 800376a:	f7ff fe57 	bl	800341c <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 800376e:	e003      	b.n	8003778 <packDatas+0x330>
		sendPC();
 8003770:	f7ff fe54 	bl	800341c <sendPC>
		lora_deactivate();
 8003774:	f000 fd72 	bl	800425c <lora_deactivate>
}
 8003778:	bf00      	nop
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200002a4 	.word	0x200002a4
 8003784:	200009cc 	.word	0x200009cc

08003788 <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	899b      	ldrh	r3, [r3, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	4619      	mov	r1, r3
 800379c:	f005 f9c4 	bl	8008b28 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037a0:	f003 fd48 	bl	8007234 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2264      	movs	r2, #100	; 0x64
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	899b      	ldrh	r3, [r3, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4619      	mov	r1, r3
 80037ce:	f005 f9ab 	bl	8008b28 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037d2:	f003 fd2f 	bl	8007234 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037f2:	f003 fd1f 	bl	8007234 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	1ad2      	subs	r2, r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d907      	bls.n	8003816 <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	899b      	ldrh	r3, [r3, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	4619      	mov	r1, r3
 8003812:	f005 f989 	bl	8008b28 <HAL_GPIO_WritePin>
	}
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003824:	2200      	movs	r2, #0
 8003826:	2110      	movs	r1, #16
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <SELECT+0x14>)
 800382a:	f005 f97d 	bl	8008b28 <HAL_GPIO_WritePin>
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40020000 	.word	0x40020000

08003838 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800383c:	2201      	movs	r2, #1
 800383e:	2110      	movs	r1, #16
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <DESELECT+0x14>)
 8003842:	f005 f971 	bl	8008b28 <HAL_GPIO_WritePin>
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40020000 	.word	0x40020000

08003850 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800385a:	bf00      	nop
 800385c:	4808      	ldr	r0, [pc, #32]	; (8003880 <SPI_TxByte+0x30>)
 800385e:	f008 f897 	bl	800b990 <HAL_SPI_GetState>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d1f9      	bne.n	800385c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8003868:	1df9      	adds	r1, r7, #7
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	2201      	movs	r2, #1
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <SPI_TxByte+0x30>)
 8003872:	f007 fdaf 	bl	800b3d4 <HAL_SPI_Transmit>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200003f8 	.word	0x200003f8

08003884 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800388a:	23ff      	movs	r3, #255	; 0xff
 800388c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003892:	bf00      	nop
 8003894:	4809      	ldr	r0, [pc, #36]	; (80038bc <SPI_RxByte+0x38>)
 8003896:	f008 f87b 	bl	800b990 <HAL_SPI_GetState>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d1f9      	bne.n	8003894 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80038a0:	1dba      	adds	r2, r7, #6
 80038a2:	1df9      	adds	r1, r7, #7
 80038a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2301      	movs	r3, #1
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <SPI_RxByte+0x38>)
 80038ae:	f007 fecd 	bl	800b64c <HAL_SPI_TransmitReceive>

  return data;
 80038b2:	79bb      	ldrb	r3, [r7, #6]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200003f8 	.word	0x200003f8

080038c0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80038c8:	f7ff ffdc 	bl	8003884 <SPI_RxByte>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	701a      	strb	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <SD_ReadyWait+0x34>)
 80038e4:	2232      	movs	r2, #50	; 0x32
 80038e6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80038e8:	f7ff ffcc 	bl	8003884 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80038ec:	f7ff ffca 	bl	8003884 <SPI_RxByte>
 80038f0:	4603      	mov	r3, r0
 80038f2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d004      	beq.n	8003904 <SD_ReadyWait+0x28>
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <SD_ReadyWait+0x34>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f3      	bne.n	80038ec <SD_ReadyWait+0x10>

  return res;
 8003904:	79fb      	ldrb	r3, [r7, #7]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200009da 	.word	0x200009da

08003914 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800391a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800391e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8003920:	f7ff ff8a 	bl	8003838 <DESELECT>

  for(int i = 0; i < 10; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e005      	b.n	8003936 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800392a:	20ff      	movs	r0, #255	; 0xff
 800392c:	f7ff ff90 	bl	8003850 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3301      	adds	r3, #1
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b09      	cmp	r3, #9
 800393a:	ddf6      	ble.n	800392a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800393c:	f7ff ff70 	bl	8003820 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8003940:	2340      	movs	r3, #64	; 0x40
 8003942:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8003954:	2395      	movs	r3, #149	; 0x95
 8003956:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e009      	b.n	8003972 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800395e:	1d3a      	adds	r2, r7, #4
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff72 	bl	8003850 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b05      	cmp	r3, #5
 8003976:	ddf2      	ble.n	800395e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8003978:	e002      	b.n	8003980 <SD_PowerOn+0x6c>
  {
    Count--;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3b01      	subs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8003980:	f7ff ff80 	bl	8003884 <SPI_RxByte>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <SD_PowerOn+0x7c>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f4      	bne.n	800397a <SD_PowerOn+0x66>
  }

  DESELECT();
 8003990:	f7ff ff52 	bl	8003838 <DESELECT>
  SPI_TxByte(0XFF);
 8003994:	20ff      	movs	r0, #255	; 0xff
 8003996:	f7ff ff5b 	bl	8003850 <SPI_TxByte>

  PowerFlag = 1;
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <SD_PowerOn+0x94>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200002e5 	.word	0x200002e5

080039ac <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <SD_PowerOff+0x14>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	200002e5 	.word	0x200002e5

080039c4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <SD_CheckPower+0x14>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200002e5 	.word	0x200002e5

080039dc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <SD_RxDataBlock+0x68>)
 80039e8:	220a      	movs	r2, #10
 80039ea:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80039ec:	f7ff ff4a 	bl	8003884 <SPI_RxByte>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d104      	bne.n	8003a04 <SD_RxDataBlock+0x28>
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <SD_RxDataBlock+0x68>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f3      	bne.n	80039ec <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2bfe      	cmp	r3, #254	; 0xfe
 8003a08:	d001      	beq.n	8003a0e <SD_RxDataBlock+0x32>
    return FALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e016      	b.n	8003a3c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff53 	bl	80038c0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff4d 	bl	80038c0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	3b02      	subs	r3, #2
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ed      	bne.n	8003a0e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8003a32:	f7ff ff27 	bl	8003884 <SPI_RxByte>
  SPI_RxByte();
 8003a36:	f7ff ff25 	bl	8003884 <SPI_RxByte>

  return TRUE;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200009d9 	.word	0x200009d9

08003a48 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0, wc;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint8_t i = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003a5c:	f7ff ff3e 	bl	80038dc <SD_ReadyWait>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2bff      	cmp	r3, #255	; 0xff
 8003a64:	d001      	beq.n	8003a6a <SD_TxDataBlock+0x22>
    return FALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e040      	b.n	8003aec <SD_TxDataBlock+0xa4>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff feef 	bl	8003850 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2bfd      	cmp	r3, #253	; 0xfd
 8003a76:	d031      	beq.n	8003adc <SD_TxDataBlock+0x94>
  {
    wc = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fee3 	bl	8003850 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fedc 	bl	8003850 <SPI_TxByte>
    } while (--wc);
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	73bb      	strb	r3, [r7, #14]
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1eb      	bne.n	8003a7c <SD_TxDataBlock+0x34>

    SPI_RxByte();       /* CRC 무시 */
 8003aa4:	f7ff feee 	bl	8003884 <SPI_RxByte>
    SPI_RxByte();
 8003aa8:	f7ff feec 	bl	8003884 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8003aac:	e00b      	b.n	8003ac6 <SD_TxDataBlock+0x7e>
    {
      resp = SPI_RxByte();
 8003aae:	f7ff fee9 	bl	8003884 <SPI_RxByte>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d006      	beq.n	8003ace <SD_TxDataBlock+0x86>
        break;

      i++;
 8003ac0:	7b7b      	ldrb	r3, [r7, #13]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8003ac6:	7b7b      	ldrb	r3, [r7, #13]
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d9f0      	bls.n	8003aae <SD_TxDataBlock+0x66>
 8003acc:	e000      	b.n	8003ad0 <SD_TxDataBlock+0x88>
        break;
 8003ace:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003ad0:	bf00      	nop
 8003ad2:	f7ff fed7 	bl	8003884 <SPI_RxByte>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0fa      	beq.n	8003ad2 <SD_TxDataBlock+0x8a>
  }

  if ((resp & 0x1F) == 0x05)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	d101      	bne.n	8003aea <SD_TxDataBlock+0xa2>
    return TRUE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <SD_TxDataBlock+0xa4>
  else
    return FALSE;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003b00:	f7ff feec 	bl	80038dc <SD_ReadyWait>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2bff      	cmp	r3, #255	; 0xff
 8003b08:	d001      	beq.n	8003b0e <SD_SendCmd+0x1a>
    return 0xFF;
 8003b0a:	23ff      	movs	r3, #255	; 0xff
 8003b0c:	e040      	b.n	8003b90 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fe9d 	bl	8003850 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fe97 	bl	8003850 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fe91 	bl	8003850 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fe8b 	bl	8003850 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe86 	bl	8003850 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d101      	bne.n	8003b52 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003b4e:	2395      	movs	r3, #149	; 0x95
 8003b50:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	2b48      	cmp	r3, #72	; 0x48
 8003b56:	d101      	bne.n	8003b5c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003b58:	2387      	movs	r3, #135	; 0x87
 8003b5a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fe76 	bl	8003850 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	2b4c      	cmp	r3, #76	; 0x4c
 8003b68:	d101      	bne.n	8003b6e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8003b6a:	f7ff fe8b 	bl	8003884 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8003b6e:	230a      	movs	r3, #10
 8003b70:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003b72:	f7ff fe87 	bl	8003884 <SPI_RxByte>
 8003b76:	4603      	mov	r3, r0
 8003b78:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003b7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da05      	bge.n	8003b8e <SD_SendCmd+0x9a>
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	73bb      	strb	r3, [r7, #14]
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f1      	bne.n	8003b72 <SD_SendCmd+0x7e>

  return res;
 8003b8e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0d5      	b.n	8003d58 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8003bac:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <SD_disk_initialize+0x1c8>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <SD_disk_initialize+0x2a>
    return Stat;
 8003bba:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <SD_disk_initialize+0x1c8>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e0ca      	b.n	8003d58 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8003bc2:	f7ff fea7 	bl	8003914 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8003bc6:	f7ff fe2b 	bl	8003820 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2040      	movs	r0, #64	; 0x40
 8003bd2:	f7ff ff8f 	bl	8003af4 <SD_SendCmd>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 80a5 	bne.w	8003d28 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <SD_disk_initialize+0x1cc>)
 8003be0:	2264      	movs	r2, #100	; 0x64
 8003be2:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003be4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003be8:	2048      	movs	r0, #72	; 0x48
 8003bea:	f7ff ff83 	bl	8003af4 <SD_SendCmd>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d158      	bne.n	8003ca6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e00c      	b.n	8003c14 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8003bfa:	7bfc      	ldrb	r4, [r7, #15]
 8003bfc:	f7ff fe42 	bl	8003884 <SPI_RxByte>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	f104 0310 	add.w	r3, r4, #16
 8003c08:	443b      	add	r3, r7
 8003c0a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3301      	adds	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d9ef      	bls.n	8003bfa <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003c1a:	7abb      	ldrb	r3, [r7, #10]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 8083 	bne.w	8003d28 <SD_disk_initialize+0x190>
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	2baa      	cmp	r3, #170	; 0xaa
 8003c26:	d17f      	bne.n	8003d28 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2077      	movs	r0, #119	; 0x77
 8003c2c:	f7ff ff62 	bl	8003af4 <SD_SendCmd>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d807      	bhi.n	8003c46 <SD_disk_initialize+0xae>
 8003c36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c3a:	2069      	movs	r0, #105	; 0x69
 8003c3c:	f7ff ff5a 	bl	8003af4 <SD_SendCmd>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <SD_disk_initialize+0x1cc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1eb      	bne.n	8003c28 <SD_disk_initialize+0x90>
 8003c50:	e000      	b.n	8003c54 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003c52:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003c54:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <SD_disk_initialize+0x1cc>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d064      	beq.n	8003d28 <SD_disk_initialize+0x190>
 8003c5e:	2100      	movs	r1, #0
 8003c60:	207a      	movs	r0, #122	; 0x7a
 8003c62:	f7ff ff47 	bl	8003af4 <SD_SendCmd>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d15d      	bne.n	8003d28 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e00c      	b.n	8003c8c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003c72:	7bfc      	ldrb	r4, [r7, #15]
 8003c74:	f7ff fe06 	bl	8003884 <SPI_RxByte>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f104 0310 	add.w	r3, r4, #16
 8003c80:	443b      	add	r3, r7
 8003c82:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d9ef      	bls.n	8003c72 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8003c92:	7a3b      	ldrb	r3, [r7, #8]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SD_disk_initialize+0x108>
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	e000      	b.n	8003ca2 <SD_disk_initialize+0x10a>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	73bb      	strb	r3, [r7, #14]
 8003ca4:	e040      	b.n	8003d28 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2077      	movs	r0, #119	; 0x77
 8003caa:	f7ff ff23 	bl	8003af4 <SD_SendCmd>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d808      	bhi.n	8003cc6 <SD_disk_initialize+0x12e>
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2069      	movs	r0, #105	; 0x69
 8003cb8:	f7ff ff1c 	bl	8003af4 <SD_SendCmd>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d801      	bhi.n	8003cc6 <SD_disk_initialize+0x12e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e000      	b.n	8003cc8 <SD_disk_initialize+0x130>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8003cca:	7bbb      	ldrb	r3, [r7, #14]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d10e      	bne.n	8003cee <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	2077      	movs	r0, #119	; 0x77
 8003cd4:	f7ff ff0e 	bl	8003af4 <SD_SendCmd>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d80e      	bhi.n	8003cfc <SD_disk_initialize+0x164>
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2069      	movs	r0, #105	; 0x69
 8003ce2:	f7ff ff07 	bl	8003af4 <SD_SendCmd>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003cec:	e00d      	b.n	8003d0a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2041      	movs	r0, #65	; 0x41
 8003cf2:	f7ff feff 	bl	8003af4 <SD_SendCmd>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <SD_disk_initialize+0x1cc>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e1      	bne.n	8003cca <SD_disk_initialize+0x132>
 8003d06:	e000      	b.n	8003d0a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8003d08:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <SD_disk_initialize+0x1cc>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <SD_disk_initialize+0x18c>
 8003d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d18:	2050      	movs	r0, #80	; 0x50
 8003d1a:	f7ff feeb 	bl	8003af4 <SD_SendCmd>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <SD_disk_initialize+0x1d0>)
 8003d2a:	7bbb      	ldrb	r3, [r7, #14]
 8003d2c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003d2e:	f7ff fd83 	bl	8003838 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003d32:	f7ff fda7 	bl	8003884 <SPI_RxByte>

  if (type)
 8003d36:	7bbb      	ldrb	r3, [r7, #14]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <SD_disk_initialize+0x1c8>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SD_disk_initialize+0x1c8>)
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e001      	b.n	8003d52 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003d4e:	f7ff fe2d 	bl	80039ac <SD_PowerOff>
  }

  return Stat;
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <SD_disk_initialize+0x1c8>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	20000000 	.word	0x20000000
 8003d64:	200009d9 	.word	0x200009d9
 8003d68:	200002e4 	.word	0x200002e4

08003d6c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <SD_disk_status+0x14>
    return STA_NOINIT;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e002      	b.n	8003d86 <SD_disk_status+0x1a>

  return Stat;
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <SD_disk_status+0x28>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000000 	.word	0x20000000

08003d98 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <SD_disk_read+0x1c>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <SD_disk_read+0x20>
    return RES_PARERR;
 8003db4:	2304      	movs	r3, #4
 8003db6:	e051      	b.n	8003e5c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <SD_disk_read+0xcc>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SD_disk_read+0x32>
    return RES_NOTRDY;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e048      	b.n	8003e5c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8003dca:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <SD_disk_read+0xd0>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	607b      	str	r3, [r7, #4]

  SELECT();
 8003ddc:	f7ff fd20 	bl	8003820 <SELECT>

  if (count == 1)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d111      	bne.n	8003e0a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	2051      	movs	r0, #81	; 0x51
 8003dea:	f7ff fe83 	bl	8003af4 <SD_SendCmd>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d129      	bne.n	8003e48 <SD_disk_read+0xb0>
 8003df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	f7ff fdef 	bl	80039dc <SD_RxDataBlock>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d021      	beq.n	8003e48 <SD_disk_read+0xb0>
      count = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	e01e      	b.n	8003e48 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	2052      	movs	r0, #82	; 0x52
 8003e0e:	f7ff fe71 	bl	8003af4 <SD_SendCmd>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d117      	bne.n	8003e48 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8003e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f7ff fddd 	bl	80039dc <SD_RxDataBlock>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e2e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ed      	bne.n	8003e18 <SD_disk_read+0x80>
 8003e3c:	e000      	b.n	8003e40 <SD_disk_read+0xa8>
          break;
 8003e3e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003e40:	2100      	movs	r1, #0
 8003e42:	204c      	movs	r0, #76	; 0x4c
 8003e44:	f7ff fe56 	bl	8003af4 <SD_SendCmd>
    }
  }

  DESELECT();
 8003e48:	f7ff fcf6 	bl	8003838 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8003e4c:	f7ff fd1a 	bl	8003884 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000000 	.word	0x20000000
 8003e68:	200002e4 	.word	0x200002e4

08003e6c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <SD_disk_write+0x1c>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <SD_disk_write+0x20>
    return RES_PARERR;
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e06b      	b.n	8003f64 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <SD_disk_write+0x100>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e062      	b.n	8003f64 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8003e9e:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <SD_disk_write+0x100>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8003eac:	2302      	movs	r3, #2
 8003eae:	e059      	b.n	8003f64 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <SD_disk_write+0x104>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	025b      	lsls	r3, r3, #9
 8003ec0:	607b      	str	r3, [r7, #4]

  SELECT();
 8003ec2:	f7ff fcad 	bl	8003820 <SELECT>

  if (count == 1)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d110      	bne.n	8003eee <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	2058      	movs	r0, #88	; 0x58
 8003ed0:	f7ff fe10 	bl	8003af4 <SD_SendCmd>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13a      	bne.n	8003f50 <SD_disk_write+0xe4>
 8003eda:	21fe      	movs	r1, #254	; 0xfe
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f7ff fdb3 	bl	8003a48 <SD_TxDataBlock>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d033      	beq.n	8003f50 <SD_disk_write+0xe4>
      count = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	e030      	b.n	8003f50 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <SD_disk_write+0x104>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003efa:	2100      	movs	r1, #0
 8003efc:	2077      	movs	r0, #119	; 0x77
 8003efe:	f7ff fdf9 	bl	8003af4 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	2057      	movs	r0, #87	; 0x57
 8003f06:	f7ff fdf5 	bl	8003af4 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	2059      	movs	r0, #89	; 0x59
 8003f0e:	f7ff fdf1 	bl	8003af4 <SD_SendCmd>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11b      	bne.n	8003f50 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003f18:	21fc      	movs	r1, #252	; 0xfc
 8003f1a:	68b8      	ldr	r0, [r7, #8]
 8003f1c:	f7ff fd94 	bl	8003a48 <SD_TxDataBlock>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f2c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <SD_disk_write+0xac>
 8003f3a:	e000      	b.n	8003f3e <SD_disk_write+0xd2>
          break;
 8003f3c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003f3e:	21fd      	movs	r1, #253	; 0xfd
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7ff fd81 	bl	8003a48 <SD_TxDataBlock>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <SD_disk_write+0xe4>
      {
        count = 1;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003f50:	f7ff fc72 	bl	8003838 <DESELECT>
  SPI_RxByte();
 8003f54:	f7ff fc96 	bl	8003884 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	200002e4 	.word	0x200002e4

08003f74 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b08b      	sub	sp, #44	; 0x2c
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	460b      	mov	r3, r1
 8003f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e11b      	b.n	80041ca <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8003f98:	79bb      	ldrb	r3, [r7, #6]
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d129      	bne.n	8003ff2 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d017      	beq.n	8003fd6 <SD_disk_ioctl+0x62>
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	dc1f      	bgt.n	8003fea <SD_disk_ioctl+0x76>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <SD_disk_ioctl+0x40>
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d00b      	beq.n	8003fca <SD_disk_ioctl+0x56>
 8003fb2:	e01a      	b.n	8003fea <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003fb4:	f7ff fd06 	bl	80039c4 <SD_CheckPower>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003fbe:	f7ff fcf5 	bl	80039ac <SD_PowerOff>
      res = RES_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fc8:	e0fd      	b.n	80041c6 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8003fca:	f7ff fca3 	bl	8003914 <SD_PowerOn>
      res = RES_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fd4:	e0f7      	b.n	80041c6 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	1c5c      	adds	r4, r3, #1
 8003fda:	f7ff fcf3 	bl	80039c4 <SD_CheckPower>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fe8:	e0ed      	b.n	80041c6 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8003fea:	2304      	movs	r3, #4
 8003fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ff0:	e0e9      	b.n	80041c6 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003ff2:	4b78      	ldr	r3, [pc, #480]	; (80041d4 <SD_disk_ioctl+0x260>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8004000:	2303      	movs	r3, #3
 8004002:	e0e2      	b.n	80041ca <SD_disk_ioctl+0x256>

    SELECT();
 8004004:	f7ff fc0c 	bl	8003820 <SELECT>

    switch (ctrl)
 8004008:	79bb      	ldrb	r3, [r7, #6]
 800400a:	2b0d      	cmp	r3, #13
 800400c:	f200 80cc 	bhi.w	80041a8 <SD_disk_ioctl+0x234>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <SD_disk_ioctl+0xa4>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004113 	.word	0x08004113
 800401c:	08004051 	.word	0x08004051
 8004020:	08004103 	.word	0x08004103
 8004024:	080041a9 	.word	0x080041a9
 8004028:	080041a9 	.word	0x080041a9
 800402c:	080041a9 	.word	0x080041a9
 8004030:	080041a9 	.word	0x080041a9
 8004034:	080041a9 	.word	0x080041a9
 8004038:	080041a9 	.word	0x080041a9
 800403c:	080041a9 	.word	0x080041a9
 8004040:	080041a9 	.word	0x080041a9
 8004044:	08004125 	.word	0x08004125
 8004048:	08004149 	.word	0x08004149
 800404c:	0800416d 	.word	0x0800416d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004050:	2100      	movs	r1, #0
 8004052:	2049      	movs	r0, #73	; 0x49
 8004054:	f7ff fd4e 	bl	8003af4 <SD_SendCmd>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 80a8 	bne.w	80041b0 <SD_disk_ioctl+0x23c>
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	2110      	movs	r1, #16
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fcb8 	bl	80039dc <SD_RxDataBlock>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 809e 	beq.w	80041b0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8004074:	7b3b      	ldrb	r3, [r7, #12]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10e      	bne.n	800409c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800407e:	7d7b      	ldrb	r3, [r7, #21]
 8004080:	b29a      	uxth	r2, r3
 8004082:	7d3b      	ldrb	r3, [r7, #20]
 8004084:	b29b      	uxth	r3, r3
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	b29b      	uxth	r3, r3
 800408a:	4413      	add	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004092:	8bfb      	ldrh	r3, [r7, #30]
 8004094:	029a      	lsls	r2, r3, #10
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e02e      	b.n	80040fa <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800409c:	7c7b      	ldrb	r3, [r7, #17]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	7dbb      	ldrb	r3, [r7, #22]
 80040a6:	09db      	lsrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	7d7b      	ldrb	r3, [r7, #21]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 0306 	and.w	r3, r3, #6
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3302      	adds	r3, #2
 80040c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80040c4:	7d3b      	ldrb	r3, [r7, #20]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	7cbb      	ldrb	r3, [r7, #18]
 80040da:	029b      	lsls	r3, r3, #10
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80040ec:	8bfa      	ldrh	r2, [r7, #30]
 80040ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040f2:	3b09      	subs	r3, #9
 80040f4:	409a      	lsls	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8004100:	e056      	b.n	80041b0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004108:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004110:	e055      	b.n	80041be <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8004112:	f7ff fbe3 	bl	80038dc <SD_ReadyWait>
 8004116:	4603      	mov	r3, r0
 8004118:	2bff      	cmp	r3, #255	; 0xff
 800411a:	d14b      	bne.n	80041b4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004122:	e047      	b.n	80041b4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004124:	2100      	movs	r1, #0
 8004126:	2049      	movs	r0, #73	; 0x49
 8004128:	f7ff fce4 	bl	8003af4 <SD_SendCmd>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d142      	bne.n	80041b8 <SD_disk_ioctl+0x244>
 8004132:	2110      	movs	r1, #16
 8004134:	6a38      	ldr	r0, [r7, #32]
 8004136:	f7ff fc51 	bl	80039dc <SD_RxDataBlock>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d03b      	beq.n	80041b8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004146:	e037      	b.n	80041b8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004148:	2100      	movs	r1, #0
 800414a:	204a      	movs	r0, #74	; 0x4a
 800414c:	f7ff fcd2 	bl	8003af4 <SD_SendCmd>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d132      	bne.n	80041bc <SD_disk_ioctl+0x248>
 8004156:	2110      	movs	r1, #16
 8004158:	6a38      	ldr	r0, [r7, #32]
 800415a:	f7ff fc3f 	bl	80039dc <SD_RxDataBlock>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02b      	beq.n	80041bc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800416a:	e027      	b.n	80041bc <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 800416c:	2100      	movs	r1, #0
 800416e:	207a      	movs	r0, #122	; 0x7a
 8004170:	f7ff fcc0 	bl	8003af4 <SD_SendCmd>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800417a:	2300      	movs	r3, #0
 800417c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004180:	e00b      	b.n	800419a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8004182:	6a3c      	ldr	r4, [r7, #32]
 8004184:	1c63      	adds	r3, r4, #1
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	f7ff fb7c 	bl	8003884 <SPI_RxByte>
 800418c:	4603      	mov	r3, r0
 800418e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004194:	3301      	adds	r3, #1
 8004196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800419a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d9ef      	bls.n	8004182 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80041a8:	2304      	movs	r3, #4
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041ae:	e006      	b.n	80041be <SD_disk_ioctl+0x24a>
      break;
 80041b0:	bf00      	nop
 80041b2:	e004      	b.n	80041be <SD_disk_ioctl+0x24a>
      break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <SD_disk_ioctl+0x24a>
      break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <SD_disk_ioctl+0x24a>
      break;
 80041bc:	bf00      	nop
    }

    DESELECT();
 80041be:	f7ff fb3b 	bl	8003838 <DESELECT>
    SPI_RxByte();
 80041c2:	f7ff fb5f 	bl	8003884 <SPI_RxByte>
  }

  return res;
 80041c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	372c      	adds	r7, #44	; 0x2c
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd90      	pop	{r4, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000000 	.word	0x20000000

080041d8 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4603      	mov	r3, r0
 80041e2:	71fb      	strb	r3, [r7, #7]
 80041e4:	460b      	mov	r3, r1
 80041e6:	71bb      	strb	r3, [r7, #6]
 80041e8:	4613      	mov	r3, r2
 80041ea:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80041f4:	797b      	ldrb	r3, [r7, #5]
 80041f6:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e00c      	b.n	8004218 <send_command+0x40>
        command[3 + i] = data[i];
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	441a      	add	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3303      	adds	r3, #3
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	3318      	adds	r3, #24
 800420c:	443b      	add	r3, r7
 800420e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	3301      	adds	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b08      	cmp	r3, #8
 800421c:	ddef      	ble.n	80041fe <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 800421e:	f107 0108 	add.w	r1, r7, #8
 8004222:	2364      	movs	r3, #100	; 0x64
 8004224:	220c      	movs	r2, #12
 8004226:	4803      	ldr	r0, [pc, #12]	; (8004234 <send_command+0x5c>)
 8004228:	f007 fd06 	bl	800bc38 <HAL_UART_Transmit>
}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000450 	.word	0x20000450

08004238 <lora_activate>:

void lora_activate()
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004242:	4805      	ldr	r0, [pc, #20]	; (8004258 <lora_activate+0x20>)
 8004244:	f004 fc70 	bl	8008b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8004248:	2200      	movs	r2, #0
 800424a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800424e:	4802      	ldr	r0, [pc, #8]	; (8004258 <lora_activate+0x20>)
 8004250:	f004 fc6a 	bl	8008b28 <HAL_GPIO_WritePin>
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40020800 	.word	0x40020800

0800425c <lora_deactivate>:

void lora_deactivate()
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 8004260:	2201      	movs	r2, #1
 8004262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <lora_deactivate+0x20>)
 8004268:	f004 fc5e 	bl	8008b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 800426c:	2201      	movs	r2, #1
 800426e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004272:	4802      	ldr	r0, [pc, #8]	; (800427c <lora_deactivate+0x20>)
 8004274:	f004 fc58 	bl	8008b28 <HAL_GPIO_WritePin>
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40020800 	.word	0x40020800

08004280 <lora_configure>:

void lora_configure(lorastruct *config)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2208      	movs	r2, #8
 80042b6:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2207      	movs	r2, #7
 80042bc:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	79db      	ldrb	r3, [r3, #7]
 80042c2:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	799b      	ldrb	r3, [r3, #6]
 80042c8:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7a5b      	ldrb	r3, [r3, #9]
 80042ce:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7c5b      	ldrb	r3, [r3, #17]
 80042d8:	4313      	orrs	r3, r2
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	789a      	ldrb	r2, [r3, #2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7a9b      	ldrb	r3, [r3, #10]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	78db      	ldrb	r3, [r3, #3]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7a1b      	ldrb	r3, [r3, #8]
 8004300:	2b53      	cmp	r3, #83	; 0x53
 8004302:	d902      	bls.n	800430a <lora_configure+0x8a>
    	config->channel = 83;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2253      	movs	r2, #83	; 0x53
 8004308:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7a1b      	ldrb	r3, [r3, #8]
 800430e:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7ada      	ldrb	r2, [r3, #11]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7b1b      	ldrb	r3, [r3, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	b2da      	uxtb	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7b5b      	ldrb	r3, [r3, #13]
 8004320:	4313      	orrs	r3, r2
 8004322:	b2da      	uxtb	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7b9b      	ldrb	r3, [r3, #14]
 8004328:	4313      	orrs	r3, r2
 800432a:	b2da      	uxtb	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7bdb      	ldrb	r3, [r3, #15]
 8004330:	4313      	orrs	r3, r2
 8004332:	b2da      	uxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	7c1b      	ldrb	r3, [r3, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	b2db      	uxtb	r3, r3
 800433c:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	795b      	ldrb	r3, [r3, #5]
 8004342:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	791b      	ldrb	r3, [r3, #4]
 8004348:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 800434a:	f107 030c 	add.w	r3, r7, #12
 800434e:	2209      	movs	r2, #9
 8004350:	2100      	movs	r1, #0
 8004352:	20c0      	movs	r0, #192	; 0xc0
 8004354:	f7ff ff40 	bl	80041d8 <send_command>
}
 8004358:	bf00      	nop
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004366:	f002 feff 	bl	8007168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800436a:	f000 fb09 	bl	8004980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800436e:	f000 fd81 	bl	8004e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8004372:	f000 fd39 	bl	8004de8 <MX_DMA_Init>
  MX_I2C3_Init();
 8004376:	f000 fc05 	bl	8004b84 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800437a:	f000 fcb7 	bl	8004cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800437e:	f000 fcdf 	bl	8004d40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004382:	f000 fbd1 	bl	8004b28 <MX_I2C1_Init>
  MX_ADC1_Init();
 8004386:	f000 fb6f 	bl	8004a68 <MX_ADC1_Init>
  MX_UART4_Init();
 800438a:	f000 fc85 	bl	8004c98 <MX_UART4_Init>
  MX_RTC_Init();
 800438e:	f000 fc27 	bl	8004be0 <MX_RTC_Init>
  MX_SPI1_Init();
 8004392:	f000 fc4b 	bl	8004c2c <MX_SPI1_Init>
  MX_FATFS_Init();
 8004396:	f008 fee7 	bl	800d168 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800439a:	f000 fcfb 	bl	8004d94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2102      	movs	r1, #2
 80043a2:	2009      	movs	r0, #9
 80043a4:	f003 fc85 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80043a8:	2200      	movs	r2, #0
 80043aa:	2102      	movs	r1, #2
 80043ac:	200a      	movs	r0, #10
 80043ae:	f003 fc80 	bl	8007cb2 <HAL_NVIC_SetPriority>

  usr_fatfsInitial();
 80043b2:	f002 fa61 	bl	8006878 <usr_fatfsInitial>
  sdInitials();
 80043b6:	f002 fa65 	bl	8006884 <sdInitials>

  lora_deactivate();
 80043ba:	f7ff ff4f 	bl	800425c <lora_deactivate>
  HAL_PWR_EnableBkUpAccess();
 80043be:	f005 fbef 	bl	8009ba0 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80043c2:	4b8f      	ldr	r3, [pc, #572]	; (8004600 <main+0x2a0>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <main+0x2a0>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80043ce:	f005 fbfb 	bl	8009bc8 <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043d2:	2200      	movs	r2, #0
 80043d4:	498b      	ldr	r1, [pc, #556]	; (8004604 <main+0x2a4>)
 80043d6:	488c      	ldr	r0, [pc, #560]	; (8004608 <main+0x2a8>)
 80043d8:	f006 fdf4 	bl	800afc4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80043dc:	2200      	movs	r2, #0
 80043de:	498b      	ldr	r1, [pc, #556]	; (800460c <main+0x2ac>)
 80043e0:	4889      	ldr	r0, [pc, #548]	; (8004608 <main+0x2a8>)
 80043e2:	f006 fe4d 	bl	800b080 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80043e6:	2005      	movs	r0, #5
 80043e8:	f002 ff30 	bl	800724c <HAL_Delay>
  bme280_begin();
 80043ec:	f000 fdf8 	bl	8004fe0 <bme280_begin>
  bmi088_begin();
 80043f0:	f000 fe0c 	bl	800500c <bmi088_begin>

  if(measure_abs_time(sTime, sDate) > 1)
 80043f4:	4b83      	ldr	r3, [pc, #524]	; (8004604 <main+0x2a4>)
 80043f6:	4a85      	ldr	r2, [pc, #532]	; (800460c <main+0x2ac>)
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004402:	f001 fc13 	bl	8005c2c <measure_abs_time>
 8004406:	4603      	mov	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	d969      	bls.n	80044e0 <main+0x180>
  {
	  if(is_BMI_ok)
 800440c:	4b80      	ldr	r3, [pc, #512]	; (8004610 <main+0x2b0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <main+0xb8>
		  bmi088_config();
 8004414:	f7fe f8d8 	bl	80025c8 <bmi088_config>
	  if(is_BME_ok)
 8004418:	4b7e      	ldr	r3, [pc, #504]	; (8004614 <main+0x2b4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <main+0xc4>
		  bme280_config();
 8004420:	f7fd fb3a 	bl	8001a98 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 8004424:	4b7c      	ldr	r3, [pc, #496]	; (8004618 <main+0x2b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 800442c:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <main+0x2b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 8004436:	4b78      	ldr	r3, [pc, #480]	; (8004618 <main+0x2b8>)
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 8004446:	4b74      	ldr	r3, [pc, #464]	; (8004618 <main+0x2b8>)
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 8004456:	4b70      	ldr	r3, [pc, #448]	; (8004618 <main+0x2b8>)
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <main+0x2b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8004470:	4b69      	ldr	r3, [pc, #420]	; (8004618 <main+0x2b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 800447a:	4b67      	ldr	r3, [pc, #412]	; (8004618 <main+0x2b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 8004484:	4b64      	ldr	r3, [pc, #400]	; (8004618 <main+0x2b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	e00a      	b.n	80044aa <main+0x14a>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004498:	4860      	ldr	r0, [pc, #384]	; (800461c <main+0x2bc>)
 800449a:	f004 fb5e 	bl	8008b5a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 800449e:	2032      	movs	r0, #50	; 0x32
 80044a0:	f002 fed4 	bl	800724c <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3301      	adds	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b13      	cmp	r3, #19
 80044ae:	ddf1      	ble.n	8004494 <main+0x134>
	  }

	  loraBegin();
 80044b0:	f000 fdce 	bl	8005050 <loraBegin>
	  lora_activate();
 80044b4:	f7ff fec0 	bl	8004238 <lora_activate>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80044b8:	2364      	movs	r3, #100	; 0x64
 80044ba:	2213      	movs	r2, #19
 80044bc:	4958      	ldr	r1, [pc, #352]	; (8004620 <main+0x2c0>)
 80044be:	4859      	ldr	r0, [pc, #356]	; (8004624 <main+0x2c4>)
 80044c0:	f007 fbba 	bl	800bc38 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok){
 80044c4:	4b52      	ldr	r3, [pc, #328]	; (8004610 <main+0x2b0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <main+0x170>
		  getOffset();
 80044cc:	f7fe fedc 	bl	8003288 <getOffset>
	  }

	  getInitialQuaternion();
 80044d0:	f001 fa16 	bl	8005900 <getInitialQuaternion>

#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
#endif
  sd_transmit("ok");
 80044d4:	4854      	ldr	r0, [pc, #336]	; (8004628 <main+0x2c8>)
 80044d6:	f002 fa6b 	bl	80069b0 <sd_transmit>
	  HAL_Delay(10);
 80044da:	200a      	movs	r0, #10
 80044dc:	f002 feb6 	bl	800724c <HAL_Delay>
  }



  HAL_UART_DeInit(&huart4);
 80044e0:	4852      	ldr	r0, [pc, #328]	; (800462c <main+0x2cc>)
 80044e2:	f007 fb7a 	bl	800bbda <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 80044e6:	484f      	ldr	r0, [pc, #316]	; (8004624 <main+0x2c4>)
 80044e8:	f007 fb77 	bl	800bbda <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <main+0x2cc>)
 80044ee:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044f2:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 80044f4:	4b4b      	ldr	r3, [pc, #300]	; (8004624 <main+0x2c4>)
 80044f6:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044fa:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 80044fc:	484b      	ldr	r0, [pc, #300]	; (800462c <main+0x2cc>)
 80044fe:	f007 fb1f 	bl	800bb40 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8004502:	4848      	ldr	r0, [pc, #288]	; (8004624 <main+0x2c4>)
 8004504:	f007 fb1c 	bl	800bb40 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8004508:	4849      	ldr	r0, [pc, #292]	; (8004630 <main+0x2d0>)
 800450a:	f003 fc17 	bl	8007d3c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 800450e:	4849      	ldr	r0, [pc, #292]	; (8004634 <main+0x2d4>)
 8004510:	f003 fc14 	bl	8007d3c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8004514:	4848      	ldr	r0, [pc, #288]	; (8004638 <main+0x2d8>)
 8004516:	f003 fc11 	bl	8007d3c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 800451a:	4848      	ldr	r0, [pc, #288]	; (800463c <main+0x2dc>)
 800451c:	f003 fc0e 	bl	8007d3c <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8004520:	2203      	movs	r2, #3
 8004522:	4947      	ldr	r1, [pc, #284]	; (8004640 <main+0x2e0>)
 8004524:	4841      	ldr	r0, [pc, #260]	; (800462c <main+0x2cc>)
 8004526:	f007 fc97 	bl	800be58 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 800452a:	4b46      	ldr	r3, [pc, #280]	; (8004644 <main+0x2e4>)
 800452c:	4a46      	ldr	r2, [pc, #280]	; (8004648 <main+0x2e8>)
 800452e:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8004530:	4b44      	ldr	r3, [pc, #272]	; (8004644 <main+0x2e4>)
 8004532:	2208      	movs	r2, #8
 8004534:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8004536:	4b45      	ldr	r3, [pc, #276]	; (800464c <main+0x2ec>)
 8004538:	4a43      	ldr	r2, [pc, #268]	; (8004648 <main+0x2e8>)
 800453a:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <main+0x2ec>)
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 8004542:	4b43      	ldr	r3, [pc, #268]	; (8004650 <main+0x2f0>)
 8004544:	4a35      	ldr	r2, [pc, #212]	; (800461c <main+0x2bc>)
 8004546:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <main+0x2f0>)
 800454a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800454e:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8004550:	4b40      	ldr	r3, [pc, #256]	; (8004654 <main+0x2f4>)
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <main+0x2bc>)
 8004554:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 8004556:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <main+0x2f4>)
 8004558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800455c:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800455e:	2009      	movs	r0, #9
 8004560:	f003 fbc3 	bl	8007cea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004564:	200a      	movs	r0, #10
 8004566:	f003 fbc0 	bl	8007cea <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <main+0x2f8>)
 800456c:	4a3b      	ldr	r2, [pc, #236]	; (800465c <main+0x2fc>)
 800456e:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 8004570:	482c      	ldr	r0, [pc, #176]	; (8004624 <main+0x2c4>)
 8004572:	f002 fbe7 	bl	8006d44 <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 8004576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800457a:	4836      	ldr	r0, [pc, #216]	; (8004654 <main+0x2f4>)
 800457c:	f7ff f91c 	bl	80037b8 <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 8004580:	4b37      	ldr	r3, [pc, #220]	; (8004660 <main+0x300>)
 8004582:	2200      	movs	r2, #0
 8004584:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <main+0x300>)
 8004588:	2200      	movs	r2, #0
 800458a:	749a      	strb	r2, [r3, #18]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <main+0x2b0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <main+0x238>
		  bmi088_update();
 8004594:	f7fe fa5c 	bl	8002a50 <bmi088_update>
	  if(is_BME_ok)
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <main+0x2b4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <main+0x244>
		  bme280_update();
 80045a0:	f7fd fc3a 	bl	8001e18 <bme280_update>

	  measurePower(&guc);
 80045a4:	482f      	ldr	r0, [pc, #188]	; (8004664 <main+0x304>)
 80045a6:	f000 fd87 	bl	80050b8 <measurePower>

	  ext_pin_update(&mos_1);
 80045aa:	4826      	ldr	r0, [pc, #152]	; (8004644 <main+0x2e4>)
 80045ac:	f7ff f91d 	bl	80037ea <ext_pin_update>
	  ext_pin_update(&mos_2);
 80045b0:	4826      	ldr	r0, [pc, #152]	; (800464c <main+0x2ec>)
 80045b2:	f7ff f91a 	bl	80037ea <ext_pin_update>
	  ext_pin_update(&led);
 80045b6:	4826      	ldr	r0, [pc, #152]	; (8004650 <main+0x2f0>)
 80045b8:	f7ff f917 	bl	80037ea <ext_pin_update>
	  ext_pin_update(&buzzer);
 80045bc:	4825      	ldr	r0, [pc, #148]	; (8004654 <main+0x2f4>)
 80045be:	f7ff f914 	bl	80037ea <ext_pin_update>

#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 80045c2:	4b14      	ldr	r3, [pc, #80]	; (8004614 <main+0x2b4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <main+0x270>
		  algorithm_1_update(&BME280_sensor);
 80045ca:	4827      	ldr	r0, [pc, #156]	; (8004668 <main+0x308>)
 80045cc:	f7fc feb0 	bl	8001330 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  BMI_sensor.angle = quaternionToTheta();
 80045d0:	f001 f8d6 	bl	8005780 <quaternionToTheta>
 80045d4:	eef0 7a40 	vmov.f32	s15, s0
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <main+0x300>)
 80045da:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	  if(is_BMI_ok)
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <main+0x2b0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <main+0x28e>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor);
 80045e6:	491e      	ldr	r1, [pc, #120]	; (8004660 <main+0x300>)
 80045e8:	481f      	ldr	r0, [pc, #124]	; (8004668 <main+0x308>)
 80045ea:	f7fc ffcd 	bl	8001588 <algorithm_2_update>
#endif



#ifdef ROCKET_CARD
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <main+0x2b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d13d      	bne.n	8004674 <main+0x314>
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <main+0x30c>)
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <main+0x310>)
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e042      	b.n	8004686 <main+0x326>
 8004600:	40023800 	.word	0x40023800
 8004604:	2000088c 	.word	0x2000088c
 8004608:	200003d8 	.word	0x200003d8
 800460c:	200008a0 	.word	0x200008a0
 8004610:	200008c8 	.word	0x200008c8
 8004614:	200008c4 	.word	0x200008c4
 8004618:	20000008 	.word	0x20000008
 800461c:	40020400 	.word	0x40020400
 8004620:	080176f0 	.word	0x080176f0
 8004624:	200004d8 	.word	0x200004d8
 8004628:	08017704 	.word	0x08017704
 800462c:	20000450 	.word	0x20000450
 8004630:	20000620 	.word	0x20000620
 8004634:	20000680 	.word	0x20000680
 8004638:	20000560 	.word	0x20000560
 800463c:	200005c0 	.word	0x200005c0
 8004640:	20000844 	.word	0x20000844
 8004644:	2000084c 	.word	0x2000084c
 8004648:	40020800 	.word	0x40020800
 800464c:	2000085c 	.word	0x2000085c
 8004650:	2000086c 	.word	0x2000086c
 8004654:	2000087c 	.word	0x2000087c
 8004658:	200008b4 	.word	0x200008b4
 800465c:	bf800000 	.word	0xbf800000
 8004660:	20000710 	.word	0x20000710
 8004664:	20000834 	.word	0x20000834
 8004668:	200006e0 	.word	0x200006e0
 800466c:	20000004 	.word	0x20000004
 8004670:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
 8004674:	4bac      	ldr	r3, [pc, #688]	; (8004928 <main+0x5c8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d903      	bls.n	8004686 <main+0x326>
 800467e:	4bab      	ldr	r3, [pc, #684]	; (800492c <main+0x5cc>)
 8004680:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004684:	601a      	str	r2, [r3, #0]
#else
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
		  else if(saved_datas->r_status == STAT_TOUCH_DOWN){lora_hz = 1;}
#endif

		  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8004686:	f002 fdd5 	bl	8007234 <HAL_GetTick>
 800468a:	ee07 0a90 	vmov	s15, r0
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	ee17 0a90 	vmov	r0, s15
 8004696:	f7fb ff77 	bl	8000588 <__aeabi_f2d>
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	4ba4      	ldr	r3, [pc, #656]	; (8004930 <main+0x5d0>)
 80046a0:	f7fc f8f4 	bl	800088c <__aeabi_ddiv>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	f7fc fabc 	bl	8000c28 <__aeabi_d2f>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4aa0      	ldr	r2, [pc, #640]	; (8004934 <main+0x5d4>)
 80046b4:	6013      	str	r3, [r2, #0]
	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 80046b6:	4b9f      	ldr	r3, [pc, #636]	; (8004934 <main+0x5d4>)
 80046b8:	ed93 7a00 	vldr	s14, [r3]
 80046bc:	4b9e      	ldr	r3, [pc, #632]	; (8004938 <main+0x5d8>)
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c6:	eef0 7ae7 	vabs.f32	s15, s15
 80046ca:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800493c <main+0x5dc>
 80046ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	dd5a      	ble.n	800478e <main+0x42e>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <main+0x5c8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d151      	bne.n	8004786 <main+0x426>
 80046e2:	4b97      	ldr	r3, [pc, #604]	; (8004940 <main+0x5e0>)
 80046e4:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80046e8:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8004910 <main+0x5b0>
 80046ec:	eeb0 0a47 	vmov.f32	s0, s14
 80046f0:	eef0 0a67 	vmov.f32	s1, s15
 80046f4:	f011 f9a4 	bl	8015a40 <pow>
 80046f8:	ec55 4b10 	vmov	r4, r5, d0
 80046fc:	4b90      	ldr	r3, [pc, #576]	; (8004940 <main+0x5e0>)
 80046fe:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8004702:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8004910 <main+0x5b0>
 8004706:	eeb0 0a47 	vmov.f32	s0, s14
 800470a:	eef0 0a67 	vmov.f32	s1, s15
 800470e:	f011 f997 	bl	8015a40 <pow>
 8004712:	ec53 2b10 	vmov	r2, r3, d0
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fb fdd7 	bl	80002cc <__adddf3>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4614      	mov	r4, r2
 8004724:	461d      	mov	r5, r3
 8004726:	4b86      	ldr	r3, [pc, #536]	; (8004940 <main+0x5e0>)
 8004728:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800472c:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8004910 <main+0x5b0>
 8004730:	eeb0 0a47 	vmov.f32	s0, s14
 8004734:	eef0 0a67 	vmov.f32	s1, s15
 8004738:	f011 f982 	bl	8015a40 <pow>
 800473c:	ec53 2b10 	vmov	r2, r3, d0
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fdc2 	bl	80002cc <__adddf3>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	ec43 2b17 	vmov	d7, r2, r3
 8004750:	eeb0 0a47 	vmov.f32	s0, s14
 8004754:	eef0 0a67 	vmov.f32	s1, s15
 8004758:	f011 f9e2 	bl	8015b20 <sqrt>
 800475c:	ec51 0b10 	vmov	r0, r1, d0
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	4b77      	ldr	r3, [pc, #476]	; (8004944 <main+0x5e4>)
 8004766:	f7fc f9d9 	bl	8000b1c <__aeabi_dcmplt>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <main+0x426>
 8004770:	4b75      	ldr	r3, [pc, #468]	; (8004948 <main+0x5e8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <main+0x426>
			 {
				 getInitialQuaternion();
 8004778:	f001 f8c2 	bl	8005900 <getInitialQuaternion>
				 ext_pin_open_duration(&buzzer, 500);
 800477c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004780:	4872      	ldr	r0, [pc, #456]	; (800494c <main+0x5ec>)
 8004782:	f7ff f819 	bl	80037b8 <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 8004786:	4b6b      	ldr	r3, [pc, #428]	; (8004934 <main+0x5d4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6b      	ldr	r2, [pc, #428]	; (8004938 <main+0x5d8>)
 800478c:	6013      	str	r3, [r2, #0]



		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 800478e:	f002 fd51 	bl	8007234 <HAL_GetTick>
 8004792:	ee07 0a90 	vmov	s15, r0
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	ee17 0a90 	vmov	r0, s15
 800479e:	f7fb fef3 	bl	8000588 <__aeabi_f2d>
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	4b62      	ldr	r3, [pc, #392]	; (8004930 <main+0x5d0>)
 80047a8:	f7fc f870 	bl	800088c <__aeabi_ddiv>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	f7fc fa38 	bl	8000c28 <__aeabi_d2f>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <main+0x5d4>)
 80047bc:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 80047be:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <main+0x5d4>)
 80047c0:	ed93 7a00 	vldr	s14, [r3]
 80047c4:	4b62      	ldr	r3, [pc, #392]	; (8004950 <main+0x5f0>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ce:	eef0 7ae7 	vabs.f32	s15, s15
 80047d2:	ee17 0a90 	vmov	r0, s15
 80047d6:	f7fb fed7 	bl	8000588 <__aeabi_f2d>
 80047da:	4604      	mov	r4, r0
 80047dc:	460d      	mov	r5, r1
 80047de:	4b53      	ldr	r3, [pc, #332]	; (800492c <main+0x5cc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fb fed0 	bl	8000588 <__aeabi_f2d>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	f04f 0000 	mov.w	r0, #0
 80047f0:	4958      	ldr	r1, [pc, #352]	; (8004954 <main+0x5f4>)
 80047f2:	f7fc f84b 	bl	800088c <__aeabi_ddiv>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	f7fc f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00f      	beq.n	8004828 <main+0x4c8>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8004808:	f000 fcea 	bl	80051e0 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 800480c:	4b46      	ldr	r3, [pc, #280]	; (8004928 <main+0x5c8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4b50      	ldr	r3, [pc, #320]	; (8004958 <main+0x5f8>)
 8004816:	4a51      	ldr	r2, [pc, #324]	; (800495c <main+0x5fc>)
 8004818:	4951      	ldr	r1, [pc, #324]	; (8004960 <main+0x600>)
 800481a:	4849      	ldr	r0, [pc, #292]	; (8004940 <main+0x5e0>)
 800481c:	f7fe fe14 	bl	8003448 <packDatas>
			 loraLastTime = currentTime;
 8004820:	4b44      	ldr	r3, [pc, #272]	; (8004934 <main+0x5d4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <main+0x5f0>)
 8004826:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }

		 if(fabs(currentTime - sd_last_time_f) > 0.1)
 8004828:	4b42      	ldr	r3, [pc, #264]	; (8004934 <main+0x5d4>)
 800482a:	ed93 7a00 	vldr	s14, [r3]
 800482e:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <main+0x604>)
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004838:	eef0 7ae7 	vabs.f32	s15, s15
 800483c:	ee17 0a90 	vmov	r0, s15
 8004840:	f7fb fea2 	bl	8000588 <__aeabi_f2d>
 8004844:	a334      	add	r3, pc, #208	; (adr r3, 8004918 <main+0x5b8>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f7fc f985 	bl	8000b58 <__aeabi_dcmpgt>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <main+0x51e>
		 {
			 sdDataLogger(sd_log_counter, &BME280_sensor, &BMI_sensor, saved_datas, &gnss_data, &guc); // SD TRANSMIT
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <main+0x608>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <main+0x5c8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3e      	ldr	r2, [pc, #248]	; (8004958 <main+0x5f8>)
 800485e:	9201      	str	r2, [sp, #4]
 8004860:	4a3e      	ldr	r2, [pc, #248]	; (800495c <main+0x5fc>)
 8004862:	9200      	str	r2, [sp, #0]
 8004864:	4a36      	ldr	r2, [pc, #216]	; (8004940 <main+0x5e0>)
 8004866:	493e      	ldr	r1, [pc, #248]	; (8004960 <main+0x600>)
 8004868:	f002 f8da 	bl	8006a20 <sdDataLogger>
			 sd_log_counter++;
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <main+0x608>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3301      	adds	r3, #1
 8004872:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <main+0x608>)
 8004874:	6013      	str	r3, [r2, #0]
			 sd_last_time_f = currentTime;
 8004876:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <main+0x5d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <main+0x604>)
 800487c:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS update function.
		 if(fabs(currentTime - gnss_last_update_time) > 1.0)
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <main+0x5d4>)
 8004880:	ed93 7a00 	vldr	s14, [r3]
 8004884:	4b39      	ldr	r3, [pc, #228]	; (800496c <main+0x60c>)
 8004886:	edd3 7a00 	vldr	s15, [r3]
 800488a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800488e:	eef0 7ae7 	vabs.f32	s15, s15
 8004892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	dd06      	ble.n	80048ae <main+0x54e>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 80048a0:	482e      	ldr	r0, [pc, #184]	; (800495c <main+0x5fc>)
 80048a2:	f002 fa5f 	bl	8006d64 <Usr_GpsL86GetValues>
			 gnss_last_update_time = currentTime;
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <main+0x5d4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a30      	ldr	r2, [pc, #192]	; (800496c <main+0x60c>)
 80048ac:	6013      	str	r3, [r2, #0]
		 }

		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 80048ae:	4b21      	ldr	r3, [pc, #132]	; (8004934 <main+0x5d4>)
 80048b0:	ed93 7a00 	vldr	s14, [r3]
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <main+0x610>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048be:	eef0 7ae7 	vabs.f32	s15, s15
 80048c2:	ee17 0a90 	vmov	r0, s15
 80048c6:	f7fb fe5f 	bl	8000588 <__aeabi_f2d>
 80048ca:	a315      	add	r3, pc, #84	; (adr r3, 8004920 <main+0x5c0>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fc f942 	bl	8000b58 <__aeabi_dcmpgt>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <main+0x5a8>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80048da:	2200      	movs	r2, #0
 80048dc:	4925      	ldr	r1, [pc, #148]	; (8004974 <main+0x614>)
 80048de:	4826      	ldr	r0, [pc, #152]	; (8004978 <main+0x618>)
 80048e0:	f006 fb70 	bl	800afc4 <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80048e4:	2200      	movs	r2, #0
 80048e6:	4925      	ldr	r1, [pc, #148]	; (800497c <main+0x61c>)
 80048e8:	4823      	ldr	r0, [pc, #140]	; (8004978 <main+0x618>)
 80048ea:	f006 fbc9 	bl	800b080 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <main+0x614>)
 80048f0:	4a22      	ldr	r2, [pc, #136]	; (800497c <main+0x61c>)
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	9201      	str	r2, [sp, #4]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	9200      	str	r2, [sp, #0]
 80048fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048fc:	f001 f95c 	bl	8005bb8 <save_time>
			 lastTime = currentTime;
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <main+0x5d4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <main+0x610>)
 8004906:	6013      	str	r3, [r2, #0]
	  if(is_BMI_ok)
 8004908:	e640      	b.n	800458c <main+0x22c>
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w
 8004910:	00000000 	.word	0x00000000
 8004914:	40000000 	.word	0x40000000
 8004918:	9999999a 	.word	0x9999999a
 800491c:	3fb99999 	.word	0x3fb99999
 8004920:	9999999a 	.word	0x9999999a
 8004924:	3fc99999 	.word	0x3fc99999
 8004928:	20000008 	.word	0x20000008
 800492c:	20000004 	.word	0x20000004
 8004930:	408f4000 	.word	0x408f4000
 8004934:	200008a4 	.word	0x200008a4
 8004938:	200008ac 	.word	0x200008ac
 800493c:	42700000 	.word	0x42700000
 8004940:	20000710 	.word	0x20000710
 8004944:	40140000 	.word	0x40140000
 8004948:	200008c8 	.word	0x200008c8
 800494c:	2000087c 	.word	0x2000087c
 8004950:	200008b4 	.word	0x200008b4
 8004954:	3ff00000 	.word	0x3ff00000
 8004958:	20000834 	.word	0x20000834
 800495c:	20000804 	.word	0x20000804
 8004960:	200006e0 	.word	0x200006e0
 8004964:	200008bc 	.word	0x200008bc
 8004968:	200008cc 	.word	0x200008cc
 800496c:	200008c0 	.word	0x200008c0
 8004970:	200008a8 	.word	0x200008a8
 8004974:	2000088c 	.word	0x2000088c
 8004978:	200003d8 	.word	0x200003d8
 800497c:	200008a0 	.word	0x200008a0

08004980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b094      	sub	sp, #80	; 0x50
 8004984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004986:	f107 031c 	add.w	r3, r7, #28
 800498a:	2234      	movs	r2, #52	; 0x34
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f00b ff1c 	bl	80107cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049a4:	2300      	movs	r3, #0
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <SystemClock_Config+0xe0>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <SystemClock_Config+0xe0>)
 80049ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b2:	6413      	str	r3, [r2, #64]	; 0x40
 80049b4:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <SystemClock_Config+0xe0>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049c0:	2300      	movs	r3, #0
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <SystemClock_Config+0xe4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <SystemClock_Config+0xe4>)
 80049ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <SystemClock_Config+0xe4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80049dc:	2305      	movs	r3, #5
 80049de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80049e6:	2301      	movs	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ea:	2302      	movs	r3, #2
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80049f4:	2304      	movs	r3, #4
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80049f8:	23b4      	movs	r3, #180	; 0xb4
 80049fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049fc:	2302      	movs	r3, #2
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a00:	2302      	movs	r3, #2
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a04:	2302      	movs	r3, #2
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a08:	f107 031c 	add.w	r3, r7, #28
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 ffc5 	bl	800a99c <HAL_RCC_OscConfig>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004a18:	f000 fc4a 	bl	80052b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a1c:	f005 f8fa 	bl	8009c14 <HAL_PWREx_EnableOverDrive>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004a26:	f000 fc43 	bl	80052b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a2a:	230f      	movs	r3, #15
 8004a2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	2105      	movs	r1, #5
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f005 f933 	bl	8009cb4 <HAL_RCC_ClockConfig>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004a54:	f000 fc2c 	bl	80052b0 <Error_Handler>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3750      	adds	r7, #80	; 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000

08004a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a6e:	463b      	mov	r3, r7
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a7a:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a7c:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <MX_ADC1_Init+0xb8>)
 8004a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004a8e:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <MX_ADC1_Init+0xbc>)
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ac8:	4814      	ldr	r0, [pc, #80]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004aca:	f002 fbe3 	bl	8007294 <HAL_ADC_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ad4:	f000 fbec 	bl	80052b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004ad8:	230c      	movs	r3, #12
 8004ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004adc:	2301      	movs	r3, #1
 8004ade:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	480c      	ldr	r0, [pc, #48]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004aea:	f002 fdb5 	bl	8007658 <HAL_ADC_ConfigChannel>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004af4:	f000 fbdc 	bl	80052b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004af8:	230b      	movs	r3, #11
 8004afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004afc:	2302      	movs	r3, #2
 8004afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b00:	463b      	mov	r3, r7
 8004b02:	4619      	mov	r1, r3
 8004b04:	4805      	ldr	r0, [pc, #20]	; (8004b1c <MX_ADC1_Init+0xb4>)
 8004b06:	f002 fda7 	bl	8007658 <HAL_ADC_ConfigChannel>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004b10:	f000 fbce 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200002e8 	.word	0x200002e8
 8004b20:	40012000 	.word	0x40012000
 8004b24:	0f000001 	.word	0x0f000001

08004b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <MX_I2C1_Init+0x54>)
 8004b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b34:	4a12      	ldr	r2, [pc, #72]	; (8004b80 <MX_I2C1_Init+0x58>)
 8004b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b64:	4804      	ldr	r0, [pc, #16]	; (8004b78 <MX_I2C1_Init+0x50>)
 8004b66:	f004 f82b 	bl	8008bc0 <HAL_I2C_Init>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b70:	f000 fb9e 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000330 	.word	0x20000330
 8004b7c:	40005400 	.word	0x40005400
 8004b80:	000186a0 	.word	0x000186a0

08004b84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <MX_I2C3_Init+0x54>)
 8004b8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <MX_I2C3_Init+0x58>)
 8004b92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ba6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004bc0:	4804      	ldr	r0, [pc, #16]	; (8004bd4 <MX_I2C3_Init+0x50>)
 8004bc2:	f003 fffd 	bl	8008bc0 <HAL_I2C_Init>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004bcc:	f000 fb70 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000384 	.word	0x20000384
 8004bd8:	40005c00 	.word	0x40005c00
 8004bdc:	000186a0 	.word	0x000186a0

08004be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <MX_RTC_Init+0x44>)
 8004be6:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <MX_RTC_Init+0x48>)
 8004be8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <MX_RTC_Init+0x44>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <MX_RTC_Init+0x44>)
 8004bf2:	227f      	movs	r2, #127	; 0x7f
 8004bf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <MX_RTC_Init+0x44>)
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <MX_RTC_Init+0x44>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <MX_RTC_Init+0x44>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <MX_RTC_Init+0x44>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c0e:	4805      	ldr	r0, [pc, #20]	; (8004c24 <MX_RTC_Init+0x44>)
 8004c10:	f006 f962 	bl	800aed8 <HAL_RTC_Init>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004c1a:	f000 fb49 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200003d8 	.word	0x200003d8
 8004c28:	40002800 	.word	0x40002800

08004c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <MX_SPI1_Init+0x68>)
 8004c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c36:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c60:	2210      	movs	r2, #16
 8004c62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c78:	220a      	movs	r2, #10
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c7c:	4804      	ldr	r0, [pc, #16]	; (8004c90 <MX_SPI1_Init+0x64>)
 8004c7e:	f006 fb20 	bl	800b2c2 <HAL_SPI_Init>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004c88:	f000 fb12 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200003f8 	.word	0x200003f8
 8004c94:	40013000 	.word	0x40013000

08004c98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <MX_UART4_Init+0x50>)
 8004ca0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ca8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004cce:	4805      	ldr	r0, [pc, #20]	; (8004ce4 <MX_UART4_Init+0x4c>)
 8004cd0:	f006 ff36 	bl	800bb40 <HAL_UART_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004cda:	f000 fae9 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000450 	.word	0x20000450
 8004ce8:	40004c00 	.word	0x40004c00

08004cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cf0:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <MX_USART1_UART_Init+0x50>)
 8004cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d12:	220c      	movs	r2, #12
 8004d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d22:	4805      	ldr	r0, [pc, #20]	; (8004d38 <MX_USART1_UART_Init+0x4c>)
 8004d24:	f006 ff0c 	bl	800bb40 <HAL_UART_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d2e:	f000 fabf 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000494 	.word	0x20000494
 8004d3c:	40011000 	.word	0x40011000

08004d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d46:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <MX_USART2_UART_Init+0x50>)
 8004d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d64:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d66:	220c      	movs	r2, #12
 8004d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d76:	4805      	ldr	r0, [pc, #20]	; (8004d8c <MX_USART2_UART_Init+0x4c>)
 8004d78:	f006 fee2 	bl	800bb40 <HAL_UART_Init>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d82:	f000 fa95 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200004d8 	.word	0x200004d8
 8004d90:	40004400 	.word	0x40004400

08004d94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <MX_USART3_UART_Init+0x50>)
 8004d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004da6:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004dba:	220c      	movs	r2, #12
 8004dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dca:	4805      	ldr	r0, [pc, #20]	; (8004de0 <MX_USART3_UART_Init+0x4c>)
 8004dcc:	f006 feb8 	bl	800bb40 <HAL_UART_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004dd6:	f000 fa6b 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2000051c 	.word	0x2000051c
 8004de4:	40004800 	.word	0x40004800

08004de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <MX_DMA_Init+0x88>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <MX_DMA_Init+0x88>)
 8004df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <MX_DMA_Init+0x88>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <MX_DMA_Init+0x88>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <MX_DMA_Init+0x88>)
 8004e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <MX_DMA_Init+0x88>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	200d      	movs	r0, #13
 8004e2c:	f002 ff41 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004e30:	200d      	movs	r0, #13
 8004e32:	f002 ff5a 	bl	8007cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	200f      	movs	r0, #15
 8004e3c:	f002 ff39 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004e40:	200f      	movs	r0, #15
 8004e42:	f002 ff52 	bl	8007cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2100      	movs	r1, #0
 8004e4a:	2010      	movs	r0, #16
 8004e4c:	f002 ff31 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004e50:	2010      	movs	r0, #16
 8004e52:	f002 ff4a 	bl	8007cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004e56:	2200      	movs	r2, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2046      	movs	r0, #70	; 0x46
 8004e5c:	f002 ff29 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004e60:	2046      	movs	r0, #70	; 0x46
 8004e62:	f002 ff42 	bl	8007cea <HAL_NVIC_EnableIRQ>

}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	4a4f      	ldr	r2, [pc, #316]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b49      	ldr	r3, [pc, #292]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb6:	4b46      	ldr	r3, [pc, #280]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a41      	ldr	r2, [pc, #260]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a3a      	ldr	r2, [pc, #232]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <MX_GPIO_Init+0x15c>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8004efa:	2200      	movs	r2, #0
 8004efc:	f640 4188 	movw	r1, #3208	; 0xc88
 8004f00:	4834      	ldr	r0, [pc, #208]	; (8004fd4 <MX_GPIO_Init+0x160>)
 8004f02:	f003 fe11 	bl	8008b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f06:	2200      	movs	r2, #0
 8004f08:	2110      	movs	r1, #16
 8004f0a:	4833      	ldr	r0, [pc, #204]	; (8004fd8 <MX_GPIO_Init+0x164>)
 8004f0c:	f003 fe0c 	bl	8008b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8004f10:	2200      	movs	r2, #0
 8004f12:	f243 0103 	movw	r1, #12291	; 0x3003
 8004f16:	4831      	ldr	r0, [pc, #196]	; (8004fdc <MX_GPIO_Init+0x168>)
 8004f18:	f003 fe06 	bl	8008b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8004f1c:	f640 4388 	movw	r3, #3208	; 0xc88
 8004f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4619      	mov	r1, r3
 8004f34:	4827      	ldr	r0, [pc, #156]	; (8004fd4 <MX_GPIO_Init+0x160>)
 8004f36:	f003 fb6f 	bl	8008618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f46:	2302      	movs	r3, #2
 8004f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4821      	ldr	r0, [pc, #132]	; (8004fd8 <MX_GPIO_Init+0x164>)
 8004f52:	f003 fb61 	bl	8008618 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 8004f56:	f243 0303 	movw	r3, #12291	; 0x3003
 8004f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	481b      	ldr	r0, [pc, #108]	; (8004fdc <MX_GPIO_Init+0x168>)
 8004f70:	f003 fb52 	bl	8008618 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8004f74:	2318      	movs	r3, #24
 8004f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	4619      	mov	r1, r3
 8004f88:	4814      	ldr	r0, [pc, #80]	; (8004fdc <MX_GPIO_Init+0x168>)
 8004f8a:	f003 fb45 	bl	8008618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8004f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	480e      	ldr	r0, [pc, #56]	; (8004fdc <MX_GPIO_Init+0x168>)
 8004fa4:	f003 fb38 	bl	8008618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2102      	movs	r1, #2
 8004fac:	2009      	movs	r0, #9
 8004fae:	f002 fe80 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004fb2:	2009      	movs	r0, #9
 8004fb4:	f002 fe99 	bl	8007cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2102      	movs	r1, #2
 8004fbc:	200a      	movs	r0, #10
 8004fbe:	f002 fe78 	bl	8007cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004fc2:	200a      	movs	r0, #10
 8004fc4:	f002 fe91 	bl	8007cea <HAL_NVIC_EnableIRQ>

}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40020800 	.word	0x40020800
 8004fd8:	40020000 	.word	0x40020000
 8004fdc:	40020400 	.word	0x40020400

08004fe0 <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <bme280_begin+0x24>)
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <bme280_begin+0x24>)
 8004fec:	2203      	movs	r2, #3
 8004fee:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <bme280_begin+0x24>)
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 8004ff6:	4904      	ldr	r1, [pc, #16]	; (8005008 <bme280_begin+0x28>)
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <bme280_begin+0x24>)
 8004ffa:	f7fc fed7 	bl	8001dac <bme280_init>
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200006e0 	.word	0x200006e0
 8005008:	20000330 	.word	0x20000330

0800500c <bmi088_begin>:
void bmi088_begin()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <bmi088_begin+0x3c>)
 8005012:	2208      	movs	r2, #8
 8005014:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <bmi088_begin+0x3c>)
 8005018:	2209      	movs	r2, #9
 800501a:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <bmi088_begin+0x3c>)
 800501e:	2200      	movs	r2, #0
 8005020:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <bmi088_begin+0x3c>)
 8005024:	2202      	movs	r2, #2
 8005026:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <bmi088_begin+0x3c>)
 800502a:	2201      	movs	r2, #1
 800502c:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <bmi088_begin+0x3c>)
 8005030:	2200      	movs	r2, #0
 8005032:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <bmi088_begin+0x3c>)
 8005036:	2200      	movs	r2, #0
 8005038:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 800503a:	4904      	ldr	r1, [pc, #16]	; (800504c <bmi088_begin+0x40>)
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <bmi088_begin+0x3c>)
 800503e:	f7fd fcb1 	bl	80029a4 <bmi088_init>
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000710 	.word	0x20000710
 800504c:	20000384 	.word	0x20000384

08005050 <loraBegin>:


void loraBegin()
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800505a:	4814      	ldr	r0, [pc, #80]	; (80050ac <loraBegin+0x5c>)
 800505c:	f003 fd64 	bl	8008b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8005060:	2201      	movs	r2, #1
 8005062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005066:	4811      	ldr	r0, [pc, #68]	; (80050ac <loraBegin+0x5c>)
 8005068:	f003 fd5e 	bl	8008b28 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800506c:	2064      	movs	r0, #100	; 0x64
 800506e:	f002 f8ed 	bl	800724c <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8005072:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <loraBegin+0x60>)
 8005074:	22e0      	movs	r2, #224	; 0xe0
 8005076:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <loraBegin+0x60>)
 800507a:	2206      	movs	r2, #6
 800507c:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <loraBegin+0x60>)
 8005080:	2280      	movs	r2, #128	; 0x80
 8005082:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <loraBegin+0x60>)
 8005086:	2200      	movs	r2, #0
 8005088:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <loraBegin+0x60>)
 800508c:	2200      	movs	r2, #0
 800508e:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <loraBegin+0x60>)
 8005092:	2200      	movs	r2, #0
 8005094:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <loraBegin+0x60>)
 8005098:	2219      	movs	r2, #25
 800509a:	721a      	strb	r2, [r3, #8]
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
#endif

    lora_configure(&e22_lora);
 800509c:	4804      	ldr	r0, [pc, #16]	; (80050b0 <loraBegin+0x60>)
 800509e:	f7ff f8ef 	bl	8004280 <lora_configure>

    HAL_Delay(100);
 80050a2:	2064      	movs	r0, #100	; 0x64
 80050a4:	f002 f8d2 	bl	800724c <HAL_Delay>
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40020800 	.word	0x40020800
 80050b0:	200007f0 	.word	0x200007f0
 80050b4:	00000000 	.word	0x00000000

080050b8 <measurePower>:

void measurePower(power *guc_)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	ed2d 8b02 	vpush	{d8}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 80050c4:	4840      	ldr	r0, [pc, #256]	; (80051c8 <measurePower+0x110>)
 80050c6:	f002 f929 	bl	800731c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80050ca:	210a      	movs	r1, #10
 80050cc:	483e      	ldr	r0, [pc, #248]	; (80051c8 <measurePower+0x110>)
 80050ce:	f002 fa2a 	bl	8007526 <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 80050d2:	483d      	ldr	r0, [pc, #244]	; (80051c8 <measurePower+0x110>)
 80050d4:	f002 fab2 	bl	800763c <HAL_ADC_GetValue>
 80050d8:	4603      	mov	r3, r0
 80050da:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80050dc:	210a      	movs	r1, #10
 80050de:	483a      	ldr	r0, [pc, #232]	; (80051c8 <measurePower+0x110>)
 80050e0:	f002 fa21 	bl	8007526 <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 80050e4:	4838      	ldr	r0, [pc, #224]	; (80051c8 <measurePower+0x110>)
 80050e6:	f002 faa9 	bl	800763c <HAL_ADC_GetValue>
 80050ea:	4603      	mov	r3, r0
 80050ec:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 80050ee:	4836      	ldr	r0, [pc, #216]	; (80051c8 <measurePower+0x110>)
 80050f0:	f002 f9e6 	bl	80074c0 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80051cc <measurePower+0x114>
 8005102:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005106:	eddf 6a32 	vldr	s13, [pc, #200]	; 80051d0 <measurePower+0x118>
 800510a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800511e:	ee17 0a90 	vmov	r0, s15
 8005122:	f7fb fa31 	bl	8000588 <__aeabi_f2d>
 8005126:	a326      	add	r3, pc, #152	; (adr r3, 80051c0 <measurePower+0x108>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb fa84 	bl	8000638 <__aeabi_dmul>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <measurePower+0x11c>)
 800513e:	f7fb fba5 	bl	800088c <__aeabi_ddiv>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	f7fb fd6d 	bl	8000c28 <__aeabi_d2f>
 800514e:	4602      	mov	r2, r0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	ed93 7a01 	vldr	s14, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	edd3 7a00 	vldr	s15, [r3]
 8005160:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005164:	f002 f866 	bl	8007234 <HAL_GetTick>
 8005168:	ee07 0a90 	vmov	s15, r0
 800516c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005170:	eddf 6a19 	vldr	s13, [pc, #100]	; 80051d8 <measurePower+0x120>
 8005174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <measurePower+0x124>)
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005182:	ee28 7a27 	vmul.f32	s14, s16, s15
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	edd3 7a02 	vldr	s15, [r3, #8]
 800518c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8005196:	f002 f84d 	bl	8007234 <HAL_GetTick>
 800519a:	ee07 0a90 	vmov	s15, r0
 800519e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80051d8 <measurePower+0x120>
 80051a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <measurePower+0x124>)
 80051ac:	edc3 7a00 	vstr	s15, [r3]
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	ecbd 8b02 	vpop	{d8}
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	f3af 8000 	nop.w
 80051c0:	66666666 	.word	0x66666666
 80051c4:	402a6666 	.word	0x402a6666
 80051c8:	200002e8 	.word	0x200002e8
 80051cc:	454e4000 	.word	0x454e4000
 80051d0:	45800000 	.word	0x45800000
 80051d4:	40b00000 	.word	0x40b00000
 80051d8:	447a0000 	.word	0x447a0000
 80051dc:	200008b0 	.word	0x200008b0

080051e0 <getWatt>:

void getWatt()
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 80051e6:	f002 f825 	bl	8007234 <HAL_GetTick>
 80051ea:	ee07 0a90 	vmov	s15, r0
 80051ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800523c <getWatt+0x5c>
 80051f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051fa:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <getWatt+0x60>)
 8005200:	edd3 7a00 	vldr	s15, [r3]
 8005204:	ed97 7a01 	vldr	s14, [r7, #4]
 8005208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800520c:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8005210:	4a0b      	ldr	r2, [pc, #44]	; (8005240 <getWatt+0x60>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <getWatt+0x64>)
 8005218:	edd3 6a02 	vldr	s13, [r3, #8]
 800521c:	ed97 7a00 	vldr	s14, [r7]
 8005220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <getWatt+0x64>)
 8005226:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <getWatt+0x64>)
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	447a0000 	.word	0x447a0000
 8005240:	200008b8 	.word	0x200008b8
 8005244:	20000834 	.word	0x20000834

08005248 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b10      	cmp	r3, #16
 8005256:	d101      	bne.n	800525c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8005258:	f7fe f808 	bl	800326c <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	2b08      	cmp	r3, #8
 8005260:	d101      	bne.n	8005266 <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	bmi088_getAccelDatas_INT();
 8005262:	f7fd fff5 	bl	8003250 <bmi088_getAccelDatas_INT>
    	//counterAcc++;
    }
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <deploy_p_1>:

void deploy_p_1()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	4804      	ldr	r0, [pc, #16]	; (8005288 <deploy_p_1+0x18>)
 8005278:	f7fe fa9e 	bl	80037b8 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <deploy_p_1+0x1c>)
 800527e:	f7fe fa83 	bl	8003788 <ext_pin_open>
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	2000084c 	.word	0x2000084c
 800528c:	2000087c 	.word	0x2000087c

08005290 <deploy_p_2>:

void deploy_p_2()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 8005294:	2164      	movs	r1, #100	; 0x64
 8005296:	4804      	ldr	r0, [pc, #16]	; (80052a8 <deploy_p_2+0x18>)
 8005298:	f7fe fa8e 	bl	80037b8 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 800529c:	4803      	ldr	r0, [pc, #12]	; (80052ac <deploy_p_2+0x1c>)
 800529e:	f7fe fa73 	bl	8003788 <ext_pin_open>
}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2000085c 	.word	0x2000085c
 80052ac:	2000087c 	.word	0x2000087c

080052b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 80052b4:	4b11      	ldr	r3, [pc, #68]	; (80052fc <Error_Handler+0x4c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4911      	ldr	r1, [pc, #68]	; (8005300 <Error_Handler+0x50>)
 80052bc:	4811      	ldr	r0, [pc, #68]	; (8005304 <Error_Handler+0x54>)
 80052be:	f00c f90d 	bl	80114dc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 80052c2:	4810      	ldr	r0, [pc, #64]	; (8005304 <Error_Handler+0x54>)
 80052c4:	f7fa ffa4 	bl	8000210 <strlen>
 80052c8:	4603      	mov	r3, r0
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	23fa      	movs	r3, #250	; 0xfa
 80052ce:	490d      	ldr	r1, [pc, #52]	; (8005304 <Error_Handler+0x54>)
 80052d0:	480d      	ldr	r0, [pc, #52]	; (8005308 <Error_Handler+0x58>)
 80052d2:	f006 fcb1 	bl	800bc38 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052d6:	b672      	cpsid	i
}
 80052d8:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052de:	480b      	ldr	r0, [pc, #44]	; (800530c <Error_Handler+0x5c>)
 80052e0:	f003 fc3b 	bl	8008b5a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80052e4:	2064      	movs	r0, #100	; 0x64
 80052e6:	f001 ffb1 	bl	800724c <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052ee:	4807      	ldr	r0, [pc, #28]	; (800530c <Error_Handler+0x5c>)
 80052f0:	f003 fc33 	bl	8008b5a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80052f4:	2064      	movs	r0, #100	; 0x64
 80052f6:	f001 ffa9 	bl	800724c <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052fa:	e7ee      	b.n	80052da <Error_Handler+0x2a>
 80052fc:	2000026c 	.word	0x2000026c
 8005300:	08017708 	.word	0x08017708
 8005304:	200008d0 	.word	0x200008d0
 8005308:	20000494 	.word	0x20000494
 800530c:	40020400 	.word	0x40020400

08005310 <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	; 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	ed87 0a03 	vstr	s0, [r7, #12]
 800531a:	edc7 0a02 	vstr	s1, [r7, #8]
 800531e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005322:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 8005326:	4b9f      	ldr	r3, [pc, #636]	; (80055a4 <updateQuaternion+0x294>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	edd3 7a02 	vldr	s15, [r3, #8]
 800532e:	eeb1 7a67 	vneg.f32	s14, s15
 8005332:	edd7 7a03 	vldr	s15, [r7, #12]
 8005336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800533a:	4b9a      	ldr	r3, [pc, #616]	; (80055a4 <updateQuaternion+0x294>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005342:	edd7 7a02 	vldr	s15, [r7, #8]
 8005346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800534a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800534e:	4b95      	ldr	r3, [pc, #596]	; (80055a4 <updateQuaternion+0x294>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	edd3 6a04 	vldr	s13, [r3, #16]
 8005356:	edd7 7a01 	vldr	s15, [r7, #4]
 800535a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800535e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 800536e:	4b8d      	ldr	r3, [pc, #564]	; (80055a4 <updateQuaternion+0x294>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	ed93 7a01 	vldr	s14, [r3, #4]
 8005376:	edd7 7a03 	vldr	s15, [r7, #12]
 800537a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800537e:	4b89      	ldr	r3, [pc, #548]	; (80055a4 <updateQuaternion+0x294>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	edd3 6a03 	vldr	s13, [r3, #12]
 8005386:	edd7 7a01 	vldr	s15, [r7, #4]
 800538a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005392:	4b84      	ldr	r3, [pc, #528]	; (80055a4 <updateQuaternion+0x294>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	edd3 6a04 	vldr	s13, [r3, #16]
 800539a:	edd7 7a02 	vldr	s15, [r7, #8]
 800539e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ae:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 80053b2:	4b7c      	ldr	r3, [pc, #496]	; (80055a4 <updateQuaternion+0x294>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80053ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80053be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053c2:	4b78      	ldr	r3, [pc, #480]	; (80055a4 <updateQuaternion+0x294>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80053ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053d6:	4b73      	ldr	r3, [pc, #460]	; (80055a4 <updateQuaternion+0x294>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	edd3 6a04 	vldr	s13, [r3, #16]
 80053de:	edd7 7a03 	vldr	s15, [r7, #12]
 80053e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 80053f6:	4b6b      	ldr	r3, [pc, #428]	; (80055a4 <updateQuaternion+0x294>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80053fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005406:	4b67      	ldr	r3, [pc, #412]	; (80055a4 <updateQuaternion+0x294>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	edd3 6a02 	vldr	s13, [r3, #8]
 800540e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800541a:	4b62      	ldr	r3, [pc, #392]	; (80055a4 <updateQuaternion+0x294>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005422:	edd7 7a03 	vldr	s15, [r7, #12]
 8005426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800542a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005436:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 800543a:	4b5a      	ldr	r3, [pc, #360]	; (80055a4 <updateQuaternion+0x294>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005442:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005446:	edd7 7a00 	vldr	s15, [r7]
 800544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544e:	4b55      	ldr	r3, [pc, #340]	; (80055a4 <updateQuaternion+0x294>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005456:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 800545a:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <updateQuaternion+0x294>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005462:	edd7 6a08 	vldr	s13, [r7, #32]
 8005466:	edd7 7a00 	vldr	s15, [r7]
 800546a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546e:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <updateQuaternion+0x294>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005476:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 800547a:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <updateQuaternion+0x294>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005482:	edd7 6a07 	vldr	s13, [r7, #28]
 8005486:	edd7 7a00 	vldr	s15, [r7]
 800548a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548e:	4b45      	ldr	r3, [pc, #276]	; (80055a4 <updateQuaternion+0x294>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005496:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 800549a:	4b42      	ldr	r3, [pc, #264]	; (80055a4 <updateQuaternion+0x294>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	ed93 7a04 	vldr	s14, [r3, #16]
 80054a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80054a6:	edd7 7a00 	vldr	s15, [r7]
 80054aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ae:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <updateQuaternion+0x294>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b6:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <updateQuaternion+0x294>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	ed93 7a01 	vldr	s14, [r3, #4]
 80054c2:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <updateQuaternion+0x294>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80054ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ce:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <updateQuaternion+0x294>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <updateQuaternion+0x294>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	edd3 7a02 	vldr	s15, [r3, #8]
 80054de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e6:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <updateQuaternion+0x294>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80054ee:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <updateQuaternion+0x294>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80054f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <updateQuaternion+0x294>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	edd3 6a04 	vldr	s13, [r3, #16]
 8005506:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <updateQuaternion+0x294>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	edd3 7a04 	vldr	s15, [r3, #16]
 800550e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005516:	ee17 0a90 	vmov	r0, s15
 800551a:	f7fb f835 	bl	8000588 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	ec43 2b10 	vmov	d0, r2, r3
 8005526:	f010 fafb 	bl	8015b20 <sqrt>
 800552a:	ec53 2b10 	vmov	r2, r3, d0
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	f7fb fb79 	bl	8000c28 <__aeabi_d2f>
 8005536:	4603      	mov	r3, r0
 8005538:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 800553a:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <updateQuaternion+0x294>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <updateQuaternion+0x294>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	ed97 7a05 	vldr	s14, [r7, #20]
 800554a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554e:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 8005552:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <updateQuaternion+0x294>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	edd3 6a02 	vldr	s13, [r3, #8]
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <updateQuaternion+0x294>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005566:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <updateQuaternion+0x294>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <updateQuaternion+0x294>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	ed97 7a05 	vldr	s14, [r7, #20]
 800557a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557e:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <updateQuaternion+0x294>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	edd3 6a04 	vldr	s13, [r3, #16]
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <updateQuaternion+0x294>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005596:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800559a:	bf00      	nop
 800559c:	3728      	adds	r7, #40	; 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000008 	.word	0x20000008

080055a8 <quaternionToEuler>:

void quaternionToEuler(void) {
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 80055ac:	4b72      	ldr	r3, [pc, #456]	; (8005778 <quaternionToEuler+0x1d0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80055b4:	4b70      	ldr	r3, [pc, #448]	; (8005778 <quaternionToEuler+0x1d0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80055bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c0:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <quaternionToEuler+0x1d0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80055c8:	4b6b      	ldr	r3, [pc, #428]	; (8005778 <quaternionToEuler+0x1d0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80055d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055dc:	ee17 0a90 	vmov	r0, s15
 80055e0:	f7fa ffd2 	bl	8000588 <__aeabi_f2d>
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	4b63      	ldr	r3, [pc, #396]	; (8005778 <quaternionToEuler+0x1d0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <quaternionToEuler+0x1d0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80055f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055fc:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <quaternionToEuler+0x1d0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	edd3 6a03 	vldr	s13, [r3, #12]
 8005604:	4b5c      	ldr	r3, [pc, #368]	; (8005778 <quaternionToEuler+0x1d0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	edd3 7a03 	vldr	s15, [r3, #12]
 800560c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005614:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005620:	ee17 0a90 	vmov	r0, s15
 8005624:	f7fa ffb0 	bl	8000588 <__aeabi_f2d>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	ec43 2b11 	vmov	d1, r2, r3
 8005630:	ec45 4b10 	vmov	d0, r4, r5
 8005634:	f010 fa02 	bl	8015a3c <atan2>
 8005638:	ec51 0b10 	vmov	r0, r1, d0
 800563c:	a34c      	add	r3, pc, #304	; (adr r3, 8005770 <quaternionToEuler+0x1c8>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fff9 	bl	8000638 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f7fb faeb 	bl	8000c28 <__aeabi_d2f>
 8005652:	4603      	mov	r3, r0
 8005654:	4a49      	ldr	r2, [pc, #292]	; (800577c <quaternionToEuler+0x1d4>)
 8005656:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 8005658:	4b47      	ldr	r3, [pc, #284]	; (8005778 <quaternionToEuler+0x1d0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005660:	4b45      	ldr	r3, [pc, #276]	; (8005778 <quaternionToEuler+0x1d0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	edd3 7a03 	vldr	s15, [r3, #12]
 8005668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800566c:	4b42      	ldr	r3, [pc, #264]	; (8005778 <quaternionToEuler+0x1d0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	edd3 6a04 	vldr	s13, [r3, #16]
 8005674:	4b40      	ldr	r3, [pc, #256]	; (8005778 <quaternionToEuler+0x1d0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	edd3 7a02 	vldr	s15, [r3, #8]
 800567c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005684:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005688:	ee17 0a90 	vmov	r0, s15
 800568c:	f7fa ff7c 	bl	8000588 <__aeabi_f2d>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	ec43 2b10 	vmov	d0, r2, r3
 8005698:	f010 f99c 	bl	80159d4 <asin>
 800569c:	ec51 0b10 	vmov	r0, r1, d0
 80056a0:	a333      	add	r3, pc, #204	; (adr r3, 8005770 <quaternionToEuler+0x1c8>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fa ffc7 	bl	8000638 <__aeabi_dmul>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	f7fb fab9 	bl	8000c28 <__aeabi_d2f>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4a30      	ldr	r2, [pc, #192]	; (800577c <quaternionToEuler+0x1d4>)
 80056ba:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <quaternionToEuler+0x1d0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <quaternionToEuler+0x1d0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80056cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056d0:	4b29      	ldr	r3, [pc, #164]	; (8005778 <quaternionToEuler+0x1d0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <quaternionToEuler+0x1d0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80056e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056ec:	ee17 0a90 	vmov	r0, s15
 80056f0:	f7fa ff4a 	bl	8000588 <__aeabi_f2d>
 80056f4:	4604      	mov	r4, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	4b1f      	ldr	r3, [pc, #124]	; (8005778 <quaternionToEuler+0x1d0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8005700:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <quaternionToEuler+0x1d0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	edd3 7a03 	vldr	s15, [r3, #12]
 8005708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <quaternionToEuler+0x1d0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	edd3 6a04 	vldr	s13, [r3, #16]
 8005714:	4b18      	ldr	r3, [pc, #96]	; (8005778 <quaternionToEuler+0x1d0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	edd3 7a04 	vldr	s15, [r3, #16]
 800571c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800572c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005730:	ee17 0a90 	vmov	r0, s15
 8005734:	f7fa ff28 	bl	8000588 <__aeabi_f2d>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	ec43 2b11 	vmov	d1, r2, r3
 8005740:	ec45 4b10 	vmov	d0, r4, r5
 8005744:	f010 f97a 	bl	8015a3c <atan2>
 8005748:	ec51 0b10 	vmov	r0, r1, d0
 800574c:	a308      	add	r3, pc, #32	; (adr r3, 8005770 <quaternionToEuler+0x1c8>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa ff71 	bl	8000638 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	f7fb fa63 	bl	8000c28 <__aeabi_d2f>
 8005762:	4603      	mov	r3, r0
 8005764:	4a05      	ldr	r2, [pc, #20]	; (800577c <quaternionToEuler+0x1d4>)
 8005766:	6093      	str	r3, [r2, #8]
}
 8005768:	bf00      	nop
 800576a:	bdb0      	pop	{r4, r5, r7, pc}
 800576c:	f3af 8000 	nop.w
 8005770:	1a63c1f8 	.word	0x1a63c1f8
 8005774:	404ca5dc 	.word	0x404ca5dc
 8005778:	20000008 	.word	0x20000008
 800577c:	200009cc 	.word	0x200009cc

08005780 <quaternionToTheta>:


float quaternionToTheta(){
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 800578c:	4b5a      	ldr	r3, [pc, #360]	; (80058f8 <quaternionToTheta+0x178>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	edd3 7a02 	vldr	s15, [r3, #8]
 8005794:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005798:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <quaternionToTheta+0x178>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	edd3 7a04 	vldr	s15, [r3, #16]
 80057a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057a4:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <quaternionToTheta+0x178>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057b0:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <quaternionToTheta+0x178>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80057b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c0:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 80057c4:	4b4c      	ldr	r3, [pc, #304]	; (80058f8 <quaternionToTheta+0x178>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <quaternionToTheta+0x178>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80057d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <quaternionToTheta+0x178>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80057e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <quaternionToTheta+0x178>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80057f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f8:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 80057fc:	4b3e      	ldr	r3, [pc, #248]	; (80058f8 <quaternionToTheta+0x178>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	edd3 7a02 	vldr	s15, [r3, #8]
 8005804:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <quaternionToTheta+0x178>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <quaternionToTheta+0x178>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	edd3 7a03 	vldr	s15, [r3, #12]
 8005824:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005828:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <quaternionToTheta+0x178>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005838:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 800584c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005850:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005854:	edd7 7a04 	vldr	s15, [r7, #16]
 8005858:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800585c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005860:	edd7 7a03 	vldr	s15, [r7, #12]
 8005864:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586c:	ee17 0a90 	vmov	r0, s15
 8005870:	f7fa fe8a 	bl	8000588 <__aeabi_f2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	ec43 2b10 	vmov	d0, r2, r3
 800587c:	f010 f950 	bl	8015b20 <sqrt>
 8005880:	ec53 2b10 	vmov	r2, r3, d0
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	f7fb f9ce 	bl	8000c28 <__aeabi_d2f>
 800588c:	4603      	mov	r3, r0
 800588e:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8005890:	ed97 7a02 	vldr	s14, [r7, #8]
 8005894:	edd7 7a01 	vldr	s15, [r7, #4]
 8005898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800589c:	ee16 0a90 	vmov	r0, s13
 80058a0:	f7fa fe72 	bl	8000588 <__aeabi_f2d>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	ec43 2b10 	vmov	d0, r2, r3
 80058ac:	f010 f85e 	bl	801596c <acos>
 80058b0:	ec51 0b10 	vmov	r0, r1, d0
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	4b10      	ldr	r3, [pc, #64]	; (80058fc <quaternionToTheta+0x17c>)
 80058ba:	f7fa febd 	bl	8000638 <__aeabi_dmul>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	a30a      	add	r3, pc, #40	; (adr r3, 80058f0 <quaternionToTheta+0x170>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f7fa ffde 	bl	800088c <__aeabi_ddiv>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4610      	mov	r0, r2
 80058d6:	4619      	mov	r1, r3
 80058d8:	f7fb f9a6 	bl	8000c28 <__aeabi_d2f>
 80058dc:	4603      	mov	r3, r0
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	ee07 3a90 	vmov	s15, r3
}
 80058e6:	eeb0 0a67 	vmov.f32	s0, s15
 80058ea:	3728      	adds	r7, #40	; 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	51eb851f 	.word	0x51eb851f
 80058f4:	40091eb8 	.word	0x40091eb8
 80058f8:	20000008 	.word	0x20000008
 80058fc:	40668000 	.word	0x40668000

08005900 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion() {
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b092      	sub	sp, #72	; 0x48
 8005904:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8005906:	4b99      	ldr	r3, [pc, #612]	; (8005b6c <getInitialQuaternion+0x26c>)
 8005908:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800590c:	4b97      	ldr	r3, [pc, #604]	; (8005b6c <getInitialQuaternion+0x26c>)
 800590e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005916:	4b95      	ldr	r3, [pc, #596]	; (8005b6c <getInitialQuaternion+0x26c>)
 8005918:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800591c:	4b93      	ldr	r3, [pc, #588]	; (8005b6c <getInitialQuaternion+0x26c>)
 800591e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800592a:	4b90      	ldr	r3, [pc, #576]	; (8005b6c <getInitialQuaternion+0x26c>)
 800592c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8005930:	4b8e      	ldr	r3, [pc, #568]	; (8005b6c <getInitialQuaternion+0x26c>)
 8005932:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800593a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593e:	ee17 0a90 	vmov	r0, s15
 8005942:	f7fa fe21 	bl	8000588 <__aeabi_f2d>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	ec43 2b10 	vmov	d0, r2, r3
 800594e:	f010 f8e7 	bl	8015b20 <sqrt>
 8005952:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 8005956:	4b85      	ldr	r3, [pc, #532]	; (8005b6c <getInitialQuaternion+0x26c>)
 8005958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800595c:	4618      	mov	r0, r3
 800595e:	f7fa fe13 	bl	8000588 <__aeabi_f2d>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 800596a:	4b80      	ldr	r3, [pc, #512]	; (8005b6c <getInitialQuaternion+0x26c>)
 800596c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005970:	4618      	mov	r0, r3
 8005972:	f7fa fe09 	bl	8000588 <__aeabi_f2d>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <getInitialQuaternion+0x26c>)
 8005980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005984:	4618      	mov	r0, r3
 8005986:	f7fa fdff 	bl	8000588 <__aeabi_f2d>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8005992:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800599a:	f7fa ff77 	bl	800088c <__aeabi_ddiv>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80059a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ae:	f7fa ff6d 	bl	800088c <__aeabi_ddiv>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 80059ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059c2:	f7fa ff63 	bl	800088c <__aeabi_ddiv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80059ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	4966      	ldr	r1, [pc, #408]	; (8005b70 <getInitialQuaternion+0x270>)
 80059d8:	f7fa fc76 	bl	80002c8 <__aeabi_dsub>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	ec43 2b17 	vmov	d7, r2, r3
 80059e4:	eeb0 0a47 	vmov.f32	s0, s14
 80059e8:	eef0 0a67 	vmov.f32	s1, s15
 80059ec:	f010 f898 	bl	8015b20 <sqrt>
 80059f0:	ec51 0b10 	vmov	r0, r1, d0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	4b5e      	ldr	r3, [pc, #376]	; (8005b74 <getInitialQuaternion+0x274>)
 80059fa:	f7fa fe1d 	bl	8000638 <__aeabi_dmul>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8005a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a0a:	f04f 0000 	mov.w	r0, #0
 8005a0e:	4959      	ldr	r1, [pc, #356]	; (8005b74 <getInitialQuaternion+0x274>)
 8005a10:	f7fa ff3c 	bl	800088c <__aeabi_ddiv>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8005a1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a24:	f7fa fe08 	bl	8000638 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	4b4f      	ldr	r3, [pc, #316]	; (8005b74 <getInitialQuaternion+0x274>)
 8005a36:	f7fa fdff 	bl	8000638 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8005a42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a4a:	f7fa fdf5 	bl	8000638 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <getInitialQuaternion+0x274>)
 8005a5c:	f7fa fdec 	bl	8000638 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7c:	f7fa fddc 	bl	8000638 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	461d      	mov	r5, r3
 8005a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a90:	f7fa fdd2 	bl	8000638 <__aeabi_dmul>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7fa fc16 	bl	80002cc <__adddf3>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ab0:	f7fa fdc2 	bl	8000638 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	f7fa fc06 	bl	80002cc <__adddf3>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad0:	f7fa fdb2 	bl	8000638 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7fa fbf6 	bl	80002cc <__adddf3>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	ec43 2b17 	vmov	d7, r2, r3
 8005ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8005aec:	eef0 0a67 	vmov.f32	s1, s15
 8005af0:	f010 f816 	bl	8015b20 <sqrt>
 8005af4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b00:	f7fa fec4 	bl	800088c <__aeabi_ddiv>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	491b      	ldr	r1, [pc, #108]	; (8005b78 <getInitialQuaternion+0x278>)
 8005b0a:	680c      	ldr	r4, [r1, #0]
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f7fb f88a 	bl	8000c28 <__aeabi_d2f>
 8005b14:	4603      	mov	r3, r0
 8005b16:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8005b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b20:	f7fa feb4 	bl	800088c <__aeabi_ddiv>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4913      	ldr	r1, [pc, #76]	; (8005b78 <getInitialQuaternion+0x278>)
 8005b2a:	680c      	ldr	r4, [r1, #0]
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f7fb f87a 	bl	8000c28 <__aeabi_d2f>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b40:	f7fa fea4 	bl	800088c <__aeabi_ddiv>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	490b      	ldr	r1, [pc, #44]	; (8005b78 <getInitialQuaternion+0x278>)
 8005b4a:	680c      	ldr	r4, [r1, #0]
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f7fb f86a 	bl	8000c28 <__aeabi_d2f>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 8005b58:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <getInitialQuaternion+0x278>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
}
 8005b62:	bf00      	nop
 8005b64:	3748      	adds	r7, #72	; 0x48
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bdb0      	pop	{r4, r5, r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000710 	.word	0x20000710
 8005b70:	3ff00000 	.word	0x3ff00000
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	20000008 	.word	0x20000008

08005b7c <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
	saved_datas->q[0] = 1.0;
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <quaternionSet_zero+0x38>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b88:	605a      	str	r2, [r3, #4]
	saved_datas->q[1] = 0.0;
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <quaternionSet_zero+0x38>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
	saved_datas->q[2] = 0.0;
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <quaternionSet_zero+0x38>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]
	saved_datas->q[3] = 0.0;
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <quaternionSet_zero+0x38>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000008 	.word	0x20000008

08005bb8 <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005bb8:	b084      	sub	sp, #16
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	f107 0c10 	add.w	ip, r7, #16
 8005bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005bcc:	7c3b      	ldrb	r3, [r7, #16]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005bd4:	fb03 f202 	mul.w	r2, r3, r2
 8005bd8:	7c7b      	ldrb	r3, [r7, #17]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	460b      	mov	r3, r1
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a5b      	subs	r3, r3, r1
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	7cba      	ldrb	r2, [r7, #18]
 8005be8:	4413      	add	r3, r2
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4413      	add	r3, r2
 8005bf0:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <save_time+0x6c>)
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005c06:	f003 ffcb 	bl	8009ba0 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4806      	ldr	r0, [pc, #24]	; (8005c28 <save_time+0x70>)
 8005c10:	f005 fb25 	bl	800b25e <HAL_RTCEx_BKUPWrite>
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c1e:	b004      	add	sp, #16
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	00015180 	.word	0x00015180
 8005c28:	200003d8 	.word	0x200003d8

08005c2c <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f107 0c10 	add.w	ip, r7, #16
 8005c38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005c40:	7c3b      	ldrb	r3, [r7, #16]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c48:	fb03 f202 	mul.w	r2, r3, r2
 8005c4c:	7c7b      	ldrb	r3, [r7, #17]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	460b      	mov	r3, r1
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	1a5b      	subs	r3, r3, r1
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	7cba      	ldrb	r2, [r7, #18]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <measure_abs_time+0x78>)
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005c7a:	f003 ff91 	bl	8009ba0 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <measure_abs_time+0x7c>)
 8005c82:	f005 fb06 	bl	800b292 <HAL_RTCEx_BKUPRead>
 8005c86:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfb8      	it	lt
 8005c92:	425b      	neglt	r3, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9e:	b004      	add	sp, #16
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	00015180 	.word	0x00015180
 8005ca8:	200003d8 	.word	0x200003d8

08005cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	4a0f      	ldr	r2, [pc, #60]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <HAL_MspInit+0x4c>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800

08005cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	60da      	str	r2, [r3, #12]
 8005d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_ADC_MspInit+0x7c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d127      	bne.n	8005d6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <HAL_ADC_MspInit+0x80>)
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8005d56:	2306      	movs	r3, #6
 8005d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d62:	f107 0314 	add.w	r3, r7, #20
 8005d66:	4619      	mov	r1, r3
 8005d68:	4805      	ldr	r0, [pc, #20]	; (8005d80 <HAL_ADC_MspInit+0x84>)
 8005d6a:	f002 fc55 	bl	8008618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d6e:	bf00      	nop
 8005d70:	3728      	adds	r7, #40	; 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40012000 	.word	0x40012000
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40020800 	.word	0x40020800

08005d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	f107 031c 	add.w	r3, r7, #28
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a42      	ldr	r2, [pc, #264]	; (8005eac <HAL_I2C_MspInit+0x128>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d12c      	bne.n	8005e00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	4b41      	ldr	r3, [pc, #260]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	4a40      	ldr	r2, [pc, #256]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	6313      	str	r3, [r2, #48]	; 0x30
 8005db6:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	61bb      	str	r3, [r7, #24]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dc2:	23c0      	movs	r3, #192	; 0xc0
 8005dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dc6:	2312      	movs	r3, #18
 8005dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd6:	f107 031c 	add.w	r3, r7, #28
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <HAL_I2C_MspInit+0x130>)
 8005dde:	f002 fc1b 	bl	8008618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a31      	ldr	r2, [pc, #196]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b2f      	ldr	r3, [pc, #188]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005dfe:	e050      	b.n	8005ea2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2c      	ldr	r2, [pc, #176]	; (8005eb8 <HAL_I2C_MspInit+0x134>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d14b      	bne.n	8005ea2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6313      	str	r3, [r2, #48]	; 0x30
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e48:	2312      	movs	r3, #18
 8005e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e50:	2303      	movs	r3, #3
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e54:	2304      	movs	r3, #4
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e58:	f107 031c 	add.w	r3, r7, #28
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4817      	ldr	r0, [pc, #92]	; (8005ebc <HAL_I2C_MspInit+0x138>)
 8005e60:	f002 fbda 	bl	8008618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e6a:	2312      	movs	r3, #18
 8005e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e72:	2303      	movs	r3, #3
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e76:	2304      	movs	r3, #4
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7a:	f107 031c 	add.w	r3, r7, #28
 8005e7e:	4619      	mov	r1, r3
 8005e80:	480f      	ldr	r0, [pc, #60]	; (8005ec0 <HAL_I2C_MspInit+0x13c>)
 8005e82:	f002 fbc9 	bl	8008618 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_I2C_MspInit+0x12c>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
}
 8005ea2:	bf00      	nop
 8005ea4:	3730      	adds	r7, #48	; 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40005400 	.word	0x40005400
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020400 	.word	0x40020400
 8005eb8:	40005c00 	.word	0x40005c00
 8005ebc:	40020800 	.word	0x40020800
 8005ec0:	40020000 	.word	0x40020000

08005ec4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_I2C_MspDeInit+0x64>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <HAL_I2C_MspDeInit+0x68>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <HAL_I2C_MspDeInit+0x68>)
 8005edc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ee0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005ee2:	2140      	movs	r1, #64	; 0x40
 8005ee4:	4812      	ldr	r0, [pc, #72]	; (8005f30 <HAL_I2C_MspDeInit+0x6c>)
 8005ee6:	f002 fd2b 	bl	8008940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	4810      	ldr	r0, [pc, #64]	; (8005f30 <HAL_I2C_MspDeInit+0x6c>)
 8005eee:	f002 fd27 	bl	8008940 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005ef2:	e014      	b.n	8005f1e <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0e      	ldr	r2, [pc, #56]	; (8005f34 <HAL_I2C_MspDeInit+0x70>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10f      	bne.n	8005f1e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_I2C_MspDeInit+0x68>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <HAL_I2C_MspDeInit+0x68>)
 8005f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f08:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f0e:	480a      	ldr	r0, [pc, #40]	; (8005f38 <HAL_I2C_MspDeInit+0x74>)
 8005f10:	f002 fd16 	bl	8008940 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <HAL_I2C_MspDeInit+0x78>)
 8005f1a:	f002 fd11 	bl	8008940 <HAL_GPIO_DeInit>
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40005400 	.word	0x40005400
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	40020400 	.word	0x40020400
 8005f34:	40005c00 	.word	0x40005c00
 8005f38:	40020800 	.word	0x40020800
 8005f3c:	40020000 	.word	0x40020000

08005f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b09a      	sub	sp, #104	; 0x68
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f48:	f107 030c 	add.w	r3, r7, #12
 8005f4c:	225c      	movs	r2, #92	; 0x5c
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f00a fc3b 	bl	80107cc <memset>
  if(hrtc->Instance==RTC)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a0c      	ldr	r2, [pc, #48]	; (8005f8c <HAL_RTC_MspInit+0x4c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f60:	2320      	movs	r3, #32
 8005f62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f68:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f003 ffba 	bl	8009ee8 <HAL_RCCEx_PeriphCLKConfig>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005f7a:	f7ff f999 	bl	80052b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005f7e:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <HAL_RTC_MspInit+0x50>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005f84:	bf00      	nop
 8005f86:	3768      	adds	r7, #104	; 0x68
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40002800 	.word	0x40002800
 8005f90:	42470e3c 	.word	0x42470e3c

08005f94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f9c:	f107 0314 	add.w	r3, r7, #20
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <HAL_SPI_MspInit+0x84>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d12b      	bne.n	800600e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	4a17      	ldr	r2, [pc, #92]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	4a10      	ldr	r2, [pc, #64]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <HAL_SPI_MspInit+0x88>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005fee:	23e0      	movs	r3, #224	; 0xe0
 8005ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ffe:	2305      	movs	r3, #5
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	4619      	mov	r1, r3
 8006008:	4805      	ldr	r0, [pc, #20]	; (8006020 <HAL_SPI_MspInit+0x8c>)
 800600a:	f002 fb05 	bl	8008618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800600e:	bf00      	nop
 8006010:	3728      	adds	r7, #40	; 0x28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40013000 	.word	0x40013000
 800601c:	40023800 	.word	0x40023800
 8006020:	40020000 	.word	0x40020000

08006024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b090      	sub	sp, #64	; 0x40
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800602c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	609a      	str	r2, [r3, #8]
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a7f      	ldr	r2, [pc, #508]	; (8006240 <HAL_UART_MspInit+0x21c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f040 8092 	bne.w	800616c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006048:	2300      	movs	r3, #0
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
 800604c:	4b7d      	ldr	r3, [pc, #500]	; (8006244 <HAL_UART_MspInit+0x220>)
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	4a7c      	ldr	r2, [pc, #496]	; (8006244 <HAL_UART_MspInit+0x220>)
 8006052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006056:	6413      	str	r3, [r2, #64]	; 0x40
 8006058:	4b7a      	ldr	r3, [pc, #488]	; (8006244 <HAL_UART_MspInit+0x220>)
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006064:	2300      	movs	r3, #0
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
 8006068:	4b76      	ldr	r3, [pc, #472]	; (8006244 <HAL_UART_MspInit+0x220>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	4a75      	ldr	r2, [pc, #468]	; (8006244 <HAL_UART_MspInit+0x220>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	6313      	str	r3, [r2, #48]	; 0x30
 8006074:	4b73      	ldr	r3, [pc, #460]	; (8006244 <HAL_UART_MspInit+0x220>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006080:	2303      	movs	r3, #3
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006084:	2302      	movs	r3, #2
 8006086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006088:	2300      	movs	r3, #0
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800608c:	2303      	movs	r3, #3
 800608e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006090:	2308      	movs	r3, #8
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006098:	4619      	mov	r1, r3
 800609a:	486b      	ldr	r0, [pc, #428]	; (8006248 <HAL_UART_MspInit+0x224>)
 800609c:	f002 fabc 	bl	8008618 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80060a0:	4b6a      	ldr	r3, [pc, #424]	; (800624c <HAL_UART_MspInit+0x228>)
 80060a2:	4a6b      	ldr	r2, [pc, #428]	; (8006250 <HAL_UART_MspInit+0x22c>)
 80060a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80060a6:	4b69      	ldr	r3, [pc, #420]	; (800624c <HAL_UART_MspInit+0x228>)
 80060a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060ae:	4b67      	ldr	r3, [pc, #412]	; (800624c <HAL_UART_MspInit+0x228>)
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060b4:	4b65      	ldr	r3, [pc, #404]	; (800624c <HAL_UART_MspInit+0x228>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060ba:	4b64      	ldr	r3, [pc, #400]	; (800624c <HAL_UART_MspInit+0x228>)
 80060bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060c2:	4b62      	ldr	r3, [pc, #392]	; (800624c <HAL_UART_MspInit+0x228>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060c8:	4b60      	ldr	r3, [pc, #384]	; (800624c <HAL_UART_MspInit+0x228>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80060ce:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_UART_MspInit+0x228>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060d4:	4b5d      	ldr	r3, [pc, #372]	; (800624c <HAL_UART_MspInit+0x228>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060da:	4b5c      	ldr	r3, [pc, #368]	; (800624c <HAL_UART_MspInit+0x228>)
 80060dc:	2200      	movs	r2, #0
 80060de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80060e0:	485a      	ldr	r0, [pc, #360]	; (800624c <HAL_UART_MspInit+0x228>)
 80060e2:	f001 fe2b 	bl	8007d3c <HAL_DMA_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80060ec:	f7ff f8e0 	bl	80052b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a56      	ldr	r2, [pc, #344]	; (800624c <HAL_UART_MspInit+0x228>)
 80060f4:	635a      	str	r2, [r3, #52]	; 0x34
 80060f6:	4a55      	ldr	r2, [pc, #340]	; (800624c <HAL_UART_MspInit+0x228>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80060fc:	4b55      	ldr	r3, [pc, #340]	; (8006254 <HAL_UART_MspInit+0x230>)
 80060fe:	4a56      	ldr	r2, [pc, #344]	; (8006258 <HAL_UART_MspInit+0x234>)
 8006100:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006102:	4b54      	ldr	r3, [pc, #336]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006108:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <HAL_UART_MspInit+0x230>)
 800610c:	2200      	movs	r2, #0
 800610e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006110:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006112:	2200      	movs	r2, #0
 8006114:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006116:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800611c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006120:	2200      	movs	r2, #0
 8006122:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006126:	2200      	movs	r2, #0
 8006128:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_UART_MspInit+0x230>)
 800612c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006130:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006132:	4b48      	ldr	r3, [pc, #288]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006134:	2200      	movs	r2, #0
 8006136:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006138:	4b46      	ldr	r3, [pc, #280]	; (8006254 <HAL_UART_MspInit+0x230>)
 800613a:	2200      	movs	r2, #0
 800613c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800613e:	4845      	ldr	r0, [pc, #276]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006140:	f001 fdfc 	bl	8007d3c <HAL_DMA_Init>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800614a:	f7ff f8b1 	bl	80052b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a40      	ldr	r2, [pc, #256]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
 8006154:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <HAL_UART_MspInit+0x230>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	2034      	movs	r0, #52	; 0x34
 8006160:	f001 fda7 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006164:	2034      	movs	r0, #52	; 0x34
 8006166:	f001 fdc0 	bl	8007cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800616a:	e135      	b.n	80063d8 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3a      	ldr	r2, [pc, #232]	; (800625c <HAL_UART_MspInit+0x238>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d178      	bne.n	8006268 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	4b32      	ldr	r3, [pc, #200]	; (8006244 <HAL_UART_MspInit+0x220>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	4a31      	ldr	r2, [pc, #196]	; (8006244 <HAL_UART_MspInit+0x220>)
 8006180:	f043 0310 	orr.w	r3, r3, #16
 8006184:	6453      	str	r3, [r2, #68]	; 0x44
 8006186:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <HAL_UART_MspInit+0x220>)
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	623b      	str	r3, [r7, #32]
 8006190:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <HAL_UART_MspInit+0x220>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <HAL_UART_MspInit+0x220>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30
 80061a2:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_UART_MspInit+0x220>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b4:	2302      	movs	r3, #2
 80061b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061bc:	2303      	movs	r3, #3
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061c0:	2307      	movs	r3, #7
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061c8:	4619      	mov	r1, r3
 80061ca:	481f      	ldr	r0, [pc, #124]	; (8006248 <HAL_UART_MspInit+0x224>)
 80061cc:	f002 fa24 	bl	8008618 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80061d0:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061d2:	4a24      	ldr	r2, [pc, #144]	; (8006264 <HAL_UART_MspInit+0x240>)
 80061d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80061d6:	4b22      	ldr	r3, [pc, #136]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061e0:	2240      	movs	r2, #64	; 0x40
 80061e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e4:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061f2:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_UART_MspInit+0x23c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_UART_MspInit+0x23c>)
 8006200:	2200      	movs	r2, #0
 8006202:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006204:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_UART_MspInit+0x23c>)
 8006206:	2200      	movs	r2, #0
 8006208:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <HAL_UART_MspInit+0x23c>)
 800620c:	2200      	movs	r2, #0
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006210:	4813      	ldr	r0, [pc, #76]	; (8006260 <HAL_UART_MspInit+0x23c>)
 8006212:	f001 fd93 	bl	8007d3c <HAL_DMA_Init>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800621c:	f7ff f848 	bl	80052b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <HAL_UART_MspInit+0x23c>)
 8006224:	635a      	str	r2, [r3, #52]	; 0x34
 8006226:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <HAL_UART_MspInit+0x23c>)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800622c:	2200      	movs	r2, #0
 800622e:	2100      	movs	r1, #0
 8006230:	2025      	movs	r0, #37	; 0x25
 8006232:	f001 fd3e 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006236:	2025      	movs	r0, #37	; 0x25
 8006238:	f001 fd57 	bl	8007cea <HAL_NVIC_EnableIRQ>
}
 800623c:	e0cc      	b.n	80063d8 <HAL_UART_MspInit+0x3b4>
 800623e:	bf00      	nop
 8006240:	40004c00 	.word	0x40004c00
 8006244:	40023800 	.word	0x40023800
 8006248:	40020000 	.word	0x40020000
 800624c:	20000560 	.word	0x20000560
 8006250:	40026070 	.word	0x40026070
 8006254:	200005c0 	.word	0x200005c0
 8006258:	40026040 	.word	0x40026040
 800625c:	40011000 	.word	0x40011000
 8006260:	20000620 	.word	0x20000620
 8006264:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5c      	ldr	r2, [pc, #368]	; (80063e0 <HAL_UART_MspInit+0x3bc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d162      	bne.n	8006338 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	4b5b      	ldr	r3, [pc, #364]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 800627c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006280:	6413      	str	r3, [r2, #64]	; 0x40
 8006282:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	4b54      	ldr	r3, [pc, #336]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a53      	ldr	r2, [pc, #332]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6313      	str	r3, [r2, #48]	; 0x30
 800629e:	4b51      	ldr	r3, [pc, #324]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062aa:	230c      	movs	r3, #12
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ae:	2302      	movs	r3, #2
 80062b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b6:	2303      	movs	r3, #3
 80062b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80062ba:	2307      	movs	r3, #7
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062c2:	4619      	mov	r1, r3
 80062c4:	4848      	ldr	r0, [pc, #288]	; (80063e8 <HAL_UART_MspInit+0x3c4>)
 80062c6:	f002 f9a7 	bl	8008618 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062cc:	4a48      	ldr	r2, [pc, #288]	; (80063f0 <HAL_UART_MspInit+0x3cc>)
 80062ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80062d0:	4b46      	ldr	r3, [pc, #280]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062d8:	4b44      	ldr	r3, [pc, #272]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062de:	4b43      	ldr	r3, [pc, #268]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062e4:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062ec:	4b3f      	ldr	r3, [pc, #252]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80062f8:	4b3c      	ldr	r3, [pc, #240]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 8006300:	2200      	movs	r2, #0
 8006302:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006304:	4b39      	ldr	r3, [pc, #228]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 8006306:	2200      	movs	r2, #0
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800630a:	4838      	ldr	r0, [pc, #224]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 800630c:	f001 fd16 	bl	8007d3c <HAL_DMA_Init>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8006316:	f7fe ffcb 	bl	80052b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a33      	ldr	r2, [pc, #204]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
 8006320:	4a32      	ldr	r2, [pc, #200]	; (80063ec <HAL_UART_MspInit+0x3c8>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	2101      	movs	r1, #1
 800632a:	2026      	movs	r0, #38	; 0x26
 800632c:	f001 fcc1 	bl	8007cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006330:	2026      	movs	r0, #38	; 0x26
 8006332:	f001 fcda 	bl	8007cea <HAL_NVIC_EnableIRQ>
}
 8006336:	e04f      	b.n	80063d8 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART3)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <HAL_UART_MspInit+0x3d0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d14a      	bne.n	80063d8 <HAL_UART_MspInit+0x3b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	4a26      	ldr	r2, [pc, #152]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 800634c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006350:	6413      	str	r3, [r2, #64]	; 0x40
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	4b20      	ldr	r3, [pc, #128]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	4a1f      	ldr	r2, [pc, #124]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006368:	f043 0304 	orr.w	r3, r3, #4
 800636c:	6313      	str	r3, [r2, #48]	; 0x30
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	6313      	str	r3, [r2, #48]	; 0x30
 800638a:	4b16      	ldr	r3, [pc, #88]	; (80063e4 <HAL_UART_MspInit+0x3c0>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006396:	2320      	movs	r3, #32
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	2302      	movs	r3, #2
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063a2:	2303      	movs	r3, #3
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063a6:	2307      	movs	r3, #7
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063ae:	4619      	mov	r1, r3
 80063b0:	4811      	ldr	r0, [pc, #68]	; (80063f8 <HAL_UART_MspInit+0x3d4>)
 80063b2:	f002 f931 	bl	8008618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063bc:	2302      	movs	r3, #2
 80063be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c4:	2303      	movs	r3, #3
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063c8:	2307      	movs	r3, #7
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063d0:	4619      	mov	r1, r3
 80063d2:	480a      	ldr	r0, [pc, #40]	; (80063fc <HAL_UART_MspInit+0x3d8>)
 80063d4:	f002 f920 	bl	8008618 <HAL_GPIO_Init>
}
 80063d8:	bf00      	nop
 80063da:	3740      	adds	r7, #64	; 0x40
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40004400 	.word	0x40004400
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40020000 	.word	0x40020000
 80063ec:	20000680 	.word	0x20000680
 80063f0:	40026088 	.word	0x40026088
 80063f4:	40004800 	.word	0x40004800
 80063f8:	40020800 	.word	0x40020800
 80063fc:	40020400 	.word	0x40020400

08006400 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a31      	ldr	r2, [pc, #196]	; (80064d4 <HAL_UART_MspDeInit+0xd4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d117      	bne.n	8006442 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8006412:	4b31      	ldr	r3, [pc, #196]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 8006418:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800641c:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800641e:	2103      	movs	r1, #3
 8006420:	482e      	ldr	r0, [pc, #184]	; (80064dc <HAL_UART_MspDeInit+0xdc>)
 8006422:	f002 fa8d 	bl	8008940 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	4618      	mov	r0, r3
 800642c:	f001 fd34 	bl	8007e98 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	4618      	mov	r0, r3
 8006436:	f001 fd2f 	bl	8007e98 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800643a:	2034      	movs	r0, #52	; 0x34
 800643c:	f001 fc63 	bl	8007d06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8006440:	e044      	b.n	80064cc <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <HAL_UART_MspDeInit+0xe0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d113      	bne.n	8006474 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 800644c:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 8006452:	f023 0310 	bic.w	r3, r3, #16
 8006456:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006458:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800645c:	481f      	ldr	r0, [pc, #124]	; (80064dc <HAL_UART_MspDeInit+0xdc>)
 800645e:	f002 fa6f 	bl	8008940 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fd16 	bl	8007e98 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800646c:	2025      	movs	r0, #37	; 0x25
 800646e:	f001 fc4a 	bl	8007d06 <HAL_NVIC_DisableIRQ>
}
 8006472:	e02b      	b.n	80064cc <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <HAL_UART_MspDeInit+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d112      	bne.n	80064a4 <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART2_CLK_DISABLE();
 800647e:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 8006484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006488:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800648a:	210c      	movs	r1, #12
 800648c:	4813      	ldr	r0, [pc, #76]	; (80064dc <HAL_UART_MspDeInit+0xdc>)
 800648e:	f002 fa57 	bl	8008940 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fcfe 	bl	8007e98 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800649c:	2026      	movs	r0, #38	; 0x26
 800649e:	f001 fc32 	bl	8007d06 <HAL_NVIC_DisableIRQ>
}
 80064a2:	e013      	b.n	80064cc <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART3)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a0f      	ldr	r2, [pc, #60]	; (80064e8 <HAL_UART_MspDeInit+0xe8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10e      	bne.n	80064cc <HAL_UART_MspDeInit+0xcc>
    __HAL_RCC_USART3_CLK_DISABLE();
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <HAL_UART_MspDeInit+0xd8>)
 80064b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80064ba:	2120      	movs	r1, #32
 80064bc:	480b      	ldr	r0, [pc, #44]	; (80064ec <HAL_UART_MspDeInit+0xec>)
 80064be:	f002 fa3f 	bl	8008940 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80064c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064c6:	480a      	ldr	r0, [pc, #40]	; (80064f0 <HAL_UART_MspDeInit+0xf0>)
 80064c8:	f002 fa3a 	bl	8008940 <HAL_GPIO_DeInit>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40004c00 	.word	0x40004c00
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40020000 	.word	0x40020000
 80064e0:	40011000 	.word	0x40011000
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	40020800 	.word	0x40020800
 80064f0:	40020400 	.word	0x40020400

080064f4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void){
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80064f8:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <SDTimer_Handler+0x40>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <SDTimer_Handler+0x1c>
		Timer1--;
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <SDTimer_Handler+0x40>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <SDTimer_Handler+0x40>)
 800650e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <SDTimer_Handler+0x44>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <SDTimer_Handler+0x34>
		Timer2--;
 800651a:	4b07      	ldr	r3, [pc, #28]	; (8006538 <SDTimer_Handler+0x44>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <SDTimer_Handler+0x44>)
 8006526:	701a      	strb	r2, [r3, #0]

}
 8006528:	bf00      	nop
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200009d9 	.word	0x200009d9
 8006538:	200009da 	.word	0x200009da

0800653c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006540:	e7fe      	b.n	8006540 <NMI_Handler+0x4>

08006542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006546:	e7fe      	b.n	8006546 <HardFault_Handler+0x4>

08006548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800654c:	e7fe      	b.n	800654c <MemManage_Handler+0x4>

0800654e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800654e:	b480      	push	{r7}
 8006550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006552:	e7fe      	b.n	8006552 <BusFault_Handler+0x4>

08006554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006558:	e7fe      	b.n	8006558 <UsageFault_Handler+0x4>

0800655a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <SysTick_Handler+0x30>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	3301      	adds	r3, #1
 8006590:	b2da      	uxtb	r2, r3
 8006592:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <SysTick_Handler+0x30>)
 8006594:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt>=10)
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <SysTick_Handler+0x30>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b09      	cmp	r3, #9
 800659e:	d904      	bls.n	80065aa <SysTick_Handler+0x26>
		{
			FatFsCnt=0;
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <SysTick_Handler+0x30>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 80065a6:	f7ff ffa5 	bl	80064f4 <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065aa:	f000 fe2f 	bl	800720c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200009d8 	.word	0x200009d8

080065b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80065bc:	2008      	movs	r0, #8
 80065be:	f002 fae7 	bl	8008b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80065ca:	2010      	movs	r0, #16
 80065cc:	f002 fae0 	bl	8008b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80065d0:	bf00      	nop
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80065d8:	4802      	ldr	r0, [pc, #8]	; (80065e4 <DMA1_Stream2_IRQHandler+0x10>)
 80065da:	f001 fda5 	bl	8008128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200005c0 	.word	0x200005c0

080065e8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80065ec:	4802      	ldr	r0, [pc, #8]	; (80065f8 <DMA1_Stream4_IRQHandler+0x10>)
 80065ee:	f001 fd9b 	bl	8008128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000560 	.word	0x20000560

080065fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006600:	4802      	ldr	r0, [pc, #8]	; (800660c <DMA1_Stream5_IRQHandler+0x10>)
 8006602:	f001 fd91 	bl	8008128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006606:	bf00      	nop
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000680 	.word	0x20000680

08006610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006614:	4802      	ldr	r0, [pc, #8]	; (8006620 <USART1_IRQHandler+0x10>)
 8006616:	f005 fc4f 	bl	800beb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000494 	.word	0x20000494

08006624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006628:	4802      	ldr	r0, [pc, #8]	; (8006634 <USART2_IRQHandler+0x10>)
 800662a:	f005 fc45 	bl	800beb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200004d8 	.word	0x200004d8

08006638 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800663c:	4802      	ldr	r0, [pc, #8]	; (8006648 <UART4_IRQHandler+0x10>)
 800663e:	f005 fc3b 	bl	800beb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000450 	.word	0x20000450

0800664c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006650:	4802      	ldr	r0, [pc, #8]	; (800665c <DMA2_Stream7_IRQHandler+0x10>)
 8006652:	f001 fd69 	bl	8008128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000620 	.word	0x20000620

08006660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	return 1;
 8006664:	2301      	movs	r3, #1
}
 8006666:	4618      	mov	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_kill>:

int _kill(int pid, int sig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800667a:	f00a f87d 	bl	8010778 <__errno>
 800667e:	4603      	mov	r3, r0
 8006680:	2216      	movs	r2, #22
 8006682:	601a      	str	r2, [r3, #0]
	return -1;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_exit>:

void _exit (int status)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006698:	f04f 31ff 	mov.w	r1, #4294967295
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ffe7 	bl	8006670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80066a2:	e7fe      	b.n	80066a2 <_exit+0x12>

080066a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e00a      	b.n	80066cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80066b6:	f3af 8000 	nop.w
 80066ba:	4601      	mov	r1, r0
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	60ba      	str	r2, [r7, #8]
 80066c2:	b2ca      	uxtb	r2, r1
 80066c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	3301      	adds	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	dbf0      	blt.n	80066b6 <_read+0x12>
	}

return len;
 80066d4:	687b      	ldr	r3, [r7, #4]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e009      	b.n	8006704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	60ba      	str	r2, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	3301      	adds	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	dbf1      	blt.n	80066f0 <_write+0x12>
	}
	return len;
 800670c:	687b      	ldr	r3, [r7, #4]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <_close>:

int _close(int file)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
	return -1;
 800671e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800673e:	605a      	str	r2, [r3, #4]
	return 0;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <_isatty>:

int _isatty(int file)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
	return 1;
 8006756:	2301      	movs	r3, #1
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
	return 0;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006788:	4a14      	ldr	r2, [pc, #80]	; (80067dc <_sbrk+0x5c>)
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <_sbrk+0x60>)
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <_sbrk+0x64>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <_sbrk+0x64>)
 800679e:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <_sbrk+0x68>)
 80067a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067a2:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <_sbrk+0x64>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d207      	bcs.n	80067c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067b0:	f009 ffe2 	bl	8010778 <__errno>
 80067b4:	4603      	mov	r3, r0
 80067b6:	220c      	movs	r2, #12
 80067b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	e009      	b.n	80067d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <_sbrk+0x64>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <_sbrk+0x64>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	4a05      	ldr	r2, [pc, #20]	; (80067e4 <_sbrk+0x64>)
 80067d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20020000 	.word	0x20020000
 80067e0:	00000400 	.word	0x00000400
 80067e4:	200009dc 	.word	0x200009dc
 80067e8:	20004960 	.word	0x20004960

080067ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <SystemInit+0x20>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	4a05      	ldr	r2, [pc, #20]	; (800680c <SystemInit+0x20>)
 80067f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000ed00 	.word	0xe000ed00

08006810 <uart_Sd_Transmit>:
static power Power_Pack;
backup_sram_datas_s *Backup_Pack = (backup_sram_datas_s *)BKPSRAM_BASE;
*/

_io void uart_Sd_Transmit(char *string)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7f9 fcf9 	bl	8000210 <strlen>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, len, 2000); // transmit in blocking mode
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	b29a      	uxth	r2, r3
 8006826:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4803      	ldr	r0, [pc, #12]	; (800683c <uart_Sd_Transmit+0x2c>)
 800682e:	f005 fa03 	bl	800bc38 <HAL_UART_Transmit>
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000051c 	.word	0x2000051c

08006840 <sdBufClear>:
	while (*buf++ != '\0')
		i++;
	return i;
}
_io void sdBufClear(void)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	e007      	b.n	800685c <sdBufClear+0x1c>
		fatBuff[i] = 0;
 800684c:	4a09      	ldr	r2, [pc, #36]	; (8006874 <sdBufClear+0x34>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3301      	adds	r3, #1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006862:	dbf3      	blt.n	800684c <sdBufClear+0xc>
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	200009e0 	.word	0x200009e0

08006878 <usr_fatfsInitial>:
	} while (fno.fname[0] != 0);

	f_closedir(&dir);
}
PUBLIC void usr_fatfsInitial(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
	MX_FATFS_Init();
 800687c:	f006 fc74 	bl	800d168 <MX_FATFS_Init>
}
 8006880:	bf00      	nop
 8006882:	bd80      	pop	{r7, pc}

08006884 <sdInitials>:
PUBLIC void sdInitials(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8006888:	2201      	movs	r2, #1
 800688a:	4939      	ldr	r1, [pc, #228]	; (8006970 <sdInitials+0xec>)
 800688c:	4839      	ldr	r0, [pc, #228]	; (8006974 <sdInitials+0xf0>)
 800688e:	f008 feb9 	bl	800f604 <f_mount>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	4b38      	ldr	r3, [pc, #224]	; (8006978 <sdInitials+0xf4>)
 8006898:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800689a:	4b37      	ldr	r3, [pc, #220]	; (8006978 <sdInitials+0xf4>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <sdInitials+0x26>
		uart_Sd_Transmit("error in mount [Check For Fat Response (fresult) in debug mode!!!!]......\n");
 80068a2:	4836      	ldr	r0, [pc, #216]	; (800697c <sdInitials+0xf8>)
 80068a4:	f7ff ffb4 	bl	8006810 <uart_Sd_Transmit>
 80068a8:	e002      	b.n	80068b0 <sdInitials+0x2c>
	else
		uart_Sd_Transmit("SD CARD MOUNTED CUSSESSFULY..\n");
 80068aa:	4835      	ldr	r0, [pc, #212]	; (8006980 <sdInitials+0xfc>)
 80068ac:	f7ff ffb0 	bl	8006810 <uart_Sd_Transmit>

	/*capacity details*/
	f_getfree("", &fre_clust, &pfs);
 80068b0:	4a34      	ldr	r2, [pc, #208]	; (8006984 <sdInitials+0x100>)
 80068b2:	4935      	ldr	r1, [pc, #212]	; (8006988 <sdInitials+0x104>)
 80068b4:	4835      	ldr	r0, [pc, #212]	; (800698c <sdInitials+0x108>)
 80068b6:	f009 faf3 	bl	800fea0 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80068ba:	4b32      	ldr	r3, [pc, #200]	; (8006984 <sdInitials+0x100>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	3b02      	subs	r3, #2
 80068c2:	4a30      	ldr	r2, [pc, #192]	; (8006984 <sdInitials+0x100>)
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	8952      	ldrh	r2, [r2, #10]
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7f9 fe39 	bl	8000544 <__aeabi_ui2d>
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <sdInitials+0x10c>)
 80068d8:	f7f9 feae 	bl	8000638 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4610      	mov	r0, r2
 80068e2:	4619      	mov	r1, r3
 80068e4:	f7fa f980 	bl	8000be8 <__aeabi_d2uiz>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <sdInitials+0x110>)
 80068ec:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Total] Size: \t%lu\n", total);
 80068ee:	4b29      	ldr	r3, [pc, #164]	; (8006994 <sdInitials+0x110>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	4928      	ldr	r1, [pc, #160]	; (8006998 <sdInitials+0x114>)
 80068f6:	4829      	ldr	r0, [pc, #164]	; (800699c <sdInitials+0x118>)
 80068f8:	f00a fdf0 	bl	80114dc <siprintf>
	uart_Sd_Transmit(fatBuff);
 80068fc:	4827      	ldr	r0, [pc, #156]	; (800699c <sdInitials+0x118>)
 80068fe:	f7ff ff87 	bl	8006810 <uart_Sd_Transmit>
	sdBufClear();
 8006902:	f7ff ff9d 	bl	8006840 <sdBufClear>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8006906:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <sdInitials+0x100>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	895b      	ldrh	r3, [r3, #10]
 800690c:	461a      	mov	r2, r3
 800690e:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <sdInitials+0x104>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe14 	bl	8000544 <__aeabi_ui2d>
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <sdInitials+0x10c>)
 8006922:	f7f9 fe89 	bl	8000638 <__aeabi_dmul>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	f7fa f95b 	bl	8000be8 <__aeabi_d2uiz>
 8006932:	4603      	mov	r3, r0
 8006934:	4a1a      	ldr	r2, [pc, #104]	; (80069a0 <sdInitials+0x11c>)
 8006936:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Free] Size: \t%lu\n", free_space);
 8006938:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <sdInitials+0x11c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	4919      	ldr	r1, [pc, #100]	; (80069a4 <sdInitials+0x120>)
 8006940:	4816      	ldr	r0, [pc, #88]	; (800699c <sdInitials+0x118>)
 8006942:	f00a fdcb 	bl	80114dc <siprintf>
	uart_Sd_Transmit(fatBuff);
 8006946:	4815      	ldr	r0, [pc, #84]	; (800699c <sdInitials+0x118>)
 8006948:	f7ff ff62 	bl	8006810 <uart_Sd_Transmit>
	fresult = f_open(&fil, "flightRecorder.csv", FA_CREATE_NEW | FA_WRITE);//test
 800694c:	2206      	movs	r2, #6
 800694e:	4916      	ldr	r1, [pc, #88]	; (80069a8 <sdInitials+0x124>)
 8006950:	4816      	ldr	r0, [pc, #88]	; (80069ac <sdInitials+0x128>)
 8006952:	f008 fe9d 	bl	800f690 <f_open>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <sdInitials+0xf4>)
 800695c:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 800695e:	4813      	ldr	r0, [pc, #76]	; (80069ac <sdInitials+0x128>)
 8006960:	f009 fa74 	bl	800fe4c <f_close>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	4b03      	ldr	r3, [pc, #12]	; (8006978 <sdInitials+0xf4>)
 800696a:	701a      	strb	r2, [r3, #0]
}
 800696c:	bf00      	nop
 800696e:	bd80      	pop	{r7, pc}
 8006970:	0801771c 	.word	0x0801771c
 8006974:	200015e0 	.word	0x200015e0
 8006978:	20003648 	.word	0x20003648
 800697c:	08017734 	.word	0x08017734
 8006980:	08017780 	.word	0x08017780
 8006984:	2000364c 	.word	0x2000364c
 8006988:	20003650 	.word	0x20003650
 800698c:	080177a0 	.word	0x080177a0
 8006990:	3fe00000 	.word	0x3fe00000
 8006994:	20003654 	.word	0x20003654
 8006998:	080177a4 	.word	0x080177a4
 800699c:	200009e0 	.word	0x200009e0
 80069a0:	20003658 	.word	0x20003658
 80069a4:	080177c0 	.word	0x080177c0
 80069a8:	080177dc 	.word	0x080177dc
 80069ac:	20002618 	.word	0x20002618

080069b0 <sd_transmit>:
	uart_Sd_Transmit("[testDataLogFile.txt] GOK-HAN data log closed.\n");

#endif
}
PUBLIC int sd_transmit(const char *str)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0c2      	sub	sp, #264	; 0x108
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069be:	6018      	str	r0, [r3, #0]
	uint8_t _buffer[250];
#ifdef ROCKET_CARD
	sprintf((char*)_buffer, "Counter,Time,Pressure(mPa),Humidity(%%),Temperature(C),Altitude(m),Velocity(m/s),Acc_X,Acc_Y,Acc_Z,Gyro_X,Gyro_Y,Gyro_Z,Rocket_Status,Angle(degree),Q0,Q1,Q2,Q3,Max_altitude(m),Latitude,Longitude,Sat_count,GPS_altitude,Voltage,Current(mA),Power(mWs)\n");
 80069c0:	f107 030c 	add.w	r3, r7, #12
 80069c4:	4912      	ldr	r1, [pc, #72]	; (8006a10 <sd_transmit+0x60>)
 80069c6:	4618      	mov	r0, r3
 80069c8:	f00a fd88 	bl	80114dc <siprintf>
#else
	sprintf((char*)_buffer, "Counter,Time,Pressure(mPa),Humidity(%%),Temperature(C),Altitude(m),Velocity(m/s),Acc_X,Acc_Y,Acc_Z,Gyro_X,Gyro_Y,Gyro_Z,Rocket_Status,Angle(degree),Q0,Q1,Q2,Q3,Strain,Latitude,Longitude,Sat_count,GPS_altitude,Voltage,Current(mA),Power(mWs)\n");
#endif
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE); // open to write
 80069cc:	2232      	movs	r2, #50	; 0x32
 80069ce:	4911      	ldr	r1, [pc, #68]	; (8006a14 <sd_transmit+0x64>)
 80069d0:	4811      	ldr	r0, [pc, #68]	; (8006a18 <sd_transmit+0x68>)
 80069d2:	f008 fe5d 	bl	800f690 <f_open>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <sd_transmit+0x6c>)
 80069dc:	701a      	strb	r2, [r3, #0]
	fresult = f_printf(&fil, (char*)_buffer);
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	4619      	mov	r1, r3
 80069e4:	480c      	ldr	r0, [pc, #48]	; (8006a18 <sd_transmit+0x68>)
 80069e6:	f009 fb87 	bl	80100f8 <f_printf>
 80069ea:	4603      	mov	r3, r0
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <sd_transmit+0x6c>)
 80069f0:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil); // close
 80069f2:	4809      	ldr	r0, [pc, #36]	; (8006a18 <sd_transmit+0x68>)
 80069f4:	f009 fa2a 	bl	800fe4c <f_close>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <sd_transmit+0x6c>)
 80069fe:	701a      	strb	r2, [r3, #0]
	return fresult;
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <sd_transmit+0x6c>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	080177f0 	.word	0x080177f0
 8006a14:	080177dc 	.word	0x080177dc
 8006a18:	20002618 	.word	0x20002618
 8006a1c:	20003648 	.word	0x20003648

08006a20 <sdDataLogger>:
PUBLIC void sdDataLogger(uint32_t counter, BME_280_t *BME_Pack, bmi088_struct_t *BMI_Pack, backup_sram_datas_s *Backup_Pack, S_GPS_L86_DATA *GPS_Pack, power *Power_Pack)
{
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	ed2d 8b06 	vpush	{d8-d10}
 8006a28:	b0df      	sub	sp, #380	; 0x17c
 8006a2a:	af34      	add	r7, sp, #208	; 0xd0
 8006a2c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8006a30:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006a34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE);
 8006a3c:	2232      	movs	r2, #50	; 0x32
 8006a3e:	49a6      	ldr	r1, [pc, #664]	; (8006cd8 <sdDataLogger+0x2b8>)
 8006a40:	48a6      	ldr	r0, [pc, #664]	; (8006cdc <sdDataLogger+0x2bc>)
 8006a42:	f008 fe25 	bl	800f690 <f_open>
 8006a46:	4603      	mov	r3, r0
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4ba5      	ldr	r3, [pc, #660]	; (8006ce0 <sdDataLogger+0x2c0>)
 8006a4c:	701a      	strb	r2, [r3, #0]
#ifdef ROCKET_CARD
	sprintf(_aBuf, "%lu,%.0f,%.3f,%.1f,%.1f,%.1f,%.1f,%f,%f,%f,%f,%f,%f,%d,%.2f,%f,%f,%f,%f,%.1f,%f,%f,%d,%.1f,%.2f,%.2f,%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], Backup_Pack->max_altitude, GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
 8006a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7f9 fd97 	bl	8000588 <__aeabi_f2d>
 8006a5a:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
 8006a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7f9 fd8f 	bl	8000588 <__aeabi_f2d>
 8006a6a:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 8006a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7f9 fd87 	bl	8000588 <__aeabi_f2d>
 8006a7a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8006a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7f9 fd7f 	bl	8000588 <__aeabi_f2d>
 8006a8a:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8006a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7f9 fd77 	bl	8000588 <__aeabi_f2d>
 8006a9a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8006a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7f9 fd6f 	bl	8000588 <__aeabi_f2d>
 8006aaa:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8006aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fd66 	bl	8000588 <__aeabi_f2d>
 8006abc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8006ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7f9 fd5d 	bl	8000588 <__aeabi_f2d>
 8006ace:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8006ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ad6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fd54 	bl	8000588 <__aeabi_f2d>
 8006ae0:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8006ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ae8:	ed93 ab20 	vldr	d10, [r3, #128]	; 0x80
 8006aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006af0:	ed93 9b22 	vldr	d9, [r3, #136]	; 0x88
 8006af4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006af8:	ed93 8b24 	vldr	d8, [r3, #144]	; 0x90
 8006afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	647b      	str	r3, [r7, #68]	; 0x44
 8006b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7f9 fd3b 	bl	8000588 <__aeabi_f2d>
 8006b12:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8006b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7f9 fd33 	bl	8000588 <__aeabi_f2d>
 8006b22:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8006b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7f9 fd2b 	bl	8000588 <__aeabi_f2d>
 8006b32:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 fd23 	bl	8000588 <__aeabi_f2d>
 8006b42:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8006b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7f9 fd1b 	bl	8000588 <__aeabi_f2d>
 8006b52:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8006b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7f9 fd13 	bl	8000588 <__aeabi_f2d>
 8006b62:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006b66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7f9 fd0b 	bl	8000588 <__aeabi_f2d>
 8006b72:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006b76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7f9 fd03 	bl	8000588 <__aeabi_f2d>
 8006b82:	e9c7 0100 	strd	r0, r1, [r7]
 8006b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b8a:	6a1e      	ldr	r6, [r3, #32]
 8006b8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7f9 fcf8 	bl	8000588 <__aeabi_f2d>
 8006b98:	4682      	mov	sl, r0
 8006b9a:	468b      	mov	fp, r1
 8006b9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7f9 fcf0 	bl	8000588 <__aeabi_f2d>
 8006ba8:	4680      	mov	r8, r0
 8006baa:	4689      	mov	r9, r1
 8006bac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fce8 	bl	8000588 <__aeabi_f2d>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7f9 fce0 	bl	8000588 <__aeabi_f2d>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8006bd0:	e9cd 4530 	strd	r4, r5, [sp, #192]	; 0xc0
 8006bd4:	e9cd 892e 	strd	r8, r9, [sp, #184]	; 0xb8
 8006bd8:	e9cd ab2c 	strd	sl, fp, [sp, #176]	; 0xb0
 8006bdc:	962a      	str	r6, [sp, #168]	; 0xa8
 8006bde:	ed97 7b00 	vldr	d7, [r7]
 8006be2:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8006be6:	ed97 7b02 	vldr	d7, [r7, #8]
 8006bea:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8006bee:	ed97 7b04 	vldr	d7, [r7, #16]
 8006bf2:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8006bf6:	ed97 7b06 	vldr	d7, [r7, #24]
 8006bfa:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8006bfe:	ed97 7b08 	vldr	d7, [r7, #32]
 8006c02:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8006c06:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006c0a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8006c0e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006c12:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006c16:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006c1a:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c20:	9318      	str	r3, [sp, #96]	; 0x60
 8006c22:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8006c26:	ed8d 9b14 	vstr	d9, [sp, #80]	; 0x50
 8006c2a:	ed8d ab12 	vstr	d10, [sp, #72]	; 0x48
 8006c2e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006c32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006c36:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006c3a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006c3e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006c42:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006c46:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8006c4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c4e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8006c52:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006c56:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8006c5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c5e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8006c62:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c66:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8006c6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c6e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8006c72:	ed8d 7b00 	vstr	d7, [sp]
 8006c76:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c7a:	491a      	ldr	r1, [pc, #104]	; (8006ce4 <sdDataLogger+0x2c4>)
 8006c7c:	481a      	ldr	r0, [pc, #104]	; (8006ce8 <sdDataLogger+0x2c8>)
 8006c7e:	f00a fc2d 	bl	80114dc <siprintf>
#else
	sprintf(_aBuf, "%lu,%.0f,%.3f,%.1f,%.1f,%.1f,%.1f,%f,%f,%f,%f,%f,%f,%d,%.2f,%f,%f,%f,%f,%.1f,%f,%f,%d,%.1f,%.2f,%.2f,%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], strain_gage_get_vals(&loadcell), GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
#endif
	fresult = f_printf(&fil, _aBuf);
 8006c82:	4919      	ldr	r1, [pc, #100]	; (8006ce8 <sdDataLogger+0x2c8>)
 8006c84:	4815      	ldr	r0, [pc, #84]	; (8006cdc <sdDataLogger+0x2bc>)
 8006c86:	f009 fa37 	bl	80100f8 <f_printf>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <sdDataLogger+0x2c0>)
 8006c90:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);// SD CLOSE
 8006c92:	4812      	ldr	r0, [pc, #72]	; (8006cdc <sdDataLogger+0x2bc>)
 8006c94:	f009 f8da 	bl	800fe4c <f_close>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <sdDataLogger+0x2c0>)
 8006c9e:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ca6:	e00a      	b.n	8006cbe <sdDataLogger+0x29e>
		_aBuf[i] = 0 ;
 8006ca8:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <sdDataLogger+0x2c8>)
 8006caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cae:	4413      	add	r3, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cc2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8006cc6:	dbef      	blt.n	8006ca8 <sdDataLogger+0x288>
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	37ac      	adds	r7, #172	; 0xac
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	ecbd 8b06 	vpop	{d8-d10}
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	080177dc 	.word	0x080177dc
 8006cdc:	20002618 	.word	0x20002618
 8006ce0:	20003648 	.word	0x20003648
 8006ce4:	080178ec 	.word	0x080178ec
 8006ce8:	20000de0 	.word	0x20000de0

08006cec <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <HAL_UART_RxCpltCallback+0x40>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d105      	bne.n	8006d08 <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <HAL_UART_RxCpltCallback+0x44>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <HAL_UART_RxCpltCallback+0x48>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a0b      	ldr	r2, [pc, #44]	; (8006d38 <HAL_UART_RxCpltCallback+0x4c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d109      	bne.n	8006d24 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <HAL_UART_RxCpltCallback+0x50>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <HAL_UART_RxCpltCallback+0x54>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4806      	ldr	r0, [pc, #24]	; (8006d38 <HAL_UART_RxCpltCallback+0x4c>)
 8006d20:	f005 f89a 	bl	800be58 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200004d8 	.word	0x200004d8
 8006d30:	2000365c 	.word	0x2000365c
 8006d34:	2000365d 	.word	0x2000365d
 8006d38:	20000450 	.word	0x20000450
 8006d3c:	20000848 	.word	0x20000848
 8006d40:	20000844 	.word	0x20000844

08006d44 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8006d4c:	f240 228a 	movw	r2, #650	; 0x28a
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <UsrGpsL86Init+0x1c>)
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f005 f880 	bl	800be58 <HAL_UART_Receive_DMA>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20003734 	.word	0x20003734

08006d64 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
    getRmc();
 8006d6c:	f000 f83a 	bl	8006de4 <getRmc>
    getGGA();
 8006d70:	f000 f94a 	bl	8007008 <getGGA>
    if (rmcValidFlag)
 8006d74:	4b18      	ldr	r3, [pc, #96]	; (8006dd8 <Usr_GpsL86GetValues+0x74>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8006d7e:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <Usr_GpsL86GetValues+0x74>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8006d84:	f000 f8d2 	bl	8006f2c <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8006d88:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8006d90:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8006d98:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8006da0:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8006db8:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <Usr_GpsL86GetValues+0x78>)
 8006dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <Usr_GpsL86GetValues+0x7c>)
 8006dca:	f7ff ffbb 	bl	8006d44 <UsrGpsL86Init>
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000365e 	.word	0x2000365e
 8006ddc:	200046dc 	.word	0x200046dc
 8006de0:	200004d8 	.word	0x200004d8

08006de4 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 8006dea:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <getRmc+0x10c>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8006df0:	4940      	ldr	r1, [pc, #256]	; (8006ef4 <getRmc+0x110>)
 8006df2:	4841      	ldr	r0, [pc, #260]	; (8006ef8 <getRmc+0x114>)
 8006df4:	f00a fc03 	bl	80115fe <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8006df8:	4940      	ldr	r1, [pc, #256]	; (8006efc <getRmc+0x118>)
 8006dfa:	483f      	ldr	r0, [pc, #252]	; (8006ef8 <getRmc+0x114>)
 8006dfc:	f00a fc07 	bl	801160e <strstr>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4a3f      	ldr	r2, [pc, #252]	; (8006f00 <getRmc+0x11c>)
 8006e04:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8006e06:	4b3e      	ldr	r3, [pc, #248]	; (8006f00 <getRmc+0x11c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b47      	cmp	r3, #71	; 0x47
 8006e0e:	d167      	bne.n	8006ee0 <getRmc+0xfc>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8006e10:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <getRmc+0x11c>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <getRmc+0x10c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	7811      	ldrb	r1, [r2, #0]
 8006e1a:	4a3a      	ldr	r2, [pc, #232]	; (8006f04 <getRmc+0x120>)
 8006e1c:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8006e1e:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <getRmc+0x10c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a32      	ldr	r2, [pc, #200]	; (8006ef0 <getRmc+0x10c>)
 8006e26:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <getRmc+0x11c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a30      	ldr	r2, [pc, #192]	; (8006ef0 <getRmc+0x10c>)
 8006e2e:	6812      	ldr	r2, [r2, #0]
 8006e30:	441a      	add	r2, r3
 8006e32:	4b33      	ldr	r3, [pc, #204]	; (8006f00 <getRmc+0x11c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <getRmc+0x11c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b0a      	cmp	r3, #10
 8006e42:	d003      	beq.n	8006e4c <getRmc+0x68>
 8006e44:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <getRmc+0x10c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b5a      	cmp	r3, #90	; 0x5a
 8006e4a:	dde1      	ble.n	8006e10 <getRmc+0x2c>
	                {
	                    MsgIndex = 0;
 8006e4c:	4b28      	ldr	r3, [pc, #160]	; (8006ef0 <getRmc+0x10c>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	e014      	b.n	8006e82 <getRmc+0x9e>
	                    {
	                        if (gpsPayload[i] == 'N')
 8006e58:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <getRmc+0x120>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b4e      	cmp	r3, #78	; 0x4e
 8006e62:	d102      	bne.n	8006e6a <getRmc+0x86>
	                            f_northFlag = true;
 8006e64:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <getRmc+0x124>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8006e6a:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <getRmc+0x120>)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b45      	cmp	r3, #69	; 0x45
 8006e74:	d102      	bne.n	8006e7c <getRmc+0x98>
	                            f_eastFlag = true;
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <getRmc+0x128>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b63      	cmp	r3, #99	; 0x63
 8006e86:	dde7      	ble.n	8006e58 <getRmc+0x74>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8006e88:	481e      	ldr	r0, [pc, #120]	; (8006f04 <getRmc+0x120>)
 8006e8a:	f7f9 f9c1 	bl	8000210 <strlen>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d91f      	bls.n	8006ed4 <getRmc+0xf0>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <getRmc+0x128>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01f      	beq.n	8006ede <getRmc+0xfa>
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <getRmc+0x124>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01a      	beq.n	8006ede <getRmc+0xfa>
	                        {
	                            f_northFlag = false;
 8006ea8:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <getRmc+0x124>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8006eae:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <getRmc+0x128>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <getRmc+0x12c>)
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <getRmc+0x130>)
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <getRmc+0x134>)
 8006ebe:	4a17      	ldr	r2, [pc, #92]	; (8006f1c <getRmc+0x138>)
 8006ec0:	4917      	ldr	r1, [pc, #92]	; (8006f20 <getRmc+0x13c>)
 8006ec2:	4810      	ldr	r0, [pc, #64]	; (8006f04 <getRmc+0x120>)
 8006ec4:	f00a fb2a 	bl	801151c <siscanf>
	                            rmcValidFlag = true;
 8006ec8:	4b16      	ldr	r3, [pc, #88]	; (8006f24 <getRmc+0x140>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8006ece:	f000 f82d 	bl	8006f2c <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8006ed2:	e004      	b.n	8006ede <getRmc+0xfa>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8006ed4:	2264      	movs	r2, #100	; 0x64
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	480a      	ldr	r0, [pc, #40]	; (8006f04 <getRmc+0x120>)
 8006eda:	f009 fc77 	bl	80107cc <memset>
	                    break;
 8006ede:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8006ee0:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <getRmc+0x144>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]



}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20003664 	.word	0x20003664
 8006ef4:	20003734 	.word	0x20003734
 8006ef8:	20003f04 	.word	0x20003f04
 8006efc:	08017958 	.word	0x08017958
 8006f00:	20003668 	.word	0x20003668
 8006f04:	2000366c 	.word	0x2000366c
 8006f08:	2000365f 	.word	0x2000365f
 8006f0c:	20003660 	.word	0x20003660
 8006f10:	200046e4 	.word	0x200046e4
 8006f14:	200046d8 	.word	0x200046d8
 8006f18:	200046d4 	.word	0x200046d4
 8006f1c:	200046e8 	.word	0x200046e8
 8006f20:	08017960 	.word	0x08017960
 8006f24:	2000365e 	.word	0x2000365e
 8006f28:	2000365c 	.word	0x2000365c

08006f2c <formatLatLong>:

_io void formatLatLong(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8006f32:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <formatLatLong+0xc8>)
 8006f34:	edd3 7a00 	vldr	s15, [r3]
 8006f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f3c:	ee17 1a90 	vmov	r1, s15
 8006f40:	4b2d      	ldr	r3, [pc, #180]	; (8006ff8 <formatLatLong+0xcc>)
 8006f42:	fb83 2301 	smull	r2, r3, r3, r1
 8006f46:	115a      	asrs	r2, r3, #5
 8006f48:	17cb      	asrs	r3, r1, #31
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <formatLatLong+0xc8>)
 8006f50:	ed93 7a00 	vldr	s14, [r3]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2264      	movs	r2, #100	; 0x64
 8006f58:	fb02 f303 	mul.w	r3, r2, r3
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f68:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f76:	edd7 6a00 	vldr	s13, [r7]
 8006f7a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8006ffc <formatLatLong+0xd0>
 8006f7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f86:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <formatLatLong+0xd4>)
 8006f88:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	; (8007004 <formatLatLong+0xd8>)
 8006f8e:	edd3 7a00 	vldr	s15, [r3]
 8006f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f96:	ee17 1a90 	vmov	r1, s15
 8006f9a:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <formatLatLong+0xcc>)
 8006f9c:	fb83 2301 	smull	r2, r3, r3, r1
 8006fa0:	115a      	asrs	r2, r3, #5
 8006fa2:	17cb      	asrs	r3, r1, #31
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	; (8007004 <formatLatLong+0xd8>)
 8006faa:	ed93 7a00 	vldr	s14, [r3]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2264      	movs	r2, #100	; 0x64
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fc2:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd0:	edd7 6a00 	vldr	s13, [r7]
 8006fd4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8006ffc <formatLatLong+0xd0>
 8006fd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <formatLatLong+0xd4>)
 8006fe2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	200046d4 	.word	0x200046d4
 8006ff8:	51eb851f 	.word	0x51eb851f
 8006ffc:	42700000 	.word	0x42700000
 8007000:	200046dc 	.word	0x200046dc
 8007004:	200046d8 	.word	0x200046d8

08007008 <getGGA>:

_io void getGGA(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 800700e:	4b30      	ldr	r3, [pc, #192]	; (80070d0 <getGGA+0xc8>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8007014:	492f      	ldr	r1, [pc, #188]	; (80070d4 <getGGA+0xcc>)
 8007016:	4830      	ldr	r0, [pc, #192]	; (80070d8 <getGGA+0xd0>)
 8007018:	f00a faf9 	bl	801160e <strstr>
 800701c:	4603      	mov	r3, r0
 800701e:	4a2f      	ldr	r2, [pc, #188]	; (80070dc <getGGA+0xd4>)
 8007020:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <getGGA+0xd4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b47      	cmp	r3, #71	; 0x47
 800702a:	d14a      	bne.n	80070c2 <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <getGGA+0xd4>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <getGGA+0xc8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	7811      	ldrb	r1, [r2, #0]
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <getGGA+0xd8>)
 8007038:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 800703a:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <getGGA+0xc8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	4a23      	ldr	r2, [pc, #140]	; (80070d0 <getGGA+0xc8>)
 8007042:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <getGGA+0xd4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <getGGA+0xc8>)
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	441a      	add	r2, r3
 800704e:	4b23      	ldr	r3, [pc, #140]	; (80070dc <getGGA+0xd4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8007056:	4b21      	ldr	r3, [pc, #132]	; (80070dc <getGGA+0xd4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b0a      	cmp	r3, #10
 800705e:	d003      	beq.n	8007068 <getGGA+0x60>
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <getGGA+0xc8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b5a      	cmp	r3, #90	; 0x5a
 8007066:	dde1      	ble.n	800702c <getGGA+0x24>
                {
                    MsgIndex = 0;
 8007068:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <getGGA+0xc8>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800706e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007072:	2100      	movs	r1, #0
 8007074:	4818      	ldr	r0, [pc, #96]	; (80070d8 <getGGA+0xd0>)
 8007076:	f009 fba9 	bl	80107cc <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 800707a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800707e:	2100      	movs	r1, #0
 8007080:	4818      	ldr	r0, [pc, #96]	; (80070e4 <getGGA+0xdc>)
 8007082:	f009 fba3 	bl	80107cc <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8007086:	4816      	ldr	r0, [pc, #88]	; (80070e0 <getGGA+0xd8>)
 8007088:	f7f9 f8c2 	bl	8000210 <strlen>
 800708c:	4603      	mov	r3, r0
 800708e:	2b0a      	cmp	r3, #10
 8007090:	d912      	bls.n	80070b8 <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <getGGA+0xe0>)
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <getGGA+0xe4>)
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <getGGA+0xe8>)
 800709c:	9303      	str	r3, [sp, #12]
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <getGGA+0xec>)
 80070a0:	9302      	str	r3, [sp, #8]
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <getGGA+0xf0>)
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <getGGA+0xf4>)
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <getGGA+0xf8>)
 80070ac:	4a15      	ldr	r2, [pc, #84]	; (8007104 <getGGA+0xfc>)
 80070ae:	4916      	ldr	r1, [pc, #88]	; (8007108 <getGGA+0x100>)
 80070b0:	480b      	ldr	r0, [pc, #44]	; (80070e0 <getGGA+0xd8>)
 80070b2:	f00a fa33 	bl	801151c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80070b6:	e004      	b.n	80070c2 <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80070b8:	2264      	movs	r2, #100	; 0x64
 80070ba:	2100      	movs	r1, #0
 80070bc:	4813      	ldr	r0, [pc, #76]	; (800710c <getGGA+0x104>)
 80070be:	f009 fb85 	bl	80107cc <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80070c2:	4b13      	ldr	r3, [pc, #76]	; (8007110 <getGGA+0x108>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20003664 	.word	0x20003664
 80070d4:	0801797c 	.word	0x0801797c
 80070d8:	20003f04 	.word	0x20003f04
 80070dc:	20003668 	.word	0x20003668
 80070e0:	200036d0 	.word	0x200036d0
 80070e4:	20003734 	.word	0x20003734
 80070e8:	20004708 	.word	0x20004708
 80070ec:	20004704 	.word	0x20004704
 80070f0:	20004700 	.word	0x20004700
 80070f4:	200046fc 	.word	0x200046fc
 80070f8:	200046f8 	.word	0x200046f8
 80070fc:	200046f4 	.word	0x200046f4
 8007100:	200046f0 	.word	0x200046f0
 8007104:	200046ec 	.word	0x200046ec
 8007108:	08017984 	.word	0x08017984
 800710c:	2000366c 	.word	0x2000366c
 8007110:	2000365d 	.word	0x2000365d

08007114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800714c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007118:	480d      	ldr	r0, [pc, #52]	; (8007150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800711a:	490e      	ldr	r1, [pc, #56]	; (8007154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800711c:	4a0e      	ldr	r2, [pc, #56]	; (8007158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800711e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007120:	e002      	b.n	8007128 <LoopCopyDataInit>

08007122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007126:	3304      	adds	r3, #4

08007128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800712a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800712c:	d3f9      	bcc.n	8007122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800712e:	4a0b      	ldr	r2, [pc, #44]	; (800715c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007130:	4c0b      	ldr	r4, [pc, #44]	; (8007160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007134:	e001      	b.n	800713a <LoopFillZerobss>

08007136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007138:	3204      	adds	r2, #4

0800713a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800713a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800713c:	d3fb      	bcc.n	8007136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800713e:	f7ff fb55 	bl	80067ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007142:	f009 fb1f 	bl	8010784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007146:	f7fd f90b 	bl	8004360 <main>
  bx  lr    
 800714a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800714c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007154:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8007158:	080183d0 	.word	0x080183d0
  ldr r2, =_sbss
 800715c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8007160:	2000495c 	.word	0x2000495c

08007164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007164:	e7fe      	b.n	8007164 <ADC_IRQHandler>
	...

08007168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800716c:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <HAL_Init+0x40>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0d      	ldr	r2, [pc, #52]	; (80071a8 <HAL_Init+0x40>)
 8007172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_Init+0x40>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <HAL_Init+0x40>)
 800717e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <HAL_Init+0x40>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a07      	ldr	r2, [pc, #28]	; (80071a8 <HAL_Init+0x40>)
 800718a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007190:	2003      	movs	r0, #3
 8007192:	f000 fd83 	bl	8007c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007196:	200f      	movs	r0, #15
 8007198:	f000 f808 	bl	80071ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800719c:	f7fe fd86 	bl	8005cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40023c00 	.word	0x40023c00

080071ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071b4:	4b12      	ldr	r3, [pc, #72]	; (8007200 <HAL_InitTick+0x54>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	4b12      	ldr	r3, [pc, #72]	; (8007204 <HAL_InitTick+0x58>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	4619      	mov	r1, r3
 80071be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fda9 	bl	8007d22 <HAL_SYSTICK_Config>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e00e      	b.n	80071f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b0f      	cmp	r3, #15
 80071de:	d80a      	bhi.n	80071f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071e0:	2200      	movs	r2, #0
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	f000 fd63 	bl	8007cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071ec:	4a06      	ldr	r2, [pc, #24]	; (8007208 <HAL_InitTick+0x5c>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e000      	b.n	80071f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2000000c 	.word	0x2000000c
 8007204:	20000014 	.word	0x20000014
 8007208:	20000010 	.word	0x20000010

0800720c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_IncTick+0x20>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <HAL_IncTick+0x24>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4413      	add	r3, r2
 800721c:	4a04      	ldr	r2, [pc, #16]	; (8007230 <HAL_IncTick+0x24>)
 800721e:	6013      	str	r3, [r2, #0]
}
 8007220:	bf00      	nop
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000014 	.word	0x20000014
 8007230:	2000470c 	.word	0x2000470c

08007234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return uwTick;
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_GetTick+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
}
 800723c:	4618      	mov	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	2000470c 	.word	0x2000470c

0800724c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007254:	f7ff ffee 	bl	8007234 <HAL_GetTick>
 8007258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d005      	beq.n	8007272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <HAL_Delay+0x44>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007272:	bf00      	nop
 8007274:	f7ff ffde 	bl	8007234 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	429a      	cmp	r2, r3
 8007282:	d8f7      	bhi.n	8007274 <HAL_Delay+0x28>
  {
  }
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000014 	.word	0x20000014

08007294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e033      	b.n	8007312 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fe fd22 	bl	8005cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d118      	bne.n	8007304 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072da:	f023 0302 	bic.w	r3, r3, #2
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fae8 	bl	80078bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
 8007302:	e001      	b.n	8007308 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_ADC_Start+0x1a>
 8007332:	2302      	movs	r3, #2
 8007334:	e0b2      	b.n	800749c <HAL_ADC_Start+0x180>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d018      	beq.n	800737e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <HAL_ADC_Start+0x18c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a52      	ldr	r2, [pc, #328]	; (80074ac <HAL_ADC_Start+0x190>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	0c9a      	lsrs	r2, r3, #18
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007370:	e002      	b.n	8007378 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3b01      	subs	r3, #1
 8007376:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f9      	bne.n	8007372 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	d17a      	bne.n	8007482 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d106      	bne.n	80073da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	f023 0206 	bic.w	r2, r3, #6
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44
 80073d8:	e002      	b.n	80073e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073e8:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <HAL_ADC_Start+0x194>)
 80073ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80073f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d12a      	bne.n	8007458 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2b      	ldr	r2, [pc, #172]	; (80074b4 <HAL_ADC_Start+0x198>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d015      	beq.n	8007438 <HAL_ADC_Start+0x11c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a29      	ldr	r2, [pc, #164]	; (80074b8 <HAL_ADC_Start+0x19c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d105      	bne.n	8007422 <HAL_ADC_Start+0x106>
 8007416:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <HAL_ADC_Start+0x194>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_ADC_Start+0x1a0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d136      	bne.n	800749a <HAL_ADC_Start+0x17e>
 800742c:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <HAL_ADC_Start+0x194>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	d130      	bne.n	800749a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d129      	bne.n	800749a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007454:	609a      	str	r2, [r3, #8]
 8007456:	e020      	b.n	800749a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <HAL_ADC_Start+0x198>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d11b      	bne.n	800749a <HAL_ADC_Start+0x17e>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d114      	bne.n	800749a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	e00b      	b.n	800749a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f043 0210 	orr.w	r2, r3, #16
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	2000000c 	.word	0x2000000c
 80074ac:	431bde83 	.word	0x431bde83
 80074b0:	40012300 	.word	0x40012300
 80074b4:	40012000 	.word	0x40012000
 80074b8:	40012100 	.word	0x40012100
 80074bc:	40012200 	.word	0x40012200

080074c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_ADC_Stop+0x16>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e021      	b.n	800751a <HAL_ADC_Stop+0x5a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007542:	d113      	bne.n	800756c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d10b      	bne.n	800756c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e063      	b.n	8007634 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800756c:	f7ff fe62 	bl	8007234 <HAL_GetTick>
 8007570:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007572:	e021      	b.n	80075b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d01d      	beq.n	80075b8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_ADC_PollForConversion+0x6c>
 8007582:	f7ff fe57 	bl	8007234 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d212      	bcs.n	80075b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d00b      	beq.n	80075b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	f043 0204 	orr.w	r2, r3, #4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e03d      	b.n	8007634 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d1d6      	bne.n	8007574 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0212 	mvn.w	r2, #18
 80075ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d123      	bne.n	8007632 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11f      	bne.n	8007632 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d006      	beq.n	800760e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d111      	bne.n	8007632 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0201 	orr.w	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_ADC_ConfigChannel+0x1c>
 8007670:	2302      	movs	r3, #2
 8007672:	e113      	b.n	800789c <HAL_ADC_ConfigChannel+0x244>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b09      	cmp	r3, #9
 8007682:	d925      	bls.n	80076d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68d9      	ldr	r1, [r3, #12]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	3b1e      	subs	r3, #30
 800769a:	2207      	movs	r2, #7
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	43da      	mvns	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	400a      	ands	r2, r1
 80076a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68d9      	ldr	r1, [r3, #12]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4618      	mov	r0, r3
 80076bc:	4603      	mov	r3, r0
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	4403      	add	r3, r0
 80076c2:	3b1e      	subs	r3, #30
 80076c4:	409a      	lsls	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	60da      	str	r2, [r3, #12]
 80076ce:	e022      	b.n	8007716 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6919      	ldr	r1, [r3, #16]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	4613      	mov	r3, r2
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	4413      	add	r3, r2
 80076e4:	2207      	movs	r2, #7
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43da      	mvns	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	400a      	ands	r2, r1
 80076f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6919      	ldr	r1, [r3, #16]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	4618      	mov	r0, r3
 8007706:	4603      	mov	r3, r0
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4403      	add	r3, r0
 800770c:	409a      	lsls	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b06      	cmp	r3, #6
 800771c:	d824      	bhi.n	8007768 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	3b05      	subs	r3, #5
 8007730:	221f      	movs	r2, #31
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43da      	mvns	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	400a      	ands	r2, r1
 800773e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	4618      	mov	r0, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	3b05      	subs	r3, #5
 800775a:	fa00 f203 	lsl.w	r2, r0, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	635a      	str	r2, [r3, #52]	; 0x34
 8007766:	e04c      	b.n	8007802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d824      	bhi.n	80077ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	3b23      	subs	r3, #35	; 0x23
 8007782:	221f      	movs	r2, #31
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	43da      	mvns	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	400a      	ands	r2, r1
 8007790:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	4618      	mov	r0, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	3b23      	subs	r3, #35	; 0x23
 80077ac:	fa00 f203 	lsl.w	r2, r0, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
 80077b8:	e023      	b.n	8007802 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	3b41      	subs	r3, #65	; 0x41
 80077cc:	221f      	movs	r2, #31
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43da      	mvns	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	400a      	ands	r2, r1
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4618      	mov	r0, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	3b41      	subs	r3, #65	; 0x41
 80077f6:	fa00 f203 	lsl.w	r2, r0, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007802:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <HAL_ADC_ConfigChannel+0x250>)
 8007804:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a28      	ldr	r2, [pc, #160]	; (80078ac <HAL_ADC_ConfigChannel+0x254>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10f      	bne.n	8007830 <HAL_ADC_ConfigChannel+0x1d8>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b12      	cmp	r3, #18
 8007816:	d10b      	bne.n	8007830 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1d      	ldr	r2, [pc, #116]	; (80078ac <HAL_ADC_ConfigChannel+0x254>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d12b      	bne.n	8007892 <HAL_ADC_ConfigChannel+0x23a>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_ADC_ConfigChannel+0x258>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <HAL_ADC_ConfigChannel+0x1f4>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b11      	cmp	r3, #17
 800784a:	d122      	bne.n	8007892 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <HAL_ADC_ConfigChannel+0x258>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d111      	bne.n	8007892 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <HAL_ADC_ConfigChannel+0x25c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a11      	ldr	r2, [pc, #68]	; (80078b8 <HAL_ADC_ConfigChannel+0x260>)
 8007874:	fba2 2303 	umull	r2, r3, r2, r3
 8007878:	0c9a      	lsrs	r2, r3, #18
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007884:	e002      	b.n	800788c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3b01      	subs	r3, #1
 800788a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f9      	bne.n	8007886 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40012300 	.word	0x40012300
 80078ac:	40012000 	.word	0x40012000
 80078b0:	10000012 	.word	0x10000012
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	431bde83 	.word	0x431bde83

080078bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078c4:	4b79      	ldr	r3, [pc, #484]	; (8007aac <ADC_Init+0x1f0>)
 80078c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	431a      	orrs	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6859      	ldr	r1, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	021a      	lsls	r2, r3, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6859      	ldr	r1, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6899      	ldr	r1, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	4a58      	ldr	r2, [pc, #352]	; (8007ab0 <ADC_Init+0x1f4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d022      	beq.n	800799a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6899      	ldr	r1, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	e00f      	b.n	80079ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80079b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0202 	bic.w	r2, r2, #2
 80079c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	005a      	lsls	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01b      	beq.n	8007a20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6859      	ldr	r1, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	3b01      	subs	r3, #1
 8007a14:	035a      	lsls	r2, r3, #13
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	e007      	b.n	8007a30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	051a      	lsls	r2, r3, #20
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6899      	ldr	r1, [r3, #8]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a72:	025a      	lsls	r2, r3, #9
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	029a      	lsls	r2, r3, #10
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40012300 	.word	0x40012300
 8007ab0:	0f000001 	.word	0x0f000001

08007ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ae6:	4a04      	ldr	r2, [pc, #16]	; (8007af8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	60d3      	str	r3, [r2, #12]
}
 8007aec:	bf00      	nop
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	e000ed00 	.word	0xe000ed00

08007afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <__NVIC_GetPriorityGrouping+0x18>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	0a1b      	lsrs	r3, r3, #8
 8007b06:	f003 0307 	and.w	r3, r3, #7
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	e000ed00 	.word	0xe000ed00

08007b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	db0b      	blt.n	8007b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	f003 021f 	and.w	r2, r3, #31
 8007b30:	4907      	ldr	r1, [pc, #28]	; (8007b50 <__NVIC_EnableIRQ+0x38>)
 8007b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	2001      	movs	r0, #1
 8007b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e100 	.word	0xe000e100

08007b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	db12      	blt.n	8007b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	f003 021f 	and.w	r2, r3, #31
 8007b6c:	490a      	ldr	r1, [pc, #40]	; (8007b98 <__NVIC_DisableIRQ+0x44>)
 8007b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	2001      	movs	r0, #1
 8007b76:	fa00 f202 	lsl.w	r2, r0, r2
 8007b7a:	3320      	adds	r3, #32
 8007b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007b80:	f3bf 8f4f 	dsb	sy
}
 8007b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b86:	f3bf 8f6f 	isb	sy
}
 8007b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	e000e100 	.word	0xe000e100

08007b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db0a      	blt.n	8007bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	490c      	ldr	r1, [pc, #48]	; (8007be8 <__NVIC_SetPriority+0x4c>)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	0112      	lsls	r2, r2, #4
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bc4:	e00a      	b.n	8007bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4908      	ldr	r1, [pc, #32]	; (8007bec <__NVIC_SetPriority+0x50>)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	0112      	lsls	r2, r2, #4
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	440b      	add	r3, r1
 8007bda:	761a      	strb	r2, [r3, #24]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	e000e100 	.word	0xe000e100
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f1c3 0307 	rsb	r3, r3, #7
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	bf28      	it	cs
 8007c0e:	2304      	movcs	r3, #4
 8007c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3304      	adds	r3, #4
 8007c16:	2b06      	cmp	r3, #6
 8007c18:	d902      	bls.n	8007c20 <NVIC_EncodePriority+0x30>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3b03      	subs	r3, #3
 8007c1e:	e000      	b.n	8007c22 <NVIC_EncodePriority+0x32>
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c24:	f04f 32ff 	mov.w	r2, #4294967295
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43da      	mvns	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	401a      	ands	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c38:	f04f 31ff 	mov.w	r1, #4294967295
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	43d9      	mvns	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c48:	4313      	orrs	r3, r2
         );
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3724      	adds	r7, #36	; 0x24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c68:	d301      	bcc.n	8007c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e00f      	b.n	8007c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c6e:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <SysTick_Config+0x40>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c76:	210f      	movs	r1, #15
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	f7ff ff8e 	bl	8007b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <SysTick_Config+0x40>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c86:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <SysTick_Config+0x40>)
 8007c88:	2207      	movs	r2, #7
 8007c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	e000e010 	.word	0xe000e010

08007c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff ff05 	bl	8007ab4 <__NVIC_SetPriorityGrouping>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4603      	mov	r3, r0
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cc4:	f7ff ff1a 	bl	8007afc <__NVIC_GetPriorityGrouping>
 8007cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	6978      	ldr	r0, [r7, #20]
 8007cd0:	f7ff ff8e 	bl	8007bf0 <NVIC_EncodePriority>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff ff5d 	bl	8007b9c <__NVIC_SetPriority>
}
 8007ce2:	bf00      	nop
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff ff0d 	bl	8007b18 <__NVIC_EnableIRQ>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff ff1d 	bl	8007b54 <__NVIC_DisableIRQ>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ff94 	bl	8007c58 <SysTick_Config>
 8007d30:	4603      	mov	r3, r0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d48:	f7ff fa74 	bl	8007234 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e099      	b.n	8007e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d78:	e00f      	b.n	8007d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d7a:	f7ff fa5b 	bl	8007234 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b05      	cmp	r3, #5
 8007d86:	d908      	bls.n	8007d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e078      	b.n	8007e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e8      	bne.n	8007d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4b38      	ldr	r3, [pc, #224]	; (8007e94 <HAL_DMA_Init+0x158>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d107      	bne.n	8007e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d117      	bne.n	8007e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00e      	beq.n	8007e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fb6d 	bl	8008520 <DMA_CheckFifoParam>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e016      	b.n	8007e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fb24 	bl	80084b4 <DMA_CalcBaseAndBitshift>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e74:	223f      	movs	r2, #63	; 0x3f
 8007e76:	409a      	lsls	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	f010803f 	.word	0xf010803f

08007e98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e050      	b.n	8007f4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d101      	bne.n	8007eba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e048      	b.n	8007f4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2221      	movs	r2, #33	; 0x21
 8007ef8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fada 	bl	80084b4 <DMA_CalcBaseAndBitshift>
 8007f00:	4603      	mov	r3, r0
 8007f02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2c:	223f      	movs	r2, #63	; 0x3f
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_DMA_Start_IT+0x26>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e040      	b.n	8007ffc <HAL_DMA_Start_IT+0xa8>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d12f      	bne.n	8007fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fa58 	bl	8008458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fac:	223f      	movs	r2, #63	; 0x3f
 8007fae:	409a      	lsls	r2, r3
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0216 	orr.w	r2, r2, #22
 8007fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0208 	orr.w	r2, r2, #8
 8007fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	e005      	b.n	8007ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008012:	f7ff f90f 	bl	8007234 <HAL_GetTick>
 8008016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d008      	beq.n	8008036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e052      	b.n	80080dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0216 	bic.w	r2, r2, #22
 8008044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <HAL_DMA_Abort+0x62>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0208 	bic.w	r2, r2, #8
 8008074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0201 	bic.w	r2, r2, #1
 8008084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008086:	e013      	b.n	80080b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008088:	f7ff f8d4 	bl	8007234 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b05      	cmp	r3, #5
 8008094:	d90c      	bls.n	80080b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2203      	movs	r2, #3
 80080a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e015      	b.n	80080dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e4      	bne.n	8008088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c2:	223f      	movs	r2, #63	; 0x3f
 80080c4:	409a      	lsls	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d004      	beq.n	8008102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2280      	movs	r2, #128	; 0x80
 80080fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e00c      	b.n	800811c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2205      	movs	r2, #5
 8008106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008134:	4b8e      	ldr	r3, [pc, #568]	; (8008370 <HAL_DMA_IRQHandler+0x248>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a8e      	ldr	r2, [pc, #568]	; (8008374 <HAL_DMA_IRQHandler+0x24c>)
 800813a:	fba2 2303 	umull	r2, r3, r2, r3
 800813e:	0a9b      	lsrs	r3, r3, #10
 8008140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008152:	2208      	movs	r2, #8
 8008154:	409a      	lsls	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d013      	beq.n	8008194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	2208      	movs	r2, #8
 8008182:	409a      	lsls	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4013      	ands	r3, r2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d012      	beq.n	80081ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b6:	2201      	movs	r2, #1
 80081b8:	409a      	lsls	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	f043 0202 	orr.w	r2, r3, #2
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ce:	2204      	movs	r2, #4
 80081d0:	409a      	lsls	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d012      	beq.n	8008200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ec:	2204      	movs	r2, #4
 80081ee:	409a      	lsls	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f8:	f043 0204 	orr.w	r2, r3, #4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	2210      	movs	r2, #16
 8008206:	409a      	lsls	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d043      	beq.n	8008298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d03c      	beq.n	8008298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008222:	2210      	movs	r2, #16
 8008224:	409a      	lsls	r2, r3
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d018      	beq.n	800826a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d108      	bne.n	8008258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d024      	beq.n	8008298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
 8008256:	e01f      	b.n	8008298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01b      	beq.n	8008298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
 8008268:	e016      	b.n	8008298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d107      	bne.n	8008288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0208 	bic.w	r2, r2, #8
 8008286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829c:	2220      	movs	r2, #32
 800829e:	409a      	lsls	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4013      	ands	r3, r2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 808f 	beq.w	80083c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8087 	beq.w	80083c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082be:	2220      	movs	r2, #32
 80082c0:	409a      	lsls	r2, r3
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d136      	bne.n	8008340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0216 	bic.w	r2, r2, #22
 80082e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695a      	ldr	r2, [r3, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <HAL_DMA_IRQHandler+0x1da>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0208 	bic.w	r2, r2, #8
 8008310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	223f      	movs	r2, #63	; 0x3f
 8008318:	409a      	lsls	r2, r3
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	2b00      	cmp	r3, #0
 8008334:	d07e      	beq.n	8008434 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
        }
        return;
 800833e:	e079      	b.n	8008434 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01d      	beq.n	800838a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008360:	2b00      	cmp	r3, #0
 8008362:	d031      	beq.n	80083c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
 800836c:	e02c      	b.n	80083c8 <HAL_DMA_IRQHandler+0x2a0>
 800836e:	bf00      	nop
 8008370:	2000000c 	.word	0x2000000c
 8008374:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d023      	beq.n	80083c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
 8008388:	e01e      	b.n	80083c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10f      	bne.n	80083b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0210 	bic.w	r2, r2, #16
 80083a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d032      	beq.n	8008436 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d022      	beq.n	8008422 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2205      	movs	r2, #5
 80083e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0201 	bic.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d307      	bcc.n	8008410 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f2      	bne.n	80083f4 <HAL_DMA_IRQHandler+0x2cc>
 800840e:	e000      	b.n	8008412 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008410:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
 8008432:	e000      	b.n	8008436 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008434:	bf00      	nop
    }
  }
}
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800844a:	b2db      	uxtb	r3, r3
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d108      	bne.n	8008498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008496:	e007      	b.n	80084a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	60da      	str	r2, [r3, #12]
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	3b10      	subs	r3, #16
 80084c4:	4a14      	ldr	r2, [pc, #80]	; (8008518 <DMA_CalcBaseAndBitshift+0x64>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	091b      	lsrs	r3, r3, #4
 80084cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80084ce:	4a13      	ldr	r2, [pc, #76]	; (800851c <DMA_CalcBaseAndBitshift+0x68>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d909      	bls.n	80084f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80084ea:	f023 0303 	bic.w	r3, r3, #3
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	659a      	str	r2, [r3, #88]	; 0x58
 80084f4:	e007      	b.n	8008506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	aaaaaaab 	.word	0xaaaaaaab
 800851c:	08017a18 	.word	0x08017a18

08008520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d11f      	bne.n	800857a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d856      	bhi.n	80085ee <DMA_CheckFifoParam+0xce>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <DMA_CheckFifoParam+0x28>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008559 	.word	0x08008559
 800854c:	0800856b 	.word	0x0800856b
 8008550:	08008559 	.word	0x08008559
 8008554:	080085ef 	.word	0x080085ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d046      	beq.n	80085f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008568:	e043      	b.n	80085f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008572:	d140      	bne.n	80085f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008578:	e03d      	b.n	80085f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008582:	d121      	bne.n	80085c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d837      	bhi.n	80085fa <DMA_CheckFifoParam+0xda>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <DMA_CheckFifoParam+0x70>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085a7 	.word	0x080085a7
 8008598:	080085a1 	.word	0x080085a1
 800859c:	080085b9 	.word	0x080085b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	e030      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d025      	beq.n	80085fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b6:	e022      	b.n	80085fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085c0:	d11f      	bne.n	8008602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80085c6:	e01c      	b.n	8008602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d903      	bls.n	80085d6 <DMA_CheckFifoParam+0xb6>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d003      	beq.n	80085dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80085d4:	e018      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	73fb      	strb	r3, [r7, #15]
      break;
 80085da:	e015      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00e      	beq.n	8008606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
      break;
 80085ec:	e00b      	b.n	8008606 <DMA_CheckFifoParam+0xe6>
      break;
 80085ee:	bf00      	nop
 80085f0:	e00a      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;
 80085f2:	bf00      	nop
 80085f4:	e008      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;
 80085f6:	bf00      	nop
 80085f8:	e006      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;
 80085fa:	bf00      	nop
 80085fc:	e004      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;   
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <DMA_CheckFifoParam+0xe8>
      break;
 8008606:	bf00      	nop
    }
  } 
  
  return status; 
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop

08008618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008618:	b480      	push	{r7}
 800861a:	b089      	sub	sp, #36	; 0x24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008622:	2300      	movs	r3, #0
 8008624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800862a:	2300      	movs	r3, #0
 800862c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	e165      	b.n	8008900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008634:	2201      	movs	r2, #1
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4013      	ands	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	429a      	cmp	r2, r3
 800864e:	f040 8154 	bne.w	80088fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d005      	beq.n	800866a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008666:	2b02      	cmp	r3, #2
 8008668:	d130      	bne.n	80086cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	2203      	movs	r2, #3
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4013      	ands	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4313      	orrs	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086a0:	2201      	movs	r2, #1
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	43db      	mvns	r3, r3
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4013      	ands	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	f003 0201 	and.w	r2, r3, #1
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d017      	beq.n	8008708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	2203      	movs	r2, #3
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	4013      	ands	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4313      	orrs	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f003 0303 	and.w	r3, r3, #3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d123      	bne.n	800875c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	08da      	lsrs	r2, r3, #3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3208      	adds	r2, #8
 800871c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	220f      	movs	r2, #15
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	43db      	mvns	r3, r3
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	4013      	ands	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4313      	orrs	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	08da      	lsrs	r2, r3, #3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3208      	adds	r2, #8
 8008756:	69b9      	ldr	r1, [r7, #24]
 8008758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	2203      	movs	r2, #3
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	43db      	mvns	r3, r3
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	4013      	ands	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f003 0203 	and.w	r2, r3, #3
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	fa02 f303 	lsl.w	r3, r2, r3
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	4313      	orrs	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80ae 	beq.w	80088fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	4b5d      	ldr	r3, [pc, #372]	; (8008918 <HAL_GPIO_Init+0x300>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	4a5c      	ldr	r2, [pc, #368]	; (8008918 <HAL_GPIO_Init+0x300>)
 80087a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087ac:	6453      	str	r3, [r2, #68]	; 0x44
 80087ae:	4b5a      	ldr	r3, [pc, #360]	; (8008918 <HAL_GPIO_Init+0x300>)
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087ba:	4a58      	ldr	r2, [pc, #352]	; (800891c <HAL_GPIO_Init+0x304>)
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	089b      	lsrs	r3, r3, #2
 80087c0:	3302      	adds	r3, #2
 80087c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	220f      	movs	r2, #15
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	43db      	mvns	r3, r3
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4013      	ands	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a4f      	ldr	r2, [pc, #316]	; (8008920 <HAL_GPIO_Init+0x308>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d025      	beq.n	8008832 <HAL_GPIO_Init+0x21a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a4e      	ldr	r2, [pc, #312]	; (8008924 <HAL_GPIO_Init+0x30c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01f      	beq.n	800882e <HAL_GPIO_Init+0x216>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a4d      	ldr	r2, [pc, #308]	; (8008928 <HAL_GPIO_Init+0x310>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d019      	beq.n	800882a <HAL_GPIO_Init+0x212>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a4c      	ldr	r2, [pc, #304]	; (800892c <HAL_GPIO_Init+0x314>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <HAL_GPIO_Init+0x20e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a4b      	ldr	r2, [pc, #300]	; (8008930 <HAL_GPIO_Init+0x318>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00d      	beq.n	8008822 <HAL_GPIO_Init+0x20a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a4a      	ldr	r2, [pc, #296]	; (8008934 <HAL_GPIO_Init+0x31c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d007      	beq.n	800881e <HAL_GPIO_Init+0x206>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a49      	ldr	r2, [pc, #292]	; (8008938 <HAL_GPIO_Init+0x320>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d101      	bne.n	800881a <HAL_GPIO_Init+0x202>
 8008816:	2306      	movs	r3, #6
 8008818:	e00c      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 800881a:	2307      	movs	r3, #7
 800881c:	e00a      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 800881e:	2305      	movs	r3, #5
 8008820:	e008      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 8008822:	2304      	movs	r3, #4
 8008824:	e006      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 8008826:	2303      	movs	r3, #3
 8008828:	e004      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 800882a:	2302      	movs	r3, #2
 800882c:	e002      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <HAL_GPIO_Init+0x21c>
 8008832:	2300      	movs	r3, #0
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	f002 0203 	and.w	r2, r2, #3
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	4093      	lsls	r3, r2
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	4313      	orrs	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008844:	4935      	ldr	r1, [pc, #212]	; (800891c <HAL_GPIO_Init+0x304>)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	089b      	lsrs	r3, r3, #2
 800884a:	3302      	adds	r3, #2
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008852:	4b3a      	ldr	r3, [pc, #232]	; (800893c <HAL_GPIO_Init+0x324>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	43db      	mvns	r3, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	4013      	ands	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008876:	4a31      	ldr	r2, [pc, #196]	; (800893c <HAL_GPIO_Init+0x324>)
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800887c:	4b2f      	ldr	r3, [pc, #188]	; (800893c <HAL_GPIO_Init+0x324>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	43db      	mvns	r3, r3
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	4013      	ands	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4313      	orrs	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80088a0:	4a26      	ldr	r2, [pc, #152]	; (800893c <HAL_GPIO_Init+0x324>)
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80088a6:	4b25      	ldr	r3, [pc, #148]	; (800893c <HAL_GPIO_Init+0x324>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	43db      	mvns	r3, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	4013      	ands	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088ca:	4a1c      	ldr	r2, [pc, #112]	; (800893c <HAL_GPIO_Init+0x324>)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088d0:	4b1a      	ldr	r3, [pc, #104]	; (800893c <HAL_GPIO_Init+0x324>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	43db      	mvns	r3, r3
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	4013      	ands	r3, r2
 80088de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088f4:	4a11      	ldr	r2, [pc, #68]	; (800893c <HAL_GPIO_Init+0x324>)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b0f      	cmp	r3, #15
 8008904:	f67f ae96 	bls.w	8008634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	3724      	adds	r7, #36	; 0x24
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	40013800 	.word	0x40013800
 8008920:	40020000 	.word	0x40020000
 8008924:	40020400 	.word	0x40020400
 8008928:	40020800 	.word	0x40020800
 800892c:	40020c00 	.word	0x40020c00
 8008930:	40021000 	.word	0x40021000
 8008934:	40021400 	.word	0x40021400
 8008938:	40021800 	.word	0x40021800
 800893c:	40013c00 	.word	0x40013c00

08008940 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	e0c7      	b.n	8008aec <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800895c:	2201      	movs	r2, #1
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	4013      	ands	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	f040 80b7 	bne.w	8008ae6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008978:	4a62      	ldr	r2, [pc, #392]	; (8008b04 <HAL_GPIO_DeInit+0x1c4>)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	089b      	lsrs	r3, r3, #2
 800897e:	3302      	adds	r3, #2
 8008980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008984:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	220f      	movs	r2, #15
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	4013      	ands	r3, r2
 8008998:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a5a      	ldr	r2, [pc, #360]	; (8008b08 <HAL_GPIO_DeInit+0x1c8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d025      	beq.n	80089ee <HAL_GPIO_DeInit+0xae>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a59      	ldr	r2, [pc, #356]	; (8008b0c <HAL_GPIO_DeInit+0x1cc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d01f      	beq.n	80089ea <HAL_GPIO_DeInit+0xaa>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a58      	ldr	r2, [pc, #352]	; (8008b10 <HAL_GPIO_DeInit+0x1d0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d019      	beq.n	80089e6 <HAL_GPIO_DeInit+0xa6>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a57      	ldr	r2, [pc, #348]	; (8008b14 <HAL_GPIO_DeInit+0x1d4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <HAL_GPIO_DeInit+0xa2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a56      	ldr	r2, [pc, #344]	; (8008b18 <HAL_GPIO_DeInit+0x1d8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00d      	beq.n	80089de <HAL_GPIO_DeInit+0x9e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a55      	ldr	r2, [pc, #340]	; (8008b1c <HAL_GPIO_DeInit+0x1dc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d007      	beq.n	80089da <HAL_GPIO_DeInit+0x9a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a54      	ldr	r2, [pc, #336]	; (8008b20 <HAL_GPIO_DeInit+0x1e0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d101      	bne.n	80089d6 <HAL_GPIO_DeInit+0x96>
 80089d2:	2306      	movs	r3, #6
 80089d4:	e00c      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089d6:	2307      	movs	r3, #7
 80089d8:	e00a      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089da:	2305      	movs	r3, #5
 80089dc:	e008      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089de:	2304      	movs	r3, #4
 80089e0:	e006      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089e2:	2303      	movs	r3, #3
 80089e4:	e004      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089e6:	2302      	movs	r3, #2
 80089e8:	e002      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_GPIO_DeInit+0xb0>
 80089ee:	2300      	movs	r3, #0
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	f002 0203 	and.w	r2, r2, #3
 80089f6:	0092      	lsls	r2, r2, #2
 80089f8:	4093      	lsls	r3, r2
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d132      	bne.n	8008a66 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008a00:	4b48      	ldr	r3, [pc, #288]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	43db      	mvns	r3, r3
 8008a08:	4946      	ldr	r1, [pc, #280]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008a0e:	4b45      	ldr	r3, [pc, #276]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	4943      	ldr	r1, [pc, #268]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008a1c:	4b41      	ldr	r3, [pc, #260]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	43db      	mvns	r3, r3
 8008a24:	493f      	ldr	r1, [pc, #252]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008a2a:	4b3e      	ldr	r3, [pc, #248]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	493c      	ldr	r1, [pc, #240]	; (8008b24 <HAL_GPIO_DeInit+0x1e4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	220f      	movs	r2, #15
 8008a42:	fa02 f303 	lsl.w	r3, r2, r3
 8008a46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008a48:	4a2e      	ldr	r2, [pc, #184]	; (8008b04 <HAL_GPIO_DeInit+0x1c4>)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	089b      	lsrs	r3, r3, #2
 8008a4e:	3302      	adds	r3, #2
 8008a50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	43da      	mvns	r2, r3
 8008a58:	482a      	ldr	r0, [pc, #168]	; (8008b04 <HAL_GPIO_DeInit+0x1c4>)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	089b      	lsrs	r3, r3, #2
 8008a5e:	400a      	ands	r2, r1
 8008a60:	3302      	adds	r3, #2
 8008a62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	2103      	movs	r1, #3
 8008a70:	fa01 f303 	lsl.w	r3, r1, r3
 8008a74:	43db      	mvns	r3, r3
 8008a76:	401a      	ands	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	08da      	lsrs	r2, r3, #3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3208      	adds	r2, #8
 8008a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	220f      	movs	r2, #15
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	08d2      	lsrs	r2, r2, #3
 8008a9c:	4019      	ands	r1, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3208      	adds	r2, #8
 8008aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	2103      	movs	r1, #3
 8008ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	401a      	ands	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac8:	43db      	mvns	r3, r3
 8008aca:	401a      	ands	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	2103      	movs	r1, #3
 8008ada:	fa01 f303 	lsl.w	r3, r1, r3
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	401a      	ands	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	f67f af34 	bls.w	800895c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	40013800 	.word	0x40013800
 8008b08:	40020000 	.word	0x40020000
 8008b0c:	40020400 	.word	0x40020400
 8008b10:	40020800 	.word	0x40020800
 8008b14:	40020c00 	.word	0x40020c00
 8008b18:	40021000 	.word	0x40021000
 8008b1c:	40021400 	.word	0x40021400
 8008b20:	40021800 	.word	0x40021800
 8008b24:	40013c00 	.word	0x40013c00

08008b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	807b      	strh	r3, [r7, #2]
 8008b34:	4613      	mov	r3, r2
 8008b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b38:	787b      	ldrb	r3, [r7, #1]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b3e:	887a      	ldrh	r2, [r7, #2]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b44:	e003      	b.n	8008b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b46:	887b      	ldrh	r3, [r7, #2]
 8008b48:	041a      	lsls	r2, r3, #16
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	619a      	str	r2, [r3, #24]
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b6c:	887a      	ldrh	r2, [r7, #2]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4013      	ands	r3, r2
 8008b72:	041a      	lsls	r2, r3, #16
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	43d9      	mvns	r1, r3
 8008b78:	887b      	ldrh	r3, [r7, #2]
 8008b7a:	400b      	ands	r3, r1
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	619a      	str	r2, [r3, #24]
}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008b9a:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d006      	beq.n	8008bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ba6:	4a05      	ldr	r2, [pc, #20]	; (8008bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bac:	88fb      	ldrh	r3, [r7, #6]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fc fb4a 	bl	8005248 <HAL_GPIO_EXTI_Callback>
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40013c00 	.word	0x40013c00

08008bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e12b      	b.n	8008e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fd f8cc 	bl	8005d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2224      	movs	r2, #36	; 0x24
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0201 	bic.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c24:	f001 f938 	bl	8009e98 <HAL_RCC_GetPCLK1Freq>
 8008c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4a81      	ldr	r2, [pc, #516]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d807      	bhi.n	8008c44 <HAL_I2C_Init+0x84>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4a80      	ldr	r2, [pc, #512]	; (8008e38 <HAL_I2C_Init+0x278>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bf94      	ite	ls
 8008c3c:	2301      	movls	r3, #1
 8008c3e:	2300      	movhi	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e006      	b.n	8008c52 <HAL_I2C_Init+0x92>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a7d      	ldr	r2, [pc, #500]	; (8008e3c <HAL_I2C_Init+0x27c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bf94      	ite	ls
 8008c4c:	2301      	movls	r3, #1
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e0e7      	b.n	8008e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a78      	ldr	r2, [pc, #480]	; (8008e40 <HAL_I2C_Init+0x280>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	0c9b      	lsrs	r3, r3, #18
 8008c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a6a      	ldr	r2, [pc, #424]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d802      	bhi.n	8008c94 <HAL_I2C_Init+0xd4>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	e009      	b.n	8008ca8 <HAL_I2C_Init+0xe8>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	4a69      	ldr	r2, [pc, #420]	; (8008e44 <HAL_I2C_Init+0x284>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	099b      	lsrs	r3, r3, #6
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	430b      	orrs	r3, r1
 8008cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	495c      	ldr	r1, [pc, #368]	; (8008e34 <HAL_I2C_Init+0x274>)
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	d819      	bhi.n	8008cfc <HAL_I2C_Init+0x13c>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1e59      	subs	r1, r3, #1
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cd6:	1c59      	adds	r1, r3, #1
 8008cd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008cdc:	400b      	ands	r3, r1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <HAL_I2C_Init+0x138>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1e59      	subs	r1, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf6:	e051      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	e04f      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d111      	bne.n	8008d28 <HAL_I2C_Init+0x168>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	1e58      	subs	r0, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6859      	ldr	r1, [r3, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	440b      	add	r3, r1
 8008d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d16:	3301      	adds	r3, #1
 8008d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e012      	b.n	8008d4e <HAL_I2C_Init+0x18e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	1e58      	subs	r0, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6859      	ldr	r1, [r3, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	0099      	lsls	r1, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d3e:	3301      	adds	r3, #1
 8008d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_I2C_Init+0x196>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e022      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10e      	bne.n	8008d7c <HAL_I2C_Init+0x1bc>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1e58      	subs	r0, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	440b      	add	r3, r1
 8008d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d70:	3301      	adds	r3, #1
 8008d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7a:	e00f      	b.n	8008d9c <HAL_I2C_Init+0x1dc>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1e58      	subs	r0, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6859      	ldr	r1, [r3, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	0099      	lsls	r1, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d92:	3301      	adds	r3, #1
 8008d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	6809      	ldr	r1, [r1, #0]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6911      	ldr	r1, [r2, #16]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68d2      	ldr	r2, [r2, #12]
 8008dd6:	4311      	orrs	r1, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695a      	ldr	r2, [r3, #20]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	000186a0 	.word	0x000186a0
 8008e38:	001e847f 	.word	0x001e847f
 8008e3c:	003d08ff 	.word	0x003d08ff
 8008e40:	431bde83 	.word	0x431bde83
 8008e44:	10624dd3 	.word	0x10624dd3

08008e48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e021      	b.n	8008e9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2224      	movs	r2, #36	; 0x24
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fd f826 	bl	8005ec4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	817b      	strh	r3, [r7, #10]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	813b      	strh	r3, [r7, #8]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ec2:	f7fe f9b7 	bl	8007234 <HAL_GetTick>
 8008ec6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	f040 80d9 	bne.w	8009088 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	2319      	movs	r3, #25
 8008edc:	2201      	movs	r2, #1
 8008ede:	496d      	ldr	r1, [pc, #436]	; (8009094 <HAL_I2C_Mem_Write+0x1ec>)
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fc7f 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008eec:	2302      	movs	r3, #2
 8008eee:	e0cc      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_I2C_Mem_Write+0x56>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e0c5      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d007      	beq.n	8008f24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0201 	orr.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2221      	movs	r2, #33	; 0x21
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2240      	movs	r2, #64	; 0x40
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a3a      	ldr	r2, [r7, #32]
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a4d      	ldr	r2, [pc, #308]	; (8009098 <HAL_I2C_Mem_Write+0x1f0>)
 8008f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f66:	88f8      	ldrh	r0, [r7, #6]
 8008f68:	893a      	ldrh	r2, [r7, #8]
 8008f6a:	8979      	ldrh	r1, [r7, #10]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	4603      	mov	r3, r0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fab6 	bl	80094e8 <I2C_RequestMemoryWrite>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d052      	beq.n	8009028 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e081      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 fd00 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00d      	beq.n	8008fb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d107      	bne.n	8008fae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e06b      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d11b      	bne.n	8009028 <HAL_I2C_Mem_Write+0x180>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d017      	beq.n	8009028 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1aa      	bne.n	8008f86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fcec 	bl	8009a12 <I2C_WaitOnBTFFlagUntilTimeout>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00d      	beq.n	800905c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	2b04      	cmp	r3, #4
 8009046:	d107      	bne.n	8009058 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009056:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e016      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800906a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e000      	b.n	800908a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009088:	2302      	movs	r3, #2
  }
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	00100002 	.word	0x00100002
 8009098:	ffff0000 	.word	0xffff0000

0800909c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08c      	sub	sp, #48	; 0x30
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	817b      	strh	r3, [r7, #10]
 80090ae:	460b      	mov	r3, r1
 80090b0:	813b      	strh	r3, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090b6:	f7fe f8bd 	bl	8007234 <HAL_GetTick>
 80090ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	f040 8208 	bne.w	80094da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	2319      	movs	r3, #25
 80090d0:	2201      	movs	r2, #1
 80090d2:	497b      	ldr	r1, [pc, #492]	; (80092c0 <HAL_I2C_Mem_Read+0x224>)
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fb85 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80090e0:	2302      	movs	r3, #2
 80090e2:	e1fb      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_I2C_Mem_Read+0x56>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e1f4      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b01      	cmp	r3, #1
 8009106:	d007      	beq.n	8009118 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2222      	movs	r2, #34	; 0x22
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2240      	movs	r2, #64	; 0x40
 8009134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a5b      	ldr	r2, [pc, #364]	; (80092c4 <HAL_I2C_Mem_Read+0x228>)
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800915a:	88f8      	ldrh	r0, [r7, #6]
 800915c:	893a      	ldrh	r2, [r7, #8]
 800915e:	8979      	ldrh	r1, [r7, #10]
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4603      	mov	r3, r0
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 fa52 	bl	8009614 <I2C_RequestMemoryRead>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e1b0      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d113      	bne.n	80091aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009182:	2300      	movs	r3, #0
 8009184:	623b      	str	r3, [r7, #32]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	623b      	str	r3, [r7, #32]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	623b      	str	r3, [r7, #32]
 8009196:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	e184      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d11b      	bne.n	80091ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e164      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d11b      	bne.n	800922a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009200:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009212:	2300      	movs	r3, #0
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	e144      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009240:	e138      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009246:	2b03      	cmp	r3, #3
 8009248:	f200 80f1 	bhi.w	800942e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009250:	2b01      	cmp	r3, #1
 8009252:	d123      	bne.n	800929c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 fc1b 	bl	8009a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e139      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800929a:	e10b      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d14e      	bne.n	8009342 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	2200      	movs	r2, #0
 80092ac:	4906      	ldr	r1, [pc, #24]	; (80092c8 <HAL_I2C_Mem_Read+0x22c>)
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fa98 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d008      	beq.n	80092cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e10e      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
 80092be:	bf00      	nop
 80092c0:	00100002 	.word	0x00100002
 80092c4:	ffff0000 	.word	0xffff0000
 80092c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691a      	ldr	r2, [r3, #16]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	b2d2      	uxtb	r2, r2
 800931a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009340:	e0b8      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	2200      	movs	r2, #0
 800934a:	4966      	ldr	r1, [pc, #408]	; (80094e4 <HAL_I2C_Mem_Read+0x448>)
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fa49 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e0bf      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2200      	movs	r2, #0
 80093a6:	494f      	ldr	r1, [pc, #316]	; (80094e4 <HAL_I2C_Mem_Read+0x448>)
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fa1b 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e091      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691a      	ldr	r2, [r3, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009416:	3b01      	subs	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009422:	b29b      	uxth	r3, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800942c:	e042      	b.n	80094b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800942e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fb2e 	bl	8009a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e04c      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f003 0304 	and.w	r3, r3, #4
 800947e:	2b04      	cmp	r3, #4
 8009480:	d118      	bne.n	80094b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f47f aec2 	bne.w	8009242 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3728      	adds	r7, #40	; 0x28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	00010004 	.word	0x00010004

080094e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af02      	add	r7, sp, #8
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	817b      	strh	r3, [r7, #10]
 80094fa:	460b      	mov	r3, r1
 80094fc:	813b      	strh	r3, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	2200      	movs	r2, #0
 800951a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 f960 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00d      	beq.n	8009546 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009538:	d103      	bne.n	8009542 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e05f      	b.n	8009606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009546:	897b      	ldrh	r3, [r7, #10]
 8009548:	b2db      	uxtb	r3, r3
 800954a:	461a      	mov	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	492d      	ldr	r1, [pc, #180]	; (8009610 <I2C_RequestMemoryWrite+0x128>)
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 f998 	bl	8009892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e04c      	b.n	8009606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800956c:	2300      	movs	r3, #0
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009584:	6a39      	ldr	r1, [r7, #32]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fa02 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00d      	beq.n	80095ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	2b04      	cmp	r3, #4
 8009598:	d107      	bne.n	80095aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e02b      	b.n	8009606 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095ae:	88fb      	ldrh	r3, [r7, #6]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d105      	bne.n	80095c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095b4:	893b      	ldrh	r3, [r7, #8]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	611a      	str	r2, [r3, #16]
 80095be:	e021      	b.n	8009604 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095c0:	893b      	ldrh	r3, [r7, #8]
 80095c2:	0a1b      	lsrs	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d0:	6a39      	ldr	r1, [r7, #32]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f9dc 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00d      	beq.n	80095fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d107      	bne.n	80095f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e005      	b.n	8009606 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095fa:	893b      	ldrh	r3, [r7, #8]
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	00010002 	.word	0x00010002

08009614 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b088      	sub	sp, #32
 8009618:	af02      	add	r7, sp, #8
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	4608      	mov	r0, r1
 800961e:	4611      	mov	r1, r2
 8009620:	461a      	mov	r2, r3
 8009622:	4603      	mov	r3, r0
 8009624:	817b      	strh	r3, [r7, #10]
 8009626:	460b      	mov	r3, r1
 8009628:	813b      	strh	r3, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800963c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800964c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	2200      	movs	r2, #0
 8009656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 f8c2 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00d      	beq.n	8009682 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009674:	d103      	bne.n	800967e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e0aa      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009682:	897b      	ldrh	r3, [r7, #10]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	461a      	mov	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	6a3a      	ldr	r2, [r7, #32]
 8009696:	4952      	ldr	r1, [pc, #328]	; (80097e0 <I2C_RequestMemoryRead+0x1cc>)
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f8fa 	bl	8009892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e097      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c0:	6a39      	ldr	r1, [r7, #32]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f964 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00d      	beq.n	80096ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d107      	bne.n	80096e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e076      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d105      	bne.n	80096fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096f0:	893b      	ldrh	r3, [r7, #8]
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	611a      	str	r2, [r3, #16]
 80096fa:	e021      	b.n	8009740 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096fc:	893b      	ldrh	r3, [r7, #8]
 80096fe:	0a1b      	lsrs	r3, r3, #8
 8009700:	b29b      	uxth	r3, r3
 8009702:	b2da      	uxtb	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800970a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970c:	6a39      	ldr	r1, [r7, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f93e 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00d      	beq.n	8009736 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	2b04      	cmp	r3, #4
 8009720:	d107      	bne.n	8009732 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e050      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009736:	893b      	ldrh	r3, [r7, #8]
 8009738:	b2da      	uxtb	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009742:	6a39      	ldr	r1, [r7, #32]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f923 	bl	8009990 <I2C_WaitOnTXEFlagUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00d      	beq.n	800976c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	2b04      	cmp	r3, #4
 8009756:	d107      	bne.n	8009768 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009766:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e035      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800977a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	2200      	movs	r2, #0
 8009784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f82b 	bl	80097e4 <I2C_WaitOnFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a2:	d103      	bne.n	80097ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e013      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097b0:	897b      	ldrh	r3, [r7, #10]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f043 0301 	orr.w	r3, r3, #1
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	6a3a      	ldr	r2, [r7, #32]
 80097c4:	4906      	ldr	r1, [pc, #24]	; (80097e0 <I2C_RequestMemoryRead+0x1cc>)
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 f863 	bl	8009892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	00010002 	.word	0x00010002

080097e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097f4:	e025      	b.n	8009842 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d021      	beq.n	8009842 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097fe:	f7fd fd19 	bl	8007234 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d302      	bcc.n	8009814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d116      	bne.n	8009842 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e023      	b.n	800988a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10d      	bne.n	8009868 <I2C_WaitOnFlagUntilTimeout+0x84>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	43da      	mvns	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4013      	ands	r3, r2
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	bf0c      	ite	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	2300      	movne	r3, #0
 8009862:	b2db      	uxtb	r3, r3
 8009864:	461a      	mov	r2, r3
 8009866:	e00c      	b.n	8009882 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	43da      	mvns	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4013      	ands	r3, r2
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	bf0c      	ite	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	2300      	movne	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	429a      	cmp	r2, r3
 8009886:	d0b6      	beq.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098a0:	e051      	b.n	8009946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b0:	d123      	bne.n	80098fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	f043 0204 	orr.w	r2, r3, #4
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e046      	b.n	8009988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d021      	beq.n	8009946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009902:	f7fd fc97 	bl	8007234 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	429a      	cmp	r2, r3
 8009910:	d302      	bcc.n	8009918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d116      	bne.n	8009946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	f043 0220 	orr.w	r2, r3, #32
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e020      	b.n	8009988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b01      	cmp	r3, #1
 800994e:	d10c      	bne.n	800996a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	43da      	mvns	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4013      	ands	r3, r2
 800995c:	b29b      	uxth	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	bf14      	ite	ne
 8009962:	2301      	movne	r3, #1
 8009964:	2300      	moveq	r3, #0
 8009966:	b2db      	uxtb	r3, r3
 8009968:	e00b      	b.n	8009982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	43da      	mvns	r2, r3
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4013      	ands	r3, r2
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	bf14      	ite	ne
 800997c:	2301      	movne	r3, #1
 800997e:	2300      	moveq	r3, #0
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d18d      	bne.n	80098a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800999c:	e02d      	b.n	80099fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f8ce 	bl	8009b40 <I2C_IsAcknowledgeFailed>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e02d      	b.n	8009a0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b4:	d021      	beq.n	80099fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b6:	f7fd fc3d 	bl	8007234 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d302      	bcc.n	80099cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d116      	bne.n	80099fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	f043 0220 	orr.w	r2, r3, #32
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e007      	b.n	8009a0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a04:	2b80      	cmp	r3, #128	; 0x80
 8009a06:	d1ca      	bne.n	800999e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a1e:	e02d      	b.n	8009a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f88d 	bl	8009b40 <I2C_IsAcknowledgeFailed>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e02d      	b.n	8009a8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d021      	beq.n	8009a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a38:	f7fd fbfc 	bl	8007234 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d302      	bcc.n	8009a4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d116      	bne.n	8009a7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e007      	b.n	8009a8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f003 0304 	and.w	r3, r3, #4
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d1ca      	bne.n	8009a20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009aa0:	e042      	b.n	8009b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d119      	bne.n	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f06f 0210 	mvn.w	r2, #16
 8009ab8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e029      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae4:	f7fd fba6 	bl	8007234 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d116      	bne.n	8009b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	f043 0220 	orr.w	r2, r3, #32
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e007      	b.n	8009b38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b40      	cmp	r3, #64	; 0x40
 8009b34:	d1b5      	bne.n	8009aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b56:	d11b      	bne.n	8009b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	f043 0204 	orr.w	r2, r3, #4
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e000      	b.n	8009b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
	...

08009ba0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009bb2:	687b      	ldr	r3, [r7, #4]
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	420e0020 	.word	0x420e0020
 8009bc4:	40007000 	.word	0x40007000

08009bc8 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <HAL_PWREx_EnableBkUpReg+0x44>)
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bd8:	f7fd fb2c 	bl	8007234 <HAL_GetTick>
 8009bdc:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009bde:	e009      	b.n	8009bf4 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8009be0:	f7fd fb28 	bl	8007234 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bee:	d901      	bls.n	8009bf4 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e006      	b.n	8009c02 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <HAL_PWREx_EnableBkUpReg+0x48>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d1ef      	bne.n	8009be0 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	420e00a4 	.word	0x420e00a4
 8009c10:	40007000 	.word	0x40007000

08009c14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c1e:	2300      	movs	r3, #0
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <HAL_PWREx_EnableOverDrive+0x94>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c40:	f7fd faf8 	bl	8007234 <HAL_GetTick>
 8009c44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009c46:	e009      	b.n	8009c5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c48:	f7fd faf4 	bl	8007234 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c56:	d901      	bls.n	8009c5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e01f      	b.n	8009c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_PWREx_EnableOverDrive+0x98>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c68:	d1ee      	bne.n	8009c48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c70:	f7fd fae0 	bl	8007234 <HAL_GetTick>
 8009c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c76:	e009      	b.n	8009c8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c78:	f7fd fadc 	bl	8007234 <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c86:	d901      	bls.n	8009c8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e007      	b.n	8009c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c8c:	4b07      	ldr	r3, [pc, #28]	; (8009cac <HAL_PWREx_EnableOverDrive+0x98>)
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c98:	d1ee      	bne.n	8009c78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40023800 	.word	0x40023800
 8009ca8:	420e0040 	.word	0x420e0040
 8009cac:	40007000 	.word	0x40007000
 8009cb0:	420e0044 	.word	0x420e0044

08009cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e0cc      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc8:	4b68      	ldr	r3, [pc, #416]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d90c      	bls.n	8009cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cd6:	4b65      	ldr	r3, [pc, #404]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cde:	4b63      	ldr	r3, [pc, #396]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d001      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e0b8      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d020      	beq.n	8009d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d08:	4b59      	ldr	r3, [pc, #356]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	4a58      	ldr	r2, [pc, #352]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d20:	4b53      	ldr	r3, [pc, #332]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	4a52      	ldr	r2, [pc, #328]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d2c:	4b50      	ldr	r3, [pc, #320]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	494d      	ldr	r1, [pc, #308]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d044      	beq.n	8009dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d107      	bne.n	8009d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d52:	4b47      	ldr	r3, [pc, #284]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d119      	bne.n	8009d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e07f      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d003      	beq.n	8009d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d107      	bne.n	8009d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d72:	4b3f      	ldr	r3, [pc, #252]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e06f      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d82:	4b3b      	ldr	r3, [pc, #236]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e067      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d92:	4b37      	ldr	r3, [pc, #220]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f023 0203 	bic.w	r2, r3, #3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	4934      	ldr	r1, [pc, #208]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009da4:	f7fd fa46 	bl	8007234 <HAL_GetTick>
 8009da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009daa:	e00a      	b.n	8009dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dac:	f7fd fa42 	bl	8007234 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e04f      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dc2:	4b2b      	ldr	r3, [pc, #172]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f003 020c 	and.w	r2, r3, #12
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d1eb      	bne.n	8009dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dd4:	4b25      	ldr	r3, [pc, #148]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d20c      	bcs.n	8009dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009de2:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	b2d2      	uxtb	r2, r2
 8009de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dea:	4b20      	ldr	r3, [pc, #128]	; (8009e6c <HAL_RCC_ClockConfig+0x1b8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d001      	beq.n	8009dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e032      	b.n	8009e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e08:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	4916      	ldr	r1, [pc, #88]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0308 	and.w	r3, r3, #8
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d009      	beq.n	8009e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e26:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	490e      	ldr	r1, [pc, #56]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e3a:	f000 fb7f 	bl	800a53c <HAL_RCC_GetSysClockFreq>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <HAL_RCC_ClockConfig+0x1bc>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	091b      	lsrs	r3, r3, #4
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	490a      	ldr	r1, [pc, #40]	; (8009e74 <HAL_RCC_ClockConfig+0x1c0>)
 8009e4c:	5ccb      	ldrb	r3, [r1, r3]
 8009e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e52:	4a09      	ldr	r2, [pc, #36]	; (8009e78 <HAL_RCC_ClockConfig+0x1c4>)
 8009e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <HAL_RCC_ClockConfig+0x1c8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fd f9a6 	bl	80071ac <HAL_InitTick>

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	40023c00 	.word	0x40023c00
 8009e70:	40023800 	.word	0x40023800
 8009e74:	08017a00 	.word	0x08017a00
 8009e78:	2000000c 	.word	0x2000000c
 8009e7c:	20000010 	.word	0x20000010

08009e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e84:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e86:	681b      	ldr	r3, [r3, #0]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	2000000c 	.word	0x2000000c

08009e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e9c:	f7ff fff0 	bl	8009e80 <HAL_RCC_GetHCLKFreq>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	0a9b      	lsrs	r3, r3, #10
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	4903      	ldr	r1, [pc, #12]	; (8009ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eae:	5ccb      	ldrb	r3, [r1, r3]
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	08017a10 	.word	0x08017a10

08009ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ec4:	f7ff ffdc 	bl	8009e80 <HAL_RCC_GetHCLKFreq>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	0b5b      	lsrs	r3, r3, #13
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	4903      	ldr	r1, [pc, #12]	; (8009ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ed6:	5ccb      	ldrb	r3, [r1, r3]
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40023800 	.word	0x40023800
 8009ee4:	08017a10 	.word	0x08017a10

08009ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	; 0x30
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d010      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009f20:	4b6f      	ldr	r3, [pc, #444]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	496c      	ldr	r1, [pc, #432]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d010      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8009f4e:	4b64      	ldr	r3, [pc, #400]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5c:	4960      	ldr	r1, [pc, #384]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d017      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f7c:	4b58      	ldr	r3, [pc, #352]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4955      	ldr	r1, [pc, #340]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f9a:	d101      	bne.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d017      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009fb8:	4b49      	ldr	r3, [pc, #292]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	4946      	ldr	r1, [pc, #280]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fd6:	d101      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 808a 	beq.w	800a10a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	4b39      	ldr	r3, [pc, #228]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	4a38      	ldr	r2, [pc, #224]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a004:	6413      	str	r3, [r2, #64]	; 0x40
 800a006:	4b36      	ldr	r3, [pc, #216]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a00e:	60bb      	str	r3, [r7, #8]
 800a010:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a012:	4b34      	ldr	r3, [pc, #208]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a33      	ldr	r2, [pc, #204]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a01e:	f7fd f909 	bl	8007234 <HAL_GetTick>
 800a022:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a024:	e008      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a026:	f7fd f905 	bl	8007234 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	d901      	bls.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e278      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a038:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0f0      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a044:	4b26      	ldr	r3, [pc, #152]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d02f      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d028      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a062:	4b1f      	ldr	r3, [pc, #124]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a06a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a06c:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a06e:	2201      	movs	r2, #1
 800a070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a072:	4b1d      	ldr	r3, [pc, #116]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a078:	4a19      	ldr	r2, [pc, #100]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a07e:	4b18      	ldr	r3, [pc, #96]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b01      	cmp	r3, #1
 800a088:	d114      	bne.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a08a:	f7fd f8d3 	bl	8007234 <HAL_GetTick>
 800a08e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a090:	e00a      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a092:	f7fd f8cf 	bl	8007234 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e240      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0a8:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0ee      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c0:	d114      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a0c2:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d6:	4902      	ldr	r1, [pc, #8]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	608b      	str	r3, [r1, #8]
 800a0dc:	e00c      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a0de:	bf00      	nop
 800a0e0:	40023800 	.word	0x40023800
 800a0e4:	40007000 	.word	0x40007000
 800a0e8:	42470e40 	.word	0x42470e40
 800a0ec:	4b4a      	ldr	r3, [pc, #296]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	4a49      	ldr	r2, [pc, #292]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a0f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a0f6:	6093      	str	r3, [r2, #8]
 800a0f8:	4b47      	ldr	r3, [pc, #284]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a0fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a104:	4944      	ldr	r1, [pc, #272]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a106:	4313      	orrs	r3, r2
 800a108:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0310 	and.w	r3, r3, #16
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a11c:	4b3f      	ldr	r3, [pc, #252]	; (800a21c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a11e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a12c:	4b3a      	ldr	r3, [pc, #232]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	4937      	ldr	r1, [pc, #220]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a14e:	4b32      	ldr	r3, [pc, #200]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a154:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15c:	492e      	ldr	r1, [pc, #184]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d011      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a170:	4b29      	ldr	r3, [pc, #164]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a176:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17e:	4926      	ldr	r1, [pc, #152]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a180:	4313      	orrs	r3, r2
 800a182:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a18e:	d101      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a190:	2301      	movs	r3, #1
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a1a0:	4b1d      	ldr	r3, [pc, #116]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a1a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ae:	491a      	ldr	r1, [pc, #104]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d0:	4911      	ldr	r1, [pc, #68]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e0:	d101      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d005      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1f4:	f040 80ff 	bne.w	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1fe:	f7fd f819 	bl	8007234 <HAL_GetTick>
 800a202:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a204:	e00e      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a206:	f7fd f815 	bl	8007234 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d907      	bls.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e188      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a218:	40023800 	.word	0x40023800
 800a21c:	424711e0 	.word	0x424711e0
 800a220:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a224:	4b7e      	ldr	r3, [pc, #504]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1ea      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	2b00      	cmp	r3, #0
 800a242:	d009      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d028      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d124      	bne.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a258:	4b71      	ldr	r3, [pc, #452]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	3301      	adds	r3, #1
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a26a:	4b6d      	ldr	r3, [pc, #436]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a270:	0e1b      	lsrs	r3, r3, #24
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	019b      	lsls	r3, r3, #6
 800a282:	431a      	orrs	r2, r3
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	3b01      	subs	r3, #1
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	431a      	orrs	r2, r3
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	061b      	lsls	r3, r3, #24
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	071b      	lsls	r3, r3, #28
 800a29a:	4961      	ldr	r1, [pc, #388]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d004      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b6:	d00a      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d035      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2cc:	d130      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a2ce:	4b54      	ldr	r3, [pc, #336]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2d4:	0c1b      	lsrs	r3, r3, #16
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	3301      	adds	r3, #1
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a2e0:	4b4f      	ldr	r3, [pc, #316]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e6:	0f1b      	lsrs	r3, r3, #28
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	019b      	lsls	r3, r3, #6
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	085b      	lsrs	r3, r3, #1
 800a2fe:	3b01      	subs	r3, #1
 800a300:	041b      	lsls	r3, r3, #16
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	061b      	lsls	r3, r3, #24
 800a30a:	431a      	orrs	r2, r3
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	071b      	lsls	r3, r3, #28
 800a310:	4943      	ldr	r1, [pc, #268]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a312:	4313      	orrs	r3, r2
 800a314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a31a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a31e:	f023 021f 	bic.w	r2, r3, #31
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	3b01      	subs	r3, #1
 800a328:	493d      	ldr	r1, [pc, #244]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d029      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a344:	d124      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a346:	4b36      	ldr	r3, [pc, #216]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	3301      	adds	r3, #1
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a358:	4b31      	ldr	r3, [pc, #196]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a35a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35e:	0f1b      	lsrs	r3, r3, #28
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	019b      	lsls	r3, r3, #6
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	3b01      	subs	r3, #1
 800a37a:	041b      	lsls	r3, r3, #16
 800a37c:	431a      	orrs	r2, r3
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	061b      	lsls	r3, r3, #24
 800a382:	431a      	orrs	r2, r3
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	071b      	lsls	r3, r3, #28
 800a388:	4925      	ldr	r1, [pc, #148]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d016      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	019b      	lsls	r3, r3, #6
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	085b      	lsrs	r3, r3, #1
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	041b      	lsls	r3, r3, #16
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	061b      	lsls	r3, r3, #24
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	071b      	lsls	r3, r3, #28
 800a3c2:	4917      	ldr	r1, [pc, #92]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3ca:	4b16      	ldr	r3, [pc, #88]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3d0:	f7fc ff30 	bl	8007234 <HAL_GetTick>
 800a3d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3d6:	e008      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3d8:	f7fc ff2c 	bl	8007234 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e09f      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f0      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	f040 8095 	bne.w	800a528 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a404:	f7fc ff16 	bl	8007234 <HAL_GetTick>
 800a408:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a40a:	e00f      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a40c:	f7fc ff12 	bl	8007234 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d908      	bls.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e085      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a41e:	bf00      	nop
 800a420:	40023800 	.word	0x40023800
 800a424:	42470068 	.word	0x42470068
 800a428:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a42c:	4b41      	ldr	r3, [pc, #260]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a438:	d0e8      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02b      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d127      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a462:	4b34      	ldr	r3, [pc, #208]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	3301      	adds	r3, #1
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699a      	ldr	r2, [r3, #24]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	69db      	ldr	r3, [r3, #28]
 800a47c:	019b      	lsls	r3, r3, #6
 800a47e:	431a      	orrs	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	085b      	lsrs	r3, r3, #1
 800a484:	3b01      	subs	r3, #1
 800a486:	041b      	lsls	r3, r3, #16
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	061b      	lsls	r3, r3, #24
 800a490:	4928      	ldr	r1, [pc, #160]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a492:	4313      	orrs	r3, r2
 800a494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a498:	4b26      	ldr	r3, [pc, #152]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a49e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	4922      	ldr	r1, [pc, #136]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01d      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4c6:	d118      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a4c8:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ce:	0e1b      	lsrs	r3, r3, #24
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	699a      	ldr	r2, [r3, #24]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	019b      	lsls	r3, r3, #6
 800a4e0:	431a      	orrs	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	085b      	lsrs	r3, r3, #1
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	041b      	lsls	r3, r3, #16
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	061b      	lsls	r3, r3, #24
 800a4f2:	4910      	ldr	r1, [pc, #64]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a4fa:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a500:	f7fc fe98 	bl	8007234 <HAL_GetTick>
 800a504:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a508:	f7fc fe94 	bl	8007234 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e007      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a526:	d1ef      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3730      	adds	r7, #48	; 0x30
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	40023800 	.word	0x40023800
 800a538:	42470070 	.word	0x42470070

0800a53c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a540:	b0ae      	sub	sp, #184	; 0xb8
 800a542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a562:	4bcb      	ldr	r3, [pc, #812]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 030c 	and.w	r3, r3, #12
 800a56a:	2b0c      	cmp	r3, #12
 800a56c:	f200 8206 	bhi.w	800a97c <HAL_RCC_GetSysClockFreq+0x440>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a5ad 	.word	0x0800a5ad
 800a57c:	0800a97d 	.word	0x0800a97d
 800a580:	0800a97d 	.word	0x0800a97d
 800a584:	0800a97d 	.word	0x0800a97d
 800a588:	0800a5b5 	.word	0x0800a5b5
 800a58c:	0800a97d 	.word	0x0800a97d
 800a590:	0800a97d 	.word	0x0800a97d
 800a594:	0800a97d 	.word	0x0800a97d
 800a598:	0800a5bd 	.word	0x0800a5bd
 800a59c:	0800a97d 	.word	0x0800a97d
 800a5a0:	0800a97d 	.word	0x0800a97d
 800a5a4:	0800a97d 	.word	0x0800a97d
 800a5a8:	0800a7ad 	.word	0x0800a7ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5ac:	4bb9      	ldr	r3, [pc, #740]	; (800a894 <HAL_RCC_GetSysClockFreq+0x358>)
 800a5ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a5b2:	e1e7      	b.n	800a984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5b4:	4bb8      	ldr	r3, [pc, #736]	; (800a898 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a5b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a5ba:	e1e3      	b.n	800a984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5bc:	4bb4      	ldr	r3, [pc, #720]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5c8:	4bb1      	ldr	r3, [pc, #708]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d071      	beq.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5d4:	4bae      	ldr	r3, [pc, #696]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	099b      	lsrs	r3, r3, #6
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	f04f 0000 	mov.w	r0, #0
 800a602:	f04f 0100 	mov.w	r1, #0
 800a606:	0159      	lsls	r1, r3, #5
 800a608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a60c:	0150      	lsls	r0, r2, #5
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	4621      	mov	r1, r4
 800a614:	1a51      	subs	r1, r2, r1
 800a616:	6439      	str	r1, [r7, #64]	; 0x40
 800a618:	4629      	mov	r1, r5
 800a61a:	eb63 0301 	sbc.w	r3, r3, r1
 800a61e:	647b      	str	r3, [r7, #68]	; 0x44
 800a620:	f04f 0200 	mov.w	r2, #0
 800a624:	f04f 0300 	mov.w	r3, #0
 800a628:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a62c:	4649      	mov	r1, r9
 800a62e:	018b      	lsls	r3, r1, #6
 800a630:	4641      	mov	r1, r8
 800a632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a636:	4641      	mov	r1, r8
 800a638:	018a      	lsls	r2, r1, #6
 800a63a:	4641      	mov	r1, r8
 800a63c:	1a51      	subs	r1, r2, r1
 800a63e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a640:	4649      	mov	r1, r9
 800a642:	eb63 0301 	sbc.w	r3, r3, r1
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a654:	4649      	mov	r1, r9
 800a656:	00cb      	lsls	r3, r1, #3
 800a658:	4641      	mov	r1, r8
 800a65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a65e:	4641      	mov	r1, r8
 800a660:	00ca      	lsls	r2, r1, #3
 800a662:	4610      	mov	r0, r2
 800a664:	4619      	mov	r1, r3
 800a666:	4603      	mov	r3, r0
 800a668:	4622      	mov	r2, r4
 800a66a:	189b      	adds	r3, r3, r2
 800a66c:	633b      	str	r3, [r7, #48]	; 0x30
 800a66e:	462b      	mov	r3, r5
 800a670:	460a      	mov	r2, r1
 800a672:	eb42 0303 	adc.w	r3, r2, r3
 800a676:	637b      	str	r3, [r7, #52]	; 0x34
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	f04f 0300 	mov.w	r3, #0
 800a680:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a684:	4629      	mov	r1, r5
 800a686:	024b      	lsls	r3, r1, #9
 800a688:	4621      	mov	r1, r4
 800a68a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a68e:	4621      	mov	r1, r4
 800a690:	024a      	lsls	r2, r1, #9
 800a692:	4610      	mov	r0, r2
 800a694:	4619      	mov	r1, r3
 800a696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a6a8:	f7f6 fc6c 	bl	8000f84 <__aeabi_uldivmod>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6b6:	e067      	b.n	800a788 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6b8:	4b75      	ldr	r3, [pc, #468]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	099b      	lsrs	r3, r3, #6
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a6c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a6da:	4622      	mov	r2, r4
 800a6dc:	462b      	mov	r3, r5
 800a6de:	f04f 0000 	mov.w	r0, #0
 800a6e2:	f04f 0100 	mov.w	r1, #0
 800a6e6:	0159      	lsls	r1, r3, #5
 800a6e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6ec:	0150      	lsls	r0, r2, #5
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	1a51      	subs	r1, r2, r1
 800a6f6:	62b9      	str	r1, [r7, #40]	; 0x28
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	eb63 0301 	sbc.w	r3, r3, r1
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a70c:	4649      	mov	r1, r9
 800a70e:	018b      	lsls	r3, r1, #6
 800a710:	4641      	mov	r1, r8
 800a712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a716:	4641      	mov	r1, r8
 800a718:	018a      	lsls	r2, r1, #6
 800a71a:	4641      	mov	r1, r8
 800a71c:	ebb2 0a01 	subs.w	sl, r2, r1
 800a720:	4649      	mov	r1, r9
 800a722:	eb63 0b01 	sbc.w	fp, r3, r1
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	f04f 0300 	mov.w	r3, #0
 800a72e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a732:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a736:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a73a:	4692      	mov	sl, r2
 800a73c:	469b      	mov	fp, r3
 800a73e:	4623      	mov	r3, r4
 800a740:	eb1a 0303 	adds.w	r3, sl, r3
 800a744:	623b      	str	r3, [r7, #32]
 800a746:	462b      	mov	r3, r5
 800a748:	eb4b 0303 	adc.w	r3, fp, r3
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	f04f 0300 	mov.w	r3, #0
 800a756:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a75a:	4629      	mov	r1, r5
 800a75c:	028b      	lsls	r3, r1, #10
 800a75e:	4621      	mov	r1, r4
 800a760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a764:	4621      	mov	r1, r4
 800a766:	028a      	lsls	r2, r1, #10
 800a768:	4610      	mov	r0, r2
 800a76a:	4619      	mov	r1, r3
 800a76c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a770:	2200      	movs	r2, #0
 800a772:	673b      	str	r3, [r7, #112]	; 0x70
 800a774:	677a      	str	r2, [r7, #116]	; 0x74
 800a776:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a77a:	f7f6 fc03 	bl	8000f84 <__aeabi_uldivmod>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4613      	mov	r3, r2
 800a784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a788:	4b41      	ldr	r3, [pc, #260]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	0c1b      	lsrs	r3, r3, #16
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	3301      	adds	r3, #1
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a79a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a79e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a7aa:	e0eb      	b.n	800a984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7ac:	4b38      	ldr	r3, [pc, #224]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7b8:	4b35      	ldr	r3, [pc, #212]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d06b      	beq.n	800a89c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7c4:	4b32      	ldr	r3, [pc, #200]	; (800a890 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	099b      	lsrs	r3, r3, #6
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d6:	663b      	str	r3, [r7, #96]	; 0x60
 800a7d8:	2300      	movs	r3, #0
 800a7da:	667b      	str	r3, [r7, #100]	; 0x64
 800a7dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	462b      	mov	r3, r5
 800a7e4:	f04f 0000 	mov.w	r0, #0
 800a7e8:	f04f 0100 	mov.w	r1, #0
 800a7ec:	0159      	lsls	r1, r3, #5
 800a7ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7f2:	0150      	lsls	r0, r2, #5
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	1a51      	subs	r1, r2, r1
 800a7fc:	61b9      	str	r1, [r7, #24]
 800a7fe:	4629      	mov	r1, r5
 800a800:	eb63 0301 	sbc.w	r3, r3, r1
 800a804:	61fb      	str	r3, [r7, #28]
 800a806:	f04f 0200 	mov.w	r2, #0
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a812:	4659      	mov	r1, fp
 800a814:	018b      	lsls	r3, r1, #6
 800a816:	4651      	mov	r1, sl
 800a818:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a81c:	4651      	mov	r1, sl
 800a81e:	018a      	lsls	r2, r1, #6
 800a820:	4651      	mov	r1, sl
 800a822:	ebb2 0801 	subs.w	r8, r2, r1
 800a826:	4659      	mov	r1, fp
 800a828:	eb63 0901 	sbc.w	r9, r3, r1
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a838:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a83c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a840:	4690      	mov	r8, r2
 800a842:	4699      	mov	r9, r3
 800a844:	4623      	mov	r3, r4
 800a846:	eb18 0303 	adds.w	r3, r8, r3
 800a84a:	613b      	str	r3, [r7, #16]
 800a84c:	462b      	mov	r3, r5
 800a84e:	eb49 0303 	adc.w	r3, r9, r3
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	f04f 0200 	mov.w	r2, #0
 800a858:	f04f 0300 	mov.w	r3, #0
 800a85c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a860:	4629      	mov	r1, r5
 800a862:	024b      	lsls	r3, r1, #9
 800a864:	4621      	mov	r1, r4
 800a866:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a86a:	4621      	mov	r1, r4
 800a86c:	024a      	lsls	r2, r1, #9
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a876:	2200      	movs	r2, #0
 800a878:	65bb      	str	r3, [r7, #88]	; 0x58
 800a87a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a87c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a880:	f7f6 fb80 	bl	8000f84 <__aeabi_uldivmod>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4613      	mov	r3, r2
 800a88a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a88e:	e065      	b.n	800a95c <HAL_RCC_GetSysClockFreq+0x420>
 800a890:	40023800 	.word	0x40023800
 800a894:	00f42400 	.word	0x00f42400
 800a898:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a89c:	4b3d      	ldr	r3, [pc, #244]	; (800a994 <HAL_RCC_GetSysClockFreq+0x458>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	099b      	lsrs	r3, r3, #6
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a8ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	657b      	str	r3, [r7, #84]	; 0x54
 800a8b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a8b6:	4642      	mov	r2, r8
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	f04f 0000 	mov.w	r0, #0
 800a8be:	f04f 0100 	mov.w	r1, #0
 800a8c2:	0159      	lsls	r1, r3, #5
 800a8c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8c8:	0150      	lsls	r0, r2, #5
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	1a51      	subs	r1, r2, r1
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	eb63 0301 	sbc.w	r3, r3, r1
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a8e8:	4659      	mov	r1, fp
 800a8ea:	018b      	lsls	r3, r1, #6
 800a8ec:	4651      	mov	r1, sl
 800a8ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a8f2:	4651      	mov	r1, sl
 800a8f4:	018a      	lsls	r2, r1, #6
 800a8f6:	4651      	mov	r1, sl
 800a8f8:	1a54      	subs	r4, r2, r1
 800a8fa:	4659      	mov	r1, fp
 800a8fc:	eb63 0501 	sbc.w	r5, r3, r1
 800a900:	f04f 0200 	mov.w	r2, #0
 800a904:	f04f 0300 	mov.w	r3, #0
 800a908:	00eb      	lsls	r3, r5, #3
 800a90a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a90e:	00e2      	lsls	r2, r4, #3
 800a910:	4614      	mov	r4, r2
 800a912:	461d      	mov	r5, r3
 800a914:	4643      	mov	r3, r8
 800a916:	18e3      	adds	r3, r4, r3
 800a918:	603b      	str	r3, [r7, #0]
 800a91a:	464b      	mov	r3, r9
 800a91c:	eb45 0303 	adc.w	r3, r5, r3
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	f04f 0200 	mov.w	r2, #0
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a92e:	4629      	mov	r1, r5
 800a930:	028b      	lsls	r3, r1, #10
 800a932:	4621      	mov	r1, r4
 800a934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a938:	4621      	mov	r1, r4
 800a93a:	028a      	lsls	r2, r1, #10
 800a93c:	4610      	mov	r0, r2
 800a93e:	4619      	mov	r1, r3
 800a940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a944:	2200      	movs	r2, #0
 800a946:	64bb      	str	r3, [r7, #72]	; 0x48
 800a948:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a94a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a94e:	f7f6 fb19 	bl	8000f84 <__aeabi_uldivmod>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4613      	mov	r3, r2
 800a958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <HAL_RCC_GetSysClockFreq+0x458>)
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	0f1b      	lsrs	r3, r3, #28
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a96a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a96e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a972:	fbb2 f3f3 	udiv	r3, r2, r3
 800a976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a97a:	e003      	b.n	800a984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a97e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a982:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	37b8      	adds	r7, #184	; 0xb8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a992:	bf00      	nop
 800a994:	40023800 	.word	0x40023800
 800a998:	00f42400 	.word	0x00f42400

0800a99c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e28d      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8083 	beq.w	800aac2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a9bc:	4b94      	ldr	r3, [pc, #592]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f003 030c 	and.w	r3, r3, #12
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d019      	beq.n	800a9fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a9c8:	4b91      	ldr	r3, [pc, #580]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d106      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a9d4:	4b8e      	ldr	r3, [pc, #568]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9e0:	d00c      	beq.n	800a9fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9e2:	4b8b      	ldr	r3, [pc, #556]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a9ea:	2b0c      	cmp	r3, #12
 800a9ec:	d112      	bne.n	800aa14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9ee:	4b88      	ldr	r3, [pc, #544]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9fa:	d10b      	bne.n	800aa14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9fc:	4b84      	ldr	r3, [pc, #528]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d05b      	beq.n	800aac0 <HAL_RCC_OscConfig+0x124>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d157      	bne.n	800aac0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e25a      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa1c:	d106      	bne.n	800aa2c <HAL_RCC_OscConfig+0x90>
 800aa1e:	4b7c      	ldr	r3, [pc, #496]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a7b      	ldr	r2, [pc, #492]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e01d      	b.n	800aa68 <HAL_RCC_OscConfig+0xcc>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa34:	d10c      	bne.n	800aa50 <HAL_RCC_OscConfig+0xb4>
 800aa36:	4b76      	ldr	r3, [pc, #472]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a75      	ldr	r2, [pc, #468]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	4b73      	ldr	r3, [pc, #460]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a72      	ldr	r2, [pc, #456]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e00b      	b.n	800aa68 <HAL_RCC_OscConfig+0xcc>
 800aa50:	4b6f      	ldr	r3, [pc, #444]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a6e      	ldr	r2, [pc, #440]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	4b6c      	ldr	r3, [pc, #432]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a6b      	ldr	r2, [pc, #428]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d013      	beq.n	800aa98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa70:	f7fc fbe0 	bl	8007234 <HAL_GetTick>
 800aa74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa76:	e008      	b.n	800aa8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa78:	f7fc fbdc 	bl	8007234 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b64      	cmp	r3, #100	; 0x64
 800aa84:	d901      	bls.n	800aa8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e21f      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa8a:	4b61      	ldr	r3, [pc, #388]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0f0      	beq.n	800aa78 <HAL_RCC_OscConfig+0xdc>
 800aa96:	e014      	b.n	800aac2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa98:	f7fc fbcc 	bl	8007234 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaa0:	f7fc fbc8 	bl	8007234 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b64      	cmp	r3, #100	; 0x64
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e20b      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aab2:	4b57      	ldr	r3, [pc, #348]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1f0      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x104>
 800aabe:	e000      	b.n	800aac2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d06f      	beq.n	800abae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800aace:	4b50      	ldr	r3, [pc, #320]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f003 030c 	and.w	r3, r3, #12
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800aada:	4b4d      	ldr	r3, [pc, #308]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d105      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800aae6:	4b4a      	ldr	r3, [pc, #296]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aaf2:	4b47      	ldr	r3, [pc, #284]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800aafa:	2b0c      	cmp	r3, #12
 800aafc:	d11c      	bne.n	800ab38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aafe:	4b44      	ldr	r3, [pc, #272]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d116      	bne.n	800ab38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab0a:	4b41      	ldr	r3, [pc, #260]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0302 	and.w	r3, r3, #2
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d005      	beq.n	800ab22 <HAL_RCC_OscConfig+0x186>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d001      	beq.n	800ab22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e1d3      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab22:	4b3b      	ldr	r3, [pc, #236]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	4937      	ldr	r1, [pc, #220]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab36:	e03a      	b.n	800abae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d020      	beq.n	800ab82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab40:	4b34      	ldr	r3, [pc, #208]	; (800ac14 <HAL_RCC_OscConfig+0x278>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab46:	f7fc fb75 	bl	8007234 <HAL_GetTick>
 800ab4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab4c:	e008      	b.n	800ab60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab4e:	f7fc fb71 	bl	8007234 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e1b4      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab60:	4b2b      	ldr	r3, [pc, #172]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0f0      	beq.n	800ab4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6c:	4b28      	ldr	r3, [pc, #160]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	00db      	lsls	r3, r3, #3
 800ab7a:	4925      	ldr	r1, [pc, #148]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	600b      	str	r3, [r1, #0]
 800ab80:	e015      	b.n	800abae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab82:	4b24      	ldr	r3, [pc, #144]	; (800ac14 <HAL_RCC_OscConfig+0x278>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab88:	f7fc fb54 	bl	8007234 <HAL_GetTick>
 800ab8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab8e:	e008      	b.n	800aba2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab90:	f7fc fb50 	bl	8007234 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e193      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aba2:	4b1b      	ldr	r3, [pc, #108]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f0      	bne.n	800ab90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0308 	and.w	r3, r3, #8
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d036      	beq.n	800ac28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d016      	beq.n	800abf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <HAL_RCC_OscConfig+0x27c>)
 800abc4:	2201      	movs	r2, #1
 800abc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abc8:	f7fc fb34 	bl	8007234 <HAL_GetTick>
 800abcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abce:	e008      	b.n	800abe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abd0:	f7fc fb30 	bl	8007234 <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d901      	bls.n	800abe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e173      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abe2:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <HAL_RCC_OscConfig+0x274>)
 800abe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe6:	f003 0302 	and.w	r3, r3, #2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f0      	beq.n	800abd0 <HAL_RCC_OscConfig+0x234>
 800abee:	e01b      	b.n	800ac28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abf0:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <HAL_RCC_OscConfig+0x27c>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abf6:	f7fc fb1d 	bl	8007234 <HAL_GetTick>
 800abfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abfc:	e00e      	b.n	800ac1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abfe:	f7fc fb19 	bl	8007234 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d907      	bls.n	800ac1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e15c      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
 800ac10:	40023800 	.word	0x40023800
 800ac14:	42470000 	.word	0x42470000
 800ac18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac1c:	4b8a      	ldr	r3, [pc, #552]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ac1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1ea      	bne.n	800abfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 8097 	beq.w	800ad64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac36:	2300      	movs	r3, #0
 800ac38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac3a:	4b83      	ldr	r3, [pc, #524]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10f      	bne.n	800ac66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac46:	2300      	movs	r3, #0
 800ac48:	60bb      	str	r3, [r7, #8]
 800ac4a:	4b7f      	ldr	r3, [pc, #508]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	4a7e      	ldr	r2, [pc, #504]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac54:	6413      	str	r3, [r2, #64]	; 0x40
 800ac56:	4b7c      	ldr	r3, [pc, #496]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	60bb      	str	r3, [r7, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac62:	2301      	movs	r3, #1
 800ac64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac66:	4b79      	ldr	r3, [pc, #484]	; (800ae4c <HAL_RCC_OscConfig+0x4b0>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d118      	bne.n	800aca4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac72:	4b76      	ldr	r3, [pc, #472]	; (800ae4c <HAL_RCC_OscConfig+0x4b0>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a75      	ldr	r2, [pc, #468]	; (800ae4c <HAL_RCC_OscConfig+0x4b0>)
 800ac78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac7e:	f7fc fad9 	bl	8007234 <HAL_GetTick>
 800ac82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac84:	e008      	b.n	800ac98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac86:	f7fc fad5 	bl	8007234 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d901      	bls.n	800ac98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e118      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac98:	4b6c      	ldr	r3, [pc, #432]	; (800ae4c <HAL_RCC_OscConfig+0x4b0>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d0f0      	beq.n	800ac86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d106      	bne.n	800acba <HAL_RCC_OscConfig+0x31e>
 800acac:	4b66      	ldr	r3, [pc, #408]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb0:	4a65      	ldr	r2, [pc, #404]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	6713      	str	r3, [r2, #112]	; 0x70
 800acb8:	e01c      	b.n	800acf4 <HAL_RCC_OscConfig+0x358>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2b05      	cmp	r3, #5
 800acc0:	d10c      	bne.n	800acdc <HAL_RCC_OscConfig+0x340>
 800acc2:	4b61      	ldr	r3, [pc, #388]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc6:	4a60      	ldr	r2, [pc, #384]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acc8:	f043 0304 	orr.w	r3, r3, #4
 800accc:	6713      	str	r3, [r2, #112]	; 0x70
 800acce:	4b5e      	ldr	r3, [pc, #376]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd2:	4a5d      	ldr	r2, [pc, #372]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acd4:	f043 0301 	orr.w	r3, r3, #1
 800acd8:	6713      	str	r3, [r2, #112]	; 0x70
 800acda:	e00b      	b.n	800acf4 <HAL_RCC_OscConfig+0x358>
 800acdc:	4b5a      	ldr	r3, [pc, #360]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	4a59      	ldr	r2, [pc, #356]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ace2:	f023 0301 	bic.w	r3, r3, #1
 800ace6:	6713      	str	r3, [r2, #112]	; 0x70
 800ace8:	4b57      	ldr	r3, [pc, #348]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acec:	4a56      	ldr	r2, [pc, #344]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800acee:	f023 0304 	bic.w	r3, r3, #4
 800acf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d015      	beq.n	800ad28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acfc:	f7fc fa9a 	bl	8007234 <HAL_GetTick>
 800ad00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad02:	e00a      	b.n	800ad1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad04:	f7fc fa96 	bl	8007234 <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e0d7      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad1a:	4b4b      	ldr	r3, [pc, #300]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0ee      	beq.n	800ad04 <HAL_RCC_OscConfig+0x368>
 800ad26:	e014      	b.n	800ad52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad28:	f7fc fa84 	bl	8007234 <HAL_GetTick>
 800ad2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad2e:	e00a      	b.n	800ad46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad30:	f7fc fa80 	bl	8007234 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d901      	bls.n	800ad46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	e0c1      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad46:	4b40      	ldr	r3, [pc, #256]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ad48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1ee      	bne.n	800ad30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d105      	bne.n	800ad64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad58:	4b3b      	ldr	r3, [pc, #236]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	4a3a      	ldr	r2, [pc, #232]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ad5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 80ad 	beq.w	800aec8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad6e:	4b36      	ldr	r3, [pc, #216]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f003 030c 	and.w	r3, r3, #12
 800ad76:	2b08      	cmp	r3, #8
 800ad78:	d060      	beq.n	800ae3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d145      	bne.n	800ae0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad82:	4b33      	ldr	r3, [pc, #204]	; (800ae50 <HAL_RCC_OscConfig+0x4b4>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad88:	f7fc fa54 	bl	8007234 <HAL_GetTick>
 800ad8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad8e:	e008      	b.n	800ada2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad90:	f7fc fa50 	bl	8007234 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d901      	bls.n	800ada2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e093      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ada2:	4b29      	ldr	r3, [pc, #164]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f0      	bne.n	800ad90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69da      	ldr	r2, [r3, #28]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	431a      	orrs	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	019b      	lsls	r3, r3, #6
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	085b      	lsrs	r3, r3, #1
 800adc6:	3b01      	subs	r3, #1
 800adc8:	041b      	lsls	r3, r3, #16
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	061b      	lsls	r3, r3, #24
 800add2:	431a      	orrs	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add8:	071b      	lsls	r3, r3, #28
 800adda:	491b      	ldr	r1, [pc, #108]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800addc:	4313      	orrs	r3, r2
 800adde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ade0:	4b1b      	ldr	r3, [pc, #108]	; (800ae50 <HAL_RCC_OscConfig+0x4b4>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade6:	f7fc fa25 	bl	8007234 <HAL_GetTick>
 800adea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adec:	e008      	b.n	800ae00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adee:	f7fc fa21 	bl	8007234 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d901      	bls.n	800ae00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e064      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae00:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f0      	beq.n	800adee <HAL_RCC_OscConfig+0x452>
 800ae0c:	e05c      	b.n	800aec8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae0e:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <HAL_RCC_OscConfig+0x4b4>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae14:	f7fc fa0e 	bl	8007234 <HAL_GetTick>
 800ae18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae1c:	f7fc fa0a 	bl	8007234 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e04d      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <HAL_RCC_OscConfig+0x4ac>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f0      	bne.n	800ae1c <HAL_RCC_OscConfig+0x480>
 800ae3a:	e045      	b.n	800aec8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d107      	bne.n	800ae54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e040      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	40007000 	.word	0x40007000
 800ae50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ae54:	4b1f      	ldr	r3, [pc, #124]	; (800aed4 <HAL_RCC_OscConfig+0x538>)
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d030      	beq.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d129      	bne.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d122      	bne.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ae84:	4013      	ands	r3, r2
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d119      	bne.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d10f      	bne.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d107      	bne.n	800aec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d001      	beq.n	800aec8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e000      	b.n	800aeca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	40023800 	.word	0x40023800

0800aed8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e066      	b.n	800afbc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	7f5b      	ldrb	r3, [r3, #29]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d105      	bne.n	800af04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fb f81e 	bl	8005f40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	22ca      	movs	r2, #202	; 0xca
 800af10:	625a      	str	r2, [r3, #36]	; 0x24
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2253      	movs	r2, #83	; 0x53
 800af18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f927 	bl	800b16e <RTC_EnterInitMode>
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d12c      	bne.n	800af84 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6812      	ldr	r2, [r2, #0]
 800af34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af3c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6899      	ldr	r1, [r3, #8]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	431a      	orrs	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	430a      	orrs	r2, r1
 800af5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68d2      	ldr	r2, [r2, #12]
 800af64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6919      	ldr	r1, [r3, #16]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	041a      	lsls	r2, r3, #16
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f92e 	bl	800b1dc <RTC_ExitInitMode>
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d113      	bne.n	800afb2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af98:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	699a      	ldr	r2, [r3, #24]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	22ff      	movs	r2, #255	; 0xff
 800afb8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800afba:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aff6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800affa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b006:	b2da      	uxtb	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	0a1b      	lsrs	r3, r3, #8
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b016:	b2da      	uxtb	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b024:	b2da      	uxtb	r2, r3
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	0d9b      	lsrs	r3, r3, #22
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	b2da      	uxtb	r2, r3
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d11a      	bne.n	800b076 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8ee 	bl	800b226 <RTC_Bcd2ToByte>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	785b      	ldrb	r3, [r3, #1]
 800b056:	4618      	mov	r0, r3
 800b058:	f000 f8e5 	bl	800b226 <RTC_Bcd2ToByte>
 800b05c:	4603      	mov	r3, r0
 800b05e:	461a      	mov	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	789b      	ldrb	r3, [r3, #2]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 f8dc 	bl	800b226 <RTC_Bcd2ToByte>
 800b06e:	4603      	mov	r3, r0
 800b070:	461a      	mov	r2, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b09e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	0c1b      	lsrs	r3, r3, #16
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	f003 031f 	and.w	r3, r3, #31
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	0b5b      	lsrs	r3, r3, #13
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d11a      	bne.n	800b114 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	78db      	ldrb	r3, [r3, #3]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f89f 	bl	800b226 <RTC_Bcd2ToByte>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	785b      	ldrb	r3, [r3, #1]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f896 	bl	800b226 <RTC_Bcd2ToByte>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	789b      	ldrb	r3, [r3, #2]
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f88d 	bl	800b226 <RTC_Bcd2ToByte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	461a      	mov	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68da      	ldr	r2, [r3, #12]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b138:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b13a:	f7fc f87b 	bl	8007234 <HAL_GetTick>
 800b13e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b140:	e009      	b.n	800b156 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b142:	f7fc f877 	bl	8007234 <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b150:	d901      	bls.n	800b156 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e007      	b.n	800b166 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0ee      	beq.n	800b142 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d122      	bne.n	800b1d2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b19a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b19c:	f7fc f84a 	bl	8007234 <HAL_GetTick>
 800b1a0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b1a2:	e00c      	b.n	800b1be <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1a4:	f7fc f846 	bl	8007234 <HAL_GetTick>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1b2:	d904      	bls.n	800b1be <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2204      	movs	r2, #4
 800b1b8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <RTC_EnterInitMode+0x64>
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d1e8      	bne.n	800b1a4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff89 	bl	800b11e <HAL_RTC_WaitForSynchro>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2204      	movs	r2, #4
 800b216:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	4603      	mov	r3, r0
 800b22e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	091b      	lsrs	r3, r3, #4
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	461a      	mov	r2, r3
 800b23c:	0092      	lsls	r2, r2, #2
 800b23e:	4413      	add	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	f003 030f 	and.w	r3, r3, #15
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	4413      	add	r3, r2
 800b250:	b2db      	uxtb	r3, r3
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b25e:	b480      	push	{r7}
 800b260:	b087      	sub	sp, #28
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3350      	adds	r3, #80	; 0x50
 800b274:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	4413      	add	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	601a      	str	r2, [r3, #0]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3350      	adds	r3, #80	; 0x50
 800b2a6:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e07b      	b.n	800b3cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d108      	bne.n	800b2ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2e4:	d009      	beq.n	800b2fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	61da      	str	r2, [r3, #28]
 800b2ec:	e005      	b.n	800b2fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7fa fe3d 	bl	8005f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2202      	movs	r2, #2
 800b31e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b330:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b342:	431a      	orrs	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b34c:	431a      	orrs	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	431a      	orrs	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	431a      	orrs	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b36a:	431a      	orrs	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	69db      	ldr	r3, [r3, #28]
 800b370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	ea42 0103 	orr.w	r1, r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	f003 0104 	and.w	r1, r3, #4
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	f003 0210 	and.w	r2, r3, #16
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69da      	ldr	r2, [r3, #28]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d101      	bne.n	800b3f6 <HAL_SPI_Transmit+0x22>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	e126      	b.n	800b644 <HAL_SPI_Transmit+0x270>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3fe:	f7fb ff19 	bl	8007234 <HAL_GetTick>
 800b402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b01      	cmp	r3, #1
 800b412:	d002      	beq.n	800b41a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b414:	2302      	movs	r3, #2
 800b416:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b418:	e10b      	b.n	800b632 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_SPI_Transmit+0x52>
 800b420:	88fb      	ldrh	r3, [r7, #6]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b42a:	e102      	b.n	800b632 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2203      	movs	r2, #3
 800b430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	88fa      	ldrh	r2, [r7, #6]
 800b444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	88fa      	ldrh	r2, [r7, #6]
 800b44a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b472:	d10f      	bne.n	800b494 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49e:	2b40      	cmp	r3, #64	; 0x40
 800b4a0:	d007      	beq.n	800b4b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ba:	d14b      	bne.n	800b554 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_SPI_Transmit+0xf6>
 800b4c4:	8afb      	ldrh	r3, [r7, #22]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d13e      	bne.n	800b548 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	881a      	ldrh	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4da:	1c9a      	adds	r2, r3, #2
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b4ee:	e02b      	b.n	800b548 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d112      	bne.n	800b524 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	881a      	ldrh	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	1c9a      	adds	r2, r3, #2
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b518:	b29b      	uxth	r3, r3
 800b51a:	3b01      	subs	r3, #1
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	86da      	strh	r2, [r3, #54]	; 0x36
 800b522:	e011      	b.n	800b548 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b524:	f7fb fe86 	bl	8007234 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d803      	bhi.n	800b53c <HAL_SPI_Transmit+0x168>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53a:	d102      	bne.n	800b542 <HAL_SPI_Transmit+0x16e>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d102      	bne.n	800b548 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b546:	e074      	b.n	800b632 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1ce      	bne.n	800b4f0 <HAL_SPI_Transmit+0x11c>
 800b552:	e04c      	b.n	800b5ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <HAL_SPI_Transmit+0x18e>
 800b55c:	8afb      	ldrh	r3, [r7, #22]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d140      	bne.n	800b5e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	330c      	adds	r3, #12
 800b56c:	7812      	ldrb	r2, [r2, #0]
 800b56e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b57e:	b29b      	uxth	r3, r3
 800b580:	3b01      	subs	r3, #1
 800b582:	b29a      	uxth	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b588:	e02c      	b.n	800b5e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f003 0302 	and.w	r3, r3, #2
 800b594:	2b02      	cmp	r3, #2
 800b596:	d113      	bne.n	800b5c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5be:	e011      	b.n	800b5e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5c0:	f7fb fe38 	bl	8007234 <HAL_GetTick>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d803      	bhi.n	800b5d8 <HAL_SPI_Transmit+0x204>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d6:	d102      	bne.n	800b5de <HAL_SPI_Transmit+0x20a>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d102      	bne.n	800b5e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b5e2:	e026      	b.n	800b632 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1cd      	bne.n	800b58a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fa62 	bl	800babc <SPI_EndRxTxTransaction>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2220      	movs	r2, #32
 800b602:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	613b      	str	r3, [r7, #16]
 800b620:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	2b00      	cmp	r3, #0
 800b628:	d002      	beq.n	800b630 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e000      	b.n	800b632 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b642:	7ffb      	ldrb	r3, [r7, #31]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3720      	adds	r7, #32
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08c      	sub	sp, #48	; 0x30
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b65a:	2301      	movs	r3, #1
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_SPI_TransmitReceive+0x26>
 800b66e:	2302      	movs	r3, #2
 800b670:	e18a      	b.n	800b988 <HAL_SPI_TransmitReceive+0x33c>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b67a:	f7fb fddb 	bl	8007234 <HAL_GetTick>
 800b67e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b690:	887b      	ldrh	r3, [r7, #2]
 800b692:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d00f      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x70>
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6a2:	d107      	bne.n	800b6b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <HAL_SPI_TransmitReceive+0x68>
 800b6ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d003      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6ba:	e15b      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <HAL_SPI_TransmitReceive+0x82>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <HAL_SPI_TransmitReceive+0x82>
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6d4:	e14e      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d003      	beq.n	800b6ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	887a      	ldrh	r2, [r7, #2]
 800b6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	887a      	ldrh	r2, [r7, #2]
 800b700:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	887a      	ldrh	r2, [r7, #2]
 800b70c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	887a      	ldrh	r2, [r7, #2]
 800b712:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	d007      	beq.n	800b73e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b73c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b746:	d178      	bne.n	800b83a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <HAL_SPI_TransmitReceive+0x10a>
 800b750:	8b7b      	ldrh	r3, [r7, #26]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d166      	bne.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	881a      	ldrh	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	1c9a      	adds	r2, r3, #2
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b770:	b29b      	uxth	r3, r3
 800b772:	3b01      	subs	r3, #1
 800b774:	b29a      	uxth	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b77a:	e053      	b.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	2b02      	cmp	r3, #2
 800b788:	d11b      	bne.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d016      	beq.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	2b01      	cmp	r3, #1
 800b798:	d113      	bne.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	881a      	ldrh	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	1c9a      	adds	r2, r3, #2
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d119      	bne.n	800b804 <HAL_SPI_TransmitReceive+0x1b8>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d014      	beq.n	800b804 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	b292      	uxth	r2, r2
 800b7e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	1c9a      	adds	r2, r3, #2
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b800:	2301      	movs	r3, #1
 800b802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b804:	f7fb fd16 	bl	8007234 <HAL_GetTick>
 800b808:	4602      	mov	r2, r0
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b810:	429a      	cmp	r2, r3
 800b812:	d807      	bhi.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d003      	beq.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b81c:	2303      	movs	r3, #3
 800b81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b822:	e0a7      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1a6      	bne.n	800b77c <HAL_SPI_TransmitReceive+0x130>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b832:	b29b      	uxth	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1a1      	bne.n	800b77c <HAL_SPI_TransmitReceive+0x130>
 800b838:	e07c      	b.n	800b934 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <HAL_SPI_TransmitReceive+0x1fc>
 800b842:	8b7b      	ldrh	r3, [r7, #26]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d16b      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	7812      	ldrb	r2, [r2, #0]
 800b854:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85a:	1c5a      	adds	r2, r3, #1
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b864:	b29b      	uxth	r3, r3
 800b866:	3b01      	subs	r3, #1
 800b868:	b29a      	uxth	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b86e:	e057      	b.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d11c      	bne.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d114      	bne.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	330c      	adds	r3, #12
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d119      	bne.n	800b8fa <HAL_SPI_TransmitReceive+0x2ae>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d014      	beq.n	800b8fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b8fa:	f7fb fc9b 	bl	8007234 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b906:	429a      	cmp	r2, r3
 800b908:	d803      	bhi.n	800b912 <HAL_SPI_TransmitReceive+0x2c6>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b910:	d102      	bne.n	800b918 <HAL_SPI_TransmitReceive+0x2cc>
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b91e:	e029      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1a2      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x224>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b92e:	b29b      	uxth	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d19d      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f8bf 	bl	800babc <SPI_EndRxTxTransaction>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2220      	movs	r2, #32
 800b94e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b950:	e010      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	e000      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b972:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3730      	adds	r7, #48	; 0x30
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b99e:	b2db      	uxtb	r3, r3
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9bc:	f7fb fc3a 	bl	8007234 <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9cc:	f7fb fc32 	bl	8007234 <HAL_GetTick>
 800b9d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9d2:	4b39      	ldr	r3, [pc, #228]	; (800bab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	015b      	lsls	r3, r3, #5
 800b9d8:	0d1b      	lsrs	r3, r3, #20
 800b9da:	69fa      	ldr	r2, [r7, #28]
 800b9dc:	fb02 f303 	mul.w	r3, r2, r3
 800b9e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9e2:	e054      	b.n	800ba8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d050      	beq.n	800ba8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9ec:	f7fb fc22 	bl	8007234 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d902      	bls.n	800ba02 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d13d      	bne.n	800ba7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba1a:	d111      	bne.n	800ba40 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba24:	d004      	beq.n	800ba30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2e:	d107      	bne.n	800ba40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba48:	d10f      	bne.n	800ba6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e017      	b.n	800baae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4013      	ands	r3, r2
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	bf0c      	ite	eq
 800ba9e:	2301      	moveq	r3, #1
 800baa0:	2300      	movne	r3, #0
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	461a      	mov	r2, r3
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d19b      	bne.n	800b9e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	2000000c 	.word	0x2000000c

0800babc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af02      	add	r7, sp, #8
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bac8:	4b1b      	ldr	r3, [pc, #108]	; (800bb38 <SPI_EndRxTxTransaction+0x7c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a1b      	ldr	r2, [pc, #108]	; (800bb3c <SPI_EndRxTxTransaction+0x80>)
 800bace:	fba2 2303 	umull	r2, r3, r2, r3
 800bad2:	0d5b      	lsrs	r3, r3, #21
 800bad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bad8:	fb02 f303 	mul.w	r3, r2, r3
 800badc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bae6:	d112      	bne.n	800bb0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2200      	movs	r2, #0
 800baf0:	2180      	movs	r1, #128	; 0x80
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7ff ff5a 	bl	800b9ac <SPI_WaitFlagStateUntilTimeout>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d016      	beq.n	800bb2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb02:	f043 0220 	orr.w	r2, r3, #32
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	e00f      	b.n	800bb2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00a      	beq.n	800bb2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	2b80      	cmp	r3, #128	; 0x80
 800bb26:	d0f2      	beq.n	800bb0e <SPI_EndRxTxTransaction+0x52>
 800bb28:	e000      	b.n	800bb2c <SPI_EndRxTxTransaction+0x70>
        break;
 800bb2a:	bf00      	nop
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000000c 	.word	0x2000000c
 800bb3c:	165e9f81 	.word	0x165e9f81

0800bb40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e03f      	b.n	800bbd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7fa fa5c 	bl	8006024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2224      	movs	r2, #36	; 0x24
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 f87b 	bl	800cc80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	691a      	ldr	r2, [r3, #16]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	695a      	ldr	r2, [r3, #20]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68da      	ldr	r2, [r3, #12]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e021      	b.n	800bc30 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2224      	movs	r2, #36	; 0x24
 800bbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68da      	ldr	r2, [r3, #12]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc02:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7fa fbfb 	bl	8006400 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	; 0x28
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4613      	mov	r3, r2
 800bc46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b20      	cmp	r3, #32
 800bc56:	d17c      	bne.n	800bd52 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_UART_Transmit+0x2c>
 800bc5e:	88fb      	ldrh	r3, [r7, #6]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e075      	b.n	800bd54 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <HAL_UART_Transmit+0x3e>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e06e      	b.n	800bd54 <HAL_UART_Transmit+0x11c>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2221      	movs	r2, #33	; 0x21
 800bc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc8c:	f7fb fad2 	bl	8007234 <HAL_GetTick>
 800bc90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	88fa      	ldrh	r2, [r7, #6]
 800bc96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	88fa      	ldrh	r2, [r7, #6]
 800bc9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bca6:	d108      	bne.n	800bcba <HAL_UART_Transmit+0x82>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	61bb      	str	r3, [r7, #24]
 800bcb8:	e003      	b.n	800bcc2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bcca:	e02a      	b.n	800bd22 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2180      	movs	r1, #128	; 0x80
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fd03 	bl	800c6e2 <UART_WaitOnFlagUntilTimeout>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e036      	b.n	800bd54 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10b      	bne.n	800bd04 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcfa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	3302      	adds	r3, #2
 800bd00:	61bb      	str	r3, [r7, #24]
 800bd02:	e007      	b.n	800bd14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	781a      	ldrb	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	3301      	adds	r3, #1
 800bd12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1cf      	bne.n	800bccc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2200      	movs	r2, #0
 800bd34:	2140      	movs	r1, #64	; 0x40
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 fcd3 	bl	800c6e2 <UART_WaitOnFlagUntilTimeout>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	e006      	b.n	800bd54 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e000      	b.n	800bd54 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bd52:	2302      	movs	r3, #2
  }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	d165      	bne.n	800be42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <HAL_UART_Transmit_DMA+0x26>
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e05e      	b.n	800be44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d101      	bne.n	800bd94 <HAL_UART_Transmit_DMA+0x38>
 800bd90:	2302      	movs	r3, #2
 800bd92:	e057      	b.n	800be44 <HAL_UART_Transmit_DMA+0xe8>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	88fa      	ldrh	r2, [r7, #6]
 800bda6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	88fa      	ldrh	r2, [r7, #6]
 800bdac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2221      	movs	r2, #33	; 0x21
 800bdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	4a22      	ldr	r2, [pc, #136]	; (800be4c <HAL_UART_Transmit_DMA+0xf0>)
 800bdc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc8:	4a21      	ldr	r2, [pc, #132]	; (800be50 <HAL_UART_Transmit_DMA+0xf4>)
 800bdca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd0:	4a20      	ldr	r2, [pc, #128]	; (800be54 <HAL_UART_Transmit_DMA+0xf8>)
 800bdd2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd8:	2200      	movs	r2, #0
 800bdda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bddc:	f107 0308 	add.w	r3, r7, #8
 800bde0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	6819      	ldr	r1, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	88fb      	ldrh	r3, [r7, #6]
 800bdf4:	f7fc f8ae 	bl	8007f54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3314      	adds	r3, #20
 800be10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	617b      	str	r3, [r7, #20]
   return(result);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	62bb      	str	r3, [r7, #40]	; 0x28
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3314      	adds	r3, #20
 800be28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2a:	627a      	str	r2, [r7, #36]	; 0x24
 800be2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6a39      	ldr	r1, [r7, #32]
 800be30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	61fb      	str	r3, [r7, #28]
   return(result);
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e5      	bne.n	800be0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	e000      	b.n	800be44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800be42:	2302      	movs	r3, #2
  }
}
 800be44:	4618      	mov	r0, r3
 800be46:	3730      	adds	r7, #48	; 0x30
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	0800c43d 	.word	0x0800c43d
 800be50:	0800c4d7 	.word	0x0800c4d7
 800be54:	0800c64f 	.word	0x0800c64f

0800be58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d11d      	bne.n	800beae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <HAL_UART_Receive_DMA+0x26>
 800be78:	88fb      	ldrh	r3, [r7, #6]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e016      	b.n	800beb0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d101      	bne.n	800be90 <HAL_UART_Receive_DMA+0x38>
 800be8c:	2302      	movs	r3, #2
 800be8e:	e00f      	b.n	800beb0 <HAL_UART_Receive_DMA+0x58>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	461a      	mov	r2, r3
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f000 fc8b 	bl	800c7c0 <UART_Start_Receive_DMA>
 800beaa:	4603      	mov	r3, r0
 800beac:	e000      	b.n	800beb0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800beae:	2302      	movs	r3, #2
  }
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b0ba      	sub	sp, #232	; 0xe8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bede:	2300      	movs	r3, #0
 800bee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bee4:	2300      	movs	r3, #0
 800bee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800beea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10f      	bne.n	800bf1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf02:	f003 0320 	and.w	r3, r3, #32
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <HAL_UART_IRQHandler+0x66>
 800bf0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0e:	f003 0320 	and.w	r3, r3, #32
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fdf7 	bl	800cb0a <UART_Receive_IT>
      return;
 800bf1c:	e256      	b.n	800c3cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 80de 	beq.w	800c0e4 <HAL_UART_IRQHandler+0x22c>
 800bf28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 80d1 	beq.w	800c0e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00b      	beq.n	800bf66 <HAL_UART_IRQHandler+0xae>
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	f043 0201 	orr.w	r2, r3, #1
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00b      	beq.n	800bf8a <HAL_UART_IRQHandler+0xd2>
 800bf72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d005      	beq.n	800bf8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	f043 0202 	orr.w	r2, r3, #2
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf8e:	f003 0302 	and.w	r3, r3, #2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <HAL_UART_IRQHandler+0xf6>
 800bf96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d005      	beq.n	800bfae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa6:	f043 0204 	orr.w	r2, r3, #4
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bfae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfb2:	f003 0308 	and.w	r3, r3, #8
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d011      	beq.n	800bfde <HAL_UART_IRQHandler+0x126>
 800bfba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfbe:	f003 0320 	and.w	r3, r3, #32
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d105      	bne.n	800bfd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d005      	beq.n	800bfde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	f043 0208 	orr.w	r2, r3, #8
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 81ed 	beq.w	800c3c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d008      	beq.n	800c006 <HAL_UART_IRQHandler+0x14e>
 800bff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff8:	f003 0320 	and.w	r3, r3, #32
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fd82 	bl	800cb0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c010:	2b40      	cmp	r3, #64	; 0x40
 800c012:	bf0c      	ite	eq
 800c014:	2301      	moveq	r3, #1
 800c016:	2300      	movne	r3, #0
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	f003 0308 	and.w	r3, r3, #8
 800c026:	2b00      	cmp	r3, #0
 800c028:	d103      	bne.n	800c032 <HAL_UART_IRQHandler+0x17a>
 800c02a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d04f      	beq.n	800c0d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fc8a 	bl	800c94c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c042:	2b40      	cmp	r3, #64	; 0x40
 800c044:	d141      	bne.n	800c0ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3314      	adds	r3, #20
 800c04c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3314      	adds	r3, #20
 800c06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c072:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1d9      	bne.n	800c046 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c096:	2b00      	cmp	r3, #0
 800c098:	d013      	beq.n	800c0c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	4a7d      	ldr	r2, [pc, #500]	; (800c294 <HAL_UART_IRQHandler+0x3dc>)
 800c0a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fc f81c 	bl	80080e4 <HAL_DMA_Abort_IT>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d016      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c0:	e00e      	b.n	800c0e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f9a4 	bl	800c410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c8:	e00a      	b.n	800c0e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f9a0 	bl	800c410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d0:	e006      	b.n	800c0e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f99c 	bl	800c410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c0de:	e170      	b.n	800c3c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e0:	bf00      	nop
    return;
 800c0e2:	e16e      	b.n	800c3c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	f040 814a 	bne.w	800c382 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f2:	f003 0310 	and.w	r3, r3, #16
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8143 	beq.w	800c382 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c100:	f003 0310 	and.w	r3, r3, #16
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 813c 	beq.w	800c382 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c10a:	2300      	movs	r3, #0
 800c10c:	60bb      	str	r3, [r7, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60bb      	str	r3, [r7, #8]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	60bb      	str	r3, [r7, #8]
 800c11e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c12a:	2b40      	cmp	r3, #64	; 0x40
 800c12c:	f040 80b4 	bne.w	800c298 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c13c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 8140 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c14a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c14e:	429a      	cmp	r2, r3
 800c150:	f080 8139 	bcs.w	800c3c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c15a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c166:	f000 8088 	beq.w	800c27a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	330c      	adds	r3, #12
 800c170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c178:	e853 3f00 	ldrex	r3, [r3]
 800c17c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	330c      	adds	r3, #12
 800c192:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c196:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c19a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1d9      	bne.n	800c16a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3314      	adds	r3, #20
 800c1bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1c8:	f023 0301 	bic.w	r3, r3, #1
 800c1cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3314      	adds	r3, #20
 800c1d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1e6:	e841 2300 	strex	r3, r2, [r1]
 800c1ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1e1      	bne.n	800c1b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1fc:	e853 3f00 	ldrex	r3, [r3]
 800c200:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3314      	adds	r3, #20
 800c212:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c216:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c218:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c21c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e3      	bne.n	800c1f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	330c      	adds	r3, #12
 800c23e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c24a:	f023 0310 	bic.w	r3, r3, #16
 800c24e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	330c      	adds	r3, #12
 800c258:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c25c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c25e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e3      	bne.n	800c238 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c274:	4618      	mov	r0, r3
 800c276:	f7fb fec5 	bl	8008004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c282:	b29b      	uxth	r3, r3
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	b29b      	uxth	r3, r3
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f8ca 	bl	800c424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c290:	e099      	b.n	800c3c6 <HAL_UART_IRQHandler+0x50e>
 800c292:	bf00      	nop
 800c294:	0800ca13 	.word	0x0800ca13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 808b 	beq.w	800c3ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c2b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 8086 	beq.w	800c3ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	330c      	adds	r3, #12
 800c2c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	330c      	adds	r3, #12
 800c2de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c2e2:	647a      	str	r2, [r7, #68]	; 0x44
 800c2e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2ea:	e841 2300 	strex	r3, r2, [r1]
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1e3      	bne.n	800c2be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3314      	adds	r3, #20
 800c2fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	e853 3f00 	ldrex	r3, [r3]
 800c304:	623b      	str	r3, [r7, #32]
   return(result);
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	f023 0301 	bic.w	r3, r3, #1
 800c30c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3314      	adds	r3, #20
 800c316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c31a:	633a      	str	r2, [r7, #48]	; 0x30
 800c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e3      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	330c      	adds	r3, #12
 800c342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f023 0310 	bic.w	r3, r3, #16
 800c352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	330c      	adds	r3, #12
 800c35c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c360:	61fa      	str	r2, [r7, #28]
 800c362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	69b9      	ldr	r1, [r7, #24]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	617b      	str	r3, [r7, #20]
   return(result);
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e3      	bne.n	800c33c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f852 	bl	800c424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c380:	e023      	b.n	800c3ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x4ea>
 800c38e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fb4d 	bl	800ca3a <UART_Transmit_IT>
    return;
 800c3a0:	e014      	b.n	800c3cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00e      	beq.n	800c3cc <HAL_UART_IRQHandler+0x514>
 800c3ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d008      	beq.n	800c3cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fb8d 	bl	800cada <UART_EndTransmit_IT>
    return;
 800c3c0:	e004      	b.n	800c3cc <HAL_UART_IRQHandler+0x514>
    return;
 800c3c2:	bf00      	nop
 800c3c4:	e002      	b.n	800c3cc <HAL_UART_IRQHandler+0x514>
      return;
 800c3c6:	bf00      	nop
 800c3c8:	e000      	b.n	800c3cc <HAL_UART_IRQHandler+0x514>
      return;
 800c3ca:	bf00      	nop
  }
}
 800c3cc:	37e8      	adds	r7, #232	; 0xe8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop

0800c3d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b090      	sub	sp, #64	; 0x40
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c454:	2b00      	cmp	r3, #0
 800c456:	d137      	bne.n	800c4c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45a:	2200      	movs	r2, #0
 800c45c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3314      	adds	r3, #20
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	623b      	str	r3, [r7, #32]
   return(result);
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c474:	63bb      	str	r3, [r7, #56]	; 0x38
 800c476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3314      	adds	r3, #20
 800c47c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c47e:	633a      	str	r2, [r7, #48]	; 0x30
 800c480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e5      	bne.n	800c45e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	330c      	adds	r3, #12
 800c498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	330c      	adds	r3, #12
 800c4b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b2:	61fa      	str	r2, [r7, #28]
 800c4b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b6:	69b9      	ldr	r1, [r7, #24]
 800c4b8:	69fa      	ldr	r2, [r7, #28]
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	617b      	str	r3, [r7, #20]
   return(result);
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e5      	bne.n	800c492 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4c6:	e002      	b.n	800c4ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c4c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4ca:	f7ff ff83 	bl	800c3d4 <HAL_UART_TxCpltCallback>
}
 800c4ce:	bf00      	nop
 800c4d0:	3740      	adds	r7, #64	; 0x40
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7ff ff7f 	bl	800c3e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ea:	bf00      	nop
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b09c      	sub	sp, #112	; 0x70
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d172      	bne.n	800c5f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c510:	2200      	movs	r2, #0
 800c512:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	330c      	adds	r3, #12
 800c51a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c52a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	330c      	adds	r3, #12
 800c532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c534:	65ba      	str	r2, [r7, #88]	; 0x58
 800c536:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c53a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e5      	bne.n	800c514 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3314      	adds	r3, #20
 800c54e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	667b      	str	r3, [r7, #100]	; 0x64
 800c560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3314      	adds	r3, #20
 800c566:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c568:	647a      	str	r2, [r7, #68]	; 0x44
 800c56a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c56e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e5      	bne.n	800c548 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3314      	adds	r3, #20
 800c582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	e853 3f00 	ldrex	r3, [r3]
 800c58a:	623b      	str	r3, [r7, #32]
   return(result);
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c592:	663b      	str	r3, [r7, #96]	; 0x60
 800c594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3314      	adds	r3, #20
 800c59a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c59c:	633a      	str	r2, [r7, #48]	; 0x30
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e5      	bne.n	800c57c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d119      	bne.n	800c5f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	330c      	adds	r3, #12
 800c5c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f023 0310 	bic.w	r3, r3, #16
 800c5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	330c      	adds	r3, #12
 800c5de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5e0:	61fa      	str	r2, [r7, #28]
 800c5e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	69b9      	ldr	r1, [r7, #24]
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e5      	bne.n	800c5c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d106      	bne.n	800c60a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c600:	4619      	mov	r1, r3
 800c602:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c604:	f7ff ff0e 	bl	800c424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c608:	e002      	b.n	800c610 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c60a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c60c:	f7fa fb6e 	bl	8006cec <HAL_UART_RxCpltCallback>
}
 800c610:	bf00      	nop
 800c612:	3770      	adds	r7, #112	; 0x70
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c624:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d108      	bne.n	800c640 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	b29b      	uxth	r3, r3
 800c636:	4619      	mov	r1, r3
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fef3 	bl	800c424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c63e:	e002      	b.n	800c646 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff fedb 	bl	800c3fc <HAL_UART_RxHalfCpltCallback>
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c66a:	2b80      	cmp	r3, #128	; 0x80
 800c66c:	bf0c      	ite	eq
 800c66e:	2301      	moveq	r3, #1
 800c670:	2300      	movne	r3, #0
 800c672:	b2db      	uxtb	r3, r3
 800c674:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b21      	cmp	r3, #33	; 0x21
 800c680:	d108      	bne.n	800c694 <UART_DMAError+0x46>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2200      	movs	r2, #0
 800c68c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c68e:	68b8      	ldr	r0, [r7, #8]
 800c690:	f000 f934 	bl	800c8fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69e:	2b40      	cmp	r3, #64	; 0x40
 800c6a0:	bf0c      	ite	eq
 800c6a2:	2301      	moveq	r3, #1
 800c6a4:	2300      	movne	r3, #0
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b22      	cmp	r3, #34	; 0x22
 800c6b4:	d108      	bne.n	800c6c8 <UART_DMAError+0x7a>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c6c2:	68b8      	ldr	r0, [r7, #8]
 800c6c4:	f000 f942 	bl	800c94c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	f043 0210 	orr.w	r2, r3, #16
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6d4:	68b8      	ldr	r0, [r7, #8]
 800c6d6:	f7ff fe9b 	bl	800c410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6da:	bf00      	nop
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b090      	sub	sp, #64	; 0x40
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	603b      	str	r3, [r7, #0]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6f2:	e050      	b.n	800c796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fa:	d04c      	beq.n	800c796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <UART_WaitOnFlagUntilTimeout+0x30>
 800c702:	f7fa fd97 	bl	8007234 <HAL_GetTick>
 800c706:	4602      	mov	r2, r0
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c70e:	429a      	cmp	r2, r3
 800c710:	d241      	bcs.n	800c796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	330c      	adds	r3, #12
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	330c      	adds	r3, #12
 800c730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c732:	637a      	str	r2, [r7, #52]	; 0x34
 800c734:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e5      	bne.n	800c712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3314      	adds	r3, #20
 800c74c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	613b      	str	r3, [r7, #16]
   return(result);
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3314      	adds	r3, #20
 800c764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c766:	623a      	str	r2, [r7, #32]
 800c768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	69f9      	ldr	r1, [r7, #28]
 800c76c:	6a3a      	ldr	r2, [r7, #32]
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	61bb      	str	r3, [r7, #24]
   return(result);
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e5      	bne.n	800c746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2220      	movs	r2, #32
 800c77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2220      	movs	r2, #32
 800c786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c792:	2303      	movs	r3, #3
 800c794:	e00f      	b.n	800c7b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2301      	moveq	r3, #1
 800c7a8:	2300      	movne	r3, #0
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d09f      	beq.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3740      	adds	r7, #64	; 0x40
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b098      	sub	sp, #96	; 0x60
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	88fa      	ldrh	r2, [r7, #6]
 800c7d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2222      	movs	r2, #34	; 0x22
 800c7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ec:	4a40      	ldr	r2, [pc, #256]	; (800c8f0 <UART_Start_Receive_DMA+0x130>)
 800c7ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	4a3f      	ldr	r2, [pc, #252]	; (800c8f4 <UART_Start_Receive_DMA+0x134>)
 800c7f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fc:	4a3e      	ldr	r2, [pc, #248]	; (800c8f8 <UART_Start_Receive_DMA+0x138>)
 800c7fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	2200      	movs	r2, #0
 800c806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3304      	adds	r3, #4
 800c818:	4619      	mov	r1, r3
 800c81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	88fb      	ldrh	r3, [r7, #6]
 800c820:	f7fb fb98 	bl	8007f54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c824:	2300      	movs	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	613b      	str	r3, [r7, #16]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d019      	beq.n	800c87e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	330c      	adds	r3, #12
 800c850:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c854:	e853 3f00 	ldrex	r3, [r3]
 800c858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c860:	65bb      	str	r3, [r7, #88]	; 0x58
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	330c      	adds	r3, #12
 800c868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c86a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c86c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e5      	bne.n	800c84a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3314      	adds	r3, #20
 800c884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	f043 0301 	orr.w	r3, r3, #1
 800c894:	657b      	str	r3, [r7, #84]	; 0x54
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3314      	adds	r3, #20
 800c89c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c89e:	63ba      	str	r2, [r7, #56]	; 0x38
 800c8a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e5      	bne.n	800c87e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3314      	adds	r3, #20
 800c8b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c8:	653b      	str	r3, [r7, #80]	; 0x50
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3314      	adds	r3, #20
 800c8d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8d2:	627a      	str	r2, [r7, #36]	; 0x24
 800c8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6a39      	ldr	r1, [r7, #32]
 800c8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e5      	bne.n	800c8b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3760      	adds	r7, #96	; 0x60
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	0800c4f3 	.word	0x0800c4f3
 800c8f4:	0800c619 	.word	0x0800c619
 800c8f8:	0800c64f 	.word	0x0800c64f

0800c8fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b089      	sub	sp, #36	; 0x24
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	330c      	adds	r3, #12
 800c90a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	60bb      	str	r3, [r7, #8]
   return(result);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c91a:	61fb      	str	r3, [r7, #28]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	330c      	adds	r3, #12
 800c922:	69fa      	ldr	r2, [r7, #28]
 800c924:	61ba      	str	r2, [r7, #24]
 800c926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6979      	ldr	r1, [r7, #20]
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	613b      	str	r3, [r7, #16]
   return(result);
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e5      	bne.n	800c904 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c940:	bf00      	nop
 800c942:	3724      	adds	r7, #36	; 0x24
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b095      	sub	sp, #84	; 0x54
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	330c      	adds	r3, #12
 800c95a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	e853 3f00 	ldrex	r3, [r3]
 800c962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c96a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	330c      	adds	r3, #12
 800c972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c974:	643a      	str	r2, [r7, #64]	; 0x40
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c97a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c97c:	e841 2300 	strex	r3, r2, [r1]
 800c980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1e5      	bne.n	800c954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3314      	adds	r3, #20
 800c98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	e853 3f00 	ldrex	r3, [r3]
 800c996:	61fb      	str	r3, [r7, #28]
   return(result);
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	f023 0301 	bic.w	r3, r3, #1
 800c99e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3314      	adds	r3, #20
 800c9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e5      	bne.n	800c988 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d119      	bne.n	800c9f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	330c      	adds	r3, #12
 800c9ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	e853 3f00 	ldrex	r3, [r3]
 800c9d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f023 0310 	bic.w	r3, r3, #16
 800c9da:	647b      	str	r3, [r7, #68]	; 0x44
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e4:	61ba      	str	r2, [r7, #24]
 800c9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	6979      	ldr	r1, [r7, #20]
 800c9ea:	69ba      	ldr	r2, [r7, #24]
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e5      	bne.n	800c9c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ca06:	bf00      	nop
 800ca08:	3754      	adds	r7, #84	; 0x54
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b084      	sub	sp, #16
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f7ff fcef 	bl	800c410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca32:	bf00      	nop
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b21      	cmp	r3, #33	; 0x21
 800ca4c:	d13e      	bne.n	800cacc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca56:	d114      	bne.n	800ca82 <UART_Transmit_IT+0x48>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d110      	bne.n	800ca82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	1c9a      	adds	r2, r3, #2
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	621a      	str	r2, [r3, #32]
 800ca80:	e008      	b.n	800ca94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	1c59      	adds	r1, r3, #1
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	6211      	str	r1, [r2, #32]
 800ca8c:	781a      	ldrb	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	4619      	mov	r1, r3
 800caa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10f      	bne.n	800cac8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cab6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cac6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	e000      	b.n	800cace <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cacc:	2302      	movs	r3, #2
  }
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68da      	ldr	r2, [r3, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7ff fc6a 	bl	800c3d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b08c      	sub	sp, #48	; 0x30
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b22      	cmp	r3, #34	; 0x22
 800cb1c:	f040 80ab 	bne.w	800cc76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb28:	d117      	bne.n	800cb5a <UART_Receive_IT+0x50>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d113      	bne.n	800cb5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cb32:	2300      	movs	r3, #0
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	1c9a      	adds	r2, r3, #2
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	629a      	str	r2, [r3, #40]	; 0x28
 800cb58:	e026      	b.n	800cba8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb6c:	d007      	beq.n	800cb7e <UART_Receive_IT+0x74>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <UART_Receive_IT+0x82>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	e008      	b.n	800cb9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d15a      	bne.n	800cc72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68da      	ldr	r2, [r3, #12]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 0220 	bic.w	r2, r2, #32
 800cbca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68da      	ldr	r2, [r3, #12]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	695a      	ldr	r2, [r3, #20]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0201 	bic.w	r2, r2, #1
 800cbea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2220      	movs	r2, #32
 800cbf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d135      	bne.n	800cc68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	330c      	adds	r3, #12
 800cc08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	e853 3f00 	ldrex	r3, [r3]
 800cc10:	613b      	str	r3, [r7, #16]
   return(result);
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f023 0310 	bic.w	r3, r3, #16
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	330c      	adds	r3, #12
 800cc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc22:	623a      	str	r2, [r7, #32]
 800cc24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc26:	69f9      	ldr	r1, [r7, #28]
 800cc28:	6a3a      	ldr	r2, [r7, #32]
 800cc2a:	e841 2300 	strex	r3, r2, [r1]
 800cc2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e5      	bne.n	800cc02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0310 	and.w	r3, r3, #16
 800cc40:	2b10      	cmp	r3, #16
 800cc42:	d10a      	bne.n	800cc5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc44:	2300      	movs	r3, #0
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	60fb      	str	r3, [r7, #12]
 800cc58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fbdf 	bl	800c424 <HAL_UARTEx_RxEventCallback>
 800cc66:	e002      	b.n	800cc6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7fa f83f 	bl	8006cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e002      	b.n	800cc78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e000      	b.n	800cc78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cc76:	2302      	movs	r3, #2
  }
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3730      	adds	r7, #48	; 0x30
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc84:	b0c0      	sub	sp, #256	; 0x100
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9c:	68d9      	ldr	r1, [r3, #12]
 800cc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	ea40 0301 	orr.w	r3, r0, r1
 800cca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ccd8:	f021 010c 	bic.w	r1, r1, #12
 800ccdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cce6:	430b      	orrs	r3, r1
 800cce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ccea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ccf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfa:	6999      	ldr	r1, [r3, #24]
 800ccfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	ea40 0301 	orr.w	r3, r0, r1
 800cd06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	4b8f      	ldr	r3, [pc, #572]	; (800cf4c <UART_SetConfig+0x2cc>)
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d005      	beq.n	800cd20 <UART_SetConfig+0xa0>
 800cd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	4b8d      	ldr	r3, [pc, #564]	; (800cf50 <UART_SetConfig+0x2d0>)
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d104      	bne.n	800cd2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd20:	f7fd f8ce 	bl	8009ec0 <HAL_RCC_GetPCLK2Freq>
 800cd24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cd28:	e003      	b.n	800cd32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd2a:	f7fd f8b5 	bl	8009e98 <HAL_RCC_GetPCLK1Freq>
 800cd2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd3c:	f040 810c 	bne.w	800cf58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd44:	2200      	movs	r2, #0
 800cd46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cd52:	4622      	mov	r2, r4
 800cd54:	462b      	mov	r3, r5
 800cd56:	1891      	adds	r1, r2, r2
 800cd58:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd5a:	415b      	adcs	r3, r3
 800cd5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cd62:	4621      	mov	r1, r4
 800cd64:	eb12 0801 	adds.w	r8, r2, r1
 800cd68:	4629      	mov	r1, r5
 800cd6a:	eb43 0901 	adc.w	r9, r3, r1
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd82:	4690      	mov	r8, r2
 800cd84:	4699      	mov	r9, r3
 800cd86:	4623      	mov	r3, r4
 800cd88:	eb18 0303 	adds.w	r3, r8, r3
 800cd8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cd90:	462b      	mov	r3, r5
 800cd92:	eb49 0303 	adc.w	r3, r9, r3
 800cd96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cda6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cdaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cdae:	460b      	mov	r3, r1
 800cdb0:	18db      	adds	r3, r3, r3
 800cdb2:	653b      	str	r3, [r7, #80]	; 0x50
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	eb42 0303 	adc.w	r3, r2, r3
 800cdba:	657b      	str	r3, [r7, #84]	; 0x54
 800cdbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cdc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cdc4:	f7f4 f8de 	bl	8000f84 <__aeabi_uldivmod>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4b61      	ldr	r3, [pc, #388]	; (800cf54 <UART_SetConfig+0x2d4>)
 800cdce:	fba3 2302 	umull	r2, r3, r3, r2
 800cdd2:	095b      	lsrs	r3, r3, #5
 800cdd4:	011c      	lsls	r4, r3, #4
 800cdd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdda:	2200      	movs	r2, #0
 800cddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cde0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cde4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cde8:	4642      	mov	r2, r8
 800cdea:	464b      	mov	r3, r9
 800cdec:	1891      	adds	r1, r2, r2
 800cdee:	64b9      	str	r1, [r7, #72]	; 0x48
 800cdf0:	415b      	adcs	r3, r3
 800cdf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	eb12 0a01 	adds.w	sl, r2, r1
 800cdfe:	4649      	mov	r1, r9
 800ce00:	eb43 0b01 	adc.w	fp, r3, r1
 800ce04:	f04f 0200 	mov.w	r2, #0
 800ce08:	f04f 0300 	mov.w	r3, #0
 800ce0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce18:	4692      	mov	sl, r2
 800ce1a:	469b      	mov	fp, r3
 800ce1c:	4643      	mov	r3, r8
 800ce1e:	eb1a 0303 	adds.w	r3, sl, r3
 800ce22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce26:	464b      	mov	r3, r9
 800ce28:	eb4b 0303 	adc.w	r3, fp, r3
 800ce2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ce40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce44:	460b      	mov	r3, r1
 800ce46:	18db      	adds	r3, r3, r3
 800ce48:	643b      	str	r3, [r7, #64]	; 0x40
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	eb42 0303 	adc.w	r3, r2, r3
 800ce50:	647b      	str	r3, [r7, #68]	; 0x44
 800ce52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce5a:	f7f4 f893 	bl	8000f84 <__aeabi_uldivmod>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4611      	mov	r1, r2
 800ce64:	4b3b      	ldr	r3, [pc, #236]	; (800cf54 <UART_SetConfig+0x2d4>)
 800ce66:	fba3 2301 	umull	r2, r3, r3, r1
 800ce6a:	095b      	lsrs	r3, r3, #5
 800ce6c:	2264      	movs	r2, #100	; 0x64
 800ce6e:	fb02 f303 	mul.w	r3, r2, r3
 800ce72:	1acb      	subs	r3, r1, r3
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ce7a:	4b36      	ldr	r3, [pc, #216]	; (800cf54 <UART_SetConfig+0x2d4>)
 800ce7c:	fba3 2302 	umull	r2, r3, r3, r2
 800ce80:	095b      	lsrs	r3, r3, #5
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ce88:	441c      	add	r4, r3
 800ce8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ce98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	464b      	mov	r3, r9
 800cea0:	1891      	adds	r1, r2, r2
 800cea2:	63b9      	str	r1, [r7, #56]	; 0x38
 800cea4:	415b      	adcs	r3, r3
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ceac:	4641      	mov	r1, r8
 800ceae:	1851      	adds	r1, r2, r1
 800ceb0:	6339      	str	r1, [r7, #48]	; 0x30
 800ceb2:	4649      	mov	r1, r9
 800ceb4:	414b      	adcs	r3, r1
 800ceb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ceb8:	f04f 0200 	mov.w	r2, #0
 800cebc:	f04f 0300 	mov.w	r3, #0
 800cec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cec4:	4659      	mov	r1, fp
 800cec6:	00cb      	lsls	r3, r1, #3
 800cec8:	4651      	mov	r1, sl
 800ceca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cece:	4651      	mov	r1, sl
 800ced0:	00ca      	lsls	r2, r1, #3
 800ced2:	4610      	mov	r0, r2
 800ced4:	4619      	mov	r1, r3
 800ced6:	4603      	mov	r3, r0
 800ced8:	4642      	mov	r2, r8
 800ceda:	189b      	adds	r3, r3, r2
 800cedc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cee0:	464b      	mov	r3, r9
 800cee2:	460a      	mov	r2, r1
 800cee4:	eb42 0303 	adc.w	r3, r2, r3
 800cee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ceec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cef8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cefc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cf00:	460b      	mov	r3, r1
 800cf02:	18db      	adds	r3, r3, r3
 800cf04:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf06:	4613      	mov	r3, r2
 800cf08:	eb42 0303 	adc.w	r3, r2, r3
 800cf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cf16:	f7f4 f835 	bl	8000f84 <__aeabi_uldivmod>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <UART_SetConfig+0x2d4>)
 800cf20:	fba3 1302 	umull	r1, r3, r3, r2
 800cf24:	095b      	lsrs	r3, r3, #5
 800cf26:	2164      	movs	r1, #100	; 0x64
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	3332      	adds	r3, #50	; 0x32
 800cf32:	4a08      	ldr	r2, [pc, #32]	; (800cf54 <UART_SetConfig+0x2d4>)
 800cf34:	fba2 2303 	umull	r2, r3, r2, r3
 800cf38:	095b      	lsrs	r3, r3, #5
 800cf3a:	f003 0207 	and.w	r2, r3, #7
 800cf3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4422      	add	r2, r4
 800cf46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf48:	e105      	b.n	800d156 <UART_SetConfig+0x4d6>
 800cf4a:	bf00      	nop
 800cf4c:	40011000 	.word	0x40011000
 800cf50:	40011400 	.word	0x40011400
 800cf54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cf66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cf6a:	4642      	mov	r2, r8
 800cf6c:	464b      	mov	r3, r9
 800cf6e:	1891      	adds	r1, r2, r2
 800cf70:	6239      	str	r1, [r7, #32]
 800cf72:	415b      	adcs	r3, r3
 800cf74:	627b      	str	r3, [r7, #36]	; 0x24
 800cf76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf7a:	4641      	mov	r1, r8
 800cf7c:	1854      	adds	r4, r2, r1
 800cf7e:	4649      	mov	r1, r9
 800cf80:	eb43 0501 	adc.w	r5, r3, r1
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	f04f 0300 	mov.w	r3, #0
 800cf8c:	00eb      	lsls	r3, r5, #3
 800cf8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf92:	00e2      	lsls	r2, r4, #3
 800cf94:	4614      	mov	r4, r2
 800cf96:	461d      	mov	r5, r3
 800cf98:	4643      	mov	r3, r8
 800cf9a:	18e3      	adds	r3, r4, r3
 800cf9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfa0:	464b      	mov	r3, r9
 800cfa2:	eb45 0303 	adc.w	r3, r5, r3
 800cfa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cfaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cfba:	f04f 0200 	mov.w	r2, #0
 800cfbe:	f04f 0300 	mov.w	r3, #0
 800cfc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	008b      	lsls	r3, r1, #2
 800cfca:	4621      	mov	r1, r4
 800cfcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	008a      	lsls	r2, r1, #2
 800cfd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cfd8:	f7f3 ffd4 	bl	8000f84 <__aeabi_uldivmod>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4b60      	ldr	r3, [pc, #384]	; (800d164 <UART_SetConfig+0x4e4>)
 800cfe2:	fba3 2302 	umull	r2, r3, r3, r2
 800cfe6:	095b      	lsrs	r3, r3, #5
 800cfe8:	011c      	lsls	r4, r3, #4
 800cfea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cff4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cffc:	4642      	mov	r2, r8
 800cffe:	464b      	mov	r3, r9
 800d000:	1891      	adds	r1, r2, r2
 800d002:	61b9      	str	r1, [r7, #24]
 800d004:	415b      	adcs	r3, r3
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d00c:	4641      	mov	r1, r8
 800d00e:	1851      	adds	r1, r2, r1
 800d010:	6139      	str	r1, [r7, #16]
 800d012:	4649      	mov	r1, r9
 800d014:	414b      	adcs	r3, r1
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	f04f 0300 	mov.w	r3, #0
 800d020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d024:	4659      	mov	r1, fp
 800d026:	00cb      	lsls	r3, r1, #3
 800d028:	4651      	mov	r1, sl
 800d02a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d02e:	4651      	mov	r1, sl
 800d030:	00ca      	lsls	r2, r1, #3
 800d032:	4610      	mov	r0, r2
 800d034:	4619      	mov	r1, r3
 800d036:	4603      	mov	r3, r0
 800d038:	4642      	mov	r2, r8
 800d03a:	189b      	adds	r3, r3, r2
 800d03c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d040:	464b      	mov	r3, r9
 800d042:	460a      	mov	r2, r1
 800d044:	eb42 0303 	adc.w	r3, r2, r3
 800d048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	67bb      	str	r3, [r7, #120]	; 0x78
 800d056:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d064:	4649      	mov	r1, r9
 800d066:	008b      	lsls	r3, r1, #2
 800d068:	4641      	mov	r1, r8
 800d06a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d06e:	4641      	mov	r1, r8
 800d070:	008a      	lsls	r2, r1, #2
 800d072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d076:	f7f3 ff85 	bl	8000f84 <__aeabi_uldivmod>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4b39      	ldr	r3, [pc, #228]	; (800d164 <UART_SetConfig+0x4e4>)
 800d080:	fba3 1302 	umull	r1, r3, r3, r2
 800d084:	095b      	lsrs	r3, r3, #5
 800d086:	2164      	movs	r1, #100	; 0x64
 800d088:	fb01 f303 	mul.w	r3, r1, r3
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	3332      	adds	r3, #50	; 0x32
 800d092:	4a34      	ldr	r2, [pc, #208]	; (800d164 <UART_SetConfig+0x4e4>)
 800d094:	fba2 2303 	umull	r2, r3, r2, r3
 800d098:	095b      	lsrs	r3, r3, #5
 800d09a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d09e:	441c      	add	r4, r3
 800d0a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	673b      	str	r3, [r7, #112]	; 0x70
 800d0a8:	677a      	str	r2, [r7, #116]	; 0x74
 800d0aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d0ae:	4642      	mov	r2, r8
 800d0b0:	464b      	mov	r3, r9
 800d0b2:	1891      	adds	r1, r2, r2
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	415b      	adcs	r3, r3
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0be:	4641      	mov	r1, r8
 800d0c0:	1851      	adds	r1, r2, r1
 800d0c2:	6039      	str	r1, [r7, #0]
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	414b      	adcs	r3, r1
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	f04f 0200 	mov.w	r2, #0
 800d0ce:	f04f 0300 	mov.w	r3, #0
 800d0d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d0d6:	4659      	mov	r1, fp
 800d0d8:	00cb      	lsls	r3, r1, #3
 800d0da:	4651      	mov	r1, sl
 800d0dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0e0:	4651      	mov	r1, sl
 800d0e2:	00ca      	lsls	r2, r1, #3
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	189b      	adds	r3, r3, r2
 800d0ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	460a      	mov	r2, r1
 800d0f4:	eb42 0303 	adc.w	r3, r2, r3
 800d0f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	663b      	str	r3, [r7, #96]	; 0x60
 800d104:	667a      	str	r2, [r7, #100]	; 0x64
 800d106:	f04f 0200 	mov.w	r2, #0
 800d10a:	f04f 0300 	mov.w	r3, #0
 800d10e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d112:	4649      	mov	r1, r9
 800d114:	008b      	lsls	r3, r1, #2
 800d116:	4641      	mov	r1, r8
 800d118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d11c:	4641      	mov	r1, r8
 800d11e:	008a      	lsls	r2, r1, #2
 800d120:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d124:	f7f3 ff2e 	bl	8000f84 <__aeabi_uldivmod>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4b0d      	ldr	r3, [pc, #52]	; (800d164 <UART_SetConfig+0x4e4>)
 800d12e:	fba3 1302 	umull	r1, r3, r3, r2
 800d132:	095b      	lsrs	r3, r3, #5
 800d134:	2164      	movs	r1, #100	; 0x64
 800d136:	fb01 f303 	mul.w	r3, r1, r3
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	011b      	lsls	r3, r3, #4
 800d13e:	3332      	adds	r3, #50	; 0x32
 800d140:	4a08      	ldr	r2, [pc, #32]	; (800d164 <UART_SetConfig+0x4e4>)
 800d142:	fba2 2303 	umull	r2, r3, r2, r3
 800d146:	095b      	lsrs	r3, r3, #5
 800d148:	f003 020f 	and.w	r2, r3, #15
 800d14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4422      	add	r2, r4
 800d154:	609a      	str	r2, [r3, #8]
}
 800d156:	bf00      	nop
 800d158:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d15c:	46bd      	mov	sp, r7
 800d15e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d162:	bf00      	nop
 800d164:	51eb851f 	.word	0x51eb851f

0800d168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d16c:	4904      	ldr	r1, [pc, #16]	; (800d180 <MX_FATFS_Init+0x18>)
 800d16e:	4805      	ldr	r0, [pc, #20]	; (800d184 <MX_FATFS_Init+0x1c>)
 800d170:	f003 fa2c 	bl	80105cc <FATFS_LinkDriver>
 800d174:	4603      	mov	r3, r0
 800d176:	461a      	mov	r2, r3
 800d178:	4b03      	ldr	r3, [pc, #12]	; (800d188 <MX_FATFS_Init+0x20>)
 800d17a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d17c:	bf00      	nop
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20004714 	.word	0x20004714
 800d184:	20000018 	.word	0x20000018
 800d188:	20004710 	.word	0x20004710

0800d18c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d18c:	b480      	push	{r7}
 800d18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d190:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d192:	4618      	mov	r0, r3
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7f6 fcf5 	bl	8003b98 <SD_disk_initialize>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status (pdrv);
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7f6 fdd0 	bl	8003d6c <SD_disk_status>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	607a      	str	r2, [r7, #4]
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800d1e8:	7bf8      	ldrb	r0, [r7, #15]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	f7f6 fdd2 	bl	8003d98 <SD_disk_read>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	4603      	mov	r3, r0
 800d20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d210:	7bf8      	ldrb	r0, [r7, #15]
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	68b9      	ldr	r1, [r7, #8]
 800d218:	f7f6 fe28 	bl	8003e6c <SD_disk_write>
 800d21c:	4603      	mov	r3, r0
 800d21e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	603a      	str	r2, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
 800d234:	460b      	mov	r3, r1
 800d236:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	79b9      	ldrb	r1, [r7, #6]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	4618      	mov	r0, r3
 800d240:	f7f6 fe98 	bl	8003f74 <SD_disk_ioctl>
 800d244:	4603      	mov	r3, r0
 800d246:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	4a08      	ldr	r2, [pc, #32]	; (800d280 <disk_status+0x30>)
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	79fa      	ldrb	r2, [r7, #7]
 800d268:	4905      	ldr	r1, [pc, #20]	; (800d280 <disk_status+0x30>)
 800d26a:	440a      	add	r2, r1
 800d26c:	7a12      	ldrb	r2, [r2, #8]
 800d26e:	4610      	mov	r0, r2
 800d270:	4798      	blx	r3
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d276:	7bfb      	ldrb	r3, [r7, #15]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20004940 	.word	0x20004940

0800d284 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <disk_initialize+0x48>)
 800d296:	5cd3      	ldrb	r3, [r2, r3]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d111      	bne.n	800d2c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	4a0b      	ldr	r2, [pc, #44]	; (800d2cc <disk_initialize+0x48>)
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <disk_initialize+0x48>)
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	79fa      	ldrb	r2, [r7, #7]
 800d2b2:	4906      	ldr	r1, [pc, #24]	; (800d2cc <disk_initialize+0x48>)
 800d2b4:	440a      	add	r2, r1
 800d2b6:	7a12      	ldrb	r2, [r2, #8]
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	4798      	blx	r3
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20004940 	.word	0x20004940

0800d2d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2d0:	b590      	push	{r4, r7, lr}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	4a0a      	ldr	r2, [pc, #40]	; (800d30c <disk_read+0x3c>)
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	689c      	ldr	r4, [r3, #8]
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
 800d2ee:	4a07      	ldr	r2, [pc, #28]	; (800d30c <disk_read+0x3c>)
 800d2f0:	4413      	add	r3, r2
 800d2f2:	7a18      	ldrb	r0, [r3, #8]
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	47a0      	blx	r4
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800d300:	7dfb      	ldrb	r3, [r7, #23]
}
 800d302:	4618      	mov	r0, r3
 800d304:	371c      	adds	r7, #28
 800d306:	46bd      	mov	sp, r7
 800d308:	bd90      	pop	{r4, r7, pc}
 800d30a:	bf00      	nop
 800d30c:	20004940 	.word	0x20004940

0800d310 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d310:	b590      	push	{r4, r7, lr}
 800d312:	b087      	sub	sp, #28
 800d314:	af00      	add	r7, sp, #0
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	607a      	str	r2, [r7, #4]
 800d31a:	603b      	str	r3, [r7, #0]
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	4a0a      	ldr	r2, [pc, #40]	; (800d34c <disk_write+0x3c>)
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68dc      	ldr	r4, [r3, #12]
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
 800d32e:	4a07      	ldr	r2, [pc, #28]	; (800d34c <disk_write+0x3c>)
 800d330:	4413      	add	r3, r2
 800d332:	7a18      	ldrb	r0, [r3, #8]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	47a0      	blx	r4
 800d33c:	4603      	mov	r3, r0
 800d33e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d340:	7dfb      	ldrb	r3, [r7, #23]
}
 800d342:	4618      	mov	r0, r3
 800d344:	371c      	adds	r7, #28
 800d346:	46bd      	mov	sp, r7
 800d348:	bd90      	pop	{r4, r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20004940 	.word	0x20004940

0800d350 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	4603      	mov	r3, r0
 800d358:	603a      	str	r2, [r7, #0]
 800d35a:	71fb      	strb	r3, [r7, #7]
 800d35c:	460b      	mov	r3, r1
 800d35e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	4a09      	ldr	r2, [pc, #36]	; (800d388 <disk_ioctl+0x38>)
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	79fa      	ldrb	r2, [r7, #7]
 800d36e:	4906      	ldr	r1, [pc, #24]	; (800d388 <disk_ioctl+0x38>)
 800d370:	440a      	add	r2, r1
 800d372:	7a10      	ldrb	r0, [r2, #8]
 800d374:	79b9      	ldrb	r1, [r7, #6]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	4798      	blx	r3
 800d37a:	4603      	mov	r3, r0
 800d37c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20004940 	.word	0x20004940

0800d38c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3301      	adds	r3, #1
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	021b      	lsls	r3, r3, #8
 800d3a0:	b21a      	sxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b21b      	sxth	r3, r3
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	b21b      	sxth	r3, r3
 800d3ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3303      	adds	r3, #3
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	021b      	lsls	r3, r3, #8
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	3202      	adds	r2, #2
 800d3d4:	7812      	ldrb	r2, [r2, #0]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	7812      	ldrb	r2, [r2, #0]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	021b      	lsls	r3, r3, #8
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	7812      	ldrb	r2, [r2, #0]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	460b      	mov	r3, r1
 800d40c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	887a      	ldrh	r2, [r7, #2]
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	887b      	ldrh	r3, [r7, #2]
 800d41c:	0a1b      	lsrs	r3, r3, #8
 800d41e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	1c5a      	adds	r2, r3, #1
 800d424:	607a      	str	r2, [r7, #4]
 800d426:	887a      	ldrh	r2, [r7, #2]
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	701a      	strb	r2, [r3, #0]
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	b2d2      	uxtb	r2, r2
 800d44c:	701a      	strb	r2, [r3, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	0a1b      	lsrs	r3, r3, #8
 800d452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	0a1b      	lsrs	r3, r3, #8
 800d464:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	b2d2      	uxtb	r2, r2
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	0a1b      	lsrs	r3, r3, #8
 800d476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	b2d2      	uxtb	r2, r2
 800d482:	701a      	strb	r2, [r3, #0]
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00d      	beq.n	800d4c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	1c53      	adds	r3, r2, #1
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	1c59      	adds	r1, r3, #1
 800d4b4:	6179      	str	r1, [r7, #20]
 800d4b6:	7812      	ldrb	r2, [r2, #0]
 800d4b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	607b      	str	r3, [r7, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1f1      	bne.n	800d4aa <mem_cpy+0x1a>
	}
}
 800d4c6:	bf00      	nop
 800d4c8:	371c      	adds	r7, #28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4d2:	b480      	push	{r7}
 800d4d4:	b087      	sub	sp, #28
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	617a      	str	r2, [r7, #20]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1f3      	bne.n	800d4e2 <mem_set+0x10>
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	371c      	adds	r7, #28
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d508:	b480      	push	{r7}
 800d50a:	b089      	sub	sp, #36	; 0x24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	61fb      	str	r3, [r7, #28]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	61fa      	str	r2, [r7, #28]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	4619      	mov	r1, r3
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	61ba      	str	r2, [r7, #24]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	1acb      	subs	r3, r1, r3
 800d534:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3b01      	subs	r3, #1
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <mem_cmp+0x40>
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0eb      	beq.n	800d520 <mem_cmp+0x18>

	return r;
 800d548:	697b      	ldr	r3, [r7, #20]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3724      	adds	r7, #36	; 0x24
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d560:	e002      	b.n	800d568 <chk_chr+0x12>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3301      	adds	r3, #1
 800d566:	607b      	str	r3, [r7, #4]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <chk_chr+0x26>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	4293      	cmp	r3, r2
 800d57a:	d1f2      	bne.n	800d562 <chk_chr+0xc>
	return *str;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	781b      	ldrb	r3, [r3, #0]
}
 800d580:	4618      	mov	r0, r3
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d596:	2300      	movs	r3, #0
 800d598:	60bb      	str	r3, [r7, #8]
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	e029      	b.n	800d5f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5a0:	4a27      	ldr	r2, [pc, #156]	; (800d640 <chk_lock+0xb4>)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	4413      	add	r3, r2
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d01d      	beq.n	800d5ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5ae:	4a24      	ldr	r2, [pc, #144]	; (800d640 <chk_lock+0xb4>)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	011b      	lsls	r3, r3, #4
 800d5b4:	4413      	add	r3, r2
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d116      	bne.n	800d5ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5c0:	4a1f      	ldr	r2, [pc, #124]	; (800d640 <chk_lock+0xb4>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	011b      	lsls	r3, r3, #4
 800d5c6:	4413      	add	r3, r2
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d10c      	bne.n	800d5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5d4:	4a1a      	ldr	r2, [pc, #104]	; (800d640 <chk_lock+0xb4>)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	011b      	lsls	r3, r3, #4
 800d5da:	4413      	add	r3, r2
 800d5dc:	3308      	adds	r3, #8
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d102      	bne.n	800d5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5e8:	e007      	b.n	800d5fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d9d2      	bls.n	800d5a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d109      	bne.n	800d614 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d102      	bne.n	800d60c <chk_lock+0x80>
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d101      	bne.n	800d610 <chk_lock+0x84>
 800d60c:	2300      	movs	r3, #0
 800d60e:	e010      	b.n	800d632 <chk_lock+0xa6>
 800d610:	2312      	movs	r3, #18
 800d612:	e00e      	b.n	800d632 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d108      	bne.n	800d62c <chk_lock+0xa0>
 800d61a:	4a09      	ldr	r2, [pc, #36]	; (800d640 <chk_lock+0xb4>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	4413      	add	r3, r2
 800d622:	330c      	adds	r3, #12
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d62a:	d101      	bne.n	800d630 <chk_lock+0xa4>
 800d62c:	2310      	movs	r3, #16
 800d62e:	e000      	b.n	800d632 <chk_lock+0xa6>
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	20004720 	.word	0x20004720

0800d644 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d64a:	2300      	movs	r3, #0
 800d64c:	607b      	str	r3, [r7, #4]
 800d64e:	e002      	b.n	800d656 <enq_lock+0x12>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3301      	adds	r3, #1
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d806      	bhi.n	800d66a <enq_lock+0x26>
 800d65c:	4a09      	ldr	r2, [pc, #36]	; (800d684 <enq_lock+0x40>)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	011b      	lsls	r3, r3, #4
 800d662:	4413      	add	r3, r2
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1f2      	bne.n	800d650 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	bf14      	ite	ne
 800d670:	2301      	movne	r3, #1
 800d672:	2300      	moveq	r3, #0
 800d674:	b2db      	uxtb	r3, r3
}
 800d676:	4618      	mov	r0, r3
 800d678:	370c      	adds	r7, #12
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	20004720 	.word	0x20004720

0800d688 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	e01f      	b.n	800d6d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d698:	4a41      	ldr	r2, [pc, #260]	; (800d7a0 <inc_lock+0x118>)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	4413      	add	r3, r2
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d113      	bne.n	800d6d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6aa:	4a3d      	ldr	r2, [pc, #244]	; (800d7a0 <inc_lock+0x118>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	4413      	add	r3, r2
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d109      	bne.n	800d6d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6be:	4a38      	ldr	r2, [pc, #224]	; (800d7a0 <inc_lock+0x118>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	011b      	lsls	r3, r3, #4
 800d6c4:	4413      	add	r3, r2
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d006      	beq.n	800d6e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d9dc      	bls.n	800d698 <inc_lock+0x10>
 800d6de:	e000      	b.n	800d6e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d132      	bne.n	800d74e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	e002      	b.n	800d6f4 <inc_lock+0x6c>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d806      	bhi.n	800d708 <inc_lock+0x80>
 800d6fa:	4a29      	ldr	r2, [pc, #164]	; (800d7a0 <inc_lock+0x118>)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	011b      	lsls	r3, r3, #4
 800d700:	4413      	add	r3, r2
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1f2      	bne.n	800d6ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d101      	bne.n	800d712 <inc_lock+0x8a>
 800d70e:	2300      	movs	r3, #0
 800d710:	e040      	b.n	800d794 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	4922      	ldr	r1, [pc, #136]	; (800d7a0 <inc_lock+0x118>)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	011b      	lsls	r3, r3, #4
 800d71c:	440b      	add	r3, r1
 800d71e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689a      	ldr	r2, [r3, #8]
 800d724:	491e      	ldr	r1, [pc, #120]	; (800d7a0 <inc_lock+0x118>)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	440b      	add	r3, r1
 800d72c:	3304      	adds	r3, #4
 800d72e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	695a      	ldr	r2, [r3, #20]
 800d734:	491a      	ldr	r1, [pc, #104]	; (800d7a0 <inc_lock+0x118>)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	011b      	lsls	r3, r3, #4
 800d73a:	440b      	add	r3, r1
 800d73c:	3308      	adds	r3, #8
 800d73e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d740:	4a17      	ldr	r2, [pc, #92]	; (800d7a0 <inc_lock+0x118>)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	011b      	lsls	r3, r3, #4
 800d746:	4413      	add	r3, r2
 800d748:	330c      	adds	r3, #12
 800d74a:	2200      	movs	r2, #0
 800d74c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d009      	beq.n	800d768 <inc_lock+0xe0>
 800d754:	4a12      	ldr	r2, [pc, #72]	; (800d7a0 <inc_lock+0x118>)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	011b      	lsls	r3, r3, #4
 800d75a:	4413      	add	r3, r2
 800d75c:	330c      	adds	r3, #12
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <inc_lock+0xe0>
 800d764:	2300      	movs	r3, #0
 800d766:	e015      	b.n	800d794 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d108      	bne.n	800d780 <inc_lock+0xf8>
 800d76e:	4a0c      	ldr	r2, [pc, #48]	; (800d7a0 <inc_lock+0x118>)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	4413      	add	r3, r2
 800d776:	330c      	adds	r3, #12
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	e001      	b.n	800d784 <inc_lock+0xfc>
 800d780:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d784:	4906      	ldr	r1, [pc, #24]	; (800d7a0 <inc_lock+0x118>)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	011b      	lsls	r3, r3, #4
 800d78a:	440b      	add	r3, r1
 800d78c:	330c      	adds	r3, #12
 800d78e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3301      	adds	r3, #1
}
 800d794:	4618      	mov	r0, r3
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	20004720 	.word	0x20004720

0800d7a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	607b      	str	r3, [r7, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d825      	bhi.n	800d804 <dec_lock+0x60>
		n = Files[i].ctr;
 800d7b8:	4a17      	ldr	r2, [pc, #92]	; (800d818 <dec_lock+0x74>)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	011b      	lsls	r3, r3, #4
 800d7be:	4413      	add	r3, r2
 800d7c0:	330c      	adds	r3, #12
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7c6:	89fb      	ldrh	r3, [r7, #14]
 800d7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7cc:	d101      	bne.n	800d7d2 <dec_lock+0x2e>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7d2:	89fb      	ldrh	r3, [r7, #14]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <dec_lock+0x3a>
 800d7d8:	89fb      	ldrh	r3, [r7, #14]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d7de:	4a0e      	ldr	r2, [pc, #56]	; (800d818 <dec_lock+0x74>)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	011b      	lsls	r3, r3, #4
 800d7e4:	4413      	add	r3, r2
 800d7e6:	330c      	adds	r3, #12
 800d7e8:	89fa      	ldrh	r2, [r7, #14]
 800d7ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d7ec:	89fb      	ldrh	r3, [r7, #14]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d105      	bne.n	800d7fe <dec_lock+0x5a>
 800d7f2:	4a09      	ldr	r2, [pc, #36]	; (800d818 <dec_lock+0x74>)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	011b      	lsls	r3, r3, #4
 800d7f8:	4413      	add	r3, r2
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	737b      	strb	r3, [r7, #13]
 800d802:	e001      	b.n	800d808 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d804:	2302      	movs	r3, #2
 800d806:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d808:	7b7b      	ldrb	r3, [r7, #13]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	20004720 	.word	0x20004720

0800d81c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d824:	2300      	movs	r3, #0
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e010      	b.n	800d84c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d82a:	4a0d      	ldr	r2, [pc, #52]	; (800d860 <clear_lock+0x44>)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	011b      	lsls	r3, r3, #4
 800d830:	4413      	add	r3, r2
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	429a      	cmp	r2, r3
 800d838:	d105      	bne.n	800d846 <clear_lock+0x2a>
 800d83a:	4a09      	ldr	r2, [pc, #36]	; (800d860 <clear_lock+0x44>)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	011b      	lsls	r3, r3, #4
 800d840:	4413      	add	r3, r2
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d9eb      	bls.n	800d82a <clear_lock+0xe>
	}
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	20004720 	.word	0x20004720

0800d864 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	78db      	ldrb	r3, [r3, #3]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d034      	beq.n	800d8e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d87c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	7858      	ldrb	r0, [r3, #1]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d888:	2301      	movs	r3, #1
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	f7ff fd40 	bl	800d310 <disk_write>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d002      	beq.n	800d89c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d896:	2301      	movs	r3, #1
 800d898:	73fb      	strb	r3, [r7, #15]
 800d89a:	e022      	b.n	800d8e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	1ad2      	subs	r2, r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d217      	bcs.n	800d8e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	789b      	ldrb	r3, [r3, #2]
 800d8b6:	613b      	str	r3, [r7, #16]
 800d8b8:	e010      	b.n	800d8dc <sync_window+0x78>
					wsect += fs->fsize;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7858      	ldrb	r0, [r3, #1]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	697a      	ldr	r2, [r7, #20]
 800d8d2:	f7ff fd1d 	bl	800d310 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	613b      	str	r3, [r7, #16]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d8eb      	bhi.n	800d8ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d01b      	beq.n	800d93c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7ff ffad 	bl	800d864 <sync_window>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d113      	bne.n	800d93c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7858      	ldrb	r0, [r3, #1]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d91e:	2301      	movs	r3, #1
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	f7ff fcd5 	bl	800d2d0 <disk_read>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d92c:	f04f 33ff 	mov.w	r3, #4294967295
 800d930:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d932:	2301      	movs	r3, #1
 800d934:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ff87 	bl	800d864 <sync_window>
 800d956:	4603      	mov	r3, r0
 800d958:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d159      	bne.n	800da14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b03      	cmp	r3, #3
 800d966:	d149      	bne.n	800d9fc <sync_fs+0xb4>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	791b      	ldrb	r3, [r3, #4]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d145      	bne.n	800d9fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	899b      	ldrh	r3, [r3, #12]
 800d97a:	461a      	mov	r2, r3
 800d97c:	2100      	movs	r1, #0
 800d97e:	f7ff fda8 	bl	800d4d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	3338      	adds	r3, #56	; 0x38
 800d986:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d98a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff fd37 	bl	800d402 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	3338      	adds	r3, #56	; 0x38
 800d998:	4921      	ldr	r1, [pc, #132]	; (800da20 <sync_fs+0xd8>)
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fd4c 	bl	800d438 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3338      	adds	r3, #56	; 0x38
 800d9a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9a8:	491e      	ldr	r1, [pc, #120]	; (800da24 <sync_fs+0xdc>)
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff fd44 	bl	800d438 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	3338      	adds	r3, #56	; 0x38
 800d9b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f7ff fd3a 	bl	800d438 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3338      	adds	r3, #56	; 0x38
 800d9c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	695b      	ldr	r3, [r3, #20]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	4610      	mov	r0, r2
 800d9d4:	f7ff fd30 	bl	800d438 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9dc:	1c5a      	adds	r2, r3, #1
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7858      	ldrb	r0, [r3, #1]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	f7ff fc8d 	bl	800d310 <disk_write>
			fs->fsi_flag = 0;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	785b      	ldrb	r3, [r3, #1]
 800da00:	2200      	movs	r2, #0
 800da02:	2100      	movs	r1, #0
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff fca3 	bl	800d350 <disk_ioctl>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <sync_fs+0xcc>
 800da10:	2301      	movs	r3, #1
 800da12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da14:	7bfb      	ldrb	r3, [r7, #15]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	41615252 	.word	0x41615252
 800da24:	61417272 	.word	0x61417272

0800da28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	3b02      	subs	r3, #2
 800da36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	69db      	ldr	r3, [r3, #28]
 800da3c:	3b02      	subs	r3, #2
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d301      	bcc.n	800da48 <clust2sect+0x20>
 800da44:	2300      	movs	r3, #0
 800da46:	e008      	b.n	800da5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	461a      	mov	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	fb03 f202 	mul.w	r2, r3, r2
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da58:	4413      	add	r3, r2
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b086      	sub	sp, #24
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
 800da6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d904      	bls.n	800da86 <get_fat+0x20>
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d302      	bcc.n	800da8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800da86:	2301      	movs	r3, #1
 800da88:	617b      	str	r3, [r7, #20]
 800da8a:	e0bb      	b.n	800dc04 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800da8c:	f04f 33ff 	mov.w	r3, #4294967295
 800da90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b03      	cmp	r3, #3
 800da98:	f000 8083 	beq.w	800dba2 <get_fat+0x13c>
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	f300 80a7 	bgt.w	800dbf0 <get_fat+0x18a>
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d002      	beq.n	800daac <get_fat+0x46>
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d056      	beq.n	800db58 <get_fat+0xf2>
 800daaa:	e0a1      	b.n	800dbf0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4413      	add	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	899b      	ldrh	r3, [r3, #12]
 800dac2:	4619      	mov	r1, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	fbb3 f3f1 	udiv	r3, r3, r1
 800daca:	4413      	add	r3, r2
 800dacc:	4619      	mov	r1, r3
 800dace:	6938      	ldr	r0, [r7, #16]
 800dad0:	f7ff ff0c 	bl	800d8ec <move_window>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	f040 808d 	bne.w	800dbf6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	60fa      	str	r2, [r7, #12]
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	8992      	ldrh	r2, [r2, #12]
 800dae6:	fbb3 f1f2 	udiv	r1, r3, r2
 800daea:	fb01 f202 	mul.w	r2, r1, r2
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	4413      	add	r3, r2
 800daf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800daf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	899b      	ldrh	r3, [r3, #12]
 800db02:	4619      	mov	r1, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	fbb3 f3f1 	udiv	r3, r3, r1
 800db0a:	4413      	add	r3, r2
 800db0c:	4619      	mov	r1, r3
 800db0e:	6938      	ldr	r0, [r7, #16]
 800db10:	f7ff feec 	bl	800d8ec <move_window>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d16f      	bne.n	800dbfa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	899b      	ldrh	r3, [r3, #12]
 800db1e:	461a      	mov	r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	fbb3 f1f2 	udiv	r1, r3, r2
 800db26:	fb01 f202 	mul.w	r2, r1, r2
 800db2a:	1a9b      	subs	r3, r3, r2
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	4413      	add	r3, r2
 800db30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db34:	021b      	lsls	r3, r3, #8
 800db36:	461a      	mov	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <get_fat+0xe8>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	091b      	lsrs	r3, r3, #4
 800db4c:	e002      	b.n	800db54 <get_fat+0xee>
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db54:	617b      	str	r3, [r7, #20]
			break;
 800db56:	e055      	b.n	800dc04 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	899b      	ldrh	r3, [r3, #12]
 800db60:	085b      	lsrs	r3, r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	4619      	mov	r1, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	fbb3 f3f1 	udiv	r3, r3, r1
 800db6c:	4413      	add	r3, r2
 800db6e:	4619      	mov	r1, r3
 800db70:	6938      	ldr	r0, [r7, #16]
 800db72:	f7ff febb 	bl	800d8ec <move_window>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d140      	bne.n	800dbfe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	8992      	ldrh	r2, [r2, #12]
 800db8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800db8e:	fb00 f202 	mul.w	r2, r0, r2
 800db92:	1a9b      	subs	r3, r3, r2
 800db94:	440b      	add	r3, r1
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff fbf8 	bl	800d38c <ld_word>
 800db9c:	4603      	mov	r3, r0
 800db9e:	617b      	str	r3, [r7, #20]
			break;
 800dba0:	e030      	b.n	800dc04 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	899b      	ldrh	r3, [r3, #12]
 800dbaa:	089b      	lsrs	r3, r3, #2
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	4619      	mov	r1, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbb6:	4413      	add	r3, r2
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6938      	ldr	r0, [r7, #16]
 800dbbc:	f7ff fe96 	bl	800d8ec <move_window>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d11d      	bne.n	800dc02 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	8992      	ldrh	r2, [r2, #12]
 800dbd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbd8:	fb00 f202 	mul.w	r2, r0, r2
 800dbdc:	1a9b      	subs	r3, r3, r2
 800dbde:	440b      	add	r3, r1
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff fbeb 	bl	800d3bc <ld_dword>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dbec:	617b      	str	r3, [r7, #20]
			break;
 800dbee:	e009      	b.n	800dc04 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	617b      	str	r3, [r7, #20]
 800dbf4:	e006      	b.n	800dc04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbf6:	bf00      	nop
 800dbf8:	e004      	b.n	800dc04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbfa:	bf00      	nop
 800dbfc:	e002      	b.n	800dc04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbfe:	bf00      	nop
 800dc00:	e000      	b.n	800dc04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc02:	bf00      	nop
		}
	}

	return val;
 800dc04:	697b      	ldr	r3, [r7, #20]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc0e:	b590      	push	{r4, r7, lr}
 800dc10:	b089      	sub	sp, #36	; 0x24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	f240 8102 	bls.w	800de2a <put_fat+0x21c>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	69db      	ldr	r3, [r3, #28]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	f080 80fc 	bcs.w	800de2a <put_fat+0x21c>
		switch (fs->fs_type) {
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	f000 80b6 	beq.w	800dda8 <put_fat+0x19a>
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	f300 80fd 	bgt.w	800de3c <put_fat+0x22e>
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d003      	beq.n	800dc4e <put_fat+0x40>
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	f000 8083 	beq.w	800dd52 <put_fat+0x144>
 800dc4c:	e0f6      	b.n	800de3c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	61bb      	str	r3, [r7, #24]
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	085b      	lsrs	r3, r3, #1
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	4413      	add	r3, r2
 800dc5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	899b      	ldrh	r3, [r3, #12]
 800dc64:	4619      	mov	r1, r3
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7ff fe3b 	bl	800d8ec <move_window>
 800dc76:	4603      	mov	r3, r0
 800dc78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc7a:	7ffb      	ldrb	r3, [r7, #31]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f040 80d6 	bne.w	800de2e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	61ba      	str	r2, [r7, #24]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	8992      	ldrh	r2, [r2, #12]
 800dc92:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc96:	fb00 f202 	mul.w	r2, r0, r2
 800dc9a:	1a9b      	subs	r3, r3, r2
 800dc9c:	440b      	add	r3, r1
 800dc9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00d      	beq.n	800dcc6 <put_fat+0xb8>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	b25b      	sxtb	r3, r3
 800dcb0:	f003 030f 	and.w	r3, r3, #15
 800dcb4:	b25a      	sxtb	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	b25b      	sxtb	r3, r3
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	b25b      	sxtb	r3, r3
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	e001      	b.n	800dcca <put_fat+0xbc>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	899b      	ldrh	r3, [r3, #12]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dce4:	4413      	add	r3, r2
 800dce6:	4619      	mov	r1, r3
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f7ff fdff 	bl	800d8ec <move_window>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcf2:	7ffb      	ldrb	r3, [r7, #31]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	f040 809c 	bne.w	800de32 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	899b      	ldrh	r3, [r3, #12]
 800dd04:	461a      	mov	r2, r3
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd0c:	fb00 f202 	mul.w	r2, r0, r2
 800dd10:	1a9b      	subs	r3, r3, r2
 800dd12:	440b      	add	r3, r1
 800dd14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d003      	beq.n	800dd28 <put_fat+0x11a>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	091b      	lsrs	r3, r3, #4
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	e00e      	b.n	800dd46 <put_fat+0x138>
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	b25b      	sxtb	r3, r3
 800dd2e:	f023 030f 	bic.w	r3, r3, #15
 800dd32:	b25a      	sxtb	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	0a1b      	lsrs	r3, r3, #8
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	f003 030f 	and.w	r3, r3, #15
 800dd3e:	b25b      	sxtb	r3, r3
 800dd40:	4313      	orrs	r3, r2
 800dd42:	b25b      	sxtb	r3, r3
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	70da      	strb	r2, [r3, #3]
			break;
 800dd50:	e074      	b.n	800de3c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	899b      	ldrh	r3, [r3, #12]
 800dd5a:	085b      	lsrs	r3, r3, #1
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	4619      	mov	r1, r3
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd66:	4413      	add	r3, r2
 800dd68:	4619      	mov	r1, r3
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7ff fdbe 	bl	800d8ec <move_window>
 800dd70:	4603      	mov	r3, r0
 800dd72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd74:	7ffb      	ldrb	r3, [r7, #31]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d15d      	bne.n	800de36 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	8992      	ldrh	r2, [r2, #12]
 800dd88:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd8c:	fb00 f202 	mul.w	r2, r0, r2
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	440b      	add	r3, r1
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	b292      	uxth	r2, r2
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff fb31 	bl	800d402 <st_word>
			fs->wflag = 1;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2201      	movs	r2, #1
 800dda4:	70da      	strb	r2, [r3, #3]
			break;
 800dda6:	e049      	b.n	800de3c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	899b      	ldrh	r3, [r3, #12]
 800ddb0:	089b      	lsrs	r3, r3, #2
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddbc:	4413      	add	r3, r2
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f7ff fd93 	bl	800d8ec <move_window>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddca:	7ffb      	ldrb	r3, [r7, #31]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d134      	bne.n	800de3a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	8992      	ldrh	r2, [r2, #12]
 800dde4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dde8:	fb00 f202 	mul.w	r2, r0, r2
 800ddec:	1a9b      	subs	r3, r3, r2
 800ddee:	440b      	add	r3, r1
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff fae3 	bl	800d3bc <ld_dword>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ddfc:	4323      	orrs	r3, r4
 800ddfe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	8992      	ldrh	r2, [r2, #12]
 800de0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800de12:	fb00 f202 	mul.w	r2, r0, r2
 800de16:	1a9b      	subs	r3, r3, r2
 800de18:	440b      	add	r3, r1
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff fb0b 	bl	800d438 <st_dword>
			fs->wflag = 1;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2201      	movs	r2, #1
 800de26:	70da      	strb	r2, [r3, #3]
			break;
 800de28:	e008      	b.n	800de3c <put_fat+0x22e>
		}
	}
 800de2a:	bf00      	nop
 800de2c:	e006      	b.n	800de3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800de2e:	bf00      	nop
 800de30:	e004      	b.n	800de3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800de32:	bf00      	nop
 800de34:	e002      	b.n	800de3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800de36:	bf00      	nop
 800de38:	e000      	b.n	800de3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800de3a:	bf00      	nop
	return res;
 800de3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3724      	adds	r7, #36	; 0x24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd90      	pop	{r4, r7, pc}

0800de46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b088      	sub	sp, #32
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de52:	2300      	movs	r3, #0
 800de54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d904      	bls.n	800de6c <remove_chain+0x26>
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d301      	bcc.n	800de70 <remove_chain+0x2a>
 800de6c:	2302      	movs	r3, #2
 800de6e:	e04b      	b.n	800df08 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00c      	beq.n	800de90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de76:	f04f 32ff 	mov.w	r2, #4294967295
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	69b8      	ldr	r0, [r7, #24]
 800de7e:	f7ff fec6 	bl	800dc0e <put_fat>
 800de82:	4603      	mov	r3, r0
 800de84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de86:	7ffb      	ldrb	r3, [r7, #31]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <remove_chain+0x4a>
 800de8c:	7ffb      	ldrb	r3, [r7, #31]
 800de8e:	e03b      	b.n	800df08 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff fde7 	bl	800da66 <get_fat>
 800de98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d031      	beq.n	800df04 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d101      	bne.n	800deaa <remove_chain+0x64>
 800dea6:	2302      	movs	r3, #2
 800dea8:	e02e      	b.n	800df08 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d101      	bne.n	800deb6 <remove_chain+0x70>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e028      	b.n	800df08 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800deb6:	2200      	movs	r2, #0
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	69b8      	ldr	r0, [r7, #24]
 800debc:	f7ff fea7 	bl	800dc0e <put_fat>
 800dec0:	4603      	mov	r3, r0
 800dec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dec4:	7ffb      	ldrb	r3, [r7, #31]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <remove_chain+0x88>
 800deca:	7ffb      	ldrb	r3, [r7, #31]
 800decc:	e01c      	b.n	800df08 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	699a      	ldr	r2, [r3, #24]
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	3b02      	subs	r3, #2
 800ded8:	429a      	cmp	r2, r3
 800deda:	d20b      	bcs.n	800def4 <remove_chain+0xae>
			fs->free_clst++;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	791b      	ldrb	r3, [r3, #4]
 800deea:	f043 0301 	orr.w	r3, r3, #1
 800deee:	b2da      	uxtb	r2, r3
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	69db      	ldr	r3, [r3, #28]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	429a      	cmp	r2, r3
 800df00:	d3c6      	bcc.n	800de90 <remove_chain+0x4a>
 800df02:	e000      	b.n	800df06 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df04:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3720      	adds	r7, #32
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b088      	sub	sp, #32
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d10d      	bne.n	800df42 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d004      	beq.n	800df3c <create_chain+0x2c>
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	69db      	ldr	r3, [r3, #28]
 800df36:	69ba      	ldr	r2, [r7, #24]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d31b      	bcc.n	800df74 <create_chain+0x64>
 800df3c:	2301      	movs	r3, #1
 800df3e:	61bb      	str	r3, [r7, #24]
 800df40:	e018      	b.n	800df74 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff fd8e 	bl	800da66 <get_fat>
 800df4a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d801      	bhi.n	800df56 <create_chain+0x46>
 800df52:	2301      	movs	r3, #1
 800df54:	e070      	b.n	800e038 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5c:	d101      	bne.n	800df62 <create_chain+0x52>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	e06a      	b.n	800e038 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	69db      	ldr	r3, [r3, #28]
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d201      	bcs.n	800df70 <create_chain+0x60>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	e063      	b.n	800e038 <create_chain+0x128>
		scl = clst;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	3301      	adds	r3, #1
 800df7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	69fa      	ldr	r2, [r7, #28]
 800df84:	429a      	cmp	r2, r3
 800df86:	d307      	bcc.n	800df98 <create_chain+0x88>
				ncl = 2;
 800df88:	2302      	movs	r3, #2
 800df8a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df8c:	69fa      	ldr	r2, [r7, #28]
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	429a      	cmp	r2, r3
 800df92:	d901      	bls.n	800df98 <create_chain+0x88>
 800df94:	2300      	movs	r3, #0
 800df96:	e04f      	b.n	800e038 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df98:	69f9      	ldr	r1, [r7, #28]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff fd63 	bl	800da66 <get_fat>
 800dfa0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00e      	beq.n	800dfc6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d003      	beq.n	800dfb6 <create_chain+0xa6>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb4:	d101      	bne.n	800dfba <create_chain+0xaa>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	e03e      	b.n	800e038 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dfba:	69fa      	ldr	r2, [r7, #28]
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d1da      	bne.n	800df78 <create_chain+0x68>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e038      	b.n	800e038 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dfc6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfcc:	69f9      	ldr	r1, [r7, #28]
 800dfce:	6938      	ldr	r0, [r7, #16]
 800dfd0:	f7ff fe1d 	bl	800dc0e <put_fat>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d109      	bne.n	800dff2 <create_chain+0xe2>
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6938      	ldr	r0, [r7, #16]
 800dfea:	f7ff fe10 	bl	800dc0e <put_fat>
 800dfee:	4603      	mov	r3, r0
 800dff0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d116      	bne.n	800e026 <create_chain+0x116>
		fs->last_clst = ncl;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	69fa      	ldr	r2, [r7, #28]
 800dffc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	699a      	ldr	r2, [r3, #24]
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	3b02      	subs	r3, #2
 800e008:	429a      	cmp	r2, r3
 800e00a:	d804      	bhi.n	800e016 <create_chain+0x106>
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	1e5a      	subs	r2, r3, #1
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	791b      	ldrb	r3, [r3, #4]
 800e01a:	f043 0301 	orr.w	r3, r3, #1
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	711a      	strb	r2, [r3, #4]
 800e024:	e007      	b.n	800e036 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d102      	bne.n	800e032 <create_chain+0x122>
 800e02c:	f04f 33ff 	mov.w	r3, #4294967295
 800e030:	e000      	b.n	800e034 <create_chain+0x124>
 800e032:	2301      	movs	r3, #1
 800e034:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e036:	69fb      	ldr	r3, [r7, #28]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e040:	b480      	push	{r7}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	3304      	adds	r3, #4
 800e056:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	461a      	mov	r2, r3
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	fbb3 f3f2 	udiv	r3, r3, r2
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	8952      	ldrh	r2, [r2, #10]
 800e068:	fbb3 f3f2 	udiv	r3, r3, r2
 800e06c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	1d1a      	adds	r2, r3, #4
 800e072:	613a      	str	r2, [r7, #16]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <clmt_clust+0x42>
 800e07e:	2300      	movs	r3, #0
 800e080:	e010      	b.n	800e0a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	429a      	cmp	r2, r3
 800e088:	d307      	bcc.n	800e09a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e08a:	697a      	ldr	r2, [r7, #20]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	617b      	str	r3, [r7, #20]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	3304      	adds	r3, #4
 800e096:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e098:	e7e9      	b.n	800e06e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e09a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	4413      	add	r3, r2
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	371c      	adds	r7, #28
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0c6:	d204      	bcs.n	800e0d2 <dir_sdi+0x22>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f003 031f 	and.w	r3, r3, #31
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e0d2:	2302      	movs	r3, #2
 800e0d4:	e071      	b.n	800e1ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	683a      	ldr	r2, [r7, #0]
 800e0da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d106      	bne.n	800e0f6 <dir_sdi+0x46>
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d902      	bls.n	800e0f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10c      	bne.n	800e116 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	095b      	lsrs	r3, r3, #5
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	8912      	ldrh	r2, [r2, #8]
 800e104:	4293      	cmp	r3, r2
 800e106:	d301      	bcc.n	800e10c <dir_sdi+0x5c>
 800e108:	2302      	movs	r3, #2
 800e10a:	e056      	b.n	800e1ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	61da      	str	r2, [r3, #28]
 800e114:	e02d      	b.n	800e172 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	895b      	ldrh	r3, [r3, #10]
 800e11a:	461a      	mov	r2, r3
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	899b      	ldrh	r3, [r3, #12]
 800e120:	fb02 f303 	mul.w	r3, r2, r3
 800e124:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e126:	e019      	b.n	800e15c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6979      	ldr	r1, [r7, #20]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7ff fc9a 	bl	800da66 <get_fat>
 800e132:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13a:	d101      	bne.n	800e140 <dir_sdi+0x90>
 800e13c:	2301      	movs	r3, #1
 800e13e:	e03c      	b.n	800e1ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d904      	bls.n	800e150 <dir_sdi+0xa0>
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d301      	bcc.n	800e154 <dir_sdi+0xa4>
 800e150:	2302      	movs	r3, #2
 800e152:	e032      	b.n	800e1ba <dir_sdi+0x10a>
			ofs -= csz;
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	429a      	cmp	r2, r3
 800e162:	d2e1      	bcs.n	800e128 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e164:	6979      	ldr	r1, [r7, #20]
 800e166:	6938      	ldr	r0, [r7, #16]
 800e168:	f7ff fc5e 	bl	800da28 <clust2sect>
 800e16c:	4602      	mov	r2, r0
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <dir_sdi+0xd4>
 800e180:	2302      	movs	r3, #2
 800e182:	e01a      	b.n	800e1ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	69da      	ldr	r2, [r3, #28]
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	899b      	ldrh	r3, [r3, #12]
 800e18c:	4619      	mov	r1, r3
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	fbb3 f3f1 	udiv	r3, r3, r1
 800e194:	441a      	add	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1ac:	fb00 f202 	mul.w	r2, r0, r2
 800e1b0:	1a9b      	subs	r3, r3, r2
 800e1b2:	18ca      	adds	r2, r1, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b086      	sub	sp, #24
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	3320      	adds	r3, #32
 800e1d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <dir_next+0x28>
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1e8:	d301      	bcc.n	800e1ee <dir_next+0x2c>
 800e1ea:	2304      	movs	r3, #4
 800e1ec:	e0bb      	b.n	800e366 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	899b      	ldrh	r3, [r3, #12]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1fa:	fb01 f202 	mul.w	r2, r1, r2
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	2b00      	cmp	r3, #0
 800e202:	f040 809d 	bne.w	800e340 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10b      	bne.n	800e230 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	095b      	lsrs	r3, r3, #5
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	8912      	ldrh	r2, [r2, #8]
 800e220:	4293      	cmp	r3, r2
 800e222:	f0c0 808d 	bcc.w	800e340 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	61da      	str	r2, [r3, #28]
 800e22c:	2304      	movs	r3, #4
 800e22e:	e09a      	b.n	800e366 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	899b      	ldrh	r3, [r3, #12]
 800e234:	461a      	mov	r2, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	fbb3 f3f2 	udiv	r3, r3, r2
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	8952      	ldrh	r2, [r2, #10]
 800e240:	3a01      	subs	r2, #1
 800e242:	4013      	ands	r3, r2
 800e244:	2b00      	cmp	r3, #0
 800e246:	d17b      	bne.n	800e340 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f7ff fc08 	bl	800da66 <get_fat>
 800e256:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d801      	bhi.n	800e262 <dir_next+0xa0>
 800e25e:	2302      	movs	r3, #2
 800e260:	e081      	b.n	800e366 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e268:	d101      	bne.n	800e26e <dir_next+0xac>
 800e26a:	2301      	movs	r3, #1
 800e26c:	e07b      	b.n	800e366 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	69db      	ldr	r3, [r3, #28]
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	429a      	cmp	r2, r3
 800e276:	d359      	bcc.n	800e32c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d104      	bne.n	800e288 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	61da      	str	r2, [r3, #28]
 800e284:	2304      	movs	r3, #4
 800e286:	e06e      	b.n	800e366 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	4619      	mov	r1, r3
 800e290:	4610      	mov	r0, r2
 800e292:	f7ff fe3d 	bl	800df10 <create_chain>
 800e296:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d101      	bne.n	800e2a2 <dir_next+0xe0>
 800e29e:	2307      	movs	r3, #7
 800e2a0:	e061      	b.n	800e366 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d101      	bne.n	800e2ac <dir_next+0xea>
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	e05c      	b.n	800e366 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b2:	d101      	bne.n	800e2b8 <dir_next+0xf6>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e056      	b.n	800e366 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7ff fad3 	bl	800d864 <sync_window>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <dir_next+0x106>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e04e      	b.n	800e366 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	899b      	ldrh	r3, [r3, #12]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	f7ff f8fc 	bl	800d4d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2da:	2300      	movs	r3, #0
 800e2dc:	613b      	str	r3, [r7, #16]
 800e2de:	6979      	ldr	r1, [r7, #20]
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7ff fba1 	bl	800da28 <clust2sect>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	635a      	str	r2, [r3, #52]	; 0x34
 800e2ec:	e012      	b.n	800e314 <dir_next+0x152>
						fs->wflag = 1;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7ff fab5 	bl	800d864 <sync_window>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <dir_next+0x142>
 800e300:	2301      	movs	r3, #1
 800e302:	e030      	b.n	800e366 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	3301      	adds	r3, #1
 800e308:	613b      	str	r3, [r7, #16]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	635a      	str	r2, [r3, #52]	; 0x34
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	895b      	ldrh	r3, [r3, #10]
 800e318:	461a      	mov	r2, r3
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d3e6      	bcc.n	800e2ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	1ad2      	subs	r2, r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e332:	6979      	ldr	r1, [r7, #20]
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f7ff fb77 	bl	800da28 <clust2sect>
 800e33a:	4602      	mov	r2, r0
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	899b      	ldrh	r3, [r3, #12]
 800e350:	461a      	mov	r2, r3
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	fbb3 f0f2 	udiv	r0, r3, r2
 800e358:	fb00 f202 	mul.w	r2, r0, r2
 800e35c:	1a9b      	subs	r3, r3, r2
 800e35e:	18ca      	adds	r2, r1, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e364:	2300      	movs	r3, #0
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b086      	sub	sp, #24
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e37e:	2100      	movs	r1, #0
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff fe95 	bl	800e0b0 <dir_sdi>
 800e386:	4603      	mov	r3, r0
 800e388:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d12b      	bne.n	800e3e8 <dir_alloc+0x7a>
		n = 0;
 800e390:	2300      	movs	r3, #0
 800e392:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	4619      	mov	r1, r3
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f7ff faa6 	bl	800d8ec <move_window>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3a4:	7dfb      	ldrb	r3, [r7, #23]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d11d      	bne.n	800e3e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2be5      	cmp	r3, #229	; 0xe5
 800e3b2:	d004      	beq.n	800e3be <dir_alloc+0x50>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a1b      	ldr	r3, [r3, #32]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d107      	bne.n	800e3ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	613b      	str	r3, [r7, #16]
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d102      	bne.n	800e3d2 <dir_alloc+0x64>
 800e3cc:	e00c      	b.n	800e3e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7ff fef4 	bl	800e1c2 <dir_next>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0d7      	beq.n	800e394 <dir_alloc+0x26>
 800e3e4:	e000      	b.n	800e3e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e3e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	2b04      	cmp	r3, #4
 800e3ec:	d101      	bne.n	800e3f2 <dir_alloc+0x84>
 800e3ee:	2307      	movs	r3, #7
 800e3f0:	75fb      	strb	r3, [r7, #23]
	return res;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	331a      	adds	r3, #26
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe ffbe 	bl	800d38c <ld_word>
 800e410:	4603      	mov	r3, r0
 800e412:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d109      	bne.n	800e430 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	3314      	adds	r3, #20
 800e420:	4618      	mov	r0, r3
 800e422:	f7fe ffb3 	bl	800d38c <ld_word>
 800e426:	4603      	mov	r3, r0
 800e428:	041b      	lsls	r3, r3, #16
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e430:	68fb      	ldr	r3, [r7, #12]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b084      	sub	sp, #16
 800e43e:	af00      	add	r7, sp, #0
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	60b9      	str	r1, [r7, #8]
 800e444:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	331a      	adds	r3, #26
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	b292      	uxth	r2, r2
 800e44e:	4611      	mov	r1, r2
 800e450:	4618      	mov	r0, r3
 800e452:	f7fe ffd6 	bl	800d402 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d109      	bne.n	800e472 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f103 0214 	add.w	r2, r3, #20
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	0c1b      	lsrs	r3, r3, #16
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4619      	mov	r1, r3
 800e46c:	4610      	mov	r0, r2
 800e46e:	f7fe ffc8 	bl	800d402 <st_word>
	}
}
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	331a      	adds	r3, #26
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe ff7e 	bl	800d38c <ld_word>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <cmp_lfn+0x1e>
 800e496:	2300      	movs	r3, #0
 800e498:	e059      	b.n	800e54e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a2:	1e5a      	subs	r2, r3, #1
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	4413      	add	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	81fb      	strh	r3, [r7, #14]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
 800e4b8:	e033      	b.n	800e522 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4ba:	4a27      	ldr	r2, [pc, #156]	; (800e558 <cmp_lfn+0xdc>)
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	4413      	add	r3, r2
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fe ff5f 	bl	800d38c <ld_word>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4d2:	89fb      	ldrh	r3, [r7, #14]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d01a      	beq.n	800e50e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	2bfe      	cmp	r3, #254	; 0xfe
 800e4dc:	d812      	bhi.n	800e504 <cmp_lfn+0x88>
 800e4de:	89bb      	ldrh	r3, [r7, #12]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f002 f8bf 	bl	8010664 <ff_wtoupper>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	461c      	mov	r4, r3
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	617a      	str	r2, [r7, #20]
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	881b      	ldrh	r3, [r3, #0]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f002 f8b3 	bl	8010664 <ff_wtoupper>
 800e4fe:	4603      	mov	r3, r0
 800e500:	429c      	cmp	r4, r3
 800e502:	d001      	beq.n	800e508 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e504:	2300      	movs	r3, #0
 800e506:	e022      	b.n	800e54e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e508:	89bb      	ldrh	r3, [r7, #12]
 800e50a:	81fb      	strh	r3, [r7, #14]
 800e50c:	e006      	b.n	800e51c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e50e:	89bb      	ldrh	r3, [r7, #12]
 800e510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e514:	4293      	cmp	r3, r2
 800e516:	d001      	beq.n	800e51c <cmp_lfn+0xa0>
 800e518:	2300      	movs	r3, #0
 800e51a:	e018      	b.n	800e54e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	3301      	adds	r3, #1
 800e520:	613b      	str	r3, [r7, #16]
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	2b0c      	cmp	r3, #12
 800e526:	d9c8      	bls.n	800e4ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <cmp_lfn+0xd0>
 800e534:	89fb      	ldrh	r3, [r7, #14]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d008      	beq.n	800e54c <cmp_lfn+0xd0>
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	4413      	add	r3, r2
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <cmp_lfn+0xd0>
 800e548:	2300      	movs	r3, #0
 800e54a:	e000      	b.n	800e54e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e54c:	2301      	movs	r3, #1
}
 800e54e:	4618      	mov	r0, r3
 800e550:	371c      	adds	r7, #28
 800e552:	46bd      	mov	sp, r7
 800e554:	bd90      	pop	{r4, r7, pc}
 800e556:	bf00      	nop
 800e558:	08017aa0 	.word	0x08017aa0

0800e55c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b088      	sub	sp, #32
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4611      	mov	r1, r2
 800e568:	461a      	mov	r2, r3
 800e56a:	460b      	mov	r3, r1
 800e56c:	71fb      	strb	r3, [r7, #7]
 800e56e:	4613      	mov	r3, r2
 800e570:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	330d      	adds	r3, #13
 800e576:	79ba      	ldrb	r2, [r7, #6]
 800e578:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	330b      	adds	r3, #11
 800e57e:	220f      	movs	r2, #15
 800e580:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	330c      	adds	r3, #12
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	331a      	adds	r3, #26
 800e58e:	2100      	movs	r1, #0
 800e590:	4618      	mov	r0, r3
 800e592:	f7fe ff36 	bl	800d402 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e596:	79fb      	ldrb	r3, [r7, #7]
 800e598:	1e5a      	subs	r2, r3, #1
 800e59a:	4613      	mov	r3, r2
 800e59c:	005b      	lsls	r3, r3, #1
 800e59e:	4413      	add	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	82fb      	strh	r3, [r7, #22]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e5ae:	8afb      	ldrh	r3, [r7, #22]
 800e5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d007      	beq.n	800e5c8 <put_lfn+0x6c>
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	61fa      	str	r2, [r7, #28]
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e5c8:	4a17      	ldr	r2, [pc, #92]	; (800e628 <put_lfn+0xcc>)
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	8afa      	ldrh	r2, [r7, #22]
 800e5d8:	4611      	mov	r1, r2
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe ff11 	bl	800d402 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e5e0:	8afb      	ldrh	r3, [r7, #22]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d102      	bne.n	800e5ec <put_lfn+0x90>
 800e5e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	61bb      	str	r3, [r7, #24]
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	2b0c      	cmp	r3, #12
 800e5f6:	d9da      	bls.n	800e5ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e5f8:	8afb      	ldrh	r3, [r7, #22]
 800e5fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d006      	beq.n	800e610 <put_lfn+0xb4>
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	4413      	add	r3, r2
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d103      	bne.n	800e618 <put_lfn+0xbc>
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e616:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	79fa      	ldrb	r2, [r7, #7]
 800e61c:	701a      	strb	r2, [r3, #0]
}
 800e61e:	bf00      	nop
 800e620:	3720      	adds	r7, #32
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	08017aa0 	.word	0x08017aa0

0800e62c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08c      	sub	sp, #48	; 0x30
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e63a:	220b      	movs	r2, #11
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7fe ff26 	bl	800d490 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b05      	cmp	r3, #5
 800e648:	d92b      	bls.n	800e6a2 <gen_numname+0x76>
		sr = seq;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e64e:	e022      	b.n	800e696 <gen_numname+0x6a>
			wc = *lfn++;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	1c9a      	adds	r2, r3, #2
 800e654:	607a      	str	r2, [r7, #4]
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e65a:	2300      	movs	r3, #0
 800e65c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e65e:	e017      	b.n	800e690 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	005a      	lsls	r2, r3, #1
 800e664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	4413      	add	r3, r2
 800e66c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e66e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e670:	085b      	lsrs	r3, r3, #1
 800e672:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d005      	beq.n	800e68a <gen_numname+0x5e>
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e684:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e688:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	3301      	adds	r3, #1
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2b0f      	cmp	r3, #15
 800e694:	d9e4      	bls.n	800e660 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1d8      	bne.n	800e650 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e6a2:	2307      	movs	r3, #7
 800e6a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f003 030f 	and.w	r3, r3, #15
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	3330      	adds	r3, #48	; 0x30
 800e6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6ba:	2b39      	cmp	r3, #57	; 0x39
 800e6bc:	d904      	bls.n	800e6c8 <gen_numname+0x9c>
 800e6be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6c2:	3307      	adds	r3, #7
 800e6c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ca:	1e5a      	subs	r2, r3, #1
 800e6cc:	62ba      	str	r2, [r7, #40]	; 0x28
 800e6ce:	3330      	adds	r3, #48	; 0x30
 800e6d0:	443b      	add	r3, r7
 800e6d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e6d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	091b      	lsrs	r3, r3, #4
 800e6de:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1df      	bne.n	800e6a6 <gen_numname+0x7a>
	ns[i] = '~';
 800e6e6:	f107 0214 	add.w	r2, r7, #20
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	4413      	add	r3, r2
 800e6ee:	227e      	movs	r2, #126	; 0x7e
 800e6f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e6f6:	e002      	b.n	800e6fe <gen_numname+0xd2>
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	429a      	cmp	r2, r3
 800e704:	d205      	bcs.n	800e712 <gen_numname+0xe6>
 800e706:	68fa      	ldr	r2, [r7, #12]
 800e708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70a:	4413      	add	r3, r2
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	2b20      	cmp	r3, #32
 800e710:	d1f2      	bne.n	800e6f8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e714:	2b07      	cmp	r3, #7
 800e716:	d807      	bhi.n	800e728 <gen_numname+0xfc>
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e71e:	3330      	adds	r3, #48	; 0x30
 800e720:	443b      	add	r3, r7
 800e722:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e726:	e000      	b.n	800e72a <gen_numname+0xfe>
 800e728:	2120      	movs	r1, #32
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	627a      	str	r2, [r7, #36]	; 0x24
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4413      	add	r3, r2
 800e734:	460a      	mov	r2, r1
 800e736:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73a:	2b07      	cmp	r3, #7
 800e73c:	d9e9      	bls.n	800e712 <gen_numname+0xe6>
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	3730      	adds	r7, #48	; 0x30
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e754:	230b      	movs	r3, #11
 800e756:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e758:	7bfb      	ldrb	r3, [r7, #15]
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	0852      	lsrs	r2, r2, #1
 800e75e:	01db      	lsls	r3, r3, #7
 800e760:	4313      	orrs	r3, r2
 800e762:	b2da      	uxtb	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	1c59      	adds	r1, r3, #1
 800e768:	6079      	str	r1, [r7, #4]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	4413      	add	r3, r2
 800e76e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	3b01      	subs	r3, #1
 800e774:	60bb      	str	r3, [r7, #8]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1ed      	bne.n	800e758 <sum_sfn+0x10>
	return sum;
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b086      	sub	sp, #24
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e798:	2100      	movs	r1, #0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff fc88 	bl	800e0b0 <dir_sdi>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <dir_find+0x24>
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	e0a9      	b.n	800e902 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e7ae:	23ff      	movs	r3, #255	; 0xff
 800e7b0:	753b      	strb	r3, [r7, #20]
 800e7b2:	7d3b      	ldrb	r3, [r7, #20]
 800e7b4:	757b      	strb	r3, [r7, #21]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7bc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	69db      	ldr	r3, [r3, #28]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6938      	ldr	r0, [r7, #16]
 800e7c6:	f7ff f891 	bl	800d8ec <move_window>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f040 8090 	bne.w	800e8f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e7de:	7dbb      	ldrb	r3, [r7, #22]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <dir_find+0x60>
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	75fb      	strb	r3, [r7, #23]
 800e7e8:	e08a      	b.n	800e900 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	330b      	adds	r3, #11
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7f6:	73fb      	strb	r3, [r7, #15]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7bfa      	ldrb	r2, [r7, #15]
 800e7fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e7fe:	7dbb      	ldrb	r3, [r7, #22]
 800e800:	2be5      	cmp	r3, #229	; 0xe5
 800e802:	d007      	beq.n	800e814 <dir_find+0x8a>
 800e804:	7bfb      	ldrb	r3, [r7, #15]
 800e806:	f003 0308 	and.w	r3, r3, #8
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d009      	beq.n	800e822 <dir_find+0x98>
 800e80e:	7bfb      	ldrb	r3, [r7, #15]
 800e810:	2b0f      	cmp	r3, #15
 800e812:	d006      	beq.n	800e822 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e814:	23ff      	movs	r3, #255	; 0xff
 800e816:	757b      	strb	r3, [r7, #21]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f04f 32ff 	mov.w	r2, #4294967295
 800e81e:	631a      	str	r2, [r3, #48]	; 0x30
 800e820:	e05e      	b.n	800e8e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e822:	7bfb      	ldrb	r3, [r7, #15]
 800e824:	2b0f      	cmp	r3, #15
 800e826:	d136      	bne.n	800e896 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e832:	2b00      	cmp	r3, #0
 800e834:	d154      	bne.n	800e8e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e836:	7dbb      	ldrb	r3, [r7, #22]
 800e838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00d      	beq.n	800e85c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	7b5b      	ldrb	r3, [r3, #13]
 800e846:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e848:	7dbb      	ldrb	r3, [r7, #22]
 800e84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e84e:	75bb      	strb	r3, [r7, #22]
 800e850:	7dbb      	ldrb	r3, [r7, #22]
 800e852:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	695a      	ldr	r2, [r3, #20]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e85c:	7dba      	ldrb	r2, [r7, #22]
 800e85e:	7d7b      	ldrb	r3, [r7, #21]
 800e860:	429a      	cmp	r2, r3
 800e862:	d115      	bne.n	800e890 <dir_find+0x106>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a1b      	ldr	r3, [r3, #32]
 800e868:	330d      	adds	r3, #13
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	7d3a      	ldrb	r2, [r7, #20]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d10e      	bne.n	800e890 <dir_find+0x106>
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	691a      	ldr	r2, [r3, #16]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	4619      	mov	r1, r3
 800e87c:	4610      	mov	r0, r2
 800e87e:	f7ff fdfd 	bl	800e47c <cmp_lfn>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d003      	beq.n	800e890 <dir_find+0x106>
 800e888:	7d7b      	ldrb	r3, [r7, #21]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	e000      	b.n	800e892 <dir_find+0x108>
 800e890:	23ff      	movs	r3, #255	; 0xff
 800e892:	757b      	strb	r3, [r7, #21]
 800e894:	e024      	b.n	800e8e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e896:	7d7b      	ldrb	r3, [r7, #21]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d109      	bne.n	800e8b0 <dir_find+0x126>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a1b      	ldr	r3, [r3, #32]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff ff51 	bl	800e748 <sum_sfn>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	7d3b      	ldrb	r3, [r7, #20]
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d024      	beq.n	800e8fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d10a      	bne.n	800e8d4 <dir_find+0x14a>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a18      	ldr	r0, [r3, #32]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3324      	adds	r3, #36	; 0x24
 800e8c6:	220b      	movs	r2, #11
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	f7fe fe1d 	bl	800d508 <mem_cmp>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d014      	beq.n	800e8fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8d4:	23ff      	movs	r3, #255	; 0xff
 800e8d6:	757b      	strb	r3, [r7, #21]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f04f 32ff 	mov.w	r2, #4294967295
 800e8de:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff fc6d 	bl	800e1c2 <dir_next>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e8ec:	7dfb      	ldrb	r3, [r7, #23]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f43f af65 	beq.w	800e7be <dir_find+0x34>
 800e8f4:	e004      	b.n	800e900 <dir_find+0x176>
		if (res != FR_OK) break;
 800e8f6:	bf00      	nop
 800e8f8:	e002      	b.n	800e900 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e8fa:	bf00      	nop
 800e8fc:	e000      	b.n	800e900 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8fe:	bf00      	nop

	return res;
 800e900:	7dfb      	ldrb	r3, [r7, #23]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3718      	adds	r7, #24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08c      	sub	sp, #48	; 0x30
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e920:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <dir_register+0x20>
 800e928:	2306      	movs	r3, #6
 800e92a:	e0e0      	b.n	800eaee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e92c:	2300      	movs	r3, #0
 800e92e:	627b      	str	r3, [r7, #36]	; 0x24
 800e930:	e002      	b.n	800e938 <dir_register+0x2c>
 800e932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e934:	3301      	adds	r3, #1
 800e936:	627b      	str	r3, [r7, #36]	; 0x24
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	691a      	ldr	r2, [r3, #16]
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	4413      	add	r3, r2
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1f4      	bne.n	800e932 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e94e:	f107 030c 	add.w	r3, r7, #12
 800e952:	220c      	movs	r2, #12
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe fd9b 	bl	800d490 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d032      	beq.n	800e9ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2240      	movs	r2, #64	; 0x40
 800e968:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e96c:	2301      	movs	r3, #1
 800e96e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e970:	e016      	b.n	800e9a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	691a      	ldr	r2, [r3, #16]
 800e97c:	f107 010c 	add.w	r1, r7, #12
 800e980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e982:	f7ff fe53 	bl	800e62c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff feff 	bl	800e78a <dir_find>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	3301      	adds	r3, #1
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	2b63      	cmp	r3, #99	; 0x63
 800e9a4:	d9e5      	bls.n	800e972 <dir_register+0x66>
 800e9a6:	e000      	b.n	800e9aa <dir_register+0x9e>
			if (res != FR_OK) break;
 800e9a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	2b64      	cmp	r3, #100	; 0x64
 800e9ae:	d101      	bne.n	800e9b4 <dir_register+0xa8>
 800e9b0:	2307      	movs	r3, #7
 800e9b2:	e09c      	b.n	800eaee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d002      	beq.n	800e9c2 <dir_register+0xb6>
 800e9bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9c0:	e095      	b.n	800eaee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e9c2:	7dfa      	ldrb	r2, [r7, #23]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
 800e9cc:	f003 0302 	and.w	r3, r3, #2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d007      	beq.n	800e9e4 <dir_register+0xd8>
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	330c      	adds	r3, #12
 800e9d8:	4a47      	ldr	r2, [pc, #284]	; (800eaf8 <dir_register+0x1ec>)
 800e9da:	fba2 2303 	umull	r2, r3, r2, r3
 800e9de:	089b      	lsrs	r3, r3, #2
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	e000      	b.n	800e9e6 <dir_register+0xda>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e9e8:	6a39      	ldr	r1, [r7, #32]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff fcbf 	bl	800e36e <dir_alloc>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d148      	bne.n	800ea90 <dir_register+0x184>
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	3b01      	subs	r3, #1
 800ea02:	623b      	str	r3, [r7, #32]
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d042      	beq.n	800ea90 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	695a      	ldr	r2, [r3, #20]
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	015b      	lsls	r3, r3, #5
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	4619      	mov	r1, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7ff fb4a 	bl	800e0b0 <dir_sdi>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ea22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d132      	bne.n	800ea90 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3324      	adds	r3, #36	; 0x24
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff fe8a 	bl	800e748 <sum_sfn>
 800ea34:	4603      	mov	r3, r0
 800ea36:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	69f8      	ldr	r0, [r7, #28]
 800ea40:	f7fe ff54 	bl	800d8ec <move_window>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ea4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d11d      	bne.n	800ea8e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	6918      	ldr	r0, [r3, #16]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a19      	ldr	r1, [r3, #32]
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	b2da      	uxtb	r2, r3
 800ea5e:	7efb      	ldrb	r3, [r7, #27]
 800ea60:	f7ff fd7c 	bl	800e55c <put_lfn>
				fs->wflag = 1;
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	2201      	movs	r2, #1
 800ea68:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fba8 	bl	800e1c2 <dir_next>
 800ea72:	4603      	mov	r3, r0
 800ea74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ea78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d107      	bne.n	800ea90 <dir_register+0x184>
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	623b      	str	r3, [r7, #32]
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1d5      	bne.n	800ea38 <dir_register+0x12c>
 800ea8c:	e000      	b.n	800ea90 <dir_register+0x184>
				if (res != FR_OK) break;
 800ea8e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ea90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d128      	bne.n	800eaea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	69db      	ldr	r3, [r3, #28]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	69f8      	ldr	r0, [r7, #28]
 800eaa0:	f7fe ff24 	bl	800d8ec <move_window>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800eaaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d11b      	bne.n	800eaea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	2220      	movs	r2, #32
 800eab8:	2100      	movs	r1, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fd09 	bl	800d4d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a18      	ldr	r0, [r3, #32]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3324      	adds	r3, #36	; 0x24
 800eac8:	220b      	movs	r2, #11
 800eaca:	4619      	mov	r1, r3
 800eacc:	f7fe fce0 	bl	800d490 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	330c      	adds	r3, #12
 800eadc:	f002 0218 	and.w	r2, r2, #24
 800eae0:	b2d2      	uxtb	r2, r2
 800eae2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	2201      	movs	r2, #1
 800eae8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eaea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3730      	adds	r7, #48	; 0x30
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	4ec4ec4f 	.word	0x4ec4ec4f

0800eafc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08a      	sub	sp, #40	; 0x28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	613b      	str	r3, [r7, #16]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	61ba      	str	r2, [r7, #24]
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	4413      	add	r3, r2
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eb2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb2c:	2b1f      	cmp	r3, #31
 800eb2e:	d940      	bls.n	800ebb2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eb30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb32:	2b2f      	cmp	r3, #47	; 0x2f
 800eb34:	d006      	beq.n	800eb44 <create_name+0x48>
 800eb36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb38:	2b5c      	cmp	r3, #92	; 0x5c
 800eb3a:	d110      	bne.n	800eb5e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb3c:	e002      	b.n	800eb44 <create_name+0x48>
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	3301      	adds	r3, #1
 800eb42:	61bb      	str	r3, [r7, #24]
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	4413      	add	r3, r2
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	2b2f      	cmp	r3, #47	; 0x2f
 800eb4e:	d0f6      	beq.n	800eb3e <create_name+0x42>
 800eb50:	693a      	ldr	r2, [r7, #16]
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	4413      	add	r3, r2
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	2b5c      	cmp	r3, #92	; 0x5c
 800eb5a:	d0f0      	beq.n	800eb3e <create_name+0x42>
			break;
 800eb5c:	e02a      	b.n	800ebb4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2bfe      	cmp	r3, #254	; 0xfe
 800eb62:	d901      	bls.n	800eb68 <create_name+0x6c>
 800eb64:	2306      	movs	r3, #6
 800eb66:	e17d      	b.n	800ee64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eb68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eb6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb70:	2101      	movs	r1, #1
 800eb72:	4618      	mov	r0, r3
 800eb74:	f001 fd3a 	bl	80105ec <ff_convert>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eb7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d101      	bne.n	800eb86 <create_name+0x8a>
 800eb82:	2306      	movs	r3, #6
 800eb84:	e16e      	b.n	800ee64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eb86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb88:	2b7f      	cmp	r3, #127	; 0x7f
 800eb8a:	d809      	bhi.n	800eba0 <create_name+0xa4>
 800eb8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb8e:	4619      	mov	r1, r3
 800eb90:	488d      	ldr	r0, [pc, #564]	; (800edc8 <create_name+0x2cc>)
 800eb92:	f7fe fce0 	bl	800d556 <chk_chr>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <create_name+0xa4>
 800eb9c:	2306      	movs	r3, #6
 800eb9e:	e161      	b.n	800ee64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	617a      	str	r2, [r7, #20]
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4413      	add	r3, r2
 800ebac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ebb0:	e7b4      	b.n	800eb1c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ebb2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	441a      	add	r2, r3
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc0:	2b1f      	cmp	r3, #31
 800ebc2:	d801      	bhi.n	800ebc8 <create_name+0xcc>
 800ebc4:	2304      	movs	r3, #4
 800ebc6:	e000      	b.n	800ebca <create_name+0xce>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ebce:	e011      	b.n	800ebf4 <create_name+0xf8>
		w = lfn[di - 1];
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	4413      	add	r3, r2
 800ebde:	881b      	ldrh	r3, [r3, #0]
 800ebe0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ebe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebe4:	2b20      	cmp	r3, #32
 800ebe6:	d002      	beq.n	800ebee <create_name+0xf2>
 800ebe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebea:	2b2e      	cmp	r3, #46	; 0x2e
 800ebec:	d106      	bne.n	800ebfc <create_name+0x100>
		di--;
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1ea      	bne.n	800ebd0 <create_name+0xd4>
 800ebfa:	e000      	b.n	800ebfe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ebfc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	4413      	add	r3, r2
 800ec06:	2200      	movs	r2, #0
 800ec08:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d101      	bne.n	800ec14 <create_name+0x118>
 800ec10:	2306      	movs	r3, #6
 800ec12:	e127      	b.n	800ee64 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3324      	adds	r3, #36	; 0x24
 800ec18:	220b      	movs	r2, #11
 800ec1a:	2120      	movs	r1, #32
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fe fc58 	bl	800d4d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ec22:	2300      	movs	r3, #0
 800ec24:	61bb      	str	r3, [r7, #24]
 800ec26:	e002      	b.n	800ec2e <create_name+0x132>
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	61bb      	str	r3, [r7, #24]
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	2b20      	cmp	r3, #32
 800ec3a:	d0f5      	beq.n	800ec28 <create_name+0x12c>
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	4413      	add	r3, r2
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	2b2e      	cmp	r3, #46	; 0x2e
 800ec48:	d0ee      	beq.n	800ec28 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d009      	beq.n	800ec64 <create_name+0x168>
 800ec50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec54:	f043 0303 	orr.w	r3, r3, #3
 800ec58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ec5c:	e002      	b.n	800ec64 <create_name+0x168>
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	617b      	str	r3, [r7, #20]
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d009      	beq.n	800ec7e <create_name+0x182>
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec70:	3b01      	subs	r3, #1
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	4413      	add	r3, r2
 800ec78:	881b      	ldrh	r3, [r3, #0]
 800ec7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec7c:	d1ef      	bne.n	800ec5e <create_name+0x162>

	i = b = 0; ni = 8;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec84:	2300      	movs	r3, #0
 800ec86:	623b      	str	r3, [r7, #32]
 800ec88:	2308      	movs	r3, #8
 800ec8a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	1c5a      	adds	r2, r3, #1
 800ec90:	61ba      	str	r2, [r7, #24]
 800ec92:	005b      	lsls	r3, r3, #1
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	4413      	add	r3, r2
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ec9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 8090 	beq.w	800edc4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eca6:	2b20      	cmp	r3, #32
 800eca8:	d006      	beq.n	800ecb8 <create_name+0x1bc>
 800ecaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecac:	2b2e      	cmp	r3, #46	; 0x2e
 800ecae:	d10a      	bne.n	800ecc6 <create_name+0x1ca>
 800ecb0:	69ba      	ldr	r2, [r7, #24]
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d006      	beq.n	800ecc6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ecb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecbc:	f043 0303 	orr.w	r3, r3, #3
 800ecc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecc4:	e07d      	b.n	800edc2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ecc6:	6a3a      	ldr	r2, [r7, #32]
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d203      	bcs.n	800ecd6 <create_name+0x1da>
 800ecce:	69ba      	ldr	r2, [r7, #24]
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d123      	bne.n	800ed1e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	2b0b      	cmp	r3, #11
 800ecda:	d106      	bne.n	800ecea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ecdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ece0:	f043 0303 	orr.w	r3, r3, #3
 800ece4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ece8:	e075      	b.n	800edd6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d005      	beq.n	800ecfe <create_name+0x202>
 800ecf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf6:	f043 0303 	orr.w	r3, r3, #3
 800ecfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ecfe:	69ba      	ldr	r2, [r7, #24]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d866      	bhi.n	800edd4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	61bb      	str	r3, [r7, #24]
 800ed0a:	2308      	movs	r3, #8
 800ed0c:	623b      	str	r3, [r7, #32]
 800ed0e:	230b      	movs	r3, #11
 800ed10:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ed12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed1c:	e051      	b.n	800edc2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ed1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed20:	2b7f      	cmp	r3, #127	; 0x7f
 800ed22:	d914      	bls.n	800ed4e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ed24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed26:	2100      	movs	r1, #0
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f001 fc5f 	bl	80105ec <ff_convert>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ed32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d004      	beq.n	800ed42 <create_name+0x246>
 800ed38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed3a:	3b80      	subs	r3, #128	; 0x80
 800ed3c:	4a23      	ldr	r2, [pc, #140]	; (800edcc <create_name+0x2d0>)
 800ed3e:	5cd3      	ldrb	r3, [r2, r3]
 800ed40:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ed42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed46:	f043 0302 	orr.w	r3, r3, #2
 800ed4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ed4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d007      	beq.n	800ed64 <create_name+0x268>
 800ed54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed56:	4619      	mov	r1, r3
 800ed58:	481d      	ldr	r0, [pc, #116]	; (800edd0 <create_name+0x2d4>)
 800ed5a:	f7fe fbfc 	bl	800d556 <chk_chr>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d008      	beq.n	800ed76 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ed64:	235f      	movs	r3, #95	; 0x5f
 800ed66:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ed68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed6c:	f043 0303 	orr.w	r3, r3, #3
 800ed70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed74:	e01b      	b.n	800edae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ed76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed78:	2b40      	cmp	r3, #64	; 0x40
 800ed7a:	d909      	bls.n	800ed90 <create_name+0x294>
 800ed7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed7e:	2b5a      	cmp	r3, #90	; 0x5a
 800ed80:	d806      	bhi.n	800ed90 <create_name+0x294>
					b |= 2;
 800ed82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed86:	f043 0302 	orr.w	r3, r3, #2
 800ed8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed8e:	e00e      	b.n	800edae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ed90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed92:	2b60      	cmp	r3, #96	; 0x60
 800ed94:	d90b      	bls.n	800edae <create_name+0x2b2>
 800ed96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed98:	2b7a      	cmp	r3, #122	; 0x7a
 800ed9a:	d808      	bhi.n	800edae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ed9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eda0:	f043 0301 	orr.w	r3, r3, #1
 800eda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edaa:	3b20      	subs	r3, #32
 800edac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	623a      	str	r2, [r7, #32]
 800edb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800edb6:	b2d1      	uxtb	r1, r2
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	4413      	add	r3, r2
 800edbc:	460a      	mov	r2, r1
 800edbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800edc2:	e763      	b.n	800ec8c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800edc4:	bf00      	nop
 800edc6:	e006      	b.n	800edd6 <create_name+0x2da>
 800edc8:	080179ac 	.word	0x080179ac
 800edcc:	08017a20 	.word	0x08017a20
 800edd0:	080179b8 	.word	0x080179b8
			if (si > di) break;			/* No extension */
 800edd4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eddc:	2be5      	cmp	r3, #229	; 0xe5
 800edde:	d103      	bne.n	800ede8 <create_name+0x2ec>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2205      	movs	r2, #5
 800ede4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	2b08      	cmp	r3, #8
 800edec:	d104      	bne.n	800edf8 <create_name+0x2fc>
 800edee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800edf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edfc:	f003 030c 	and.w	r3, r3, #12
 800ee00:	2b0c      	cmp	r3, #12
 800ee02:	d005      	beq.n	800ee10 <create_name+0x314>
 800ee04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee08:	f003 0303 	and.w	r3, r3, #3
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d105      	bne.n	800ee1c <create_name+0x320>
 800ee10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee14:	f043 0302 	orr.w	r3, r3, #2
 800ee18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ee1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee20:	f003 0302 	and.w	r3, r3, #2
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d117      	bne.n	800ee58 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ee28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee2c:	f003 0303 	and.w	r3, r3, #3
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d105      	bne.n	800ee40 <create_name+0x344>
 800ee34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee38:	f043 0310 	orr.w	r3, r3, #16
 800ee3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ee40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee44:	f003 030c 	and.w	r3, r3, #12
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d105      	bne.n	800ee58 <create_name+0x35c>
 800ee4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee50:	f043 0308 	orr.w	r3, r3, #8
 800ee54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ee5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ee62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3728      	adds	r7, #40	; 0x28
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ee80:	e002      	b.n	800ee88 <follow_path+0x1c>
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	3301      	adds	r3, #1
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ee8e:	d0f8      	beq.n	800ee82 <follow_path+0x16>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	2b5c      	cmp	r3, #92	; 0x5c
 800ee96:	d0f4      	beq.n	800ee82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b1f      	cmp	r3, #31
 800eea4:	d80a      	bhi.n	800eebc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2280      	movs	r2, #128	; 0x80
 800eeaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eeae:	2100      	movs	r1, #0
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff f8fd 	bl	800e0b0 <dir_sdi>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	75fb      	strb	r3, [r7, #23]
 800eeba:	e048      	b.n	800ef4e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eebc:	463b      	mov	r3, r7
 800eebe:	4619      	mov	r1, r3
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff fe1b 	bl	800eafc <create_name>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eeca:	7dfb      	ldrb	r3, [r7, #23]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d139      	bne.n	800ef44 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff fc5a 	bl	800e78a <dir_find>
 800eed6:	4603      	mov	r3, r0
 800eed8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eee0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00a      	beq.n	800eefe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eee8:	7dfb      	ldrb	r3, [r7, #23]
 800eeea:	2b04      	cmp	r3, #4
 800eeec:	d12c      	bne.n	800ef48 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eeee:	7afb      	ldrb	r3, [r7, #11]
 800eef0:	f003 0304 	and.w	r3, r3, #4
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d127      	bne.n	800ef48 <follow_path+0xdc>
 800eef8:	2305      	movs	r3, #5
 800eefa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eefc:	e024      	b.n	800ef48 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eefe:	7afb      	ldrb	r3, [r7, #11]
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d121      	bne.n	800ef4c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	799b      	ldrb	r3, [r3, #6]
 800ef0c:	f003 0310 	and.w	r3, r3, #16
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ef14:	2305      	movs	r3, #5
 800ef16:	75fb      	strb	r3, [r7, #23]
 800ef18:	e019      	b.n	800ef4e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	8992      	ldrh	r2, [r2, #12]
 800ef28:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef2c:	fb00 f202 	mul.w	r2, r0, r2
 800ef30:	1a9b      	subs	r3, r3, r2
 800ef32:	440b      	add	r3, r1
 800ef34:	4619      	mov	r1, r3
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f7ff fa60 	bl	800e3fc <ld_clust>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef42:	e7bb      	b.n	800eebc <follow_path+0x50>
			if (res != FR_OK) break;
 800ef44:	bf00      	nop
 800ef46:	e002      	b.n	800ef4e <follow_path+0xe2>
				break;
 800ef48:	bf00      	nop
 800ef4a:	e000      	b.n	800ef4e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ef4c:	bf00      	nop
			}
		}
	}

	return res;
 800ef4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ef60:	f04f 33ff 	mov.w	r3, #4294967295
 800ef64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d031      	beq.n	800efd2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e002      	b.n	800ef7c <get_ldnumber+0x24>
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b1f      	cmp	r3, #31
 800ef82:	d903      	bls.n	800ef8c <get_ldnumber+0x34>
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	2b3a      	cmp	r3, #58	; 0x3a
 800ef8a:	d1f4      	bne.n	800ef76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b3a      	cmp	r3, #58	; 0x3a
 800ef92:	d11c      	bne.n	800efce <get_ldnumber+0x76>
			tp = *path;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	60fa      	str	r2, [r7, #12]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	3b30      	subs	r3, #48	; 0x30
 800efa4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2b09      	cmp	r3, #9
 800efaa:	d80e      	bhi.n	800efca <get_ldnumber+0x72>
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d10a      	bne.n	800efca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d107      	bne.n	800efca <get_ldnumber+0x72>
					vol = (int)i;
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	3301      	adds	r3, #1
 800efc2:	617b      	str	r3, [r7, #20]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	697a      	ldr	r2, [r7, #20]
 800efc8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	e002      	b.n	800efd4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800efce:	2300      	movs	r3, #0
 800efd0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800efd2:	693b      	ldr	r3, [r7, #16]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	371c      	adds	r7, #28
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	70da      	strb	r2, [r3, #3]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f04f 32ff 	mov.w	r2, #4294967295
 800eff6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7fe fc76 	bl	800d8ec <move_window>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <check_fs+0x2a>
 800f006:	2304      	movs	r3, #4
 800f008:	e038      	b.n	800f07c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	3338      	adds	r3, #56	; 0x38
 800f00e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe f9ba 	bl	800d38c <ld_word>
 800f018:	4603      	mov	r3, r0
 800f01a:	461a      	mov	r2, r3
 800f01c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f020:	429a      	cmp	r2, r3
 800f022:	d001      	beq.n	800f028 <check_fs+0x48>
 800f024:	2303      	movs	r3, #3
 800f026:	e029      	b.n	800f07c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f02e:	2be9      	cmp	r3, #233	; 0xe9
 800f030:	d009      	beq.n	800f046 <check_fs+0x66>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f038:	2beb      	cmp	r3, #235	; 0xeb
 800f03a:	d11e      	bne.n	800f07a <check_fs+0x9a>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f042:	2b90      	cmp	r3, #144	; 0x90
 800f044:	d119      	bne.n	800f07a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3338      	adds	r3, #56	; 0x38
 800f04a:	3336      	adds	r3, #54	; 0x36
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe f9b5 	bl	800d3bc <ld_dword>
 800f052:	4603      	mov	r3, r0
 800f054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f058:	4a0a      	ldr	r2, [pc, #40]	; (800f084 <check_fs+0xa4>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d101      	bne.n	800f062 <check_fs+0x82>
 800f05e:	2300      	movs	r3, #0
 800f060:	e00c      	b.n	800f07c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3338      	adds	r3, #56	; 0x38
 800f066:	3352      	adds	r3, #82	; 0x52
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe f9a7 	bl	800d3bc <ld_dword>
 800f06e:	4603      	mov	r3, r0
 800f070:	4a05      	ldr	r2, [pc, #20]	; (800f088 <check_fs+0xa8>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d101      	bne.n	800f07a <check_fs+0x9a>
 800f076:	2300      	movs	r3, #0
 800f078:	e000      	b.n	800f07c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f07a:	2302      	movs	r3, #2
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	00544146 	.word	0x00544146
 800f088:	33544146 	.word	0x33544146

0800f08c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b096      	sub	sp, #88	; 0x58
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	4613      	mov	r3, r2
 800f098:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7ff ff59 	bl	800ef58 <get_ldnumber>
 800f0a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	da01      	bge.n	800f0b2 <find_volume+0x26>
 800f0ae:	230b      	movs	r3, #11
 800f0b0:	e265      	b.n	800f57e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f0b2:	4a9f      	ldr	r2, [pc, #636]	; (800f330 <find_volume+0x2a4>)
 800f0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <find_volume+0x3a>
 800f0c2:	230c      	movs	r3, #12
 800f0c4:	e25b      	b.n	800f57e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	f023 0301 	bic.w	r3, r3, #1
 800f0d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01a      	beq.n	800f112 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0de:	785b      	ldrb	r3, [r3, #1]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fe f8b5 	bl	800d250 <disk_status>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f0ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0f0:	f003 0301 	and.w	r3, r3, #1
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10c      	bne.n	800f112 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d007      	beq.n	800f10e <find_volume+0x82>
 800f0fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f102:	f003 0304 	and.w	r3, r3, #4
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f10a:	230a      	movs	r3, #10
 800f10c:	e237      	b.n	800f57e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f10e:	2300      	movs	r3, #0
 800f110:	e235      	b.n	800f57e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	2200      	movs	r2, #0
 800f116:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	785b      	ldrb	r3, [r3, #1]
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe f8ad 	bl	800d284 <disk_initialize>
 800f12a:	4603      	mov	r3, r0
 800f12c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f134:	f003 0301 	and.w	r3, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f13c:	2303      	movs	r3, #3
 800f13e:	e21e      	b.n	800f57e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f140:	79fb      	ldrb	r3, [r7, #7]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <find_volume+0xca>
 800f146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f14a:	f003 0304 	and.w	r3, r3, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d001      	beq.n	800f156 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f152:	230a      	movs	r3, #10
 800f154:	e213      	b.n	800f57e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f158:	7858      	ldrb	r0, [r3, #1]
 800f15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15c:	330c      	adds	r3, #12
 800f15e:	461a      	mov	r2, r3
 800f160:	2102      	movs	r1, #2
 800f162:	f7fe f8f5 	bl	800d350 <disk_ioctl>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d001      	beq.n	800f170 <find_volume+0xe4>
 800f16c:	2301      	movs	r3, #1
 800f16e:	e206      	b.n	800f57e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	899b      	ldrh	r3, [r3, #12]
 800f174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f178:	d80d      	bhi.n	800f196 <find_volume+0x10a>
 800f17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17c:	899b      	ldrh	r3, [r3, #12]
 800f17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f182:	d308      	bcc.n	800f196 <find_volume+0x10a>
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	899b      	ldrh	r3, [r3, #12]
 800f188:	461a      	mov	r2, r3
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	899b      	ldrh	r3, [r3, #12]
 800f18e:	3b01      	subs	r3, #1
 800f190:	4013      	ands	r3, r2
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <find_volume+0x10e>
 800f196:	2301      	movs	r3, #1
 800f198:	e1f1      	b.n	800f57e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f19e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1a2:	f7ff ff1d 	bl	800efe0 <check_fs>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d149      	bne.n	800f248 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	643b      	str	r3, [r7, #64]	; 0x40
 800f1b8:	e01e      	b.n	800f1f8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f1c8:	4413      	add	r3, r2
 800f1ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d006      	beq.n	800f1e4 <find_volume+0x158>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	3308      	adds	r3, #8
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe f8ee 	bl	800d3bc <ld_dword>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	e000      	b.n	800f1e6 <find_volume+0x15a>
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	3358      	adds	r3, #88	; 0x58
 800f1ec:	443b      	add	r3, r7
 800f1ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	643b      	str	r3, [r7, #64]	; 0x40
 800f1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1fa:	2b03      	cmp	r3, #3
 800f1fc:	d9dd      	bls.n	800f1ba <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f1fe:	2300      	movs	r3, #0
 800f200:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <find_volume+0x182>
 800f208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f20a:	3b01      	subs	r3, #1
 800f20c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	3358      	adds	r3, #88	; 0x58
 800f214:	443b      	add	r3, r7
 800f216:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f21a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d005      	beq.n	800f22e <find_volume+0x1a2>
 800f222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f226:	f7ff fedb 	bl	800efe0 <check_fs>
 800f22a:	4603      	mov	r3, r0
 800f22c:	e000      	b.n	800f230 <find_volume+0x1a4>
 800f22e:	2303      	movs	r3, #3
 800f230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d905      	bls.n	800f248 <find_volume+0x1bc>
 800f23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f23e:	3301      	adds	r3, #1
 800f240:	643b      	str	r3, [r7, #64]	; 0x40
 800f242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f244:	2b03      	cmp	r3, #3
 800f246:	d9e2      	bls.n	800f20e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f24c:	2b04      	cmp	r3, #4
 800f24e:	d101      	bne.n	800f254 <find_volume+0x1c8>
 800f250:	2301      	movs	r3, #1
 800f252:	e194      	b.n	800f57e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d901      	bls.n	800f260 <find_volume+0x1d4>
 800f25c:	230d      	movs	r3, #13
 800f25e:	e18e      	b.n	800f57e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	3338      	adds	r3, #56	; 0x38
 800f264:	330b      	adds	r3, #11
 800f266:	4618      	mov	r0, r3
 800f268:	f7fe f890 	bl	800d38c <ld_word>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461a      	mov	r2, r3
 800f270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f272:	899b      	ldrh	r3, [r3, #12]
 800f274:	429a      	cmp	r2, r3
 800f276:	d001      	beq.n	800f27c <find_volume+0x1f0>
 800f278:	230d      	movs	r3, #13
 800f27a:	e180      	b.n	800f57e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	3338      	adds	r3, #56	; 0x38
 800f280:	3316      	adds	r3, #22
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe f882 	bl	800d38c <ld_word>
 800f288:	4603      	mov	r3, r0
 800f28a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <find_volume+0x214>
 800f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f294:	3338      	adds	r3, #56	; 0x38
 800f296:	3324      	adds	r3, #36	; 0x24
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fe f88f 	bl	800d3bc <ld_dword>
 800f29e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f2a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	789b      	ldrb	r3, [r3, #2]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d005      	beq.n	800f2c4 <find_volume+0x238>
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	789b      	ldrb	r3, [r3, #2]
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d001      	beq.n	800f2c4 <find_volume+0x238>
 800f2c0:	230d      	movs	r3, #13
 800f2c2:	e15c      	b.n	800f57e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c6:	789b      	ldrb	r3, [r3, #2]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2cc:	fb02 f303 	mul.w	r3, r2, r3
 800f2d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	895b      	ldrh	r3, [r3, #10]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <find_volume+0x26c>
 800f2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e8:	895b      	ldrh	r3, [r3, #10]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ee:	895b      	ldrh	r3, [r3, #10]
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d001      	beq.n	800f2fc <find_volume+0x270>
 800f2f8:	230d      	movs	r3, #13
 800f2fa:	e140      	b.n	800f57e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	3338      	adds	r3, #56	; 0x38
 800f300:	3311      	adds	r3, #17
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe f842 	bl	800d38c <ld_word>
 800f308:	4603      	mov	r3, r0
 800f30a:	461a      	mov	r2, r3
 800f30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	891b      	ldrh	r3, [r3, #8]
 800f314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f316:	8992      	ldrh	r2, [r2, #12]
 800f318:	0952      	lsrs	r2, r2, #5
 800f31a:	b292      	uxth	r2, r2
 800f31c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f320:	fb01 f202 	mul.w	r2, r1, r2
 800f324:	1a9b      	subs	r3, r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <find_volume+0x2a8>
 800f32c:	230d      	movs	r3, #13
 800f32e:	e126      	b.n	800f57e <find_volume+0x4f2>
 800f330:	20004718 	.word	0x20004718

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f336:	3338      	adds	r3, #56	; 0x38
 800f338:	3313      	adds	r3, #19
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe f826 	bl	800d38c <ld_word>
 800f340:	4603      	mov	r3, r0
 800f342:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f346:	2b00      	cmp	r3, #0
 800f348:	d106      	bne.n	800f358 <find_volume+0x2cc>
 800f34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34c:	3338      	adds	r3, #56	; 0x38
 800f34e:	3320      	adds	r3, #32
 800f350:	4618      	mov	r0, r3
 800f352:	f7fe f833 	bl	800d3bc <ld_dword>
 800f356:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	3338      	adds	r3, #56	; 0x38
 800f35c:	330e      	adds	r3, #14
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fe f814 	bl	800d38c <ld_word>
 800f364:	4603      	mov	r3, r0
 800f366:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f368:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <find_volume+0x2e6>
 800f36e:	230d      	movs	r3, #13
 800f370:	e105      	b.n	800f57e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f372:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f376:	4413      	add	r3, r2
 800f378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f37a:	8911      	ldrh	r1, [r2, #8]
 800f37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f37e:	8992      	ldrh	r2, [r2, #12]
 800f380:	0952      	lsrs	r2, r2, #5
 800f382:	b292      	uxth	r2, r2
 800f384:	fbb1 f2f2 	udiv	r2, r1, r2
 800f388:	b292      	uxth	r2, r2
 800f38a:	4413      	add	r3, r2
 800f38c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f38e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	429a      	cmp	r2, r3
 800f394:	d201      	bcs.n	800f39a <find_volume+0x30e>
 800f396:	230d      	movs	r3, #13
 800f398:	e0f1      	b.n	800f57e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f39a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3a2:	8952      	ldrh	r2, [r2, #10]
 800f3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d101      	bne.n	800f3b4 <find_volume+0x328>
 800f3b0:	230d      	movs	r3, #13
 800f3b2:	e0e4      	b.n	800f57e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d802      	bhi.n	800f3ca <find_volume+0x33e>
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d802      	bhi.n	800f3da <find_volume+0x34e>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	1c9a      	adds	r2, r3, #2
 800f3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f3e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ec:	441a      	add	r2, r3
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f3f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	441a      	add	r2, r3
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f3fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f400:	2b03      	cmp	r3, #3
 800f402:	d11e      	bne.n	800f442 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f406:	3338      	adds	r3, #56	; 0x38
 800f408:	332a      	adds	r3, #42	; 0x2a
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fd ffbe 	bl	800d38c <ld_word>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <find_volume+0x38e>
 800f416:	230d      	movs	r3, #13
 800f418:	e0b1      	b.n	800f57e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41c:	891b      	ldrh	r3, [r3, #8]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <find_volume+0x39a>
 800f422:	230d      	movs	r3, #13
 800f424:	e0ab      	b.n	800f57e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f428:	3338      	adds	r3, #56	; 0x38
 800f42a:	332c      	adds	r3, #44	; 0x2c
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fd ffc5 	bl	800d3bc <ld_dword>
 800f432:	4602      	mov	r2, r0
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	647b      	str	r3, [r7, #68]	; 0x44
 800f440:	e01f      	b.n	800f482 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	891b      	ldrh	r3, [r3, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d101      	bne.n	800f44e <find_volume+0x3c2>
 800f44a:	230d      	movs	r3, #13
 800f44c:	e097      	b.n	800f57e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f454:	441a      	add	r2, r3
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f45a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d103      	bne.n	800f46a <find_volume+0x3de>
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	69db      	ldr	r3, [r3, #28]
 800f466:	005b      	lsls	r3, r3, #1
 800f468:	e00a      	b.n	800f480 <find_volume+0x3f4>
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	69da      	ldr	r2, [r3, #28]
 800f46e:	4613      	mov	r3, r2
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	4413      	add	r3, r2
 800f474:	085a      	lsrs	r2, r3, #1
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f480:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	6a1a      	ldr	r2, [r3, #32]
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	899b      	ldrh	r3, [r3, #12]
 800f48a:	4619      	mov	r1, r3
 800f48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f48e:	440b      	add	r3, r1
 800f490:	3b01      	subs	r3, #1
 800f492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f494:	8989      	ldrh	r1, [r1, #12]
 800f496:	fbb3 f3f1 	udiv	r3, r3, r1
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d201      	bcs.n	800f4a2 <find_volume+0x416>
 800f49e:	230d      	movs	r3, #13
 800f4a0:	e06d      	b.n	800f57e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a8:	619a      	str	r2, [r3, #24]
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ac:	699a      	ldr	r2, [r3, #24]
 800f4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b4:	2280      	movs	r2, #128	; 0x80
 800f4b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d149      	bne.n	800f554 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	3338      	adds	r3, #56	; 0x38
 800f4c4:	3330      	adds	r3, #48	; 0x30
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fd ff60 	bl	800d38c <ld_word>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d140      	bne.n	800f554 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4da:	f7fe fa07 	bl	800d8ec <move_window>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d137      	bne.n	800f554 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ec:	3338      	adds	r3, #56	; 0x38
 800f4ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fd ff4a 	bl	800d38c <ld_word>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f500:	429a      	cmp	r2, r3
 800f502:	d127      	bne.n	800f554 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	3338      	adds	r3, #56	; 0x38
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fd ff57 	bl	800d3bc <ld_dword>
 800f50e:	4603      	mov	r3, r0
 800f510:	4a1d      	ldr	r2, [pc, #116]	; (800f588 <find_volume+0x4fc>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d11e      	bne.n	800f554 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	3338      	adds	r3, #56	; 0x38
 800f51a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fd ff4c 	bl	800d3bc <ld_dword>
 800f524:	4603      	mov	r3, r0
 800f526:	4a19      	ldr	r2, [pc, #100]	; (800f58c <find_volume+0x500>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d113      	bne.n	800f554 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	3338      	adds	r3, #56	; 0x38
 800f530:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f534:	4618      	mov	r0, r3
 800f536:	f7fd ff41 	bl	800d3bc <ld_dword>
 800f53a:	4602      	mov	r2, r0
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f542:	3338      	adds	r3, #56	; 0x38
 800f544:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd ff37 	bl	800d3bc <ld_dword>
 800f54e:	4602      	mov	r2, r0
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f556:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f55a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f55c:	4b0c      	ldr	r3, [pc, #48]	; (800f590 <find_volume+0x504>)
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	3301      	adds	r3, #1
 800f562:	b29a      	uxth	r2, r3
 800f564:	4b0a      	ldr	r3, [pc, #40]	; (800f590 <find_volume+0x504>)
 800f566:	801a      	strh	r2, [r3, #0]
 800f568:	4b09      	ldr	r3, [pc, #36]	; (800f590 <find_volume+0x504>)
 800f56a:	881a      	ldrh	r2, [r3, #0]
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	4a08      	ldr	r2, [pc, #32]	; (800f594 <find_volume+0x508>)
 800f574:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f578:	f7fe f950 	bl	800d81c <clear_lock>
#endif
	return FR_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3758      	adds	r7, #88	; 0x58
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	41615252 	.word	0x41615252
 800f58c:	61417272 	.word	0x61417272
 800f590:	2000471c 	.word	0x2000471c
 800f594:	20004740 	.word	0x20004740

0800f598 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f5a2:	2309      	movs	r3, #9
 800f5a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d01c      	beq.n	800f5e6 <validate+0x4e>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d018      	beq.n	800f5e6 <validate+0x4e>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d013      	beq.n	800f5e6 <validate+0x4e>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	889a      	ldrh	r2, [r3, #4]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	88db      	ldrh	r3, [r3, #6]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d10c      	bne.n	800f5e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	785b      	ldrb	r3, [r3, #1]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd fe3c 	bl	800d250 <disk_status>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <validate+0x4e>
			res = FR_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <validate+0x5a>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	e000      	b.n	800f5f4 <validate+0x5c>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	6013      	str	r3, [r2, #0]
	return res;
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
	...

0800f604 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	4613      	mov	r3, r2
 800f610:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f616:	f107 0310 	add.w	r3, r7, #16
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fc9c 	bl	800ef58 <get_ldnumber>
 800f620:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	2b00      	cmp	r3, #0
 800f626:	da01      	bge.n	800f62c <f_mount+0x28>
 800f628:	230b      	movs	r3, #11
 800f62a:	e02b      	b.n	800f684 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f62c:	4a17      	ldr	r2, [pc, #92]	; (800f68c <f_mount+0x88>)
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f634:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f7fe f8ed 	bl	800d81c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	2200      	movs	r2, #0
 800f646:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d002      	beq.n	800f654 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2200      	movs	r2, #0
 800f652:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	490d      	ldr	r1, [pc, #52]	; (800f68c <f_mount+0x88>)
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d002      	beq.n	800f66a <f_mount+0x66>
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d001      	beq.n	800f66e <f_mount+0x6a>
 800f66a:	2300      	movs	r3, #0
 800f66c:	e00a      	b.n	800f684 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f66e:	f107 010c 	add.w	r1, r7, #12
 800f672:	f107 0308 	add.w	r3, r7, #8
 800f676:	2200      	movs	r2, #0
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff fd07 	bl	800f08c <find_volume>
 800f67e:	4603      	mov	r3, r0
 800f680:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f682:	7dfb      	ldrb	r3, [r7, #23]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3720      	adds	r7, #32
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	20004718 	.word	0x20004718

0800f690 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b09a      	sub	sp, #104	; 0x68
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	4613      	mov	r3, r2
 800f69c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d101      	bne.n	800f6a8 <f_open+0x18>
 800f6a4:	2309      	movs	r3, #9
 800f6a6:	e1bb      	b.n	800fa20 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f6b0:	79fa      	ldrb	r2, [r7, #7]
 800f6b2:	f107 0114 	add.w	r1, r7, #20
 800f6b6:	f107 0308 	add.w	r3, r7, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff fce6 	bl	800f08c <find_volume>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f6c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f040 819f 	bne.w	800fa0e <f_open+0x37e>
		dj.obj.fs = fs;
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	f107 0318 	add.w	r3, r7, #24
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7ff fbc5 	bl	800ee6c <follow_path>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f6e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d11a      	bne.n	800f726 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f6f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f6f4:	b25b      	sxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	da03      	bge.n	800f702 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f6fa:	2306      	movs	r3, #6
 800f6fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f700:	e011      	b.n	800f726 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	f023 0301 	bic.w	r3, r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	bf14      	ite	ne
 800f70c:	2301      	movne	r3, #1
 800f70e:	2300      	moveq	r3, #0
 800f710:	b2db      	uxtb	r3, r3
 800f712:	461a      	mov	r2, r3
 800f714:	f107 0318 	add.w	r3, r7, #24
 800f718:	4611      	mov	r1, r2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fd ff36 	bl	800d58c <chk_lock>
 800f720:	4603      	mov	r3, r0
 800f722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	f003 031c 	and.w	r3, r3, #28
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d07f      	beq.n	800f830 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f734:	2b00      	cmp	r3, #0
 800f736:	d017      	beq.n	800f768 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f738:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f73c:	2b04      	cmp	r3, #4
 800f73e:	d10e      	bne.n	800f75e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f740:	f7fd ff80 	bl	800d644 <enq_lock>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d006      	beq.n	800f758 <f_open+0xc8>
 800f74a:	f107 0318 	add.w	r3, r7, #24
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff f8dc 	bl	800e90c <dir_register>
 800f754:	4603      	mov	r3, r0
 800f756:	e000      	b.n	800f75a <f_open+0xca>
 800f758:	2312      	movs	r3, #18
 800f75a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	f043 0308 	orr.w	r3, r3, #8
 800f764:	71fb      	strb	r3, [r7, #7]
 800f766:	e010      	b.n	800f78a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f768:	7fbb      	ldrb	r3, [r7, #30]
 800f76a:	f003 0311 	and.w	r3, r3, #17
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <f_open+0xea>
					res = FR_DENIED;
 800f772:	2307      	movs	r3, #7
 800f774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f778:	e007      	b.n	800f78a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	f003 0304 	and.w	r3, r3, #4
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <f_open+0xfa>
 800f784:	2308      	movs	r3, #8
 800f786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f78a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d168      	bne.n	800f864 <f_open+0x1d4>
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	f003 0308 	and.w	r3, r3, #8
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d063      	beq.n	800f864 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f79c:	f7fd fcf6 	bl	800d18c <get_fattime>
 800f7a0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a4:	330e      	adds	r3, #14
 800f7a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fd fe45 	bl	800d438 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b0:	3316      	adds	r3, #22
 800f7b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fd fe3f 	bl	800d438 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	330b      	adds	r3, #11
 800f7be:	2220      	movs	r2, #32
 800f7c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fe fe17 	bl	800e3fc <ld_clust>
 800f7ce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe fe2f 	bl	800e43a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	331c      	adds	r3, #28
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd fe28 	bl	800d438 <st_dword>
					fs->wflag = 1;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f7ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d037      	beq.n	800f864 <f_open+0x1d4>
						dw = fs->winsect;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f7fa:	f107 0318 	add.w	r3, r7, #24
 800f7fe:	2200      	movs	r2, #0
 800f800:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f802:	4618      	mov	r0, r3
 800f804:	f7fe fb1f 	bl	800de46 <remove_chain>
 800f808:	4603      	mov	r3, r0
 800f80a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f80e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f812:	2b00      	cmp	r3, #0
 800f814:	d126      	bne.n	800f864 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fe f866 	bl	800d8ec <move_window>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f82a:	3a01      	subs	r2, #1
 800f82c:	615a      	str	r2, [r3, #20]
 800f82e:	e019      	b.n	800f864 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f834:	2b00      	cmp	r3, #0
 800f836:	d115      	bne.n	800f864 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f838:	7fbb      	ldrb	r3, [r7, #30]
 800f83a:	f003 0310 	and.w	r3, r3, #16
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d003      	beq.n	800f84a <f_open+0x1ba>
					res = FR_NO_FILE;
 800f842:	2304      	movs	r3, #4
 800f844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f848:	e00c      	b.n	800f864 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	f003 0302 	and.w	r3, r3, #2
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <f_open+0x1d4>
 800f854:	7fbb      	ldrb	r3, [r7, #30]
 800f856:	f003 0301 	and.w	r3, r3, #1
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <f_open+0x1d4>
						res = FR_DENIED;
 800f85e:	2307      	movs	r3, #7
 800f860:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f864:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d128      	bne.n	800f8be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f86c:	79fb      	ldrb	r3, [r7, #7]
 800f86e:	f003 0308 	and.w	r3, r3, #8
 800f872:	2b00      	cmp	r3, #0
 800f874:	d003      	beq.n	800f87e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f87c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	f023 0301 	bic.w	r3, r3, #1
 800f892:	2b00      	cmp	r3, #0
 800f894:	bf14      	ite	ne
 800f896:	2301      	movne	r3, #1
 800f898:	2300      	moveq	r3, #0
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	461a      	mov	r2, r3
 800f89e:	f107 0318 	add.w	r3, r7, #24
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fd feef 	bl	800d688 <inc_lock>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d102      	bne.n	800f8be <f_open+0x22e>
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f8be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f040 80a3 	bne.w	800fa0e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fe fd94 	bl	800e3fc <ld_clust>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8dc:	331c      	adds	r3, #28
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fd fd6c 	bl	800d3bc <ld_dword>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	88da      	ldrh	r2, [r3, #6]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2200      	movs	r2, #0
 800f914:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3330      	adds	r3, #48	; 0x30
 800f91a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f91e:	2100      	movs	r1, #0
 800f920:	4618      	mov	r0, r3
 800f922:	f7fd fdd6 	bl	800d4d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	f003 0320 	and.w	r3, r3, #32
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d06e      	beq.n	800fa0e <f_open+0x37e>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d06a      	beq.n	800fa0e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	68da      	ldr	r2, [r3, #12]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	895b      	ldrh	r3, [r3, #10]
 800f944:	461a      	mov	r2, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	fb02 f303 	mul.w	r3, r2, r3
 800f94e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f95c:	e016      	b.n	800f98c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f962:	4618      	mov	r0, r3
 800f964:	f7fe f87f 	bl	800da66 <get_fat>
 800f968:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f96a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d802      	bhi.n	800f976 <f_open+0x2e6>
 800f970:	2302      	movs	r3, #2
 800f972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97c:	d102      	bne.n	800f984 <f_open+0x2f4>
 800f97e:	2301      	movs	r3, #1
 800f980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f98c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f990:	2b00      	cmp	r3, #0
 800f992:	d103      	bne.n	800f99c <f_open+0x30c>
 800f994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f998:	429a      	cmp	r2, r3
 800f99a:	d8e0      	bhi.n	800f95e <f_open+0x2ce>
				}
				fp->clust = clst;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f9a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d131      	bne.n	800fa0e <f_open+0x37e>
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	899b      	ldrh	r3, [r3, #12]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9b6:	fb01 f202 	mul.w	r2, r1, r2
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d026      	beq.n	800fa0e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fe f82f 	bl	800da28 <clust2sect>
 800f9ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d103      	bne.n	800f9da <f_open+0x34a>
						res = FR_INT_ERR;
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f9d8:	e019      	b.n	800fa0e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	899b      	ldrh	r3, [r3, #12]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e8:	441a      	add	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	7858      	ldrb	r0, [r3, #1]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6a1a      	ldr	r2, [r3, #32]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f7fd fc67 	bl	800d2d0 <disk_read>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <f_open+0x37e>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d002      	beq.n	800fa1c <f_open+0x38c>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3768      	adds	r7, #104	; 0x68
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b08c      	sub	sp, #48	; 0x30
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f107 0210 	add.w	r2, r7, #16
 800fa46:	4611      	mov	r1, r2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fda5 	bl	800f598 <validate>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d107      	bne.n	800fa6c <f_write+0x44>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	7d5b      	ldrb	r3, [r3, #21]
 800fa60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fa64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d002      	beq.n	800fa72 <f_write+0x4a>
 800fa6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa70:	e16a      	b.n	800fd48 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	7d1b      	ldrb	r3, [r3, #20]
 800fa76:	f003 0302 	and.w	r3, r3, #2
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <f_write+0x5a>
 800fa7e:	2307      	movs	r3, #7
 800fa80:	e162      	b.n	800fd48 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	699a      	ldr	r2, [r3, #24]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	441a      	add	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	699b      	ldr	r3, [r3, #24]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f080 814c 	bcs.w	800fd2c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	43db      	mvns	r3, r3
 800fa9a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fa9c:	e146      	b.n	800fd2c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	693a      	ldr	r2, [r7, #16]
 800faa4:	8992      	ldrh	r2, [r2, #12]
 800faa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800faaa:	fb01 f202 	mul.w	r2, r1, r2
 800faae:	1a9b      	subs	r3, r3, r2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f040 80f1 	bne.w	800fc98 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	8992      	ldrh	r2, [r2, #12]
 800fabe:	fbb3 f3f2 	udiv	r3, r3, r2
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	8952      	ldrh	r2, [r2, #10]
 800fac6:	3a01      	subs	r2, #1
 800fac8:	4013      	ands	r3, r2
 800faca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d143      	bne.n	800fb5a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	699b      	ldr	r3, [r3, #24]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d10c      	bne.n	800faf4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d11a      	bne.n	800fb1c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2100      	movs	r1, #0
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe fa10 	bl	800df10 <create_chain>
 800faf0:	62b8      	str	r0, [r7, #40]	; 0x28
 800faf2:	e013      	b.n	800fb1c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d007      	beq.n	800fb0c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	699b      	ldr	r3, [r3, #24]
 800fb00:	4619      	mov	r1, r3
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7fe fa9c 	bl	800e040 <clmt_clust>
 800fb08:	62b8      	str	r0, [r7, #40]	; 0x28
 800fb0a:	e007      	b.n	800fb1c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	4619      	mov	r1, r3
 800fb14:	4610      	mov	r0, r2
 800fb16:	f7fe f9fb 	bl	800df10 <create_chain>
 800fb1a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 8109 	beq.w	800fd36 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d104      	bne.n	800fb34 <f_write+0x10c>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	755a      	strb	r2, [r3, #21]
 800fb30:	2302      	movs	r3, #2
 800fb32:	e109      	b.n	800fd48 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3a:	d104      	bne.n	800fb46 <f_write+0x11e>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	755a      	strb	r2, [r3, #21]
 800fb42:	2301      	movs	r3, #1
 800fb44:	e100      	b.n	800fd48 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb4a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <f_write+0x132>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb58:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	7d1b      	ldrb	r3, [r3, #20]
 800fb5e:	b25b      	sxtb	r3, r3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	da18      	bge.n	800fb96 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	7858      	ldrb	r0, [r3, #1]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6a1a      	ldr	r2, [r3, #32]
 800fb72:	2301      	movs	r3, #1
 800fb74:	f7fd fbcc 	bl	800d310 <disk_write>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d004      	beq.n	800fb88 <f_write+0x160>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2201      	movs	r2, #1
 800fb82:	755a      	strb	r2, [r3, #21]
 800fb84:	2301      	movs	r3, #1
 800fb86:	e0df      	b.n	800fd48 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	7d1b      	ldrb	r3, [r3, #20]
 800fb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb90:	b2da      	uxtb	r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7fd ff42 	bl	800da28 <clust2sect>
 800fba4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <f_write+0x18e>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2202      	movs	r2, #2
 800fbb0:	755a      	strb	r2, [r3, #21]
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	e0c8      	b.n	800fd48 <f_write+0x320>
			sect += csect;
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	4413      	add	r3, r2
 800fbbc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d043      	beq.n	800fc5a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fbd2:	69ba      	ldr	r2, [r7, #24]
 800fbd4:	6a3b      	ldr	r3, [r7, #32]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	693a      	ldr	r2, [r7, #16]
 800fbda:	8952      	ldrh	r2, [r2, #10]
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d905      	bls.n	800fbec <f_write+0x1c4>
					cc = fs->csize - csect;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	895b      	ldrh	r3, [r3, #10]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	7858      	ldrb	r0, [r3, #1]
 800fbf0:	6a3b      	ldr	r3, [r7, #32]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	69f9      	ldr	r1, [r7, #28]
 800fbf6:	f7fd fb8b 	bl	800d310 <disk_write>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d004      	beq.n	800fc0a <f_write+0x1e2>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2201      	movs	r2, #1
 800fc04:	755a      	strb	r2, [r3, #21]
 800fc06:	2301      	movs	r3, #1
 800fc08:	e09e      	b.n	800fd48 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6a1a      	ldr	r2, [r3, #32]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	6a3a      	ldr	r2, [r7, #32]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d918      	bls.n	800fc4a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6a1a      	ldr	r2, [r3, #32]
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	1ad3      	subs	r3, r2, r3
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	8992      	ldrh	r2, [r2, #12]
 800fc2a:	fb02 f303 	mul.w	r3, r2, r3
 800fc2e:	69fa      	ldr	r2, [r7, #28]
 800fc30:	18d1      	adds	r1, r2, r3
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	899b      	ldrh	r3, [r3, #12]
 800fc36:	461a      	mov	r2, r3
 800fc38:	f7fd fc2a 	bl	800d490 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	7d1b      	ldrb	r3, [r3, #20]
 800fc40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	899b      	ldrh	r3, [r3, #12]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	6a3b      	ldr	r3, [r7, #32]
 800fc52:	fb02 f303 	mul.w	r3, r2, r3
 800fc56:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fc58:	e04b      	b.n	800fcf2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d016      	beq.n	800fc92 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699a      	ldr	r2, [r3, #24]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d210      	bcs.n	800fc92 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	7858      	ldrb	r0, [r3, #1]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	f7fd fb27 	bl	800d2d0 <disk_read>
 800fc82:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d004      	beq.n	800fc92 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	755a      	strb	r2, [r3, #21]
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e05a      	b.n	800fd48 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	697a      	ldr	r2, [r7, #20]
 800fc96:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	899b      	ldrh	r3, [r3, #12]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	8992      	ldrh	r2, [r2, #12]
 800fca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcaa:	fb01 f202 	mul.w	r2, r1, r2
 800fcae:	1a9b      	subs	r3, r3, r2
 800fcb0:	1ac3      	subs	r3, r0, r3
 800fcb2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fcb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d901      	bls.n	800fcc0 <f_write+0x298>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	699b      	ldr	r3, [r3, #24]
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	8992      	ldrh	r2, [r2, #12]
 800fcce:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcd2:	fb00 f202 	mul.w	r2, r0, r2
 800fcd6:	1a9b      	subs	r3, r3, r2
 800fcd8:	440b      	add	r3, r1
 800fcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcdc:	69f9      	ldr	r1, [r7, #28]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fd fbd6 	bl	800d490 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fcec:	b2da      	uxtb	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	4413      	add	r3, r2
 800fcf8:	61fb      	str	r3, [r7, #28]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	699a      	ldr	r2, [r3, #24]
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	441a      	add	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	619a      	str	r2, [r3, #24]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	68da      	ldr	r2, [r3, #12]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	bf38      	it	cc
 800fd12:	461a      	movcc	r2, r3
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	60da      	str	r2, [r3, #12]
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	441a      	add	r2, r3
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f47f aeb5 	bne.w	800fa9e <f_write+0x76>
 800fd34:	e000      	b.n	800fd38 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd36:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	7d1b      	ldrb	r3, [r3, #20]
 800fd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3730      	adds	r7, #48	; 0x30
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f107 0208 	add.w	r2, r7, #8
 800fd5e:	4611      	mov	r1, r2
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7ff fc19 	bl	800f598 <validate>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d168      	bne.n	800fe42 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	7d1b      	ldrb	r3, [r3, #20]
 800fd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d062      	beq.n	800fe42 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	7d1b      	ldrb	r3, [r3, #20]
 800fd80:	b25b      	sxtb	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	da15      	bge.n	800fdb2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	7858      	ldrb	r0, [r3, #1]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6a1a      	ldr	r2, [r3, #32]
 800fd94:	2301      	movs	r3, #1
 800fd96:	f7fd fabb 	bl	800d310 <disk_write>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <f_sync+0x54>
 800fda0:	2301      	movs	r3, #1
 800fda2:	e04f      	b.n	800fe44 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	7d1b      	ldrb	r3, [r3, #20]
 800fda8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fdb2:	f7fd f9eb 	bl	800d18c <get_fattime>
 800fdb6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	f7fd fd93 	bl	800d8ec <move_window>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d138      	bne.n	800fe42 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	330b      	adds	r3, #11
 800fdda:	781a      	ldrb	r2, [r3, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	330b      	adds	r3, #11
 800fde0:	f042 0220 	orr.w	r2, r2, #32
 800fde4:	b2d2      	uxtb	r2, r2
 800fde6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6818      	ldr	r0, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	68f9      	ldr	r1, [r7, #12]
 800fdf4:	f7fe fb21 	bl	800e43a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f103 021c 	add.w	r2, r3, #28
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	4619      	mov	r1, r3
 800fe04:	4610      	mov	r0, r2
 800fe06:	f7fd fb17 	bl	800d438 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3316      	adds	r3, #22
 800fe0e:	6939      	ldr	r1, [r7, #16]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fd fb11 	bl	800d438 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3312      	adds	r3, #18
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fd faf0 	bl	800d402 <st_word>
					fs->wflag = 1;
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	2201      	movs	r2, #1
 800fe26:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fd fd8c 	bl	800d948 <sync_fs>
 800fe30:	4603      	mov	r3, r0
 800fe32:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	7d1b      	ldrb	r3, [r3, #20]
 800fe38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fe42:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3718      	adds	r7, #24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff ff7b 	bl	800fd50 <f_sync>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d118      	bne.n	800fe96 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f107 0208 	add.w	r2, r7, #8
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff fb93 	bl	800f598 <validate>
 800fe72:	4603      	mov	r3, r0
 800fe74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d10c      	bne.n	800fe96 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	691b      	ldr	r3, [r3, #16]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fd fc8f 	bl	800d7a4 <dec_lock>
 800fe86:	4603      	mov	r3, r0
 800fe88:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d102      	bne.n	800fe96 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fe96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b092      	sub	sp, #72	; 0x48
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800feac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800feb0:	f107 030c 	add.w	r3, r7, #12
 800feb4:	2200      	movs	r2, #0
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff f8e8 	bl	800f08c <find_volume>
 800febc:	4603      	mov	r3, r0
 800febe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800fec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f040 8099 	bne.w	800fffe <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	699a      	ldr	r2, [r3, #24]
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	69db      	ldr	r3, [r3, #28]
 800feda:	3b02      	subs	r3, #2
 800fedc:	429a      	cmp	r2, r3
 800fede:	d804      	bhi.n	800feea <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee2:	699a      	ldr	r2, [r3, #24]
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	601a      	str	r2, [r3, #0]
 800fee8:	e089      	b.n	800fffe <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800feea:	2300      	movs	r3, #0
 800feec:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800feee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d128      	bne.n	800ff48 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fef6:	2302      	movs	r3, #2
 800fef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fefe:	f107 0314 	add.w	r3, r7, #20
 800ff02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fd fdae 	bl	800da66 <get_fat>
 800ff0a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff12:	d103      	bne.n	800ff1c <f_getfree+0x7c>
 800ff14:	2301      	movs	r3, #1
 800ff16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ff1a:	e063      	b.n	800ffe4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d103      	bne.n	800ff2a <f_getfree+0x8a>
 800ff22:	2302      	movs	r3, #2
 800ff24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ff28:	e05c      	b.n	800ffe4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d102      	bne.n	800ff36 <f_getfree+0x96>
 800ff30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff32:	3301      	adds	r3, #1
 800ff34:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ff36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff38:	3301      	adds	r3, #1
 800ff3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3e:	69db      	ldr	r3, [r3, #28]
 800ff40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d3db      	bcc.n	800fefe <f_getfree+0x5e>
 800ff46:	e04d      	b.n	800ffe4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	69db      	ldr	r3, [r3, #28]
 800ff4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff52:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34
 800ff58:	2300      	movs	r3, #0
 800ff5a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ff5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d113      	bne.n	800ff8a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ff62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	1c5a      	adds	r2, r3, #1
 800ff68:	63ba      	str	r2, [r7, #56]	; 0x38
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	f7fd fcbe 	bl	800d8ec <move_window>
 800ff70:	4603      	mov	r3, r0
 800ff72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ff76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d131      	bne.n	800ffe2 <f_getfree+0x142>
							p = fs->win;
 800ff7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff80:	3338      	adds	r3, #56	; 0x38
 800ff82:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ff84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff86:	899b      	ldrh	r3, [r3, #12]
 800ff88:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d10f      	bne.n	800ffb2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ff92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff94:	f7fd f9fa 	bl	800d38c <ld_word>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d102      	bne.n	800ffa4 <f_getfree+0x104>
 800ff9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	3302      	adds	r3, #2
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30
 800ffaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffac:	3b02      	subs	r3, #2
 800ffae:	637b      	str	r3, [r7, #52]	; 0x34
 800ffb0:	e010      	b.n	800ffd4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ffb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffb4:	f7fd fa02 	bl	800d3bc <ld_dword>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d102      	bne.n	800ffc8 <f_getfree+0x128>
 800ffc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ffc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffca:	3304      	adds	r3, #4
 800ffcc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd0:	3b04      	subs	r3, #4
 800ffd2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ffd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd6:	3b01      	subs	r3, #1
 800ffd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d1bd      	bne.n	800ff5c <f_getfree+0xbc>
 800ffe0:	e000      	b.n	800ffe4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ffe2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffe8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffee:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800fff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff2:	791a      	ldrb	r2, [r3, #4]
 800fff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff6:	f042 0201 	orr.w	r2, r2, #1
 800fffa:	b2d2      	uxtb	r2, r2
 800fffc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800fffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010002:	4618      	mov	r0, r3
 8010004:	3748      	adds	r7, #72	; 0x48
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b084      	sub	sp, #16
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
 8010012:	460b      	mov	r3, r1
 8010014:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010016:	78fb      	ldrb	r3, [r7, #3]
 8010018:	2b0a      	cmp	r3, #10
 801001a:	d103      	bne.n	8010024 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801001c:	210d      	movs	r1, #13
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff fff3 	bl	801000a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2b00      	cmp	r3, #0
 801002e:	db25      	blt.n	801007c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	60fa      	str	r2, [r7, #12]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	4413      	add	r3, r2
 801003a:	78fa      	ldrb	r2, [r7, #3]
 801003c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2b3c      	cmp	r3, #60	; 0x3c
 8010042:	dd12      	ble.n	801006a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f103 010c 	add.w	r1, r3, #12
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	f107 0308 	add.w	r3, r7, #8
 8010054:	f7ff fce8 	bl	800fa28 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	429a      	cmp	r2, r3
 801005e:	d101      	bne.n	8010064 <putc_bfd+0x5a>
 8010060:	2300      	movs	r3, #0
 8010062:	e001      	b.n	8010068 <putc_bfd+0x5e>
 8010064:	f04f 33ff 	mov.w	r3, #4294967295
 8010068:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	609a      	str	r2, [r3, #8]
 801007a:	e000      	b.n	801007e <putc_bfd+0x74>
	if (i < 0) return;
 801007c:	bf00      	nop
}
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	db16      	blt.n	80100c2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6818      	ldr	r0, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f103 010c 	add.w	r1, r3, #12
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	461a      	mov	r2, r3
 80100a4:	f107 030c 	add.w	r3, r7, #12
 80100a8:	f7ff fcbe 	bl	800fa28 <f_write>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d107      	bne.n	80100c2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d102      	bne.n	80100c2 <putc_flush+0x3e>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	e001      	b.n	80100c6 <putc_flush+0x42>
	return EOF;
 80100c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
 80100d6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	605a      	str	r2, [r3, #4]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685a      	ldr	r2, [r3, #4]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	609a      	str	r2, [r3, #8]
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80100f8:	b40e      	push	{r1, r2, r3}
 80100fa:	b580      	push	{r7, lr}
 80100fc:	b0a7      	sub	sp, #156	; 0x9c
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8010102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	f7ff ffe0 	bl	80100ce <putc_init>

	va_start(arp, fmt);
 801010e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010112:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8010114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010124:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010128:	2b00      	cmp	r3, #0
 801012a:	f000 81f2 	beq.w	8010512 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801012e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010132:	2b25      	cmp	r3, #37	; 0x25
 8010134:	d008      	beq.n	8010148 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010136:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801013a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff ff62 	bl	801000a <putc_bfd>
			continue;
 8010146:	e1e3      	b.n	8010510 <f_printf+0x418>
		}
		w = f = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801014e:	2300      	movs	r3, #0
 8010150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010164:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010168:	2b30      	cmp	r3, #48	; 0x30
 801016a:	d10b      	bne.n	8010184 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801016c:	2301      	movs	r3, #1
 801016e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010182:	e024      	b.n	80101ce <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010184:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010188:	2b2d      	cmp	r3, #45	; 0x2d
 801018a:	d120      	bne.n	80101ce <f_printf+0xd6>
				f = 2; c = *fmt++;
 801018c:	2302      	movs	r3, #2
 801018e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010196:	1c5a      	adds	r2, r3, #1
 8010198:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80101a2:	e014      	b.n	80101ce <f_printf+0xd6>
			w = w * 10 + c - '0';
 80101a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80101a8:	4613      	mov	r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	461a      	mov	r2, r3
 80101b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80101b6:	4413      	add	r3, r2
 80101b8:	3b30      	subs	r3, #48	; 0x30
 80101ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80101be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101c2:	1c5a      	adds	r2, r3, #1
 80101c4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80101ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80101d2:	2b2f      	cmp	r3, #47	; 0x2f
 80101d4:	d903      	bls.n	80101de <f_printf+0xe6>
 80101d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80101da:	2b39      	cmp	r3, #57	; 0x39
 80101dc:	d9e2      	bls.n	80101a4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80101de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80101e2:	2b6c      	cmp	r3, #108	; 0x6c
 80101e4:	d003      	beq.n	80101ee <f_printf+0xf6>
 80101e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80101ea:	2b4c      	cmp	r3, #76	; 0x4c
 80101ec:	d10d      	bne.n	801020a <f_printf+0x112>
			f |= 4; c = *fmt++;
 80101ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80101f2:	f043 0304 	orr.w	r3, r3, #4
 80101f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80101fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101fe:	1c5a      	adds	r2, r3, #1
 8010200:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801020a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 8181 	beq.w	8010516 <f_printf+0x41e>
		d = c;
 8010214:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010218:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 801021c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010220:	2b60      	cmp	r3, #96	; 0x60
 8010222:	d908      	bls.n	8010236 <f_printf+0x13e>
 8010224:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010228:	2b7a      	cmp	r3, #122	; 0x7a
 801022a:	d804      	bhi.n	8010236 <f_printf+0x13e>
 801022c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010230:	3b20      	subs	r3, #32
 8010232:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8010236:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801023a:	3b42      	subs	r3, #66	; 0x42
 801023c:	2b16      	cmp	r3, #22
 801023e:	f200 8098 	bhi.w	8010372 <f_printf+0x27a>
 8010242:	a201      	add	r2, pc, #4	; (adr r2, 8010248 <f_printf+0x150>)
 8010244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010248:	08010353 	.word	0x08010353
 801024c:	0801033b 	.word	0x0801033b
 8010250:	08010363 	.word	0x08010363
 8010254:	08010373 	.word	0x08010373
 8010258:	08010373 	.word	0x08010373
 801025c:	08010373 	.word	0x08010373
 8010260:	08010373 	.word	0x08010373
 8010264:	08010373 	.word	0x08010373
 8010268:	08010373 	.word	0x08010373
 801026c:	08010373 	.word	0x08010373
 8010270:	08010373 	.word	0x08010373
 8010274:	08010373 	.word	0x08010373
 8010278:	08010373 	.word	0x08010373
 801027c:	0801035b 	.word	0x0801035b
 8010280:	08010373 	.word	0x08010373
 8010284:	08010373 	.word	0x08010373
 8010288:	08010373 	.word	0x08010373
 801028c:	080102a5 	.word	0x080102a5
 8010290:	08010373 	.word	0x08010373
 8010294:	08010363 	.word	0x08010363
 8010298:	08010373 	.word	0x08010373
 801029c:	08010373 	.word	0x08010373
 80102a0:	0801036b 	.word	0x0801036b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80102a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102a6:	1d1a      	adds	r2, r3, #4
 80102a8:	67ba      	str	r2, [r7, #120]	; 0x78
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80102ae:	2300      	movs	r3, #0
 80102b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80102b4:	e004      	b.n	80102c0 <f_printf+0x1c8>
 80102b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102ba:	3301      	adds	r3, #1
 80102bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80102c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102c6:	4413      	add	r3, r2
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1f3      	bne.n	80102b6 <f_printf+0x1be>
			if (!(f & 2)) {
 80102ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80102d2:	f003 0302 	and.w	r3, r3, #2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d11a      	bne.n	8010310 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80102da:	e005      	b.n	80102e8 <f_printf+0x1f0>
 80102dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80102e0:	2120      	movs	r1, #32
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fe91 	bl	801000a <putc_bfd>
 80102e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102ec:	1c5a      	adds	r2, r3, #1
 80102ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80102f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d8f0      	bhi.n	80102dc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80102fa:	e009      	b.n	8010310 <f_printf+0x218>
 80102fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010302:	781a      	ldrb	r2, [r3, #0]
 8010304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010308:	4611      	mov	r1, r2
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff fe7d 	bl	801000a <putc_bfd>
 8010310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d1f1      	bne.n	80102fc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8010318:	e005      	b.n	8010326 <f_printf+0x22e>
 801031a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801031e:	2120      	movs	r1, #32
 8010320:	4618      	mov	r0, r3
 8010322:	f7ff fe72 	bl	801000a <putc_bfd>
 8010326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801032a:	1c5a      	adds	r2, r3, #1
 801032c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010330:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010334:	429a      	cmp	r2, r3
 8010336:	d8f0      	bhi.n	801031a <f_printf+0x222>
			continue;
 8010338:	e0ea      	b.n	8010510 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801033a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801033c:	1d1a      	adds	r2, r3, #4
 801033e:	67ba      	str	r2, [r7, #120]	; 0x78
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	b2da      	uxtb	r2, r3
 8010344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff fe5d 	bl	801000a <putc_bfd>
 8010350:	e0de      	b.n	8010510 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010352:	2302      	movs	r3, #2
 8010354:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010358:	e014      	b.n	8010384 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801035a:	2308      	movs	r3, #8
 801035c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010360:	e010      	b.n	8010384 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010362:	230a      	movs	r3, #10
 8010364:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010368:	e00c      	b.n	8010384 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801036a:	2310      	movs	r3, #16
 801036c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010370:	e008      	b.n	8010384 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010372:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801037a:	4611      	mov	r1, r2
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff fe44 	bl	801000a <putc_bfd>
 8010382:	e0c5      	b.n	8010510 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010384:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010388:	f003 0304 	and.w	r3, r3, #4
 801038c:	2b00      	cmp	r3, #0
 801038e:	d004      	beq.n	801039a <f_printf+0x2a2>
 8010390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010392:	1d1a      	adds	r2, r3, #4
 8010394:	67ba      	str	r2, [r7, #120]	; 0x78
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	e00c      	b.n	80103b4 <f_printf+0x2bc>
 801039a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801039e:	2b44      	cmp	r3, #68	; 0x44
 80103a0:	d104      	bne.n	80103ac <f_printf+0x2b4>
 80103a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103a4:	1d1a      	adds	r2, r3, #4
 80103a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	e003      	b.n	80103b4 <f_printf+0x2bc>
 80103ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103ae:	1d1a      	adds	r2, r3, #4
 80103b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80103b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80103bc:	2b44      	cmp	r3, #68	; 0x44
 80103be:	d10e      	bne.n	80103de <f_printf+0x2e6>
 80103c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	da0a      	bge.n	80103de <f_printf+0x2e6>
			v = 0 - v;
 80103c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103cc:	425b      	negs	r3, r3
 80103ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80103d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80103d6:	f043 0308 	orr.w	r3, r3, #8
 80103da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80103e4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80103e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80103f0:	fb01 f202 	mul.w	r2, r1, r2
 80103f4:	1a9b      	subs	r3, r3, r2
 80103f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80103fa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80103fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010402:	fbb2 f3f3 	udiv	r3, r2, r3
 8010406:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801040a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801040e:	2b09      	cmp	r3, #9
 8010410:	d90b      	bls.n	801042a <f_printf+0x332>
 8010412:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010416:	2b78      	cmp	r3, #120	; 0x78
 8010418:	d101      	bne.n	801041e <f_printf+0x326>
 801041a:	2227      	movs	r2, #39	; 0x27
 801041c:	e000      	b.n	8010420 <f_printf+0x328>
 801041e:	2207      	movs	r2, #7
 8010420:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010424:	4413      	add	r3, r2
 8010426:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801042a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010434:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010438:	3230      	adds	r2, #48	; 0x30
 801043a:	b2d2      	uxtb	r2, r2
 801043c:	3398      	adds	r3, #152	; 0x98
 801043e:	443b      	add	r3, r7
 8010440:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <f_printf+0x35c>
 801044c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010450:	2b1f      	cmp	r3, #31
 8010452:	d9c7      	bls.n	80103e4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010454:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010458:	f003 0308 	and.w	r3, r3, #8
 801045c:	2b00      	cmp	r3, #0
 801045e:	d009      	beq.n	8010474 <f_printf+0x37c>
 8010460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010464:	1c5a      	adds	r2, r3, #1
 8010466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801046a:	3398      	adds	r3, #152	; 0x98
 801046c:	443b      	add	r3, r7
 801046e:	222d      	movs	r2, #45	; 0x2d
 8010470:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801047c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010480:	f003 0301 	and.w	r3, r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <f_printf+0x394>
 8010488:	2330      	movs	r3, #48	; 0x30
 801048a:	e000      	b.n	801048e <f_printf+0x396>
 801048c:	2320      	movs	r3, #32
 801048e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010492:	e007      	b.n	80104a4 <f_printf+0x3ac>
 8010494:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff fdb3 	bl	801000a <putc_bfd>
 80104a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80104a8:	f003 0302 	and.w	r3, r3, #2
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d108      	bne.n	80104c2 <f_printf+0x3ca>
 80104b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104b4:	1c5a      	adds	r2, r3, #1
 80104b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80104ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80104be:	429a      	cmp	r2, r3
 80104c0:	d8e8      	bhi.n	8010494 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80104c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104c6:	3b01      	subs	r3, #1
 80104c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80104cc:	f107 020c 	add.w	r2, r7, #12
 80104d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104d4:	4413      	add	r3, r2
 80104d6:	781a      	ldrb	r2, [r3, #0]
 80104d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104dc:	4611      	mov	r1, r2
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff fd93 	bl	801000a <putc_bfd>
		} while (i);
 80104e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1ea      	bne.n	80104c2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80104ec:	e007      	b.n	80104fe <f_printf+0x406>
 80104ee:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80104f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104f6:	4611      	mov	r1, r2
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fd86 	bl	801000a <putc_bfd>
 80104fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010508:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801050c:	429a      	cmp	r2, r3
 801050e:	d8ee      	bhi.n	80104ee <f_printf+0x3f6>
		c = *fmt++;
 8010510:	e600      	b.n	8010114 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8010512:	bf00      	nop
 8010514:	e000      	b.n	8010518 <f_printf+0x420>
		if (!c) break;
 8010516:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8010518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801051c:	4618      	mov	r0, r3
 801051e:	f7ff fdb1 	bl	8010084 <putc_flush>
 8010522:	4603      	mov	r3, r0
}
 8010524:	4618      	mov	r0, r3
 8010526:	379c      	adds	r7, #156	; 0x9c
 8010528:	46bd      	mov	sp, r7
 801052a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801052e:	b003      	add	sp, #12
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop

08010534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010534:	b480      	push	{r7}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	4613      	mov	r3, r2
 8010540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010542:	2301      	movs	r3, #1
 8010544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801054a:	4b1f      	ldr	r3, [pc, #124]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 801054c:	7a5b      	ldrb	r3, [r3, #9]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	d131      	bne.n	80105b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010554:	4b1c      	ldr	r3, [pc, #112]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 8010556:	7a5b      	ldrb	r3, [r3, #9]
 8010558:	b2db      	uxtb	r3, r3
 801055a:	461a      	mov	r2, r3
 801055c:	4b1a      	ldr	r3, [pc, #104]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 801055e:	2100      	movs	r1, #0
 8010560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010562:	4b19      	ldr	r3, [pc, #100]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 8010564:	7a5b      	ldrb	r3, [r3, #9]
 8010566:	b2db      	uxtb	r3, r3
 8010568:	4a17      	ldr	r2, [pc, #92]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010572:	4b15      	ldr	r3, [pc, #84]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 8010574:	7a5b      	ldrb	r3, [r3, #9]
 8010576:	b2db      	uxtb	r3, r3
 8010578:	461a      	mov	r2, r3
 801057a:	4b13      	ldr	r3, [pc, #76]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 801057c:	4413      	add	r3, r2
 801057e:	79fa      	ldrb	r2, [r7, #7]
 8010580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010582:	4b11      	ldr	r3, [pc, #68]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 8010584:	7a5b      	ldrb	r3, [r3, #9]
 8010586:	b2db      	uxtb	r3, r3
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	b2d1      	uxtb	r1, r2
 801058c:	4a0e      	ldr	r2, [pc, #56]	; (80105c8 <FATFS_LinkDriverEx+0x94>)
 801058e:	7251      	strb	r1, [r2, #9]
 8010590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010592:	7dbb      	ldrb	r3, [r7, #22]
 8010594:	3330      	adds	r3, #48	; 0x30
 8010596:	b2da      	uxtb	r2, r3
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	3301      	adds	r3, #1
 80105a0:	223a      	movs	r2, #58	; 0x3a
 80105a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	3302      	adds	r3, #2
 80105a8:	222f      	movs	r2, #47	; 0x2f
 80105aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	3303      	adds	r3, #3
 80105b0:	2200      	movs	r2, #0
 80105b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105b4:	2300      	movs	r3, #0
 80105b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	371c      	adds	r7, #28
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	20004940 	.word	0x20004940

080105cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105d6:	2200      	movs	r2, #0
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f7ff ffaa 	bl	8010534 <FATFS_LinkDriverEx>
 80105e0:	4603      	mov	r3, r0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b085      	sub	sp, #20
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	4603      	mov	r3, r0
 80105f4:	6039      	str	r1, [r7, #0]
 80105f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80105f8:	88fb      	ldrh	r3, [r7, #6]
 80105fa:	2b7f      	cmp	r3, #127	; 0x7f
 80105fc:	d802      	bhi.n	8010604 <ff_convert+0x18>
		c = chr;
 80105fe:	88fb      	ldrh	r3, [r7, #6]
 8010600:	81fb      	strh	r3, [r7, #14]
 8010602:	e025      	b.n	8010650 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00b      	beq.n	8010622 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801060a:	88fb      	ldrh	r3, [r7, #6]
 801060c:	2bff      	cmp	r3, #255	; 0xff
 801060e:	d805      	bhi.n	801061c <ff_convert+0x30>
 8010610:	88fb      	ldrh	r3, [r7, #6]
 8010612:	3b80      	subs	r3, #128	; 0x80
 8010614:	4a12      	ldr	r2, [pc, #72]	; (8010660 <ff_convert+0x74>)
 8010616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801061a:	e000      	b.n	801061e <ff_convert+0x32>
 801061c:	2300      	movs	r3, #0
 801061e:	81fb      	strh	r3, [r7, #14]
 8010620:	e016      	b.n	8010650 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010622:	2300      	movs	r3, #0
 8010624:	81fb      	strh	r3, [r7, #14]
 8010626:	e009      	b.n	801063c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010628:	89fb      	ldrh	r3, [r7, #14]
 801062a:	4a0d      	ldr	r2, [pc, #52]	; (8010660 <ff_convert+0x74>)
 801062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010630:	88fa      	ldrh	r2, [r7, #6]
 8010632:	429a      	cmp	r2, r3
 8010634:	d006      	beq.n	8010644 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010636:	89fb      	ldrh	r3, [r7, #14]
 8010638:	3301      	adds	r3, #1
 801063a:	81fb      	strh	r3, [r7, #14]
 801063c:	89fb      	ldrh	r3, [r7, #14]
 801063e:	2b7f      	cmp	r3, #127	; 0x7f
 8010640:	d9f2      	bls.n	8010628 <ff_convert+0x3c>
 8010642:	e000      	b.n	8010646 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010644:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010646:	89fb      	ldrh	r3, [r7, #14]
 8010648:	3380      	adds	r3, #128	; 0x80
 801064a:	b29b      	uxth	r3, r3
 801064c:	b2db      	uxtb	r3, r3
 801064e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010650:	89fb      	ldrh	r3, [r7, #14]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3714      	adds	r7, #20
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	08017ab0 	.word	0x08017ab0

08010664 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010664:	b480      	push	{r7}
 8010666:	b087      	sub	sp, #28
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801066e:	88fb      	ldrh	r3, [r7, #6]
 8010670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010674:	d201      	bcs.n	801067a <ff_wtoupper+0x16>
 8010676:	4b3e      	ldr	r3, [pc, #248]	; (8010770 <ff_wtoupper+0x10c>)
 8010678:	e000      	b.n	801067c <ff_wtoupper+0x18>
 801067a:	4b3e      	ldr	r3, [pc, #248]	; (8010774 <ff_wtoupper+0x110>)
 801067c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	1c9a      	adds	r2, r3, #2
 8010682:	617a      	str	r2, [r7, #20]
 8010684:	881b      	ldrh	r3, [r3, #0]
 8010686:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010688:	8a7b      	ldrh	r3, [r7, #18]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d068      	beq.n	8010760 <ff_wtoupper+0xfc>
 801068e:	88fa      	ldrh	r2, [r7, #6]
 8010690:	8a7b      	ldrh	r3, [r7, #18]
 8010692:	429a      	cmp	r2, r3
 8010694:	d364      	bcc.n	8010760 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	1c9a      	adds	r2, r3, #2
 801069a:	617a      	str	r2, [r7, #20]
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	823b      	strh	r3, [r7, #16]
 80106a0:	8a3b      	ldrh	r3, [r7, #16]
 80106a2:	0a1b      	lsrs	r3, r3, #8
 80106a4:	81fb      	strh	r3, [r7, #14]
 80106a6:	8a3b      	ldrh	r3, [r7, #16]
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80106ac:	88fa      	ldrh	r2, [r7, #6]
 80106ae:	8a79      	ldrh	r1, [r7, #18]
 80106b0:	8a3b      	ldrh	r3, [r7, #16]
 80106b2:	440b      	add	r3, r1
 80106b4:	429a      	cmp	r2, r3
 80106b6:	da49      	bge.n	801074c <ff_wtoupper+0xe8>
			switch (cmd) {
 80106b8:	89fb      	ldrh	r3, [r7, #14]
 80106ba:	2b08      	cmp	r3, #8
 80106bc:	d84f      	bhi.n	801075e <ff_wtoupper+0xfa>
 80106be:	a201      	add	r2, pc, #4	; (adr r2, 80106c4 <ff_wtoupper+0x60>)
 80106c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c4:	080106e9 	.word	0x080106e9
 80106c8:	080106fb 	.word	0x080106fb
 80106cc:	08010711 	.word	0x08010711
 80106d0:	08010719 	.word	0x08010719
 80106d4:	08010721 	.word	0x08010721
 80106d8:	08010729 	.word	0x08010729
 80106dc:	08010731 	.word	0x08010731
 80106e0:	08010739 	.word	0x08010739
 80106e4:	08010741 	.word	0x08010741
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80106e8:	88fa      	ldrh	r2, [r7, #6]
 80106ea:	8a7b      	ldrh	r3, [r7, #18]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	4413      	add	r3, r2
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	80fb      	strh	r3, [r7, #6]
 80106f8:	e027      	b.n	801074a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80106fa:	88fa      	ldrh	r2, [r7, #6]
 80106fc:	8a7b      	ldrh	r3, [r7, #18]
 80106fe:	1ad3      	subs	r3, r2, r3
 8010700:	b29b      	uxth	r3, r3
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	b29b      	uxth	r3, r3
 8010708:	88fa      	ldrh	r2, [r7, #6]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	80fb      	strh	r3, [r7, #6]
 801070e:	e01c      	b.n	801074a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010710:	88fb      	ldrh	r3, [r7, #6]
 8010712:	3b10      	subs	r3, #16
 8010714:	80fb      	strh	r3, [r7, #6]
 8010716:	e018      	b.n	801074a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	3b20      	subs	r3, #32
 801071c:	80fb      	strh	r3, [r7, #6]
 801071e:	e014      	b.n	801074a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010720:	88fb      	ldrh	r3, [r7, #6]
 8010722:	3b30      	subs	r3, #48	; 0x30
 8010724:	80fb      	strh	r3, [r7, #6]
 8010726:	e010      	b.n	801074a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010728:	88fb      	ldrh	r3, [r7, #6]
 801072a:	3b1a      	subs	r3, #26
 801072c:	80fb      	strh	r3, [r7, #6]
 801072e:	e00c      	b.n	801074a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010730:	88fb      	ldrh	r3, [r7, #6]
 8010732:	3308      	adds	r3, #8
 8010734:	80fb      	strh	r3, [r7, #6]
 8010736:	e008      	b.n	801074a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010738:	88fb      	ldrh	r3, [r7, #6]
 801073a:	3b50      	subs	r3, #80	; 0x50
 801073c:	80fb      	strh	r3, [r7, #6]
 801073e:	e004      	b.n	801074a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010740:	88fb      	ldrh	r3, [r7, #6]
 8010742:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010746:	80fb      	strh	r3, [r7, #6]
 8010748:	bf00      	nop
			}
			break;
 801074a:	e008      	b.n	801075e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801074c:	89fb      	ldrh	r3, [r7, #14]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d195      	bne.n	801067e <ff_wtoupper+0x1a>
 8010752:	8a3b      	ldrh	r3, [r7, #16]
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	697a      	ldr	r2, [r7, #20]
 8010758:	4413      	add	r3, r2
 801075a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801075c:	e78f      	b.n	801067e <ff_wtoupper+0x1a>
			break;
 801075e:	bf00      	nop
	}

	return chr;
 8010760:	88fb      	ldrh	r3, [r7, #6]
}
 8010762:	4618      	mov	r0, r3
 8010764:	371c      	adds	r7, #28
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	08017bb0 	.word	0x08017bb0
 8010774:	08017da4 	.word	0x08017da4

08010778 <__errno>:
 8010778:	4b01      	ldr	r3, [pc, #4]	; (8010780 <__errno+0x8>)
 801077a:	6818      	ldr	r0, [r3, #0]
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop
 8010780:	2000002c 	.word	0x2000002c

08010784 <__libc_init_array>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	4d0d      	ldr	r5, [pc, #52]	; (80107bc <__libc_init_array+0x38>)
 8010788:	4c0d      	ldr	r4, [pc, #52]	; (80107c0 <__libc_init_array+0x3c>)
 801078a:	1b64      	subs	r4, r4, r5
 801078c:	10a4      	asrs	r4, r4, #2
 801078e:	2600      	movs	r6, #0
 8010790:	42a6      	cmp	r6, r4
 8010792:	d109      	bne.n	80107a8 <__libc_init_array+0x24>
 8010794:	4d0b      	ldr	r5, [pc, #44]	; (80107c4 <__libc_init_array+0x40>)
 8010796:	4c0c      	ldr	r4, [pc, #48]	; (80107c8 <__libc_init_array+0x44>)
 8010798:	f006 ff9c 	bl	80176d4 <_init>
 801079c:	1b64      	subs	r4, r4, r5
 801079e:	10a4      	asrs	r4, r4, #2
 80107a0:	2600      	movs	r6, #0
 80107a2:	42a6      	cmp	r6, r4
 80107a4:	d105      	bne.n	80107b2 <__libc_init_array+0x2e>
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
 80107a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ac:	4798      	blx	r3
 80107ae:	3601      	adds	r6, #1
 80107b0:	e7ee      	b.n	8010790 <__libc_init_array+0xc>
 80107b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107b6:	4798      	blx	r3
 80107b8:	3601      	adds	r6, #1
 80107ba:	e7f2      	b.n	80107a2 <__libc_init_array+0x1e>
 80107bc:	080183c8 	.word	0x080183c8
 80107c0:	080183c8 	.word	0x080183c8
 80107c4:	080183c8 	.word	0x080183c8
 80107c8:	080183cc 	.word	0x080183cc

080107cc <memset>:
 80107cc:	4402      	add	r2, r0
 80107ce:	4603      	mov	r3, r0
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d100      	bne.n	80107d6 <memset+0xa>
 80107d4:	4770      	bx	lr
 80107d6:	f803 1b01 	strb.w	r1, [r3], #1
 80107da:	e7f9      	b.n	80107d0 <memset+0x4>

080107dc <__cvt>:
 80107dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	ec55 4b10 	vmov	r4, r5, d0
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	460e      	mov	r6, r1
 80107e8:	4619      	mov	r1, r3
 80107ea:	462b      	mov	r3, r5
 80107ec:	bfbb      	ittet	lt
 80107ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80107f2:	461d      	movlt	r5, r3
 80107f4:	2300      	movge	r3, #0
 80107f6:	232d      	movlt	r3, #45	; 0x2d
 80107f8:	700b      	strb	r3, [r1, #0]
 80107fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010800:	4691      	mov	r9, r2
 8010802:	f023 0820 	bic.w	r8, r3, #32
 8010806:	bfbc      	itt	lt
 8010808:	4622      	movlt	r2, r4
 801080a:	4614      	movlt	r4, r2
 801080c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010810:	d005      	beq.n	801081e <__cvt+0x42>
 8010812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010816:	d100      	bne.n	801081a <__cvt+0x3e>
 8010818:	3601      	adds	r6, #1
 801081a:	2102      	movs	r1, #2
 801081c:	e000      	b.n	8010820 <__cvt+0x44>
 801081e:	2103      	movs	r1, #3
 8010820:	ab03      	add	r3, sp, #12
 8010822:	9301      	str	r3, [sp, #4]
 8010824:	ab02      	add	r3, sp, #8
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	ec45 4b10 	vmov	d0, r4, r5
 801082c:	4653      	mov	r3, sl
 801082e:	4632      	mov	r2, r6
 8010830:	f001 fe62 	bl	80124f8 <_dtoa_r>
 8010834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010838:	4607      	mov	r7, r0
 801083a:	d102      	bne.n	8010842 <__cvt+0x66>
 801083c:	f019 0f01 	tst.w	r9, #1
 8010840:	d022      	beq.n	8010888 <__cvt+0xac>
 8010842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010846:	eb07 0906 	add.w	r9, r7, r6
 801084a:	d110      	bne.n	801086e <__cvt+0x92>
 801084c:	783b      	ldrb	r3, [r7, #0]
 801084e:	2b30      	cmp	r3, #48	; 0x30
 8010850:	d10a      	bne.n	8010868 <__cvt+0x8c>
 8010852:	2200      	movs	r2, #0
 8010854:	2300      	movs	r3, #0
 8010856:	4620      	mov	r0, r4
 8010858:	4629      	mov	r1, r5
 801085a:	f7f0 f955 	bl	8000b08 <__aeabi_dcmpeq>
 801085e:	b918      	cbnz	r0, 8010868 <__cvt+0x8c>
 8010860:	f1c6 0601 	rsb	r6, r6, #1
 8010864:	f8ca 6000 	str.w	r6, [sl]
 8010868:	f8da 3000 	ldr.w	r3, [sl]
 801086c:	4499      	add	r9, r3
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	4620      	mov	r0, r4
 8010874:	4629      	mov	r1, r5
 8010876:	f7f0 f947 	bl	8000b08 <__aeabi_dcmpeq>
 801087a:	b108      	cbz	r0, 8010880 <__cvt+0xa4>
 801087c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010880:	2230      	movs	r2, #48	; 0x30
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	454b      	cmp	r3, r9
 8010886:	d307      	bcc.n	8010898 <__cvt+0xbc>
 8010888:	9b03      	ldr	r3, [sp, #12]
 801088a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801088c:	1bdb      	subs	r3, r3, r7
 801088e:	4638      	mov	r0, r7
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	b004      	add	sp, #16
 8010894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010898:	1c59      	adds	r1, r3, #1
 801089a:	9103      	str	r1, [sp, #12]
 801089c:	701a      	strb	r2, [r3, #0]
 801089e:	e7f0      	b.n	8010882 <__cvt+0xa6>

080108a0 <__exponent>:
 80108a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108a2:	4603      	mov	r3, r0
 80108a4:	2900      	cmp	r1, #0
 80108a6:	bfb8      	it	lt
 80108a8:	4249      	neglt	r1, r1
 80108aa:	f803 2b02 	strb.w	r2, [r3], #2
 80108ae:	bfb4      	ite	lt
 80108b0:	222d      	movlt	r2, #45	; 0x2d
 80108b2:	222b      	movge	r2, #43	; 0x2b
 80108b4:	2909      	cmp	r1, #9
 80108b6:	7042      	strb	r2, [r0, #1]
 80108b8:	dd2a      	ble.n	8010910 <__exponent+0x70>
 80108ba:	f10d 0407 	add.w	r4, sp, #7
 80108be:	46a4      	mov	ip, r4
 80108c0:	270a      	movs	r7, #10
 80108c2:	46a6      	mov	lr, r4
 80108c4:	460a      	mov	r2, r1
 80108c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80108ca:	fb07 1516 	mls	r5, r7, r6, r1
 80108ce:	3530      	adds	r5, #48	; 0x30
 80108d0:	2a63      	cmp	r2, #99	; 0x63
 80108d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80108d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80108da:	4631      	mov	r1, r6
 80108dc:	dcf1      	bgt.n	80108c2 <__exponent+0x22>
 80108de:	3130      	adds	r1, #48	; 0x30
 80108e0:	f1ae 0502 	sub.w	r5, lr, #2
 80108e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80108e8:	1c44      	adds	r4, r0, #1
 80108ea:	4629      	mov	r1, r5
 80108ec:	4561      	cmp	r1, ip
 80108ee:	d30a      	bcc.n	8010906 <__exponent+0x66>
 80108f0:	f10d 0209 	add.w	r2, sp, #9
 80108f4:	eba2 020e 	sub.w	r2, r2, lr
 80108f8:	4565      	cmp	r5, ip
 80108fa:	bf88      	it	hi
 80108fc:	2200      	movhi	r2, #0
 80108fe:	4413      	add	r3, r2
 8010900:	1a18      	subs	r0, r3, r0
 8010902:	b003      	add	sp, #12
 8010904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010906:	f811 2b01 	ldrb.w	r2, [r1], #1
 801090a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801090e:	e7ed      	b.n	80108ec <__exponent+0x4c>
 8010910:	2330      	movs	r3, #48	; 0x30
 8010912:	3130      	adds	r1, #48	; 0x30
 8010914:	7083      	strb	r3, [r0, #2]
 8010916:	70c1      	strb	r1, [r0, #3]
 8010918:	1d03      	adds	r3, r0, #4
 801091a:	e7f1      	b.n	8010900 <__exponent+0x60>

0801091c <_printf_float>:
 801091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010920:	ed2d 8b02 	vpush	{d8}
 8010924:	b08d      	sub	sp, #52	; 0x34
 8010926:	460c      	mov	r4, r1
 8010928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801092c:	4616      	mov	r6, r2
 801092e:	461f      	mov	r7, r3
 8010930:	4605      	mov	r5, r0
 8010932:	f002 ff3f 	bl	80137b4 <_localeconv_r>
 8010936:	f8d0 a000 	ldr.w	sl, [r0]
 801093a:	4650      	mov	r0, sl
 801093c:	f7ef fc68 	bl	8000210 <strlen>
 8010940:	2300      	movs	r3, #0
 8010942:	930a      	str	r3, [sp, #40]	; 0x28
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	9305      	str	r3, [sp, #20]
 8010948:	f8d8 3000 	ldr.w	r3, [r8]
 801094c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010950:	3307      	adds	r3, #7
 8010952:	f023 0307 	bic.w	r3, r3, #7
 8010956:	f103 0208 	add.w	r2, r3, #8
 801095a:	f8c8 2000 	str.w	r2, [r8]
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010966:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801096a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801096e:	9307      	str	r3, [sp, #28]
 8010970:	f8cd 8018 	str.w	r8, [sp, #24]
 8010974:	ee08 0a10 	vmov	s16, r0
 8010978:	4b9f      	ldr	r3, [pc, #636]	; (8010bf8 <_printf_float+0x2dc>)
 801097a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801097e:	f04f 32ff 	mov.w	r2, #4294967295
 8010982:	f7f0 f8f3 	bl	8000b6c <__aeabi_dcmpun>
 8010986:	bb88      	cbnz	r0, 80109ec <_printf_float+0xd0>
 8010988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098c:	4b9a      	ldr	r3, [pc, #616]	; (8010bf8 <_printf_float+0x2dc>)
 801098e:	f04f 32ff 	mov.w	r2, #4294967295
 8010992:	f7f0 f8cd 	bl	8000b30 <__aeabi_dcmple>
 8010996:	bb48      	cbnz	r0, 80109ec <_printf_float+0xd0>
 8010998:	2200      	movs	r2, #0
 801099a:	2300      	movs	r3, #0
 801099c:	4640      	mov	r0, r8
 801099e:	4649      	mov	r1, r9
 80109a0:	f7f0 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80109a4:	b110      	cbz	r0, 80109ac <_printf_float+0x90>
 80109a6:	232d      	movs	r3, #45	; 0x2d
 80109a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109ac:	4b93      	ldr	r3, [pc, #588]	; (8010bfc <_printf_float+0x2e0>)
 80109ae:	4894      	ldr	r0, [pc, #592]	; (8010c00 <_printf_float+0x2e4>)
 80109b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80109b4:	bf94      	ite	ls
 80109b6:	4698      	movls	r8, r3
 80109b8:	4680      	movhi	r8, r0
 80109ba:	2303      	movs	r3, #3
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	9b05      	ldr	r3, [sp, #20]
 80109c0:	f023 0204 	bic.w	r2, r3, #4
 80109c4:	6022      	str	r2, [r4, #0]
 80109c6:	f04f 0900 	mov.w	r9, #0
 80109ca:	9700      	str	r7, [sp, #0]
 80109cc:	4633      	mov	r3, r6
 80109ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80109d0:	4621      	mov	r1, r4
 80109d2:	4628      	mov	r0, r5
 80109d4:	f000 f9d8 	bl	8010d88 <_printf_common>
 80109d8:	3001      	adds	r0, #1
 80109da:	f040 8090 	bne.w	8010afe <_printf_float+0x1e2>
 80109de:	f04f 30ff 	mov.w	r0, #4294967295
 80109e2:	b00d      	add	sp, #52	; 0x34
 80109e4:	ecbd 8b02 	vpop	{d8}
 80109e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ec:	4642      	mov	r2, r8
 80109ee:	464b      	mov	r3, r9
 80109f0:	4640      	mov	r0, r8
 80109f2:	4649      	mov	r1, r9
 80109f4:	f7f0 f8ba 	bl	8000b6c <__aeabi_dcmpun>
 80109f8:	b140      	cbz	r0, 8010a0c <_printf_float+0xf0>
 80109fa:	464b      	mov	r3, r9
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	bfbc      	itt	lt
 8010a00:	232d      	movlt	r3, #45	; 0x2d
 8010a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a06:	487f      	ldr	r0, [pc, #508]	; (8010c04 <_printf_float+0x2e8>)
 8010a08:	4b7f      	ldr	r3, [pc, #508]	; (8010c08 <_printf_float+0x2ec>)
 8010a0a:	e7d1      	b.n	80109b0 <_printf_float+0x94>
 8010a0c:	6863      	ldr	r3, [r4, #4]
 8010a0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a12:	9206      	str	r2, [sp, #24]
 8010a14:	1c5a      	adds	r2, r3, #1
 8010a16:	d13f      	bne.n	8010a98 <_printf_float+0x17c>
 8010a18:	2306      	movs	r3, #6
 8010a1a:	6063      	str	r3, [r4, #4]
 8010a1c:	9b05      	ldr	r3, [sp, #20]
 8010a1e:	6861      	ldr	r1, [r4, #4]
 8010a20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010a24:	2300      	movs	r3, #0
 8010a26:	9303      	str	r3, [sp, #12]
 8010a28:	ab0a      	add	r3, sp, #40	; 0x28
 8010a2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010a2e:	ab09      	add	r3, sp, #36	; 0x24
 8010a30:	ec49 8b10 	vmov	d0, r8, r9
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	6022      	str	r2, [r4, #0]
 8010a38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	f7ff fecd 	bl	80107dc <__cvt>
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a46:	2b47      	cmp	r3, #71	; 0x47
 8010a48:	4680      	mov	r8, r0
 8010a4a:	d108      	bne.n	8010a5e <_printf_float+0x142>
 8010a4c:	1cc8      	adds	r0, r1, #3
 8010a4e:	db02      	blt.n	8010a56 <_printf_float+0x13a>
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	4299      	cmp	r1, r3
 8010a54:	dd41      	ble.n	8010ada <_printf_float+0x1be>
 8010a56:	f1ab 0b02 	sub.w	fp, fp, #2
 8010a5a:	fa5f fb8b 	uxtb.w	fp, fp
 8010a5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010a62:	d820      	bhi.n	8010aa6 <_printf_float+0x18a>
 8010a64:	3901      	subs	r1, #1
 8010a66:	465a      	mov	r2, fp
 8010a68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010a6c:	9109      	str	r1, [sp, #36]	; 0x24
 8010a6e:	f7ff ff17 	bl	80108a0 <__exponent>
 8010a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a74:	1813      	adds	r3, r2, r0
 8010a76:	2a01      	cmp	r2, #1
 8010a78:	4681      	mov	r9, r0
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	dc02      	bgt.n	8010a84 <_printf_float+0x168>
 8010a7e:	6822      	ldr	r2, [r4, #0]
 8010a80:	07d2      	lsls	r2, r2, #31
 8010a82:	d501      	bpl.n	8010a88 <_printf_float+0x16c>
 8010a84:	3301      	adds	r3, #1
 8010a86:	6123      	str	r3, [r4, #16]
 8010a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d09c      	beq.n	80109ca <_printf_float+0xae>
 8010a90:	232d      	movs	r3, #45	; 0x2d
 8010a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a96:	e798      	b.n	80109ca <_printf_float+0xae>
 8010a98:	9a06      	ldr	r2, [sp, #24]
 8010a9a:	2a47      	cmp	r2, #71	; 0x47
 8010a9c:	d1be      	bne.n	8010a1c <_printf_float+0x100>
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1bc      	bne.n	8010a1c <_printf_float+0x100>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e7b9      	b.n	8010a1a <_printf_float+0xfe>
 8010aa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010aaa:	d118      	bne.n	8010ade <_printf_float+0x1c2>
 8010aac:	2900      	cmp	r1, #0
 8010aae:	6863      	ldr	r3, [r4, #4]
 8010ab0:	dd0b      	ble.n	8010aca <_printf_float+0x1ae>
 8010ab2:	6121      	str	r1, [r4, #16]
 8010ab4:	b913      	cbnz	r3, 8010abc <_printf_float+0x1a0>
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	07d0      	lsls	r0, r2, #31
 8010aba:	d502      	bpl.n	8010ac2 <_printf_float+0x1a6>
 8010abc:	3301      	adds	r3, #1
 8010abe:	440b      	add	r3, r1
 8010ac0:	6123      	str	r3, [r4, #16]
 8010ac2:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ac4:	f04f 0900 	mov.w	r9, #0
 8010ac8:	e7de      	b.n	8010a88 <_printf_float+0x16c>
 8010aca:	b913      	cbnz	r3, 8010ad2 <_printf_float+0x1b6>
 8010acc:	6822      	ldr	r2, [r4, #0]
 8010ace:	07d2      	lsls	r2, r2, #31
 8010ad0:	d501      	bpl.n	8010ad6 <_printf_float+0x1ba>
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	e7f4      	b.n	8010ac0 <_printf_float+0x1a4>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e7f2      	b.n	8010ac0 <_printf_float+0x1a4>
 8010ada:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ae0:	4299      	cmp	r1, r3
 8010ae2:	db05      	blt.n	8010af0 <_printf_float+0x1d4>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	6121      	str	r1, [r4, #16]
 8010ae8:	07d8      	lsls	r0, r3, #31
 8010aea:	d5ea      	bpl.n	8010ac2 <_printf_float+0x1a6>
 8010aec:	1c4b      	adds	r3, r1, #1
 8010aee:	e7e7      	b.n	8010ac0 <_printf_float+0x1a4>
 8010af0:	2900      	cmp	r1, #0
 8010af2:	bfd4      	ite	le
 8010af4:	f1c1 0202 	rsble	r2, r1, #2
 8010af8:	2201      	movgt	r2, #1
 8010afa:	4413      	add	r3, r2
 8010afc:	e7e0      	b.n	8010ac0 <_printf_float+0x1a4>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	055a      	lsls	r2, r3, #21
 8010b02:	d407      	bmi.n	8010b14 <_printf_float+0x1f8>
 8010b04:	6923      	ldr	r3, [r4, #16]
 8010b06:	4642      	mov	r2, r8
 8010b08:	4631      	mov	r1, r6
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	47b8      	blx	r7
 8010b0e:	3001      	adds	r0, #1
 8010b10:	d12c      	bne.n	8010b6c <_printf_float+0x250>
 8010b12:	e764      	b.n	80109de <_printf_float+0xc2>
 8010b14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b18:	f240 80e0 	bls.w	8010cdc <_printf_float+0x3c0>
 8010b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b20:	2200      	movs	r2, #0
 8010b22:	2300      	movs	r3, #0
 8010b24:	f7ef fff0 	bl	8000b08 <__aeabi_dcmpeq>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d034      	beq.n	8010b96 <_printf_float+0x27a>
 8010b2c:	4a37      	ldr	r2, [pc, #220]	; (8010c0c <_printf_float+0x2f0>)
 8010b2e:	2301      	movs	r3, #1
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	f43f af51 	beq.w	80109de <_printf_float+0xc2>
 8010b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b40:	429a      	cmp	r2, r3
 8010b42:	db02      	blt.n	8010b4a <_printf_float+0x22e>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	07d8      	lsls	r0, r3, #31
 8010b48:	d510      	bpl.n	8010b6c <_printf_float+0x250>
 8010b4a:	ee18 3a10 	vmov	r3, s16
 8010b4e:	4652      	mov	r2, sl
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b8      	blx	r7
 8010b56:	3001      	adds	r0, #1
 8010b58:	f43f af41 	beq.w	80109de <_printf_float+0xc2>
 8010b5c:	f04f 0800 	mov.w	r8, #0
 8010b60:	f104 091a 	add.w	r9, r4, #26
 8010b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b66:	3b01      	subs	r3, #1
 8010b68:	4543      	cmp	r3, r8
 8010b6a:	dc09      	bgt.n	8010b80 <_printf_float+0x264>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	079b      	lsls	r3, r3, #30
 8010b70:	f100 8105 	bmi.w	8010d7e <_printf_float+0x462>
 8010b74:	68e0      	ldr	r0, [r4, #12]
 8010b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b78:	4298      	cmp	r0, r3
 8010b7a:	bfb8      	it	lt
 8010b7c:	4618      	movlt	r0, r3
 8010b7e:	e730      	b.n	80109e2 <_printf_float+0xc6>
 8010b80:	2301      	movs	r3, #1
 8010b82:	464a      	mov	r2, r9
 8010b84:	4631      	mov	r1, r6
 8010b86:	4628      	mov	r0, r5
 8010b88:	47b8      	blx	r7
 8010b8a:	3001      	adds	r0, #1
 8010b8c:	f43f af27 	beq.w	80109de <_printf_float+0xc2>
 8010b90:	f108 0801 	add.w	r8, r8, #1
 8010b94:	e7e6      	b.n	8010b64 <_printf_float+0x248>
 8010b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dc39      	bgt.n	8010c10 <_printf_float+0x2f4>
 8010b9c:	4a1b      	ldr	r2, [pc, #108]	; (8010c0c <_printf_float+0x2f0>)
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	47b8      	blx	r7
 8010ba6:	3001      	adds	r0, #1
 8010ba8:	f43f af19 	beq.w	80109de <_printf_float+0xc2>
 8010bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	d102      	bne.n	8010bba <_printf_float+0x29e>
 8010bb4:	6823      	ldr	r3, [r4, #0]
 8010bb6:	07d9      	lsls	r1, r3, #31
 8010bb8:	d5d8      	bpl.n	8010b6c <_printf_float+0x250>
 8010bba:	ee18 3a10 	vmov	r3, s16
 8010bbe:	4652      	mov	r2, sl
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b8      	blx	r7
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	f43f af09 	beq.w	80109de <_printf_float+0xc2>
 8010bcc:	f04f 0900 	mov.w	r9, #0
 8010bd0:	f104 0a1a 	add.w	sl, r4, #26
 8010bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd6:	425b      	negs	r3, r3
 8010bd8:	454b      	cmp	r3, r9
 8010bda:	dc01      	bgt.n	8010be0 <_printf_float+0x2c4>
 8010bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bde:	e792      	b.n	8010b06 <_printf_float+0x1ea>
 8010be0:	2301      	movs	r3, #1
 8010be2:	4652      	mov	r2, sl
 8010be4:	4631      	mov	r1, r6
 8010be6:	4628      	mov	r0, r5
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f aef7 	beq.w	80109de <_printf_float+0xc2>
 8010bf0:	f109 0901 	add.w	r9, r9, #1
 8010bf4:	e7ee      	b.n	8010bd4 <_printf_float+0x2b8>
 8010bf6:	bf00      	nop
 8010bf8:	7fefffff 	.word	0x7fefffff
 8010bfc:	08017e64 	.word	0x08017e64
 8010c00:	08017e68 	.word	0x08017e68
 8010c04:	08017e70 	.word	0x08017e70
 8010c08:	08017e6c 	.word	0x08017e6c
 8010c0c:	08018269 	.word	0x08018269
 8010c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c14:	429a      	cmp	r2, r3
 8010c16:	bfa8      	it	ge
 8010c18:	461a      	movge	r2, r3
 8010c1a:	2a00      	cmp	r2, #0
 8010c1c:	4691      	mov	r9, r2
 8010c1e:	dc37      	bgt.n	8010c90 <_printf_float+0x374>
 8010c20:	f04f 0b00 	mov.w	fp, #0
 8010c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c28:	f104 021a 	add.w	r2, r4, #26
 8010c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c2e:	9305      	str	r3, [sp, #20]
 8010c30:	eba3 0309 	sub.w	r3, r3, r9
 8010c34:	455b      	cmp	r3, fp
 8010c36:	dc33      	bgt.n	8010ca0 <_printf_float+0x384>
 8010c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	db3b      	blt.n	8010cb8 <_printf_float+0x39c>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	07da      	lsls	r2, r3, #31
 8010c44:	d438      	bmi.n	8010cb8 <_printf_float+0x39c>
 8010c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c48:	9a05      	ldr	r2, [sp, #20]
 8010c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c4c:	1a9a      	subs	r2, r3, r2
 8010c4e:	eba3 0901 	sub.w	r9, r3, r1
 8010c52:	4591      	cmp	r9, r2
 8010c54:	bfa8      	it	ge
 8010c56:	4691      	movge	r9, r2
 8010c58:	f1b9 0f00 	cmp.w	r9, #0
 8010c5c:	dc35      	bgt.n	8010cca <_printf_float+0x3ae>
 8010c5e:	f04f 0800 	mov.w	r8, #0
 8010c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c66:	f104 0a1a 	add.w	sl, r4, #26
 8010c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	eba3 0309 	sub.w	r3, r3, r9
 8010c74:	4543      	cmp	r3, r8
 8010c76:	f77f af79 	ble.w	8010b6c <_printf_float+0x250>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	4652      	mov	r2, sl
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b8      	blx	r7
 8010c84:	3001      	adds	r0, #1
 8010c86:	f43f aeaa 	beq.w	80109de <_printf_float+0xc2>
 8010c8a:	f108 0801 	add.w	r8, r8, #1
 8010c8e:	e7ec      	b.n	8010c6a <_printf_float+0x34e>
 8010c90:	4613      	mov	r3, r2
 8010c92:	4631      	mov	r1, r6
 8010c94:	4642      	mov	r2, r8
 8010c96:	4628      	mov	r0, r5
 8010c98:	47b8      	blx	r7
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	d1c0      	bne.n	8010c20 <_printf_float+0x304>
 8010c9e:	e69e      	b.n	80109de <_printf_float+0xc2>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	9205      	str	r2, [sp, #20]
 8010ca8:	47b8      	blx	r7
 8010caa:	3001      	adds	r0, #1
 8010cac:	f43f ae97 	beq.w	80109de <_printf_float+0xc2>
 8010cb0:	9a05      	ldr	r2, [sp, #20]
 8010cb2:	f10b 0b01 	add.w	fp, fp, #1
 8010cb6:	e7b9      	b.n	8010c2c <_printf_float+0x310>
 8010cb8:	ee18 3a10 	vmov	r3, s16
 8010cbc:	4652      	mov	r2, sl
 8010cbe:	4631      	mov	r1, r6
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	47b8      	blx	r7
 8010cc4:	3001      	adds	r0, #1
 8010cc6:	d1be      	bne.n	8010c46 <_printf_float+0x32a>
 8010cc8:	e689      	b.n	80109de <_printf_float+0xc2>
 8010cca:	9a05      	ldr	r2, [sp, #20]
 8010ccc:	464b      	mov	r3, r9
 8010cce:	4442      	add	r2, r8
 8010cd0:	4631      	mov	r1, r6
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	47b8      	blx	r7
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	d1c1      	bne.n	8010c5e <_printf_float+0x342>
 8010cda:	e680      	b.n	80109de <_printf_float+0xc2>
 8010cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cde:	2a01      	cmp	r2, #1
 8010ce0:	dc01      	bgt.n	8010ce6 <_printf_float+0x3ca>
 8010ce2:	07db      	lsls	r3, r3, #31
 8010ce4:	d538      	bpl.n	8010d58 <_printf_float+0x43c>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	4642      	mov	r2, r8
 8010cea:	4631      	mov	r1, r6
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b8      	blx	r7
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	f43f ae74 	beq.w	80109de <_printf_float+0xc2>
 8010cf6:	ee18 3a10 	vmov	r3, s16
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	4628      	mov	r0, r5
 8010d00:	47b8      	blx	r7
 8010d02:	3001      	adds	r0, #1
 8010d04:	f43f ae6b 	beq.w	80109de <_printf_float+0xc2>
 8010d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f7ef fefa 	bl	8000b08 <__aeabi_dcmpeq>
 8010d14:	b9d8      	cbnz	r0, 8010d4e <_printf_float+0x432>
 8010d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d18:	f108 0201 	add.w	r2, r8, #1
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4628      	mov	r0, r5
 8010d22:	47b8      	blx	r7
 8010d24:	3001      	adds	r0, #1
 8010d26:	d10e      	bne.n	8010d46 <_printf_float+0x42a>
 8010d28:	e659      	b.n	80109de <_printf_float+0xc2>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4652      	mov	r2, sl
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b8      	blx	r7
 8010d34:	3001      	adds	r0, #1
 8010d36:	f43f ae52 	beq.w	80109de <_printf_float+0xc2>
 8010d3a:	f108 0801 	add.w	r8, r8, #1
 8010d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d40:	3b01      	subs	r3, #1
 8010d42:	4543      	cmp	r3, r8
 8010d44:	dcf1      	bgt.n	8010d2a <_printf_float+0x40e>
 8010d46:	464b      	mov	r3, r9
 8010d48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010d4c:	e6dc      	b.n	8010b08 <_printf_float+0x1ec>
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	f104 0a1a 	add.w	sl, r4, #26
 8010d56:	e7f2      	b.n	8010d3e <_printf_float+0x422>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	4642      	mov	r2, r8
 8010d5c:	e7df      	b.n	8010d1e <_printf_float+0x402>
 8010d5e:	2301      	movs	r3, #1
 8010d60:	464a      	mov	r2, r9
 8010d62:	4631      	mov	r1, r6
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b8      	blx	r7
 8010d68:	3001      	adds	r0, #1
 8010d6a:	f43f ae38 	beq.w	80109de <_printf_float+0xc2>
 8010d6e:	f108 0801 	add.w	r8, r8, #1
 8010d72:	68e3      	ldr	r3, [r4, #12]
 8010d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d76:	1a5b      	subs	r3, r3, r1
 8010d78:	4543      	cmp	r3, r8
 8010d7a:	dcf0      	bgt.n	8010d5e <_printf_float+0x442>
 8010d7c:	e6fa      	b.n	8010b74 <_printf_float+0x258>
 8010d7e:	f04f 0800 	mov.w	r8, #0
 8010d82:	f104 0919 	add.w	r9, r4, #25
 8010d86:	e7f4      	b.n	8010d72 <_printf_float+0x456>

08010d88 <_printf_common>:
 8010d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d8c:	4616      	mov	r6, r2
 8010d8e:	4699      	mov	r9, r3
 8010d90:	688a      	ldr	r2, [r1, #8]
 8010d92:	690b      	ldr	r3, [r1, #16]
 8010d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	bfb8      	it	lt
 8010d9c:	4613      	movlt	r3, r2
 8010d9e:	6033      	str	r3, [r6, #0]
 8010da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010da4:	4607      	mov	r7, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	b10a      	cbz	r2, 8010dae <_printf_common+0x26>
 8010daa:	3301      	adds	r3, #1
 8010dac:	6033      	str	r3, [r6, #0]
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	0699      	lsls	r1, r3, #26
 8010db2:	bf42      	ittt	mi
 8010db4:	6833      	ldrmi	r3, [r6, #0]
 8010db6:	3302      	addmi	r3, #2
 8010db8:	6033      	strmi	r3, [r6, #0]
 8010dba:	6825      	ldr	r5, [r4, #0]
 8010dbc:	f015 0506 	ands.w	r5, r5, #6
 8010dc0:	d106      	bne.n	8010dd0 <_printf_common+0x48>
 8010dc2:	f104 0a19 	add.w	sl, r4, #25
 8010dc6:	68e3      	ldr	r3, [r4, #12]
 8010dc8:	6832      	ldr	r2, [r6, #0]
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	42ab      	cmp	r3, r5
 8010dce:	dc26      	bgt.n	8010e1e <_printf_common+0x96>
 8010dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010dd4:	1e13      	subs	r3, r2, #0
 8010dd6:	6822      	ldr	r2, [r4, #0]
 8010dd8:	bf18      	it	ne
 8010dda:	2301      	movne	r3, #1
 8010ddc:	0692      	lsls	r2, r2, #26
 8010dde:	d42b      	bmi.n	8010e38 <_printf_common+0xb0>
 8010de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010de4:	4649      	mov	r1, r9
 8010de6:	4638      	mov	r0, r7
 8010de8:	47c0      	blx	r8
 8010dea:	3001      	adds	r0, #1
 8010dec:	d01e      	beq.n	8010e2c <_printf_common+0xa4>
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	68e5      	ldr	r5, [r4, #12]
 8010df2:	6832      	ldr	r2, [r6, #0]
 8010df4:	f003 0306 	and.w	r3, r3, #6
 8010df8:	2b04      	cmp	r3, #4
 8010dfa:	bf08      	it	eq
 8010dfc:	1aad      	subeq	r5, r5, r2
 8010dfe:	68a3      	ldr	r3, [r4, #8]
 8010e00:	6922      	ldr	r2, [r4, #16]
 8010e02:	bf0c      	ite	eq
 8010e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e08:	2500      	movne	r5, #0
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	bfc4      	itt	gt
 8010e0e:	1a9b      	subgt	r3, r3, r2
 8010e10:	18ed      	addgt	r5, r5, r3
 8010e12:	2600      	movs	r6, #0
 8010e14:	341a      	adds	r4, #26
 8010e16:	42b5      	cmp	r5, r6
 8010e18:	d11a      	bne.n	8010e50 <_printf_common+0xc8>
 8010e1a:	2000      	movs	r0, #0
 8010e1c:	e008      	b.n	8010e30 <_printf_common+0xa8>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	4652      	mov	r2, sl
 8010e22:	4649      	mov	r1, r9
 8010e24:	4638      	mov	r0, r7
 8010e26:	47c0      	blx	r8
 8010e28:	3001      	adds	r0, #1
 8010e2a:	d103      	bne.n	8010e34 <_printf_common+0xac>
 8010e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e34:	3501      	adds	r5, #1
 8010e36:	e7c6      	b.n	8010dc6 <_printf_common+0x3e>
 8010e38:	18e1      	adds	r1, r4, r3
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	2030      	movs	r0, #48	; 0x30
 8010e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e42:	4422      	add	r2, r4
 8010e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e4c:	3302      	adds	r3, #2
 8010e4e:	e7c7      	b.n	8010de0 <_printf_common+0x58>
 8010e50:	2301      	movs	r3, #1
 8010e52:	4622      	mov	r2, r4
 8010e54:	4649      	mov	r1, r9
 8010e56:	4638      	mov	r0, r7
 8010e58:	47c0      	blx	r8
 8010e5a:	3001      	adds	r0, #1
 8010e5c:	d0e6      	beq.n	8010e2c <_printf_common+0xa4>
 8010e5e:	3601      	adds	r6, #1
 8010e60:	e7d9      	b.n	8010e16 <_printf_common+0x8e>
	...

08010e64 <_printf_i>:
 8010e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e68:	7e0f      	ldrb	r7, [r1, #24]
 8010e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e6c:	2f78      	cmp	r7, #120	; 0x78
 8010e6e:	4691      	mov	r9, r2
 8010e70:	4680      	mov	r8, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	469a      	mov	sl, r3
 8010e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e7a:	d807      	bhi.n	8010e8c <_printf_i+0x28>
 8010e7c:	2f62      	cmp	r7, #98	; 0x62
 8010e7e:	d80a      	bhi.n	8010e96 <_printf_i+0x32>
 8010e80:	2f00      	cmp	r7, #0
 8010e82:	f000 80d8 	beq.w	8011036 <_printf_i+0x1d2>
 8010e86:	2f58      	cmp	r7, #88	; 0x58
 8010e88:	f000 80a3 	beq.w	8010fd2 <_printf_i+0x16e>
 8010e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e94:	e03a      	b.n	8010f0c <_printf_i+0xa8>
 8010e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e9a:	2b15      	cmp	r3, #21
 8010e9c:	d8f6      	bhi.n	8010e8c <_printf_i+0x28>
 8010e9e:	a101      	add	r1, pc, #4	; (adr r1, 8010ea4 <_printf_i+0x40>)
 8010ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ea4:	08010efd 	.word	0x08010efd
 8010ea8:	08010f11 	.word	0x08010f11
 8010eac:	08010e8d 	.word	0x08010e8d
 8010eb0:	08010e8d 	.word	0x08010e8d
 8010eb4:	08010e8d 	.word	0x08010e8d
 8010eb8:	08010e8d 	.word	0x08010e8d
 8010ebc:	08010f11 	.word	0x08010f11
 8010ec0:	08010e8d 	.word	0x08010e8d
 8010ec4:	08010e8d 	.word	0x08010e8d
 8010ec8:	08010e8d 	.word	0x08010e8d
 8010ecc:	08010e8d 	.word	0x08010e8d
 8010ed0:	0801101d 	.word	0x0801101d
 8010ed4:	08010f41 	.word	0x08010f41
 8010ed8:	08010fff 	.word	0x08010fff
 8010edc:	08010e8d 	.word	0x08010e8d
 8010ee0:	08010e8d 	.word	0x08010e8d
 8010ee4:	0801103f 	.word	0x0801103f
 8010ee8:	08010e8d 	.word	0x08010e8d
 8010eec:	08010f41 	.word	0x08010f41
 8010ef0:	08010e8d 	.word	0x08010e8d
 8010ef4:	08010e8d 	.word	0x08010e8d
 8010ef8:	08011007 	.word	0x08011007
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	1d1a      	adds	r2, r3, #4
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	602a      	str	r2, [r5, #0]
 8010f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e0a3      	b.n	8011058 <_printf_i+0x1f4>
 8010f10:	6820      	ldr	r0, [r4, #0]
 8010f12:	6829      	ldr	r1, [r5, #0]
 8010f14:	0606      	lsls	r6, r0, #24
 8010f16:	f101 0304 	add.w	r3, r1, #4
 8010f1a:	d50a      	bpl.n	8010f32 <_printf_i+0xce>
 8010f1c:	680e      	ldr	r6, [r1, #0]
 8010f1e:	602b      	str	r3, [r5, #0]
 8010f20:	2e00      	cmp	r6, #0
 8010f22:	da03      	bge.n	8010f2c <_printf_i+0xc8>
 8010f24:	232d      	movs	r3, #45	; 0x2d
 8010f26:	4276      	negs	r6, r6
 8010f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f2c:	485e      	ldr	r0, [pc, #376]	; (80110a8 <_printf_i+0x244>)
 8010f2e:	230a      	movs	r3, #10
 8010f30:	e019      	b.n	8010f66 <_printf_i+0x102>
 8010f32:	680e      	ldr	r6, [r1, #0]
 8010f34:	602b      	str	r3, [r5, #0]
 8010f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010f3a:	bf18      	it	ne
 8010f3c:	b236      	sxthne	r6, r6
 8010f3e:	e7ef      	b.n	8010f20 <_printf_i+0xbc>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	6820      	ldr	r0, [r4, #0]
 8010f44:	1d19      	adds	r1, r3, #4
 8010f46:	6029      	str	r1, [r5, #0]
 8010f48:	0601      	lsls	r1, r0, #24
 8010f4a:	d501      	bpl.n	8010f50 <_printf_i+0xec>
 8010f4c:	681e      	ldr	r6, [r3, #0]
 8010f4e:	e002      	b.n	8010f56 <_printf_i+0xf2>
 8010f50:	0646      	lsls	r6, r0, #25
 8010f52:	d5fb      	bpl.n	8010f4c <_printf_i+0xe8>
 8010f54:	881e      	ldrh	r6, [r3, #0]
 8010f56:	4854      	ldr	r0, [pc, #336]	; (80110a8 <_printf_i+0x244>)
 8010f58:	2f6f      	cmp	r7, #111	; 0x6f
 8010f5a:	bf0c      	ite	eq
 8010f5c:	2308      	moveq	r3, #8
 8010f5e:	230a      	movne	r3, #10
 8010f60:	2100      	movs	r1, #0
 8010f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f66:	6865      	ldr	r5, [r4, #4]
 8010f68:	60a5      	str	r5, [r4, #8]
 8010f6a:	2d00      	cmp	r5, #0
 8010f6c:	bfa2      	ittt	ge
 8010f6e:	6821      	ldrge	r1, [r4, #0]
 8010f70:	f021 0104 	bicge.w	r1, r1, #4
 8010f74:	6021      	strge	r1, [r4, #0]
 8010f76:	b90e      	cbnz	r6, 8010f7c <_printf_i+0x118>
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d04d      	beq.n	8011018 <_printf_i+0x1b4>
 8010f7c:	4615      	mov	r5, r2
 8010f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f82:	fb03 6711 	mls	r7, r3, r1, r6
 8010f86:	5dc7      	ldrb	r7, [r0, r7]
 8010f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f8c:	4637      	mov	r7, r6
 8010f8e:	42bb      	cmp	r3, r7
 8010f90:	460e      	mov	r6, r1
 8010f92:	d9f4      	bls.n	8010f7e <_printf_i+0x11a>
 8010f94:	2b08      	cmp	r3, #8
 8010f96:	d10b      	bne.n	8010fb0 <_printf_i+0x14c>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	07de      	lsls	r6, r3, #31
 8010f9c:	d508      	bpl.n	8010fb0 <_printf_i+0x14c>
 8010f9e:	6923      	ldr	r3, [r4, #16]
 8010fa0:	6861      	ldr	r1, [r4, #4]
 8010fa2:	4299      	cmp	r1, r3
 8010fa4:	bfde      	ittt	le
 8010fa6:	2330      	movle	r3, #48	; 0x30
 8010fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010fac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010fb0:	1b52      	subs	r2, r2, r5
 8010fb2:	6122      	str	r2, [r4, #16]
 8010fb4:	f8cd a000 	str.w	sl, [sp]
 8010fb8:	464b      	mov	r3, r9
 8010fba:	aa03      	add	r2, sp, #12
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	f7ff fee2 	bl	8010d88 <_printf_common>
 8010fc4:	3001      	adds	r0, #1
 8010fc6:	d14c      	bne.n	8011062 <_printf_i+0x1fe>
 8010fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fcc:	b004      	add	sp, #16
 8010fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fd2:	4835      	ldr	r0, [pc, #212]	; (80110a8 <_printf_i+0x244>)
 8010fd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010fd8:	6829      	ldr	r1, [r5, #0]
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010fe0:	6029      	str	r1, [r5, #0]
 8010fe2:	061d      	lsls	r5, r3, #24
 8010fe4:	d514      	bpl.n	8011010 <_printf_i+0x1ac>
 8010fe6:	07df      	lsls	r7, r3, #31
 8010fe8:	bf44      	itt	mi
 8010fea:	f043 0320 	orrmi.w	r3, r3, #32
 8010fee:	6023      	strmi	r3, [r4, #0]
 8010ff0:	b91e      	cbnz	r6, 8010ffa <_printf_i+0x196>
 8010ff2:	6823      	ldr	r3, [r4, #0]
 8010ff4:	f023 0320 	bic.w	r3, r3, #32
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	2310      	movs	r3, #16
 8010ffc:	e7b0      	b.n	8010f60 <_printf_i+0xfc>
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	f043 0320 	orr.w	r3, r3, #32
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	2378      	movs	r3, #120	; 0x78
 8011008:	4828      	ldr	r0, [pc, #160]	; (80110ac <_printf_i+0x248>)
 801100a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801100e:	e7e3      	b.n	8010fd8 <_printf_i+0x174>
 8011010:	0659      	lsls	r1, r3, #25
 8011012:	bf48      	it	mi
 8011014:	b2b6      	uxthmi	r6, r6
 8011016:	e7e6      	b.n	8010fe6 <_printf_i+0x182>
 8011018:	4615      	mov	r5, r2
 801101a:	e7bb      	b.n	8010f94 <_printf_i+0x130>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	6826      	ldr	r6, [r4, #0]
 8011020:	6961      	ldr	r1, [r4, #20]
 8011022:	1d18      	adds	r0, r3, #4
 8011024:	6028      	str	r0, [r5, #0]
 8011026:	0635      	lsls	r5, r6, #24
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	d501      	bpl.n	8011030 <_printf_i+0x1cc>
 801102c:	6019      	str	r1, [r3, #0]
 801102e:	e002      	b.n	8011036 <_printf_i+0x1d2>
 8011030:	0670      	lsls	r0, r6, #25
 8011032:	d5fb      	bpl.n	801102c <_printf_i+0x1c8>
 8011034:	8019      	strh	r1, [r3, #0]
 8011036:	2300      	movs	r3, #0
 8011038:	6123      	str	r3, [r4, #16]
 801103a:	4615      	mov	r5, r2
 801103c:	e7ba      	b.n	8010fb4 <_printf_i+0x150>
 801103e:	682b      	ldr	r3, [r5, #0]
 8011040:	1d1a      	adds	r2, r3, #4
 8011042:	602a      	str	r2, [r5, #0]
 8011044:	681d      	ldr	r5, [r3, #0]
 8011046:	6862      	ldr	r2, [r4, #4]
 8011048:	2100      	movs	r1, #0
 801104a:	4628      	mov	r0, r5
 801104c:	f7ef f8e8 	bl	8000220 <memchr>
 8011050:	b108      	cbz	r0, 8011056 <_printf_i+0x1f2>
 8011052:	1b40      	subs	r0, r0, r5
 8011054:	6060      	str	r0, [r4, #4]
 8011056:	6863      	ldr	r3, [r4, #4]
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	2300      	movs	r3, #0
 801105c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011060:	e7a8      	b.n	8010fb4 <_printf_i+0x150>
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	462a      	mov	r2, r5
 8011066:	4649      	mov	r1, r9
 8011068:	4640      	mov	r0, r8
 801106a:	47d0      	blx	sl
 801106c:	3001      	adds	r0, #1
 801106e:	d0ab      	beq.n	8010fc8 <_printf_i+0x164>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	079b      	lsls	r3, r3, #30
 8011074:	d413      	bmi.n	801109e <_printf_i+0x23a>
 8011076:	68e0      	ldr	r0, [r4, #12]
 8011078:	9b03      	ldr	r3, [sp, #12]
 801107a:	4298      	cmp	r0, r3
 801107c:	bfb8      	it	lt
 801107e:	4618      	movlt	r0, r3
 8011080:	e7a4      	b.n	8010fcc <_printf_i+0x168>
 8011082:	2301      	movs	r3, #1
 8011084:	4632      	mov	r2, r6
 8011086:	4649      	mov	r1, r9
 8011088:	4640      	mov	r0, r8
 801108a:	47d0      	blx	sl
 801108c:	3001      	adds	r0, #1
 801108e:	d09b      	beq.n	8010fc8 <_printf_i+0x164>
 8011090:	3501      	adds	r5, #1
 8011092:	68e3      	ldr	r3, [r4, #12]
 8011094:	9903      	ldr	r1, [sp, #12]
 8011096:	1a5b      	subs	r3, r3, r1
 8011098:	42ab      	cmp	r3, r5
 801109a:	dcf2      	bgt.n	8011082 <_printf_i+0x21e>
 801109c:	e7eb      	b.n	8011076 <_printf_i+0x212>
 801109e:	2500      	movs	r5, #0
 80110a0:	f104 0619 	add.w	r6, r4, #25
 80110a4:	e7f5      	b.n	8011092 <_printf_i+0x22e>
 80110a6:	bf00      	nop
 80110a8:	08017e74 	.word	0x08017e74
 80110ac:	08017e85 	.word	0x08017e85

080110b0 <_scanf_float>:
 80110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	b087      	sub	sp, #28
 80110b6:	4617      	mov	r7, r2
 80110b8:	9303      	str	r3, [sp, #12]
 80110ba:	688b      	ldr	r3, [r1, #8]
 80110bc:	1e5a      	subs	r2, r3, #1
 80110be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80110c2:	bf83      	ittte	hi
 80110c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80110c8:	195b      	addhi	r3, r3, r5
 80110ca:	9302      	strhi	r3, [sp, #8]
 80110cc:	2300      	movls	r3, #0
 80110ce:	bf86      	itte	hi
 80110d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80110d4:	608b      	strhi	r3, [r1, #8]
 80110d6:	9302      	strls	r3, [sp, #8]
 80110d8:	680b      	ldr	r3, [r1, #0]
 80110da:	468b      	mov	fp, r1
 80110dc:	2500      	movs	r5, #0
 80110de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80110e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80110e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80110ea:	4680      	mov	r8, r0
 80110ec:	460c      	mov	r4, r1
 80110ee:	465e      	mov	r6, fp
 80110f0:	46aa      	mov	sl, r5
 80110f2:	46a9      	mov	r9, r5
 80110f4:	9501      	str	r5, [sp, #4]
 80110f6:	68a2      	ldr	r2, [r4, #8]
 80110f8:	b152      	cbz	r2, 8011110 <_scanf_float+0x60>
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	2b4e      	cmp	r3, #78	; 0x4e
 8011100:	d864      	bhi.n	80111cc <_scanf_float+0x11c>
 8011102:	2b40      	cmp	r3, #64	; 0x40
 8011104:	d83c      	bhi.n	8011180 <_scanf_float+0xd0>
 8011106:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801110a:	b2c8      	uxtb	r0, r1
 801110c:	280e      	cmp	r0, #14
 801110e:	d93a      	bls.n	8011186 <_scanf_float+0xd6>
 8011110:	f1b9 0f00 	cmp.w	r9, #0
 8011114:	d003      	beq.n	801111e <_scanf_float+0x6e>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011122:	f1ba 0f01 	cmp.w	sl, #1
 8011126:	f200 8113 	bhi.w	8011350 <_scanf_float+0x2a0>
 801112a:	455e      	cmp	r6, fp
 801112c:	f200 8105 	bhi.w	801133a <_scanf_float+0x28a>
 8011130:	2501      	movs	r5, #1
 8011132:	4628      	mov	r0, r5
 8011134:	b007      	add	sp, #28
 8011136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801113e:	2a0d      	cmp	r2, #13
 8011140:	d8e6      	bhi.n	8011110 <_scanf_float+0x60>
 8011142:	a101      	add	r1, pc, #4	; (adr r1, 8011148 <_scanf_float+0x98>)
 8011144:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011148:	08011287 	.word	0x08011287
 801114c:	08011111 	.word	0x08011111
 8011150:	08011111 	.word	0x08011111
 8011154:	08011111 	.word	0x08011111
 8011158:	080112e7 	.word	0x080112e7
 801115c:	080112bf 	.word	0x080112bf
 8011160:	08011111 	.word	0x08011111
 8011164:	08011111 	.word	0x08011111
 8011168:	08011295 	.word	0x08011295
 801116c:	08011111 	.word	0x08011111
 8011170:	08011111 	.word	0x08011111
 8011174:	08011111 	.word	0x08011111
 8011178:	08011111 	.word	0x08011111
 801117c:	0801124d 	.word	0x0801124d
 8011180:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011184:	e7db      	b.n	801113e <_scanf_float+0x8e>
 8011186:	290e      	cmp	r1, #14
 8011188:	d8c2      	bhi.n	8011110 <_scanf_float+0x60>
 801118a:	a001      	add	r0, pc, #4	; (adr r0, 8011190 <_scanf_float+0xe0>)
 801118c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011190:	0801123f 	.word	0x0801123f
 8011194:	08011111 	.word	0x08011111
 8011198:	0801123f 	.word	0x0801123f
 801119c:	080112d3 	.word	0x080112d3
 80111a0:	08011111 	.word	0x08011111
 80111a4:	080111ed 	.word	0x080111ed
 80111a8:	08011229 	.word	0x08011229
 80111ac:	08011229 	.word	0x08011229
 80111b0:	08011229 	.word	0x08011229
 80111b4:	08011229 	.word	0x08011229
 80111b8:	08011229 	.word	0x08011229
 80111bc:	08011229 	.word	0x08011229
 80111c0:	08011229 	.word	0x08011229
 80111c4:	08011229 	.word	0x08011229
 80111c8:	08011229 	.word	0x08011229
 80111cc:	2b6e      	cmp	r3, #110	; 0x6e
 80111ce:	d809      	bhi.n	80111e4 <_scanf_float+0x134>
 80111d0:	2b60      	cmp	r3, #96	; 0x60
 80111d2:	d8b2      	bhi.n	801113a <_scanf_float+0x8a>
 80111d4:	2b54      	cmp	r3, #84	; 0x54
 80111d6:	d077      	beq.n	80112c8 <_scanf_float+0x218>
 80111d8:	2b59      	cmp	r3, #89	; 0x59
 80111da:	d199      	bne.n	8011110 <_scanf_float+0x60>
 80111dc:	2d07      	cmp	r5, #7
 80111de:	d197      	bne.n	8011110 <_scanf_float+0x60>
 80111e0:	2508      	movs	r5, #8
 80111e2:	e029      	b.n	8011238 <_scanf_float+0x188>
 80111e4:	2b74      	cmp	r3, #116	; 0x74
 80111e6:	d06f      	beq.n	80112c8 <_scanf_float+0x218>
 80111e8:	2b79      	cmp	r3, #121	; 0x79
 80111ea:	e7f6      	b.n	80111da <_scanf_float+0x12a>
 80111ec:	6821      	ldr	r1, [r4, #0]
 80111ee:	05c8      	lsls	r0, r1, #23
 80111f0:	d51a      	bpl.n	8011228 <_scanf_float+0x178>
 80111f2:	9b02      	ldr	r3, [sp, #8]
 80111f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80111f8:	6021      	str	r1, [r4, #0]
 80111fa:	f109 0901 	add.w	r9, r9, #1
 80111fe:	b11b      	cbz	r3, 8011208 <_scanf_float+0x158>
 8011200:	3b01      	subs	r3, #1
 8011202:	3201      	adds	r2, #1
 8011204:	9302      	str	r3, [sp, #8]
 8011206:	60a2      	str	r2, [r4, #8]
 8011208:	68a3      	ldr	r3, [r4, #8]
 801120a:	3b01      	subs	r3, #1
 801120c:	60a3      	str	r3, [r4, #8]
 801120e:	6923      	ldr	r3, [r4, #16]
 8011210:	3301      	adds	r3, #1
 8011212:	6123      	str	r3, [r4, #16]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	3b01      	subs	r3, #1
 8011218:	2b00      	cmp	r3, #0
 801121a:	607b      	str	r3, [r7, #4]
 801121c:	f340 8084 	ble.w	8011328 <_scanf_float+0x278>
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	3301      	adds	r3, #1
 8011224:	603b      	str	r3, [r7, #0]
 8011226:	e766      	b.n	80110f6 <_scanf_float+0x46>
 8011228:	eb1a 0f05 	cmn.w	sl, r5
 801122c:	f47f af70 	bne.w	8011110 <_scanf_float+0x60>
 8011230:	6822      	ldr	r2, [r4, #0]
 8011232:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011236:	6022      	str	r2, [r4, #0]
 8011238:	f806 3b01 	strb.w	r3, [r6], #1
 801123c:	e7e4      	b.n	8011208 <_scanf_float+0x158>
 801123e:	6822      	ldr	r2, [r4, #0]
 8011240:	0610      	lsls	r0, r2, #24
 8011242:	f57f af65 	bpl.w	8011110 <_scanf_float+0x60>
 8011246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801124a:	e7f4      	b.n	8011236 <_scanf_float+0x186>
 801124c:	f1ba 0f00 	cmp.w	sl, #0
 8011250:	d10e      	bne.n	8011270 <_scanf_float+0x1c0>
 8011252:	f1b9 0f00 	cmp.w	r9, #0
 8011256:	d10e      	bne.n	8011276 <_scanf_float+0x1c6>
 8011258:	6822      	ldr	r2, [r4, #0]
 801125a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801125e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011262:	d108      	bne.n	8011276 <_scanf_float+0x1c6>
 8011264:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011268:	6022      	str	r2, [r4, #0]
 801126a:	f04f 0a01 	mov.w	sl, #1
 801126e:	e7e3      	b.n	8011238 <_scanf_float+0x188>
 8011270:	f1ba 0f02 	cmp.w	sl, #2
 8011274:	d055      	beq.n	8011322 <_scanf_float+0x272>
 8011276:	2d01      	cmp	r5, #1
 8011278:	d002      	beq.n	8011280 <_scanf_float+0x1d0>
 801127a:	2d04      	cmp	r5, #4
 801127c:	f47f af48 	bne.w	8011110 <_scanf_float+0x60>
 8011280:	3501      	adds	r5, #1
 8011282:	b2ed      	uxtb	r5, r5
 8011284:	e7d8      	b.n	8011238 <_scanf_float+0x188>
 8011286:	f1ba 0f01 	cmp.w	sl, #1
 801128a:	f47f af41 	bne.w	8011110 <_scanf_float+0x60>
 801128e:	f04f 0a02 	mov.w	sl, #2
 8011292:	e7d1      	b.n	8011238 <_scanf_float+0x188>
 8011294:	b97d      	cbnz	r5, 80112b6 <_scanf_float+0x206>
 8011296:	f1b9 0f00 	cmp.w	r9, #0
 801129a:	f47f af3c 	bne.w	8011116 <_scanf_float+0x66>
 801129e:	6822      	ldr	r2, [r4, #0]
 80112a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112a8:	f47f af39 	bne.w	801111e <_scanf_float+0x6e>
 80112ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112b0:	6022      	str	r2, [r4, #0]
 80112b2:	2501      	movs	r5, #1
 80112b4:	e7c0      	b.n	8011238 <_scanf_float+0x188>
 80112b6:	2d03      	cmp	r5, #3
 80112b8:	d0e2      	beq.n	8011280 <_scanf_float+0x1d0>
 80112ba:	2d05      	cmp	r5, #5
 80112bc:	e7de      	b.n	801127c <_scanf_float+0x1cc>
 80112be:	2d02      	cmp	r5, #2
 80112c0:	f47f af26 	bne.w	8011110 <_scanf_float+0x60>
 80112c4:	2503      	movs	r5, #3
 80112c6:	e7b7      	b.n	8011238 <_scanf_float+0x188>
 80112c8:	2d06      	cmp	r5, #6
 80112ca:	f47f af21 	bne.w	8011110 <_scanf_float+0x60>
 80112ce:	2507      	movs	r5, #7
 80112d0:	e7b2      	b.n	8011238 <_scanf_float+0x188>
 80112d2:	6822      	ldr	r2, [r4, #0]
 80112d4:	0591      	lsls	r1, r2, #22
 80112d6:	f57f af1b 	bpl.w	8011110 <_scanf_float+0x60>
 80112da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80112de:	6022      	str	r2, [r4, #0]
 80112e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80112e4:	e7a8      	b.n	8011238 <_scanf_float+0x188>
 80112e6:	6822      	ldr	r2, [r4, #0]
 80112e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80112ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80112f0:	d006      	beq.n	8011300 <_scanf_float+0x250>
 80112f2:	0550      	lsls	r0, r2, #21
 80112f4:	f57f af0c 	bpl.w	8011110 <_scanf_float+0x60>
 80112f8:	f1b9 0f00 	cmp.w	r9, #0
 80112fc:	f43f af0f 	beq.w	801111e <_scanf_float+0x6e>
 8011300:	0591      	lsls	r1, r2, #22
 8011302:	bf58      	it	pl
 8011304:	9901      	ldrpl	r1, [sp, #4]
 8011306:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801130a:	bf58      	it	pl
 801130c:	eba9 0101 	subpl.w	r1, r9, r1
 8011310:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011314:	bf58      	it	pl
 8011316:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801131a:	6022      	str	r2, [r4, #0]
 801131c:	f04f 0900 	mov.w	r9, #0
 8011320:	e78a      	b.n	8011238 <_scanf_float+0x188>
 8011322:	f04f 0a03 	mov.w	sl, #3
 8011326:	e787      	b.n	8011238 <_scanf_float+0x188>
 8011328:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801132c:	4639      	mov	r1, r7
 801132e:	4640      	mov	r0, r8
 8011330:	4798      	blx	r3
 8011332:	2800      	cmp	r0, #0
 8011334:	f43f aedf 	beq.w	80110f6 <_scanf_float+0x46>
 8011338:	e6ea      	b.n	8011110 <_scanf_float+0x60>
 801133a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801133e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011342:	463a      	mov	r2, r7
 8011344:	4640      	mov	r0, r8
 8011346:	4798      	blx	r3
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	3b01      	subs	r3, #1
 801134c:	6123      	str	r3, [r4, #16]
 801134e:	e6ec      	b.n	801112a <_scanf_float+0x7a>
 8011350:	1e6b      	subs	r3, r5, #1
 8011352:	2b06      	cmp	r3, #6
 8011354:	d825      	bhi.n	80113a2 <_scanf_float+0x2f2>
 8011356:	2d02      	cmp	r5, #2
 8011358:	d836      	bhi.n	80113c8 <_scanf_float+0x318>
 801135a:	455e      	cmp	r6, fp
 801135c:	f67f aee8 	bls.w	8011130 <_scanf_float+0x80>
 8011360:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011364:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011368:	463a      	mov	r2, r7
 801136a:	4640      	mov	r0, r8
 801136c:	4798      	blx	r3
 801136e:	6923      	ldr	r3, [r4, #16]
 8011370:	3b01      	subs	r3, #1
 8011372:	6123      	str	r3, [r4, #16]
 8011374:	e7f1      	b.n	801135a <_scanf_float+0x2aa>
 8011376:	9802      	ldr	r0, [sp, #8]
 8011378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801137c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011380:	9002      	str	r0, [sp, #8]
 8011382:	463a      	mov	r2, r7
 8011384:	4640      	mov	r0, r8
 8011386:	4798      	blx	r3
 8011388:	6923      	ldr	r3, [r4, #16]
 801138a:	3b01      	subs	r3, #1
 801138c:	6123      	str	r3, [r4, #16]
 801138e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011392:	fa5f fa8a 	uxtb.w	sl, sl
 8011396:	f1ba 0f02 	cmp.w	sl, #2
 801139a:	d1ec      	bne.n	8011376 <_scanf_float+0x2c6>
 801139c:	3d03      	subs	r5, #3
 801139e:	b2ed      	uxtb	r5, r5
 80113a0:	1b76      	subs	r6, r6, r5
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	05da      	lsls	r2, r3, #23
 80113a6:	d52f      	bpl.n	8011408 <_scanf_float+0x358>
 80113a8:	055b      	lsls	r3, r3, #21
 80113aa:	d510      	bpl.n	80113ce <_scanf_float+0x31e>
 80113ac:	455e      	cmp	r6, fp
 80113ae:	f67f aebf 	bls.w	8011130 <_scanf_float+0x80>
 80113b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113ba:	463a      	mov	r2, r7
 80113bc:	4640      	mov	r0, r8
 80113be:	4798      	blx	r3
 80113c0:	6923      	ldr	r3, [r4, #16]
 80113c2:	3b01      	subs	r3, #1
 80113c4:	6123      	str	r3, [r4, #16]
 80113c6:	e7f1      	b.n	80113ac <_scanf_float+0x2fc>
 80113c8:	46aa      	mov	sl, r5
 80113ca:	9602      	str	r6, [sp, #8]
 80113cc:	e7df      	b.n	801138e <_scanf_float+0x2de>
 80113ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80113d2:	6923      	ldr	r3, [r4, #16]
 80113d4:	2965      	cmp	r1, #101	; 0x65
 80113d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80113da:	f106 35ff 	add.w	r5, r6, #4294967295
 80113de:	6123      	str	r3, [r4, #16]
 80113e0:	d00c      	beq.n	80113fc <_scanf_float+0x34c>
 80113e2:	2945      	cmp	r1, #69	; 0x45
 80113e4:	d00a      	beq.n	80113fc <_scanf_float+0x34c>
 80113e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113ea:	463a      	mov	r2, r7
 80113ec:	4640      	mov	r0, r8
 80113ee:	4798      	blx	r3
 80113f0:	6923      	ldr	r3, [r4, #16]
 80113f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	1eb5      	subs	r5, r6, #2
 80113fa:	6123      	str	r3, [r4, #16]
 80113fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011400:	463a      	mov	r2, r7
 8011402:	4640      	mov	r0, r8
 8011404:	4798      	blx	r3
 8011406:	462e      	mov	r6, r5
 8011408:	6825      	ldr	r5, [r4, #0]
 801140a:	f015 0510 	ands.w	r5, r5, #16
 801140e:	d159      	bne.n	80114c4 <_scanf_float+0x414>
 8011410:	7035      	strb	r5, [r6, #0]
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801141c:	d11b      	bne.n	8011456 <_scanf_float+0x3a6>
 801141e:	9b01      	ldr	r3, [sp, #4]
 8011420:	454b      	cmp	r3, r9
 8011422:	eba3 0209 	sub.w	r2, r3, r9
 8011426:	d123      	bne.n	8011470 <_scanf_float+0x3c0>
 8011428:	2200      	movs	r2, #0
 801142a:	4659      	mov	r1, fp
 801142c:	4640      	mov	r0, r8
 801142e:	f000 ff29 	bl	8012284 <_strtod_r>
 8011432:	6822      	ldr	r2, [r4, #0]
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	f012 0f02 	tst.w	r2, #2
 801143a:	ec57 6b10 	vmov	r6, r7, d0
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	d021      	beq.n	8011486 <_scanf_float+0x3d6>
 8011442:	9903      	ldr	r1, [sp, #12]
 8011444:	1d1a      	adds	r2, r3, #4
 8011446:	600a      	str	r2, [r1, #0]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	e9c3 6700 	strd	r6, r7, [r3]
 801144e:	68e3      	ldr	r3, [r4, #12]
 8011450:	3301      	adds	r3, #1
 8011452:	60e3      	str	r3, [r4, #12]
 8011454:	e66d      	b.n	8011132 <_scanf_float+0x82>
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d0e5      	beq.n	8011428 <_scanf_float+0x378>
 801145c:	9905      	ldr	r1, [sp, #20]
 801145e:	230a      	movs	r3, #10
 8011460:	462a      	mov	r2, r5
 8011462:	3101      	adds	r1, #1
 8011464:	4640      	mov	r0, r8
 8011466:	f000 ff95 	bl	8012394 <_strtol_r>
 801146a:	9b04      	ldr	r3, [sp, #16]
 801146c:	9e05      	ldr	r6, [sp, #20]
 801146e:	1ac2      	subs	r2, r0, r3
 8011470:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011474:	429e      	cmp	r6, r3
 8011476:	bf28      	it	cs
 8011478:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801147c:	4912      	ldr	r1, [pc, #72]	; (80114c8 <_scanf_float+0x418>)
 801147e:	4630      	mov	r0, r6
 8011480:	f000 f82c 	bl	80114dc <siprintf>
 8011484:	e7d0      	b.n	8011428 <_scanf_float+0x378>
 8011486:	9903      	ldr	r1, [sp, #12]
 8011488:	f012 0f04 	tst.w	r2, #4
 801148c:	f103 0204 	add.w	r2, r3, #4
 8011490:	600a      	str	r2, [r1, #0]
 8011492:	d1d9      	bne.n	8011448 <_scanf_float+0x398>
 8011494:	f8d3 8000 	ldr.w	r8, [r3]
 8011498:	ee10 2a10 	vmov	r2, s0
 801149c:	ee10 0a10 	vmov	r0, s0
 80114a0:	463b      	mov	r3, r7
 80114a2:	4639      	mov	r1, r7
 80114a4:	f7ef fb62 	bl	8000b6c <__aeabi_dcmpun>
 80114a8:	b128      	cbz	r0, 80114b6 <_scanf_float+0x406>
 80114aa:	4808      	ldr	r0, [pc, #32]	; (80114cc <_scanf_float+0x41c>)
 80114ac:	f000 f810 	bl	80114d0 <nanf>
 80114b0:	ed88 0a00 	vstr	s0, [r8]
 80114b4:	e7cb      	b.n	801144e <_scanf_float+0x39e>
 80114b6:	4630      	mov	r0, r6
 80114b8:	4639      	mov	r1, r7
 80114ba:	f7ef fbb5 	bl	8000c28 <__aeabi_d2f>
 80114be:	f8c8 0000 	str.w	r0, [r8]
 80114c2:	e7c4      	b.n	801144e <_scanf_float+0x39e>
 80114c4:	2500      	movs	r5, #0
 80114c6:	e634      	b.n	8011132 <_scanf_float+0x82>
 80114c8:	08017e96 	.word	0x08017e96
 80114cc:	080182bb 	.word	0x080182bb

080114d0 <nanf>:
 80114d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80114d8 <nanf+0x8>
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	7fc00000 	.word	0x7fc00000

080114dc <siprintf>:
 80114dc:	b40e      	push	{r1, r2, r3}
 80114de:	b500      	push	{lr}
 80114e0:	b09c      	sub	sp, #112	; 0x70
 80114e2:	ab1d      	add	r3, sp, #116	; 0x74
 80114e4:	9002      	str	r0, [sp, #8]
 80114e6:	9006      	str	r0, [sp, #24]
 80114e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114ec:	4809      	ldr	r0, [pc, #36]	; (8011514 <siprintf+0x38>)
 80114ee:	9107      	str	r1, [sp, #28]
 80114f0:	9104      	str	r1, [sp, #16]
 80114f2:	4909      	ldr	r1, [pc, #36]	; (8011518 <siprintf+0x3c>)
 80114f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f8:	9105      	str	r1, [sp, #20]
 80114fa:	6800      	ldr	r0, [r0, #0]
 80114fc:	9301      	str	r3, [sp, #4]
 80114fe:	a902      	add	r1, sp, #8
 8011500:	f002 ffaa 	bl	8014458 <_svfiprintf_r>
 8011504:	9b02      	ldr	r3, [sp, #8]
 8011506:	2200      	movs	r2, #0
 8011508:	701a      	strb	r2, [r3, #0]
 801150a:	b01c      	add	sp, #112	; 0x70
 801150c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011510:	b003      	add	sp, #12
 8011512:	4770      	bx	lr
 8011514:	2000002c 	.word	0x2000002c
 8011518:	ffff0208 	.word	0xffff0208

0801151c <siscanf>:
 801151c:	b40e      	push	{r1, r2, r3}
 801151e:	b510      	push	{r4, lr}
 8011520:	b09f      	sub	sp, #124	; 0x7c
 8011522:	ac21      	add	r4, sp, #132	; 0x84
 8011524:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011528:	f854 2b04 	ldr.w	r2, [r4], #4
 801152c:	9201      	str	r2, [sp, #4]
 801152e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011532:	9004      	str	r0, [sp, #16]
 8011534:	9008      	str	r0, [sp, #32]
 8011536:	f7ee fe6b 	bl	8000210 <strlen>
 801153a:	4b0c      	ldr	r3, [pc, #48]	; (801156c <siscanf+0x50>)
 801153c:	9005      	str	r0, [sp, #20]
 801153e:	9009      	str	r0, [sp, #36]	; 0x24
 8011540:	930d      	str	r3, [sp, #52]	; 0x34
 8011542:	480b      	ldr	r0, [pc, #44]	; (8011570 <siscanf+0x54>)
 8011544:	9a01      	ldr	r2, [sp, #4]
 8011546:	6800      	ldr	r0, [r0, #0]
 8011548:	9403      	str	r4, [sp, #12]
 801154a:	2300      	movs	r3, #0
 801154c:	9311      	str	r3, [sp, #68]	; 0x44
 801154e:	9316      	str	r3, [sp, #88]	; 0x58
 8011550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011554:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011558:	a904      	add	r1, sp, #16
 801155a:	4623      	mov	r3, r4
 801155c:	f003 f8d6 	bl	801470c <__ssvfiscanf_r>
 8011560:	b01f      	add	sp, #124	; 0x7c
 8011562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011566:	b003      	add	sp, #12
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	08011597 	.word	0x08011597
 8011570:	2000002c 	.word	0x2000002c

08011574 <__sread>:
 8011574:	b510      	push	{r4, lr}
 8011576:	460c      	mov	r4, r1
 8011578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157c:	f003 fb90 	bl	8014ca0 <_read_r>
 8011580:	2800      	cmp	r0, #0
 8011582:	bfab      	itete	ge
 8011584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011586:	89a3      	ldrhlt	r3, [r4, #12]
 8011588:	181b      	addge	r3, r3, r0
 801158a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801158e:	bfac      	ite	ge
 8011590:	6563      	strge	r3, [r4, #84]	; 0x54
 8011592:	81a3      	strhlt	r3, [r4, #12]
 8011594:	bd10      	pop	{r4, pc}

08011596 <__seofread>:
 8011596:	2000      	movs	r0, #0
 8011598:	4770      	bx	lr

0801159a <__swrite>:
 801159a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159e:	461f      	mov	r7, r3
 80115a0:	898b      	ldrh	r3, [r1, #12]
 80115a2:	05db      	lsls	r3, r3, #23
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	4616      	mov	r6, r2
 80115aa:	d505      	bpl.n	80115b8 <__swrite+0x1e>
 80115ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b0:	2302      	movs	r3, #2
 80115b2:	2200      	movs	r2, #0
 80115b4:	f002 f902 	bl	80137bc <_lseek_r>
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	4632      	mov	r2, r6
 80115c6:	463b      	mov	r3, r7
 80115c8:	4628      	mov	r0, r5
 80115ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ce:	f000 bee3 	b.w	8012398 <_write_r>

080115d2 <__sseek>:
 80115d2:	b510      	push	{r4, lr}
 80115d4:	460c      	mov	r4, r1
 80115d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115da:	f002 f8ef 	bl	80137bc <_lseek_r>
 80115de:	1c43      	adds	r3, r0, #1
 80115e0:	89a3      	ldrh	r3, [r4, #12]
 80115e2:	bf15      	itete	ne
 80115e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80115e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115ee:	81a3      	strheq	r3, [r4, #12]
 80115f0:	bf18      	it	ne
 80115f2:	81a3      	strhne	r3, [r4, #12]
 80115f4:	bd10      	pop	{r4, pc}

080115f6 <__sclose>:
 80115f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fa:	f000 bedf 	b.w	80123bc <_close_r>

080115fe <strcpy>:
 80115fe:	4603      	mov	r3, r0
 8011600:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011604:	f803 2b01 	strb.w	r2, [r3], #1
 8011608:	2a00      	cmp	r2, #0
 801160a:	d1f9      	bne.n	8011600 <strcpy+0x2>
 801160c:	4770      	bx	lr

0801160e <strstr>:
 801160e:	780a      	ldrb	r2, [r1, #0]
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	b96a      	cbnz	r2, 8011630 <strstr+0x22>
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	429a      	cmp	r2, r3
 8011618:	d109      	bne.n	801162e <strstr+0x20>
 801161a:	460c      	mov	r4, r1
 801161c:	4605      	mov	r5, r0
 801161e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0f6      	beq.n	8011614 <strstr+0x6>
 8011626:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801162a:	429e      	cmp	r6, r3
 801162c:	d0f7      	beq.n	801161e <strstr+0x10>
 801162e:	3001      	adds	r0, #1
 8011630:	7803      	ldrb	r3, [r0, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d1ef      	bne.n	8011616 <strstr+0x8>
 8011636:	4618      	mov	r0, r3
 8011638:	e7ec      	b.n	8011614 <strstr+0x6>

0801163a <sulp>:
 801163a:	b570      	push	{r4, r5, r6, lr}
 801163c:	4604      	mov	r4, r0
 801163e:	460d      	mov	r5, r1
 8011640:	ec45 4b10 	vmov	d0, r4, r5
 8011644:	4616      	mov	r6, r2
 8011646:	f002 fc65 	bl	8013f14 <__ulp>
 801164a:	ec51 0b10 	vmov	r0, r1, d0
 801164e:	b17e      	cbz	r6, 8011670 <sulp+0x36>
 8011650:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011654:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011658:	2b00      	cmp	r3, #0
 801165a:	dd09      	ble.n	8011670 <sulp+0x36>
 801165c:	051b      	lsls	r3, r3, #20
 801165e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011662:	2400      	movs	r4, #0
 8011664:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011668:	4622      	mov	r2, r4
 801166a:	462b      	mov	r3, r5
 801166c:	f7ee ffe4 	bl	8000638 <__aeabi_dmul>
 8011670:	bd70      	pop	{r4, r5, r6, pc}
 8011672:	0000      	movs	r0, r0
 8011674:	0000      	movs	r0, r0
	...

08011678 <_strtod_l>:
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	ed2d 8b02 	vpush	{d8}
 8011680:	b09d      	sub	sp, #116	; 0x74
 8011682:	461f      	mov	r7, r3
 8011684:	2300      	movs	r3, #0
 8011686:	9318      	str	r3, [sp, #96]	; 0x60
 8011688:	4ba2      	ldr	r3, [pc, #648]	; (8011914 <_strtod_l+0x29c>)
 801168a:	9213      	str	r2, [sp, #76]	; 0x4c
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	9305      	str	r3, [sp, #20]
 8011690:	4604      	mov	r4, r0
 8011692:	4618      	mov	r0, r3
 8011694:	4688      	mov	r8, r1
 8011696:	f7ee fdbb 	bl	8000210 <strlen>
 801169a:	f04f 0a00 	mov.w	sl, #0
 801169e:	4605      	mov	r5, r0
 80116a0:	f04f 0b00 	mov.w	fp, #0
 80116a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80116a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116aa:	781a      	ldrb	r2, [r3, #0]
 80116ac:	2a2b      	cmp	r2, #43	; 0x2b
 80116ae:	d04e      	beq.n	801174e <_strtod_l+0xd6>
 80116b0:	d83b      	bhi.n	801172a <_strtod_l+0xb2>
 80116b2:	2a0d      	cmp	r2, #13
 80116b4:	d834      	bhi.n	8011720 <_strtod_l+0xa8>
 80116b6:	2a08      	cmp	r2, #8
 80116b8:	d834      	bhi.n	8011724 <_strtod_l+0xac>
 80116ba:	2a00      	cmp	r2, #0
 80116bc:	d03e      	beq.n	801173c <_strtod_l+0xc4>
 80116be:	2300      	movs	r3, #0
 80116c0:	930a      	str	r3, [sp, #40]	; 0x28
 80116c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80116c4:	7833      	ldrb	r3, [r6, #0]
 80116c6:	2b30      	cmp	r3, #48	; 0x30
 80116c8:	f040 80b0 	bne.w	801182c <_strtod_l+0x1b4>
 80116cc:	7873      	ldrb	r3, [r6, #1]
 80116ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80116d2:	2b58      	cmp	r3, #88	; 0x58
 80116d4:	d168      	bne.n	80117a8 <_strtod_l+0x130>
 80116d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	ab18      	add	r3, sp, #96	; 0x60
 80116dc:	9702      	str	r7, [sp, #8]
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	4a8d      	ldr	r2, [pc, #564]	; (8011918 <_strtod_l+0x2a0>)
 80116e2:	ab19      	add	r3, sp, #100	; 0x64
 80116e4:	a917      	add	r1, sp, #92	; 0x5c
 80116e6:	4620      	mov	r0, r4
 80116e8:	f001 fd5c 	bl	80131a4 <__gethex>
 80116ec:	f010 0707 	ands.w	r7, r0, #7
 80116f0:	4605      	mov	r5, r0
 80116f2:	d005      	beq.n	8011700 <_strtod_l+0x88>
 80116f4:	2f06      	cmp	r7, #6
 80116f6:	d12c      	bne.n	8011752 <_strtod_l+0xda>
 80116f8:	3601      	adds	r6, #1
 80116fa:	2300      	movs	r3, #0
 80116fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80116fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011702:	2b00      	cmp	r3, #0
 8011704:	f040 8590 	bne.w	8012228 <_strtod_l+0xbb0>
 8011708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801170a:	b1eb      	cbz	r3, 8011748 <_strtod_l+0xd0>
 801170c:	4652      	mov	r2, sl
 801170e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011712:	ec43 2b10 	vmov	d0, r2, r3
 8011716:	b01d      	add	sp, #116	; 0x74
 8011718:	ecbd 8b02 	vpop	{d8}
 801171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011720:	2a20      	cmp	r2, #32
 8011722:	d1cc      	bne.n	80116be <_strtod_l+0x46>
 8011724:	3301      	adds	r3, #1
 8011726:	9317      	str	r3, [sp, #92]	; 0x5c
 8011728:	e7be      	b.n	80116a8 <_strtod_l+0x30>
 801172a:	2a2d      	cmp	r2, #45	; 0x2d
 801172c:	d1c7      	bne.n	80116be <_strtod_l+0x46>
 801172e:	2201      	movs	r2, #1
 8011730:	920a      	str	r2, [sp, #40]	; 0x28
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	9217      	str	r2, [sp, #92]	; 0x5c
 8011736:	785b      	ldrb	r3, [r3, #1]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1c2      	bne.n	80116c2 <_strtod_l+0x4a>
 801173c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801173e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011742:	2b00      	cmp	r3, #0
 8011744:	f040 856e 	bne.w	8012224 <_strtod_l+0xbac>
 8011748:	4652      	mov	r2, sl
 801174a:	465b      	mov	r3, fp
 801174c:	e7e1      	b.n	8011712 <_strtod_l+0x9a>
 801174e:	2200      	movs	r2, #0
 8011750:	e7ee      	b.n	8011730 <_strtod_l+0xb8>
 8011752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011754:	b13a      	cbz	r2, 8011766 <_strtod_l+0xee>
 8011756:	2135      	movs	r1, #53	; 0x35
 8011758:	a81a      	add	r0, sp, #104	; 0x68
 801175a:	f002 fce6 	bl	801412a <__copybits>
 801175e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011760:	4620      	mov	r0, r4
 8011762:	f002 f8a5 	bl	80138b0 <_Bfree>
 8011766:	3f01      	subs	r7, #1
 8011768:	2f04      	cmp	r7, #4
 801176a:	d806      	bhi.n	801177a <_strtod_l+0x102>
 801176c:	e8df f007 	tbb	[pc, r7]
 8011770:	1714030a 	.word	0x1714030a
 8011774:	0a          	.byte	0x0a
 8011775:	00          	.byte	0x00
 8011776:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801177a:	0728      	lsls	r0, r5, #28
 801177c:	d5c0      	bpl.n	8011700 <_strtod_l+0x88>
 801177e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011782:	e7bd      	b.n	8011700 <_strtod_l+0x88>
 8011784:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011788:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801178a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801178e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011792:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011796:	e7f0      	b.n	801177a <_strtod_l+0x102>
 8011798:	f8df b180 	ldr.w	fp, [pc, #384]	; 801191c <_strtod_l+0x2a4>
 801179c:	e7ed      	b.n	801177a <_strtod_l+0x102>
 801179e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80117a2:	f04f 3aff 	mov.w	sl, #4294967295
 80117a6:	e7e8      	b.n	801177a <_strtod_l+0x102>
 80117a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80117ae:	785b      	ldrb	r3, [r3, #1]
 80117b0:	2b30      	cmp	r3, #48	; 0x30
 80117b2:	d0f9      	beq.n	80117a8 <_strtod_l+0x130>
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d0a3      	beq.n	8011700 <_strtod_l+0x88>
 80117b8:	2301      	movs	r3, #1
 80117ba:	f04f 0900 	mov.w	r9, #0
 80117be:	9304      	str	r3, [sp, #16]
 80117c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80117c2:	9308      	str	r3, [sp, #32]
 80117c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80117c8:	464f      	mov	r7, r9
 80117ca:	220a      	movs	r2, #10
 80117cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80117ce:	7806      	ldrb	r6, [r0, #0]
 80117d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117d4:	b2d9      	uxtb	r1, r3
 80117d6:	2909      	cmp	r1, #9
 80117d8:	d92a      	bls.n	8011830 <_strtod_l+0x1b8>
 80117da:	9905      	ldr	r1, [sp, #20]
 80117dc:	462a      	mov	r2, r5
 80117de:	f003 fac3 	bl	8014d68 <strncmp>
 80117e2:	b398      	cbz	r0, 801184c <_strtod_l+0x1d4>
 80117e4:	2000      	movs	r0, #0
 80117e6:	4632      	mov	r2, r6
 80117e8:	463d      	mov	r5, r7
 80117ea:	9005      	str	r0, [sp, #20]
 80117ec:	4603      	mov	r3, r0
 80117ee:	2a65      	cmp	r2, #101	; 0x65
 80117f0:	d001      	beq.n	80117f6 <_strtod_l+0x17e>
 80117f2:	2a45      	cmp	r2, #69	; 0x45
 80117f4:	d118      	bne.n	8011828 <_strtod_l+0x1b0>
 80117f6:	b91d      	cbnz	r5, 8011800 <_strtod_l+0x188>
 80117f8:	9a04      	ldr	r2, [sp, #16]
 80117fa:	4302      	orrs	r2, r0
 80117fc:	d09e      	beq.n	801173c <_strtod_l+0xc4>
 80117fe:	2500      	movs	r5, #0
 8011800:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011804:	f108 0201 	add.w	r2, r8, #1
 8011808:	9217      	str	r2, [sp, #92]	; 0x5c
 801180a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801180e:	2a2b      	cmp	r2, #43	; 0x2b
 8011810:	d075      	beq.n	80118fe <_strtod_l+0x286>
 8011812:	2a2d      	cmp	r2, #45	; 0x2d
 8011814:	d07b      	beq.n	801190e <_strtod_l+0x296>
 8011816:	f04f 0c00 	mov.w	ip, #0
 801181a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801181e:	2909      	cmp	r1, #9
 8011820:	f240 8082 	bls.w	8011928 <_strtod_l+0x2b0>
 8011824:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011828:	2600      	movs	r6, #0
 801182a:	e09d      	b.n	8011968 <_strtod_l+0x2f0>
 801182c:	2300      	movs	r3, #0
 801182e:	e7c4      	b.n	80117ba <_strtod_l+0x142>
 8011830:	2f08      	cmp	r7, #8
 8011832:	bfd8      	it	le
 8011834:	9907      	ldrle	r1, [sp, #28]
 8011836:	f100 0001 	add.w	r0, r0, #1
 801183a:	bfda      	itte	le
 801183c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011840:	9307      	strle	r3, [sp, #28]
 8011842:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011846:	3701      	adds	r7, #1
 8011848:	9017      	str	r0, [sp, #92]	; 0x5c
 801184a:	e7bf      	b.n	80117cc <_strtod_l+0x154>
 801184c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801184e:	195a      	adds	r2, r3, r5
 8011850:	9217      	str	r2, [sp, #92]	; 0x5c
 8011852:	5d5a      	ldrb	r2, [r3, r5]
 8011854:	2f00      	cmp	r7, #0
 8011856:	d037      	beq.n	80118c8 <_strtod_l+0x250>
 8011858:	9005      	str	r0, [sp, #20]
 801185a:	463d      	mov	r5, r7
 801185c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011860:	2b09      	cmp	r3, #9
 8011862:	d912      	bls.n	801188a <_strtod_l+0x212>
 8011864:	2301      	movs	r3, #1
 8011866:	e7c2      	b.n	80117ee <_strtod_l+0x176>
 8011868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801186a:	1c5a      	adds	r2, r3, #1
 801186c:	9217      	str	r2, [sp, #92]	; 0x5c
 801186e:	785a      	ldrb	r2, [r3, #1]
 8011870:	3001      	adds	r0, #1
 8011872:	2a30      	cmp	r2, #48	; 0x30
 8011874:	d0f8      	beq.n	8011868 <_strtod_l+0x1f0>
 8011876:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801187a:	2b08      	cmp	r3, #8
 801187c:	f200 84d9 	bhi.w	8012232 <_strtod_l+0xbba>
 8011880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011882:	9005      	str	r0, [sp, #20]
 8011884:	2000      	movs	r0, #0
 8011886:	9308      	str	r3, [sp, #32]
 8011888:	4605      	mov	r5, r0
 801188a:	3a30      	subs	r2, #48	; 0x30
 801188c:	f100 0301 	add.w	r3, r0, #1
 8011890:	d014      	beq.n	80118bc <_strtod_l+0x244>
 8011892:	9905      	ldr	r1, [sp, #20]
 8011894:	4419      	add	r1, r3
 8011896:	9105      	str	r1, [sp, #20]
 8011898:	462b      	mov	r3, r5
 801189a:	eb00 0e05 	add.w	lr, r0, r5
 801189e:	210a      	movs	r1, #10
 80118a0:	4573      	cmp	r3, lr
 80118a2:	d113      	bne.n	80118cc <_strtod_l+0x254>
 80118a4:	182b      	adds	r3, r5, r0
 80118a6:	2b08      	cmp	r3, #8
 80118a8:	f105 0501 	add.w	r5, r5, #1
 80118ac:	4405      	add	r5, r0
 80118ae:	dc1c      	bgt.n	80118ea <_strtod_l+0x272>
 80118b0:	9907      	ldr	r1, [sp, #28]
 80118b2:	230a      	movs	r3, #10
 80118b4:	fb03 2301 	mla	r3, r3, r1, r2
 80118b8:	9307      	str	r3, [sp, #28]
 80118ba:	2300      	movs	r3, #0
 80118bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80118be:	1c51      	adds	r1, r2, #1
 80118c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80118c2:	7852      	ldrb	r2, [r2, #1]
 80118c4:	4618      	mov	r0, r3
 80118c6:	e7c9      	b.n	801185c <_strtod_l+0x1e4>
 80118c8:	4638      	mov	r0, r7
 80118ca:	e7d2      	b.n	8011872 <_strtod_l+0x1fa>
 80118cc:	2b08      	cmp	r3, #8
 80118ce:	dc04      	bgt.n	80118da <_strtod_l+0x262>
 80118d0:	9e07      	ldr	r6, [sp, #28]
 80118d2:	434e      	muls	r6, r1
 80118d4:	9607      	str	r6, [sp, #28]
 80118d6:	3301      	adds	r3, #1
 80118d8:	e7e2      	b.n	80118a0 <_strtod_l+0x228>
 80118da:	f103 0c01 	add.w	ip, r3, #1
 80118de:	f1bc 0f10 	cmp.w	ip, #16
 80118e2:	bfd8      	it	le
 80118e4:	fb01 f909 	mulle.w	r9, r1, r9
 80118e8:	e7f5      	b.n	80118d6 <_strtod_l+0x25e>
 80118ea:	2d10      	cmp	r5, #16
 80118ec:	bfdc      	itt	le
 80118ee:	230a      	movle	r3, #10
 80118f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80118f4:	e7e1      	b.n	80118ba <_strtod_l+0x242>
 80118f6:	2300      	movs	r3, #0
 80118f8:	9305      	str	r3, [sp, #20]
 80118fa:	2301      	movs	r3, #1
 80118fc:	e77c      	b.n	80117f8 <_strtod_l+0x180>
 80118fe:	f04f 0c00 	mov.w	ip, #0
 8011902:	f108 0202 	add.w	r2, r8, #2
 8011906:	9217      	str	r2, [sp, #92]	; 0x5c
 8011908:	f898 2002 	ldrb.w	r2, [r8, #2]
 801190c:	e785      	b.n	801181a <_strtod_l+0x1a2>
 801190e:	f04f 0c01 	mov.w	ip, #1
 8011912:	e7f6      	b.n	8011902 <_strtod_l+0x28a>
 8011914:	080180e8 	.word	0x080180e8
 8011918:	08017e9c 	.word	0x08017e9c
 801191c:	7ff00000 	.word	0x7ff00000
 8011920:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011922:	1c51      	adds	r1, r2, #1
 8011924:	9117      	str	r1, [sp, #92]	; 0x5c
 8011926:	7852      	ldrb	r2, [r2, #1]
 8011928:	2a30      	cmp	r2, #48	; 0x30
 801192a:	d0f9      	beq.n	8011920 <_strtod_l+0x2a8>
 801192c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011930:	2908      	cmp	r1, #8
 8011932:	f63f af79 	bhi.w	8011828 <_strtod_l+0x1b0>
 8011936:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801193a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801193c:	9206      	str	r2, [sp, #24]
 801193e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011940:	1c51      	adds	r1, r2, #1
 8011942:	9117      	str	r1, [sp, #92]	; 0x5c
 8011944:	7852      	ldrb	r2, [r2, #1]
 8011946:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801194a:	2e09      	cmp	r6, #9
 801194c:	d937      	bls.n	80119be <_strtod_l+0x346>
 801194e:	9e06      	ldr	r6, [sp, #24]
 8011950:	1b89      	subs	r1, r1, r6
 8011952:	2908      	cmp	r1, #8
 8011954:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011958:	dc02      	bgt.n	8011960 <_strtod_l+0x2e8>
 801195a:	4576      	cmp	r6, lr
 801195c:	bfa8      	it	ge
 801195e:	4676      	movge	r6, lr
 8011960:	f1bc 0f00 	cmp.w	ip, #0
 8011964:	d000      	beq.n	8011968 <_strtod_l+0x2f0>
 8011966:	4276      	negs	r6, r6
 8011968:	2d00      	cmp	r5, #0
 801196a:	d14d      	bne.n	8011a08 <_strtod_l+0x390>
 801196c:	9904      	ldr	r1, [sp, #16]
 801196e:	4301      	orrs	r1, r0
 8011970:	f47f aec6 	bne.w	8011700 <_strtod_l+0x88>
 8011974:	2b00      	cmp	r3, #0
 8011976:	f47f aee1 	bne.w	801173c <_strtod_l+0xc4>
 801197a:	2a69      	cmp	r2, #105	; 0x69
 801197c:	d027      	beq.n	80119ce <_strtod_l+0x356>
 801197e:	dc24      	bgt.n	80119ca <_strtod_l+0x352>
 8011980:	2a49      	cmp	r2, #73	; 0x49
 8011982:	d024      	beq.n	80119ce <_strtod_l+0x356>
 8011984:	2a4e      	cmp	r2, #78	; 0x4e
 8011986:	f47f aed9 	bne.w	801173c <_strtod_l+0xc4>
 801198a:	499f      	ldr	r1, [pc, #636]	; (8011c08 <_strtod_l+0x590>)
 801198c:	a817      	add	r0, sp, #92	; 0x5c
 801198e:	f001 fe61 	bl	8013654 <__match>
 8011992:	2800      	cmp	r0, #0
 8011994:	f43f aed2 	beq.w	801173c <_strtod_l+0xc4>
 8011998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	2b28      	cmp	r3, #40	; 0x28
 801199e:	d12d      	bne.n	80119fc <_strtod_l+0x384>
 80119a0:	499a      	ldr	r1, [pc, #616]	; (8011c0c <_strtod_l+0x594>)
 80119a2:	aa1a      	add	r2, sp, #104	; 0x68
 80119a4:	a817      	add	r0, sp, #92	; 0x5c
 80119a6:	f001 fe69 	bl	801367c <__hexnan>
 80119aa:	2805      	cmp	r0, #5
 80119ac:	d126      	bne.n	80119fc <_strtod_l+0x384>
 80119ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80119b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80119b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80119bc:	e6a0      	b.n	8011700 <_strtod_l+0x88>
 80119be:	210a      	movs	r1, #10
 80119c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80119c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80119c8:	e7b9      	b.n	801193e <_strtod_l+0x2c6>
 80119ca:	2a6e      	cmp	r2, #110	; 0x6e
 80119cc:	e7db      	b.n	8011986 <_strtod_l+0x30e>
 80119ce:	4990      	ldr	r1, [pc, #576]	; (8011c10 <_strtod_l+0x598>)
 80119d0:	a817      	add	r0, sp, #92	; 0x5c
 80119d2:	f001 fe3f 	bl	8013654 <__match>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f43f aeb0 	beq.w	801173c <_strtod_l+0xc4>
 80119dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119de:	498d      	ldr	r1, [pc, #564]	; (8011c14 <_strtod_l+0x59c>)
 80119e0:	3b01      	subs	r3, #1
 80119e2:	a817      	add	r0, sp, #92	; 0x5c
 80119e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80119e6:	f001 fe35 	bl	8013654 <__match>
 80119ea:	b910      	cbnz	r0, 80119f2 <_strtod_l+0x37a>
 80119ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119ee:	3301      	adds	r3, #1
 80119f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80119f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011c24 <_strtod_l+0x5ac>
 80119f6:	f04f 0a00 	mov.w	sl, #0
 80119fa:	e681      	b.n	8011700 <_strtod_l+0x88>
 80119fc:	4886      	ldr	r0, [pc, #536]	; (8011c18 <_strtod_l+0x5a0>)
 80119fe:	f003 f963 	bl	8014cc8 <nan>
 8011a02:	ec5b ab10 	vmov	sl, fp, d0
 8011a06:	e67b      	b.n	8011700 <_strtod_l+0x88>
 8011a08:	9b05      	ldr	r3, [sp, #20]
 8011a0a:	9807      	ldr	r0, [sp, #28]
 8011a0c:	1af3      	subs	r3, r6, r3
 8011a0e:	2f00      	cmp	r7, #0
 8011a10:	bf08      	it	eq
 8011a12:	462f      	moveq	r7, r5
 8011a14:	2d10      	cmp	r5, #16
 8011a16:	9306      	str	r3, [sp, #24]
 8011a18:	46a8      	mov	r8, r5
 8011a1a:	bfa8      	it	ge
 8011a1c:	f04f 0810 	movge.w	r8, #16
 8011a20:	f7ee fd90 	bl	8000544 <__aeabi_ui2d>
 8011a24:	2d09      	cmp	r5, #9
 8011a26:	4682      	mov	sl, r0
 8011a28:	468b      	mov	fp, r1
 8011a2a:	dd13      	ble.n	8011a54 <_strtod_l+0x3dc>
 8011a2c:	4b7b      	ldr	r3, [pc, #492]	; (8011c1c <_strtod_l+0x5a4>)
 8011a2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a36:	f7ee fdff 	bl	8000638 <__aeabi_dmul>
 8011a3a:	4682      	mov	sl, r0
 8011a3c:	4648      	mov	r0, r9
 8011a3e:	468b      	mov	fp, r1
 8011a40:	f7ee fd80 	bl	8000544 <__aeabi_ui2d>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4650      	mov	r0, sl
 8011a4a:	4659      	mov	r1, fp
 8011a4c:	f7ee fc3e 	bl	80002cc <__adddf3>
 8011a50:	4682      	mov	sl, r0
 8011a52:	468b      	mov	fp, r1
 8011a54:	2d0f      	cmp	r5, #15
 8011a56:	dc38      	bgt.n	8011aca <_strtod_l+0x452>
 8011a58:	9b06      	ldr	r3, [sp, #24]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f43f ae50 	beq.w	8011700 <_strtod_l+0x88>
 8011a60:	dd24      	ble.n	8011aac <_strtod_l+0x434>
 8011a62:	2b16      	cmp	r3, #22
 8011a64:	dc0b      	bgt.n	8011a7e <_strtod_l+0x406>
 8011a66:	496d      	ldr	r1, [pc, #436]	; (8011c1c <_strtod_l+0x5a4>)
 8011a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a70:	4652      	mov	r2, sl
 8011a72:	465b      	mov	r3, fp
 8011a74:	f7ee fde0 	bl	8000638 <__aeabi_dmul>
 8011a78:	4682      	mov	sl, r0
 8011a7a:	468b      	mov	fp, r1
 8011a7c:	e640      	b.n	8011700 <_strtod_l+0x88>
 8011a7e:	9a06      	ldr	r2, [sp, #24]
 8011a80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011a84:	4293      	cmp	r3, r2
 8011a86:	db20      	blt.n	8011aca <_strtod_l+0x452>
 8011a88:	4c64      	ldr	r4, [pc, #400]	; (8011c1c <_strtod_l+0x5a4>)
 8011a8a:	f1c5 050f 	rsb	r5, r5, #15
 8011a8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011a92:	4652      	mov	r2, sl
 8011a94:	465b      	mov	r3, fp
 8011a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a9a:	f7ee fdcd 	bl	8000638 <__aeabi_dmul>
 8011a9e:	9b06      	ldr	r3, [sp, #24]
 8011aa0:	1b5d      	subs	r5, r3, r5
 8011aa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011aaa:	e7e3      	b.n	8011a74 <_strtod_l+0x3fc>
 8011aac:	9b06      	ldr	r3, [sp, #24]
 8011aae:	3316      	adds	r3, #22
 8011ab0:	db0b      	blt.n	8011aca <_strtod_l+0x452>
 8011ab2:	9b05      	ldr	r3, [sp, #20]
 8011ab4:	1b9e      	subs	r6, r3, r6
 8011ab6:	4b59      	ldr	r3, [pc, #356]	; (8011c1c <_strtod_l+0x5a4>)
 8011ab8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011abc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	4659      	mov	r1, fp
 8011ac4:	f7ee fee2 	bl	800088c <__aeabi_ddiv>
 8011ac8:	e7d6      	b.n	8011a78 <_strtod_l+0x400>
 8011aca:	9b06      	ldr	r3, [sp, #24]
 8011acc:	eba5 0808 	sub.w	r8, r5, r8
 8011ad0:	4498      	add	r8, r3
 8011ad2:	f1b8 0f00 	cmp.w	r8, #0
 8011ad6:	dd74      	ble.n	8011bc2 <_strtod_l+0x54a>
 8011ad8:	f018 030f 	ands.w	r3, r8, #15
 8011adc:	d00a      	beq.n	8011af4 <_strtod_l+0x47c>
 8011ade:	494f      	ldr	r1, [pc, #316]	; (8011c1c <_strtod_l+0x5a4>)
 8011ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ae4:	4652      	mov	r2, sl
 8011ae6:	465b      	mov	r3, fp
 8011ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aec:	f7ee fda4 	bl	8000638 <__aeabi_dmul>
 8011af0:	4682      	mov	sl, r0
 8011af2:	468b      	mov	fp, r1
 8011af4:	f038 080f 	bics.w	r8, r8, #15
 8011af8:	d04f      	beq.n	8011b9a <_strtod_l+0x522>
 8011afa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011afe:	dd22      	ble.n	8011b46 <_strtod_l+0x4ce>
 8011b00:	2500      	movs	r5, #0
 8011b02:	462e      	mov	r6, r5
 8011b04:	9507      	str	r5, [sp, #28]
 8011b06:	9505      	str	r5, [sp, #20]
 8011b08:	2322      	movs	r3, #34	; 0x22
 8011b0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011c24 <_strtod_l+0x5ac>
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	f04f 0a00 	mov.w	sl, #0
 8011b14:	9b07      	ldr	r3, [sp, #28]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f43f adf2 	beq.w	8011700 <_strtod_l+0x88>
 8011b1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f001 fec6 	bl	80138b0 <_Bfree>
 8011b24:	9905      	ldr	r1, [sp, #20]
 8011b26:	4620      	mov	r0, r4
 8011b28:	f001 fec2 	bl	80138b0 <_Bfree>
 8011b2c:	4631      	mov	r1, r6
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f001 febe 	bl	80138b0 <_Bfree>
 8011b34:	9907      	ldr	r1, [sp, #28]
 8011b36:	4620      	mov	r0, r4
 8011b38:	f001 feba 	bl	80138b0 <_Bfree>
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f001 feb6 	bl	80138b0 <_Bfree>
 8011b44:	e5dc      	b.n	8011700 <_strtod_l+0x88>
 8011b46:	4b36      	ldr	r3, [pc, #216]	; (8011c20 <_strtod_l+0x5a8>)
 8011b48:	9304      	str	r3, [sp, #16]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b50:	4650      	mov	r0, sl
 8011b52:	4659      	mov	r1, fp
 8011b54:	4699      	mov	r9, r3
 8011b56:	f1b8 0f01 	cmp.w	r8, #1
 8011b5a:	dc21      	bgt.n	8011ba0 <_strtod_l+0x528>
 8011b5c:	b10b      	cbz	r3, 8011b62 <_strtod_l+0x4ea>
 8011b5e:	4682      	mov	sl, r0
 8011b60:	468b      	mov	fp, r1
 8011b62:	4b2f      	ldr	r3, [pc, #188]	; (8011c20 <_strtod_l+0x5a8>)
 8011b64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011b68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011b6c:	4652      	mov	r2, sl
 8011b6e:	465b      	mov	r3, fp
 8011b70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011b74:	f7ee fd60 	bl	8000638 <__aeabi_dmul>
 8011b78:	4b2a      	ldr	r3, [pc, #168]	; (8011c24 <_strtod_l+0x5ac>)
 8011b7a:	460a      	mov	r2, r1
 8011b7c:	400b      	ands	r3, r1
 8011b7e:	492a      	ldr	r1, [pc, #168]	; (8011c28 <_strtod_l+0x5b0>)
 8011b80:	428b      	cmp	r3, r1
 8011b82:	4682      	mov	sl, r0
 8011b84:	d8bc      	bhi.n	8011b00 <_strtod_l+0x488>
 8011b86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011b8a:	428b      	cmp	r3, r1
 8011b8c:	bf86      	itte	hi
 8011b8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011c2c <_strtod_l+0x5b4>
 8011b92:	f04f 3aff 	movhi.w	sl, #4294967295
 8011b96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	e084      	b.n	8011caa <_strtod_l+0x632>
 8011ba0:	f018 0f01 	tst.w	r8, #1
 8011ba4:	d005      	beq.n	8011bb2 <_strtod_l+0x53a>
 8011ba6:	9b04      	ldr	r3, [sp, #16]
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	f7ee fd44 	bl	8000638 <__aeabi_dmul>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	9a04      	ldr	r2, [sp, #16]
 8011bb4:	3208      	adds	r2, #8
 8011bb6:	f109 0901 	add.w	r9, r9, #1
 8011bba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011bbe:	9204      	str	r2, [sp, #16]
 8011bc0:	e7c9      	b.n	8011b56 <_strtod_l+0x4de>
 8011bc2:	d0ea      	beq.n	8011b9a <_strtod_l+0x522>
 8011bc4:	f1c8 0800 	rsb	r8, r8, #0
 8011bc8:	f018 020f 	ands.w	r2, r8, #15
 8011bcc:	d00a      	beq.n	8011be4 <_strtod_l+0x56c>
 8011bce:	4b13      	ldr	r3, [pc, #76]	; (8011c1c <_strtod_l+0x5a4>)
 8011bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bd4:	4650      	mov	r0, sl
 8011bd6:	4659      	mov	r1, fp
 8011bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bdc:	f7ee fe56 	bl	800088c <__aeabi_ddiv>
 8011be0:	4682      	mov	sl, r0
 8011be2:	468b      	mov	fp, r1
 8011be4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011be8:	d0d7      	beq.n	8011b9a <_strtod_l+0x522>
 8011bea:	f1b8 0f1f 	cmp.w	r8, #31
 8011bee:	dd1f      	ble.n	8011c30 <_strtod_l+0x5b8>
 8011bf0:	2500      	movs	r5, #0
 8011bf2:	462e      	mov	r6, r5
 8011bf4:	9507      	str	r5, [sp, #28]
 8011bf6:	9505      	str	r5, [sp, #20]
 8011bf8:	2322      	movs	r3, #34	; 0x22
 8011bfa:	f04f 0a00 	mov.w	sl, #0
 8011bfe:	f04f 0b00 	mov.w	fp, #0
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	e786      	b.n	8011b14 <_strtod_l+0x49c>
 8011c06:	bf00      	nop
 8011c08:	08017e71 	.word	0x08017e71
 8011c0c:	08017eb0 	.word	0x08017eb0
 8011c10:	08017e69 	.word	0x08017e69
 8011c14:	08017ff4 	.word	0x08017ff4
 8011c18:	080182bb 	.word	0x080182bb
 8011c1c:	08018180 	.word	0x08018180
 8011c20:	08018158 	.word	0x08018158
 8011c24:	7ff00000 	.word	0x7ff00000
 8011c28:	7ca00000 	.word	0x7ca00000
 8011c2c:	7fefffff 	.word	0x7fefffff
 8011c30:	f018 0310 	ands.w	r3, r8, #16
 8011c34:	bf18      	it	ne
 8011c36:	236a      	movne	r3, #106	; 0x6a
 8011c38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011fe8 <_strtod_l+0x970>
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	4650      	mov	r0, sl
 8011c40:	4659      	mov	r1, fp
 8011c42:	2300      	movs	r3, #0
 8011c44:	f018 0f01 	tst.w	r8, #1
 8011c48:	d004      	beq.n	8011c54 <_strtod_l+0x5dc>
 8011c4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c4e:	f7ee fcf3 	bl	8000638 <__aeabi_dmul>
 8011c52:	2301      	movs	r3, #1
 8011c54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c58:	f109 0908 	add.w	r9, r9, #8
 8011c5c:	d1f2      	bne.n	8011c44 <_strtod_l+0x5cc>
 8011c5e:	b10b      	cbz	r3, 8011c64 <_strtod_l+0x5ec>
 8011c60:	4682      	mov	sl, r0
 8011c62:	468b      	mov	fp, r1
 8011c64:	9b04      	ldr	r3, [sp, #16]
 8011c66:	b1c3      	cbz	r3, 8011c9a <_strtod_l+0x622>
 8011c68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011c6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	4659      	mov	r1, fp
 8011c74:	dd11      	ble.n	8011c9a <_strtod_l+0x622>
 8011c76:	2b1f      	cmp	r3, #31
 8011c78:	f340 8124 	ble.w	8011ec4 <_strtod_l+0x84c>
 8011c7c:	2b34      	cmp	r3, #52	; 0x34
 8011c7e:	bfde      	ittt	le
 8011c80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011c84:	f04f 33ff 	movle.w	r3, #4294967295
 8011c88:	fa03 f202 	lslle.w	r2, r3, r2
 8011c8c:	f04f 0a00 	mov.w	sl, #0
 8011c90:	bfcc      	ite	gt
 8011c92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011c96:	ea02 0b01 	andle.w	fp, r2, r1
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	4650      	mov	r0, sl
 8011ca0:	4659      	mov	r1, fp
 8011ca2:	f7ee ff31 	bl	8000b08 <__aeabi_dcmpeq>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d1a2      	bne.n	8011bf0 <_strtod_l+0x578>
 8011caa:	9b07      	ldr	r3, [sp, #28]
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	9908      	ldr	r1, [sp, #32]
 8011cb0:	462b      	mov	r3, r5
 8011cb2:	463a      	mov	r2, r7
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f001 fe63 	bl	8013980 <__s2b>
 8011cba:	9007      	str	r0, [sp, #28]
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	f43f af1f 	beq.w	8011b00 <_strtod_l+0x488>
 8011cc2:	9b05      	ldr	r3, [sp, #20]
 8011cc4:	1b9e      	subs	r6, r3, r6
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	bfb4      	ite	lt
 8011ccc:	4633      	movlt	r3, r6
 8011cce:	2300      	movge	r3, #0
 8011cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8011cd2:	9b06      	ldr	r3, [sp, #24]
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cda:	9312      	str	r3, [sp, #72]	; 0x48
 8011cdc:	462e      	mov	r6, r5
 8011cde:	9b07      	ldr	r3, [sp, #28]
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	6859      	ldr	r1, [r3, #4]
 8011ce4:	f001 fda4 	bl	8013830 <_Balloc>
 8011ce8:	9005      	str	r0, [sp, #20]
 8011cea:	2800      	cmp	r0, #0
 8011cec:	f43f af0c 	beq.w	8011b08 <_strtod_l+0x490>
 8011cf0:	9b07      	ldr	r3, [sp, #28]
 8011cf2:	691a      	ldr	r2, [r3, #16]
 8011cf4:	3202      	adds	r2, #2
 8011cf6:	f103 010c 	add.w	r1, r3, #12
 8011cfa:	0092      	lsls	r2, r2, #2
 8011cfc:	300c      	adds	r0, #12
 8011cfe:	f001 fd89 	bl	8013814 <memcpy>
 8011d02:	ec4b ab10 	vmov	d0, sl, fp
 8011d06:	aa1a      	add	r2, sp, #104	; 0x68
 8011d08:	a919      	add	r1, sp, #100	; 0x64
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f002 f97e 	bl	801400c <__d2b>
 8011d10:	ec4b ab18 	vmov	d8, sl, fp
 8011d14:	9018      	str	r0, [sp, #96]	; 0x60
 8011d16:	2800      	cmp	r0, #0
 8011d18:	f43f aef6 	beq.w	8011b08 <_strtod_l+0x490>
 8011d1c:	2101      	movs	r1, #1
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f001 fec8 	bl	8013ab4 <__i2b>
 8011d24:	4606      	mov	r6, r0
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f43f aeee 	beq.w	8011b08 <_strtod_l+0x490>
 8011d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d2e:	9904      	ldr	r1, [sp, #16]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	bfab      	itete	ge
 8011d34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011d36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011d38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011d3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011d3e:	bfac      	ite	ge
 8011d40:	eb03 0902 	addge.w	r9, r3, r2
 8011d44:	1ad7      	sublt	r7, r2, r3
 8011d46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011d48:	eba3 0801 	sub.w	r8, r3, r1
 8011d4c:	4490      	add	r8, r2
 8011d4e:	4ba1      	ldr	r3, [pc, #644]	; (8011fd4 <_strtod_l+0x95c>)
 8011d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d54:	4598      	cmp	r8, r3
 8011d56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d5a:	f280 80c7 	bge.w	8011eec <_strtod_l+0x874>
 8011d5e:	eba3 0308 	sub.w	r3, r3, r8
 8011d62:	2b1f      	cmp	r3, #31
 8011d64:	eba2 0203 	sub.w	r2, r2, r3
 8011d68:	f04f 0101 	mov.w	r1, #1
 8011d6c:	f300 80b1 	bgt.w	8011ed2 <_strtod_l+0x85a>
 8011d70:	fa01 f303 	lsl.w	r3, r1, r3
 8011d74:	930d      	str	r3, [sp, #52]	; 0x34
 8011d76:	2300      	movs	r3, #0
 8011d78:	9308      	str	r3, [sp, #32]
 8011d7a:	eb09 0802 	add.w	r8, r9, r2
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	45c1      	cmp	r9, r8
 8011d82:	4417      	add	r7, r2
 8011d84:	441f      	add	r7, r3
 8011d86:	464b      	mov	r3, r9
 8011d88:	bfa8      	it	ge
 8011d8a:	4643      	movge	r3, r8
 8011d8c:	42bb      	cmp	r3, r7
 8011d8e:	bfa8      	it	ge
 8011d90:	463b      	movge	r3, r7
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	bfc2      	ittt	gt
 8011d96:	eba8 0803 	subgt.w	r8, r8, r3
 8011d9a:	1aff      	subgt	r7, r7, r3
 8011d9c:	eba9 0903 	subgt.w	r9, r9, r3
 8011da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	dd17      	ble.n	8011dd6 <_strtod_l+0x75e>
 8011da6:	4631      	mov	r1, r6
 8011da8:	461a      	mov	r2, r3
 8011daa:	4620      	mov	r0, r4
 8011dac:	f001 ff42 	bl	8013c34 <__pow5mult>
 8011db0:	4606      	mov	r6, r0
 8011db2:	2800      	cmp	r0, #0
 8011db4:	f43f aea8 	beq.w	8011b08 <_strtod_l+0x490>
 8011db8:	4601      	mov	r1, r0
 8011dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f001 fe8f 	bl	8013ae0 <__multiply>
 8011dc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	f43f ae9f 	beq.w	8011b08 <_strtod_l+0x490>
 8011dca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f001 fd6f 	bl	80138b0 <_Bfree>
 8011dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dd4:	9318      	str	r3, [sp, #96]	; 0x60
 8011dd6:	f1b8 0f00 	cmp.w	r8, #0
 8011dda:	f300 808c 	bgt.w	8011ef6 <_strtod_l+0x87e>
 8011dde:	9b06      	ldr	r3, [sp, #24]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dd08      	ble.n	8011df6 <_strtod_l+0x77e>
 8011de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011de6:	9905      	ldr	r1, [sp, #20]
 8011de8:	4620      	mov	r0, r4
 8011dea:	f001 ff23 	bl	8013c34 <__pow5mult>
 8011dee:	9005      	str	r0, [sp, #20]
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f43f ae89 	beq.w	8011b08 <_strtod_l+0x490>
 8011df6:	2f00      	cmp	r7, #0
 8011df8:	dd08      	ble.n	8011e0c <_strtod_l+0x794>
 8011dfa:	9905      	ldr	r1, [sp, #20]
 8011dfc:	463a      	mov	r2, r7
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f001 ff72 	bl	8013ce8 <__lshift>
 8011e04:	9005      	str	r0, [sp, #20]
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f43f ae7e 	beq.w	8011b08 <_strtod_l+0x490>
 8011e0c:	f1b9 0f00 	cmp.w	r9, #0
 8011e10:	dd08      	ble.n	8011e24 <_strtod_l+0x7ac>
 8011e12:	4631      	mov	r1, r6
 8011e14:	464a      	mov	r2, r9
 8011e16:	4620      	mov	r0, r4
 8011e18:	f001 ff66 	bl	8013ce8 <__lshift>
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f43f ae72 	beq.w	8011b08 <_strtod_l+0x490>
 8011e24:	9a05      	ldr	r2, [sp, #20]
 8011e26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f001 ffe9 	bl	8013e00 <__mdiff>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	2800      	cmp	r0, #0
 8011e32:	f43f ae69 	beq.w	8011b08 <_strtod_l+0x490>
 8011e36:	68c3      	ldr	r3, [r0, #12]
 8011e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	60c3      	str	r3, [r0, #12]
 8011e3e:	4631      	mov	r1, r6
 8011e40:	f001 ffc2 	bl	8013dc8 <__mcmp>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	da60      	bge.n	8011f0a <_strtod_l+0x892>
 8011e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8011e4e:	f040 8082 	bne.w	8011f56 <_strtod_l+0x8de>
 8011e52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d17d      	bne.n	8011f56 <_strtod_l+0x8de>
 8011e5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e5e:	0d1b      	lsrs	r3, r3, #20
 8011e60:	051b      	lsls	r3, r3, #20
 8011e62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e66:	d976      	bls.n	8011f56 <_strtod_l+0x8de>
 8011e68:	696b      	ldr	r3, [r5, #20]
 8011e6a:	b913      	cbnz	r3, 8011e72 <_strtod_l+0x7fa>
 8011e6c:	692b      	ldr	r3, [r5, #16]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	dd71      	ble.n	8011f56 <_strtod_l+0x8de>
 8011e72:	4629      	mov	r1, r5
 8011e74:	2201      	movs	r2, #1
 8011e76:	4620      	mov	r0, r4
 8011e78:	f001 ff36 	bl	8013ce8 <__lshift>
 8011e7c:	4631      	mov	r1, r6
 8011e7e:	4605      	mov	r5, r0
 8011e80:	f001 ffa2 	bl	8013dc8 <__mcmp>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	dd66      	ble.n	8011f56 <_strtod_l+0x8de>
 8011e88:	9904      	ldr	r1, [sp, #16]
 8011e8a:	4a53      	ldr	r2, [pc, #332]	; (8011fd8 <_strtod_l+0x960>)
 8011e8c:	465b      	mov	r3, fp
 8011e8e:	2900      	cmp	r1, #0
 8011e90:	f000 8081 	beq.w	8011f96 <_strtod_l+0x91e>
 8011e94:	ea02 010b 	and.w	r1, r2, fp
 8011e98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e9c:	dc7b      	bgt.n	8011f96 <_strtod_l+0x91e>
 8011e9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011ea2:	f77f aea9 	ble.w	8011bf8 <_strtod_l+0x580>
 8011ea6:	4b4d      	ldr	r3, [pc, #308]	; (8011fdc <_strtod_l+0x964>)
 8011ea8:	4650      	mov	r0, sl
 8011eaa:	4659      	mov	r1, fp
 8011eac:	2200      	movs	r2, #0
 8011eae:	f7ee fbc3 	bl	8000638 <__aeabi_dmul>
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4303      	orrs	r3, r0
 8011eb6:	bf08      	it	eq
 8011eb8:	2322      	moveq	r3, #34	; 0x22
 8011eba:	4682      	mov	sl, r0
 8011ebc:	468b      	mov	fp, r1
 8011ebe:	bf08      	it	eq
 8011ec0:	6023      	streq	r3, [r4, #0]
 8011ec2:	e62b      	b.n	8011b1c <_strtod_l+0x4a4>
 8011ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8011ecc:	ea03 0a0a 	and.w	sl, r3, sl
 8011ed0:	e6e3      	b.n	8011c9a <_strtod_l+0x622>
 8011ed2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011ed6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011eda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011ede:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011ee2:	fa01 f308 	lsl.w	r3, r1, r8
 8011ee6:	9308      	str	r3, [sp, #32]
 8011ee8:	910d      	str	r1, [sp, #52]	; 0x34
 8011eea:	e746      	b.n	8011d7a <_strtod_l+0x702>
 8011eec:	2300      	movs	r3, #0
 8011eee:	9308      	str	r3, [sp, #32]
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8011ef4:	e741      	b.n	8011d7a <_strtod_l+0x702>
 8011ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011ef8:	4642      	mov	r2, r8
 8011efa:	4620      	mov	r0, r4
 8011efc:	f001 fef4 	bl	8013ce8 <__lshift>
 8011f00:	9018      	str	r0, [sp, #96]	; 0x60
 8011f02:	2800      	cmp	r0, #0
 8011f04:	f47f af6b 	bne.w	8011dde <_strtod_l+0x766>
 8011f08:	e5fe      	b.n	8011b08 <_strtod_l+0x490>
 8011f0a:	465f      	mov	r7, fp
 8011f0c:	d16e      	bne.n	8011fec <_strtod_l+0x974>
 8011f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f14:	b342      	cbz	r2, 8011f68 <_strtod_l+0x8f0>
 8011f16:	4a32      	ldr	r2, [pc, #200]	; (8011fe0 <_strtod_l+0x968>)
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d128      	bne.n	8011f6e <_strtod_l+0x8f6>
 8011f1c:	9b04      	ldr	r3, [sp, #16]
 8011f1e:	4651      	mov	r1, sl
 8011f20:	b1eb      	cbz	r3, 8011f5e <_strtod_l+0x8e6>
 8011f22:	4b2d      	ldr	r3, [pc, #180]	; (8011fd8 <_strtod_l+0x960>)
 8011f24:	403b      	ands	r3, r7
 8011f26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2e:	d819      	bhi.n	8011f64 <_strtod_l+0x8ec>
 8011f30:	0d1b      	lsrs	r3, r3, #20
 8011f32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f36:	fa02 f303 	lsl.w	r3, r2, r3
 8011f3a:	4299      	cmp	r1, r3
 8011f3c:	d117      	bne.n	8011f6e <_strtod_l+0x8f6>
 8011f3e:	4b29      	ldr	r3, [pc, #164]	; (8011fe4 <_strtod_l+0x96c>)
 8011f40:	429f      	cmp	r7, r3
 8011f42:	d102      	bne.n	8011f4a <_strtod_l+0x8d2>
 8011f44:	3101      	adds	r1, #1
 8011f46:	f43f addf 	beq.w	8011b08 <_strtod_l+0x490>
 8011f4a:	4b23      	ldr	r3, [pc, #140]	; (8011fd8 <_strtod_l+0x960>)
 8011f4c:	403b      	ands	r3, r7
 8011f4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f52:	f04f 0a00 	mov.w	sl, #0
 8011f56:	9b04      	ldr	r3, [sp, #16]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1a4      	bne.n	8011ea6 <_strtod_l+0x82e>
 8011f5c:	e5de      	b.n	8011b1c <_strtod_l+0x4a4>
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	e7ea      	b.n	8011f3a <_strtod_l+0x8c2>
 8011f64:	4613      	mov	r3, r2
 8011f66:	e7e8      	b.n	8011f3a <_strtod_l+0x8c2>
 8011f68:	ea53 030a 	orrs.w	r3, r3, sl
 8011f6c:	d08c      	beq.n	8011e88 <_strtod_l+0x810>
 8011f6e:	9b08      	ldr	r3, [sp, #32]
 8011f70:	b1db      	cbz	r3, 8011faa <_strtod_l+0x932>
 8011f72:	423b      	tst	r3, r7
 8011f74:	d0ef      	beq.n	8011f56 <_strtod_l+0x8de>
 8011f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f78:	9a04      	ldr	r2, [sp, #16]
 8011f7a:	4650      	mov	r0, sl
 8011f7c:	4659      	mov	r1, fp
 8011f7e:	b1c3      	cbz	r3, 8011fb2 <_strtod_l+0x93a>
 8011f80:	f7ff fb5b 	bl	801163a <sulp>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	ec51 0b18 	vmov	r0, r1, d8
 8011f8c:	f7ee f99e 	bl	80002cc <__adddf3>
 8011f90:	4682      	mov	sl, r0
 8011f92:	468b      	mov	fp, r1
 8011f94:	e7df      	b.n	8011f56 <_strtod_l+0x8de>
 8011f96:	4013      	ands	r3, r2
 8011f98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011fa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8011fa8:	e7d5      	b.n	8011f56 <_strtod_l+0x8de>
 8011faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fac:	ea13 0f0a 	tst.w	r3, sl
 8011fb0:	e7e0      	b.n	8011f74 <_strtod_l+0x8fc>
 8011fb2:	f7ff fb42 	bl	801163a <sulp>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	460b      	mov	r3, r1
 8011fba:	ec51 0b18 	vmov	r0, r1, d8
 8011fbe:	f7ee f983 	bl	80002c8 <__aeabi_dsub>
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4682      	mov	sl, r0
 8011fc8:	468b      	mov	fp, r1
 8011fca:	f7ee fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d0c1      	beq.n	8011f56 <_strtod_l+0x8de>
 8011fd2:	e611      	b.n	8011bf8 <_strtod_l+0x580>
 8011fd4:	fffffc02 	.word	0xfffffc02
 8011fd8:	7ff00000 	.word	0x7ff00000
 8011fdc:	39500000 	.word	0x39500000
 8011fe0:	000fffff 	.word	0x000fffff
 8011fe4:	7fefffff 	.word	0x7fefffff
 8011fe8:	08017ec8 	.word	0x08017ec8
 8011fec:	4631      	mov	r1, r6
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f002 f868 	bl	80140c4 <__ratio>
 8011ff4:	ec59 8b10 	vmov	r8, r9, d0
 8011ff8:	ee10 0a10 	vmov	r0, s0
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012002:	4649      	mov	r1, r9
 8012004:	f7ee fd94 	bl	8000b30 <__aeabi_dcmple>
 8012008:	2800      	cmp	r0, #0
 801200a:	d07a      	beq.n	8012102 <_strtod_l+0xa8a>
 801200c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801200e:	2b00      	cmp	r3, #0
 8012010:	d04a      	beq.n	80120a8 <_strtod_l+0xa30>
 8012012:	4b95      	ldr	r3, [pc, #596]	; (8012268 <_strtod_l+0xbf0>)
 8012014:	2200      	movs	r2, #0
 8012016:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801201a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012268 <_strtod_l+0xbf0>
 801201e:	f04f 0800 	mov.w	r8, #0
 8012022:	4b92      	ldr	r3, [pc, #584]	; (801226c <_strtod_l+0xbf4>)
 8012024:	403b      	ands	r3, r7
 8012026:	930d      	str	r3, [sp, #52]	; 0x34
 8012028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801202a:	4b91      	ldr	r3, [pc, #580]	; (8012270 <_strtod_l+0xbf8>)
 801202c:	429a      	cmp	r2, r3
 801202e:	f040 80b0 	bne.w	8012192 <_strtod_l+0xb1a>
 8012032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012036:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801203a:	ec4b ab10 	vmov	d0, sl, fp
 801203e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012042:	f001 ff67 	bl	8013f14 <__ulp>
 8012046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801204a:	ec53 2b10 	vmov	r2, r3, d0
 801204e:	f7ee faf3 	bl	8000638 <__aeabi_dmul>
 8012052:	4652      	mov	r2, sl
 8012054:	465b      	mov	r3, fp
 8012056:	f7ee f939 	bl	80002cc <__adddf3>
 801205a:	460b      	mov	r3, r1
 801205c:	4983      	ldr	r1, [pc, #524]	; (801226c <_strtod_l+0xbf4>)
 801205e:	4a85      	ldr	r2, [pc, #532]	; (8012274 <_strtod_l+0xbfc>)
 8012060:	4019      	ands	r1, r3
 8012062:	4291      	cmp	r1, r2
 8012064:	4682      	mov	sl, r0
 8012066:	d960      	bls.n	801212a <_strtod_l+0xab2>
 8012068:	ee18 3a90 	vmov	r3, s17
 801206c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012070:	4293      	cmp	r3, r2
 8012072:	d104      	bne.n	801207e <_strtod_l+0xa06>
 8012074:	ee18 3a10 	vmov	r3, s16
 8012078:	3301      	adds	r3, #1
 801207a:	f43f ad45 	beq.w	8011b08 <_strtod_l+0x490>
 801207e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012280 <_strtod_l+0xc08>
 8012082:	f04f 3aff 	mov.w	sl, #4294967295
 8012086:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012088:	4620      	mov	r0, r4
 801208a:	f001 fc11 	bl	80138b0 <_Bfree>
 801208e:	9905      	ldr	r1, [sp, #20]
 8012090:	4620      	mov	r0, r4
 8012092:	f001 fc0d 	bl	80138b0 <_Bfree>
 8012096:	4631      	mov	r1, r6
 8012098:	4620      	mov	r0, r4
 801209a:	f001 fc09 	bl	80138b0 <_Bfree>
 801209e:	4629      	mov	r1, r5
 80120a0:	4620      	mov	r0, r4
 80120a2:	f001 fc05 	bl	80138b0 <_Bfree>
 80120a6:	e61a      	b.n	8011cde <_strtod_l+0x666>
 80120a8:	f1ba 0f00 	cmp.w	sl, #0
 80120ac:	d11b      	bne.n	80120e6 <_strtod_l+0xa6e>
 80120ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120b2:	b9f3      	cbnz	r3, 80120f2 <_strtod_l+0xa7a>
 80120b4:	4b6c      	ldr	r3, [pc, #432]	; (8012268 <_strtod_l+0xbf0>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	4640      	mov	r0, r8
 80120ba:	4649      	mov	r1, r9
 80120bc:	f7ee fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80120c0:	b9d0      	cbnz	r0, 80120f8 <_strtod_l+0xa80>
 80120c2:	4640      	mov	r0, r8
 80120c4:	4649      	mov	r1, r9
 80120c6:	4b6c      	ldr	r3, [pc, #432]	; (8012278 <_strtod_l+0xc00>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	f7ee fab5 	bl	8000638 <__aeabi_dmul>
 80120ce:	4680      	mov	r8, r0
 80120d0:	4689      	mov	r9, r1
 80120d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80120da:	9315      	str	r3, [sp, #84]	; 0x54
 80120dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80120e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120e4:	e79d      	b.n	8012022 <_strtod_l+0x9aa>
 80120e6:	f1ba 0f01 	cmp.w	sl, #1
 80120ea:	d102      	bne.n	80120f2 <_strtod_l+0xa7a>
 80120ec:	2f00      	cmp	r7, #0
 80120ee:	f43f ad83 	beq.w	8011bf8 <_strtod_l+0x580>
 80120f2:	4b62      	ldr	r3, [pc, #392]	; (801227c <_strtod_l+0xc04>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	e78e      	b.n	8012016 <_strtod_l+0x99e>
 80120f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012278 <_strtod_l+0xc00>
 80120fc:	f04f 0800 	mov.w	r8, #0
 8012100:	e7e7      	b.n	80120d2 <_strtod_l+0xa5a>
 8012102:	4b5d      	ldr	r3, [pc, #372]	; (8012278 <_strtod_l+0xc00>)
 8012104:	4640      	mov	r0, r8
 8012106:	4649      	mov	r1, r9
 8012108:	2200      	movs	r2, #0
 801210a:	f7ee fa95 	bl	8000638 <__aeabi_dmul>
 801210e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012110:	4680      	mov	r8, r0
 8012112:	4689      	mov	r9, r1
 8012114:	b933      	cbnz	r3, 8012124 <_strtod_l+0xaac>
 8012116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801211a:	900e      	str	r0, [sp, #56]	; 0x38
 801211c:	930f      	str	r3, [sp, #60]	; 0x3c
 801211e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012122:	e7dd      	b.n	80120e0 <_strtod_l+0xa68>
 8012124:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012128:	e7f9      	b.n	801211e <_strtod_l+0xaa6>
 801212a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801212e:	9b04      	ldr	r3, [sp, #16]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1a8      	bne.n	8012086 <_strtod_l+0xa0e>
 8012134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801213a:	0d1b      	lsrs	r3, r3, #20
 801213c:	051b      	lsls	r3, r3, #20
 801213e:	429a      	cmp	r2, r3
 8012140:	d1a1      	bne.n	8012086 <_strtod_l+0xa0e>
 8012142:	4640      	mov	r0, r8
 8012144:	4649      	mov	r1, r9
 8012146:	f7ee ff35 	bl	8000fb4 <__aeabi_d2lz>
 801214a:	f7ee fa47 	bl	80005dc <__aeabi_l2d>
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	4640      	mov	r0, r8
 8012154:	4649      	mov	r1, r9
 8012156:	f7ee f8b7 	bl	80002c8 <__aeabi_dsub>
 801215a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801215c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012160:	ea43 030a 	orr.w	r3, r3, sl
 8012164:	4313      	orrs	r3, r2
 8012166:	4680      	mov	r8, r0
 8012168:	4689      	mov	r9, r1
 801216a:	d055      	beq.n	8012218 <_strtod_l+0xba0>
 801216c:	a336      	add	r3, pc, #216	; (adr r3, 8012248 <_strtod_l+0xbd0>)
 801216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012172:	f7ee fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8012176:	2800      	cmp	r0, #0
 8012178:	f47f acd0 	bne.w	8011b1c <_strtod_l+0x4a4>
 801217c:	a334      	add	r3, pc, #208	; (adr r3, 8012250 <_strtod_l+0xbd8>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	4640      	mov	r0, r8
 8012184:	4649      	mov	r1, r9
 8012186:	f7ee fce7 	bl	8000b58 <__aeabi_dcmpgt>
 801218a:	2800      	cmp	r0, #0
 801218c:	f43f af7b 	beq.w	8012086 <_strtod_l+0xa0e>
 8012190:	e4c4      	b.n	8011b1c <_strtod_l+0x4a4>
 8012192:	9b04      	ldr	r3, [sp, #16]
 8012194:	b333      	cbz	r3, 80121e4 <_strtod_l+0xb6c>
 8012196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012198:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801219c:	d822      	bhi.n	80121e4 <_strtod_l+0xb6c>
 801219e:	a32e      	add	r3, pc, #184	; (adr r3, 8012258 <_strtod_l+0xbe0>)
 80121a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a4:	4640      	mov	r0, r8
 80121a6:	4649      	mov	r1, r9
 80121a8:	f7ee fcc2 	bl	8000b30 <__aeabi_dcmple>
 80121ac:	b1a0      	cbz	r0, 80121d8 <_strtod_l+0xb60>
 80121ae:	4649      	mov	r1, r9
 80121b0:	4640      	mov	r0, r8
 80121b2:	f7ee fd19 	bl	8000be8 <__aeabi_d2uiz>
 80121b6:	2801      	cmp	r0, #1
 80121b8:	bf38      	it	cc
 80121ba:	2001      	movcc	r0, #1
 80121bc:	f7ee f9c2 	bl	8000544 <__aeabi_ui2d>
 80121c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121c2:	4680      	mov	r8, r0
 80121c4:	4689      	mov	r9, r1
 80121c6:	bb23      	cbnz	r3, 8012212 <_strtod_l+0xb9a>
 80121c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121cc:	9010      	str	r0, [sp, #64]	; 0x40
 80121ce:	9311      	str	r3, [sp, #68]	; 0x44
 80121d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80121d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80121d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	9309      	str	r3, [sp, #36]	; 0x24
 80121e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80121e8:	eeb0 0a48 	vmov.f32	s0, s16
 80121ec:	eef0 0a68 	vmov.f32	s1, s17
 80121f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121f4:	f001 fe8e 	bl	8013f14 <__ulp>
 80121f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80121fc:	ec53 2b10 	vmov	r2, r3, d0
 8012200:	f7ee fa1a 	bl	8000638 <__aeabi_dmul>
 8012204:	ec53 2b18 	vmov	r2, r3, d8
 8012208:	f7ee f860 	bl	80002cc <__adddf3>
 801220c:	4682      	mov	sl, r0
 801220e:	468b      	mov	fp, r1
 8012210:	e78d      	b.n	801212e <_strtod_l+0xab6>
 8012212:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8012216:	e7db      	b.n	80121d0 <_strtod_l+0xb58>
 8012218:	a311      	add	r3, pc, #68	; (adr r3, 8012260 <_strtod_l+0xbe8>)
 801221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221e:	f7ee fc7d 	bl	8000b1c <__aeabi_dcmplt>
 8012222:	e7b2      	b.n	801218a <_strtod_l+0xb12>
 8012224:	2300      	movs	r3, #0
 8012226:	930a      	str	r3, [sp, #40]	; 0x28
 8012228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801222a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801222c:	6013      	str	r3, [r2, #0]
 801222e:	f7ff ba6b 	b.w	8011708 <_strtod_l+0x90>
 8012232:	2a65      	cmp	r2, #101	; 0x65
 8012234:	f43f ab5f 	beq.w	80118f6 <_strtod_l+0x27e>
 8012238:	2a45      	cmp	r2, #69	; 0x45
 801223a:	f43f ab5c 	beq.w	80118f6 <_strtod_l+0x27e>
 801223e:	2301      	movs	r3, #1
 8012240:	f7ff bb94 	b.w	801196c <_strtod_l+0x2f4>
 8012244:	f3af 8000 	nop.w
 8012248:	94a03595 	.word	0x94a03595
 801224c:	3fdfffff 	.word	0x3fdfffff
 8012250:	35afe535 	.word	0x35afe535
 8012254:	3fe00000 	.word	0x3fe00000
 8012258:	ffc00000 	.word	0xffc00000
 801225c:	41dfffff 	.word	0x41dfffff
 8012260:	94a03595 	.word	0x94a03595
 8012264:	3fcfffff 	.word	0x3fcfffff
 8012268:	3ff00000 	.word	0x3ff00000
 801226c:	7ff00000 	.word	0x7ff00000
 8012270:	7fe00000 	.word	0x7fe00000
 8012274:	7c9fffff 	.word	0x7c9fffff
 8012278:	3fe00000 	.word	0x3fe00000
 801227c:	bff00000 	.word	0xbff00000
 8012280:	7fefffff 	.word	0x7fefffff

08012284 <_strtod_r>:
 8012284:	4b01      	ldr	r3, [pc, #4]	; (801228c <_strtod_r+0x8>)
 8012286:	f7ff b9f7 	b.w	8011678 <_strtod_l>
 801228a:	bf00      	nop
 801228c:	20000094 	.word	0x20000094

08012290 <_strtol_l.constprop.0>:
 8012290:	2b01      	cmp	r3, #1
 8012292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012296:	d001      	beq.n	801229c <_strtol_l.constprop.0+0xc>
 8012298:	2b24      	cmp	r3, #36	; 0x24
 801229a:	d906      	bls.n	80122aa <_strtol_l.constprop.0+0x1a>
 801229c:	f7fe fa6c 	bl	8010778 <__errno>
 80122a0:	2316      	movs	r3, #22
 80122a2:	6003      	str	r3, [r0, #0]
 80122a4:	2000      	movs	r0, #0
 80122a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012390 <_strtol_l.constprop.0+0x100>
 80122ae:	460d      	mov	r5, r1
 80122b0:	462e      	mov	r6, r5
 80122b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80122ba:	f017 0708 	ands.w	r7, r7, #8
 80122be:	d1f7      	bne.n	80122b0 <_strtol_l.constprop.0+0x20>
 80122c0:	2c2d      	cmp	r4, #45	; 0x2d
 80122c2:	d132      	bne.n	801232a <_strtol_l.constprop.0+0x9a>
 80122c4:	782c      	ldrb	r4, [r5, #0]
 80122c6:	2701      	movs	r7, #1
 80122c8:	1cb5      	adds	r5, r6, #2
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d05b      	beq.n	8012386 <_strtol_l.constprop.0+0xf6>
 80122ce:	2b10      	cmp	r3, #16
 80122d0:	d109      	bne.n	80122e6 <_strtol_l.constprop.0+0x56>
 80122d2:	2c30      	cmp	r4, #48	; 0x30
 80122d4:	d107      	bne.n	80122e6 <_strtol_l.constprop.0+0x56>
 80122d6:	782c      	ldrb	r4, [r5, #0]
 80122d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80122dc:	2c58      	cmp	r4, #88	; 0x58
 80122de:	d14d      	bne.n	801237c <_strtol_l.constprop.0+0xec>
 80122e0:	786c      	ldrb	r4, [r5, #1]
 80122e2:	2310      	movs	r3, #16
 80122e4:	3502      	adds	r5, #2
 80122e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80122ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80122ee:	f04f 0c00 	mov.w	ip, #0
 80122f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80122f6:	4666      	mov	r6, ip
 80122f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80122fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012300:	f1be 0f09 	cmp.w	lr, #9
 8012304:	d816      	bhi.n	8012334 <_strtol_l.constprop.0+0xa4>
 8012306:	4674      	mov	r4, lr
 8012308:	42a3      	cmp	r3, r4
 801230a:	dd24      	ble.n	8012356 <_strtol_l.constprop.0+0xc6>
 801230c:	f1bc 0f00 	cmp.w	ip, #0
 8012310:	db1e      	blt.n	8012350 <_strtol_l.constprop.0+0xc0>
 8012312:	45b1      	cmp	r9, r6
 8012314:	d31c      	bcc.n	8012350 <_strtol_l.constprop.0+0xc0>
 8012316:	d101      	bne.n	801231c <_strtol_l.constprop.0+0x8c>
 8012318:	45a2      	cmp	sl, r4
 801231a:	db19      	blt.n	8012350 <_strtol_l.constprop.0+0xc0>
 801231c:	fb06 4603 	mla	r6, r6, r3, r4
 8012320:	f04f 0c01 	mov.w	ip, #1
 8012324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012328:	e7e8      	b.n	80122fc <_strtol_l.constprop.0+0x6c>
 801232a:	2c2b      	cmp	r4, #43	; 0x2b
 801232c:	bf04      	itt	eq
 801232e:	782c      	ldrbeq	r4, [r5, #0]
 8012330:	1cb5      	addeq	r5, r6, #2
 8012332:	e7ca      	b.n	80122ca <_strtol_l.constprop.0+0x3a>
 8012334:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012338:	f1be 0f19 	cmp.w	lr, #25
 801233c:	d801      	bhi.n	8012342 <_strtol_l.constprop.0+0xb2>
 801233e:	3c37      	subs	r4, #55	; 0x37
 8012340:	e7e2      	b.n	8012308 <_strtol_l.constprop.0+0x78>
 8012342:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012346:	f1be 0f19 	cmp.w	lr, #25
 801234a:	d804      	bhi.n	8012356 <_strtol_l.constprop.0+0xc6>
 801234c:	3c57      	subs	r4, #87	; 0x57
 801234e:	e7db      	b.n	8012308 <_strtol_l.constprop.0+0x78>
 8012350:	f04f 3cff 	mov.w	ip, #4294967295
 8012354:	e7e6      	b.n	8012324 <_strtol_l.constprop.0+0x94>
 8012356:	f1bc 0f00 	cmp.w	ip, #0
 801235a:	da05      	bge.n	8012368 <_strtol_l.constprop.0+0xd8>
 801235c:	2322      	movs	r3, #34	; 0x22
 801235e:	6003      	str	r3, [r0, #0]
 8012360:	4646      	mov	r6, r8
 8012362:	b942      	cbnz	r2, 8012376 <_strtol_l.constprop.0+0xe6>
 8012364:	4630      	mov	r0, r6
 8012366:	e79e      	b.n	80122a6 <_strtol_l.constprop.0+0x16>
 8012368:	b107      	cbz	r7, 801236c <_strtol_l.constprop.0+0xdc>
 801236a:	4276      	negs	r6, r6
 801236c:	2a00      	cmp	r2, #0
 801236e:	d0f9      	beq.n	8012364 <_strtol_l.constprop.0+0xd4>
 8012370:	f1bc 0f00 	cmp.w	ip, #0
 8012374:	d000      	beq.n	8012378 <_strtol_l.constprop.0+0xe8>
 8012376:	1e69      	subs	r1, r5, #1
 8012378:	6011      	str	r1, [r2, #0]
 801237a:	e7f3      	b.n	8012364 <_strtol_l.constprop.0+0xd4>
 801237c:	2430      	movs	r4, #48	; 0x30
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1b1      	bne.n	80122e6 <_strtol_l.constprop.0+0x56>
 8012382:	2308      	movs	r3, #8
 8012384:	e7af      	b.n	80122e6 <_strtol_l.constprop.0+0x56>
 8012386:	2c30      	cmp	r4, #48	; 0x30
 8012388:	d0a5      	beq.n	80122d6 <_strtol_l.constprop.0+0x46>
 801238a:	230a      	movs	r3, #10
 801238c:	e7ab      	b.n	80122e6 <_strtol_l.constprop.0+0x56>
 801238e:	bf00      	nop
 8012390:	08017ef1 	.word	0x08017ef1

08012394 <_strtol_r>:
 8012394:	f7ff bf7c 	b.w	8012290 <_strtol_l.constprop.0>

08012398 <_write_r>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	4d07      	ldr	r5, [pc, #28]	; (80123b8 <_write_r+0x20>)
 801239c:	4604      	mov	r4, r0
 801239e:	4608      	mov	r0, r1
 80123a0:	4611      	mov	r1, r2
 80123a2:	2200      	movs	r2, #0
 80123a4:	602a      	str	r2, [r5, #0]
 80123a6:	461a      	mov	r2, r3
 80123a8:	f7f4 f999 	bl	80066de <_write>
 80123ac:	1c43      	adds	r3, r0, #1
 80123ae:	d102      	bne.n	80123b6 <_write_r+0x1e>
 80123b0:	682b      	ldr	r3, [r5, #0]
 80123b2:	b103      	cbz	r3, 80123b6 <_write_r+0x1e>
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	bd38      	pop	{r3, r4, r5, pc}
 80123b8:	20004954 	.word	0x20004954

080123bc <_close_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	4d06      	ldr	r5, [pc, #24]	; (80123d8 <_close_r+0x1c>)
 80123c0:	2300      	movs	r3, #0
 80123c2:	4604      	mov	r4, r0
 80123c4:	4608      	mov	r0, r1
 80123c6:	602b      	str	r3, [r5, #0]
 80123c8:	f7f4 f9a5 	bl	8006716 <_close>
 80123cc:	1c43      	adds	r3, r0, #1
 80123ce:	d102      	bne.n	80123d6 <_close_r+0x1a>
 80123d0:	682b      	ldr	r3, [r5, #0]
 80123d2:	b103      	cbz	r3, 80123d6 <_close_r+0x1a>
 80123d4:	6023      	str	r3, [r4, #0]
 80123d6:	bd38      	pop	{r3, r4, r5, pc}
 80123d8:	20004954 	.word	0x20004954

080123dc <quorem>:
 80123dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e0:	6903      	ldr	r3, [r0, #16]
 80123e2:	690c      	ldr	r4, [r1, #16]
 80123e4:	42a3      	cmp	r3, r4
 80123e6:	4607      	mov	r7, r0
 80123e8:	f2c0 8081 	blt.w	80124ee <quorem+0x112>
 80123ec:	3c01      	subs	r4, #1
 80123ee:	f101 0814 	add.w	r8, r1, #20
 80123f2:	f100 0514 	add.w	r5, r0, #20
 80123f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012404:	3301      	adds	r3, #1
 8012406:	429a      	cmp	r2, r3
 8012408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801240c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012410:	fbb2 f6f3 	udiv	r6, r2, r3
 8012414:	d331      	bcc.n	801247a <quorem+0x9e>
 8012416:	f04f 0e00 	mov.w	lr, #0
 801241a:	4640      	mov	r0, r8
 801241c:	46ac      	mov	ip, r5
 801241e:	46f2      	mov	sl, lr
 8012420:	f850 2b04 	ldr.w	r2, [r0], #4
 8012424:	b293      	uxth	r3, r2
 8012426:	fb06 e303 	mla	r3, r6, r3, lr
 801242a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801242e:	b29b      	uxth	r3, r3
 8012430:	ebaa 0303 	sub.w	r3, sl, r3
 8012434:	f8dc a000 	ldr.w	sl, [ip]
 8012438:	0c12      	lsrs	r2, r2, #16
 801243a:	fa13 f38a 	uxtah	r3, r3, sl
 801243e:	fb06 e202 	mla	r2, r6, r2, lr
 8012442:	9300      	str	r3, [sp, #0]
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801244a:	b292      	uxth	r2, r2
 801244c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012454:	f8bd 3000 	ldrh.w	r3, [sp]
 8012458:	4581      	cmp	r9, r0
 801245a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801245e:	f84c 3b04 	str.w	r3, [ip], #4
 8012462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012466:	d2db      	bcs.n	8012420 <quorem+0x44>
 8012468:	f855 300b 	ldr.w	r3, [r5, fp]
 801246c:	b92b      	cbnz	r3, 801247a <quorem+0x9e>
 801246e:	9b01      	ldr	r3, [sp, #4]
 8012470:	3b04      	subs	r3, #4
 8012472:	429d      	cmp	r5, r3
 8012474:	461a      	mov	r2, r3
 8012476:	d32e      	bcc.n	80124d6 <quorem+0xfa>
 8012478:	613c      	str	r4, [r7, #16]
 801247a:	4638      	mov	r0, r7
 801247c:	f001 fca4 	bl	8013dc8 <__mcmp>
 8012480:	2800      	cmp	r0, #0
 8012482:	db24      	blt.n	80124ce <quorem+0xf2>
 8012484:	3601      	adds	r6, #1
 8012486:	4628      	mov	r0, r5
 8012488:	f04f 0c00 	mov.w	ip, #0
 801248c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012490:	f8d0 e000 	ldr.w	lr, [r0]
 8012494:	b293      	uxth	r3, r2
 8012496:	ebac 0303 	sub.w	r3, ip, r3
 801249a:	0c12      	lsrs	r2, r2, #16
 801249c:	fa13 f38e 	uxtah	r3, r3, lr
 80124a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124ae:	45c1      	cmp	r9, r8
 80124b0:	f840 3b04 	str.w	r3, [r0], #4
 80124b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80124b8:	d2e8      	bcs.n	801248c <quorem+0xb0>
 80124ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124c2:	b922      	cbnz	r2, 80124ce <quorem+0xf2>
 80124c4:	3b04      	subs	r3, #4
 80124c6:	429d      	cmp	r5, r3
 80124c8:	461a      	mov	r2, r3
 80124ca:	d30a      	bcc.n	80124e2 <quorem+0x106>
 80124cc:	613c      	str	r4, [r7, #16]
 80124ce:	4630      	mov	r0, r6
 80124d0:	b003      	add	sp, #12
 80124d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d6:	6812      	ldr	r2, [r2, #0]
 80124d8:	3b04      	subs	r3, #4
 80124da:	2a00      	cmp	r2, #0
 80124dc:	d1cc      	bne.n	8012478 <quorem+0x9c>
 80124de:	3c01      	subs	r4, #1
 80124e0:	e7c7      	b.n	8012472 <quorem+0x96>
 80124e2:	6812      	ldr	r2, [r2, #0]
 80124e4:	3b04      	subs	r3, #4
 80124e6:	2a00      	cmp	r2, #0
 80124e8:	d1f0      	bne.n	80124cc <quorem+0xf0>
 80124ea:	3c01      	subs	r4, #1
 80124ec:	e7eb      	b.n	80124c6 <quorem+0xea>
 80124ee:	2000      	movs	r0, #0
 80124f0:	e7ee      	b.n	80124d0 <quorem+0xf4>
 80124f2:	0000      	movs	r0, r0
 80124f4:	0000      	movs	r0, r0
	...

080124f8 <_dtoa_r>:
 80124f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fc:	ed2d 8b04 	vpush	{d8-d9}
 8012500:	ec57 6b10 	vmov	r6, r7, d0
 8012504:	b093      	sub	sp, #76	; 0x4c
 8012506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801250c:	9106      	str	r1, [sp, #24]
 801250e:	ee10 aa10 	vmov	sl, s0
 8012512:	4604      	mov	r4, r0
 8012514:	9209      	str	r2, [sp, #36]	; 0x24
 8012516:	930c      	str	r3, [sp, #48]	; 0x30
 8012518:	46bb      	mov	fp, r7
 801251a:	b975      	cbnz	r5, 801253a <_dtoa_r+0x42>
 801251c:	2010      	movs	r0, #16
 801251e:	f001 f95f 	bl	80137e0 <malloc>
 8012522:	4602      	mov	r2, r0
 8012524:	6260      	str	r0, [r4, #36]	; 0x24
 8012526:	b920      	cbnz	r0, 8012532 <_dtoa_r+0x3a>
 8012528:	4ba7      	ldr	r3, [pc, #668]	; (80127c8 <_dtoa_r+0x2d0>)
 801252a:	21ea      	movs	r1, #234	; 0xea
 801252c:	48a7      	ldr	r0, [pc, #668]	; (80127cc <_dtoa_r+0x2d4>)
 801252e:	f002 fceb 	bl	8014f08 <__assert_func>
 8012532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012536:	6005      	str	r5, [r0, #0]
 8012538:	60c5      	str	r5, [r0, #12]
 801253a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801253c:	6819      	ldr	r1, [r3, #0]
 801253e:	b151      	cbz	r1, 8012556 <_dtoa_r+0x5e>
 8012540:	685a      	ldr	r2, [r3, #4]
 8012542:	604a      	str	r2, [r1, #4]
 8012544:	2301      	movs	r3, #1
 8012546:	4093      	lsls	r3, r2
 8012548:	608b      	str	r3, [r1, #8]
 801254a:	4620      	mov	r0, r4
 801254c:	f001 f9b0 	bl	80138b0 <_Bfree>
 8012550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012552:	2200      	movs	r2, #0
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	1e3b      	subs	r3, r7, #0
 8012558:	bfaa      	itet	ge
 801255a:	2300      	movge	r3, #0
 801255c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012560:	f8c8 3000 	strge.w	r3, [r8]
 8012564:	4b9a      	ldr	r3, [pc, #616]	; (80127d0 <_dtoa_r+0x2d8>)
 8012566:	bfbc      	itt	lt
 8012568:	2201      	movlt	r2, #1
 801256a:	f8c8 2000 	strlt.w	r2, [r8]
 801256e:	ea33 030b 	bics.w	r3, r3, fp
 8012572:	d11b      	bne.n	80125ac <_dtoa_r+0xb4>
 8012574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012576:	f242 730f 	movw	r3, #9999	; 0x270f
 801257a:	6013      	str	r3, [r2, #0]
 801257c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012580:	4333      	orrs	r3, r6
 8012582:	f000 8592 	beq.w	80130aa <_dtoa_r+0xbb2>
 8012586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012588:	b963      	cbnz	r3, 80125a4 <_dtoa_r+0xac>
 801258a:	4b92      	ldr	r3, [pc, #584]	; (80127d4 <_dtoa_r+0x2dc>)
 801258c:	e022      	b.n	80125d4 <_dtoa_r+0xdc>
 801258e:	4b92      	ldr	r3, [pc, #584]	; (80127d8 <_dtoa_r+0x2e0>)
 8012590:	9301      	str	r3, [sp, #4]
 8012592:	3308      	adds	r3, #8
 8012594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012596:	6013      	str	r3, [r2, #0]
 8012598:	9801      	ldr	r0, [sp, #4]
 801259a:	b013      	add	sp, #76	; 0x4c
 801259c:	ecbd 8b04 	vpop	{d8-d9}
 80125a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a4:	4b8b      	ldr	r3, [pc, #556]	; (80127d4 <_dtoa_r+0x2dc>)
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	3303      	adds	r3, #3
 80125aa:	e7f3      	b.n	8012594 <_dtoa_r+0x9c>
 80125ac:	2200      	movs	r2, #0
 80125ae:	2300      	movs	r3, #0
 80125b0:	4650      	mov	r0, sl
 80125b2:	4659      	mov	r1, fp
 80125b4:	f7ee faa8 	bl	8000b08 <__aeabi_dcmpeq>
 80125b8:	ec4b ab19 	vmov	d9, sl, fp
 80125bc:	4680      	mov	r8, r0
 80125be:	b158      	cbz	r0, 80125d8 <_dtoa_r+0xe0>
 80125c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125c2:	2301      	movs	r3, #1
 80125c4:	6013      	str	r3, [r2, #0]
 80125c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 856b 	beq.w	80130a4 <_dtoa_r+0xbac>
 80125ce:	4883      	ldr	r0, [pc, #524]	; (80127dc <_dtoa_r+0x2e4>)
 80125d0:	6018      	str	r0, [r3, #0]
 80125d2:	1e43      	subs	r3, r0, #1
 80125d4:	9301      	str	r3, [sp, #4]
 80125d6:	e7df      	b.n	8012598 <_dtoa_r+0xa0>
 80125d8:	ec4b ab10 	vmov	d0, sl, fp
 80125dc:	aa10      	add	r2, sp, #64	; 0x40
 80125de:	a911      	add	r1, sp, #68	; 0x44
 80125e0:	4620      	mov	r0, r4
 80125e2:	f001 fd13 	bl	801400c <__d2b>
 80125e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80125ea:	ee08 0a10 	vmov	s16, r0
 80125ee:	2d00      	cmp	r5, #0
 80125f0:	f000 8084 	beq.w	80126fc <_dtoa_r+0x204>
 80125f4:	ee19 3a90 	vmov	r3, s19
 80125f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012600:	4656      	mov	r6, sl
 8012602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801260a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801260e:	4b74      	ldr	r3, [pc, #464]	; (80127e0 <_dtoa_r+0x2e8>)
 8012610:	2200      	movs	r2, #0
 8012612:	4630      	mov	r0, r6
 8012614:	4639      	mov	r1, r7
 8012616:	f7ed fe57 	bl	80002c8 <__aeabi_dsub>
 801261a:	a365      	add	r3, pc, #404	; (adr r3, 80127b0 <_dtoa_r+0x2b8>)
 801261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012620:	f7ee f80a 	bl	8000638 <__aeabi_dmul>
 8012624:	a364      	add	r3, pc, #400	; (adr r3, 80127b8 <_dtoa_r+0x2c0>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ed fe4f 	bl	80002cc <__adddf3>
 801262e:	4606      	mov	r6, r0
 8012630:	4628      	mov	r0, r5
 8012632:	460f      	mov	r7, r1
 8012634:	f7ed ff96 	bl	8000564 <__aeabi_i2d>
 8012638:	a361      	add	r3, pc, #388	; (adr r3, 80127c0 <_dtoa_r+0x2c8>)
 801263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263e:	f7ed fffb 	bl	8000638 <__aeabi_dmul>
 8012642:	4602      	mov	r2, r0
 8012644:	460b      	mov	r3, r1
 8012646:	4630      	mov	r0, r6
 8012648:	4639      	mov	r1, r7
 801264a:	f7ed fe3f 	bl	80002cc <__adddf3>
 801264e:	4606      	mov	r6, r0
 8012650:	460f      	mov	r7, r1
 8012652:	f7ee faa1 	bl	8000b98 <__aeabi_d2iz>
 8012656:	2200      	movs	r2, #0
 8012658:	9000      	str	r0, [sp, #0]
 801265a:	2300      	movs	r3, #0
 801265c:	4630      	mov	r0, r6
 801265e:	4639      	mov	r1, r7
 8012660:	f7ee fa5c 	bl	8000b1c <__aeabi_dcmplt>
 8012664:	b150      	cbz	r0, 801267c <_dtoa_r+0x184>
 8012666:	9800      	ldr	r0, [sp, #0]
 8012668:	f7ed ff7c 	bl	8000564 <__aeabi_i2d>
 801266c:	4632      	mov	r2, r6
 801266e:	463b      	mov	r3, r7
 8012670:	f7ee fa4a 	bl	8000b08 <__aeabi_dcmpeq>
 8012674:	b910      	cbnz	r0, 801267c <_dtoa_r+0x184>
 8012676:	9b00      	ldr	r3, [sp, #0]
 8012678:	3b01      	subs	r3, #1
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	9b00      	ldr	r3, [sp, #0]
 801267e:	2b16      	cmp	r3, #22
 8012680:	d85a      	bhi.n	8012738 <_dtoa_r+0x240>
 8012682:	9a00      	ldr	r2, [sp, #0]
 8012684:	4b57      	ldr	r3, [pc, #348]	; (80127e4 <_dtoa_r+0x2ec>)
 8012686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268e:	ec51 0b19 	vmov	r0, r1, d9
 8012692:	f7ee fa43 	bl	8000b1c <__aeabi_dcmplt>
 8012696:	2800      	cmp	r0, #0
 8012698:	d050      	beq.n	801273c <_dtoa_r+0x244>
 801269a:	9b00      	ldr	r3, [sp, #0]
 801269c:	3b01      	subs	r3, #1
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	2300      	movs	r3, #0
 80126a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80126a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126a6:	1b5d      	subs	r5, r3, r5
 80126a8:	1e6b      	subs	r3, r5, #1
 80126aa:	9305      	str	r3, [sp, #20]
 80126ac:	bf45      	ittet	mi
 80126ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80126b2:	9304      	strmi	r3, [sp, #16]
 80126b4:	2300      	movpl	r3, #0
 80126b6:	2300      	movmi	r3, #0
 80126b8:	bf4c      	ite	mi
 80126ba:	9305      	strmi	r3, [sp, #20]
 80126bc:	9304      	strpl	r3, [sp, #16]
 80126be:	9b00      	ldr	r3, [sp, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	db3d      	blt.n	8012740 <_dtoa_r+0x248>
 80126c4:	9b05      	ldr	r3, [sp, #20]
 80126c6:	9a00      	ldr	r2, [sp, #0]
 80126c8:	920a      	str	r2, [sp, #40]	; 0x28
 80126ca:	4413      	add	r3, r2
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	2300      	movs	r3, #0
 80126d0:	9307      	str	r3, [sp, #28]
 80126d2:	9b06      	ldr	r3, [sp, #24]
 80126d4:	2b09      	cmp	r3, #9
 80126d6:	f200 8089 	bhi.w	80127ec <_dtoa_r+0x2f4>
 80126da:	2b05      	cmp	r3, #5
 80126dc:	bfc4      	itt	gt
 80126de:	3b04      	subgt	r3, #4
 80126e0:	9306      	strgt	r3, [sp, #24]
 80126e2:	9b06      	ldr	r3, [sp, #24]
 80126e4:	f1a3 0302 	sub.w	r3, r3, #2
 80126e8:	bfcc      	ite	gt
 80126ea:	2500      	movgt	r5, #0
 80126ec:	2501      	movle	r5, #1
 80126ee:	2b03      	cmp	r3, #3
 80126f0:	f200 8087 	bhi.w	8012802 <_dtoa_r+0x30a>
 80126f4:	e8df f003 	tbb	[pc, r3]
 80126f8:	59383a2d 	.word	0x59383a2d
 80126fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012700:	441d      	add	r5, r3
 8012702:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012706:	2b20      	cmp	r3, #32
 8012708:	bfc1      	itttt	gt
 801270a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801270e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012712:	fa0b f303 	lslgt.w	r3, fp, r3
 8012716:	fa26 f000 	lsrgt.w	r0, r6, r0
 801271a:	bfda      	itte	le
 801271c:	f1c3 0320 	rsble	r3, r3, #32
 8012720:	fa06 f003 	lslle.w	r0, r6, r3
 8012724:	4318      	orrgt	r0, r3
 8012726:	f7ed ff0d 	bl	8000544 <__aeabi_ui2d>
 801272a:	2301      	movs	r3, #1
 801272c:	4606      	mov	r6, r0
 801272e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012732:	3d01      	subs	r5, #1
 8012734:	930e      	str	r3, [sp, #56]	; 0x38
 8012736:	e76a      	b.n	801260e <_dtoa_r+0x116>
 8012738:	2301      	movs	r3, #1
 801273a:	e7b2      	b.n	80126a2 <_dtoa_r+0x1aa>
 801273c:	900b      	str	r0, [sp, #44]	; 0x2c
 801273e:	e7b1      	b.n	80126a4 <_dtoa_r+0x1ac>
 8012740:	9b04      	ldr	r3, [sp, #16]
 8012742:	9a00      	ldr	r2, [sp, #0]
 8012744:	1a9b      	subs	r3, r3, r2
 8012746:	9304      	str	r3, [sp, #16]
 8012748:	4253      	negs	r3, r2
 801274a:	9307      	str	r3, [sp, #28]
 801274c:	2300      	movs	r3, #0
 801274e:	930a      	str	r3, [sp, #40]	; 0x28
 8012750:	e7bf      	b.n	80126d2 <_dtoa_r+0x1da>
 8012752:	2300      	movs	r3, #0
 8012754:	9308      	str	r3, [sp, #32]
 8012756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012758:	2b00      	cmp	r3, #0
 801275a:	dc55      	bgt.n	8012808 <_dtoa_r+0x310>
 801275c:	2301      	movs	r3, #1
 801275e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012762:	461a      	mov	r2, r3
 8012764:	9209      	str	r2, [sp, #36]	; 0x24
 8012766:	e00c      	b.n	8012782 <_dtoa_r+0x28a>
 8012768:	2301      	movs	r3, #1
 801276a:	e7f3      	b.n	8012754 <_dtoa_r+0x25c>
 801276c:	2300      	movs	r3, #0
 801276e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012770:	9308      	str	r3, [sp, #32]
 8012772:	9b00      	ldr	r3, [sp, #0]
 8012774:	4413      	add	r3, r2
 8012776:	9302      	str	r3, [sp, #8]
 8012778:	3301      	adds	r3, #1
 801277a:	2b01      	cmp	r3, #1
 801277c:	9303      	str	r3, [sp, #12]
 801277e:	bfb8      	it	lt
 8012780:	2301      	movlt	r3, #1
 8012782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012784:	2200      	movs	r2, #0
 8012786:	6042      	str	r2, [r0, #4]
 8012788:	2204      	movs	r2, #4
 801278a:	f102 0614 	add.w	r6, r2, #20
 801278e:	429e      	cmp	r6, r3
 8012790:	6841      	ldr	r1, [r0, #4]
 8012792:	d93d      	bls.n	8012810 <_dtoa_r+0x318>
 8012794:	4620      	mov	r0, r4
 8012796:	f001 f84b 	bl	8013830 <_Balloc>
 801279a:	9001      	str	r0, [sp, #4]
 801279c:	2800      	cmp	r0, #0
 801279e:	d13b      	bne.n	8012818 <_dtoa_r+0x320>
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <_dtoa_r+0x2f0>)
 80127a2:	4602      	mov	r2, r0
 80127a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80127a8:	e6c0      	b.n	801252c <_dtoa_r+0x34>
 80127aa:	2301      	movs	r3, #1
 80127ac:	e7df      	b.n	801276e <_dtoa_r+0x276>
 80127ae:	bf00      	nop
 80127b0:	636f4361 	.word	0x636f4361
 80127b4:	3fd287a7 	.word	0x3fd287a7
 80127b8:	8b60c8b3 	.word	0x8b60c8b3
 80127bc:	3fc68a28 	.word	0x3fc68a28
 80127c0:	509f79fb 	.word	0x509f79fb
 80127c4:	3fd34413 	.word	0x3fd34413
 80127c8:	08017ffe 	.word	0x08017ffe
 80127cc:	08018015 	.word	0x08018015
 80127d0:	7ff00000 	.word	0x7ff00000
 80127d4:	08017ffa 	.word	0x08017ffa
 80127d8:	08017ff1 	.word	0x08017ff1
 80127dc:	0801826a 	.word	0x0801826a
 80127e0:	3ff80000 	.word	0x3ff80000
 80127e4:	08018180 	.word	0x08018180
 80127e8:	08018070 	.word	0x08018070
 80127ec:	2501      	movs	r5, #1
 80127ee:	2300      	movs	r3, #0
 80127f0:	9306      	str	r3, [sp, #24]
 80127f2:	9508      	str	r5, [sp, #32]
 80127f4:	f04f 33ff 	mov.w	r3, #4294967295
 80127f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80127fc:	2200      	movs	r2, #0
 80127fe:	2312      	movs	r3, #18
 8012800:	e7b0      	b.n	8012764 <_dtoa_r+0x26c>
 8012802:	2301      	movs	r3, #1
 8012804:	9308      	str	r3, [sp, #32]
 8012806:	e7f5      	b.n	80127f4 <_dtoa_r+0x2fc>
 8012808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801280e:	e7b8      	b.n	8012782 <_dtoa_r+0x28a>
 8012810:	3101      	adds	r1, #1
 8012812:	6041      	str	r1, [r0, #4]
 8012814:	0052      	lsls	r2, r2, #1
 8012816:	e7b8      	b.n	801278a <_dtoa_r+0x292>
 8012818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801281a:	9a01      	ldr	r2, [sp, #4]
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	9b03      	ldr	r3, [sp, #12]
 8012820:	2b0e      	cmp	r3, #14
 8012822:	f200 809d 	bhi.w	8012960 <_dtoa_r+0x468>
 8012826:	2d00      	cmp	r5, #0
 8012828:	f000 809a 	beq.w	8012960 <_dtoa_r+0x468>
 801282c:	9b00      	ldr	r3, [sp, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	dd32      	ble.n	8012898 <_dtoa_r+0x3a0>
 8012832:	4ab7      	ldr	r2, [pc, #732]	; (8012b10 <_dtoa_r+0x618>)
 8012834:	f003 030f 	and.w	r3, r3, #15
 8012838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801283c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012840:	9b00      	ldr	r3, [sp, #0]
 8012842:	05d8      	lsls	r0, r3, #23
 8012844:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012848:	d516      	bpl.n	8012878 <_dtoa_r+0x380>
 801284a:	4bb2      	ldr	r3, [pc, #712]	; (8012b14 <_dtoa_r+0x61c>)
 801284c:	ec51 0b19 	vmov	r0, r1, d9
 8012850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012854:	f7ee f81a 	bl	800088c <__aeabi_ddiv>
 8012858:	f007 070f 	and.w	r7, r7, #15
 801285c:	4682      	mov	sl, r0
 801285e:	468b      	mov	fp, r1
 8012860:	2503      	movs	r5, #3
 8012862:	4eac      	ldr	r6, [pc, #688]	; (8012b14 <_dtoa_r+0x61c>)
 8012864:	b957      	cbnz	r7, 801287c <_dtoa_r+0x384>
 8012866:	4642      	mov	r2, r8
 8012868:	464b      	mov	r3, r9
 801286a:	4650      	mov	r0, sl
 801286c:	4659      	mov	r1, fp
 801286e:	f7ee f80d 	bl	800088c <__aeabi_ddiv>
 8012872:	4682      	mov	sl, r0
 8012874:	468b      	mov	fp, r1
 8012876:	e028      	b.n	80128ca <_dtoa_r+0x3d2>
 8012878:	2502      	movs	r5, #2
 801287a:	e7f2      	b.n	8012862 <_dtoa_r+0x36a>
 801287c:	07f9      	lsls	r1, r7, #31
 801287e:	d508      	bpl.n	8012892 <_dtoa_r+0x39a>
 8012880:	4640      	mov	r0, r8
 8012882:	4649      	mov	r1, r9
 8012884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012888:	f7ed fed6 	bl	8000638 <__aeabi_dmul>
 801288c:	3501      	adds	r5, #1
 801288e:	4680      	mov	r8, r0
 8012890:	4689      	mov	r9, r1
 8012892:	107f      	asrs	r7, r7, #1
 8012894:	3608      	adds	r6, #8
 8012896:	e7e5      	b.n	8012864 <_dtoa_r+0x36c>
 8012898:	f000 809b 	beq.w	80129d2 <_dtoa_r+0x4da>
 801289c:	9b00      	ldr	r3, [sp, #0]
 801289e:	4f9d      	ldr	r7, [pc, #628]	; (8012b14 <_dtoa_r+0x61c>)
 80128a0:	425e      	negs	r6, r3
 80128a2:	4b9b      	ldr	r3, [pc, #620]	; (8012b10 <_dtoa_r+0x618>)
 80128a4:	f006 020f 	and.w	r2, r6, #15
 80128a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b0:	ec51 0b19 	vmov	r0, r1, d9
 80128b4:	f7ed fec0 	bl	8000638 <__aeabi_dmul>
 80128b8:	1136      	asrs	r6, r6, #4
 80128ba:	4682      	mov	sl, r0
 80128bc:	468b      	mov	fp, r1
 80128be:	2300      	movs	r3, #0
 80128c0:	2502      	movs	r5, #2
 80128c2:	2e00      	cmp	r6, #0
 80128c4:	d17a      	bne.n	80129bc <_dtoa_r+0x4c4>
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d1d3      	bne.n	8012872 <_dtoa_r+0x37a>
 80128ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	f000 8082 	beq.w	80129d6 <_dtoa_r+0x4de>
 80128d2:	4b91      	ldr	r3, [pc, #580]	; (8012b18 <_dtoa_r+0x620>)
 80128d4:	2200      	movs	r2, #0
 80128d6:	4650      	mov	r0, sl
 80128d8:	4659      	mov	r1, fp
 80128da:	f7ee f91f 	bl	8000b1c <__aeabi_dcmplt>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d079      	beq.n	80129d6 <_dtoa_r+0x4de>
 80128e2:	9b03      	ldr	r3, [sp, #12]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d076      	beq.n	80129d6 <_dtoa_r+0x4de>
 80128e8:	9b02      	ldr	r3, [sp, #8]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dd36      	ble.n	801295c <_dtoa_r+0x464>
 80128ee:	9b00      	ldr	r3, [sp, #0]
 80128f0:	4650      	mov	r0, sl
 80128f2:	4659      	mov	r1, fp
 80128f4:	1e5f      	subs	r7, r3, #1
 80128f6:	2200      	movs	r2, #0
 80128f8:	4b88      	ldr	r3, [pc, #544]	; (8012b1c <_dtoa_r+0x624>)
 80128fa:	f7ed fe9d 	bl	8000638 <__aeabi_dmul>
 80128fe:	9e02      	ldr	r6, [sp, #8]
 8012900:	4682      	mov	sl, r0
 8012902:	468b      	mov	fp, r1
 8012904:	3501      	adds	r5, #1
 8012906:	4628      	mov	r0, r5
 8012908:	f7ed fe2c 	bl	8000564 <__aeabi_i2d>
 801290c:	4652      	mov	r2, sl
 801290e:	465b      	mov	r3, fp
 8012910:	f7ed fe92 	bl	8000638 <__aeabi_dmul>
 8012914:	4b82      	ldr	r3, [pc, #520]	; (8012b20 <_dtoa_r+0x628>)
 8012916:	2200      	movs	r2, #0
 8012918:	f7ed fcd8 	bl	80002cc <__adddf3>
 801291c:	46d0      	mov	r8, sl
 801291e:	46d9      	mov	r9, fp
 8012920:	4682      	mov	sl, r0
 8012922:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012926:	2e00      	cmp	r6, #0
 8012928:	d158      	bne.n	80129dc <_dtoa_r+0x4e4>
 801292a:	4b7e      	ldr	r3, [pc, #504]	; (8012b24 <_dtoa_r+0x62c>)
 801292c:	2200      	movs	r2, #0
 801292e:	4640      	mov	r0, r8
 8012930:	4649      	mov	r1, r9
 8012932:	f7ed fcc9 	bl	80002c8 <__aeabi_dsub>
 8012936:	4652      	mov	r2, sl
 8012938:	465b      	mov	r3, fp
 801293a:	4680      	mov	r8, r0
 801293c:	4689      	mov	r9, r1
 801293e:	f7ee f90b 	bl	8000b58 <__aeabi_dcmpgt>
 8012942:	2800      	cmp	r0, #0
 8012944:	f040 8295 	bne.w	8012e72 <_dtoa_r+0x97a>
 8012948:	4652      	mov	r2, sl
 801294a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801294e:	4640      	mov	r0, r8
 8012950:	4649      	mov	r1, r9
 8012952:	f7ee f8e3 	bl	8000b1c <__aeabi_dcmplt>
 8012956:	2800      	cmp	r0, #0
 8012958:	f040 8289 	bne.w	8012e6e <_dtoa_r+0x976>
 801295c:	ec5b ab19 	vmov	sl, fp, d9
 8012960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012962:	2b00      	cmp	r3, #0
 8012964:	f2c0 8148 	blt.w	8012bf8 <_dtoa_r+0x700>
 8012968:	9a00      	ldr	r2, [sp, #0]
 801296a:	2a0e      	cmp	r2, #14
 801296c:	f300 8144 	bgt.w	8012bf8 <_dtoa_r+0x700>
 8012970:	4b67      	ldr	r3, [pc, #412]	; (8012b10 <_dtoa_r+0x618>)
 8012972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012976:	e9d3 8900 	ldrd	r8, r9, [r3]
 801297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297c:	2b00      	cmp	r3, #0
 801297e:	f280 80d5 	bge.w	8012b2c <_dtoa_r+0x634>
 8012982:	9b03      	ldr	r3, [sp, #12]
 8012984:	2b00      	cmp	r3, #0
 8012986:	f300 80d1 	bgt.w	8012b2c <_dtoa_r+0x634>
 801298a:	f040 826f 	bne.w	8012e6c <_dtoa_r+0x974>
 801298e:	4b65      	ldr	r3, [pc, #404]	; (8012b24 <_dtoa_r+0x62c>)
 8012990:	2200      	movs	r2, #0
 8012992:	4640      	mov	r0, r8
 8012994:	4649      	mov	r1, r9
 8012996:	f7ed fe4f 	bl	8000638 <__aeabi_dmul>
 801299a:	4652      	mov	r2, sl
 801299c:	465b      	mov	r3, fp
 801299e:	f7ee f8d1 	bl	8000b44 <__aeabi_dcmpge>
 80129a2:	9e03      	ldr	r6, [sp, #12]
 80129a4:	4637      	mov	r7, r6
 80129a6:	2800      	cmp	r0, #0
 80129a8:	f040 8245 	bne.w	8012e36 <_dtoa_r+0x93e>
 80129ac:	9d01      	ldr	r5, [sp, #4]
 80129ae:	2331      	movs	r3, #49	; 0x31
 80129b0:	f805 3b01 	strb.w	r3, [r5], #1
 80129b4:	9b00      	ldr	r3, [sp, #0]
 80129b6:	3301      	adds	r3, #1
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	e240      	b.n	8012e3e <_dtoa_r+0x946>
 80129bc:	07f2      	lsls	r2, r6, #31
 80129be:	d505      	bpl.n	80129cc <_dtoa_r+0x4d4>
 80129c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129c4:	f7ed fe38 	bl	8000638 <__aeabi_dmul>
 80129c8:	3501      	adds	r5, #1
 80129ca:	2301      	movs	r3, #1
 80129cc:	1076      	asrs	r6, r6, #1
 80129ce:	3708      	adds	r7, #8
 80129d0:	e777      	b.n	80128c2 <_dtoa_r+0x3ca>
 80129d2:	2502      	movs	r5, #2
 80129d4:	e779      	b.n	80128ca <_dtoa_r+0x3d2>
 80129d6:	9f00      	ldr	r7, [sp, #0]
 80129d8:	9e03      	ldr	r6, [sp, #12]
 80129da:	e794      	b.n	8012906 <_dtoa_r+0x40e>
 80129dc:	9901      	ldr	r1, [sp, #4]
 80129de:	4b4c      	ldr	r3, [pc, #304]	; (8012b10 <_dtoa_r+0x618>)
 80129e0:	4431      	add	r1, r6
 80129e2:	910d      	str	r1, [sp, #52]	; 0x34
 80129e4:	9908      	ldr	r1, [sp, #32]
 80129e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80129ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80129ee:	2900      	cmp	r1, #0
 80129f0:	d043      	beq.n	8012a7a <_dtoa_r+0x582>
 80129f2:	494d      	ldr	r1, [pc, #308]	; (8012b28 <_dtoa_r+0x630>)
 80129f4:	2000      	movs	r0, #0
 80129f6:	f7ed ff49 	bl	800088c <__aeabi_ddiv>
 80129fa:	4652      	mov	r2, sl
 80129fc:	465b      	mov	r3, fp
 80129fe:	f7ed fc63 	bl	80002c8 <__aeabi_dsub>
 8012a02:	9d01      	ldr	r5, [sp, #4]
 8012a04:	4682      	mov	sl, r0
 8012a06:	468b      	mov	fp, r1
 8012a08:	4649      	mov	r1, r9
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	f7ee f8c4 	bl	8000b98 <__aeabi_d2iz>
 8012a10:	4606      	mov	r6, r0
 8012a12:	f7ed fda7 	bl	8000564 <__aeabi_i2d>
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	4640      	mov	r0, r8
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	f7ed fc53 	bl	80002c8 <__aeabi_dsub>
 8012a22:	3630      	adds	r6, #48	; 0x30
 8012a24:	f805 6b01 	strb.w	r6, [r5], #1
 8012a28:	4652      	mov	r2, sl
 8012a2a:	465b      	mov	r3, fp
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	4689      	mov	r9, r1
 8012a30:	f7ee f874 	bl	8000b1c <__aeabi_dcmplt>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d163      	bne.n	8012b00 <_dtoa_r+0x608>
 8012a38:	4642      	mov	r2, r8
 8012a3a:	464b      	mov	r3, r9
 8012a3c:	4936      	ldr	r1, [pc, #216]	; (8012b18 <_dtoa_r+0x620>)
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f7ed fc42 	bl	80002c8 <__aeabi_dsub>
 8012a44:	4652      	mov	r2, sl
 8012a46:	465b      	mov	r3, fp
 8012a48:	f7ee f868 	bl	8000b1c <__aeabi_dcmplt>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	f040 80b5 	bne.w	8012bbc <_dtoa_r+0x6c4>
 8012a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a54:	429d      	cmp	r5, r3
 8012a56:	d081      	beq.n	801295c <_dtoa_r+0x464>
 8012a58:	4b30      	ldr	r3, [pc, #192]	; (8012b1c <_dtoa_r+0x624>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	4650      	mov	r0, sl
 8012a5e:	4659      	mov	r1, fp
 8012a60:	f7ed fdea 	bl	8000638 <__aeabi_dmul>
 8012a64:	4b2d      	ldr	r3, [pc, #180]	; (8012b1c <_dtoa_r+0x624>)
 8012a66:	4682      	mov	sl, r0
 8012a68:	468b      	mov	fp, r1
 8012a6a:	4640      	mov	r0, r8
 8012a6c:	4649      	mov	r1, r9
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f7ed fde2 	bl	8000638 <__aeabi_dmul>
 8012a74:	4680      	mov	r8, r0
 8012a76:	4689      	mov	r9, r1
 8012a78:	e7c6      	b.n	8012a08 <_dtoa_r+0x510>
 8012a7a:	4650      	mov	r0, sl
 8012a7c:	4659      	mov	r1, fp
 8012a7e:	f7ed fddb 	bl	8000638 <__aeabi_dmul>
 8012a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a84:	9d01      	ldr	r5, [sp, #4]
 8012a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a88:	4682      	mov	sl, r0
 8012a8a:	468b      	mov	fp, r1
 8012a8c:	4649      	mov	r1, r9
 8012a8e:	4640      	mov	r0, r8
 8012a90:	f7ee f882 	bl	8000b98 <__aeabi_d2iz>
 8012a94:	4606      	mov	r6, r0
 8012a96:	f7ed fd65 	bl	8000564 <__aeabi_i2d>
 8012a9a:	3630      	adds	r6, #48	; 0x30
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	4640      	mov	r0, r8
 8012aa2:	4649      	mov	r1, r9
 8012aa4:	f7ed fc10 	bl	80002c8 <__aeabi_dsub>
 8012aa8:	f805 6b01 	strb.w	r6, [r5], #1
 8012aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aae:	429d      	cmp	r5, r3
 8012ab0:	4680      	mov	r8, r0
 8012ab2:	4689      	mov	r9, r1
 8012ab4:	f04f 0200 	mov.w	r2, #0
 8012ab8:	d124      	bne.n	8012b04 <_dtoa_r+0x60c>
 8012aba:	4b1b      	ldr	r3, [pc, #108]	; (8012b28 <_dtoa_r+0x630>)
 8012abc:	4650      	mov	r0, sl
 8012abe:	4659      	mov	r1, fp
 8012ac0:	f7ed fc04 	bl	80002cc <__adddf3>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4640      	mov	r0, r8
 8012aca:	4649      	mov	r1, r9
 8012acc:	f7ee f844 	bl	8000b58 <__aeabi_dcmpgt>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d173      	bne.n	8012bbc <_dtoa_r+0x6c4>
 8012ad4:	4652      	mov	r2, sl
 8012ad6:	465b      	mov	r3, fp
 8012ad8:	4913      	ldr	r1, [pc, #76]	; (8012b28 <_dtoa_r+0x630>)
 8012ada:	2000      	movs	r0, #0
 8012adc:	f7ed fbf4 	bl	80002c8 <__aeabi_dsub>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	4640      	mov	r0, r8
 8012ae6:	4649      	mov	r1, r9
 8012ae8:	f7ee f818 	bl	8000b1c <__aeabi_dcmplt>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	f43f af35 	beq.w	801295c <_dtoa_r+0x464>
 8012af2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012af4:	1e6b      	subs	r3, r5, #1
 8012af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012af8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012afc:	2b30      	cmp	r3, #48	; 0x30
 8012afe:	d0f8      	beq.n	8012af2 <_dtoa_r+0x5fa>
 8012b00:	9700      	str	r7, [sp, #0]
 8012b02:	e049      	b.n	8012b98 <_dtoa_r+0x6a0>
 8012b04:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <_dtoa_r+0x624>)
 8012b06:	f7ed fd97 	bl	8000638 <__aeabi_dmul>
 8012b0a:	4680      	mov	r8, r0
 8012b0c:	4689      	mov	r9, r1
 8012b0e:	e7bd      	b.n	8012a8c <_dtoa_r+0x594>
 8012b10:	08018180 	.word	0x08018180
 8012b14:	08018158 	.word	0x08018158
 8012b18:	3ff00000 	.word	0x3ff00000
 8012b1c:	40240000 	.word	0x40240000
 8012b20:	401c0000 	.word	0x401c0000
 8012b24:	40140000 	.word	0x40140000
 8012b28:	3fe00000 	.word	0x3fe00000
 8012b2c:	9d01      	ldr	r5, [sp, #4]
 8012b2e:	4656      	mov	r6, sl
 8012b30:	465f      	mov	r7, fp
 8012b32:	4642      	mov	r2, r8
 8012b34:	464b      	mov	r3, r9
 8012b36:	4630      	mov	r0, r6
 8012b38:	4639      	mov	r1, r7
 8012b3a:	f7ed fea7 	bl	800088c <__aeabi_ddiv>
 8012b3e:	f7ee f82b 	bl	8000b98 <__aeabi_d2iz>
 8012b42:	4682      	mov	sl, r0
 8012b44:	f7ed fd0e 	bl	8000564 <__aeabi_i2d>
 8012b48:	4642      	mov	r2, r8
 8012b4a:	464b      	mov	r3, r9
 8012b4c:	f7ed fd74 	bl	8000638 <__aeabi_dmul>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	4630      	mov	r0, r6
 8012b56:	4639      	mov	r1, r7
 8012b58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012b5c:	f7ed fbb4 	bl	80002c8 <__aeabi_dsub>
 8012b60:	f805 6b01 	strb.w	r6, [r5], #1
 8012b64:	9e01      	ldr	r6, [sp, #4]
 8012b66:	9f03      	ldr	r7, [sp, #12]
 8012b68:	1bae      	subs	r6, r5, r6
 8012b6a:	42b7      	cmp	r7, r6
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	460b      	mov	r3, r1
 8012b70:	d135      	bne.n	8012bde <_dtoa_r+0x6e6>
 8012b72:	f7ed fbab 	bl	80002cc <__adddf3>
 8012b76:	4642      	mov	r2, r8
 8012b78:	464b      	mov	r3, r9
 8012b7a:	4606      	mov	r6, r0
 8012b7c:	460f      	mov	r7, r1
 8012b7e:	f7ed ffeb 	bl	8000b58 <__aeabi_dcmpgt>
 8012b82:	b9d0      	cbnz	r0, 8012bba <_dtoa_r+0x6c2>
 8012b84:	4642      	mov	r2, r8
 8012b86:	464b      	mov	r3, r9
 8012b88:	4630      	mov	r0, r6
 8012b8a:	4639      	mov	r1, r7
 8012b8c:	f7ed ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 8012b90:	b110      	cbz	r0, 8012b98 <_dtoa_r+0x6a0>
 8012b92:	f01a 0f01 	tst.w	sl, #1
 8012b96:	d110      	bne.n	8012bba <_dtoa_r+0x6c2>
 8012b98:	4620      	mov	r0, r4
 8012b9a:	ee18 1a10 	vmov	r1, s16
 8012b9e:	f000 fe87 	bl	80138b0 <_Bfree>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9800      	ldr	r0, [sp, #0]
 8012ba6:	702b      	strb	r3, [r5, #0]
 8012ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012baa:	3001      	adds	r0, #1
 8012bac:	6018      	str	r0, [r3, #0]
 8012bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f43f acf1 	beq.w	8012598 <_dtoa_r+0xa0>
 8012bb6:	601d      	str	r5, [r3, #0]
 8012bb8:	e4ee      	b.n	8012598 <_dtoa_r+0xa0>
 8012bba:	9f00      	ldr	r7, [sp, #0]
 8012bbc:	462b      	mov	r3, r5
 8012bbe:	461d      	mov	r5, r3
 8012bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bc4:	2a39      	cmp	r2, #57	; 0x39
 8012bc6:	d106      	bne.n	8012bd6 <_dtoa_r+0x6de>
 8012bc8:	9a01      	ldr	r2, [sp, #4]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d1f7      	bne.n	8012bbe <_dtoa_r+0x6c6>
 8012bce:	9901      	ldr	r1, [sp, #4]
 8012bd0:	2230      	movs	r2, #48	; 0x30
 8012bd2:	3701      	adds	r7, #1
 8012bd4:	700a      	strb	r2, [r1, #0]
 8012bd6:	781a      	ldrb	r2, [r3, #0]
 8012bd8:	3201      	adds	r2, #1
 8012bda:	701a      	strb	r2, [r3, #0]
 8012bdc:	e790      	b.n	8012b00 <_dtoa_r+0x608>
 8012bde:	4ba6      	ldr	r3, [pc, #664]	; (8012e78 <_dtoa_r+0x980>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	f7ed fd29 	bl	8000638 <__aeabi_dmul>
 8012be6:	2200      	movs	r2, #0
 8012be8:	2300      	movs	r3, #0
 8012bea:	4606      	mov	r6, r0
 8012bec:	460f      	mov	r7, r1
 8012bee:	f7ed ff8b 	bl	8000b08 <__aeabi_dcmpeq>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d09d      	beq.n	8012b32 <_dtoa_r+0x63a>
 8012bf6:	e7cf      	b.n	8012b98 <_dtoa_r+0x6a0>
 8012bf8:	9a08      	ldr	r2, [sp, #32]
 8012bfa:	2a00      	cmp	r2, #0
 8012bfc:	f000 80d7 	beq.w	8012dae <_dtoa_r+0x8b6>
 8012c00:	9a06      	ldr	r2, [sp, #24]
 8012c02:	2a01      	cmp	r2, #1
 8012c04:	f300 80ba 	bgt.w	8012d7c <_dtoa_r+0x884>
 8012c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c0a:	2a00      	cmp	r2, #0
 8012c0c:	f000 80b2 	beq.w	8012d74 <_dtoa_r+0x87c>
 8012c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012c14:	9e07      	ldr	r6, [sp, #28]
 8012c16:	9d04      	ldr	r5, [sp, #16]
 8012c18:	9a04      	ldr	r2, [sp, #16]
 8012c1a:	441a      	add	r2, r3
 8012c1c:	9204      	str	r2, [sp, #16]
 8012c1e:	9a05      	ldr	r2, [sp, #20]
 8012c20:	2101      	movs	r1, #1
 8012c22:	441a      	add	r2, r3
 8012c24:	4620      	mov	r0, r4
 8012c26:	9205      	str	r2, [sp, #20]
 8012c28:	f000 ff44 	bl	8013ab4 <__i2b>
 8012c2c:	4607      	mov	r7, r0
 8012c2e:	2d00      	cmp	r5, #0
 8012c30:	dd0c      	ble.n	8012c4c <_dtoa_r+0x754>
 8012c32:	9b05      	ldr	r3, [sp, #20]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	dd09      	ble.n	8012c4c <_dtoa_r+0x754>
 8012c38:	42ab      	cmp	r3, r5
 8012c3a:	9a04      	ldr	r2, [sp, #16]
 8012c3c:	bfa8      	it	ge
 8012c3e:	462b      	movge	r3, r5
 8012c40:	1ad2      	subs	r2, r2, r3
 8012c42:	9204      	str	r2, [sp, #16]
 8012c44:	9a05      	ldr	r2, [sp, #20]
 8012c46:	1aed      	subs	r5, r5, r3
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	9305      	str	r3, [sp, #20]
 8012c4c:	9b07      	ldr	r3, [sp, #28]
 8012c4e:	b31b      	cbz	r3, 8012c98 <_dtoa_r+0x7a0>
 8012c50:	9b08      	ldr	r3, [sp, #32]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 80af 	beq.w	8012db6 <_dtoa_r+0x8be>
 8012c58:	2e00      	cmp	r6, #0
 8012c5a:	dd13      	ble.n	8012c84 <_dtoa_r+0x78c>
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	4632      	mov	r2, r6
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 ffe7 	bl	8013c34 <__pow5mult>
 8012c66:	ee18 2a10 	vmov	r2, s16
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 ff36 	bl	8013ae0 <__multiply>
 8012c74:	ee18 1a10 	vmov	r1, s16
 8012c78:	4680      	mov	r8, r0
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f000 fe18 	bl	80138b0 <_Bfree>
 8012c80:	ee08 8a10 	vmov	s16, r8
 8012c84:	9b07      	ldr	r3, [sp, #28]
 8012c86:	1b9a      	subs	r2, r3, r6
 8012c88:	d006      	beq.n	8012c98 <_dtoa_r+0x7a0>
 8012c8a:	ee18 1a10 	vmov	r1, s16
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 ffd0 	bl	8013c34 <__pow5mult>
 8012c94:	ee08 0a10 	vmov	s16, r0
 8012c98:	2101      	movs	r1, #1
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f000 ff0a 	bl	8013ab4 <__i2b>
 8012ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	f340 8088 	ble.w	8012dba <_dtoa_r+0x8c2>
 8012caa:	461a      	mov	r2, r3
 8012cac:	4601      	mov	r1, r0
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f000 ffc0 	bl	8013c34 <__pow5mult>
 8012cb4:	9b06      	ldr	r3, [sp, #24]
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	4606      	mov	r6, r0
 8012cba:	f340 8081 	ble.w	8012dc0 <_dtoa_r+0x8c8>
 8012cbe:	f04f 0800 	mov.w	r8, #0
 8012cc2:	6933      	ldr	r3, [r6, #16]
 8012cc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012cc8:	6918      	ldr	r0, [r3, #16]
 8012cca:	f000 fea3 	bl	8013a14 <__hi0bits>
 8012cce:	f1c0 0020 	rsb	r0, r0, #32
 8012cd2:	9b05      	ldr	r3, [sp, #20]
 8012cd4:	4418      	add	r0, r3
 8012cd6:	f010 001f 	ands.w	r0, r0, #31
 8012cda:	f000 8092 	beq.w	8012e02 <_dtoa_r+0x90a>
 8012cde:	f1c0 0320 	rsb	r3, r0, #32
 8012ce2:	2b04      	cmp	r3, #4
 8012ce4:	f340 808a 	ble.w	8012dfc <_dtoa_r+0x904>
 8012ce8:	f1c0 001c 	rsb	r0, r0, #28
 8012cec:	9b04      	ldr	r3, [sp, #16]
 8012cee:	4403      	add	r3, r0
 8012cf0:	9304      	str	r3, [sp, #16]
 8012cf2:	9b05      	ldr	r3, [sp, #20]
 8012cf4:	4403      	add	r3, r0
 8012cf6:	4405      	add	r5, r0
 8012cf8:	9305      	str	r3, [sp, #20]
 8012cfa:	9b04      	ldr	r3, [sp, #16]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	dd07      	ble.n	8012d10 <_dtoa_r+0x818>
 8012d00:	ee18 1a10 	vmov	r1, s16
 8012d04:	461a      	mov	r2, r3
 8012d06:	4620      	mov	r0, r4
 8012d08:	f000 ffee 	bl	8013ce8 <__lshift>
 8012d0c:	ee08 0a10 	vmov	s16, r0
 8012d10:	9b05      	ldr	r3, [sp, #20]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	dd05      	ble.n	8012d22 <_dtoa_r+0x82a>
 8012d16:	4631      	mov	r1, r6
 8012d18:	461a      	mov	r2, r3
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f000 ffe4 	bl	8013ce8 <__lshift>
 8012d20:	4606      	mov	r6, r0
 8012d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d06e      	beq.n	8012e06 <_dtoa_r+0x90e>
 8012d28:	ee18 0a10 	vmov	r0, s16
 8012d2c:	4631      	mov	r1, r6
 8012d2e:	f001 f84b 	bl	8013dc8 <__mcmp>
 8012d32:	2800      	cmp	r0, #0
 8012d34:	da67      	bge.n	8012e06 <_dtoa_r+0x90e>
 8012d36:	9b00      	ldr	r3, [sp, #0]
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	ee18 1a10 	vmov	r1, s16
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	220a      	movs	r2, #10
 8012d42:	2300      	movs	r3, #0
 8012d44:	4620      	mov	r0, r4
 8012d46:	f000 fdd5 	bl	80138f4 <__multadd>
 8012d4a:	9b08      	ldr	r3, [sp, #32]
 8012d4c:	ee08 0a10 	vmov	s16, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 81b1 	beq.w	80130b8 <_dtoa_r+0xbc0>
 8012d56:	2300      	movs	r3, #0
 8012d58:	4639      	mov	r1, r7
 8012d5a:	220a      	movs	r2, #10
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f000 fdc9 	bl	80138f4 <__multadd>
 8012d62:	9b02      	ldr	r3, [sp, #8]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	4607      	mov	r7, r0
 8012d68:	f300 808e 	bgt.w	8012e88 <_dtoa_r+0x990>
 8012d6c:	9b06      	ldr	r3, [sp, #24]
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	dc51      	bgt.n	8012e16 <_dtoa_r+0x91e>
 8012d72:	e089      	b.n	8012e88 <_dtoa_r+0x990>
 8012d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d7a:	e74b      	b.n	8012c14 <_dtoa_r+0x71c>
 8012d7c:	9b03      	ldr	r3, [sp, #12]
 8012d7e:	1e5e      	subs	r6, r3, #1
 8012d80:	9b07      	ldr	r3, [sp, #28]
 8012d82:	42b3      	cmp	r3, r6
 8012d84:	bfbf      	itttt	lt
 8012d86:	9b07      	ldrlt	r3, [sp, #28]
 8012d88:	9607      	strlt	r6, [sp, #28]
 8012d8a:	1af2      	sublt	r2, r6, r3
 8012d8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012d8e:	bfb6      	itet	lt
 8012d90:	189b      	addlt	r3, r3, r2
 8012d92:	1b9e      	subge	r6, r3, r6
 8012d94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	bfb8      	it	lt
 8012d9a:	2600      	movlt	r6, #0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	bfb7      	itett	lt
 8012da0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012da4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012da8:	1a9d      	sublt	r5, r3, r2
 8012daa:	2300      	movlt	r3, #0
 8012dac:	e734      	b.n	8012c18 <_dtoa_r+0x720>
 8012dae:	9e07      	ldr	r6, [sp, #28]
 8012db0:	9d04      	ldr	r5, [sp, #16]
 8012db2:	9f08      	ldr	r7, [sp, #32]
 8012db4:	e73b      	b.n	8012c2e <_dtoa_r+0x736>
 8012db6:	9a07      	ldr	r2, [sp, #28]
 8012db8:	e767      	b.n	8012c8a <_dtoa_r+0x792>
 8012dba:	9b06      	ldr	r3, [sp, #24]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	dc18      	bgt.n	8012df2 <_dtoa_r+0x8fa>
 8012dc0:	f1ba 0f00 	cmp.w	sl, #0
 8012dc4:	d115      	bne.n	8012df2 <_dtoa_r+0x8fa>
 8012dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dca:	b993      	cbnz	r3, 8012df2 <_dtoa_r+0x8fa>
 8012dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012dd0:	0d1b      	lsrs	r3, r3, #20
 8012dd2:	051b      	lsls	r3, r3, #20
 8012dd4:	b183      	cbz	r3, 8012df8 <_dtoa_r+0x900>
 8012dd6:	9b04      	ldr	r3, [sp, #16]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	9304      	str	r3, [sp, #16]
 8012ddc:	9b05      	ldr	r3, [sp, #20]
 8012dde:	3301      	adds	r3, #1
 8012de0:	9305      	str	r3, [sp, #20]
 8012de2:	f04f 0801 	mov.w	r8, #1
 8012de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f47f af6a 	bne.w	8012cc2 <_dtoa_r+0x7ca>
 8012dee:	2001      	movs	r0, #1
 8012df0:	e76f      	b.n	8012cd2 <_dtoa_r+0x7da>
 8012df2:	f04f 0800 	mov.w	r8, #0
 8012df6:	e7f6      	b.n	8012de6 <_dtoa_r+0x8ee>
 8012df8:	4698      	mov	r8, r3
 8012dfa:	e7f4      	b.n	8012de6 <_dtoa_r+0x8ee>
 8012dfc:	f43f af7d 	beq.w	8012cfa <_dtoa_r+0x802>
 8012e00:	4618      	mov	r0, r3
 8012e02:	301c      	adds	r0, #28
 8012e04:	e772      	b.n	8012cec <_dtoa_r+0x7f4>
 8012e06:	9b03      	ldr	r3, [sp, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	dc37      	bgt.n	8012e7c <_dtoa_r+0x984>
 8012e0c:	9b06      	ldr	r3, [sp, #24]
 8012e0e:	2b02      	cmp	r3, #2
 8012e10:	dd34      	ble.n	8012e7c <_dtoa_r+0x984>
 8012e12:	9b03      	ldr	r3, [sp, #12]
 8012e14:	9302      	str	r3, [sp, #8]
 8012e16:	9b02      	ldr	r3, [sp, #8]
 8012e18:	b96b      	cbnz	r3, 8012e36 <_dtoa_r+0x93e>
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	2205      	movs	r2, #5
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f000 fd68 	bl	80138f4 <__multadd>
 8012e24:	4601      	mov	r1, r0
 8012e26:	4606      	mov	r6, r0
 8012e28:	ee18 0a10 	vmov	r0, s16
 8012e2c:	f000 ffcc 	bl	8013dc8 <__mcmp>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	f73f adbb 	bgt.w	80129ac <_dtoa_r+0x4b4>
 8012e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e38:	9d01      	ldr	r5, [sp, #4]
 8012e3a:	43db      	mvns	r3, r3
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	f04f 0800 	mov.w	r8, #0
 8012e42:	4631      	mov	r1, r6
 8012e44:	4620      	mov	r0, r4
 8012e46:	f000 fd33 	bl	80138b0 <_Bfree>
 8012e4a:	2f00      	cmp	r7, #0
 8012e4c:	f43f aea4 	beq.w	8012b98 <_dtoa_r+0x6a0>
 8012e50:	f1b8 0f00 	cmp.w	r8, #0
 8012e54:	d005      	beq.n	8012e62 <_dtoa_r+0x96a>
 8012e56:	45b8      	cmp	r8, r7
 8012e58:	d003      	beq.n	8012e62 <_dtoa_r+0x96a>
 8012e5a:	4641      	mov	r1, r8
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f000 fd27 	bl	80138b0 <_Bfree>
 8012e62:	4639      	mov	r1, r7
 8012e64:	4620      	mov	r0, r4
 8012e66:	f000 fd23 	bl	80138b0 <_Bfree>
 8012e6a:	e695      	b.n	8012b98 <_dtoa_r+0x6a0>
 8012e6c:	2600      	movs	r6, #0
 8012e6e:	4637      	mov	r7, r6
 8012e70:	e7e1      	b.n	8012e36 <_dtoa_r+0x93e>
 8012e72:	9700      	str	r7, [sp, #0]
 8012e74:	4637      	mov	r7, r6
 8012e76:	e599      	b.n	80129ac <_dtoa_r+0x4b4>
 8012e78:	40240000 	.word	0x40240000
 8012e7c:	9b08      	ldr	r3, [sp, #32]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	f000 80ca 	beq.w	8013018 <_dtoa_r+0xb20>
 8012e84:	9b03      	ldr	r3, [sp, #12]
 8012e86:	9302      	str	r3, [sp, #8]
 8012e88:	2d00      	cmp	r5, #0
 8012e8a:	dd05      	ble.n	8012e98 <_dtoa_r+0x9a0>
 8012e8c:	4639      	mov	r1, r7
 8012e8e:	462a      	mov	r2, r5
 8012e90:	4620      	mov	r0, r4
 8012e92:	f000 ff29 	bl	8013ce8 <__lshift>
 8012e96:	4607      	mov	r7, r0
 8012e98:	f1b8 0f00 	cmp.w	r8, #0
 8012e9c:	d05b      	beq.n	8012f56 <_dtoa_r+0xa5e>
 8012e9e:	6879      	ldr	r1, [r7, #4]
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f000 fcc5 	bl	8013830 <_Balloc>
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	b928      	cbnz	r0, 8012eb6 <_dtoa_r+0x9be>
 8012eaa:	4b87      	ldr	r3, [pc, #540]	; (80130c8 <_dtoa_r+0xbd0>)
 8012eac:	4602      	mov	r2, r0
 8012eae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012eb2:	f7ff bb3b 	b.w	801252c <_dtoa_r+0x34>
 8012eb6:	693a      	ldr	r2, [r7, #16]
 8012eb8:	3202      	adds	r2, #2
 8012eba:	0092      	lsls	r2, r2, #2
 8012ebc:	f107 010c 	add.w	r1, r7, #12
 8012ec0:	300c      	adds	r0, #12
 8012ec2:	f000 fca7 	bl	8013814 <memcpy>
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	4629      	mov	r1, r5
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f000 ff0c 	bl	8013ce8 <__lshift>
 8012ed0:	9b01      	ldr	r3, [sp, #4]
 8012ed2:	f103 0901 	add.w	r9, r3, #1
 8012ed6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012eda:	4413      	add	r3, r2
 8012edc:	9305      	str	r3, [sp, #20]
 8012ede:	f00a 0301 	and.w	r3, sl, #1
 8012ee2:	46b8      	mov	r8, r7
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	4607      	mov	r7, r0
 8012ee8:	4631      	mov	r1, r6
 8012eea:	ee18 0a10 	vmov	r0, s16
 8012eee:	f7ff fa75 	bl	80123dc <quorem>
 8012ef2:	4641      	mov	r1, r8
 8012ef4:	9002      	str	r0, [sp, #8]
 8012ef6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012efa:	ee18 0a10 	vmov	r0, s16
 8012efe:	f000 ff63 	bl	8013dc8 <__mcmp>
 8012f02:	463a      	mov	r2, r7
 8012f04:	9003      	str	r0, [sp, #12]
 8012f06:	4631      	mov	r1, r6
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f000 ff79 	bl	8013e00 <__mdiff>
 8012f0e:	68c2      	ldr	r2, [r0, #12]
 8012f10:	f109 3bff 	add.w	fp, r9, #4294967295
 8012f14:	4605      	mov	r5, r0
 8012f16:	bb02      	cbnz	r2, 8012f5a <_dtoa_r+0xa62>
 8012f18:	4601      	mov	r1, r0
 8012f1a:	ee18 0a10 	vmov	r0, s16
 8012f1e:	f000 ff53 	bl	8013dc8 <__mcmp>
 8012f22:	4602      	mov	r2, r0
 8012f24:	4629      	mov	r1, r5
 8012f26:	4620      	mov	r0, r4
 8012f28:	9207      	str	r2, [sp, #28]
 8012f2a:	f000 fcc1 	bl	80138b0 <_Bfree>
 8012f2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012f32:	ea43 0102 	orr.w	r1, r3, r2
 8012f36:	9b04      	ldr	r3, [sp, #16]
 8012f38:	430b      	orrs	r3, r1
 8012f3a:	464d      	mov	r5, r9
 8012f3c:	d10f      	bne.n	8012f5e <_dtoa_r+0xa66>
 8012f3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f42:	d02a      	beq.n	8012f9a <_dtoa_r+0xaa2>
 8012f44:	9b03      	ldr	r3, [sp, #12]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	dd02      	ble.n	8012f50 <_dtoa_r+0xa58>
 8012f4a:	9b02      	ldr	r3, [sp, #8]
 8012f4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012f50:	f88b a000 	strb.w	sl, [fp]
 8012f54:	e775      	b.n	8012e42 <_dtoa_r+0x94a>
 8012f56:	4638      	mov	r0, r7
 8012f58:	e7ba      	b.n	8012ed0 <_dtoa_r+0x9d8>
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	e7e2      	b.n	8012f24 <_dtoa_r+0xa2c>
 8012f5e:	9b03      	ldr	r3, [sp, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	db04      	blt.n	8012f6e <_dtoa_r+0xa76>
 8012f64:	9906      	ldr	r1, [sp, #24]
 8012f66:	430b      	orrs	r3, r1
 8012f68:	9904      	ldr	r1, [sp, #16]
 8012f6a:	430b      	orrs	r3, r1
 8012f6c:	d122      	bne.n	8012fb4 <_dtoa_r+0xabc>
 8012f6e:	2a00      	cmp	r2, #0
 8012f70:	ddee      	ble.n	8012f50 <_dtoa_r+0xa58>
 8012f72:	ee18 1a10 	vmov	r1, s16
 8012f76:	2201      	movs	r2, #1
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f000 feb5 	bl	8013ce8 <__lshift>
 8012f7e:	4631      	mov	r1, r6
 8012f80:	ee08 0a10 	vmov	s16, r0
 8012f84:	f000 ff20 	bl	8013dc8 <__mcmp>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	dc03      	bgt.n	8012f94 <_dtoa_r+0xa9c>
 8012f8c:	d1e0      	bne.n	8012f50 <_dtoa_r+0xa58>
 8012f8e:	f01a 0f01 	tst.w	sl, #1
 8012f92:	d0dd      	beq.n	8012f50 <_dtoa_r+0xa58>
 8012f94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012f98:	d1d7      	bne.n	8012f4a <_dtoa_r+0xa52>
 8012f9a:	2339      	movs	r3, #57	; 0x39
 8012f9c:	f88b 3000 	strb.w	r3, [fp]
 8012fa0:	462b      	mov	r3, r5
 8012fa2:	461d      	mov	r5, r3
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012faa:	2a39      	cmp	r2, #57	; 0x39
 8012fac:	d071      	beq.n	8013092 <_dtoa_r+0xb9a>
 8012fae:	3201      	adds	r2, #1
 8012fb0:	701a      	strb	r2, [r3, #0]
 8012fb2:	e746      	b.n	8012e42 <_dtoa_r+0x94a>
 8012fb4:	2a00      	cmp	r2, #0
 8012fb6:	dd07      	ble.n	8012fc8 <_dtoa_r+0xad0>
 8012fb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012fbc:	d0ed      	beq.n	8012f9a <_dtoa_r+0xaa2>
 8012fbe:	f10a 0301 	add.w	r3, sl, #1
 8012fc2:	f88b 3000 	strb.w	r3, [fp]
 8012fc6:	e73c      	b.n	8012e42 <_dtoa_r+0x94a>
 8012fc8:	9b05      	ldr	r3, [sp, #20]
 8012fca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012fce:	4599      	cmp	r9, r3
 8012fd0:	d047      	beq.n	8013062 <_dtoa_r+0xb6a>
 8012fd2:	ee18 1a10 	vmov	r1, s16
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	220a      	movs	r2, #10
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f000 fc8a 	bl	80138f4 <__multadd>
 8012fe0:	45b8      	cmp	r8, r7
 8012fe2:	ee08 0a10 	vmov	s16, r0
 8012fe6:	f04f 0300 	mov.w	r3, #0
 8012fea:	f04f 020a 	mov.w	r2, #10
 8012fee:	4641      	mov	r1, r8
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	d106      	bne.n	8013002 <_dtoa_r+0xb0a>
 8012ff4:	f000 fc7e 	bl	80138f4 <__multadd>
 8012ff8:	4680      	mov	r8, r0
 8012ffa:	4607      	mov	r7, r0
 8012ffc:	f109 0901 	add.w	r9, r9, #1
 8013000:	e772      	b.n	8012ee8 <_dtoa_r+0x9f0>
 8013002:	f000 fc77 	bl	80138f4 <__multadd>
 8013006:	4639      	mov	r1, r7
 8013008:	4680      	mov	r8, r0
 801300a:	2300      	movs	r3, #0
 801300c:	220a      	movs	r2, #10
 801300e:	4620      	mov	r0, r4
 8013010:	f000 fc70 	bl	80138f4 <__multadd>
 8013014:	4607      	mov	r7, r0
 8013016:	e7f1      	b.n	8012ffc <_dtoa_r+0xb04>
 8013018:	9b03      	ldr	r3, [sp, #12]
 801301a:	9302      	str	r3, [sp, #8]
 801301c:	9d01      	ldr	r5, [sp, #4]
 801301e:	ee18 0a10 	vmov	r0, s16
 8013022:	4631      	mov	r1, r6
 8013024:	f7ff f9da 	bl	80123dc <quorem>
 8013028:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801302c:	9b01      	ldr	r3, [sp, #4]
 801302e:	f805 ab01 	strb.w	sl, [r5], #1
 8013032:	1aea      	subs	r2, r5, r3
 8013034:	9b02      	ldr	r3, [sp, #8]
 8013036:	4293      	cmp	r3, r2
 8013038:	dd09      	ble.n	801304e <_dtoa_r+0xb56>
 801303a:	ee18 1a10 	vmov	r1, s16
 801303e:	2300      	movs	r3, #0
 8013040:	220a      	movs	r2, #10
 8013042:	4620      	mov	r0, r4
 8013044:	f000 fc56 	bl	80138f4 <__multadd>
 8013048:	ee08 0a10 	vmov	s16, r0
 801304c:	e7e7      	b.n	801301e <_dtoa_r+0xb26>
 801304e:	9b02      	ldr	r3, [sp, #8]
 8013050:	2b00      	cmp	r3, #0
 8013052:	bfc8      	it	gt
 8013054:	461d      	movgt	r5, r3
 8013056:	9b01      	ldr	r3, [sp, #4]
 8013058:	bfd8      	it	le
 801305a:	2501      	movle	r5, #1
 801305c:	441d      	add	r5, r3
 801305e:	f04f 0800 	mov.w	r8, #0
 8013062:	ee18 1a10 	vmov	r1, s16
 8013066:	2201      	movs	r2, #1
 8013068:	4620      	mov	r0, r4
 801306a:	f000 fe3d 	bl	8013ce8 <__lshift>
 801306e:	4631      	mov	r1, r6
 8013070:	ee08 0a10 	vmov	s16, r0
 8013074:	f000 fea8 	bl	8013dc8 <__mcmp>
 8013078:	2800      	cmp	r0, #0
 801307a:	dc91      	bgt.n	8012fa0 <_dtoa_r+0xaa8>
 801307c:	d102      	bne.n	8013084 <_dtoa_r+0xb8c>
 801307e:	f01a 0f01 	tst.w	sl, #1
 8013082:	d18d      	bne.n	8012fa0 <_dtoa_r+0xaa8>
 8013084:	462b      	mov	r3, r5
 8013086:	461d      	mov	r5, r3
 8013088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801308c:	2a30      	cmp	r2, #48	; 0x30
 801308e:	d0fa      	beq.n	8013086 <_dtoa_r+0xb8e>
 8013090:	e6d7      	b.n	8012e42 <_dtoa_r+0x94a>
 8013092:	9a01      	ldr	r2, [sp, #4]
 8013094:	429a      	cmp	r2, r3
 8013096:	d184      	bne.n	8012fa2 <_dtoa_r+0xaaa>
 8013098:	9b00      	ldr	r3, [sp, #0]
 801309a:	3301      	adds	r3, #1
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	2331      	movs	r3, #49	; 0x31
 80130a0:	7013      	strb	r3, [r2, #0]
 80130a2:	e6ce      	b.n	8012e42 <_dtoa_r+0x94a>
 80130a4:	4b09      	ldr	r3, [pc, #36]	; (80130cc <_dtoa_r+0xbd4>)
 80130a6:	f7ff ba95 	b.w	80125d4 <_dtoa_r+0xdc>
 80130aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f47f aa6e 	bne.w	801258e <_dtoa_r+0x96>
 80130b2:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <_dtoa_r+0xbd8>)
 80130b4:	f7ff ba8e 	b.w	80125d4 <_dtoa_r+0xdc>
 80130b8:	9b02      	ldr	r3, [sp, #8]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	dcae      	bgt.n	801301c <_dtoa_r+0xb24>
 80130be:	9b06      	ldr	r3, [sp, #24]
 80130c0:	2b02      	cmp	r3, #2
 80130c2:	f73f aea8 	bgt.w	8012e16 <_dtoa_r+0x91e>
 80130c6:	e7a9      	b.n	801301c <_dtoa_r+0xb24>
 80130c8:	08018070 	.word	0x08018070
 80130cc:	08018269 	.word	0x08018269
 80130d0:	08017ff1 	.word	0x08017ff1

080130d4 <rshift>:
 80130d4:	6903      	ldr	r3, [r0, #16]
 80130d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80130da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80130e2:	f100 0414 	add.w	r4, r0, #20
 80130e6:	dd45      	ble.n	8013174 <rshift+0xa0>
 80130e8:	f011 011f 	ands.w	r1, r1, #31
 80130ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80130f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80130f4:	d10c      	bne.n	8013110 <rshift+0x3c>
 80130f6:	f100 0710 	add.w	r7, r0, #16
 80130fa:	4629      	mov	r1, r5
 80130fc:	42b1      	cmp	r1, r6
 80130fe:	d334      	bcc.n	801316a <rshift+0x96>
 8013100:	1a9b      	subs	r3, r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	1eea      	subs	r2, r5, #3
 8013106:	4296      	cmp	r6, r2
 8013108:	bf38      	it	cc
 801310a:	2300      	movcc	r3, #0
 801310c:	4423      	add	r3, r4
 801310e:	e015      	b.n	801313c <rshift+0x68>
 8013110:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013114:	f1c1 0820 	rsb	r8, r1, #32
 8013118:	40cf      	lsrs	r7, r1
 801311a:	f105 0e04 	add.w	lr, r5, #4
 801311e:	46a1      	mov	r9, r4
 8013120:	4576      	cmp	r6, lr
 8013122:	46f4      	mov	ip, lr
 8013124:	d815      	bhi.n	8013152 <rshift+0x7e>
 8013126:	1a9a      	subs	r2, r3, r2
 8013128:	0092      	lsls	r2, r2, #2
 801312a:	3a04      	subs	r2, #4
 801312c:	3501      	adds	r5, #1
 801312e:	42ae      	cmp	r6, r5
 8013130:	bf38      	it	cc
 8013132:	2200      	movcc	r2, #0
 8013134:	18a3      	adds	r3, r4, r2
 8013136:	50a7      	str	r7, [r4, r2]
 8013138:	b107      	cbz	r7, 801313c <rshift+0x68>
 801313a:	3304      	adds	r3, #4
 801313c:	1b1a      	subs	r2, r3, r4
 801313e:	42a3      	cmp	r3, r4
 8013140:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013144:	bf08      	it	eq
 8013146:	2300      	moveq	r3, #0
 8013148:	6102      	str	r2, [r0, #16]
 801314a:	bf08      	it	eq
 801314c:	6143      	streq	r3, [r0, #20]
 801314e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013152:	f8dc c000 	ldr.w	ip, [ip]
 8013156:	fa0c fc08 	lsl.w	ip, ip, r8
 801315a:	ea4c 0707 	orr.w	r7, ip, r7
 801315e:	f849 7b04 	str.w	r7, [r9], #4
 8013162:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013166:	40cf      	lsrs	r7, r1
 8013168:	e7da      	b.n	8013120 <rshift+0x4c>
 801316a:	f851 cb04 	ldr.w	ip, [r1], #4
 801316e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013172:	e7c3      	b.n	80130fc <rshift+0x28>
 8013174:	4623      	mov	r3, r4
 8013176:	e7e1      	b.n	801313c <rshift+0x68>

08013178 <__hexdig_fun>:
 8013178:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801317c:	2b09      	cmp	r3, #9
 801317e:	d802      	bhi.n	8013186 <__hexdig_fun+0xe>
 8013180:	3820      	subs	r0, #32
 8013182:	b2c0      	uxtb	r0, r0
 8013184:	4770      	bx	lr
 8013186:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801318a:	2b05      	cmp	r3, #5
 801318c:	d801      	bhi.n	8013192 <__hexdig_fun+0x1a>
 801318e:	3847      	subs	r0, #71	; 0x47
 8013190:	e7f7      	b.n	8013182 <__hexdig_fun+0xa>
 8013192:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013196:	2b05      	cmp	r3, #5
 8013198:	d801      	bhi.n	801319e <__hexdig_fun+0x26>
 801319a:	3827      	subs	r0, #39	; 0x27
 801319c:	e7f1      	b.n	8013182 <__hexdig_fun+0xa>
 801319e:	2000      	movs	r0, #0
 80131a0:	4770      	bx	lr
	...

080131a4 <__gethex>:
 80131a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a8:	ed2d 8b02 	vpush	{d8}
 80131ac:	b089      	sub	sp, #36	; 0x24
 80131ae:	ee08 0a10 	vmov	s16, r0
 80131b2:	9304      	str	r3, [sp, #16]
 80131b4:	4bb4      	ldr	r3, [pc, #720]	; (8013488 <__gethex+0x2e4>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	4618      	mov	r0, r3
 80131bc:	468b      	mov	fp, r1
 80131be:	4690      	mov	r8, r2
 80131c0:	f7ed f826 	bl	8000210 <strlen>
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	f8db 2000 	ldr.w	r2, [fp]
 80131ca:	4403      	add	r3, r0
 80131cc:	4682      	mov	sl, r0
 80131ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80131d2:	9305      	str	r3, [sp, #20]
 80131d4:	1c93      	adds	r3, r2, #2
 80131d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80131da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80131de:	32fe      	adds	r2, #254	; 0xfe
 80131e0:	18d1      	adds	r1, r2, r3
 80131e2:	461f      	mov	r7, r3
 80131e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80131e8:	9100      	str	r1, [sp, #0]
 80131ea:	2830      	cmp	r0, #48	; 0x30
 80131ec:	d0f8      	beq.n	80131e0 <__gethex+0x3c>
 80131ee:	f7ff ffc3 	bl	8013178 <__hexdig_fun>
 80131f2:	4604      	mov	r4, r0
 80131f4:	2800      	cmp	r0, #0
 80131f6:	d13a      	bne.n	801326e <__gethex+0xca>
 80131f8:	9901      	ldr	r1, [sp, #4]
 80131fa:	4652      	mov	r2, sl
 80131fc:	4638      	mov	r0, r7
 80131fe:	f001 fdb3 	bl	8014d68 <strncmp>
 8013202:	4605      	mov	r5, r0
 8013204:	2800      	cmp	r0, #0
 8013206:	d168      	bne.n	80132da <__gethex+0x136>
 8013208:	f817 000a 	ldrb.w	r0, [r7, sl]
 801320c:	eb07 060a 	add.w	r6, r7, sl
 8013210:	f7ff ffb2 	bl	8013178 <__hexdig_fun>
 8013214:	2800      	cmp	r0, #0
 8013216:	d062      	beq.n	80132de <__gethex+0x13a>
 8013218:	4633      	mov	r3, r6
 801321a:	7818      	ldrb	r0, [r3, #0]
 801321c:	2830      	cmp	r0, #48	; 0x30
 801321e:	461f      	mov	r7, r3
 8013220:	f103 0301 	add.w	r3, r3, #1
 8013224:	d0f9      	beq.n	801321a <__gethex+0x76>
 8013226:	f7ff ffa7 	bl	8013178 <__hexdig_fun>
 801322a:	2301      	movs	r3, #1
 801322c:	fab0 f480 	clz	r4, r0
 8013230:	0964      	lsrs	r4, r4, #5
 8013232:	4635      	mov	r5, r6
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	463a      	mov	r2, r7
 8013238:	4616      	mov	r6, r2
 801323a:	3201      	adds	r2, #1
 801323c:	7830      	ldrb	r0, [r6, #0]
 801323e:	f7ff ff9b 	bl	8013178 <__hexdig_fun>
 8013242:	2800      	cmp	r0, #0
 8013244:	d1f8      	bne.n	8013238 <__gethex+0x94>
 8013246:	9901      	ldr	r1, [sp, #4]
 8013248:	4652      	mov	r2, sl
 801324a:	4630      	mov	r0, r6
 801324c:	f001 fd8c 	bl	8014d68 <strncmp>
 8013250:	b980      	cbnz	r0, 8013274 <__gethex+0xd0>
 8013252:	b94d      	cbnz	r5, 8013268 <__gethex+0xc4>
 8013254:	eb06 050a 	add.w	r5, r6, sl
 8013258:	462a      	mov	r2, r5
 801325a:	4616      	mov	r6, r2
 801325c:	3201      	adds	r2, #1
 801325e:	7830      	ldrb	r0, [r6, #0]
 8013260:	f7ff ff8a 	bl	8013178 <__hexdig_fun>
 8013264:	2800      	cmp	r0, #0
 8013266:	d1f8      	bne.n	801325a <__gethex+0xb6>
 8013268:	1bad      	subs	r5, r5, r6
 801326a:	00ad      	lsls	r5, r5, #2
 801326c:	e004      	b.n	8013278 <__gethex+0xd4>
 801326e:	2400      	movs	r4, #0
 8013270:	4625      	mov	r5, r4
 8013272:	e7e0      	b.n	8013236 <__gethex+0x92>
 8013274:	2d00      	cmp	r5, #0
 8013276:	d1f7      	bne.n	8013268 <__gethex+0xc4>
 8013278:	7833      	ldrb	r3, [r6, #0]
 801327a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801327e:	2b50      	cmp	r3, #80	; 0x50
 8013280:	d13b      	bne.n	80132fa <__gethex+0x156>
 8013282:	7873      	ldrb	r3, [r6, #1]
 8013284:	2b2b      	cmp	r3, #43	; 0x2b
 8013286:	d02c      	beq.n	80132e2 <__gethex+0x13e>
 8013288:	2b2d      	cmp	r3, #45	; 0x2d
 801328a:	d02e      	beq.n	80132ea <__gethex+0x146>
 801328c:	1c71      	adds	r1, r6, #1
 801328e:	f04f 0900 	mov.w	r9, #0
 8013292:	7808      	ldrb	r0, [r1, #0]
 8013294:	f7ff ff70 	bl	8013178 <__hexdig_fun>
 8013298:	1e43      	subs	r3, r0, #1
 801329a:	b2db      	uxtb	r3, r3
 801329c:	2b18      	cmp	r3, #24
 801329e:	d82c      	bhi.n	80132fa <__gethex+0x156>
 80132a0:	f1a0 0210 	sub.w	r2, r0, #16
 80132a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80132a8:	f7ff ff66 	bl	8013178 <__hexdig_fun>
 80132ac:	1e43      	subs	r3, r0, #1
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	2b18      	cmp	r3, #24
 80132b2:	d91d      	bls.n	80132f0 <__gethex+0x14c>
 80132b4:	f1b9 0f00 	cmp.w	r9, #0
 80132b8:	d000      	beq.n	80132bc <__gethex+0x118>
 80132ba:	4252      	negs	r2, r2
 80132bc:	4415      	add	r5, r2
 80132be:	f8cb 1000 	str.w	r1, [fp]
 80132c2:	b1e4      	cbz	r4, 80132fe <__gethex+0x15a>
 80132c4:	9b00      	ldr	r3, [sp, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	bf14      	ite	ne
 80132ca:	2700      	movne	r7, #0
 80132cc:	2706      	moveq	r7, #6
 80132ce:	4638      	mov	r0, r7
 80132d0:	b009      	add	sp, #36	; 0x24
 80132d2:	ecbd 8b02 	vpop	{d8}
 80132d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132da:	463e      	mov	r6, r7
 80132dc:	4625      	mov	r5, r4
 80132de:	2401      	movs	r4, #1
 80132e0:	e7ca      	b.n	8013278 <__gethex+0xd4>
 80132e2:	f04f 0900 	mov.w	r9, #0
 80132e6:	1cb1      	adds	r1, r6, #2
 80132e8:	e7d3      	b.n	8013292 <__gethex+0xee>
 80132ea:	f04f 0901 	mov.w	r9, #1
 80132ee:	e7fa      	b.n	80132e6 <__gethex+0x142>
 80132f0:	230a      	movs	r3, #10
 80132f2:	fb03 0202 	mla	r2, r3, r2, r0
 80132f6:	3a10      	subs	r2, #16
 80132f8:	e7d4      	b.n	80132a4 <__gethex+0x100>
 80132fa:	4631      	mov	r1, r6
 80132fc:	e7df      	b.n	80132be <__gethex+0x11a>
 80132fe:	1bf3      	subs	r3, r6, r7
 8013300:	3b01      	subs	r3, #1
 8013302:	4621      	mov	r1, r4
 8013304:	2b07      	cmp	r3, #7
 8013306:	dc0b      	bgt.n	8013320 <__gethex+0x17c>
 8013308:	ee18 0a10 	vmov	r0, s16
 801330c:	f000 fa90 	bl	8013830 <_Balloc>
 8013310:	4604      	mov	r4, r0
 8013312:	b940      	cbnz	r0, 8013326 <__gethex+0x182>
 8013314:	4b5d      	ldr	r3, [pc, #372]	; (801348c <__gethex+0x2e8>)
 8013316:	4602      	mov	r2, r0
 8013318:	21de      	movs	r1, #222	; 0xde
 801331a:	485d      	ldr	r0, [pc, #372]	; (8013490 <__gethex+0x2ec>)
 801331c:	f001 fdf4 	bl	8014f08 <__assert_func>
 8013320:	3101      	adds	r1, #1
 8013322:	105b      	asrs	r3, r3, #1
 8013324:	e7ee      	b.n	8013304 <__gethex+0x160>
 8013326:	f100 0914 	add.w	r9, r0, #20
 801332a:	f04f 0b00 	mov.w	fp, #0
 801332e:	f1ca 0301 	rsb	r3, sl, #1
 8013332:	f8cd 9008 	str.w	r9, [sp, #8]
 8013336:	f8cd b000 	str.w	fp, [sp]
 801333a:	9306      	str	r3, [sp, #24]
 801333c:	42b7      	cmp	r7, r6
 801333e:	d340      	bcc.n	80133c2 <__gethex+0x21e>
 8013340:	9802      	ldr	r0, [sp, #8]
 8013342:	9b00      	ldr	r3, [sp, #0]
 8013344:	f840 3b04 	str.w	r3, [r0], #4
 8013348:	eba0 0009 	sub.w	r0, r0, r9
 801334c:	1080      	asrs	r0, r0, #2
 801334e:	0146      	lsls	r6, r0, #5
 8013350:	6120      	str	r0, [r4, #16]
 8013352:	4618      	mov	r0, r3
 8013354:	f000 fb5e 	bl	8013a14 <__hi0bits>
 8013358:	1a30      	subs	r0, r6, r0
 801335a:	f8d8 6000 	ldr.w	r6, [r8]
 801335e:	42b0      	cmp	r0, r6
 8013360:	dd63      	ble.n	801342a <__gethex+0x286>
 8013362:	1b87      	subs	r7, r0, r6
 8013364:	4639      	mov	r1, r7
 8013366:	4620      	mov	r0, r4
 8013368:	f000 ff02 	bl	8014170 <__any_on>
 801336c:	4682      	mov	sl, r0
 801336e:	b1a8      	cbz	r0, 801339c <__gethex+0x1f8>
 8013370:	1e7b      	subs	r3, r7, #1
 8013372:	1159      	asrs	r1, r3, #5
 8013374:	f003 021f 	and.w	r2, r3, #31
 8013378:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801337c:	f04f 0a01 	mov.w	sl, #1
 8013380:	fa0a f202 	lsl.w	r2, sl, r2
 8013384:	420a      	tst	r2, r1
 8013386:	d009      	beq.n	801339c <__gethex+0x1f8>
 8013388:	4553      	cmp	r3, sl
 801338a:	dd05      	ble.n	8013398 <__gethex+0x1f4>
 801338c:	1eb9      	subs	r1, r7, #2
 801338e:	4620      	mov	r0, r4
 8013390:	f000 feee 	bl	8014170 <__any_on>
 8013394:	2800      	cmp	r0, #0
 8013396:	d145      	bne.n	8013424 <__gethex+0x280>
 8013398:	f04f 0a02 	mov.w	sl, #2
 801339c:	4639      	mov	r1, r7
 801339e:	4620      	mov	r0, r4
 80133a0:	f7ff fe98 	bl	80130d4 <rshift>
 80133a4:	443d      	add	r5, r7
 80133a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80133aa:	42ab      	cmp	r3, r5
 80133ac:	da4c      	bge.n	8013448 <__gethex+0x2a4>
 80133ae:	ee18 0a10 	vmov	r0, s16
 80133b2:	4621      	mov	r1, r4
 80133b4:	f000 fa7c 	bl	80138b0 <_Bfree>
 80133b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80133ba:	2300      	movs	r3, #0
 80133bc:	6013      	str	r3, [r2, #0]
 80133be:	27a3      	movs	r7, #163	; 0xa3
 80133c0:	e785      	b.n	80132ce <__gethex+0x12a>
 80133c2:	1e73      	subs	r3, r6, #1
 80133c4:	9a05      	ldr	r2, [sp, #20]
 80133c6:	9303      	str	r3, [sp, #12]
 80133c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	d019      	beq.n	8013404 <__gethex+0x260>
 80133d0:	f1bb 0f20 	cmp.w	fp, #32
 80133d4:	d107      	bne.n	80133e6 <__gethex+0x242>
 80133d6:	9b02      	ldr	r3, [sp, #8]
 80133d8:	9a00      	ldr	r2, [sp, #0]
 80133da:	f843 2b04 	str.w	r2, [r3], #4
 80133de:	9302      	str	r3, [sp, #8]
 80133e0:	2300      	movs	r3, #0
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	469b      	mov	fp, r3
 80133e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80133ea:	f7ff fec5 	bl	8013178 <__hexdig_fun>
 80133ee:	9b00      	ldr	r3, [sp, #0]
 80133f0:	f000 000f 	and.w	r0, r0, #15
 80133f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80133f8:	4303      	orrs	r3, r0
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	f10b 0b04 	add.w	fp, fp, #4
 8013400:	9b03      	ldr	r3, [sp, #12]
 8013402:	e00d      	b.n	8013420 <__gethex+0x27c>
 8013404:	9b03      	ldr	r3, [sp, #12]
 8013406:	9a06      	ldr	r2, [sp, #24]
 8013408:	4413      	add	r3, r2
 801340a:	42bb      	cmp	r3, r7
 801340c:	d3e0      	bcc.n	80133d0 <__gethex+0x22c>
 801340e:	4618      	mov	r0, r3
 8013410:	9901      	ldr	r1, [sp, #4]
 8013412:	9307      	str	r3, [sp, #28]
 8013414:	4652      	mov	r2, sl
 8013416:	f001 fca7 	bl	8014d68 <strncmp>
 801341a:	9b07      	ldr	r3, [sp, #28]
 801341c:	2800      	cmp	r0, #0
 801341e:	d1d7      	bne.n	80133d0 <__gethex+0x22c>
 8013420:	461e      	mov	r6, r3
 8013422:	e78b      	b.n	801333c <__gethex+0x198>
 8013424:	f04f 0a03 	mov.w	sl, #3
 8013428:	e7b8      	b.n	801339c <__gethex+0x1f8>
 801342a:	da0a      	bge.n	8013442 <__gethex+0x29e>
 801342c:	1a37      	subs	r7, r6, r0
 801342e:	4621      	mov	r1, r4
 8013430:	ee18 0a10 	vmov	r0, s16
 8013434:	463a      	mov	r2, r7
 8013436:	f000 fc57 	bl	8013ce8 <__lshift>
 801343a:	1bed      	subs	r5, r5, r7
 801343c:	4604      	mov	r4, r0
 801343e:	f100 0914 	add.w	r9, r0, #20
 8013442:	f04f 0a00 	mov.w	sl, #0
 8013446:	e7ae      	b.n	80133a6 <__gethex+0x202>
 8013448:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801344c:	42a8      	cmp	r0, r5
 801344e:	dd72      	ble.n	8013536 <__gethex+0x392>
 8013450:	1b45      	subs	r5, r0, r5
 8013452:	42ae      	cmp	r6, r5
 8013454:	dc36      	bgt.n	80134c4 <__gethex+0x320>
 8013456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801345a:	2b02      	cmp	r3, #2
 801345c:	d02a      	beq.n	80134b4 <__gethex+0x310>
 801345e:	2b03      	cmp	r3, #3
 8013460:	d02c      	beq.n	80134bc <__gethex+0x318>
 8013462:	2b01      	cmp	r3, #1
 8013464:	d11c      	bne.n	80134a0 <__gethex+0x2fc>
 8013466:	42ae      	cmp	r6, r5
 8013468:	d11a      	bne.n	80134a0 <__gethex+0x2fc>
 801346a:	2e01      	cmp	r6, #1
 801346c:	d112      	bne.n	8013494 <__gethex+0x2f0>
 801346e:	9a04      	ldr	r2, [sp, #16]
 8013470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	2301      	movs	r3, #1
 8013478:	6123      	str	r3, [r4, #16]
 801347a:	f8c9 3000 	str.w	r3, [r9]
 801347e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013480:	2762      	movs	r7, #98	; 0x62
 8013482:	601c      	str	r4, [r3, #0]
 8013484:	e723      	b.n	80132ce <__gethex+0x12a>
 8013486:	bf00      	nop
 8013488:	080180e8 	.word	0x080180e8
 801348c:	08018070 	.word	0x08018070
 8013490:	08018081 	.word	0x08018081
 8013494:	1e71      	subs	r1, r6, #1
 8013496:	4620      	mov	r0, r4
 8013498:	f000 fe6a 	bl	8014170 <__any_on>
 801349c:	2800      	cmp	r0, #0
 801349e:	d1e6      	bne.n	801346e <__gethex+0x2ca>
 80134a0:	ee18 0a10 	vmov	r0, s16
 80134a4:	4621      	mov	r1, r4
 80134a6:	f000 fa03 	bl	80138b0 <_Bfree>
 80134aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80134ac:	2300      	movs	r3, #0
 80134ae:	6013      	str	r3, [r2, #0]
 80134b0:	2750      	movs	r7, #80	; 0x50
 80134b2:	e70c      	b.n	80132ce <__gethex+0x12a>
 80134b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d1f2      	bne.n	80134a0 <__gethex+0x2fc>
 80134ba:	e7d8      	b.n	801346e <__gethex+0x2ca>
 80134bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1d5      	bne.n	801346e <__gethex+0x2ca>
 80134c2:	e7ed      	b.n	80134a0 <__gethex+0x2fc>
 80134c4:	1e6f      	subs	r7, r5, #1
 80134c6:	f1ba 0f00 	cmp.w	sl, #0
 80134ca:	d131      	bne.n	8013530 <__gethex+0x38c>
 80134cc:	b127      	cbz	r7, 80134d8 <__gethex+0x334>
 80134ce:	4639      	mov	r1, r7
 80134d0:	4620      	mov	r0, r4
 80134d2:	f000 fe4d 	bl	8014170 <__any_on>
 80134d6:	4682      	mov	sl, r0
 80134d8:	117b      	asrs	r3, r7, #5
 80134da:	2101      	movs	r1, #1
 80134dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80134e0:	f007 071f 	and.w	r7, r7, #31
 80134e4:	fa01 f707 	lsl.w	r7, r1, r7
 80134e8:	421f      	tst	r7, r3
 80134ea:	4629      	mov	r1, r5
 80134ec:	4620      	mov	r0, r4
 80134ee:	bf18      	it	ne
 80134f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80134f4:	1b76      	subs	r6, r6, r5
 80134f6:	f7ff fded 	bl	80130d4 <rshift>
 80134fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80134fe:	2702      	movs	r7, #2
 8013500:	f1ba 0f00 	cmp.w	sl, #0
 8013504:	d048      	beq.n	8013598 <__gethex+0x3f4>
 8013506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801350a:	2b02      	cmp	r3, #2
 801350c:	d015      	beq.n	801353a <__gethex+0x396>
 801350e:	2b03      	cmp	r3, #3
 8013510:	d017      	beq.n	8013542 <__gethex+0x39e>
 8013512:	2b01      	cmp	r3, #1
 8013514:	d109      	bne.n	801352a <__gethex+0x386>
 8013516:	f01a 0f02 	tst.w	sl, #2
 801351a:	d006      	beq.n	801352a <__gethex+0x386>
 801351c:	f8d9 0000 	ldr.w	r0, [r9]
 8013520:	ea4a 0a00 	orr.w	sl, sl, r0
 8013524:	f01a 0f01 	tst.w	sl, #1
 8013528:	d10e      	bne.n	8013548 <__gethex+0x3a4>
 801352a:	f047 0710 	orr.w	r7, r7, #16
 801352e:	e033      	b.n	8013598 <__gethex+0x3f4>
 8013530:	f04f 0a01 	mov.w	sl, #1
 8013534:	e7d0      	b.n	80134d8 <__gethex+0x334>
 8013536:	2701      	movs	r7, #1
 8013538:	e7e2      	b.n	8013500 <__gethex+0x35c>
 801353a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801353c:	f1c3 0301 	rsb	r3, r3, #1
 8013540:	9315      	str	r3, [sp, #84]	; 0x54
 8013542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013544:	2b00      	cmp	r3, #0
 8013546:	d0f0      	beq.n	801352a <__gethex+0x386>
 8013548:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801354c:	f104 0314 	add.w	r3, r4, #20
 8013550:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013554:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013558:	f04f 0c00 	mov.w	ip, #0
 801355c:	4618      	mov	r0, r3
 801355e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013562:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013566:	d01c      	beq.n	80135a2 <__gethex+0x3fe>
 8013568:	3201      	adds	r2, #1
 801356a:	6002      	str	r2, [r0, #0]
 801356c:	2f02      	cmp	r7, #2
 801356e:	f104 0314 	add.w	r3, r4, #20
 8013572:	d13f      	bne.n	80135f4 <__gethex+0x450>
 8013574:	f8d8 2000 	ldr.w	r2, [r8]
 8013578:	3a01      	subs	r2, #1
 801357a:	42b2      	cmp	r2, r6
 801357c:	d10a      	bne.n	8013594 <__gethex+0x3f0>
 801357e:	1171      	asrs	r1, r6, #5
 8013580:	2201      	movs	r2, #1
 8013582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013586:	f006 061f 	and.w	r6, r6, #31
 801358a:	fa02 f606 	lsl.w	r6, r2, r6
 801358e:	421e      	tst	r6, r3
 8013590:	bf18      	it	ne
 8013592:	4617      	movne	r7, r2
 8013594:	f047 0720 	orr.w	r7, r7, #32
 8013598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801359a:	601c      	str	r4, [r3, #0]
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	601d      	str	r5, [r3, #0]
 80135a0:	e695      	b.n	80132ce <__gethex+0x12a>
 80135a2:	4299      	cmp	r1, r3
 80135a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80135a8:	d8d8      	bhi.n	801355c <__gethex+0x3b8>
 80135aa:	68a3      	ldr	r3, [r4, #8]
 80135ac:	459b      	cmp	fp, r3
 80135ae:	db19      	blt.n	80135e4 <__gethex+0x440>
 80135b0:	6861      	ldr	r1, [r4, #4]
 80135b2:	ee18 0a10 	vmov	r0, s16
 80135b6:	3101      	adds	r1, #1
 80135b8:	f000 f93a 	bl	8013830 <_Balloc>
 80135bc:	4681      	mov	r9, r0
 80135be:	b918      	cbnz	r0, 80135c8 <__gethex+0x424>
 80135c0:	4b1a      	ldr	r3, [pc, #104]	; (801362c <__gethex+0x488>)
 80135c2:	4602      	mov	r2, r0
 80135c4:	2184      	movs	r1, #132	; 0x84
 80135c6:	e6a8      	b.n	801331a <__gethex+0x176>
 80135c8:	6922      	ldr	r2, [r4, #16]
 80135ca:	3202      	adds	r2, #2
 80135cc:	f104 010c 	add.w	r1, r4, #12
 80135d0:	0092      	lsls	r2, r2, #2
 80135d2:	300c      	adds	r0, #12
 80135d4:	f000 f91e 	bl	8013814 <memcpy>
 80135d8:	4621      	mov	r1, r4
 80135da:	ee18 0a10 	vmov	r0, s16
 80135de:	f000 f967 	bl	80138b0 <_Bfree>
 80135e2:	464c      	mov	r4, r9
 80135e4:	6923      	ldr	r3, [r4, #16]
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80135ec:	6122      	str	r2, [r4, #16]
 80135ee:	2201      	movs	r2, #1
 80135f0:	615a      	str	r2, [r3, #20]
 80135f2:	e7bb      	b.n	801356c <__gethex+0x3c8>
 80135f4:	6922      	ldr	r2, [r4, #16]
 80135f6:	455a      	cmp	r2, fp
 80135f8:	dd0b      	ble.n	8013612 <__gethex+0x46e>
 80135fa:	2101      	movs	r1, #1
 80135fc:	4620      	mov	r0, r4
 80135fe:	f7ff fd69 	bl	80130d4 <rshift>
 8013602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013606:	3501      	adds	r5, #1
 8013608:	42ab      	cmp	r3, r5
 801360a:	f6ff aed0 	blt.w	80133ae <__gethex+0x20a>
 801360e:	2701      	movs	r7, #1
 8013610:	e7c0      	b.n	8013594 <__gethex+0x3f0>
 8013612:	f016 061f 	ands.w	r6, r6, #31
 8013616:	d0fa      	beq.n	801360e <__gethex+0x46a>
 8013618:	4453      	add	r3, sl
 801361a:	f1c6 0620 	rsb	r6, r6, #32
 801361e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013622:	f000 f9f7 	bl	8013a14 <__hi0bits>
 8013626:	42b0      	cmp	r0, r6
 8013628:	dbe7      	blt.n	80135fa <__gethex+0x456>
 801362a:	e7f0      	b.n	801360e <__gethex+0x46a>
 801362c:	08018070 	.word	0x08018070

08013630 <L_shift>:
 8013630:	f1c2 0208 	rsb	r2, r2, #8
 8013634:	0092      	lsls	r2, r2, #2
 8013636:	b570      	push	{r4, r5, r6, lr}
 8013638:	f1c2 0620 	rsb	r6, r2, #32
 801363c:	6843      	ldr	r3, [r0, #4]
 801363e:	6804      	ldr	r4, [r0, #0]
 8013640:	fa03 f506 	lsl.w	r5, r3, r6
 8013644:	432c      	orrs	r4, r5
 8013646:	40d3      	lsrs	r3, r2
 8013648:	6004      	str	r4, [r0, #0]
 801364a:	f840 3f04 	str.w	r3, [r0, #4]!
 801364e:	4288      	cmp	r0, r1
 8013650:	d3f4      	bcc.n	801363c <L_shift+0xc>
 8013652:	bd70      	pop	{r4, r5, r6, pc}

08013654 <__match>:
 8013654:	b530      	push	{r4, r5, lr}
 8013656:	6803      	ldr	r3, [r0, #0]
 8013658:	3301      	adds	r3, #1
 801365a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801365e:	b914      	cbnz	r4, 8013666 <__match+0x12>
 8013660:	6003      	str	r3, [r0, #0]
 8013662:	2001      	movs	r0, #1
 8013664:	bd30      	pop	{r4, r5, pc}
 8013666:	f813 2b01 	ldrb.w	r2, [r3], #1
 801366a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801366e:	2d19      	cmp	r5, #25
 8013670:	bf98      	it	ls
 8013672:	3220      	addls	r2, #32
 8013674:	42a2      	cmp	r2, r4
 8013676:	d0f0      	beq.n	801365a <__match+0x6>
 8013678:	2000      	movs	r0, #0
 801367a:	e7f3      	b.n	8013664 <__match+0x10>

0801367c <__hexnan>:
 801367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013680:	680b      	ldr	r3, [r1, #0]
 8013682:	115e      	asrs	r6, r3, #5
 8013684:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013688:	f013 031f 	ands.w	r3, r3, #31
 801368c:	b087      	sub	sp, #28
 801368e:	bf18      	it	ne
 8013690:	3604      	addne	r6, #4
 8013692:	2500      	movs	r5, #0
 8013694:	1f37      	subs	r7, r6, #4
 8013696:	4690      	mov	r8, r2
 8013698:	6802      	ldr	r2, [r0, #0]
 801369a:	9301      	str	r3, [sp, #4]
 801369c:	4682      	mov	sl, r0
 801369e:	f846 5c04 	str.w	r5, [r6, #-4]
 80136a2:	46b9      	mov	r9, r7
 80136a4:	463c      	mov	r4, r7
 80136a6:	9502      	str	r5, [sp, #8]
 80136a8:	46ab      	mov	fp, r5
 80136aa:	7851      	ldrb	r1, [r2, #1]
 80136ac:	1c53      	adds	r3, r2, #1
 80136ae:	9303      	str	r3, [sp, #12]
 80136b0:	b341      	cbz	r1, 8013704 <__hexnan+0x88>
 80136b2:	4608      	mov	r0, r1
 80136b4:	9205      	str	r2, [sp, #20]
 80136b6:	9104      	str	r1, [sp, #16]
 80136b8:	f7ff fd5e 	bl	8013178 <__hexdig_fun>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d14f      	bne.n	8013760 <__hexnan+0xe4>
 80136c0:	9904      	ldr	r1, [sp, #16]
 80136c2:	9a05      	ldr	r2, [sp, #20]
 80136c4:	2920      	cmp	r1, #32
 80136c6:	d818      	bhi.n	80136fa <__hexnan+0x7e>
 80136c8:	9b02      	ldr	r3, [sp, #8]
 80136ca:	459b      	cmp	fp, r3
 80136cc:	dd13      	ble.n	80136f6 <__hexnan+0x7a>
 80136ce:	454c      	cmp	r4, r9
 80136d0:	d206      	bcs.n	80136e0 <__hexnan+0x64>
 80136d2:	2d07      	cmp	r5, #7
 80136d4:	dc04      	bgt.n	80136e0 <__hexnan+0x64>
 80136d6:	462a      	mov	r2, r5
 80136d8:	4649      	mov	r1, r9
 80136da:	4620      	mov	r0, r4
 80136dc:	f7ff ffa8 	bl	8013630 <L_shift>
 80136e0:	4544      	cmp	r4, r8
 80136e2:	d950      	bls.n	8013786 <__hexnan+0x10a>
 80136e4:	2300      	movs	r3, #0
 80136e6:	f1a4 0904 	sub.w	r9, r4, #4
 80136ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80136ee:	f8cd b008 	str.w	fp, [sp, #8]
 80136f2:	464c      	mov	r4, r9
 80136f4:	461d      	mov	r5, r3
 80136f6:	9a03      	ldr	r2, [sp, #12]
 80136f8:	e7d7      	b.n	80136aa <__hexnan+0x2e>
 80136fa:	2929      	cmp	r1, #41	; 0x29
 80136fc:	d156      	bne.n	80137ac <__hexnan+0x130>
 80136fe:	3202      	adds	r2, #2
 8013700:	f8ca 2000 	str.w	r2, [sl]
 8013704:	f1bb 0f00 	cmp.w	fp, #0
 8013708:	d050      	beq.n	80137ac <__hexnan+0x130>
 801370a:	454c      	cmp	r4, r9
 801370c:	d206      	bcs.n	801371c <__hexnan+0xa0>
 801370e:	2d07      	cmp	r5, #7
 8013710:	dc04      	bgt.n	801371c <__hexnan+0xa0>
 8013712:	462a      	mov	r2, r5
 8013714:	4649      	mov	r1, r9
 8013716:	4620      	mov	r0, r4
 8013718:	f7ff ff8a 	bl	8013630 <L_shift>
 801371c:	4544      	cmp	r4, r8
 801371e:	d934      	bls.n	801378a <__hexnan+0x10e>
 8013720:	f1a8 0204 	sub.w	r2, r8, #4
 8013724:	4623      	mov	r3, r4
 8013726:	f853 1b04 	ldr.w	r1, [r3], #4
 801372a:	f842 1f04 	str.w	r1, [r2, #4]!
 801372e:	429f      	cmp	r7, r3
 8013730:	d2f9      	bcs.n	8013726 <__hexnan+0xaa>
 8013732:	1b3b      	subs	r3, r7, r4
 8013734:	f023 0303 	bic.w	r3, r3, #3
 8013738:	3304      	adds	r3, #4
 801373a:	3401      	adds	r4, #1
 801373c:	3e03      	subs	r6, #3
 801373e:	42b4      	cmp	r4, r6
 8013740:	bf88      	it	hi
 8013742:	2304      	movhi	r3, #4
 8013744:	4443      	add	r3, r8
 8013746:	2200      	movs	r2, #0
 8013748:	f843 2b04 	str.w	r2, [r3], #4
 801374c:	429f      	cmp	r7, r3
 801374e:	d2fb      	bcs.n	8013748 <__hexnan+0xcc>
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	b91b      	cbnz	r3, 801375c <__hexnan+0xe0>
 8013754:	4547      	cmp	r7, r8
 8013756:	d127      	bne.n	80137a8 <__hexnan+0x12c>
 8013758:	2301      	movs	r3, #1
 801375a:	603b      	str	r3, [r7, #0]
 801375c:	2005      	movs	r0, #5
 801375e:	e026      	b.n	80137ae <__hexnan+0x132>
 8013760:	3501      	adds	r5, #1
 8013762:	2d08      	cmp	r5, #8
 8013764:	f10b 0b01 	add.w	fp, fp, #1
 8013768:	dd06      	ble.n	8013778 <__hexnan+0xfc>
 801376a:	4544      	cmp	r4, r8
 801376c:	d9c3      	bls.n	80136f6 <__hexnan+0x7a>
 801376e:	2300      	movs	r3, #0
 8013770:	f844 3c04 	str.w	r3, [r4, #-4]
 8013774:	2501      	movs	r5, #1
 8013776:	3c04      	subs	r4, #4
 8013778:	6822      	ldr	r2, [r4, #0]
 801377a:	f000 000f 	and.w	r0, r0, #15
 801377e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013782:	6022      	str	r2, [r4, #0]
 8013784:	e7b7      	b.n	80136f6 <__hexnan+0x7a>
 8013786:	2508      	movs	r5, #8
 8013788:	e7b5      	b.n	80136f6 <__hexnan+0x7a>
 801378a:	9b01      	ldr	r3, [sp, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d0df      	beq.n	8013750 <__hexnan+0xd4>
 8013790:	f04f 32ff 	mov.w	r2, #4294967295
 8013794:	f1c3 0320 	rsb	r3, r3, #32
 8013798:	fa22 f303 	lsr.w	r3, r2, r3
 801379c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80137a0:	401a      	ands	r2, r3
 80137a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80137a6:	e7d3      	b.n	8013750 <__hexnan+0xd4>
 80137a8:	3f04      	subs	r7, #4
 80137aa:	e7d1      	b.n	8013750 <__hexnan+0xd4>
 80137ac:	2004      	movs	r0, #4
 80137ae:	b007      	add	sp, #28
 80137b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137b4 <_localeconv_r>:
 80137b4:	4800      	ldr	r0, [pc, #0]	; (80137b8 <_localeconv_r+0x4>)
 80137b6:	4770      	bx	lr
 80137b8:	20000184 	.word	0x20000184

080137bc <_lseek_r>:
 80137bc:	b538      	push	{r3, r4, r5, lr}
 80137be:	4d07      	ldr	r5, [pc, #28]	; (80137dc <_lseek_r+0x20>)
 80137c0:	4604      	mov	r4, r0
 80137c2:	4608      	mov	r0, r1
 80137c4:	4611      	mov	r1, r2
 80137c6:	2200      	movs	r2, #0
 80137c8:	602a      	str	r2, [r5, #0]
 80137ca:	461a      	mov	r2, r3
 80137cc:	f7f2 ffca 	bl	8006764 <_lseek>
 80137d0:	1c43      	adds	r3, r0, #1
 80137d2:	d102      	bne.n	80137da <_lseek_r+0x1e>
 80137d4:	682b      	ldr	r3, [r5, #0]
 80137d6:	b103      	cbz	r3, 80137da <_lseek_r+0x1e>
 80137d8:	6023      	str	r3, [r4, #0]
 80137da:	bd38      	pop	{r3, r4, r5, pc}
 80137dc:	20004954 	.word	0x20004954

080137e0 <malloc>:
 80137e0:	4b02      	ldr	r3, [pc, #8]	; (80137ec <malloc+0xc>)
 80137e2:	4601      	mov	r1, r0
 80137e4:	6818      	ldr	r0, [r3, #0]
 80137e6:	f000 bd67 	b.w	80142b8 <_malloc_r>
 80137ea:	bf00      	nop
 80137ec:	2000002c 	.word	0x2000002c

080137f0 <__ascii_mbtowc>:
 80137f0:	b082      	sub	sp, #8
 80137f2:	b901      	cbnz	r1, 80137f6 <__ascii_mbtowc+0x6>
 80137f4:	a901      	add	r1, sp, #4
 80137f6:	b142      	cbz	r2, 801380a <__ascii_mbtowc+0x1a>
 80137f8:	b14b      	cbz	r3, 801380e <__ascii_mbtowc+0x1e>
 80137fa:	7813      	ldrb	r3, [r2, #0]
 80137fc:	600b      	str	r3, [r1, #0]
 80137fe:	7812      	ldrb	r2, [r2, #0]
 8013800:	1e10      	subs	r0, r2, #0
 8013802:	bf18      	it	ne
 8013804:	2001      	movne	r0, #1
 8013806:	b002      	add	sp, #8
 8013808:	4770      	bx	lr
 801380a:	4610      	mov	r0, r2
 801380c:	e7fb      	b.n	8013806 <__ascii_mbtowc+0x16>
 801380e:	f06f 0001 	mvn.w	r0, #1
 8013812:	e7f8      	b.n	8013806 <__ascii_mbtowc+0x16>

08013814 <memcpy>:
 8013814:	440a      	add	r2, r1
 8013816:	4291      	cmp	r1, r2
 8013818:	f100 33ff 	add.w	r3, r0, #4294967295
 801381c:	d100      	bne.n	8013820 <memcpy+0xc>
 801381e:	4770      	bx	lr
 8013820:	b510      	push	{r4, lr}
 8013822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013826:	f803 4f01 	strb.w	r4, [r3, #1]!
 801382a:	4291      	cmp	r1, r2
 801382c:	d1f9      	bne.n	8013822 <memcpy+0xe>
 801382e:	bd10      	pop	{r4, pc}

08013830 <_Balloc>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013834:	4604      	mov	r4, r0
 8013836:	460d      	mov	r5, r1
 8013838:	b976      	cbnz	r6, 8013858 <_Balloc+0x28>
 801383a:	2010      	movs	r0, #16
 801383c:	f7ff ffd0 	bl	80137e0 <malloc>
 8013840:	4602      	mov	r2, r0
 8013842:	6260      	str	r0, [r4, #36]	; 0x24
 8013844:	b920      	cbnz	r0, 8013850 <_Balloc+0x20>
 8013846:	4b18      	ldr	r3, [pc, #96]	; (80138a8 <_Balloc+0x78>)
 8013848:	4818      	ldr	r0, [pc, #96]	; (80138ac <_Balloc+0x7c>)
 801384a:	2166      	movs	r1, #102	; 0x66
 801384c:	f001 fb5c 	bl	8014f08 <__assert_func>
 8013850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013854:	6006      	str	r6, [r0, #0]
 8013856:	60c6      	str	r6, [r0, #12]
 8013858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801385a:	68f3      	ldr	r3, [r6, #12]
 801385c:	b183      	cbz	r3, 8013880 <_Balloc+0x50>
 801385e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013866:	b9b8      	cbnz	r0, 8013898 <_Balloc+0x68>
 8013868:	2101      	movs	r1, #1
 801386a:	fa01 f605 	lsl.w	r6, r1, r5
 801386e:	1d72      	adds	r2, r6, #5
 8013870:	0092      	lsls	r2, r2, #2
 8013872:	4620      	mov	r0, r4
 8013874:	f000 fc9d 	bl	80141b2 <_calloc_r>
 8013878:	b160      	cbz	r0, 8013894 <_Balloc+0x64>
 801387a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801387e:	e00e      	b.n	801389e <_Balloc+0x6e>
 8013880:	2221      	movs	r2, #33	; 0x21
 8013882:	2104      	movs	r1, #4
 8013884:	4620      	mov	r0, r4
 8013886:	f000 fc94 	bl	80141b2 <_calloc_r>
 801388a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801388c:	60f0      	str	r0, [r6, #12]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d1e4      	bne.n	801385e <_Balloc+0x2e>
 8013894:	2000      	movs	r0, #0
 8013896:	bd70      	pop	{r4, r5, r6, pc}
 8013898:	6802      	ldr	r2, [r0, #0]
 801389a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801389e:	2300      	movs	r3, #0
 80138a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138a4:	e7f7      	b.n	8013896 <_Balloc+0x66>
 80138a6:	bf00      	nop
 80138a8:	08017ffe 	.word	0x08017ffe
 80138ac:	080180fc 	.word	0x080180fc

080138b0 <_Bfree>:
 80138b0:	b570      	push	{r4, r5, r6, lr}
 80138b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138b4:	4605      	mov	r5, r0
 80138b6:	460c      	mov	r4, r1
 80138b8:	b976      	cbnz	r6, 80138d8 <_Bfree+0x28>
 80138ba:	2010      	movs	r0, #16
 80138bc:	f7ff ff90 	bl	80137e0 <malloc>
 80138c0:	4602      	mov	r2, r0
 80138c2:	6268      	str	r0, [r5, #36]	; 0x24
 80138c4:	b920      	cbnz	r0, 80138d0 <_Bfree+0x20>
 80138c6:	4b09      	ldr	r3, [pc, #36]	; (80138ec <_Bfree+0x3c>)
 80138c8:	4809      	ldr	r0, [pc, #36]	; (80138f0 <_Bfree+0x40>)
 80138ca:	218a      	movs	r1, #138	; 0x8a
 80138cc:	f001 fb1c 	bl	8014f08 <__assert_func>
 80138d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138d4:	6006      	str	r6, [r0, #0]
 80138d6:	60c6      	str	r6, [r0, #12]
 80138d8:	b13c      	cbz	r4, 80138ea <_Bfree+0x3a>
 80138da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138dc:	6862      	ldr	r2, [r4, #4]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138e4:	6021      	str	r1, [r4, #0]
 80138e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138ea:	bd70      	pop	{r4, r5, r6, pc}
 80138ec:	08017ffe 	.word	0x08017ffe
 80138f0:	080180fc 	.word	0x080180fc

080138f4 <__multadd>:
 80138f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f8:	690d      	ldr	r5, [r1, #16]
 80138fa:	4607      	mov	r7, r0
 80138fc:	460c      	mov	r4, r1
 80138fe:	461e      	mov	r6, r3
 8013900:	f101 0c14 	add.w	ip, r1, #20
 8013904:	2000      	movs	r0, #0
 8013906:	f8dc 3000 	ldr.w	r3, [ip]
 801390a:	b299      	uxth	r1, r3
 801390c:	fb02 6101 	mla	r1, r2, r1, r6
 8013910:	0c1e      	lsrs	r6, r3, #16
 8013912:	0c0b      	lsrs	r3, r1, #16
 8013914:	fb02 3306 	mla	r3, r2, r6, r3
 8013918:	b289      	uxth	r1, r1
 801391a:	3001      	adds	r0, #1
 801391c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013920:	4285      	cmp	r5, r0
 8013922:	f84c 1b04 	str.w	r1, [ip], #4
 8013926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801392a:	dcec      	bgt.n	8013906 <__multadd+0x12>
 801392c:	b30e      	cbz	r6, 8013972 <__multadd+0x7e>
 801392e:	68a3      	ldr	r3, [r4, #8]
 8013930:	42ab      	cmp	r3, r5
 8013932:	dc19      	bgt.n	8013968 <__multadd+0x74>
 8013934:	6861      	ldr	r1, [r4, #4]
 8013936:	4638      	mov	r0, r7
 8013938:	3101      	adds	r1, #1
 801393a:	f7ff ff79 	bl	8013830 <_Balloc>
 801393e:	4680      	mov	r8, r0
 8013940:	b928      	cbnz	r0, 801394e <__multadd+0x5a>
 8013942:	4602      	mov	r2, r0
 8013944:	4b0c      	ldr	r3, [pc, #48]	; (8013978 <__multadd+0x84>)
 8013946:	480d      	ldr	r0, [pc, #52]	; (801397c <__multadd+0x88>)
 8013948:	21b5      	movs	r1, #181	; 0xb5
 801394a:	f001 fadd 	bl	8014f08 <__assert_func>
 801394e:	6922      	ldr	r2, [r4, #16]
 8013950:	3202      	adds	r2, #2
 8013952:	f104 010c 	add.w	r1, r4, #12
 8013956:	0092      	lsls	r2, r2, #2
 8013958:	300c      	adds	r0, #12
 801395a:	f7ff ff5b 	bl	8013814 <memcpy>
 801395e:	4621      	mov	r1, r4
 8013960:	4638      	mov	r0, r7
 8013962:	f7ff ffa5 	bl	80138b0 <_Bfree>
 8013966:	4644      	mov	r4, r8
 8013968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801396c:	3501      	adds	r5, #1
 801396e:	615e      	str	r6, [r3, #20]
 8013970:	6125      	str	r5, [r4, #16]
 8013972:	4620      	mov	r0, r4
 8013974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013978:	08018070 	.word	0x08018070
 801397c:	080180fc 	.word	0x080180fc

08013980 <__s2b>:
 8013980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013984:	460c      	mov	r4, r1
 8013986:	4615      	mov	r5, r2
 8013988:	461f      	mov	r7, r3
 801398a:	2209      	movs	r2, #9
 801398c:	3308      	adds	r3, #8
 801398e:	4606      	mov	r6, r0
 8013990:	fb93 f3f2 	sdiv	r3, r3, r2
 8013994:	2100      	movs	r1, #0
 8013996:	2201      	movs	r2, #1
 8013998:	429a      	cmp	r2, r3
 801399a:	db09      	blt.n	80139b0 <__s2b+0x30>
 801399c:	4630      	mov	r0, r6
 801399e:	f7ff ff47 	bl	8013830 <_Balloc>
 80139a2:	b940      	cbnz	r0, 80139b6 <__s2b+0x36>
 80139a4:	4602      	mov	r2, r0
 80139a6:	4b19      	ldr	r3, [pc, #100]	; (8013a0c <__s2b+0x8c>)
 80139a8:	4819      	ldr	r0, [pc, #100]	; (8013a10 <__s2b+0x90>)
 80139aa:	21ce      	movs	r1, #206	; 0xce
 80139ac:	f001 faac 	bl	8014f08 <__assert_func>
 80139b0:	0052      	lsls	r2, r2, #1
 80139b2:	3101      	adds	r1, #1
 80139b4:	e7f0      	b.n	8013998 <__s2b+0x18>
 80139b6:	9b08      	ldr	r3, [sp, #32]
 80139b8:	6143      	str	r3, [r0, #20]
 80139ba:	2d09      	cmp	r5, #9
 80139bc:	f04f 0301 	mov.w	r3, #1
 80139c0:	6103      	str	r3, [r0, #16]
 80139c2:	dd16      	ble.n	80139f2 <__s2b+0x72>
 80139c4:	f104 0909 	add.w	r9, r4, #9
 80139c8:	46c8      	mov	r8, r9
 80139ca:	442c      	add	r4, r5
 80139cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139d0:	4601      	mov	r1, r0
 80139d2:	3b30      	subs	r3, #48	; 0x30
 80139d4:	220a      	movs	r2, #10
 80139d6:	4630      	mov	r0, r6
 80139d8:	f7ff ff8c 	bl	80138f4 <__multadd>
 80139dc:	45a0      	cmp	r8, r4
 80139de:	d1f5      	bne.n	80139cc <__s2b+0x4c>
 80139e0:	f1a5 0408 	sub.w	r4, r5, #8
 80139e4:	444c      	add	r4, r9
 80139e6:	1b2d      	subs	r5, r5, r4
 80139e8:	1963      	adds	r3, r4, r5
 80139ea:	42bb      	cmp	r3, r7
 80139ec:	db04      	blt.n	80139f8 <__s2b+0x78>
 80139ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f2:	340a      	adds	r4, #10
 80139f4:	2509      	movs	r5, #9
 80139f6:	e7f6      	b.n	80139e6 <__s2b+0x66>
 80139f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80139fc:	4601      	mov	r1, r0
 80139fe:	3b30      	subs	r3, #48	; 0x30
 8013a00:	220a      	movs	r2, #10
 8013a02:	4630      	mov	r0, r6
 8013a04:	f7ff ff76 	bl	80138f4 <__multadd>
 8013a08:	e7ee      	b.n	80139e8 <__s2b+0x68>
 8013a0a:	bf00      	nop
 8013a0c:	08018070 	.word	0x08018070
 8013a10:	080180fc 	.word	0x080180fc

08013a14 <__hi0bits>:
 8013a14:	0c03      	lsrs	r3, r0, #16
 8013a16:	041b      	lsls	r3, r3, #16
 8013a18:	b9d3      	cbnz	r3, 8013a50 <__hi0bits+0x3c>
 8013a1a:	0400      	lsls	r0, r0, #16
 8013a1c:	2310      	movs	r3, #16
 8013a1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a22:	bf04      	itt	eq
 8013a24:	0200      	lsleq	r0, r0, #8
 8013a26:	3308      	addeq	r3, #8
 8013a28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a2c:	bf04      	itt	eq
 8013a2e:	0100      	lsleq	r0, r0, #4
 8013a30:	3304      	addeq	r3, #4
 8013a32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a36:	bf04      	itt	eq
 8013a38:	0080      	lsleq	r0, r0, #2
 8013a3a:	3302      	addeq	r3, #2
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	db05      	blt.n	8013a4c <__hi0bits+0x38>
 8013a40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a44:	f103 0301 	add.w	r3, r3, #1
 8013a48:	bf08      	it	eq
 8013a4a:	2320      	moveq	r3, #32
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	4770      	bx	lr
 8013a50:	2300      	movs	r3, #0
 8013a52:	e7e4      	b.n	8013a1e <__hi0bits+0xa>

08013a54 <__lo0bits>:
 8013a54:	6803      	ldr	r3, [r0, #0]
 8013a56:	f013 0207 	ands.w	r2, r3, #7
 8013a5a:	4601      	mov	r1, r0
 8013a5c:	d00b      	beq.n	8013a76 <__lo0bits+0x22>
 8013a5e:	07da      	lsls	r2, r3, #31
 8013a60:	d423      	bmi.n	8013aaa <__lo0bits+0x56>
 8013a62:	0798      	lsls	r0, r3, #30
 8013a64:	bf49      	itett	mi
 8013a66:	085b      	lsrmi	r3, r3, #1
 8013a68:	089b      	lsrpl	r3, r3, #2
 8013a6a:	2001      	movmi	r0, #1
 8013a6c:	600b      	strmi	r3, [r1, #0]
 8013a6e:	bf5c      	itt	pl
 8013a70:	600b      	strpl	r3, [r1, #0]
 8013a72:	2002      	movpl	r0, #2
 8013a74:	4770      	bx	lr
 8013a76:	b298      	uxth	r0, r3
 8013a78:	b9a8      	cbnz	r0, 8013aa6 <__lo0bits+0x52>
 8013a7a:	0c1b      	lsrs	r3, r3, #16
 8013a7c:	2010      	movs	r0, #16
 8013a7e:	b2da      	uxtb	r2, r3
 8013a80:	b90a      	cbnz	r2, 8013a86 <__lo0bits+0x32>
 8013a82:	3008      	adds	r0, #8
 8013a84:	0a1b      	lsrs	r3, r3, #8
 8013a86:	071a      	lsls	r2, r3, #28
 8013a88:	bf04      	itt	eq
 8013a8a:	091b      	lsreq	r3, r3, #4
 8013a8c:	3004      	addeq	r0, #4
 8013a8e:	079a      	lsls	r2, r3, #30
 8013a90:	bf04      	itt	eq
 8013a92:	089b      	lsreq	r3, r3, #2
 8013a94:	3002      	addeq	r0, #2
 8013a96:	07da      	lsls	r2, r3, #31
 8013a98:	d403      	bmi.n	8013aa2 <__lo0bits+0x4e>
 8013a9a:	085b      	lsrs	r3, r3, #1
 8013a9c:	f100 0001 	add.w	r0, r0, #1
 8013aa0:	d005      	beq.n	8013aae <__lo0bits+0x5a>
 8013aa2:	600b      	str	r3, [r1, #0]
 8013aa4:	4770      	bx	lr
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	e7e9      	b.n	8013a7e <__lo0bits+0x2a>
 8013aaa:	2000      	movs	r0, #0
 8013aac:	4770      	bx	lr
 8013aae:	2020      	movs	r0, #32
 8013ab0:	4770      	bx	lr
	...

08013ab4 <__i2b>:
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	460c      	mov	r4, r1
 8013ab8:	2101      	movs	r1, #1
 8013aba:	f7ff feb9 	bl	8013830 <_Balloc>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	b928      	cbnz	r0, 8013ace <__i2b+0x1a>
 8013ac2:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <__i2b+0x24>)
 8013ac4:	4805      	ldr	r0, [pc, #20]	; (8013adc <__i2b+0x28>)
 8013ac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013aca:	f001 fa1d 	bl	8014f08 <__assert_func>
 8013ace:	2301      	movs	r3, #1
 8013ad0:	6144      	str	r4, [r0, #20]
 8013ad2:	6103      	str	r3, [r0, #16]
 8013ad4:	bd10      	pop	{r4, pc}
 8013ad6:	bf00      	nop
 8013ad8:	08018070 	.word	0x08018070
 8013adc:	080180fc 	.word	0x080180fc

08013ae0 <__multiply>:
 8013ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae4:	4691      	mov	r9, r2
 8013ae6:	690a      	ldr	r2, [r1, #16]
 8013ae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	bfb8      	it	lt
 8013af0:	460b      	movlt	r3, r1
 8013af2:	460c      	mov	r4, r1
 8013af4:	bfbc      	itt	lt
 8013af6:	464c      	movlt	r4, r9
 8013af8:	4699      	movlt	r9, r3
 8013afa:	6927      	ldr	r7, [r4, #16]
 8013afc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b00:	68a3      	ldr	r3, [r4, #8]
 8013b02:	6861      	ldr	r1, [r4, #4]
 8013b04:	eb07 060a 	add.w	r6, r7, sl
 8013b08:	42b3      	cmp	r3, r6
 8013b0a:	b085      	sub	sp, #20
 8013b0c:	bfb8      	it	lt
 8013b0e:	3101      	addlt	r1, #1
 8013b10:	f7ff fe8e 	bl	8013830 <_Balloc>
 8013b14:	b930      	cbnz	r0, 8013b24 <__multiply+0x44>
 8013b16:	4602      	mov	r2, r0
 8013b18:	4b44      	ldr	r3, [pc, #272]	; (8013c2c <__multiply+0x14c>)
 8013b1a:	4845      	ldr	r0, [pc, #276]	; (8013c30 <__multiply+0x150>)
 8013b1c:	f240 115d 	movw	r1, #349	; 0x15d
 8013b20:	f001 f9f2 	bl	8014f08 <__assert_func>
 8013b24:	f100 0514 	add.w	r5, r0, #20
 8013b28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b2c:	462b      	mov	r3, r5
 8013b2e:	2200      	movs	r2, #0
 8013b30:	4543      	cmp	r3, r8
 8013b32:	d321      	bcc.n	8013b78 <__multiply+0x98>
 8013b34:	f104 0314 	add.w	r3, r4, #20
 8013b38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b3c:	f109 0314 	add.w	r3, r9, #20
 8013b40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b44:	9202      	str	r2, [sp, #8]
 8013b46:	1b3a      	subs	r2, r7, r4
 8013b48:	3a15      	subs	r2, #21
 8013b4a:	f022 0203 	bic.w	r2, r2, #3
 8013b4e:	3204      	adds	r2, #4
 8013b50:	f104 0115 	add.w	r1, r4, #21
 8013b54:	428f      	cmp	r7, r1
 8013b56:	bf38      	it	cc
 8013b58:	2204      	movcc	r2, #4
 8013b5a:	9201      	str	r2, [sp, #4]
 8013b5c:	9a02      	ldr	r2, [sp, #8]
 8013b5e:	9303      	str	r3, [sp, #12]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d80c      	bhi.n	8013b7e <__multiply+0x9e>
 8013b64:	2e00      	cmp	r6, #0
 8013b66:	dd03      	ble.n	8013b70 <__multiply+0x90>
 8013b68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d05a      	beq.n	8013c26 <__multiply+0x146>
 8013b70:	6106      	str	r6, [r0, #16]
 8013b72:	b005      	add	sp, #20
 8013b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b78:	f843 2b04 	str.w	r2, [r3], #4
 8013b7c:	e7d8      	b.n	8013b30 <__multiply+0x50>
 8013b7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b82:	f1ba 0f00 	cmp.w	sl, #0
 8013b86:	d024      	beq.n	8013bd2 <__multiply+0xf2>
 8013b88:	f104 0e14 	add.w	lr, r4, #20
 8013b8c:	46a9      	mov	r9, r5
 8013b8e:	f04f 0c00 	mov.w	ip, #0
 8013b92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b96:	f8d9 1000 	ldr.w	r1, [r9]
 8013b9a:	fa1f fb82 	uxth.w	fp, r2
 8013b9e:	b289      	uxth	r1, r1
 8013ba0:	fb0a 110b 	mla	r1, sl, fp, r1
 8013ba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8013bac:	4461      	add	r1, ip
 8013bae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8013bb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bba:	b289      	uxth	r1, r1
 8013bbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bc0:	4577      	cmp	r7, lr
 8013bc2:	f849 1b04 	str.w	r1, [r9], #4
 8013bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bca:	d8e2      	bhi.n	8013b92 <__multiply+0xb2>
 8013bcc:	9a01      	ldr	r2, [sp, #4]
 8013bce:	f845 c002 	str.w	ip, [r5, r2]
 8013bd2:	9a03      	ldr	r2, [sp, #12]
 8013bd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	f1b9 0f00 	cmp.w	r9, #0
 8013bde:	d020      	beq.n	8013c22 <__multiply+0x142>
 8013be0:	6829      	ldr	r1, [r5, #0]
 8013be2:	f104 0c14 	add.w	ip, r4, #20
 8013be6:	46ae      	mov	lr, r5
 8013be8:	f04f 0a00 	mov.w	sl, #0
 8013bec:	f8bc b000 	ldrh.w	fp, [ip]
 8013bf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bf4:	fb09 220b 	mla	r2, r9, fp, r2
 8013bf8:	4492      	add	sl, r2
 8013bfa:	b289      	uxth	r1, r1
 8013bfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013c00:	f84e 1b04 	str.w	r1, [lr], #4
 8013c04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013c08:	f8be 1000 	ldrh.w	r1, [lr]
 8013c0c:	0c12      	lsrs	r2, r2, #16
 8013c0e:	fb09 1102 	mla	r1, r9, r2, r1
 8013c12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013c16:	4567      	cmp	r7, ip
 8013c18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c1c:	d8e6      	bhi.n	8013bec <__multiply+0x10c>
 8013c1e:	9a01      	ldr	r2, [sp, #4]
 8013c20:	50a9      	str	r1, [r5, r2]
 8013c22:	3504      	adds	r5, #4
 8013c24:	e79a      	b.n	8013b5c <__multiply+0x7c>
 8013c26:	3e01      	subs	r6, #1
 8013c28:	e79c      	b.n	8013b64 <__multiply+0x84>
 8013c2a:	bf00      	nop
 8013c2c:	08018070 	.word	0x08018070
 8013c30:	080180fc 	.word	0x080180fc

08013c34 <__pow5mult>:
 8013c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c38:	4615      	mov	r5, r2
 8013c3a:	f012 0203 	ands.w	r2, r2, #3
 8013c3e:	4606      	mov	r6, r0
 8013c40:	460f      	mov	r7, r1
 8013c42:	d007      	beq.n	8013c54 <__pow5mult+0x20>
 8013c44:	4c25      	ldr	r4, [pc, #148]	; (8013cdc <__pow5mult+0xa8>)
 8013c46:	3a01      	subs	r2, #1
 8013c48:	2300      	movs	r3, #0
 8013c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c4e:	f7ff fe51 	bl	80138f4 <__multadd>
 8013c52:	4607      	mov	r7, r0
 8013c54:	10ad      	asrs	r5, r5, #2
 8013c56:	d03d      	beq.n	8013cd4 <__pow5mult+0xa0>
 8013c58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c5a:	b97c      	cbnz	r4, 8013c7c <__pow5mult+0x48>
 8013c5c:	2010      	movs	r0, #16
 8013c5e:	f7ff fdbf 	bl	80137e0 <malloc>
 8013c62:	4602      	mov	r2, r0
 8013c64:	6270      	str	r0, [r6, #36]	; 0x24
 8013c66:	b928      	cbnz	r0, 8013c74 <__pow5mult+0x40>
 8013c68:	4b1d      	ldr	r3, [pc, #116]	; (8013ce0 <__pow5mult+0xac>)
 8013c6a:	481e      	ldr	r0, [pc, #120]	; (8013ce4 <__pow5mult+0xb0>)
 8013c6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c70:	f001 f94a 	bl	8014f08 <__assert_func>
 8013c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c78:	6004      	str	r4, [r0, #0]
 8013c7a:	60c4      	str	r4, [r0, #12]
 8013c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c84:	b94c      	cbnz	r4, 8013c9a <__pow5mult+0x66>
 8013c86:	f240 2171 	movw	r1, #625	; 0x271
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	f7ff ff12 	bl	8013ab4 <__i2b>
 8013c90:	2300      	movs	r3, #0
 8013c92:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c96:	4604      	mov	r4, r0
 8013c98:	6003      	str	r3, [r0, #0]
 8013c9a:	f04f 0900 	mov.w	r9, #0
 8013c9e:	07eb      	lsls	r3, r5, #31
 8013ca0:	d50a      	bpl.n	8013cb8 <__pow5mult+0x84>
 8013ca2:	4639      	mov	r1, r7
 8013ca4:	4622      	mov	r2, r4
 8013ca6:	4630      	mov	r0, r6
 8013ca8:	f7ff ff1a 	bl	8013ae0 <__multiply>
 8013cac:	4639      	mov	r1, r7
 8013cae:	4680      	mov	r8, r0
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f7ff fdfd 	bl	80138b0 <_Bfree>
 8013cb6:	4647      	mov	r7, r8
 8013cb8:	106d      	asrs	r5, r5, #1
 8013cba:	d00b      	beq.n	8013cd4 <__pow5mult+0xa0>
 8013cbc:	6820      	ldr	r0, [r4, #0]
 8013cbe:	b938      	cbnz	r0, 8013cd0 <__pow5mult+0x9c>
 8013cc0:	4622      	mov	r2, r4
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ff ff0b 	bl	8013ae0 <__multiply>
 8013cca:	6020      	str	r0, [r4, #0]
 8013ccc:	f8c0 9000 	str.w	r9, [r0]
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	e7e4      	b.n	8013c9e <__pow5mult+0x6a>
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cda:	bf00      	nop
 8013cdc:	08018248 	.word	0x08018248
 8013ce0:	08017ffe 	.word	0x08017ffe
 8013ce4:	080180fc 	.word	0x080180fc

08013ce8 <__lshift>:
 8013ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cec:	460c      	mov	r4, r1
 8013cee:	6849      	ldr	r1, [r1, #4]
 8013cf0:	6923      	ldr	r3, [r4, #16]
 8013cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cf6:	68a3      	ldr	r3, [r4, #8]
 8013cf8:	4607      	mov	r7, r0
 8013cfa:	4691      	mov	r9, r2
 8013cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d00:	f108 0601 	add.w	r6, r8, #1
 8013d04:	42b3      	cmp	r3, r6
 8013d06:	db0b      	blt.n	8013d20 <__lshift+0x38>
 8013d08:	4638      	mov	r0, r7
 8013d0a:	f7ff fd91 	bl	8013830 <_Balloc>
 8013d0e:	4605      	mov	r5, r0
 8013d10:	b948      	cbnz	r0, 8013d26 <__lshift+0x3e>
 8013d12:	4602      	mov	r2, r0
 8013d14:	4b2a      	ldr	r3, [pc, #168]	; (8013dc0 <__lshift+0xd8>)
 8013d16:	482b      	ldr	r0, [pc, #172]	; (8013dc4 <__lshift+0xdc>)
 8013d18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d1c:	f001 f8f4 	bl	8014f08 <__assert_func>
 8013d20:	3101      	adds	r1, #1
 8013d22:	005b      	lsls	r3, r3, #1
 8013d24:	e7ee      	b.n	8013d04 <__lshift+0x1c>
 8013d26:	2300      	movs	r3, #0
 8013d28:	f100 0114 	add.w	r1, r0, #20
 8013d2c:	f100 0210 	add.w	r2, r0, #16
 8013d30:	4618      	mov	r0, r3
 8013d32:	4553      	cmp	r3, sl
 8013d34:	db37      	blt.n	8013da6 <__lshift+0xbe>
 8013d36:	6920      	ldr	r0, [r4, #16]
 8013d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d3c:	f104 0314 	add.w	r3, r4, #20
 8013d40:	f019 091f 	ands.w	r9, r9, #31
 8013d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013d4c:	d02f      	beq.n	8013dae <__lshift+0xc6>
 8013d4e:	f1c9 0e20 	rsb	lr, r9, #32
 8013d52:	468a      	mov	sl, r1
 8013d54:	f04f 0c00 	mov.w	ip, #0
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	fa02 f209 	lsl.w	r2, r2, r9
 8013d5e:	ea42 020c 	orr.w	r2, r2, ip
 8013d62:	f84a 2b04 	str.w	r2, [sl], #4
 8013d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d6a:	4298      	cmp	r0, r3
 8013d6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d70:	d8f2      	bhi.n	8013d58 <__lshift+0x70>
 8013d72:	1b03      	subs	r3, r0, r4
 8013d74:	3b15      	subs	r3, #21
 8013d76:	f023 0303 	bic.w	r3, r3, #3
 8013d7a:	3304      	adds	r3, #4
 8013d7c:	f104 0215 	add.w	r2, r4, #21
 8013d80:	4290      	cmp	r0, r2
 8013d82:	bf38      	it	cc
 8013d84:	2304      	movcc	r3, #4
 8013d86:	f841 c003 	str.w	ip, [r1, r3]
 8013d8a:	f1bc 0f00 	cmp.w	ip, #0
 8013d8e:	d001      	beq.n	8013d94 <__lshift+0xac>
 8013d90:	f108 0602 	add.w	r6, r8, #2
 8013d94:	3e01      	subs	r6, #1
 8013d96:	4638      	mov	r0, r7
 8013d98:	612e      	str	r6, [r5, #16]
 8013d9a:	4621      	mov	r1, r4
 8013d9c:	f7ff fd88 	bl	80138b0 <_Bfree>
 8013da0:	4628      	mov	r0, r5
 8013da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013daa:	3301      	adds	r3, #1
 8013dac:	e7c1      	b.n	8013d32 <__lshift+0x4a>
 8013dae:	3904      	subs	r1, #4
 8013db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013db8:	4298      	cmp	r0, r3
 8013dba:	d8f9      	bhi.n	8013db0 <__lshift+0xc8>
 8013dbc:	e7ea      	b.n	8013d94 <__lshift+0xac>
 8013dbe:	bf00      	nop
 8013dc0:	08018070 	.word	0x08018070
 8013dc4:	080180fc 	.word	0x080180fc

08013dc8 <__mcmp>:
 8013dc8:	b530      	push	{r4, r5, lr}
 8013dca:	6902      	ldr	r2, [r0, #16]
 8013dcc:	690c      	ldr	r4, [r1, #16]
 8013dce:	1b12      	subs	r2, r2, r4
 8013dd0:	d10e      	bne.n	8013df0 <__mcmp+0x28>
 8013dd2:	f100 0314 	add.w	r3, r0, #20
 8013dd6:	3114      	adds	r1, #20
 8013dd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013de0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013de4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013de8:	42a5      	cmp	r5, r4
 8013dea:	d003      	beq.n	8013df4 <__mcmp+0x2c>
 8013dec:	d305      	bcc.n	8013dfa <__mcmp+0x32>
 8013dee:	2201      	movs	r2, #1
 8013df0:	4610      	mov	r0, r2
 8013df2:	bd30      	pop	{r4, r5, pc}
 8013df4:	4283      	cmp	r3, r0
 8013df6:	d3f3      	bcc.n	8013de0 <__mcmp+0x18>
 8013df8:	e7fa      	b.n	8013df0 <__mcmp+0x28>
 8013dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013dfe:	e7f7      	b.n	8013df0 <__mcmp+0x28>

08013e00 <__mdiff>:
 8013e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e04:	460c      	mov	r4, r1
 8013e06:	4606      	mov	r6, r0
 8013e08:	4611      	mov	r1, r2
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	4690      	mov	r8, r2
 8013e0e:	f7ff ffdb 	bl	8013dc8 <__mcmp>
 8013e12:	1e05      	subs	r5, r0, #0
 8013e14:	d110      	bne.n	8013e38 <__mdiff+0x38>
 8013e16:	4629      	mov	r1, r5
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7ff fd09 	bl	8013830 <_Balloc>
 8013e1e:	b930      	cbnz	r0, 8013e2e <__mdiff+0x2e>
 8013e20:	4b3a      	ldr	r3, [pc, #232]	; (8013f0c <__mdiff+0x10c>)
 8013e22:	4602      	mov	r2, r0
 8013e24:	f240 2132 	movw	r1, #562	; 0x232
 8013e28:	4839      	ldr	r0, [pc, #228]	; (8013f10 <__mdiff+0x110>)
 8013e2a:	f001 f86d 	bl	8014f08 <__assert_func>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e38:	bfa4      	itt	ge
 8013e3a:	4643      	movge	r3, r8
 8013e3c:	46a0      	movge	r8, r4
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e44:	bfa6      	itte	ge
 8013e46:	461c      	movge	r4, r3
 8013e48:	2500      	movge	r5, #0
 8013e4a:	2501      	movlt	r5, #1
 8013e4c:	f7ff fcf0 	bl	8013830 <_Balloc>
 8013e50:	b920      	cbnz	r0, 8013e5c <__mdiff+0x5c>
 8013e52:	4b2e      	ldr	r3, [pc, #184]	; (8013f0c <__mdiff+0x10c>)
 8013e54:	4602      	mov	r2, r0
 8013e56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e5a:	e7e5      	b.n	8013e28 <__mdiff+0x28>
 8013e5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e60:	6926      	ldr	r6, [r4, #16]
 8013e62:	60c5      	str	r5, [r0, #12]
 8013e64:	f104 0914 	add.w	r9, r4, #20
 8013e68:	f108 0514 	add.w	r5, r8, #20
 8013e6c:	f100 0e14 	add.w	lr, r0, #20
 8013e70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e78:	f108 0210 	add.w	r2, r8, #16
 8013e7c:	46f2      	mov	sl, lr
 8013e7e:	2100      	movs	r1, #0
 8013e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e88:	fa1f f883 	uxth.w	r8, r3
 8013e8c:	fa11 f18b 	uxtah	r1, r1, fp
 8013e90:	0c1b      	lsrs	r3, r3, #16
 8013e92:	eba1 0808 	sub.w	r8, r1, r8
 8013e96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e9e:	fa1f f888 	uxth.w	r8, r8
 8013ea2:	1419      	asrs	r1, r3, #16
 8013ea4:	454e      	cmp	r6, r9
 8013ea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eaa:	f84a 3b04 	str.w	r3, [sl], #4
 8013eae:	d8e7      	bhi.n	8013e80 <__mdiff+0x80>
 8013eb0:	1b33      	subs	r3, r6, r4
 8013eb2:	3b15      	subs	r3, #21
 8013eb4:	f023 0303 	bic.w	r3, r3, #3
 8013eb8:	3304      	adds	r3, #4
 8013eba:	3415      	adds	r4, #21
 8013ebc:	42a6      	cmp	r6, r4
 8013ebe:	bf38      	it	cc
 8013ec0:	2304      	movcc	r3, #4
 8013ec2:	441d      	add	r5, r3
 8013ec4:	4473      	add	r3, lr
 8013ec6:	469e      	mov	lr, r3
 8013ec8:	462e      	mov	r6, r5
 8013eca:	4566      	cmp	r6, ip
 8013ecc:	d30e      	bcc.n	8013eec <__mdiff+0xec>
 8013ece:	f10c 0203 	add.w	r2, ip, #3
 8013ed2:	1b52      	subs	r2, r2, r5
 8013ed4:	f022 0203 	bic.w	r2, r2, #3
 8013ed8:	3d03      	subs	r5, #3
 8013eda:	45ac      	cmp	ip, r5
 8013edc:	bf38      	it	cc
 8013ede:	2200      	movcc	r2, #0
 8013ee0:	441a      	add	r2, r3
 8013ee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ee6:	b17b      	cbz	r3, 8013f08 <__mdiff+0x108>
 8013ee8:	6107      	str	r7, [r0, #16]
 8013eea:	e7a3      	b.n	8013e34 <__mdiff+0x34>
 8013eec:	f856 8b04 	ldr.w	r8, [r6], #4
 8013ef0:	fa11 f288 	uxtah	r2, r1, r8
 8013ef4:	1414      	asrs	r4, r2, #16
 8013ef6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013efa:	b292      	uxth	r2, r2
 8013efc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013f00:	f84e 2b04 	str.w	r2, [lr], #4
 8013f04:	1421      	asrs	r1, r4, #16
 8013f06:	e7e0      	b.n	8013eca <__mdiff+0xca>
 8013f08:	3f01      	subs	r7, #1
 8013f0a:	e7ea      	b.n	8013ee2 <__mdiff+0xe2>
 8013f0c:	08018070 	.word	0x08018070
 8013f10:	080180fc 	.word	0x080180fc

08013f14 <__ulp>:
 8013f14:	b082      	sub	sp, #8
 8013f16:	ed8d 0b00 	vstr	d0, [sp]
 8013f1a:	9b01      	ldr	r3, [sp, #4]
 8013f1c:	4912      	ldr	r1, [pc, #72]	; (8013f68 <__ulp+0x54>)
 8013f1e:	4019      	ands	r1, r3
 8013f20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013f24:	2900      	cmp	r1, #0
 8013f26:	dd05      	ble.n	8013f34 <__ulp+0x20>
 8013f28:	2200      	movs	r2, #0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	ec43 2b10 	vmov	d0, r2, r3
 8013f30:	b002      	add	sp, #8
 8013f32:	4770      	bx	lr
 8013f34:	4249      	negs	r1, r1
 8013f36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013f3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013f3e:	f04f 0200 	mov.w	r2, #0
 8013f42:	f04f 0300 	mov.w	r3, #0
 8013f46:	da04      	bge.n	8013f52 <__ulp+0x3e>
 8013f48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013f4c:	fa41 f300 	asr.w	r3, r1, r0
 8013f50:	e7ec      	b.n	8013f2c <__ulp+0x18>
 8013f52:	f1a0 0114 	sub.w	r1, r0, #20
 8013f56:	291e      	cmp	r1, #30
 8013f58:	bfda      	itte	le
 8013f5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013f5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8013f62:	2101      	movgt	r1, #1
 8013f64:	460a      	mov	r2, r1
 8013f66:	e7e1      	b.n	8013f2c <__ulp+0x18>
 8013f68:	7ff00000 	.word	0x7ff00000

08013f6c <__b2d>:
 8013f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f6e:	6905      	ldr	r5, [r0, #16]
 8013f70:	f100 0714 	add.w	r7, r0, #20
 8013f74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013f78:	1f2e      	subs	r6, r5, #4
 8013f7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f7ff fd48 	bl	8013a14 <__hi0bits>
 8013f84:	f1c0 0320 	rsb	r3, r0, #32
 8013f88:	280a      	cmp	r0, #10
 8013f8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014008 <__b2d+0x9c>
 8013f8e:	600b      	str	r3, [r1, #0]
 8013f90:	dc14      	bgt.n	8013fbc <__b2d+0x50>
 8013f92:	f1c0 0e0b 	rsb	lr, r0, #11
 8013f96:	fa24 f10e 	lsr.w	r1, r4, lr
 8013f9a:	42b7      	cmp	r7, r6
 8013f9c:	ea41 030c 	orr.w	r3, r1, ip
 8013fa0:	bf34      	ite	cc
 8013fa2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fa6:	2100      	movcs	r1, #0
 8013fa8:	3015      	adds	r0, #21
 8013faa:	fa04 f000 	lsl.w	r0, r4, r0
 8013fae:	fa21 f10e 	lsr.w	r1, r1, lr
 8013fb2:	ea40 0201 	orr.w	r2, r0, r1
 8013fb6:	ec43 2b10 	vmov	d0, r2, r3
 8013fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fbc:	42b7      	cmp	r7, r6
 8013fbe:	bf3a      	itte	cc
 8013fc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013fc4:	f1a5 0608 	subcc.w	r6, r5, #8
 8013fc8:	2100      	movcs	r1, #0
 8013fca:	380b      	subs	r0, #11
 8013fcc:	d017      	beq.n	8013ffe <__b2d+0x92>
 8013fce:	f1c0 0c20 	rsb	ip, r0, #32
 8013fd2:	fa04 f500 	lsl.w	r5, r4, r0
 8013fd6:	42be      	cmp	r6, r7
 8013fd8:	fa21 f40c 	lsr.w	r4, r1, ip
 8013fdc:	ea45 0504 	orr.w	r5, r5, r4
 8013fe0:	bf8c      	ite	hi
 8013fe2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013fe6:	2400      	movls	r4, #0
 8013fe8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013fec:	fa01 f000 	lsl.w	r0, r1, r0
 8013ff0:	fa24 f40c 	lsr.w	r4, r4, ip
 8013ff4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013ff8:	ea40 0204 	orr.w	r2, r0, r4
 8013ffc:	e7db      	b.n	8013fb6 <__b2d+0x4a>
 8013ffe:	ea44 030c 	orr.w	r3, r4, ip
 8014002:	460a      	mov	r2, r1
 8014004:	e7d7      	b.n	8013fb6 <__b2d+0x4a>
 8014006:	bf00      	nop
 8014008:	3ff00000 	.word	0x3ff00000

0801400c <__d2b>:
 801400c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014010:	4689      	mov	r9, r1
 8014012:	2101      	movs	r1, #1
 8014014:	ec57 6b10 	vmov	r6, r7, d0
 8014018:	4690      	mov	r8, r2
 801401a:	f7ff fc09 	bl	8013830 <_Balloc>
 801401e:	4604      	mov	r4, r0
 8014020:	b930      	cbnz	r0, 8014030 <__d2b+0x24>
 8014022:	4602      	mov	r2, r0
 8014024:	4b25      	ldr	r3, [pc, #148]	; (80140bc <__d2b+0xb0>)
 8014026:	4826      	ldr	r0, [pc, #152]	; (80140c0 <__d2b+0xb4>)
 8014028:	f240 310a 	movw	r1, #778	; 0x30a
 801402c:	f000 ff6c 	bl	8014f08 <__assert_func>
 8014030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014038:	bb35      	cbnz	r5, 8014088 <__d2b+0x7c>
 801403a:	2e00      	cmp	r6, #0
 801403c:	9301      	str	r3, [sp, #4]
 801403e:	d028      	beq.n	8014092 <__d2b+0x86>
 8014040:	4668      	mov	r0, sp
 8014042:	9600      	str	r6, [sp, #0]
 8014044:	f7ff fd06 	bl	8013a54 <__lo0bits>
 8014048:	9900      	ldr	r1, [sp, #0]
 801404a:	b300      	cbz	r0, 801408e <__d2b+0x82>
 801404c:	9a01      	ldr	r2, [sp, #4]
 801404e:	f1c0 0320 	rsb	r3, r0, #32
 8014052:	fa02 f303 	lsl.w	r3, r2, r3
 8014056:	430b      	orrs	r3, r1
 8014058:	40c2      	lsrs	r2, r0
 801405a:	6163      	str	r3, [r4, #20]
 801405c:	9201      	str	r2, [sp, #4]
 801405e:	9b01      	ldr	r3, [sp, #4]
 8014060:	61a3      	str	r3, [r4, #24]
 8014062:	2b00      	cmp	r3, #0
 8014064:	bf14      	ite	ne
 8014066:	2202      	movne	r2, #2
 8014068:	2201      	moveq	r2, #1
 801406a:	6122      	str	r2, [r4, #16]
 801406c:	b1d5      	cbz	r5, 80140a4 <__d2b+0x98>
 801406e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014072:	4405      	add	r5, r0
 8014074:	f8c9 5000 	str.w	r5, [r9]
 8014078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801407c:	f8c8 0000 	str.w	r0, [r8]
 8014080:	4620      	mov	r0, r4
 8014082:	b003      	add	sp, #12
 8014084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801408c:	e7d5      	b.n	801403a <__d2b+0x2e>
 801408e:	6161      	str	r1, [r4, #20]
 8014090:	e7e5      	b.n	801405e <__d2b+0x52>
 8014092:	a801      	add	r0, sp, #4
 8014094:	f7ff fcde 	bl	8013a54 <__lo0bits>
 8014098:	9b01      	ldr	r3, [sp, #4]
 801409a:	6163      	str	r3, [r4, #20]
 801409c:	2201      	movs	r2, #1
 801409e:	6122      	str	r2, [r4, #16]
 80140a0:	3020      	adds	r0, #32
 80140a2:	e7e3      	b.n	801406c <__d2b+0x60>
 80140a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80140ac:	f8c9 0000 	str.w	r0, [r9]
 80140b0:	6918      	ldr	r0, [r3, #16]
 80140b2:	f7ff fcaf 	bl	8013a14 <__hi0bits>
 80140b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140ba:	e7df      	b.n	801407c <__d2b+0x70>
 80140bc:	08018070 	.word	0x08018070
 80140c0:	080180fc 	.word	0x080180fc

080140c4 <__ratio>:
 80140c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140c8:	4688      	mov	r8, r1
 80140ca:	4669      	mov	r1, sp
 80140cc:	4681      	mov	r9, r0
 80140ce:	f7ff ff4d 	bl	8013f6c <__b2d>
 80140d2:	a901      	add	r1, sp, #4
 80140d4:	4640      	mov	r0, r8
 80140d6:	ec55 4b10 	vmov	r4, r5, d0
 80140da:	f7ff ff47 	bl	8013f6c <__b2d>
 80140de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140e6:	eba3 0c02 	sub.w	ip, r3, r2
 80140ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140ee:	1a9b      	subs	r3, r3, r2
 80140f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140f4:	ec51 0b10 	vmov	r0, r1, d0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	bfd6      	itet	le
 80140fc:	460a      	movle	r2, r1
 80140fe:	462a      	movgt	r2, r5
 8014100:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014104:	468b      	mov	fp, r1
 8014106:	462f      	mov	r7, r5
 8014108:	bfd4      	ite	le
 801410a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801410e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014112:	4620      	mov	r0, r4
 8014114:	ee10 2a10 	vmov	r2, s0
 8014118:	465b      	mov	r3, fp
 801411a:	4639      	mov	r1, r7
 801411c:	f7ec fbb6 	bl	800088c <__aeabi_ddiv>
 8014120:	ec41 0b10 	vmov	d0, r0, r1
 8014124:	b003      	add	sp, #12
 8014126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801412a <__copybits>:
 801412a:	3901      	subs	r1, #1
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	1149      	asrs	r1, r1, #5
 8014130:	6914      	ldr	r4, [r2, #16]
 8014132:	3101      	adds	r1, #1
 8014134:	f102 0314 	add.w	r3, r2, #20
 8014138:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801413c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014140:	1f05      	subs	r5, r0, #4
 8014142:	42a3      	cmp	r3, r4
 8014144:	d30c      	bcc.n	8014160 <__copybits+0x36>
 8014146:	1aa3      	subs	r3, r4, r2
 8014148:	3b11      	subs	r3, #17
 801414a:	f023 0303 	bic.w	r3, r3, #3
 801414e:	3211      	adds	r2, #17
 8014150:	42a2      	cmp	r2, r4
 8014152:	bf88      	it	hi
 8014154:	2300      	movhi	r3, #0
 8014156:	4418      	add	r0, r3
 8014158:	2300      	movs	r3, #0
 801415a:	4288      	cmp	r0, r1
 801415c:	d305      	bcc.n	801416a <__copybits+0x40>
 801415e:	bd70      	pop	{r4, r5, r6, pc}
 8014160:	f853 6b04 	ldr.w	r6, [r3], #4
 8014164:	f845 6f04 	str.w	r6, [r5, #4]!
 8014168:	e7eb      	b.n	8014142 <__copybits+0x18>
 801416a:	f840 3b04 	str.w	r3, [r0], #4
 801416e:	e7f4      	b.n	801415a <__copybits+0x30>

08014170 <__any_on>:
 8014170:	f100 0214 	add.w	r2, r0, #20
 8014174:	6900      	ldr	r0, [r0, #16]
 8014176:	114b      	asrs	r3, r1, #5
 8014178:	4298      	cmp	r0, r3
 801417a:	b510      	push	{r4, lr}
 801417c:	db11      	blt.n	80141a2 <__any_on+0x32>
 801417e:	dd0a      	ble.n	8014196 <__any_on+0x26>
 8014180:	f011 011f 	ands.w	r1, r1, #31
 8014184:	d007      	beq.n	8014196 <__any_on+0x26>
 8014186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801418a:	fa24 f001 	lsr.w	r0, r4, r1
 801418e:	fa00 f101 	lsl.w	r1, r0, r1
 8014192:	428c      	cmp	r4, r1
 8014194:	d10b      	bne.n	80141ae <__any_on+0x3e>
 8014196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801419a:	4293      	cmp	r3, r2
 801419c:	d803      	bhi.n	80141a6 <__any_on+0x36>
 801419e:	2000      	movs	r0, #0
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	4603      	mov	r3, r0
 80141a4:	e7f7      	b.n	8014196 <__any_on+0x26>
 80141a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141aa:	2900      	cmp	r1, #0
 80141ac:	d0f5      	beq.n	801419a <__any_on+0x2a>
 80141ae:	2001      	movs	r0, #1
 80141b0:	e7f6      	b.n	80141a0 <__any_on+0x30>

080141b2 <_calloc_r>:
 80141b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141b4:	fba1 2402 	umull	r2, r4, r1, r2
 80141b8:	b94c      	cbnz	r4, 80141ce <_calloc_r+0x1c>
 80141ba:	4611      	mov	r1, r2
 80141bc:	9201      	str	r2, [sp, #4]
 80141be:	f000 f87b 	bl	80142b8 <_malloc_r>
 80141c2:	9a01      	ldr	r2, [sp, #4]
 80141c4:	4605      	mov	r5, r0
 80141c6:	b930      	cbnz	r0, 80141d6 <_calloc_r+0x24>
 80141c8:	4628      	mov	r0, r5
 80141ca:	b003      	add	sp, #12
 80141cc:	bd30      	pop	{r4, r5, pc}
 80141ce:	220c      	movs	r2, #12
 80141d0:	6002      	str	r2, [r0, #0]
 80141d2:	2500      	movs	r5, #0
 80141d4:	e7f8      	b.n	80141c8 <_calloc_r+0x16>
 80141d6:	4621      	mov	r1, r4
 80141d8:	f7fc faf8 	bl	80107cc <memset>
 80141dc:	e7f4      	b.n	80141c8 <_calloc_r+0x16>
	...

080141e0 <_free_r>:
 80141e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141e2:	2900      	cmp	r1, #0
 80141e4:	d044      	beq.n	8014270 <_free_r+0x90>
 80141e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141ea:	9001      	str	r0, [sp, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f1a1 0404 	sub.w	r4, r1, #4
 80141f2:	bfb8      	it	lt
 80141f4:	18e4      	addlt	r4, r4, r3
 80141f6:	f001 f88b 	bl	8015310 <__malloc_lock>
 80141fa:	4a1e      	ldr	r2, [pc, #120]	; (8014274 <_free_r+0x94>)
 80141fc:	9801      	ldr	r0, [sp, #4]
 80141fe:	6813      	ldr	r3, [r2, #0]
 8014200:	b933      	cbnz	r3, 8014210 <_free_r+0x30>
 8014202:	6063      	str	r3, [r4, #4]
 8014204:	6014      	str	r4, [r2, #0]
 8014206:	b003      	add	sp, #12
 8014208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801420c:	f001 b886 	b.w	801531c <__malloc_unlock>
 8014210:	42a3      	cmp	r3, r4
 8014212:	d908      	bls.n	8014226 <_free_r+0x46>
 8014214:	6825      	ldr	r5, [r4, #0]
 8014216:	1961      	adds	r1, r4, r5
 8014218:	428b      	cmp	r3, r1
 801421a:	bf01      	itttt	eq
 801421c:	6819      	ldreq	r1, [r3, #0]
 801421e:	685b      	ldreq	r3, [r3, #4]
 8014220:	1949      	addeq	r1, r1, r5
 8014222:	6021      	streq	r1, [r4, #0]
 8014224:	e7ed      	b.n	8014202 <_free_r+0x22>
 8014226:	461a      	mov	r2, r3
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	b10b      	cbz	r3, 8014230 <_free_r+0x50>
 801422c:	42a3      	cmp	r3, r4
 801422e:	d9fa      	bls.n	8014226 <_free_r+0x46>
 8014230:	6811      	ldr	r1, [r2, #0]
 8014232:	1855      	adds	r5, r2, r1
 8014234:	42a5      	cmp	r5, r4
 8014236:	d10b      	bne.n	8014250 <_free_r+0x70>
 8014238:	6824      	ldr	r4, [r4, #0]
 801423a:	4421      	add	r1, r4
 801423c:	1854      	adds	r4, r2, r1
 801423e:	42a3      	cmp	r3, r4
 8014240:	6011      	str	r1, [r2, #0]
 8014242:	d1e0      	bne.n	8014206 <_free_r+0x26>
 8014244:	681c      	ldr	r4, [r3, #0]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	6053      	str	r3, [r2, #4]
 801424a:	4421      	add	r1, r4
 801424c:	6011      	str	r1, [r2, #0]
 801424e:	e7da      	b.n	8014206 <_free_r+0x26>
 8014250:	d902      	bls.n	8014258 <_free_r+0x78>
 8014252:	230c      	movs	r3, #12
 8014254:	6003      	str	r3, [r0, #0]
 8014256:	e7d6      	b.n	8014206 <_free_r+0x26>
 8014258:	6825      	ldr	r5, [r4, #0]
 801425a:	1961      	adds	r1, r4, r5
 801425c:	428b      	cmp	r3, r1
 801425e:	bf04      	itt	eq
 8014260:	6819      	ldreq	r1, [r3, #0]
 8014262:	685b      	ldreq	r3, [r3, #4]
 8014264:	6063      	str	r3, [r4, #4]
 8014266:	bf04      	itt	eq
 8014268:	1949      	addeq	r1, r1, r5
 801426a:	6021      	streq	r1, [r4, #0]
 801426c:	6054      	str	r4, [r2, #4]
 801426e:	e7ca      	b.n	8014206 <_free_r+0x26>
 8014270:	b003      	add	sp, #12
 8014272:	bd30      	pop	{r4, r5, pc}
 8014274:	2000494c 	.word	0x2000494c

08014278 <sbrk_aligned>:
 8014278:	b570      	push	{r4, r5, r6, lr}
 801427a:	4e0e      	ldr	r6, [pc, #56]	; (80142b4 <sbrk_aligned+0x3c>)
 801427c:	460c      	mov	r4, r1
 801427e:	6831      	ldr	r1, [r6, #0]
 8014280:	4605      	mov	r5, r0
 8014282:	b911      	cbnz	r1, 801428a <sbrk_aligned+0x12>
 8014284:	f000 fd28 	bl	8014cd8 <_sbrk_r>
 8014288:	6030      	str	r0, [r6, #0]
 801428a:	4621      	mov	r1, r4
 801428c:	4628      	mov	r0, r5
 801428e:	f000 fd23 	bl	8014cd8 <_sbrk_r>
 8014292:	1c43      	adds	r3, r0, #1
 8014294:	d00a      	beq.n	80142ac <sbrk_aligned+0x34>
 8014296:	1cc4      	adds	r4, r0, #3
 8014298:	f024 0403 	bic.w	r4, r4, #3
 801429c:	42a0      	cmp	r0, r4
 801429e:	d007      	beq.n	80142b0 <sbrk_aligned+0x38>
 80142a0:	1a21      	subs	r1, r4, r0
 80142a2:	4628      	mov	r0, r5
 80142a4:	f000 fd18 	bl	8014cd8 <_sbrk_r>
 80142a8:	3001      	adds	r0, #1
 80142aa:	d101      	bne.n	80142b0 <sbrk_aligned+0x38>
 80142ac:	f04f 34ff 	mov.w	r4, #4294967295
 80142b0:	4620      	mov	r0, r4
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
 80142b4:	20004950 	.word	0x20004950

080142b8 <_malloc_r>:
 80142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	1ccd      	adds	r5, r1, #3
 80142be:	f025 0503 	bic.w	r5, r5, #3
 80142c2:	3508      	adds	r5, #8
 80142c4:	2d0c      	cmp	r5, #12
 80142c6:	bf38      	it	cc
 80142c8:	250c      	movcc	r5, #12
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	4607      	mov	r7, r0
 80142ce:	db01      	blt.n	80142d4 <_malloc_r+0x1c>
 80142d0:	42a9      	cmp	r1, r5
 80142d2:	d905      	bls.n	80142e0 <_malloc_r+0x28>
 80142d4:	230c      	movs	r3, #12
 80142d6:	603b      	str	r3, [r7, #0]
 80142d8:	2600      	movs	r6, #0
 80142da:	4630      	mov	r0, r6
 80142dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e0:	4e2e      	ldr	r6, [pc, #184]	; (801439c <_malloc_r+0xe4>)
 80142e2:	f001 f815 	bl	8015310 <__malloc_lock>
 80142e6:	6833      	ldr	r3, [r6, #0]
 80142e8:	461c      	mov	r4, r3
 80142ea:	bb34      	cbnz	r4, 801433a <_malloc_r+0x82>
 80142ec:	4629      	mov	r1, r5
 80142ee:	4638      	mov	r0, r7
 80142f0:	f7ff ffc2 	bl	8014278 <sbrk_aligned>
 80142f4:	1c43      	adds	r3, r0, #1
 80142f6:	4604      	mov	r4, r0
 80142f8:	d14d      	bne.n	8014396 <_malloc_r+0xde>
 80142fa:	6834      	ldr	r4, [r6, #0]
 80142fc:	4626      	mov	r6, r4
 80142fe:	2e00      	cmp	r6, #0
 8014300:	d140      	bne.n	8014384 <_malloc_r+0xcc>
 8014302:	6823      	ldr	r3, [r4, #0]
 8014304:	4631      	mov	r1, r6
 8014306:	4638      	mov	r0, r7
 8014308:	eb04 0803 	add.w	r8, r4, r3
 801430c:	f000 fce4 	bl	8014cd8 <_sbrk_r>
 8014310:	4580      	cmp	r8, r0
 8014312:	d13a      	bne.n	801438a <_malloc_r+0xd2>
 8014314:	6821      	ldr	r1, [r4, #0]
 8014316:	3503      	adds	r5, #3
 8014318:	1a6d      	subs	r5, r5, r1
 801431a:	f025 0503 	bic.w	r5, r5, #3
 801431e:	3508      	adds	r5, #8
 8014320:	2d0c      	cmp	r5, #12
 8014322:	bf38      	it	cc
 8014324:	250c      	movcc	r5, #12
 8014326:	4629      	mov	r1, r5
 8014328:	4638      	mov	r0, r7
 801432a:	f7ff ffa5 	bl	8014278 <sbrk_aligned>
 801432e:	3001      	adds	r0, #1
 8014330:	d02b      	beq.n	801438a <_malloc_r+0xd2>
 8014332:	6823      	ldr	r3, [r4, #0]
 8014334:	442b      	add	r3, r5
 8014336:	6023      	str	r3, [r4, #0]
 8014338:	e00e      	b.n	8014358 <_malloc_r+0xa0>
 801433a:	6822      	ldr	r2, [r4, #0]
 801433c:	1b52      	subs	r2, r2, r5
 801433e:	d41e      	bmi.n	801437e <_malloc_r+0xc6>
 8014340:	2a0b      	cmp	r2, #11
 8014342:	d916      	bls.n	8014372 <_malloc_r+0xba>
 8014344:	1961      	adds	r1, r4, r5
 8014346:	42a3      	cmp	r3, r4
 8014348:	6025      	str	r5, [r4, #0]
 801434a:	bf18      	it	ne
 801434c:	6059      	strne	r1, [r3, #4]
 801434e:	6863      	ldr	r3, [r4, #4]
 8014350:	bf08      	it	eq
 8014352:	6031      	streq	r1, [r6, #0]
 8014354:	5162      	str	r2, [r4, r5]
 8014356:	604b      	str	r3, [r1, #4]
 8014358:	4638      	mov	r0, r7
 801435a:	f104 060b 	add.w	r6, r4, #11
 801435e:	f000 ffdd 	bl	801531c <__malloc_unlock>
 8014362:	f026 0607 	bic.w	r6, r6, #7
 8014366:	1d23      	adds	r3, r4, #4
 8014368:	1af2      	subs	r2, r6, r3
 801436a:	d0b6      	beq.n	80142da <_malloc_r+0x22>
 801436c:	1b9b      	subs	r3, r3, r6
 801436e:	50a3      	str	r3, [r4, r2]
 8014370:	e7b3      	b.n	80142da <_malloc_r+0x22>
 8014372:	6862      	ldr	r2, [r4, #4]
 8014374:	42a3      	cmp	r3, r4
 8014376:	bf0c      	ite	eq
 8014378:	6032      	streq	r2, [r6, #0]
 801437a:	605a      	strne	r2, [r3, #4]
 801437c:	e7ec      	b.n	8014358 <_malloc_r+0xa0>
 801437e:	4623      	mov	r3, r4
 8014380:	6864      	ldr	r4, [r4, #4]
 8014382:	e7b2      	b.n	80142ea <_malloc_r+0x32>
 8014384:	4634      	mov	r4, r6
 8014386:	6876      	ldr	r6, [r6, #4]
 8014388:	e7b9      	b.n	80142fe <_malloc_r+0x46>
 801438a:	230c      	movs	r3, #12
 801438c:	603b      	str	r3, [r7, #0]
 801438e:	4638      	mov	r0, r7
 8014390:	f000 ffc4 	bl	801531c <__malloc_unlock>
 8014394:	e7a1      	b.n	80142da <_malloc_r+0x22>
 8014396:	6025      	str	r5, [r4, #0]
 8014398:	e7de      	b.n	8014358 <_malloc_r+0xa0>
 801439a:	bf00      	nop
 801439c:	2000494c 	.word	0x2000494c

080143a0 <__ssputs_r>:
 80143a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143a4:	688e      	ldr	r6, [r1, #8]
 80143a6:	429e      	cmp	r6, r3
 80143a8:	4682      	mov	sl, r0
 80143aa:	460c      	mov	r4, r1
 80143ac:	4690      	mov	r8, r2
 80143ae:	461f      	mov	r7, r3
 80143b0:	d838      	bhi.n	8014424 <__ssputs_r+0x84>
 80143b2:	898a      	ldrh	r2, [r1, #12]
 80143b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143b8:	d032      	beq.n	8014420 <__ssputs_r+0x80>
 80143ba:	6825      	ldr	r5, [r4, #0]
 80143bc:	6909      	ldr	r1, [r1, #16]
 80143be:	eba5 0901 	sub.w	r9, r5, r1
 80143c2:	6965      	ldr	r5, [r4, #20]
 80143c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143cc:	3301      	adds	r3, #1
 80143ce:	444b      	add	r3, r9
 80143d0:	106d      	asrs	r5, r5, #1
 80143d2:	429d      	cmp	r5, r3
 80143d4:	bf38      	it	cc
 80143d6:	461d      	movcc	r5, r3
 80143d8:	0553      	lsls	r3, r2, #21
 80143da:	d531      	bpl.n	8014440 <__ssputs_r+0xa0>
 80143dc:	4629      	mov	r1, r5
 80143de:	f7ff ff6b 	bl	80142b8 <_malloc_r>
 80143e2:	4606      	mov	r6, r0
 80143e4:	b950      	cbnz	r0, 80143fc <__ssputs_r+0x5c>
 80143e6:	230c      	movs	r3, #12
 80143e8:	f8ca 3000 	str.w	r3, [sl]
 80143ec:	89a3      	ldrh	r3, [r4, #12]
 80143ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143f2:	81a3      	strh	r3, [r4, #12]
 80143f4:	f04f 30ff 	mov.w	r0, #4294967295
 80143f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fc:	6921      	ldr	r1, [r4, #16]
 80143fe:	464a      	mov	r2, r9
 8014400:	f7ff fa08 	bl	8013814 <memcpy>
 8014404:	89a3      	ldrh	r3, [r4, #12]
 8014406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801440e:	81a3      	strh	r3, [r4, #12]
 8014410:	6126      	str	r6, [r4, #16]
 8014412:	6165      	str	r5, [r4, #20]
 8014414:	444e      	add	r6, r9
 8014416:	eba5 0509 	sub.w	r5, r5, r9
 801441a:	6026      	str	r6, [r4, #0]
 801441c:	60a5      	str	r5, [r4, #8]
 801441e:	463e      	mov	r6, r7
 8014420:	42be      	cmp	r6, r7
 8014422:	d900      	bls.n	8014426 <__ssputs_r+0x86>
 8014424:	463e      	mov	r6, r7
 8014426:	6820      	ldr	r0, [r4, #0]
 8014428:	4632      	mov	r2, r6
 801442a:	4641      	mov	r1, r8
 801442c:	f000 ff56 	bl	80152dc <memmove>
 8014430:	68a3      	ldr	r3, [r4, #8]
 8014432:	1b9b      	subs	r3, r3, r6
 8014434:	60a3      	str	r3, [r4, #8]
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	4433      	add	r3, r6
 801443a:	6023      	str	r3, [r4, #0]
 801443c:	2000      	movs	r0, #0
 801443e:	e7db      	b.n	80143f8 <__ssputs_r+0x58>
 8014440:	462a      	mov	r2, r5
 8014442:	f000 ff71 	bl	8015328 <_realloc_r>
 8014446:	4606      	mov	r6, r0
 8014448:	2800      	cmp	r0, #0
 801444a:	d1e1      	bne.n	8014410 <__ssputs_r+0x70>
 801444c:	6921      	ldr	r1, [r4, #16]
 801444e:	4650      	mov	r0, sl
 8014450:	f7ff fec6 	bl	80141e0 <_free_r>
 8014454:	e7c7      	b.n	80143e6 <__ssputs_r+0x46>
	...

08014458 <_svfiprintf_r>:
 8014458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445c:	4698      	mov	r8, r3
 801445e:	898b      	ldrh	r3, [r1, #12]
 8014460:	061b      	lsls	r3, r3, #24
 8014462:	b09d      	sub	sp, #116	; 0x74
 8014464:	4607      	mov	r7, r0
 8014466:	460d      	mov	r5, r1
 8014468:	4614      	mov	r4, r2
 801446a:	d50e      	bpl.n	801448a <_svfiprintf_r+0x32>
 801446c:	690b      	ldr	r3, [r1, #16]
 801446e:	b963      	cbnz	r3, 801448a <_svfiprintf_r+0x32>
 8014470:	2140      	movs	r1, #64	; 0x40
 8014472:	f7ff ff21 	bl	80142b8 <_malloc_r>
 8014476:	6028      	str	r0, [r5, #0]
 8014478:	6128      	str	r0, [r5, #16]
 801447a:	b920      	cbnz	r0, 8014486 <_svfiprintf_r+0x2e>
 801447c:	230c      	movs	r3, #12
 801447e:	603b      	str	r3, [r7, #0]
 8014480:	f04f 30ff 	mov.w	r0, #4294967295
 8014484:	e0d1      	b.n	801462a <_svfiprintf_r+0x1d2>
 8014486:	2340      	movs	r3, #64	; 0x40
 8014488:	616b      	str	r3, [r5, #20]
 801448a:	2300      	movs	r3, #0
 801448c:	9309      	str	r3, [sp, #36]	; 0x24
 801448e:	2320      	movs	r3, #32
 8014490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014494:	f8cd 800c 	str.w	r8, [sp, #12]
 8014498:	2330      	movs	r3, #48	; 0x30
 801449a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014644 <_svfiprintf_r+0x1ec>
 801449e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144a2:	f04f 0901 	mov.w	r9, #1
 80144a6:	4623      	mov	r3, r4
 80144a8:	469a      	mov	sl, r3
 80144aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144ae:	b10a      	cbz	r2, 80144b4 <_svfiprintf_r+0x5c>
 80144b0:	2a25      	cmp	r2, #37	; 0x25
 80144b2:	d1f9      	bne.n	80144a8 <_svfiprintf_r+0x50>
 80144b4:	ebba 0b04 	subs.w	fp, sl, r4
 80144b8:	d00b      	beq.n	80144d2 <_svfiprintf_r+0x7a>
 80144ba:	465b      	mov	r3, fp
 80144bc:	4622      	mov	r2, r4
 80144be:	4629      	mov	r1, r5
 80144c0:	4638      	mov	r0, r7
 80144c2:	f7ff ff6d 	bl	80143a0 <__ssputs_r>
 80144c6:	3001      	adds	r0, #1
 80144c8:	f000 80aa 	beq.w	8014620 <_svfiprintf_r+0x1c8>
 80144cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144ce:	445a      	add	r2, fp
 80144d0:	9209      	str	r2, [sp, #36]	; 0x24
 80144d2:	f89a 3000 	ldrb.w	r3, [sl]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 80a2 	beq.w	8014620 <_svfiprintf_r+0x1c8>
 80144dc:	2300      	movs	r3, #0
 80144de:	f04f 32ff 	mov.w	r2, #4294967295
 80144e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144e6:	f10a 0a01 	add.w	sl, sl, #1
 80144ea:	9304      	str	r3, [sp, #16]
 80144ec:	9307      	str	r3, [sp, #28]
 80144ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144f2:	931a      	str	r3, [sp, #104]	; 0x68
 80144f4:	4654      	mov	r4, sl
 80144f6:	2205      	movs	r2, #5
 80144f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144fc:	4851      	ldr	r0, [pc, #324]	; (8014644 <_svfiprintf_r+0x1ec>)
 80144fe:	f7eb fe8f 	bl	8000220 <memchr>
 8014502:	9a04      	ldr	r2, [sp, #16]
 8014504:	b9d8      	cbnz	r0, 801453e <_svfiprintf_r+0xe6>
 8014506:	06d0      	lsls	r0, r2, #27
 8014508:	bf44      	itt	mi
 801450a:	2320      	movmi	r3, #32
 801450c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014510:	0711      	lsls	r1, r2, #28
 8014512:	bf44      	itt	mi
 8014514:	232b      	movmi	r3, #43	; 0x2b
 8014516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801451a:	f89a 3000 	ldrb.w	r3, [sl]
 801451e:	2b2a      	cmp	r3, #42	; 0x2a
 8014520:	d015      	beq.n	801454e <_svfiprintf_r+0xf6>
 8014522:	9a07      	ldr	r2, [sp, #28]
 8014524:	4654      	mov	r4, sl
 8014526:	2000      	movs	r0, #0
 8014528:	f04f 0c0a 	mov.w	ip, #10
 801452c:	4621      	mov	r1, r4
 801452e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014532:	3b30      	subs	r3, #48	; 0x30
 8014534:	2b09      	cmp	r3, #9
 8014536:	d94e      	bls.n	80145d6 <_svfiprintf_r+0x17e>
 8014538:	b1b0      	cbz	r0, 8014568 <_svfiprintf_r+0x110>
 801453a:	9207      	str	r2, [sp, #28]
 801453c:	e014      	b.n	8014568 <_svfiprintf_r+0x110>
 801453e:	eba0 0308 	sub.w	r3, r0, r8
 8014542:	fa09 f303 	lsl.w	r3, r9, r3
 8014546:	4313      	orrs	r3, r2
 8014548:	9304      	str	r3, [sp, #16]
 801454a:	46a2      	mov	sl, r4
 801454c:	e7d2      	b.n	80144f4 <_svfiprintf_r+0x9c>
 801454e:	9b03      	ldr	r3, [sp, #12]
 8014550:	1d19      	adds	r1, r3, #4
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	9103      	str	r1, [sp, #12]
 8014556:	2b00      	cmp	r3, #0
 8014558:	bfbb      	ittet	lt
 801455a:	425b      	neglt	r3, r3
 801455c:	f042 0202 	orrlt.w	r2, r2, #2
 8014560:	9307      	strge	r3, [sp, #28]
 8014562:	9307      	strlt	r3, [sp, #28]
 8014564:	bfb8      	it	lt
 8014566:	9204      	strlt	r2, [sp, #16]
 8014568:	7823      	ldrb	r3, [r4, #0]
 801456a:	2b2e      	cmp	r3, #46	; 0x2e
 801456c:	d10c      	bne.n	8014588 <_svfiprintf_r+0x130>
 801456e:	7863      	ldrb	r3, [r4, #1]
 8014570:	2b2a      	cmp	r3, #42	; 0x2a
 8014572:	d135      	bne.n	80145e0 <_svfiprintf_r+0x188>
 8014574:	9b03      	ldr	r3, [sp, #12]
 8014576:	1d1a      	adds	r2, r3, #4
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	9203      	str	r2, [sp, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	bfb8      	it	lt
 8014580:	f04f 33ff 	movlt.w	r3, #4294967295
 8014584:	3402      	adds	r4, #2
 8014586:	9305      	str	r3, [sp, #20]
 8014588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014654 <_svfiprintf_r+0x1fc>
 801458c:	7821      	ldrb	r1, [r4, #0]
 801458e:	2203      	movs	r2, #3
 8014590:	4650      	mov	r0, sl
 8014592:	f7eb fe45 	bl	8000220 <memchr>
 8014596:	b140      	cbz	r0, 80145aa <_svfiprintf_r+0x152>
 8014598:	2340      	movs	r3, #64	; 0x40
 801459a:	eba0 000a 	sub.w	r0, r0, sl
 801459e:	fa03 f000 	lsl.w	r0, r3, r0
 80145a2:	9b04      	ldr	r3, [sp, #16]
 80145a4:	4303      	orrs	r3, r0
 80145a6:	3401      	adds	r4, #1
 80145a8:	9304      	str	r3, [sp, #16]
 80145aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145ae:	4826      	ldr	r0, [pc, #152]	; (8014648 <_svfiprintf_r+0x1f0>)
 80145b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145b4:	2206      	movs	r2, #6
 80145b6:	f7eb fe33 	bl	8000220 <memchr>
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d038      	beq.n	8014630 <_svfiprintf_r+0x1d8>
 80145be:	4b23      	ldr	r3, [pc, #140]	; (801464c <_svfiprintf_r+0x1f4>)
 80145c0:	bb1b      	cbnz	r3, 801460a <_svfiprintf_r+0x1b2>
 80145c2:	9b03      	ldr	r3, [sp, #12]
 80145c4:	3307      	adds	r3, #7
 80145c6:	f023 0307 	bic.w	r3, r3, #7
 80145ca:	3308      	adds	r3, #8
 80145cc:	9303      	str	r3, [sp, #12]
 80145ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d0:	4433      	add	r3, r6
 80145d2:	9309      	str	r3, [sp, #36]	; 0x24
 80145d4:	e767      	b.n	80144a6 <_svfiprintf_r+0x4e>
 80145d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80145da:	460c      	mov	r4, r1
 80145dc:	2001      	movs	r0, #1
 80145de:	e7a5      	b.n	801452c <_svfiprintf_r+0xd4>
 80145e0:	2300      	movs	r3, #0
 80145e2:	3401      	adds	r4, #1
 80145e4:	9305      	str	r3, [sp, #20]
 80145e6:	4619      	mov	r1, r3
 80145e8:	f04f 0c0a 	mov.w	ip, #10
 80145ec:	4620      	mov	r0, r4
 80145ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145f2:	3a30      	subs	r2, #48	; 0x30
 80145f4:	2a09      	cmp	r2, #9
 80145f6:	d903      	bls.n	8014600 <_svfiprintf_r+0x1a8>
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d0c5      	beq.n	8014588 <_svfiprintf_r+0x130>
 80145fc:	9105      	str	r1, [sp, #20]
 80145fe:	e7c3      	b.n	8014588 <_svfiprintf_r+0x130>
 8014600:	fb0c 2101 	mla	r1, ip, r1, r2
 8014604:	4604      	mov	r4, r0
 8014606:	2301      	movs	r3, #1
 8014608:	e7f0      	b.n	80145ec <_svfiprintf_r+0x194>
 801460a:	ab03      	add	r3, sp, #12
 801460c:	9300      	str	r3, [sp, #0]
 801460e:	462a      	mov	r2, r5
 8014610:	4b0f      	ldr	r3, [pc, #60]	; (8014650 <_svfiprintf_r+0x1f8>)
 8014612:	a904      	add	r1, sp, #16
 8014614:	4638      	mov	r0, r7
 8014616:	f7fc f981 	bl	801091c <_printf_float>
 801461a:	1c42      	adds	r2, r0, #1
 801461c:	4606      	mov	r6, r0
 801461e:	d1d6      	bne.n	80145ce <_svfiprintf_r+0x176>
 8014620:	89ab      	ldrh	r3, [r5, #12]
 8014622:	065b      	lsls	r3, r3, #25
 8014624:	f53f af2c 	bmi.w	8014480 <_svfiprintf_r+0x28>
 8014628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801462a:	b01d      	add	sp, #116	; 0x74
 801462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014630:	ab03      	add	r3, sp, #12
 8014632:	9300      	str	r3, [sp, #0]
 8014634:	462a      	mov	r2, r5
 8014636:	4b06      	ldr	r3, [pc, #24]	; (8014650 <_svfiprintf_r+0x1f8>)
 8014638:	a904      	add	r1, sp, #16
 801463a:	4638      	mov	r0, r7
 801463c:	f7fc fc12 	bl	8010e64 <_printf_i>
 8014640:	e7eb      	b.n	801461a <_svfiprintf_r+0x1c2>
 8014642:	bf00      	nop
 8014644:	08018254 	.word	0x08018254
 8014648:	0801825e 	.word	0x0801825e
 801464c:	0801091d 	.word	0x0801091d
 8014650:	080143a1 	.word	0x080143a1
 8014654:	0801825a 	.word	0x0801825a

08014658 <_sungetc_r>:
 8014658:	b538      	push	{r3, r4, r5, lr}
 801465a:	1c4b      	adds	r3, r1, #1
 801465c:	4614      	mov	r4, r2
 801465e:	d103      	bne.n	8014668 <_sungetc_r+0x10>
 8014660:	f04f 35ff 	mov.w	r5, #4294967295
 8014664:	4628      	mov	r0, r5
 8014666:	bd38      	pop	{r3, r4, r5, pc}
 8014668:	8993      	ldrh	r3, [r2, #12]
 801466a:	f023 0320 	bic.w	r3, r3, #32
 801466e:	8193      	strh	r3, [r2, #12]
 8014670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014672:	6852      	ldr	r2, [r2, #4]
 8014674:	b2cd      	uxtb	r5, r1
 8014676:	b18b      	cbz	r3, 801469c <_sungetc_r+0x44>
 8014678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801467a:	4293      	cmp	r3, r2
 801467c:	dd08      	ble.n	8014690 <_sungetc_r+0x38>
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	1e5a      	subs	r2, r3, #1
 8014682:	6022      	str	r2, [r4, #0]
 8014684:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014688:	6863      	ldr	r3, [r4, #4]
 801468a:	3301      	adds	r3, #1
 801468c:	6063      	str	r3, [r4, #4]
 801468e:	e7e9      	b.n	8014664 <_sungetc_r+0xc>
 8014690:	4621      	mov	r1, r4
 8014692:	f000 fbf1 	bl	8014e78 <__submore>
 8014696:	2800      	cmp	r0, #0
 8014698:	d0f1      	beq.n	801467e <_sungetc_r+0x26>
 801469a:	e7e1      	b.n	8014660 <_sungetc_r+0x8>
 801469c:	6921      	ldr	r1, [r4, #16]
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	b151      	cbz	r1, 80146b8 <_sungetc_r+0x60>
 80146a2:	4299      	cmp	r1, r3
 80146a4:	d208      	bcs.n	80146b8 <_sungetc_r+0x60>
 80146a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80146aa:	42a9      	cmp	r1, r5
 80146ac:	d104      	bne.n	80146b8 <_sungetc_r+0x60>
 80146ae:	3b01      	subs	r3, #1
 80146b0:	3201      	adds	r2, #1
 80146b2:	6023      	str	r3, [r4, #0]
 80146b4:	6062      	str	r2, [r4, #4]
 80146b6:	e7d5      	b.n	8014664 <_sungetc_r+0xc>
 80146b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80146bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146c0:	6363      	str	r3, [r4, #52]	; 0x34
 80146c2:	2303      	movs	r3, #3
 80146c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80146c6:	4623      	mov	r3, r4
 80146c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80146cc:	6023      	str	r3, [r4, #0]
 80146ce:	2301      	movs	r3, #1
 80146d0:	e7dc      	b.n	801468c <_sungetc_r+0x34>

080146d2 <__ssrefill_r>:
 80146d2:	b510      	push	{r4, lr}
 80146d4:	460c      	mov	r4, r1
 80146d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80146d8:	b169      	cbz	r1, 80146f6 <__ssrefill_r+0x24>
 80146da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146de:	4299      	cmp	r1, r3
 80146e0:	d001      	beq.n	80146e6 <__ssrefill_r+0x14>
 80146e2:	f7ff fd7d 	bl	80141e0 <_free_r>
 80146e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146e8:	6063      	str	r3, [r4, #4]
 80146ea:	2000      	movs	r0, #0
 80146ec:	6360      	str	r0, [r4, #52]	; 0x34
 80146ee:	b113      	cbz	r3, 80146f6 <__ssrefill_r+0x24>
 80146f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80146f2:	6023      	str	r3, [r4, #0]
 80146f4:	bd10      	pop	{r4, pc}
 80146f6:	6923      	ldr	r3, [r4, #16]
 80146f8:	6023      	str	r3, [r4, #0]
 80146fa:	2300      	movs	r3, #0
 80146fc:	6063      	str	r3, [r4, #4]
 80146fe:	89a3      	ldrh	r3, [r4, #12]
 8014700:	f043 0320 	orr.w	r3, r3, #32
 8014704:	81a3      	strh	r3, [r4, #12]
 8014706:	f04f 30ff 	mov.w	r0, #4294967295
 801470a:	e7f3      	b.n	80146f4 <__ssrefill_r+0x22>

0801470c <__ssvfiscanf_r>:
 801470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014710:	460c      	mov	r4, r1
 8014712:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014716:	2100      	movs	r1, #0
 8014718:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801471c:	49a6      	ldr	r1, [pc, #664]	; (80149b8 <__ssvfiscanf_r+0x2ac>)
 801471e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014720:	f10d 0804 	add.w	r8, sp, #4
 8014724:	49a5      	ldr	r1, [pc, #660]	; (80149bc <__ssvfiscanf_r+0x2b0>)
 8014726:	4fa6      	ldr	r7, [pc, #664]	; (80149c0 <__ssvfiscanf_r+0x2b4>)
 8014728:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80149c4 <__ssvfiscanf_r+0x2b8>
 801472c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014730:	4606      	mov	r6, r0
 8014732:	91a1      	str	r1, [sp, #644]	; 0x284
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	7813      	ldrb	r3, [r2, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	f000 815a 	beq.w	80149f2 <__ssvfiscanf_r+0x2e6>
 801473e:	5dd9      	ldrb	r1, [r3, r7]
 8014740:	f011 0108 	ands.w	r1, r1, #8
 8014744:	f102 0501 	add.w	r5, r2, #1
 8014748:	d019      	beq.n	801477e <__ssvfiscanf_r+0x72>
 801474a:	6863      	ldr	r3, [r4, #4]
 801474c:	2b00      	cmp	r3, #0
 801474e:	dd0f      	ble.n	8014770 <__ssvfiscanf_r+0x64>
 8014750:	6823      	ldr	r3, [r4, #0]
 8014752:	781a      	ldrb	r2, [r3, #0]
 8014754:	5cba      	ldrb	r2, [r7, r2]
 8014756:	0712      	lsls	r2, r2, #28
 8014758:	d401      	bmi.n	801475e <__ssvfiscanf_r+0x52>
 801475a:	462a      	mov	r2, r5
 801475c:	e7eb      	b.n	8014736 <__ssvfiscanf_r+0x2a>
 801475e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014760:	3201      	adds	r2, #1
 8014762:	9245      	str	r2, [sp, #276]	; 0x114
 8014764:	6862      	ldr	r2, [r4, #4]
 8014766:	3301      	adds	r3, #1
 8014768:	3a01      	subs	r2, #1
 801476a:	6062      	str	r2, [r4, #4]
 801476c:	6023      	str	r3, [r4, #0]
 801476e:	e7ec      	b.n	801474a <__ssvfiscanf_r+0x3e>
 8014770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014772:	4621      	mov	r1, r4
 8014774:	4630      	mov	r0, r6
 8014776:	4798      	blx	r3
 8014778:	2800      	cmp	r0, #0
 801477a:	d0e9      	beq.n	8014750 <__ssvfiscanf_r+0x44>
 801477c:	e7ed      	b.n	801475a <__ssvfiscanf_r+0x4e>
 801477e:	2b25      	cmp	r3, #37	; 0x25
 8014780:	d012      	beq.n	80147a8 <__ssvfiscanf_r+0x9c>
 8014782:	469a      	mov	sl, r3
 8014784:	6863      	ldr	r3, [r4, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	f340 8091 	ble.w	80148ae <__ssvfiscanf_r+0x1a2>
 801478c:	6822      	ldr	r2, [r4, #0]
 801478e:	7813      	ldrb	r3, [r2, #0]
 8014790:	4553      	cmp	r3, sl
 8014792:	f040 812e 	bne.w	80149f2 <__ssvfiscanf_r+0x2e6>
 8014796:	6863      	ldr	r3, [r4, #4]
 8014798:	3b01      	subs	r3, #1
 801479a:	6063      	str	r3, [r4, #4]
 801479c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801479e:	3201      	adds	r2, #1
 80147a0:	3301      	adds	r3, #1
 80147a2:	6022      	str	r2, [r4, #0]
 80147a4:	9345      	str	r3, [sp, #276]	; 0x114
 80147a6:	e7d8      	b.n	801475a <__ssvfiscanf_r+0x4e>
 80147a8:	9141      	str	r1, [sp, #260]	; 0x104
 80147aa:	9143      	str	r1, [sp, #268]	; 0x10c
 80147ac:	7853      	ldrb	r3, [r2, #1]
 80147ae:	2b2a      	cmp	r3, #42	; 0x2a
 80147b0:	bf02      	ittt	eq
 80147b2:	2310      	moveq	r3, #16
 80147b4:	1c95      	addeq	r5, r2, #2
 80147b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80147b8:	220a      	movs	r2, #10
 80147ba:	46aa      	mov	sl, r5
 80147bc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80147c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80147c4:	2b09      	cmp	r3, #9
 80147c6:	d91d      	bls.n	8014804 <__ssvfiscanf_r+0xf8>
 80147c8:	487e      	ldr	r0, [pc, #504]	; (80149c4 <__ssvfiscanf_r+0x2b8>)
 80147ca:	2203      	movs	r2, #3
 80147cc:	f7eb fd28 	bl	8000220 <memchr>
 80147d0:	b140      	cbz	r0, 80147e4 <__ssvfiscanf_r+0xd8>
 80147d2:	2301      	movs	r3, #1
 80147d4:	eba0 0009 	sub.w	r0, r0, r9
 80147d8:	fa03 f000 	lsl.w	r0, r3, r0
 80147dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80147de:	4318      	orrs	r0, r3
 80147e0:	9041      	str	r0, [sp, #260]	; 0x104
 80147e2:	4655      	mov	r5, sl
 80147e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80147e8:	2b78      	cmp	r3, #120	; 0x78
 80147ea:	d806      	bhi.n	80147fa <__ssvfiscanf_r+0xee>
 80147ec:	2b57      	cmp	r3, #87	; 0x57
 80147ee:	d810      	bhi.n	8014812 <__ssvfiscanf_r+0x106>
 80147f0:	2b25      	cmp	r3, #37	; 0x25
 80147f2:	d0c6      	beq.n	8014782 <__ssvfiscanf_r+0x76>
 80147f4:	d856      	bhi.n	80148a4 <__ssvfiscanf_r+0x198>
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d064      	beq.n	80148c4 <__ssvfiscanf_r+0x1b8>
 80147fa:	2303      	movs	r3, #3
 80147fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80147fe:	230a      	movs	r3, #10
 8014800:	9342      	str	r3, [sp, #264]	; 0x108
 8014802:	e071      	b.n	80148e8 <__ssvfiscanf_r+0x1dc>
 8014804:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014806:	fb02 1103 	mla	r1, r2, r3, r1
 801480a:	3930      	subs	r1, #48	; 0x30
 801480c:	9143      	str	r1, [sp, #268]	; 0x10c
 801480e:	4655      	mov	r5, sl
 8014810:	e7d3      	b.n	80147ba <__ssvfiscanf_r+0xae>
 8014812:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014816:	2a20      	cmp	r2, #32
 8014818:	d8ef      	bhi.n	80147fa <__ssvfiscanf_r+0xee>
 801481a:	a101      	add	r1, pc, #4	; (adr r1, 8014820 <__ssvfiscanf_r+0x114>)
 801481c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014820:	080148d3 	.word	0x080148d3
 8014824:	080147fb 	.word	0x080147fb
 8014828:	080147fb 	.word	0x080147fb
 801482c:	08014931 	.word	0x08014931
 8014830:	080147fb 	.word	0x080147fb
 8014834:	080147fb 	.word	0x080147fb
 8014838:	080147fb 	.word	0x080147fb
 801483c:	080147fb 	.word	0x080147fb
 8014840:	080147fb 	.word	0x080147fb
 8014844:	080147fb 	.word	0x080147fb
 8014848:	080147fb 	.word	0x080147fb
 801484c:	08014947 	.word	0x08014947
 8014850:	0801491d 	.word	0x0801491d
 8014854:	080148ab 	.word	0x080148ab
 8014858:	080148ab 	.word	0x080148ab
 801485c:	080148ab 	.word	0x080148ab
 8014860:	080147fb 	.word	0x080147fb
 8014864:	08014921 	.word	0x08014921
 8014868:	080147fb 	.word	0x080147fb
 801486c:	080147fb 	.word	0x080147fb
 8014870:	080147fb 	.word	0x080147fb
 8014874:	080147fb 	.word	0x080147fb
 8014878:	08014957 	.word	0x08014957
 801487c:	08014929 	.word	0x08014929
 8014880:	080148cb 	.word	0x080148cb
 8014884:	080147fb 	.word	0x080147fb
 8014888:	080147fb 	.word	0x080147fb
 801488c:	08014953 	.word	0x08014953
 8014890:	080147fb 	.word	0x080147fb
 8014894:	0801491d 	.word	0x0801491d
 8014898:	080147fb 	.word	0x080147fb
 801489c:	080147fb 	.word	0x080147fb
 80148a0:	080148d3 	.word	0x080148d3
 80148a4:	3b45      	subs	r3, #69	; 0x45
 80148a6:	2b02      	cmp	r3, #2
 80148a8:	d8a7      	bhi.n	80147fa <__ssvfiscanf_r+0xee>
 80148aa:	2305      	movs	r3, #5
 80148ac:	e01b      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 80148ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80148b0:	4621      	mov	r1, r4
 80148b2:	4630      	mov	r0, r6
 80148b4:	4798      	blx	r3
 80148b6:	2800      	cmp	r0, #0
 80148b8:	f43f af68 	beq.w	801478c <__ssvfiscanf_r+0x80>
 80148bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80148be:	2800      	cmp	r0, #0
 80148c0:	f040 808d 	bne.w	80149de <__ssvfiscanf_r+0x2d2>
 80148c4:	f04f 30ff 	mov.w	r0, #4294967295
 80148c8:	e08f      	b.n	80149ea <__ssvfiscanf_r+0x2de>
 80148ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80148cc:	f042 0220 	orr.w	r2, r2, #32
 80148d0:	9241      	str	r2, [sp, #260]	; 0x104
 80148d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80148d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80148d8:	9241      	str	r2, [sp, #260]	; 0x104
 80148da:	2210      	movs	r2, #16
 80148dc:	2b6f      	cmp	r3, #111	; 0x6f
 80148de:	9242      	str	r2, [sp, #264]	; 0x108
 80148e0:	bf34      	ite	cc
 80148e2:	2303      	movcc	r3, #3
 80148e4:	2304      	movcs	r3, #4
 80148e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80148e8:	6863      	ldr	r3, [r4, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	dd42      	ble.n	8014974 <__ssvfiscanf_r+0x268>
 80148ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80148f0:	0659      	lsls	r1, r3, #25
 80148f2:	d404      	bmi.n	80148fe <__ssvfiscanf_r+0x1f2>
 80148f4:	6823      	ldr	r3, [r4, #0]
 80148f6:	781a      	ldrb	r2, [r3, #0]
 80148f8:	5cba      	ldrb	r2, [r7, r2]
 80148fa:	0712      	lsls	r2, r2, #28
 80148fc:	d441      	bmi.n	8014982 <__ssvfiscanf_r+0x276>
 80148fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014900:	2b02      	cmp	r3, #2
 8014902:	dc50      	bgt.n	80149a6 <__ssvfiscanf_r+0x29a>
 8014904:	466b      	mov	r3, sp
 8014906:	4622      	mov	r2, r4
 8014908:	a941      	add	r1, sp, #260	; 0x104
 801490a:	4630      	mov	r0, r6
 801490c:	f000 f876 	bl	80149fc <_scanf_chars>
 8014910:	2801      	cmp	r0, #1
 8014912:	d06e      	beq.n	80149f2 <__ssvfiscanf_r+0x2e6>
 8014914:	2802      	cmp	r0, #2
 8014916:	f47f af20 	bne.w	801475a <__ssvfiscanf_r+0x4e>
 801491a:	e7cf      	b.n	80148bc <__ssvfiscanf_r+0x1b0>
 801491c:	220a      	movs	r2, #10
 801491e:	e7dd      	b.n	80148dc <__ssvfiscanf_r+0x1d0>
 8014920:	2300      	movs	r3, #0
 8014922:	9342      	str	r3, [sp, #264]	; 0x108
 8014924:	2303      	movs	r3, #3
 8014926:	e7de      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 8014928:	2308      	movs	r3, #8
 801492a:	9342      	str	r3, [sp, #264]	; 0x108
 801492c:	2304      	movs	r3, #4
 801492e:	e7da      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 8014930:	4629      	mov	r1, r5
 8014932:	4640      	mov	r0, r8
 8014934:	f000 f9e0 	bl	8014cf8 <__sccl>
 8014938:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801493a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801493e:	9341      	str	r3, [sp, #260]	; 0x104
 8014940:	4605      	mov	r5, r0
 8014942:	2301      	movs	r3, #1
 8014944:	e7cf      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 8014946:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801494c:	9341      	str	r3, [sp, #260]	; 0x104
 801494e:	2300      	movs	r3, #0
 8014950:	e7c9      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 8014952:	2302      	movs	r3, #2
 8014954:	e7c7      	b.n	80148e6 <__ssvfiscanf_r+0x1da>
 8014956:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014958:	06c3      	lsls	r3, r0, #27
 801495a:	f53f aefe 	bmi.w	801475a <__ssvfiscanf_r+0x4e>
 801495e:	9b00      	ldr	r3, [sp, #0]
 8014960:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014962:	1d19      	adds	r1, r3, #4
 8014964:	9100      	str	r1, [sp, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	f010 0f01 	tst.w	r0, #1
 801496c:	bf14      	ite	ne
 801496e:	801a      	strhne	r2, [r3, #0]
 8014970:	601a      	streq	r2, [r3, #0]
 8014972:	e6f2      	b.n	801475a <__ssvfiscanf_r+0x4e>
 8014974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014976:	4621      	mov	r1, r4
 8014978:	4630      	mov	r0, r6
 801497a:	4798      	blx	r3
 801497c:	2800      	cmp	r0, #0
 801497e:	d0b6      	beq.n	80148ee <__ssvfiscanf_r+0x1e2>
 8014980:	e79c      	b.n	80148bc <__ssvfiscanf_r+0x1b0>
 8014982:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014984:	3201      	adds	r2, #1
 8014986:	9245      	str	r2, [sp, #276]	; 0x114
 8014988:	6862      	ldr	r2, [r4, #4]
 801498a:	3a01      	subs	r2, #1
 801498c:	2a00      	cmp	r2, #0
 801498e:	6062      	str	r2, [r4, #4]
 8014990:	dd02      	ble.n	8014998 <__ssvfiscanf_r+0x28c>
 8014992:	3301      	adds	r3, #1
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	e7ad      	b.n	80148f4 <__ssvfiscanf_r+0x1e8>
 8014998:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801499a:	4621      	mov	r1, r4
 801499c:	4630      	mov	r0, r6
 801499e:	4798      	blx	r3
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d0a7      	beq.n	80148f4 <__ssvfiscanf_r+0x1e8>
 80149a4:	e78a      	b.n	80148bc <__ssvfiscanf_r+0x1b0>
 80149a6:	2b04      	cmp	r3, #4
 80149a8:	dc0e      	bgt.n	80149c8 <__ssvfiscanf_r+0x2bc>
 80149aa:	466b      	mov	r3, sp
 80149ac:	4622      	mov	r2, r4
 80149ae:	a941      	add	r1, sp, #260	; 0x104
 80149b0:	4630      	mov	r0, r6
 80149b2:	f000 f87d 	bl	8014ab0 <_scanf_i>
 80149b6:	e7ab      	b.n	8014910 <__ssvfiscanf_r+0x204>
 80149b8:	08014659 	.word	0x08014659
 80149bc:	080146d3 	.word	0x080146d3
 80149c0:	08017ef1 	.word	0x08017ef1
 80149c4:	0801825a 	.word	0x0801825a
 80149c8:	4b0b      	ldr	r3, [pc, #44]	; (80149f8 <__ssvfiscanf_r+0x2ec>)
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f43f aec5 	beq.w	801475a <__ssvfiscanf_r+0x4e>
 80149d0:	466b      	mov	r3, sp
 80149d2:	4622      	mov	r2, r4
 80149d4:	a941      	add	r1, sp, #260	; 0x104
 80149d6:	4630      	mov	r0, r6
 80149d8:	f7fc fb6a 	bl	80110b0 <_scanf_float>
 80149dc:	e798      	b.n	8014910 <__ssvfiscanf_r+0x204>
 80149de:	89a3      	ldrh	r3, [r4, #12]
 80149e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80149e4:	bf18      	it	ne
 80149e6:	f04f 30ff 	movne.w	r0, #4294967295
 80149ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80149ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80149f4:	e7f9      	b.n	80149ea <__ssvfiscanf_r+0x2de>
 80149f6:	bf00      	nop
 80149f8:	080110b1 	.word	0x080110b1

080149fc <_scanf_chars>:
 80149fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a00:	4615      	mov	r5, r2
 8014a02:	688a      	ldr	r2, [r1, #8]
 8014a04:	4680      	mov	r8, r0
 8014a06:	460c      	mov	r4, r1
 8014a08:	b932      	cbnz	r2, 8014a18 <_scanf_chars+0x1c>
 8014a0a:	698a      	ldr	r2, [r1, #24]
 8014a0c:	2a00      	cmp	r2, #0
 8014a0e:	bf0c      	ite	eq
 8014a10:	2201      	moveq	r2, #1
 8014a12:	f04f 32ff 	movne.w	r2, #4294967295
 8014a16:	608a      	str	r2, [r1, #8]
 8014a18:	6822      	ldr	r2, [r4, #0]
 8014a1a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014aac <_scanf_chars+0xb0>
 8014a1e:	06d1      	lsls	r1, r2, #27
 8014a20:	bf5f      	itttt	pl
 8014a22:	681a      	ldrpl	r2, [r3, #0]
 8014a24:	1d11      	addpl	r1, r2, #4
 8014a26:	6019      	strpl	r1, [r3, #0]
 8014a28:	6816      	ldrpl	r6, [r2, #0]
 8014a2a:	2700      	movs	r7, #0
 8014a2c:	69a0      	ldr	r0, [r4, #24]
 8014a2e:	b188      	cbz	r0, 8014a54 <_scanf_chars+0x58>
 8014a30:	2801      	cmp	r0, #1
 8014a32:	d107      	bne.n	8014a44 <_scanf_chars+0x48>
 8014a34:	682a      	ldr	r2, [r5, #0]
 8014a36:	7811      	ldrb	r1, [r2, #0]
 8014a38:	6962      	ldr	r2, [r4, #20]
 8014a3a:	5c52      	ldrb	r2, [r2, r1]
 8014a3c:	b952      	cbnz	r2, 8014a54 <_scanf_chars+0x58>
 8014a3e:	2f00      	cmp	r7, #0
 8014a40:	d031      	beq.n	8014aa6 <_scanf_chars+0xaa>
 8014a42:	e022      	b.n	8014a8a <_scanf_chars+0x8e>
 8014a44:	2802      	cmp	r0, #2
 8014a46:	d120      	bne.n	8014a8a <_scanf_chars+0x8e>
 8014a48:	682b      	ldr	r3, [r5, #0]
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014a50:	071b      	lsls	r3, r3, #28
 8014a52:	d41a      	bmi.n	8014a8a <_scanf_chars+0x8e>
 8014a54:	6823      	ldr	r3, [r4, #0]
 8014a56:	06da      	lsls	r2, r3, #27
 8014a58:	bf5e      	ittt	pl
 8014a5a:	682b      	ldrpl	r3, [r5, #0]
 8014a5c:	781b      	ldrbpl	r3, [r3, #0]
 8014a5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014a62:	682a      	ldr	r2, [r5, #0]
 8014a64:	686b      	ldr	r3, [r5, #4]
 8014a66:	3201      	adds	r2, #1
 8014a68:	602a      	str	r2, [r5, #0]
 8014a6a:	68a2      	ldr	r2, [r4, #8]
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	3a01      	subs	r2, #1
 8014a70:	606b      	str	r3, [r5, #4]
 8014a72:	3701      	adds	r7, #1
 8014a74:	60a2      	str	r2, [r4, #8]
 8014a76:	b142      	cbz	r2, 8014a8a <_scanf_chars+0x8e>
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	dcd7      	bgt.n	8014a2c <_scanf_chars+0x30>
 8014a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014a80:	4629      	mov	r1, r5
 8014a82:	4640      	mov	r0, r8
 8014a84:	4798      	blx	r3
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d0d0      	beq.n	8014a2c <_scanf_chars+0x30>
 8014a8a:	6823      	ldr	r3, [r4, #0]
 8014a8c:	f013 0310 	ands.w	r3, r3, #16
 8014a90:	d105      	bne.n	8014a9e <_scanf_chars+0xa2>
 8014a92:	68e2      	ldr	r2, [r4, #12]
 8014a94:	3201      	adds	r2, #1
 8014a96:	60e2      	str	r2, [r4, #12]
 8014a98:	69a2      	ldr	r2, [r4, #24]
 8014a9a:	b102      	cbz	r2, 8014a9e <_scanf_chars+0xa2>
 8014a9c:	7033      	strb	r3, [r6, #0]
 8014a9e:	6923      	ldr	r3, [r4, #16]
 8014aa0:	443b      	add	r3, r7
 8014aa2:	6123      	str	r3, [r4, #16]
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aaa:	bf00      	nop
 8014aac:	08017ef1 	.word	0x08017ef1

08014ab0 <_scanf_i>:
 8014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	4698      	mov	r8, r3
 8014ab6:	4b76      	ldr	r3, [pc, #472]	; (8014c90 <_scanf_i+0x1e0>)
 8014ab8:	460c      	mov	r4, r1
 8014aba:	4682      	mov	sl, r0
 8014abc:	4616      	mov	r6, r2
 8014abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ac2:	b087      	sub	sp, #28
 8014ac4:	ab03      	add	r3, sp, #12
 8014ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014aca:	4b72      	ldr	r3, [pc, #456]	; (8014c94 <_scanf_i+0x1e4>)
 8014acc:	69a1      	ldr	r1, [r4, #24]
 8014ace:	4a72      	ldr	r2, [pc, #456]	; (8014c98 <_scanf_i+0x1e8>)
 8014ad0:	2903      	cmp	r1, #3
 8014ad2:	bf18      	it	ne
 8014ad4:	461a      	movne	r2, r3
 8014ad6:	68a3      	ldr	r3, [r4, #8]
 8014ad8:	9201      	str	r2, [sp, #4]
 8014ada:	1e5a      	subs	r2, r3, #1
 8014adc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014ae0:	bf88      	it	hi
 8014ae2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014ae6:	4627      	mov	r7, r4
 8014ae8:	bf82      	ittt	hi
 8014aea:	eb03 0905 	addhi.w	r9, r3, r5
 8014aee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014af2:	60a3      	strhi	r3, [r4, #8]
 8014af4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014af8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014afc:	bf98      	it	ls
 8014afe:	f04f 0900 	movls.w	r9, #0
 8014b02:	6023      	str	r3, [r4, #0]
 8014b04:	463d      	mov	r5, r7
 8014b06:	f04f 0b00 	mov.w	fp, #0
 8014b0a:	6831      	ldr	r1, [r6, #0]
 8014b0c:	ab03      	add	r3, sp, #12
 8014b0e:	7809      	ldrb	r1, [r1, #0]
 8014b10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b14:	2202      	movs	r2, #2
 8014b16:	f7eb fb83 	bl	8000220 <memchr>
 8014b1a:	b328      	cbz	r0, 8014b68 <_scanf_i+0xb8>
 8014b1c:	f1bb 0f01 	cmp.w	fp, #1
 8014b20:	d159      	bne.n	8014bd6 <_scanf_i+0x126>
 8014b22:	6862      	ldr	r2, [r4, #4]
 8014b24:	b92a      	cbnz	r2, 8014b32 <_scanf_i+0x82>
 8014b26:	6822      	ldr	r2, [r4, #0]
 8014b28:	2308      	movs	r3, #8
 8014b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014b2e:	6063      	str	r3, [r4, #4]
 8014b30:	6022      	str	r2, [r4, #0]
 8014b32:	6822      	ldr	r2, [r4, #0]
 8014b34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014b38:	6022      	str	r2, [r4, #0]
 8014b3a:	68a2      	ldr	r2, [r4, #8]
 8014b3c:	1e51      	subs	r1, r2, #1
 8014b3e:	60a1      	str	r1, [r4, #8]
 8014b40:	b192      	cbz	r2, 8014b68 <_scanf_i+0xb8>
 8014b42:	6832      	ldr	r2, [r6, #0]
 8014b44:	1c51      	adds	r1, r2, #1
 8014b46:	6031      	str	r1, [r6, #0]
 8014b48:	7812      	ldrb	r2, [r2, #0]
 8014b4a:	f805 2b01 	strb.w	r2, [r5], #1
 8014b4e:	6872      	ldr	r2, [r6, #4]
 8014b50:	3a01      	subs	r2, #1
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	6072      	str	r2, [r6, #4]
 8014b56:	dc07      	bgt.n	8014b68 <_scanf_i+0xb8>
 8014b58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014b5c:	4631      	mov	r1, r6
 8014b5e:	4650      	mov	r0, sl
 8014b60:	4790      	blx	r2
 8014b62:	2800      	cmp	r0, #0
 8014b64:	f040 8085 	bne.w	8014c72 <_scanf_i+0x1c2>
 8014b68:	f10b 0b01 	add.w	fp, fp, #1
 8014b6c:	f1bb 0f03 	cmp.w	fp, #3
 8014b70:	d1cb      	bne.n	8014b0a <_scanf_i+0x5a>
 8014b72:	6863      	ldr	r3, [r4, #4]
 8014b74:	b90b      	cbnz	r3, 8014b7a <_scanf_i+0xca>
 8014b76:	230a      	movs	r3, #10
 8014b78:	6063      	str	r3, [r4, #4]
 8014b7a:	6863      	ldr	r3, [r4, #4]
 8014b7c:	4947      	ldr	r1, [pc, #284]	; (8014c9c <_scanf_i+0x1ec>)
 8014b7e:	6960      	ldr	r0, [r4, #20]
 8014b80:	1ac9      	subs	r1, r1, r3
 8014b82:	f000 f8b9 	bl	8014cf8 <__sccl>
 8014b86:	f04f 0b00 	mov.w	fp, #0
 8014b8a:	68a3      	ldr	r3, [r4, #8]
 8014b8c:	6822      	ldr	r2, [r4, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d03d      	beq.n	8014c0e <_scanf_i+0x15e>
 8014b92:	6831      	ldr	r1, [r6, #0]
 8014b94:	6960      	ldr	r0, [r4, #20]
 8014b96:	f891 c000 	ldrb.w	ip, [r1]
 8014b9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d035      	beq.n	8014c0e <_scanf_i+0x15e>
 8014ba2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014ba6:	d124      	bne.n	8014bf2 <_scanf_i+0x142>
 8014ba8:	0510      	lsls	r0, r2, #20
 8014baa:	d522      	bpl.n	8014bf2 <_scanf_i+0x142>
 8014bac:	f10b 0b01 	add.w	fp, fp, #1
 8014bb0:	f1b9 0f00 	cmp.w	r9, #0
 8014bb4:	d003      	beq.n	8014bbe <_scanf_i+0x10e>
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8014bbc:	60a3      	str	r3, [r4, #8]
 8014bbe:	6873      	ldr	r3, [r6, #4]
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	6073      	str	r3, [r6, #4]
 8014bc6:	dd1b      	ble.n	8014c00 <_scanf_i+0x150>
 8014bc8:	6833      	ldr	r3, [r6, #0]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	6033      	str	r3, [r6, #0]
 8014bce:	68a3      	ldr	r3, [r4, #8]
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	60a3      	str	r3, [r4, #8]
 8014bd4:	e7d9      	b.n	8014b8a <_scanf_i+0xda>
 8014bd6:	f1bb 0f02 	cmp.w	fp, #2
 8014bda:	d1ae      	bne.n	8014b3a <_scanf_i+0x8a>
 8014bdc:	6822      	ldr	r2, [r4, #0]
 8014bde:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014be2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014be6:	d1bf      	bne.n	8014b68 <_scanf_i+0xb8>
 8014be8:	2310      	movs	r3, #16
 8014bea:	6063      	str	r3, [r4, #4]
 8014bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014bf0:	e7a2      	b.n	8014b38 <_scanf_i+0x88>
 8014bf2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014bf6:	6022      	str	r2, [r4, #0]
 8014bf8:	780b      	ldrb	r3, [r1, #0]
 8014bfa:	f805 3b01 	strb.w	r3, [r5], #1
 8014bfe:	e7de      	b.n	8014bbe <_scanf_i+0x10e>
 8014c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014c04:	4631      	mov	r1, r6
 8014c06:	4650      	mov	r0, sl
 8014c08:	4798      	blx	r3
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d0df      	beq.n	8014bce <_scanf_i+0x11e>
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	05db      	lsls	r3, r3, #23
 8014c12:	d50d      	bpl.n	8014c30 <_scanf_i+0x180>
 8014c14:	42bd      	cmp	r5, r7
 8014c16:	d909      	bls.n	8014c2c <_scanf_i+0x17c>
 8014c18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c20:	4632      	mov	r2, r6
 8014c22:	4650      	mov	r0, sl
 8014c24:	4798      	blx	r3
 8014c26:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c2a:	464d      	mov	r5, r9
 8014c2c:	42bd      	cmp	r5, r7
 8014c2e:	d02d      	beq.n	8014c8c <_scanf_i+0x1dc>
 8014c30:	6822      	ldr	r2, [r4, #0]
 8014c32:	f012 0210 	ands.w	r2, r2, #16
 8014c36:	d113      	bne.n	8014c60 <_scanf_i+0x1b0>
 8014c38:	702a      	strb	r2, [r5, #0]
 8014c3a:	6863      	ldr	r3, [r4, #4]
 8014c3c:	9e01      	ldr	r6, [sp, #4]
 8014c3e:	4639      	mov	r1, r7
 8014c40:	4650      	mov	r0, sl
 8014c42:	47b0      	blx	r6
 8014c44:	6821      	ldr	r1, [r4, #0]
 8014c46:	f8d8 3000 	ldr.w	r3, [r8]
 8014c4a:	f011 0f20 	tst.w	r1, #32
 8014c4e:	d013      	beq.n	8014c78 <_scanf_i+0x1c8>
 8014c50:	1d1a      	adds	r2, r3, #4
 8014c52:	f8c8 2000 	str.w	r2, [r8]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	6018      	str	r0, [r3, #0]
 8014c5a:	68e3      	ldr	r3, [r4, #12]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	60e3      	str	r3, [r4, #12]
 8014c60:	1bed      	subs	r5, r5, r7
 8014c62:	44ab      	add	fp, r5
 8014c64:	6925      	ldr	r5, [r4, #16]
 8014c66:	445d      	add	r5, fp
 8014c68:	6125      	str	r5, [r4, #16]
 8014c6a:	2000      	movs	r0, #0
 8014c6c:	b007      	add	sp, #28
 8014c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c72:	f04f 0b00 	mov.w	fp, #0
 8014c76:	e7ca      	b.n	8014c0e <_scanf_i+0x15e>
 8014c78:	1d1a      	adds	r2, r3, #4
 8014c7a:	f8c8 2000 	str.w	r2, [r8]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f011 0f01 	tst.w	r1, #1
 8014c84:	bf14      	ite	ne
 8014c86:	8018      	strhne	r0, [r3, #0]
 8014c88:	6018      	streq	r0, [r3, #0]
 8014c8a:	e7e6      	b.n	8014c5a <_scanf_i+0x1aa>
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	e7ed      	b.n	8014c6c <_scanf_i+0x1bc>
 8014c90:	080179f4 	.word	0x080179f4
 8014c94:	08014e75 	.word	0x08014e75
 8014c98:	08012395 	.word	0x08012395
 8014c9c:	0801827e 	.word	0x0801827e

08014ca0 <_read_r>:
 8014ca0:	b538      	push	{r3, r4, r5, lr}
 8014ca2:	4d07      	ldr	r5, [pc, #28]	; (8014cc0 <_read_r+0x20>)
 8014ca4:	4604      	mov	r4, r0
 8014ca6:	4608      	mov	r0, r1
 8014ca8:	4611      	mov	r1, r2
 8014caa:	2200      	movs	r2, #0
 8014cac:	602a      	str	r2, [r5, #0]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	f7f1 fcf8 	bl	80066a4 <_read>
 8014cb4:	1c43      	adds	r3, r0, #1
 8014cb6:	d102      	bne.n	8014cbe <_read_r+0x1e>
 8014cb8:	682b      	ldr	r3, [r5, #0]
 8014cba:	b103      	cbz	r3, 8014cbe <_read_r+0x1e>
 8014cbc:	6023      	str	r3, [r4, #0]
 8014cbe:	bd38      	pop	{r3, r4, r5, pc}
 8014cc0:	20004954 	.word	0x20004954
 8014cc4:	00000000 	.word	0x00000000

08014cc8 <nan>:
 8014cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014cd0 <nan+0x8>
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	00000000 	.word	0x00000000
 8014cd4:	7ff80000 	.word	0x7ff80000

08014cd8 <_sbrk_r>:
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	4d06      	ldr	r5, [pc, #24]	; (8014cf4 <_sbrk_r+0x1c>)
 8014cdc:	2300      	movs	r3, #0
 8014cde:	4604      	mov	r4, r0
 8014ce0:	4608      	mov	r0, r1
 8014ce2:	602b      	str	r3, [r5, #0]
 8014ce4:	f7f1 fd4c 	bl	8006780 <_sbrk>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	d102      	bne.n	8014cf2 <_sbrk_r+0x1a>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	b103      	cbz	r3, 8014cf2 <_sbrk_r+0x1a>
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	bd38      	pop	{r3, r4, r5, pc}
 8014cf4:	20004954 	.word	0x20004954

08014cf8 <__sccl>:
 8014cf8:	b570      	push	{r4, r5, r6, lr}
 8014cfa:	780b      	ldrb	r3, [r1, #0]
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	2b5e      	cmp	r3, #94	; 0x5e
 8014d00:	bf0b      	itete	eq
 8014d02:	784b      	ldrbeq	r3, [r1, #1]
 8014d04:	1c48      	addne	r0, r1, #1
 8014d06:	1c88      	addeq	r0, r1, #2
 8014d08:	2200      	movne	r2, #0
 8014d0a:	bf08      	it	eq
 8014d0c:	2201      	moveq	r2, #1
 8014d0e:	1e61      	subs	r1, r4, #1
 8014d10:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014d14:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014d18:	42a9      	cmp	r1, r5
 8014d1a:	d1fb      	bne.n	8014d14 <__sccl+0x1c>
 8014d1c:	b90b      	cbnz	r3, 8014d22 <__sccl+0x2a>
 8014d1e:	3801      	subs	r0, #1
 8014d20:	bd70      	pop	{r4, r5, r6, pc}
 8014d22:	f082 0201 	eor.w	r2, r2, #1
 8014d26:	54e2      	strb	r2, [r4, r3]
 8014d28:	4605      	mov	r5, r0
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014d30:	292d      	cmp	r1, #45	; 0x2d
 8014d32:	d006      	beq.n	8014d42 <__sccl+0x4a>
 8014d34:	295d      	cmp	r1, #93	; 0x5d
 8014d36:	d0f3      	beq.n	8014d20 <__sccl+0x28>
 8014d38:	b909      	cbnz	r1, 8014d3e <__sccl+0x46>
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	e7f0      	b.n	8014d20 <__sccl+0x28>
 8014d3e:	460b      	mov	r3, r1
 8014d40:	e7f1      	b.n	8014d26 <__sccl+0x2e>
 8014d42:	786e      	ldrb	r6, [r5, #1]
 8014d44:	2e5d      	cmp	r6, #93	; 0x5d
 8014d46:	d0fa      	beq.n	8014d3e <__sccl+0x46>
 8014d48:	42b3      	cmp	r3, r6
 8014d4a:	dcf8      	bgt.n	8014d3e <__sccl+0x46>
 8014d4c:	3502      	adds	r5, #2
 8014d4e:	4619      	mov	r1, r3
 8014d50:	3101      	adds	r1, #1
 8014d52:	428e      	cmp	r6, r1
 8014d54:	5462      	strb	r2, [r4, r1]
 8014d56:	dcfb      	bgt.n	8014d50 <__sccl+0x58>
 8014d58:	1af1      	subs	r1, r6, r3
 8014d5a:	3901      	subs	r1, #1
 8014d5c:	1c58      	adds	r0, r3, #1
 8014d5e:	42b3      	cmp	r3, r6
 8014d60:	bfa8      	it	ge
 8014d62:	2100      	movge	r1, #0
 8014d64:	1843      	adds	r3, r0, r1
 8014d66:	e7e0      	b.n	8014d2a <__sccl+0x32>

08014d68 <strncmp>:
 8014d68:	b510      	push	{r4, lr}
 8014d6a:	b17a      	cbz	r2, 8014d8c <strncmp+0x24>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	3901      	subs	r1, #1
 8014d70:	1884      	adds	r4, r0, r2
 8014d72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014d76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014d7a:	4290      	cmp	r0, r2
 8014d7c:	d101      	bne.n	8014d82 <strncmp+0x1a>
 8014d7e:	42a3      	cmp	r3, r4
 8014d80:	d101      	bne.n	8014d86 <strncmp+0x1e>
 8014d82:	1a80      	subs	r0, r0, r2
 8014d84:	bd10      	pop	{r4, pc}
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d1f3      	bne.n	8014d72 <strncmp+0xa>
 8014d8a:	e7fa      	b.n	8014d82 <strncmp+0x1a>
 8014d8c:	4610      	mov	r0, r2
 8014d8e:	e7f9      	b.n	8014d84 <strncmp+0x1c>

08014d90 <_strtoul_l.constprop.0>:
 8014d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d94:	4f36      	ldr	r7, [pc, #216]	; (8014e70 <_strtoul_l.constprop.0+0xe0>)
 8014d96:	4686      	mov	lr, r0
 8014d98:	460d      	mov	r5, r1
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014da0:	5de6      	ldrb	r6, [r4, r7]
 8014da2:	f016 0608 	ands.w	r6, r6, #8
 8014da6:	d1f8      	bne.n	8014d9a <_strtoul_l.constprop.0+0xa>
 8014da8:	2c2d      	cmp	r4, #45	; 0x2d
 8014daa:	d12f      	bne.n	8014e0c <_strtoul_l.constprop.0+0x7c>
 8014dac:	782c      	ldrb	r4, [r5, #0]
 8014dae:	2601      	movs	r6, #1
 8014db0:	1c85      	adds	r5, r0, #2
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d057      	beq.n	8014e66 <_strtoul_l.constprop.0+0xd6>
 8014db6:	2b10      	cmp	r3, #16
 8014db8:	d109      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014dba:	2c30      	cmp	r4, #48	; 0x30
 8014dbc:	d107      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014dbe:	7828      	ldrb	r0, [r5, #0]
 8014dc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014dc4:	2858      	cmp	r0, #88	; 0x58
 8014dc6:	d149      	bne.n	8014e5c <_strtoul_l.constprop.0+0xcc>
 8014dc8:	786c      	ldrb	r4, [r5, #1]
 8014dca:	2310      	movs	r3, #16
 8014dcc:	3502      	adds	r5, #2
 8014dce:	f04f 38ff 	mov.w	r8, #4294967295
 8014dd2:	2700      	movs	r7, #0
 8014dd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8014dd8:	fb03 f908 	mul.w	r9, r3, r8
 8014ddc:	ea6f 0909 	mvn.w	r9, r9
 8014de0:	4638      	mov	r0, r7
 8014de2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014de6:	f1bc 0f09 	cmp.w	ip, #9
 8014dea:	d814      	bhi.n	8014e16 <_strtoul_l.constprop.0+0x86>
 8014dec:	4664      	mov	r4, ip
 8014dee:	42a3      	cmp	r3, r4
 8014df0:	dd22      	ble.n	8014e38 <_strtoul_l.constprop.0+0xa8>
 8014df2:	2f00      	cmp	r7, #0
 8014df4:	db1d      	blt.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014df6:	4580      	cmp	r8, r0
 8014df8:	d31b      	bcc.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014dfa:	d101      	bne.n	8014e00 <_strtoul_l.constprop.0+0x70>
 8014dfc:	45a1      	cmp	r9, r4
 8014dfe:	db18      	blt.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014e00:	fb00 4003 	mla	r0, r0, r3, r4
 8014e04:	2701      	movs	r7, #1
 8014e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e0a:	e7ea      	b.n	8014de2 <_strtoul_l.constprop.0+0x52>
 8014e0c:	2c2b      	cmp	r4, #43	; 0x2b
 8014e0e:	bf04      	itt	eq
 8014e10:	782c      	ldrbeq	r4, [r5, #0]
 8014e12:	1c85      	addeq	r5, r0, #2
 8014e14:	e7cd      	b.n	8014db2 <_strtoul_l.constprop.0+0x22>
 8014e16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e1a:	f1bc 0f19 	cmp.w	ip, #25
 8014e1e:	d801      	bhi.n	8014e24 <_strtoul_l.constprop.0+0x94>
 8014e20:	3c37      	subs	r4, #55	; 0x37
 8014e22:	e7e4      	b.n	8014dee <_strtoul_l.constprop.0+0x5e>
 8014e24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e28:	f1bc 0f19 	cmp.w	ip, #25
 8014e2c:	d804      	bhi.n	8014e38 <_strtoul_l.constprop.0+0xa8>
 8014e2e:	3c57      	subs	r4, #87	; 0x57
 8014e30:	e7dd      	b.n	8014dee <_strtoul_l.constprop.0+0x5e>
 8014e32:	f04f 37ff 	mov.w	r7, #4294967295
 8014e36:	e7e6      	b.n	8014e06 <_strtoul_l.constprop.0+0x76>
 8014e38:	2f00      	cmp	r7, #0
 8014e3a:	da07      	bge.n	8014e4c <_strtoul_l.constprop.0+0xbc>
 8014e3c:	2322      	movs	r3, #34	; 0x22
 8014e3e:	f8ce 3000 	str.w	r3, [lr]
 8014e42:	f04f 30ff 	mov.w	r0, #4294967295
 8014e46:	b932      	cbnz	r2, 8014e56 <_strtoul_l.constprop.0+0xc6>
 8014e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4c:	b106      	cbz	r6, 8014e50 <_strtoul_l.constprop.0+0xc0>
 8014e4e:	4240      	negs	r0, r0
 8014e50:	2a00      	cmp	r2, #0
 8014e52:	d0f9      	beq.n	8014e48 <_strtoul_l.constprop.0+0xb8>
 8014e54:	b107      	cbz	r7, 8014e58 <_strtoul_l.constprop.0+0xc8>
 8014e56:	1e69      	subs	r1, r5, #1
 8014e58:	6011      	str	r1, [r2, #0]
 8014e5a:	e7f5      	b.n	8014e48 <_strtoul_l.constprop.0+0xb8>
 8014e5c:	2430      	movs	r4, #48	; 0x30
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1b5      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e62:	2308      	movs	r3, #8
 8014e64:	e7b3      	b.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e66:	2c30      	cmp	r4, #48	; 0x30
 8014e68:	d0a9      	beq.n	8014dbe <_strtoul_l.constprop.0+0x2e>
 8014e6a:	230a      	movs	r3, #10
 8014e6c:	e7af      	b.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e6e:	bf00      	nop
 8014e70:	08017ef1 	.word	0x08017ef1

08014e74 <_strtoul_r>:
 8014e74:	f7ff bf8c 	b.w	8014d90 <_strtoul_l.constprop.0>

08014e78 <__submore>:
 8014e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	460c      	mov	r4, r1
 8014e7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e84:	4299      	cmp	r1, r3
 8014e86:	d11d      	bne.n	8014ec4 <__submore+0x4c>
 8014e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014e8c:	f7ff fa14 	bl	80142b8 <_malloc_r>
 8014e90:	b918      	cbnz	r0, 8014e9a <__submore+0x22>
 8014e92:	f04f 30ff 	mov.w	r0, #4294967295
 8014e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014ea0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8014ea6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014eaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014eae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014eb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014eb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014eba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014ebe:	6020      	str	r0, [r4, #0]
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	e7e8      	b.n	8014e96 <__submore+0x1e>
 8014ec4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014ec6:	0077      	lsls	r7, r6, #1
 8014ec8:	463a      	mov	r2, r7
 8014eca:	f000 fa2d 	bl	8015328 <_realloc_r>
 8014ece:	4605      	mov	r5, r0
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d0de      	beq.n	8014e92 <__submore+0x1a>
 8014ed4:	eb00 0806 	add.w	r8, r0, r6
 8014ed8:	4601      	mov	r1, r0
 8014eda:	4632      	mov	r2, r6
 8014edc:	4640      	mov	r0, r8
 8014ede:	f7fe fc99 	bl	8013814 <memcpy>
 8014ee2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014ee6:	f8c4 8000 	str.w	r8, [r4]
 8014eea:	e7e9      	b.n	8014ec0 <__submore+0x48>

08014eec <__ascii_wctomb>:
 8014eec:	b149      	cbz	r1, 8014f02 <__ascii_wctomb+0x16>
 8014eee:	2aff      	cmp	r2, #255	; 0xff
 8014ef0:	bf85      	ittet	hi
 8014ef2:	238a      	movhi	r3, #138	; 0x8a
 8014ef4:	6003      	strhi	r3, [r0, #0]
 8014ef6:	700a      	strbls	r2, [r1, #0]
 8014ef8:	f04f 30ff 	movhi.w	r0, #4294967295
 8014efc:	bf98      	it	ls
 8014efe:	2001      	movls	r0, #1
 8014f00:	4770      	bx	lr
 8014f02:	4608      	mov	r0, r1
 8014f04:	4770      	bx	lr
	...

08014f08 <__assert_func>:
 8014f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f0a:	4614      	mov	r4, r2
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <__assert_func+0x2c>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	4605      	mov	r5, r0
 8014f14:	68d8      	ldr	r0, [r3, #12]
 8014f16:	b14c      	cbz	r4, 8014f2c <__assert_func+0x24>
 8014f18:	4b07      	ldr	r3, [pc, #28]	; (8014f38 <__assert_func+0x30>)
 8014f1a:	9100      	str	r1, [sp, #0]
 8014f1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f20:	4906      	ldr	r1, [pc, #24]	; (8014f3c <__assert_func+0x34>)
 8014f22:	462b      	mov	r3, r5
 8014f24:	f000 f9a6 	bl	8015274 <fiprintf>
 8014f28:	f000 fc46 	bl	80157b8 <abort>
 8014f2c:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <__assert_func+0x38>)
 8014f2e:	461c      	mov	r4, r3
 8014f30:	e7f3      	b.n	8014f1a <__assert_func+0x12>
 8014f32:	bf00      	nop
 8014f34:	2000002c 	.word	0x2000002c
 8014f38:	08018280 	.word	0x08018280
 8014f3c:	0801828d 	.word	0x0801828d
 8014f40:	080182bb 	.word	0x080182bb

08014f44 <__sflush_r>:
 8014f44:	898a      	ldrh	r2, [r1, #12]
 8014f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	0710      	lsls	r0, r2, #28
 8014f4e:	460c      	mov	r4, r1
 8014f50:	d458      	bmi.n	8015004 <__sflush_r+0xc0>
 8014f52:	684b      	ldr	r3, [r1, #4]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	dc05      	bgt.n	8014f64 <__sflush_r+0x20>
 8014f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	dc02      	bgt.n	8014f64 <__sflush_r+0x20>
 8014f5e:	2000      	movs	r0, #0
 8014f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f66:	2e00      	cmp	r6, #0
 8014f68:	d0f9      	beq.n	8014f5e <__sflush_r+0x1a>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f70:	682f      	ldr	r7, [r5, #0]
 8014f72:	602b      	str	r3, [r5, #0]
 8014f74:	d032      	beq.n	8014fdc <__sflush_r+0x98>
 8014f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f78:	89a3      	ldrh	r3, [r4, #12]
 8014f7a:	075a      	lsls	r2, r3, #29
 8014f7c:	d505      	bpl.n	8014f8a <__sflush_r+0x46>
 8014f7e:	6863      	ldr	r3, [r4, #4]
 8014f80:	1ac0      	subs	r0, r0, r3
 8014f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f84:	b10b      	cbz	r3, 8014f8a <__sflush_r+0x46>
 8014f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f88:	1ac0      	subs	r0, r0, r3
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f90:	6a21      	ldr	r1, [r4, #32]
 8014f92:	4628      	mov	r0, r5
 8014f94:	47b0      	blx	r6
 8014f96:	1c43      	adds	r3, r0, #1
 8014f98:	89a3      	ldrh	r3, [r4, #12]
 8014f9a:	d106      	bne.n	8014faa <__sflush_r+0x66>
 8014f9c:	6829      	ldr	r1, [r5, #0]
 8014f9e:	291d      	cmp	r1, #29
 8014fa0:	d82c      	bhi.n	8014ffc <__sflush_r+0xb8>
 8014fa2:	4a2a      	ldr	r2, [pc, #168]	; (801504c <__sflush_r+0x108>)
 8014fa4:	40ca      	lsrs	r2, r1
 8014fa6:	07d6      	lsls	r6, r2, #31
 8014fa8:	d528      	bpl.n	8014ffc <__sflush_r+0xb8>
 8014faa:	2200      	movs	r2, #0
 8014fac:	6062      	str	r2, [r4, #4]
 8014fae:	04d9      	lsls	r1, r3, #19
 8014fb0:	6922      	ldr	r2, [r4, #16]
 8014fb2:	6022      	str	r2, [r4, #0]
 8014fb4:	d504      	bpl.n	8014fc0 <__sflush_r+0x7c>
 8014fb6:	1c42      	adds	r2, r0, #1
 8014fb8:	d101      	bne.n	8014fbe <__sflush_r+0x7a>
 8014fba:	682b      	ldr	r3, [r5, #0]
 8014fbc:	b903      	cbnz	r3, 8014fc0 <__sflush_r+0x7c>
 8014fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8014fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fc2:	602f      	str	r7, [r5, #0]
 8014fc4:	2900      	cmp	r1, #0
 8014fc6:	d0ca      	beq.n	8014f5e <__sflush_r+0x1a>
 8014fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fcc:	4299      	cmp	r1, r3
 8014fce:	d002      	beq.n	8014fd6 <__sflush_r+0x92>
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	f7ff f905 	bl	80141e0 <_free_r>
 8014fd6:	2000      	movs	r0, #0
 8014fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8014fda:	e7c1      	b.n	8014f60 <__sflush_r+0x1c>
 8014fdc:	6a21      	ldr	r1, [r4, #32]
 8014fde:	2301      	movs	r3, #1
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	47b0      	blx	r6
 8014fe4:	1c41      	adds	r1, r0, #1
 8014fe6:	d1c7      	bne.n	8014f78 <__sflush_r+0x34>
 8014fe8:	682b      	ldr	r3, [r5, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d0c4      	beq.n	8014f78 <__sflush_r+0x34>
 8014fee:	2b1d      	cmp	r3, #29
 8014ff0:	d001      	beq.n	8014ff6 <__sflush_r+0xb2>
 8014ff2:	2b16      	cmp	r3, #22
 8014ff4:	d101      	bne.n	8014ffa <__sflush_r+0xb6>
 8014ff6:	602f      	str	r7, [r5, #0]
 8014ff8:	e7b1      	b.n	8014f5e <__sflush_r+0x1a>
 8014ffa:	89a3      	ldrh	r3, [r4, #12]
 8014ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015000:	81a3      	strh	r3, [r4, #12]
 8015002:	e7ad      	b.n	8014f60 <__sflush_r+0x1c>
 8015004:	690f      	ldr	r7, [r1, #16]
 8015006:	2f00      	cmp	r7, #0
 8015008:	d0a9      	beq.n	8014f5e <__sflush_r+0x1a>
 801500a:	0793      	lsls	r3, r2, #30
 801500c:	680e      	ldr	r6, [r1, #0]
 801500e:	bf08      	it	eq
 8015010:	694b      	ldreq	r3, [r1, #20]
 8015012:	600f      	str	r7, [r1, #0]
 8015014:	bf18      	it	ne
 8015016:	2300      	movne	r3, #0
 8015018:	eba6 0807 	sub.w	r8, r6, r7
 801501c:	608b      	str	r3, [r1, #8]
 801501e:	f1b8 0f00 	cmp.w	r8, #0
 8015022:	dd9c      	ble.n	8014f5e <__sflush_r+0x1a>
 8015024:	6a21      	ldr	r1, [r4, #32]
 8015026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015028:	4643      	mov	r3, r8
 801502a:	463a      	mov	r2, r7
 801502c:	4628      	mov	r0, r5
 801502e:	47b0      	blx	r6
 8015030:	2800      	cmp	r0, #0
 8015032:	dc06      	bgt.n	8015042 <__sflush_r+0xfe>
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801503a:	81a3      	strh	r3, [r4, #12]
 801503c:	f04f 30ff 	mov.w	r0, #4294967295
 8015040:	e78e      	b.n	8014f60 <__sflush_r+0x1c>
 8015042:	4407      	add	r7, r0
 8015044:	eba8 0800 	sub.w	r8, r8, r0
 8015048:	e7e9      	b.n	801501e <__sflush_r+0xda>
 801504a:	bf00      	nop
 801504c:	20400001 	.word	0x20400001

08015050 <_fflush_r>:
 8015050:	b538      	push	{r3, r4, r5, lr}
 8015052:	690b      	ldr	r3, [r1, #16]
 8015054:	4605      	mov	r5, r0
 8015056:	460c      	mov	r4, r1
 8015058:	b913      	cbnz	r3, 8015060 <_fflush_r+0x10>
 801505a:	2500      	movs	r5, #0
 801505c:	4628      	mov	r0, r5
 801505e:	bd38      	pop	{r3, r4, r5, pc}
 8015060:	b118      	cbz	r0, 801506a <_fflush_r+0x1a>
 8015062:	6983      	ldr	r3, [r0, #24]
 8015064:	b90b      	cbnz	r3, 801506a <_fflush_r+0x1a>
 8015066:	f000 f887 	bl	8015178 <__sinit>
 801506a:	4b14      	ldr	r3, [pc, #80]	; (80150bc <_fflush_r+0x6c>)
 801506c:	429c      	cmp	r4, r3
 801506e:	d11b      	bne.n	80150a8 <_fflush_r+0x58>
 8015070:	686c      	ldr	r4, [r5, #4]
 8015072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d0ef      	beq.n	801505a <_fflush_r+0xa>
 801507a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801507c:	07d0      	lsls	r0, r2, #31
 801507e:	d404      	bmi.n	801508a <_fflush_r+0x3a>
 8015080:	0599      	lsls	r1, r3, #22
 8015082:	d402      	bmi.n	801508a <_fflush_r+0x3a>
 8015084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015086:	f000 f927 	bl	80152d8 <__retarget_lock_acquire_recursive>
 801508a:	4628      	mov	r0, r5
 801508c:	4621      	mov	r1, r4
 801508e:	f7ff ff59 	bl	8014f44 <__sflush_r>
 8015092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015094:	07da      	lsls	r2, r3, #31
 8015096:	4605      	mov	r5, r0
 8015098:	d4e0      	bmi.n	801505c <_fflush_r+0xc>
 801509a:	89a3      	ldrh	r3, [r4, #12]
 801509c:	059b      	lsls	r3, r3, #22
 801509e:	d4dd      	bmi.n	801505c <_fflush_r+0xc>
 80150a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150a2:	f000 f91a 	bl	80152da <__retarget_lock_release_recursive>
 80150a6:	e7d9      	b.n	801505c <_fflush_r+0xc>
 80150a8:	4b05      	ldr	r3, [pc, #20]	; (80150c0 <_fflush_r+0x70>)
 80150aa:	429c      	cmp	r4, r3
 80150ac:	d101      	bne.n	80150b2 <_fflush_r+0x62>
 80150ae:	68ac      	ldr	r4, [r5, #8]
 80150b0:	e7df      	b.n	8015072 <_fflush_r+0x22>
 80150b2:	4b04      	ldr	r3, [pc, #16]	; (80150c4 <_fflush_r+0x74>)
 80150b4:	429c      	cmp	r4, r3
 80150b6:	bf08      	it	eq
 80150b8:	68ec      	ldreq	r4, [r5, #12]
 80150ba:	e7da      	b.n	8015072 <_fflush_r+0x22>
 80150bc:	080182dc 	.word	0x080182dc
 80150c0:	080182fc 	.word	0x080182fc
 80150c4:	080182bc 	.word	0x080182bc

080150c8 <std>:
 80150c8:	2300      	movs	r3, #0
 80150ca:	b510      	push	{r4, lr}
 80150cc:	4604      	mov	r4, r0
 80150ce:	e9c0 3300 	strd	r3, r3, [r0]
 80150d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150d6:	6083      	str	r3, [r0, #8]
 80150d8:	8181      	strh	r1, [r0, #12]
 80150da:	6643      	str	r3, [r0, #100]	; 0x64
 80150dc:	81c2      	strh	r2, [r0, #14]
 80150de:	6183      	str	r3, [r0, #24]
 80150e0:	4619      	mov	r1, r3
 80150e2:	2208      	movs	r2, #8
 80150e4:	305c      	adds	r0, #92	; 0x5c
 80150e6:	f7fb fb71 	bl	80107cc <memset>
 80150ea:	4b05      	ldr	r3, [pc, #20]	; (8015100 <std+0x38>)
 80150ec:	6263      	str	r3, [r4, #36]	; 0x24
 80150ee:	4b05      	ldr	r3, [pc, #20]	; (8015104 <std+0x3c>)
 80150f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80150f2:	4b05      	ldr	r3, [pc, #20]	; (8015108 <std+0x40>)
 80150f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150f6:	4b05      	ldr	r3, [pc, #20]	; (801510c <std+0x44>)
 80150f8:	6224      	str	r4, [r4, #32]
 80150fa:	6323      	str	r3, [r4, #48]	; 0x30
 80150fc:	bd10      	pop	{r4, pc}
 80150fe:	bf00      	nop
 8015100:	08011575 	.word	0x08011575
 8015104:	0801159b 	.word	0x0801159b
 8015108:	080115d3 	.word	0x080115d3
 801510c:	080115f7 	.word	0x080115f7

08015110 <_cleanup_r>:
 8015110:	4901      	ldr	r1, [pc, #4]	; (8015118 <_cleanup_r+0x8>)
 8015112:	f000 b8c1 	b.w	8015298 <_fwalk_reent>
 8015116:	bf00      	nop
 8015118:	08015051 	.word	0x08015051

0801511c <__sfmoreglue>:
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	2268      	movs	r2, #104	; 0x68
 8015120:	1e4d      	subs	r5, r1, #1
 8015122:	4355      	muls	r5, r2
 8015124:	460e      	mov	r6, r1
 8015126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801512a:	f7ff f8c5 	bl	80142b8 <_malloc_r>
 801512e:	4604      	mov	r4, r0
 8015130:	b140      	cbz	r0, 8015144 <__sfmoreglue+0x28>
 8015132:	2100      	movs	r1, #0
 8015134:	e9c0 1600 	strd	r1, r6, [r0]
 8015138:	300c      	adds	r0, #12
 801513a:	60a0      	str	r0, [r4, #8]
 801513c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015140:	f7fb fb44 	bl	80107cc <memset>
 8015144:	4620      	mov	r0, r4
 8015146:	bd70      	pop	{r4, r5, r6, pc}

08015148 <__sfp_lock_acquire>:
 8015148:	4801      	ldr	r0, [pc, #4]	; (8015150 <__sfp_lock_acquire+0x8>)
 801514a:	f000 b8c5 	b.w	80152d8 <__retarget_lock_acquire_recursive>
 801514e:	bf00      	nop
 8015150:	20004959 	.word	0x20004959

08015154 <__sfp_lock_release>:
 8015154:	4801      	ldr	r0, [pc, #4]	; (801515c <__sfp_lock_release+0x8>)
 8015156:	f000 b8c0 	b.w	80152da <__retarget_lock_release_recursive>
 801515a:	bf00      	nop
 801515c:	20004959 	.word	0x20004959

08015160 <__sinit_lock_acquire>:
 8015160:	4801      	ldr	r0, [pc, #4]	; (8015168 <__sinit_lock_acquire+0x8>)
 8015162:	f000 b8b9 	b.w	80152d8 <__retarget_lock_acquire_recursive>
 8015166:	bf00      	nop
 8015168:	2000495a 	.word	0x2000495a

0801516c <__sinit_lock_release>:
 801516c:	4801      	ldr	r0, [pc, #4]	; (8015174 <__sinit_lock_release+0x8>)
 801516e:	f000 b8b4 	b.w	80152da <__retarget_lock_release_recursive>
 8015172:	bf00      	nop
 8015174:	2000495a 	.word	0x2000495a

08015178 <__sinit>:
 8015178:	b510      	push	{r4, lr}
 801517a:	4604      	mov	r4, r0
 801517c:	f7ff fff0 	bl	8015160 <__sinit_lock_acquire>
 8015180:	69a3      	ldr	r3, [r4, #24]
 8015182:	b11b      	cbz	r3, 801518c <__sinit+0x14>
 8015184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015188:	f7ff bff0 	b.w	801516c <__sinit_lock_release>
 801518c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015190:	6523      	str	r3, [r4, #80]	; 0x50
 8015192:	4b13      	ldr	r3, [pc, #76]	; (80151e0 <__sinit+0x68>)
 8015194:	4a13      	ldr	r2, [pc, #76]	; (80151e4 <__sinit+0x6c>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	62a2      	str	r2, [r4, #40]	; 0x28
 801519a:	42a3      	cmp	r3, r4
 801519c:	bf04      	itt	eq
 801519e:	2301      	moveq	r3, #1
 80151a0:	61a3      	streq	r3, [r4, #24]
 80151a2:	4620      	mov	r0, r4
 80151a4:	f000 f820 	bl	80151e8 <__sfp>
 80151a8:	6060      	str	r0, [r4, #4]
 80151aa:	4620      	mov	r0, r4
 80151ac:	f000 f81c 	bl	80151e8 <__sfp>
 80151b0:	60a0      	str	r0, [r4, #8]
 80151b2:	4620      	mov	r0, r4
 80151b4:	f000 f818 	bl	80151e8 <__sfp>
 80151b8:	2200      	movs	r2, #0
 80151ba:	60e0      	str	r0, [r4, #12]
 80151bc:	2104      	movs	r1, #4
 80151be:	6860      	ldr	r0, [r4, #4]
 80151c0:	f7ff ff82 	bl	80150c8 <std>
 80151c4:	68a0      	ldr	r0, [r4, #8]
 80151c6:	2201      	movs	r2, #1
 80151c8:	2109      	movs	r1, #9
 80151ca:	f7ff ff7d 	bl	80150c8 <std>
 80151ce:	68e0      	ldr	r0, [r4, #12]
 80151d0:	2202      	movs	r2, #2
 80151d2:	2112      	movs	r1, #18
 80151d4:	f7ff ff78 	bl	80150c8 <std>
 80151d8:	2301      	movs	r3, #1
 80151da:	61a3      	str	r3, [r4, #24]
 80151dc:	e7d2      	b.n	8015184 <__sinit+0xc>
 80151de:	bf00      	nop
 80151e0:	08017e60 	.word	0x08017e60
 80151e4:	08015111 	.word	0x08015111

080151e8 <__sfp>:
 80151e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ea:	4607      	mov	r7, r0
 80151ec:	f7ff ffac 	bl	8015148 <__sfp_lock_acquire>
 80151f0:	4b1e      	ldr	r3, [pc, #120]	; (801526c <__sfp+0x84>)
 80151f2:	681e      	ldr	r6, [r3, #0]
 80151f4:	69b3      	ldr	r3, [r6, #24]
 80151f6:	b913      	cbnz	r3, 80151fe <__sfp+0x16>
 80151f8:	4630      	mov	r0, r6
 80151fa:	f7ff ffbd 	bl	8015178 <__sinit>
 80151fe:	3648      	adds	r6, #72	; 0x48
 8015200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015204:	3b01      	subs	r3, #1
 8015206:	d503      	bpl.n	8015210 <__sfp+0x28>
 8015208:	6833      	ldr	r3, [r6, #0]
 801520a:	b30b      	cbz	r3, 8015250 <__sfp+0x68>
 801520c:	6836      	ldr	r6, [r6, #0]
 801520e:	e7f7      	b.n	8015200 <__sfp+0x18>
 8015210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015214:	b9d5      	cbnz	r5, 801524c <__sfp+0x64>
 8015216:	4b16      	ldr	r3, [pc, #88]	; (8015270 <__sfp+0x88>)
 8015218:	60e3      	str	r3, [r4, #12]
 801521a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801521e:	6665      	str	r5, [r4, #100]	; 0x64
 8015220:	f000 f859 	bl	80152d6 <__retarget_lock_init_recursive>
 8015224:	f7ff ff96 	bl	8015154 <__sfp_lock_release>
 8015228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801522c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015230:	6025      	str	r5, [r4, #0]
 8015232:	61a5      	str	r5, [r4, #24]
 8015234:	2208      	movs	r2, #8
 8015236:	4629      	mov	r1, r5
 8015238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801523c:	f7fb fac6 	bl	80107cc <memset>
 8015240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015248:	4620      	mov	r0, r4
 801524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801524c:	3468      	adds	r4, #104	; 0x68
 801524e:	e7d9      	b.n	8015204 <__sfp+0x1c>
 8015250:	2104      	movs	r1, #4
 8015252:	4638      	mov	r0, r7
 8015254:	f7ff ff62 	bl	801511c <__sfmoreglue>
 8015258:	4604      	mov	r4, r0
 801525a:	6030      	str	r0, [r6, #0]
 801525c:	2800      	cmp	r0, #0
 801525e:	d1d5      	bne.n	801520c <__sfp+0x24>
 8015260:	f7ff ff78 	bl	8015154 <__sfp_lock_release>
 8015264:	230c      	movs	r3, #12
 8015266:	603b      	str	r3, [r7, #0]
 8015268:	e7ee      	b.n	8015248 <__sfp+0x60>
 801526a:	bf00      	nop
 801526c:	08017e60 	.word	0x08017e60
 8015270:	ffff0001 	.word	0xffff0001

08015274 <fiprintf>:
 8015274:	b40e      	push	{r1, r2, r3}
 8015276:	b503      	push	{r0, r1, lr}
 8015278:	4601      	mov	r1, r0
 801527a:	ab03      	add	r3, sp, #12
 801527c:	4805      	ldr	r0, [pc, #20]	; (8015294 <fiprintf+0x20>)
 801527e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015282:	6800      	ldr	r0, [r0, #0]
 8015284:	9301      	str	r3, [sp, #4]
 8015286:	f000 f8a7 	bl	80153d8 <_vfiprintf_r>
 801528a:	b002      	add	sp, #8
 801528c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015290:	b003      	add	sp, #12
 8015292:	4770      	bx	lr
 8015294:	2000002c 	.word	0x2000002c

08015298 <_fwalk_reent>:
 8015298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801529c:	4606      	mov	r6, r0
 801529e:	4688      	mov	r8, r1
 80152a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80152a4:	2700      	movs	r7, #0
 80152a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152aa:	f1b9 0901 	subs.w	r9, r9, #1
 80152ae:	d505      	bpl.n	80152bc <_fwalk_reent+0x24>
 80152b0:	6824      	ldr	r4, [r4, #0]
 80152b2:	2c00      	cmp	r4, #0
 80152b4:	d1f7      	bne.n	80152a6 <_fwalk_reent+0xe>
 80152b6:	4638      	mov	r0, r7
 80152b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152bc:	89ab      	ldrh	r3, [r5, #12]
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d907      	bls.n	80152d2 <_fwalk_reent+0x3a>
 80152c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152c6:	3301      	adds	r3, #1
 80152c8:	d003      	beq.n	80152d2 <_fwalk_reent+0x3a>
 80152ca:	4629      	mov	r1, r5
 80152cc:	4630      	mov	r0, r6
 80152ce:	47c0      	blx	r8
 80152d0:	4307      	orrs	r7, r0
 80152d2:	3568      	adds	r5, #104	; 0x68
 80152d4:	e7e9      	b.n	80152aa <_fwalk_reent+0x12>

080152d6 <__retarget_lock_init_recursive>:
 80152d6:	4770      	bx	lr

080152d8 <__retarget_lock_acquire_recursive>:
 80152d8:	4770      	bx	lr

080152da <__retarget_lock_release_recursive>:
 80152da:	4770      	bx	lr

080152dc <memmove>:
 80152dc:	4288      	cmp	r0, r1
 80152de:	b510      	push	{r4, lr}
 80152e0:	eb01 0402 	add.w	r4, r1, r2
 80152e4:	d902      	bls.n	80152ec <memmove+0x10>
 80152e6:	4284      	cmp	r4, r0
 80152e8:	4623      	mov	r3, r4
 80152ea:	d807      	bhi.n	80152fc <memmove+0x20>
 80152ec:	1e43      	subs	r3, r0, #1
 80152ee:	42a1      	cmp	r1, r4
 80152f0:	d008      	beq.n	8015304 <memmove+0x28>
 80152f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80152fa:	e7f8      	b.n	80152ee <memmove+0x12>
 80152fc:	4402      	add	r2, r0
 80152fe:	4601      	mov	r1, r0
 8015300:	428a      	cmp	r2, r1
 8015302:	d100      	bne.n	8015306 <memmove+0x2a>
 8015304:	bd10      	pop	{r4, pc}
 8015306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801530a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801530e:	e7f7      	b.n	8015300 <memmove+0x24>

08015310 <__malloc_lock>:
 8015310:	4801      	ldr	r0, [pc, #4]	; (8015318 <__malloc_lock+0x8>)
 8015312:	f7ff bfe1 	b.w	80152d8 <__retarget_lock_acquire_recursive>
 8015316:	bf00      	nop
 8015318:	20004958 	.word	0x20004958

0801531c <__malloc_unlock>:
 801531c:	4801      	ldr	r0, [pc, #4]	; (8015324 <__malloc_unlock+0x8>)
 801531e:	f7ff bfdc 	b.w	80152da <__retarget_lock_release_recursive>
 8015322:	bf00      	nop
 8015324:	20004958 	.word	0x20004958

08015328 <_realloc_r>:
 8015328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801532c:	4680      	mov	r8, r0
 801532e:	4614      	mov	r4, r2
 8015330:	460e      	mov	r6, r1
 8015332:	b921      	cbnz	r1, 801533e <_realloc_r+0x16>
 8015334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015338:	4611      	mov	r1, r2
 801533a:	f7fe bfbd 	b.w	80142b8 <_malloc_r>
 801533e:	b92a      	cbnz	r2, 801534c <_realloc_r+0x24>
 8015340:	f7fe ff4e 	bl	80141e0 <_free_r>
 8015344:	4625      	mov	r5, r4
 8015346:	4628      	mov	r0, r5
 8015348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801534c:	f000 faa0 	bl	8015890 <_malloc_usable_size_r>
 8015350:	4284      	cmp	r4, r0
 8015352:	4607      	mov	r7, r0
 8015354:	d802      	bhi.n	801535c <_realloc_r+0x34>
 8015356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801535a:	d812      	bhi.n	8015382 <_realloc_r+0x5a>
 801535c:	4621      	mov	r1, r4
 801535e:	4640      	mov	r0, r8
 8015360:	f7fe ffaa 	bl	80142b8 <_malloc_r>
 8015364:	4605      	mov	r5, r0
 8015366:	2800      	cmp	r0, #0
 8015368:	d0ed      	beq.n	8015346 <_realloc_r+0x1e>
 801536a:	42bc      	cmp	r4, r7
 801536c:	4622      	mov	r2, r4
 801536e:	4631      	mov	r1, r6
 8015370:	bf28      	it	cs
 8015372:	463a      	movcs	r2, r7
 8015374:	f7fe fa4e 	bl	8013814 <memcpy>
 8015378:	4631      	mov	r1, r6
 801537a:	4640      	mov	r0, r8
 801537c:	f7fe ff30 	bl	80141e0 <_free_r>
 8015380:	e7e1      	b.n	8015346 <_realloc_r+0x1e>
 8015382:	4635      	mov	r5, r6
 8015384:	e7df      	b.n	8015346 <_realloc_r+0x1e>

08015386 <__sfputc_r>:
 8015386:	6893      	ldr	r3, [r2, #8]
 8015388:	3b01      	subs	r3, #1
 801538a:	2b00      	cmp	r3, #0
 801538c:	b410      	push	{r4}
 801538e:	6093      	str	r3, [r2, #8]
 8015390:	da08      	bge.n	80153a4 <__sfputc_r+0x1e>
 8015392:	6994      	ldr	r4, [r2, #24]
 8015394:	42a3      	cmp	r3, r4
 8015396:	db01      	blt.n	801539c <__sfputc_r+0x16>
 8015398:	290a      	cmp	r1, #10
 801539a:	d103      	bne.n	80153a4 <__sfputc_r+0x1e>
 801539c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153a0:	f000 b94a 	b.w	8015638 <__swbuf_r>
 80153a4:	6813      	ldr	r3, [r2, #0]
 80153a6:	1c58      	adds	r0, r3, #1
 80153a8:	6010      	str	r0, [r2, #0]
 80153aa:	7019      	strb	r1, [r3, #0]
 80153ac:	4608      	mov	r0, r1
 80153ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153b2:	4770      	bx	lr

080153b4 <__sfputs_r>:
 80153b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b6:	4606      	mov	r6, r0
 80153b8:	460f      	mov	r7, r1
 80153ba:	4614      	mov	r4, r2
 80153bc:	18d5      	adds	r5, r2, r3
 80153be:	42ac      	cmp	r4, r5
 80153c0:	d101      	bne.n	80153c6 <__sfputs_r+0x12>
 80153c2:	2000      	movs	r0, #0
 80153c4:	e007      	b.n	80153d6 <__sfputs_r+0x22>
 80153c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ca:	463a      	mov	r2, r7
 80153cc:	4630      	mov	r0, r6
 80153ce:	f7ff ffda 	bl	8015386 <__sfputc_r>
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	d1f3      	bne.n	80153be <__sfputs_r+0xa>
 80153d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080153d8 <_vfiprintf_r>:
 80153d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153dc:	460d      	mov	r5, r1
 80153de:	b09d      	sub	sp, #116	; 0x74
 80153e0:	4614      	mov	r4, r2
 80153e2:	4698      	mov	r8, r3
 80153e4:	4606      	mov	r6, r0
 80153e6:	b118      	cbz	r0, 80153f0 <_vfiprintf_r+0x18>
 80153e8:	6983      	ldr	r3, [r0, #24]
 80153ea:	b90b      	cbnz	r3, 80153f0 <_vfiprintf_r+0x18>
 80153ec:	f7ff fec4 	bl	8015178 <__sinit>
 80153f0:	4b89      	ldr	r3, [pc, #548]	; (8015618 <_vfiprintf_r+0x240>)
 80153f2:	429d      	cmp	r5, r3
 80153f4:	d11b      	bne.n	801542e <_vfiprintf_r+0x56>
 80153f6:	6875      	ldr	r5, [r6, #4]
 80153f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153fa:	07d9      	lsls	r1, r3, #31
 80153fc:	d405      	bmi.n	801540a <_vfiprintf_r+0x32>
 80153fe:	89ab      	ldrh	r3, [r5, #12]
 8015400:	059a      	lsls	r2, r3, #22
 8015402:	d402      	bmi.n	801540a <_vfiprintf_r+0x32>
 8015404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015406:	f7ff ff67 	bl	80152d8 <__retarget_lock_acquire_recursive>
 801540a:	89ab      	ldrh	r3, [r5, #12]
 801540c:	071b      	lsls	r3, r3, #28
 801540e:	d501      	bpl.n	8015414 <_vfiprintf_r+0x3c>
 8015410:	692b      	ldr	r3, [r5, #16]
 8015412:	b9eb      	cbnz	r3, 8015450 <_vfiprintf_r+0x78>
 8015414:	4629      	mov	r1, r5
 8015416:	4630      	mov	r0, r6
 8015418:	f000 f960 	bl	80156dc <__swsetup_r>
 801541c:	b1c0      	cbz	r0, 8015450 <_vfiprintf_r+0x78>
 801541e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015420:	07dc      	lsls	r4, r3, #31
 8015422:	d50e      	bpl.n	8015442 <_vfiprintf_r+0x6a>
 8015424:	f04f 30ff 	mov.w	r0, #4294967295
 8015428:	b01d      	add	sp, #116	; 0x74
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	4b7b      	ldr	r3, [pc, #492]	; (801561c <_vfiprintf_r+0x244>)
 8015430:	429d      	cmp	r5, r3
 8015432:	d101      	bne.n	8015438 <_vfiprintf_r+0x60>
 8015434:	68b5      	ldr	r5, [r6, #8]
 8015436:	e7df      	b.n	80153f8 <_vfiprintf_r+0x20>
 8015438:	4b79      	ldr	r3, [pc, #484]	; (8015620 <_vfiprintf_r+0x248>)
 801543a:	429d      	cmp	r5, r3
 801543c:	bf08      	it	eq
 801543e:	68f5      	ldreq	r5, [r6, #12]
 8015440:	e7da      	b.n	80153f8 <_vfiprintf_r+0x20>
 8015442:	89ab      	ldrh	r3, [r5, #12]
 8015444:	0598      	lsls	r0, r3, #22
 8015446:	d4ed      	bmi.n	8015424 <_vfiprintf_r+0x4c>
 8015448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801544a:	f7ff ff46 	bl	80152da <__retarget_lock_release_recursive>
 801544e:	e7e9      	b.n	8015424 <_vfiprintf_r+0x4c>
 8015450:	2300      	movs	r3, #0
 8015452:	9309      	str	r3, [sp, #36]	; 0x24
 8015454:	2320      	movs	r3, #32
 8015456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801545a:	f8cd 800c 	str.w	r8, [sp, #12]
 801545e:	2330      	movs	r3, #48	; 0x30
 8015460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015624 <_vfiprintf_r+0x24c>
 8015464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015468:	f04f 0901 	mov.w	r9, #1
 801546c:	4623      	mov	r3, r4
 801546e:	469a      	mov	sl, r3
 8015470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015474:	b10a      	cbz	r2, 801547a <_vfiprintf_r+0xa2>
 8015476:	2a25      	cmp	r2, #37	; 0x25
 8015478:	d1f9      	bne.n	801546e <_vfiprintf_r+0x96>
 801547a:	ebba 0b04 	subs.w	fp, sl, r4
 801547e:	d00b      	beq.n	8015498 <_vfiprintf_r+0xc0>
 8015480:	465b      	mov	r3, fp
 8015482:	4622      	mov	r2, r4
 8015484:	4629      	mov	r1, r5
 8015486:	4630      	mov	r0, r6
 8015488:	f7ff ff94 	bl	80153b4 <__sfputs_r>
 801548c:	3001      	adds	r0, #1
 801548e:	f000 80aa 	beq.w	80155e6 <_vfiprintf_r+0x20e>
 8015492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015494:	445a      	add	r2, fp
 8015496:	9209      	str	r2, [sp, #36]	; 0x24
 8015498:	f89a 3000 	ldrb.w	r3, [sl]
 801549c:	2b00      	cmp	r3, #0
 801549e:	f000 80a2 	beq.w	80155e6 <_vfiprintf_r+0x20e>
 80154a2:	2300      	movs	r3, #0
 80154a4:	f04f 32ff 	mov.w	r2, #4294967295
 80154a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154ac:	f10a 0a01 	add.w	sl, sl, #1
 80154b0:	9304      	str	r3, [sp, #16]
 80154b2:	9307      	str	r3, [sp, #28]
 80154b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154b8:	931a      	str	r3, [sp, #104]	; 0x68
 80154ba:	4654      	mov	r4, sl
 80154bc:	2205      	movs	r2, #5
 80154be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154c2:	4858      	ldr	r0, [pc, #352]	; (8015624 <_vfiprintf_r+0x24c>)
 80154c4:	f7ea feac 	bl	8000220 <memchr>
 80154c8:	9a04      	ldr	r2, [sp, #16]
 80154ca:	b9d8      	cbnz	r0, 8015504 <_vfiprintf_r+0x12c>
 80154cc:	06d1      	lsls	r1, r2, #27
 80154ce:	bf44      	itt	mi
 80154d0:	2320      	movmi	r3, #32
 80154d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154d6:	0713      	lsls	r3, r2, #28
 80154d8:	bf44      	itt	mi
 80154da:	232b      	movmi	r3, #43	; 0x2b
 80154dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154e0:	f89a 3000 	ldrb.w	r3, [sl]
 80154e4:	2b2a      	cmp	r3, #42	; 0x2a
 80154e6:	d015      	beq.n	8015514 <_vfiprintf_r+0x13c>
 80154e8:	9a07      	ldr	r2, [sp, #28]
 80154ea:	4654      	mov	r4, sl
 80154ec:	2000      	movs	r0, #0
 80154ee:	f04f 0c0a 	mov.w	ip, #10
 80154f2:	4621      	mov	r1, r4
 80154f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154f8:	3b30      	subs	r3, #48	; 0x30
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	d94e      	bls.n	801559c <_vfiprintf_r+0x1c4>
 80154fe:	b1b0      	cbz	r0, 801552e <_vfiprintf_r+0x156>
 8015500:	9207      	str	r2, [sp, #28]
 8015502:	e014      	b.n	801552e <_vfiprintf_r+0x156>
 8015504:	eba0 0308 	sub.w	r3, r0, r8
 8015508:	fa09 f303 	lsl.w	r3, r9, r3
 801550c:	4313      	orrs	r3, r2
 801550e:	9304      	str	r3, [sp, #16]
 8015510:	46a2      	mov	sl, r4
 8015512:	e7d2      	b.n	80154ba <_vfiprintf_r+0xe2>
 8015514:	9b03      	ldr	r3, [sp, #12]
 8015516:	1d19      	adds	r1, r3, #4
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	9103      	str	r1, [sp, #12]
 801551c:	2b00      	cmp	r3, #0
 801551e:	bfbb      	ittet	lt
 8015520:	425b      	neglt	r3, r3
 8015522:	f042 0202 	orrlt.w	r2, r2, #2
 8015526:	9307      	strge	r3, [sp, #28]
 8015528:	9307      	strlt	r3, [sp, #28]
 801552a:	bfb8      	it	lt
 801552c:	9204      	strlt	r2, [sp, #16]
 801552e:	7823      	ldrb	r3, [r4, #0]
 8015530:	2b2e      	cmp	r3, #46	; 0x2e
 8015532:	d10c      	bne.n	801554e <_vfiprintf_r+0x176>
 8015534:	7863      	ldrb	r3, [r4, #1]
 8015536:	2b2a      	cmp	r3, #42	; 0x2a
 8015538:	d135      	bne.n	80155a6 <_vfiprintf_r+0x1ce>
 801553a:	9b03      	ldr	r3, [sp, #12]
 801553c:	1d1a      	adds	r2, r3, #4
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	9203      	str	r2, [sp, #12]
 8015542:	2b00      	cmp	r3, #0
 8015544:	bfb8      	it	lt
 8015546:	f04f 33ff 	movlt.w	r3, #4294967295
 801554a:	3402      	adds	r4, #2
 801554c:	9305      	str	r3, [sp, #20]
 801554e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015634 <_vfiprintf_r+0x25c>
 8015552:	7821      	ldrb	r1, [r4, #0]
 8015554:	2203      	movs	r2, #3
 8015556:	4650      	mov	r0, sl
 8015558:	f7ea fe62 	bl	8000220 <memchr>
 801555c:	b140      	cbz	r0, 8015570 <_vfiprintf_r+0x198>
 801555e:	2340      	movs	r3, #64	; 0x40
 8015560:	eba0 000a 	sub.w	r0, r0, sl
 8015564:	fa03 f000 	lsl.w	r0, r3, r0
 8015568:	9b04      	ldr	r3, [sp, #16]
 801556a:	4303      	orrs	r3, r0
 801556c:	3401      	adds	r4, #1
 801556e:	9304      	str	r3, [sp, #16]
 8015570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015574:	482c      	ldr	r0, [pc, #176]	; (8015628 <_vfiprintf_r+0x250>)
 8015576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801557a:	2206      	movs	r2, #6
 801557c:	f7ea fe50 	bl	8000220 <memchr>
 8015580:	2800      	cmp	r0, #0
 8015582:	d03f      	beq.n	8015604 <_vfiprintf_r+0x22c>
 8015584:	4b29      	ldr	r3, [pc, #164]	; (801562c <_vfiprintf_r+0x254>)
 8015586:	bb1b      	cbnz	r3, 80155d0 <_vfiprintf_r+0x1f8>
 8015588:	9b03      	ldr	r3, [sp, #12]
 801558a:	3307      	adds	r3, #7
 801558c:	f023 0307 	bic.w	r3, r3, #7
 8015590:	3308      	adds	r3, #8
 8015592:	9303      	str	r3, [sp, #12]
 8015594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015596:	443b      	add	r3, r7
 8015598:	9309      	str	r3, [sp, #36]	; 0x24
 801559a:	e767      	b.n	801546c <_vfiprintf_r+0x94>
 801559c:	fb0c 3202 	mla	r2, ip, r2, r3
 80155a0:	460c      	mov	r4, r1
 80155a2:	2001      	movs	r0, #1
 80155a4:	e7a5      	b.n	80154f2 <_vfiprintf_r+0x11a>
 80155a6:	2300      	movs	r3, #0
 80155a8:	3401      	adds	r4, #1
 80155aa:	9305      	str	r3, [sp, #20]
 80155ac:	4619      	mov	r1, r3
 80155ae:	f04f 0c0a 	mov.w	ip, #10
 80155b2:	4620      	mov	r0, r4
 80155b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155b8:	3a30      	subs	r2, #48	; 0x30
 80155ba:	2a09      	cmp	r2, #9
 80155bc:	d903      	bls.n	80155c6 <_vfiprintf_r+0x1ee>
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d0c5      	beq.n	801554e <_vfiprintf_r+0x176>
 80155c2:	9105      	str	r1, [sp, #20]
 80155c4:	e7c3      	b.n	801554e <_vfiprintf_r+0x176>
 80155c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80155ca:	4604      	mov	r4, r0
 80155cc:	2301      	movs	r3, #1
 80155ce:	e7f0      	b.n	80155b2 <_vfiprintf_r+0x1da>
 80155d0:	ab03      	add	r3, sp, #12
 80155d2:	9300      	str	r3, [sp, #0]
 80155d4:	462a      	mov	r2, r5
 80155d6:	4b16      	ldr	r3, [pc, #88]	; (8015630 <_vfiprintf_r+0x258>)
 80155d8:	a904      	add	r1, sp, #16
 80155da:	4630      	mov	r0, r6
 80155dc:	f7fb f99e 	bl	801091c <_printf_float>
 80155e0:	4607      	mov	r7, r0
 80155e2:	1c78      	adds	r0, r7, #1
 80155e4:	d1d6      	bne.n	8015594 <_vfiprintf_r+0x1bc>
 80155e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155e8:	07d9      	lsls	r1, r3, #31
 80155ea:	d405      	bmi.n	80155f8 <_vfiprintf_r+0x220>
 80155ec:	89ab      	ldrh	r3, [r5, #12]
 80155ee:	059a      	lsls	r2, r3, #22
 80155f0:	d402      	bmi.n	80155f8 <_vfiprintf_r+0x220>
 80155f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155f4:	f7ff fe71 	bl	80152da <__retarget_lock_release_recursive>
 80155f8:	89ab      	ldrh	r3, [r5, #12]
 80155fa:	065b      	lsls	r3, r3, #25
 80155fc:	f53f af12 	bmi.w	8015424 <_vfiprintf_r+0x4c>
 8015600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015602:	e711      	b.n	8015428 <_vfiprintf_r+0x50>
 8015604:	ab03      	add	r3, sp, #12
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	462a      	mov	r2, r5
 801560a:	4b09      	ldr	r3, [pc, #36]	; (8015630 <_vfiprintf_r+0x258>)
 801560c:	a904      	add	r1, sp, #16
 801560e:	4630      	mov	r0, r6
 8015610:	f7fb fc28 	bl	8010e64 <_printf_i>
 8015614:	e7e4      	b.n	80155e0 <_vfiprintf_r+0x208>
 8015616:	bf00      	nop
 8015618:	080182dc 	.word	0x080182dc
 801561c:	080182fc 	.word	0x080182fc
 8015620:	080182bc 	.word	0x080182bc
 8015624:	08018254 	.word	0x08018254
 8015628:	0801825e 	.word	0x0801825e
 801562c:	0801091d 	.word	0x0801091d
 8015630:	080153b5 	.word	0x080153b5
 8015634:	0801825a 	.word	0x0801825a

08015638 <__swbuf_r>:
 8015638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563a:	460e      	mov	r6, r1
 801563c:	4614      	mov	r4, r2
 801563e:	4605      	mov	r5, r0
 8015640:	b118      	cbz	r0, 801564a <__swbuf_r+0x12>
 8015642:	6983      	ldr	r3, [r0, #24]
 8015644:	b90b      	cbnz	r3, 801564a <__swbuf_r+0x12>
 8015646:	f7ff fd97 	bl	8015178 <__sinit>
 801564a:	4b21      	ldr	r3, [pc, #132]	; (80156d0 <__swbuf_r+0x98>)
 801564c:	429c      	cmp	r4, r3
 801564e:	d12b      	bne.n	80156a8 <__swbuf_r+0x70>
 8015650:	686c      	ldr	r4, [r5, #4]
 8015652:	69a3      	ldr	r3, [r4, #24]
 8015654:	60a3      	str	r3, [r4, #8]
 8015656:	89a3      	ldrh	r3, [r4, #12]
 8015658:	071a      	lsls	r2, r3, #28
 801565a:	d52f      	bpl.n	80156bc <__swbuf_r+0x84>
 801565c:	6923      	ldr	r3, [r4, #16]
 801565e:	b36b      	cbz	r3, 80156bc <__swbuf_r+0x84>
 8015660:	6923      	ldr	r3, [r4, #16]
 8015662:	6820      	ldr	r0, [r4, #0]
 8015664:	1ac0      	subs	r0, r0, r3
 8015666:	6963      	ldr	r3, [r4, #20]
 8015668:	b2f6      	uxtb	r6, r6
 801566a:	4283      	cmp	r3, r0
 801566c:	4637      	mov	r7, r6
 801566e:	dc04      	bgt.n	801567a <__swbuf_r+0x42>
 8015670:	4621      	mov	r1, r4
 8015672:	4628      	mov	r0, r5
 8015674:	f7ff fcec 	bl	8015050 <_fflush_r>
 8015678:	bb30      	cbnz	r0, 80156c8 <__swbuf_r+0x90>
 801567a:	68a3      	ldr	r3, [r4, #8]
 801567c:	3b01      	subs	r3, #1
 801567e:	60a3      	str	r3, [r4, #8]
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	1c5a      	adds	r2, r3, #1
 8015684:	6022      	str	r2, [r4, #0]
 8015686:	701e      	strb	r6, [r3, #0]
 8015688:	6963      	ldr	r3, [r4, #20]
 801568a:	3001      	adds	r0, #1
 801568c:	4283      	cmp	r3, r0
 801568e:	d004      	beq.n	801569a <__swbuf_r+0x62>
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	07db      	lsls	r3, r3, #31
 8015694:	d506      	bpl.n	80156a4 <__swbuf_r+0x6c>
 8015696:	2e0a      	cmp	r6, #10
 8015698:	d104      	bne.n	80156a4 <__swbuf_r+0x6c>
 801569a:	4621      	mov	r1, r4
 801569c:	4628      	mov	r0, r5
 801569e:	f7ff fcd7 	bl	8015050 <_fflush_r>
 80156a2:	b988      	cbnz	r0, 80156c8 <__swbuf_r+0x90>
 80156a4:	4638      	mov	r0, r7
 80156a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156a8:	4b0a      	ldr	r3, [pc, #40]	; (80156d4 <__swbuf_r+0x9c>)
 80156aa:	429c      	cmp	r4, r3
 80156ac:	d101      	bne.n	80156b2 <__swbuf_r+0x7a>
 80156ae:	68ac      	ldr	r4, [r5, #8]
 80156b0:	e7cf      	b.n	8015652 <__swbuf_r+0x1a>
 80156b2:	4b09      	ldr	r3, [pc, #36]	; (80156d8 <__swbuf_r+0xa0>)
 80156b4:	429c      	cmp	r4, r3
 80156b6:	bf08      	it	eq
 80156b8:	68ec      	ldreq	r4, [r5, #12]
 80156ba:	e7ca      	b.n	8015652 <__swbuf_r+0x1a>
 80156bc:	4621      	mov	r1, r4
 80156be:	4628      	mov	r0, r5
 80156c0:	f000 f80c 	bl	80156dc <__swsetup_r>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	d0cb      	beq.n	8015660 <__swbuf_r+0x28>
 80156c8:	f04f 37ff 	mov.w	r7, #4294967295
 80156cc:	e7ea      	b.n	80156a4 <__swbuf_r+0x6c>
 80156ce:	bf00      	nop
 80156d0:	080182dc 	.word	0x080182dc
 80156d4:	080182fc 	.word	0x080182fc
 80156d8:	080182bc 	.word	0x080182bc

080156dc <__swsetup_r>:
 80156dc:	4b32      	ldr	r3, [pc, #200]	; (80157a8 <__swsetup_r+0xcc>)
 80156de:	b570      	push	{r4, r5, r6, lr}
 80156e0:	681d      	ldr	r5, [r3, #0]
 80156e2:	4606      	mov	r6, r0
 80156e4:	460c      	mov	r4, r1
 80156e6:	b125      	cbz	r5, 80156f2 <__swsetup_r+0x16>
 80156e8:	69ab      	ldr	r3, [r5, #24]
 80156ea:	b913      	cbnz	r3, 80156f2 <__swsetup_r+0x16>
 80156ec:	4628      	mov	r0, r5
 80156ee:	f7ff fd43 	bl	8015178 <__sinit>
 80156f2:	4b2e      	ldr	r3, [pc, #184]	; (80157ac <__swsetup_r+0xd0>)
 80156f4:	429c      	cmp	r4, r3
 80156f6:	d10f      	bne.n	8015718 <__swsetup_r+0x3c>
 80156f8:	686c      	ldr	r4, [r5, #4]
 80156fa:	89a3      	ldrh	r3, [r4, #12]
 80156fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015700:	0719      	lsls	r1, r3, #28
 8015702:	d42c      	bmi.n	801575e <__swsetup_r+0x82>
 8015704:	06dd      	lsls	r5, r3, #27
 8015706:	d411      	bmi.n	801572c <__swsetup_r+0x50>
 8015708:	2309      	movs	r3, #9
 801570a:	6033      	str	r3, [r6, #0]
 801570c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015710:	81a3      	strh	r3, [r4, #12]
 8015712:	f04f 30ff 	mov.w	r0, #4294967295
 8015716:	e03e      	b.n	8015796 <__swsetup_r+0xba>
 8015718:	4b25      	ldr	r3, [pc, #148]	; (80157b0 <__swsetup_r+0xd4>)
 801571a:	429c      	cmp	r4, r3
 801571c:	d101      	bne.n	8015722 <__swsetup_r+0x46>
 801571e:	68ac      	ldr	r4, [r5, #8]
 8015720:	e7eb      	b.n	80156fa <__swsetup_r+0x1e>
 8015722:	4b24      	ldr	r3, [pc, #144]	; (80157b4 <__swsetup_r+0xd8>)
 8015724:	429c      	cmp	r4, r3
 8015726:	bf08      	it	eq
 8015728:	68ec      	ldreq	r4, [r5, #12]
 801572a:	e7e6      	b.n	80156fa <__swsetup_r+0x1e>
 801572c:	0758      	lsls	r0, r3, #29
 801572e:	d512      	bpl.n	8015756 <__swsetup_r+0x7a>
 8015730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015732:	b141      	cbz	r1, 8015746 <__swsetup_r+0x6a>
 8015734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015738:	4299      	cmp	r1, r3
 801573a:	d002      	beq.n	8015742 <__swsetup_r+0x66>
 801573c:	4630      	mov	r0, r6
 801573e:	f7fe fd4f 	bl	80141e0 <_free_r>
 8015742:	2300      	movs	r3, #0
 8015744:	6363      	str	r3, [r4, #52]	; 0x34
 8015746:	89a3      	ldrh	r3, [r4, #12]
 8015748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801574c:	81a3      	strh	r3, [r4, #12]
 801574e:	2300      	movs	r3, #0
 8015750:	6063      	str	r3, [r4, #4]
 8015752:	6923      	ldr	r3, [r4, #16]
 8015754:	6023      	str	r3, [r4, #0]
 8015756:	89a3      	ldrh	r3, [r4, #12]
 8015758:	f043 0308 	orr.w	r3, r3, #8
 801575c:	81a3      	strh	r3, [r4, #12]
 801575e:	6923      	ldr	r3, [r4, #16]
 8015760:	b94b      	cbnz	r3, 8015776 <__swsetup_r+0x9a>
 8015762:	89a3      	ldrh	r3, [r4, #12]
 8015764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801576c:	d003      	beq.n	8015776 <__swsetup_r+0x9a>
 801576e:	4621      	mov	r1, r4
 8015770:	4630      	mov	r0, r6
 8015772:	f000 f84d 	bl	8015810 <__smakebuf_r>
 8015776:	89a0      	ldrh	r0, [r4, #12]
 8015778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801577c:	f010 0301 	ands.w	r3, r0, #1
 8015780:	d00a      	beq.n	8015798 <__swsetup_r+0xbc>
 8015782:	2300      	movs	r3, #0
 8015784:	60a3      	str	r3, [r4, #8]
 8015786:	6963      	ldr	r3, [r4, #20]
 8015788:	425b      	negs	r3, r3
 801578a:	61a3      	str	r3, [r4, #24]
 801578c:	6923      	ldr	r3, [r4, #16]
 801578e:	b943      	cbnz	r3, 80157a2 <__swsetup_r+0xc6>
 8015790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015794:	d1ba      	bne.n	801570c <__swsetup_r+0x30>
 8015796:	bd70      	pop	{r4, r5, r6, pc}
 8015798:	0781      	lsls	r1, r0, #30
 801579a:	bf58      	it	pl
 801579c:	6963      	ldrpl	r3, [r4, #20]
 801579e:	60a3      	str	r3, [r4, #8]
 80157a0:	e7f4      	b.n	801578c <__swsetup_r+0xb0>
 80157a2:	2000      	movs	r0, #0
 80157a4:	e7f7      	b.n	8015796 <__swsetup_r+0xba>
 80157a6:	bf00      	nop
 80157a8:	2000002c 	.word	0x2000002c
 80157ac:	080182dc 	.word	0x080182dc
 80157b0:	080182fc 	.word	0x080182fc
 80157b4:	080182bc 	.word	0x080182bc

080157b8 <abort>:
 80157b8:	b508      	push	{r3, lr}
 80157ba:	2006      	movs	r0, #6
 80157bc:	f000 f898 	bl	80158f0 <raise>
 80157c0:	2001      	movs	r0, #1
 80157c2:	f7f0 ff65 	bl	8006690 <_exit>

080157c6 <__swhatbuf_r>:
 80157c6:	b570      	push	{r4, r5, r6, lr}
 80157c8:	460e      	mov	r6, r1
 80157ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ce:	2900      	cmp	r1, #0
 80157d0:	b096      	sub	sp, #88	; 0x58
 80157d2:	4614      	mov	r4, r2
 80157d4:	461d      	mov	r5, r3
 80157d6:	da08      	bge.n	80157ea <__swhatbuf_r+0x24>
 80157d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80157dc:	2200      	movs	r2, #0
 80157de:	602a      	str	r2, [r5, #0]
 80157e0:	061a      	lsls	r2, r3, #24
 80157e2:	d410      	bmi.n	8015806 <__swhatbuf_r+0x40>
 80157e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157e8:	e00e      	b.n	8015808 <__swhatbuf_r+0x42>
 80157ea:	466a      	mov	r2, sp
 80157ec:	f000 f89c 	bl	8015928 <_fstat_r>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	dbf1      	blt.n	80157d8 <__swhatbuf_r+0x12>
 80157f4:	9a01      	ldr	r2, [sp, #4]
 80157f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80157fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80157fe:	425a      	negs	r2, r3
 8015800:	415a      	adcs	r2, r3
 8015802:	602a      	str	r2, [r5, #0]
 8015804:	e7ee      	b.n	80157e4 <__swhatbuf_r+0x1e>
 8015806:	2340      	movs	r3, #64	; 0x40
 8015808:	2000      	movs	r0, #0
 801580a:	6023      	str	r3, [r4, #0]
 801580c:	b016      	add	sp, #88	; 0x58
 801580e:	bd70      	pop	{r4, r5, r6, pc}

08015810 <__smakebuf_r>:
 8015810:	898b      	ldrh	r3, [r1, #12]
 8015812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015814:	079d      	lsls	r5, r3, #30
 8015816:	4606      	mov	r6, r0
 8015818:	460c      	mov	r4, r1
 801581a:	d507      	bpl.n	801582c <__smakebuf_r+0x1c>
 801581c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015820:	6023      	str	r3, [r4, #0]
 8015822:	6123      	str	r3, [r4, #16]
 8015824:	2301      	movs	r3, #1
 8015826:	6163      	str	r3, [r4, #20]
 8015828:	b002      	add	sp, #8
 801582a:	bd70      	pop	{r4, r5, r6, pc}
 801582c:	ab01      	add	r3, sp, #4
 801582e:	466a      	mov	r2, sp
 8015830:	f7ff ffc9 	bl	80157c6 <__swhatbuf_r>
 8015834:	9900      	ldr	r1, [sp, #0]
 8015836:	4605      	mov	r5, r0
 8015838:	4630      	mov	r0, r6
 801583a:	f7fe fd3d 	bl	80142b8 <_malloc_r>
 801583e:	b948      	cbnz	r0, 8015854 <__smakebuf_r+0x44>
 8015840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015844:	059a      	lsls	r2, r3, #22
 8015846:	d4ef      	bmi.n	8015828 <__smakebuf_r+0x18>
 8015848:	f023 0303 	bic.w	r3, r3, #3
 801584c:	f043 0302 	orr.w	r3, r3, #2
 8015850:	81a3      	strh	r3, [r4, #12]
 8015852:	e7e3      	b.n	801581c <__smakebuf_r+0xc>
 8015854:	4b0d      	ldr	r3, [pc, #52]	; (801588c <__smakebuf_r+0x7c>)
 8015856:	62b3      	str	r3, [r6, #40]	; 0x28
 8015858:	89a3      	ldrh	r3, [r4, #12]
 801585a:	6020      	str	r0, [r4, #0]
 801585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015860:	81a3      	strh	r3, [r4, #12]
 8015862:	9b00      	ldr	r3, [sp, #0]
 8015864:	6163      	str	r3, [r4, #20]
 8015866:	9b01      	ldr	r3, [sp, #4]
 8015868:	6120      	str	r0, [r4, #16]
 801586a:	b15b      	cbz	r3, 8015884 <__smakebuf_r+0x74>
 801586c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015870:	4630      	mov	r0, r6
 8015872:	f000 f86b 	bl	801594c <_isatty_r>
 8015876:	b128      	cbz	r0, 8015884 <__smakebuf_r+0x74>
 8015878:	89a3      	ldrh	r3, [r4, #12]
 801587a:	f023 0303 	bic.w	r3, r3, #3
 801587e:	f043 0301 	orr.w	r3, r3, #1
 8015882:	81a3      	strh	r3, [r4, #12]
 8015884:	89a0      	ldrh	r0, [r4, #12]
 8015886:	4305      	orrs	r5, r0
 8015888:	81a5      	strh	r5, [r4, #12]
 801588a:	e7cd      	b.n	8015828 <__smakebuf_r+0x18>
 801588c:	08015111 	.word	0x08015111

08015890 <_malloc_usable_size_r>:
 8015890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015894:	1f18      	subs	r0, r3, #4
 8015896:	2b00      	cmp	r3, #0
 8015898:	bfbc      	itt	lt
 801589a:	580b      	ldrlt	r3, [r1, r0]
 801589c:	18c0      	addlt	r0, r0, r3
 801589e:	4770      	bx	lr

080158a0 <_raise_r>:
 80158a0:	291f      	cmp	r1, #31
 80158a2:	b538      	push	{r3, r4, r5, lr}
 80158a4:	4604      	mov	r4, r0
 80158a6:	460d      	mov	r5, r1
 80158a8:	d904      	bls.n	80158b4 <_raise_r+0x14>
 80158aa:	2316      	movs	r3, #22
 80158ac:	6003      	str	r3, [r0, #0]
 80158ae:	f04f 30ff 	mov.w	r0, #4294967295
 80158b2:	bd38      	pop	{r3, r4, r5, pc}
 80158b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80158b6:	b112      	cbz	r2, 80158be <_raise_r+0x1e>
 80158b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80158bc:	b94b      	cbnz	r3, 80158d2 <_raise_r+0x32>
 80158be:	4620      	mov	r0, r4
 80158c0:	f000 f830 	bl	8015924 <_getpid_r>
 80158c4:	462a      	mov	r2, r5
 80158c6:	4601      	mov	r1, r0
 80158c8:	4620      	mov	r0, r4
 80158ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158ce:	f000 b817 	b.w	8015900 <_kill_r>
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d00a      	beq.n	80158ec <_raise_r+0x4c>
 80158d6:	1c59      	adds	r1, r3, #1
 80158d8:	d103      	bne.n	80158e2 <_raise_r+0x42>
 80158da:	2316      	movs	r3, #22
 80158dc:	6003      	str	r3, [r0, #0]
 80158de:	2001      	movs	r0, #1
 80158e0:	e7e7      	b.n	80158b2 <_raise_r+0x12>
 80158e2:	2400      	movs	r4, #0
 80158e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80158e8:	4628      	mov	r0, r5
 80158ea:	4798      	blx	r3
 80158ec:	2000      	movs	r0, #0
 80158ee:	e7e0      	b.n	80158b2 <_raise_r+0x12>

080158f0 <raise>:
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <raise+0xc>)
 80158f2:	4601      	mov	r1, r0
 80158f4:	6818      	ldr	r0, [r3, #0]
 80158f6:	f7ff bfd3 	b.w	80158a0 <_raise_r>
 80158fa:	bf00      	nop
 80158fc:	2000002c 	.word	0x2000002c

08015900 <_kill_r>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	4d07      	ldr	r5, [pc, #28]	; (8015920 <_kill_r+0x20>)
 8015904:	2300      	movs	r3, #0
 8015906:	4604      	mov	r4, r0
 8015908:	4608      	mov	r0, r1
 801590a:	4611      	mov	r1, r2
 801590c:	602b      	str	r3, [r5, #0]
 801590e:	f7f0 feaf 	bl	8006670 <_kill>
 8015912:	1c43      	adds	r3, r0, #1
 8015914:	d102      	bne.n	801591c <_kill_r+0x1c>
 8015916:	682b      	ldr	r3, [r5, #0]
 8015918:	b103      	cbz	r3, 801591c <_kill_r+0x1c>
 801591a:	6023      	str	r3, [r4, #0]
 801591c:	bd38      	pop	{r3, r4, r5, pc}
 801591e:	bf00      	nop
 8015920:	20004954 	.word	0x20004954

08015924 <_getpid_r>:
 8015924:	f7f0 be9c 	b.w	8006660 <_getpid>

08015928 <_fstat_r>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	4d07      	ldr	r5, [pc, #28]	; (8015948 <_fstat_r+0x20>)
 801592c:	2300      	movs	r3, #0
 801592e:	4604      	mov	r4, r0
 8015930:	4608      	mov	r0, r1
 8015932:	4611      	mov	r1, r2
 8015934:	602b      	str	r3, [r5, #0]
 8015936:	f7f0 fefa 	bl	800672e <_fstat>
 801593a:	1c43      	adds	r3, r0, #1
 801593c:	d102      	bne.n	8015944 <_fstat_r+0x1c>
 801593e:	682b      	ldr	r3, [r5, #0]
 8015940:	b103      	cbz	r3, 8015944 <_fstat_r+0x1c>
 8015942:	6023      	str	r3, [r4, #0]
 8015944:	bd38      	pop	{r3, r4, r5, pc}
 8015946:	bf00      	nop
 8015948:	20004954 	.word	0x20004954

0801594c <_isatty_r>:
 801594c:	b538      	push	{r3, r4, r5, lr}
 801594e:	4d06      	ldr	r5, [pc, #24]	; (8015968 <_isatty_r+0x1c>)
 8015950:	2300      	movs	r3, #0
 8015952:	4604      	mov	r4, r0
 8015954:	4608      	mov	r0, r1
 8015956:	602b      	str	r3, [r5, #0]
 8015958:	f7f0 fef9 	bl	800674e <_isatty>
 801595c:	1c43      	adds	r3, r0, #1
 801595e:	d102      	bne.n	8015966 <_isatty_r+0x1a>
 8015960:	682b      	ldr	r3, [r5, #0]
 8015962:	b103      	cbz	r3, 8015966 <_isatty_r+0x1a>
 8015964:	6023      	str	r3, [r4, #0]
 8015966:	bd38      	pop	{r3, r4, r5, pc}
 8015968:	20004954 	.word	0x20004954

0801596c <acos>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	ed2d 8b02 	vpush	{d8}
 8015972:	ec55 4b10 	vmov	r4, r5, d0
 8015976:	f000 f91f 	bl	8015bb8 <__ieee754_acos>
 801597a:	4622      	mov	r2, r4
 801597c:	462b      	mov	r3, r5
 801597e:	4620      	mov	r0, r4
 8015980:	4629      	mov	r1, r5
 8015982:	eeb0 8a40 	vmov.f32	s16, s0
 8015986:	eef0 8a60 	vmov.f32	s17, s1
 801598a:	f7eb f8ef 	bl	8000b6c <__aeabi_dcmpun>
 801598e:	b9a8      	cbnz	r0, 80159bc <acos+0x50>
 8015990:	ec45 4b10 	vmov	d0, r4, r5
 8015994:	f001 fe04 	bl	80175a0 <fabs>
 8015998:	4b0c      	ldr	r3, [pc, #48]	; (80159cc <acos+0x60>)
 801599a:	ec51 0b10 	vmov	r0, r1, d0
 801599e:	2200      	movs	r2, #0
 80159a0:	f7eb f8da 	bl	8000b58 <__aeabi_dcmpgt>
 80159a4:	b150      	cbz	r0, 80159bc <acos+0x50>
 80159a6:	f7fa fee7 	bl	8010778 <__errno>
 80159aa:	ecbd 8b02 	vpop	{d8}
 80159ae:	2321      	movs	r3, #33	; 0x21
 80159b0:	6003      	str	r3, [r0, #0]
 80159b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159b6:	4806      	ldr	r0, [pc, #24]	; (80159d0 <acos+0x64>)
 80159b8:	f7ff b986 	b.w	8014cc8 <nan>
 80159bc:	eeb0 0a48 	vmov.f32	s0, s16
 80159c0:	eef0 0a68 	vmov.f32	s1, s17
 80159c4:	ecbd 8b02 	vpop	{d8}
 80159c8:	bd38      	pop	{r3, r4, r5, pc}
 80159ca:	bf00      	nop
 80159cc:	3ff00000 	.word	0x3ff00000
 80159d0:	080182bb 	.word	0x080182bb

080159d4 <asin>:
 80159d4:	b538      	push	{r3, r4, r5, lr}
 80159d6:	ed2d 8b02 	vpush	{d8}
 80159da:	ec55 4b10 	vmov	r4, r5, d0
 80159de:	f000 fb4b 	bl	8016078 <__ieee754_asin>
 80159e2:	4622      	mov	r2, r4
 80159e4:	462b      	mov	r3, r5
 80159e6:	4620      	mov	r0, r4
 80159e8:	4629      	mov	r1, r5
 80159ea:	eeb0 8a40 	vmov.f32	s16, s0
 80159ee:	eef0 8a60 	vmov.f32	s17, s1
 80159f2:	f7eb f8bb 	bl	8000b6c <__aeabi_dcmpun>
 80159f6:	b9a8      	cbnz	r0, 8015a24 <asin+0x50>
 80159f8:	ec45 4b10 	vmov	d0, r4, r5
 80159fc:	f001 fdd0 	bl	80175a0 <fabs>
 8015a00:	4b0c      	ldr	r3, [pc, #48]	; (8015a34 <asin+0x60>)
 8015a02:	ec51 0b10 	vmov	r0, r1, d0
 8015a06:	2200      	movs	r2, #0
 8015a08:	f7eb f8a6 	bl	8000b58 <__aeabi_dcmpgt>
 8015a0c:	b150      	cbz	r0, 8015a24 <asin+0x50>
 8015a0e:	f7fa feb3 	bl	8010778 <__errno>
 8015a12:	ecbd 8b02 	vpop	{d8}
 8015a16:	2321      	movs	r3, #33	; 0x21
 8015a18:	6003      	str	r3, [r0, #0]
 8015a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a1e:	4806      	ldr	r0, [pc, #24]	; (8015a38 <asin+0x64>)
 8015a20:	f7ff b952 	b.w	8014cc8 <nan>
 8015a24:	eeb0 0a48 	vmov.f32	s0, s16
 8015a28:	eef0 0a68 	vmov.f32	s1, s17
 8015a2c:	ecbd 8b02 	vpop	{d8}
 8015a30:	bd38      	pop	{r3, r4, r5, pc}
 8015a32:	bf00      	nop
 8015a34:	3ff00000 	.word	0x3ff00000
 8015a38:	080182bb 	.word	0x080182bb

08015a3c <atan2>:
 8015a3c:	f000 bd30 	b.w	80164a0 <__ieee754_atan2>

08015a40 <pow>:
 8015a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a42:	ed2d 8b02 	vpush	{d8}
 8015a46:	eeb0 8a40 	vmov.f32	s16, s0
 8015a4a:	eef0 8a60 	vmov.f32	s17, s1
 8015a4e:	ec55 4b11 	vmov	r4, r5, d1
 8015a52:	f000 fdf1 	bl	8016638 <__ieee754_pow>
 8015a56:	4622      	mov	r2, r4
 8015a58:	462b      	mov	r3, r5
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	ec57 6b10 	vmov	r6, r7, d0
 8015a62:	f7eb f883 	bl	8000b6c <__aeabi_dcmpun>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d13b      	bne.n	8015ae2 <pow+0xa2>
 8015a6a:	ec51 0b18 	vmov	r0, r1, d8
 8015a6e:	2200      	movs	r2, #0
 8015a70:	2300      	movs	r3, #0
 8015a72:	f7eb f849 	bl	8000b08 <__aeabi_dcmpeq>
 8015a76:	b1b8      	cbz	r0, 8015aa8 <pow+0x68>
 8015a78:	2200      	movs	r2, #0
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	4629      	mov	r1, r5
 8015a80:	f7eb f842 	bl	8000b08 <__aeabi_dcmpeq>
 8015a84:	2800      	cmp	r0, #0
 8015a86:	d146      	bne.n	8015b16 <pow+0xd6>
 8015a88:	ec45 4b10 	vmov	d0, r4, r5
 8015a8c:	f001 fd91 	bl	80175b2 <finite>
 8015a90:	b338      	cbz	r0, 8015ae2 <pow+0xa2>
 8015a92:	2200      	movs	r2, #0
 8015a94:	2300      	movs	r3, #0
 8015a96:	4620      	mov	r0, r4
 8015a98:	4629      	mov	r1, r5
 8015a9a:	f7eb f83f 	bl	8000b1c <__aeabi_dcmplt>
 8015a9e:	b300      	cbz	r0, 8015ae2 <pow+0xa2>
 8015aa0:	f7fa fe6a 	bl	8010778 <__errno>
 8015aa4:	2322      	movs	r3, #34	; 0x22
 8015aa6:	e01b      	b.n	8015ae0 <pow+0xa0>
 8015aa8:	ec47 6b10 	vmov	d0, r6, r7
 8015aac:	f001 fd81 	bl	80175b2 <finite>
 8015ab0:	b9e0      	cbnz	r0, 8015aec <pow+0xac>
 8015ab2:	eeb0 0a48 	vmov.f32	s0, s16
 8015ab6:	eef0 0a68 	vmov.f32	s1, s17
 8015aba:	f001 fd7a 	bl	80175b2 <finite>
 8015abe:	b1a8      	cbz	r0, 8015aec <pow+0xac>
 8015ac0:	ec45 4b10 	vmov	d0, r4, r5
 8015ac4:	f001 fd75 	bl	80175b2 <finite>
 8015ac8:	b180      	cbz	r0, 8015aec <pow+0xac>
 8015aca:	4632      	mov	r2, r6
 8015acc:	463b      	mov	r3, r7
 8015ace:	4630      	mov	r0, r6
 8015ad0:	4639      	mov	r1, r7
 8015ad2:	f7eb f84b 	bl	8000b6c <__aeabi_dcmpun>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d0e2      	beq.n	8015aa0 <pow+0x60>
 8015ada:	f7fa fe4d 	bl	8010778 <__errno>
 8015ade:	2321      	movs	r3, #33	; 0x21
 8015ae0:	6003      	str	r3, [r0, #0]
 8015ae2:	ecbd 8b02 	vpop	{d8}
 8015ae6:	ec47 6b10 	vmov	d0, r6, r7
 8015aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aec:	2200      	movs	r2, #0
 8015aee:	2300      	movs	r3, #0
 8015af0:	4630      	mov	r0, r6
 8015af2:	4639      	mov	r1, r7
 8015af4:	f7eb f808 	bl	8000b08 <__aeabi_dcmpeq>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d0f2      	beq.n	8015ae2 <pow+0xa2>
 8015afc:	eeb0 0a48 	vmov.f32	s0, s16
 8015b00:	eef0 0a68 	vmov.f32	s1, s17
 8015b04:	f001 fd55 	bl	80175b2 <finite>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	d0ea      	beq.n	8015ae2 <pow+0xa2>
 8015b0c:	ec45 4b10 	vmov	d0, r4, r5
 8015b10:	f001 fd4f 	bl	80175b2 <finite>
 8015b14:	e7c3      	b.n	8015a9e <pow+0x5e>
 8015b16:	4f01      	ldr	r7, [pc, #4]	; (8015b1c <pow+0xdc>)
 8015b18:	2600      	movs	r6, #0
 8015b1a:	e7e2      	b.n	8015ae2 <pow+0xa2>
 8015b1c:	3ff00000 	.word	0x3ff00000

08015b20 <sqrt>:
 8015b20:	b538      	push	{r3, r4, r5, lr}
 8015b22:	ed2d 8b02 	vpush	{d8}
 8015b26:	ec55 4b10 	vmov	r4, r5, d0
 8015b2a:	f001 fab3 	bl	8017094 <__ieee754_sqrt>
 8015b2e:	4622      	mov	r2, r4
 8015b30:	462b      	mov	r3, r5
 8015b32:	4620      	mov	r0, r4
 8015b34:	4629      	mov	r1, r5
 8015b36:	eeb0 8a40 	vmov.f32	s16, s0
 8015b3a:	eef0 8a60 	vmov.f32	s17, s1
 8015b3e:	f7eb f815 	bl	8000b6c <__aeabi_dcmpun>
 8015b42:	b990      	cbnz	r0, 8015b6a <sqrt+0x4a>
 8015b44:	2200      	movs	r2, #0
 8015b46:	2300      	movs	r3, #0
 8015b48:	4620      	mov	r0, r4
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	f7ea ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8015b50:	b158      	cbz	r0, 8015b6a <sqrt+0x4a>
 8015b52:	f7fa fe11 	bl	8010778 <__errno>
 8015b56:	2321      	movs	r3, #33	; 0x21
 8015b58:	6003      	str	r3, [r0, #0]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4610      	mov	r0, r2
 8015b60:	4619      	mov	r1, r3
 8015b62:	f7ea fe93 	bl	800088c <__aeabi_ddiv>
 8015b66:	ec41 0b18 	vmov	d8, r0, r1
 8015b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b6e:	eef0 0a68 	vmov.f32	s1, s17
 8015b72:	ecbd 8b02 	vpop	{d8}
 8015b76:	bd38      	pop	{r3, r4, r5, pc}

08015b78 <sqrtf>:
 8015b78:	b508      	push	{r3, lr}
 8015b7a:	ed2d 8b02 	vpush	{d8}
 8015b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8015b82:	f001 fb39 	bl	80171f8 <__ieee754_sqrtf>
 8015b86:	eeb4 8a48 	vcmp.f32	s16, s16
 8015b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b8e:	d60c      	bvs.n	8015baa <sqrtf+0x32>
 8015b90:	eddf 8a07 	vldr	s17, [pc, #28]	; 8015bb0 <sqrtf+0x38>
 8015b94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9c:	d505      	bpl.n	8015baa <sqrtf+0x32>
 8015b9e:	f7fa fdeb 	bl	8010778 <__errno>
 8015ba2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015ba6:	2321      	movs	r3, #33	; 0x21
 8015ba8:	6003      	str	r3, [r0, #0]
 8015baa:	ecbd 8b02 	vpop	{d8}
 8015bae:	bd08      	pop	{r3, pc}
	...

08015bb8 <__ieee754_acos>:
 8015bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bbc:	ec55 4b10 	vmov	r4, r5, d0
 8015bc0:	49b7      	ldr	r1, [pc, #732]	; (8015ea0 <__ieee754_acos+0x2e8>)
 8015bc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015bc6:	428b      	cmp	r3, r1
 8015bc8:	dd1b      	ble.n	8015c02 <__ieee754_acos+0x4a>
 8015bca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8015bce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015bd2:	4323      	orrs	r3, r4
 8015bd4:	d106      	bne.n	8015be4 <__ieee754_acos+0x2c>
 8015bd6:	2d00      	cmp	r5, #0
 8015bd8:	f300 8211 	bgt.w	8015ffe <__ieee754_acos+0x446>
 8015bdc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8015e38 <__ieee754_acos+0x280>
 8015be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be4:	ee10 2a10 	vmov	r2, s0
 8015be8:	462b      	mov	r3, r5
 8015bea:	ee10 0a10 	vmov	r0, s0
 8015bee:	4629      	mov	r1, r5
 8015bf0:	f7ea fb6a 	bl	80002c8 <__aeabi_dsub>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	460b      	mov	r3, r1
 8015bf8:	f7ea fe48 	bl	800088c <__aeabi_ddiv>
 8015bfc:	ec41 0b10 	vmov	d0, r0, r1
 8015c00:	e7ee      	b.n	8015be0 <__ieee754_acos+0x28>
 8015c02:	49a8      	ldr	r1, [pc, #672]	; (8015ea4 <__ieee754_acos+0x2ec>)
 8015c04:	428b      	cmp	r3, r1
 8015c06:	f300 8087 	bgt.w	8015d18 <__ieee754_acos+0x160>
 8015c0a:	4aa7      	ldr	r2, [pc, #668]	; (8015ea8 <__ieee754_acos+0x2f0>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	f340 81f9 	ble.w	8016004 <__ieee754_acos+0x44c>
 8015c12:	ee10 2a10 	vmov	r2, s0
 8015c16:	ee10 0a10 	vmov	r0, s0
 8015c1a:	462b      	mov	r3, r5
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	f7ea fd0b 	bl	8000638 <__aeabi_dmul>
 8015c22:	a387      	add	r3, pc, #540	; (adr r3, 8015e40 <__ieee754_acos+0x288>)
 8015c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c28:	4606      	mov	r6, r0
 8015c2a:	460f      	mov	r7, r1
 8015c2c:	f7ea fd04 	bl	8000638 <__aeabi_dmul>
 8015c30:	a385      	add	r3, pc, #532	; (adr r3, 8015e48 <__ieee754_acos+0x290>)
 8015c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c36:	f7ea fb49 	bl	80002cc <__adddf3>
 8015c3a:	4632      	mov	r2, r6
 8015c3c:	463b      	mov	r3, r7
 8015c3e:	f7ea fcfb 	bl	8000638 <__aeabi_dmul>
 8015c42:	a383      	add	r3, pc, #524	; (adr r3, 8015e50 <__ieee754_acos+0x298>)
 8015c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c48:	f7ea fb3e 	bl	80002c8 <__aeabi_dsub>
 8015c4c:	4632      	mov	r2, r6
 8015c4e:	463b      	mov	r3, r7
 8015c50:	f7ea fcf2 	bl	8000638 <__aeabi_dmul>
 8015c54:	a380      	add	r3, pc, #512	; (adr r3, 8015e58 <__ieee754_acos+0x2a0>)
 8015c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5a:	f7ea fb37 	bl	80002cc <__adddf3>
 8015c5e:	4632      	mov	r2, r6
 8015c60:	463b      	mov	r3, r7
 8015c62:	f7ea fce9 	bl	8000638 <__aeabi_dmul>
 8015c66:	a37e      	add	r3, pc, #504	; (adr r3, 8015e60 <__ieee754_acos+0x2a8>)
 8015c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6c:	f7ea fb2c 	bl	80002c8 <__aeabi_dsub>
 8015c70:	4632      	mov	r2, r6
 8015c72:	463b      	mov	r3, r7
 8015c74:	f7ea fce0 	bl	8000638 <__aeabi_dmul>
 8015c78:	a37b      	add	r3, pc, #492	; (adr r3, 8015e68 <__ieee754_acos+0x2b0>)
 8015c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7e:	f7ea fb25 	bl	80002cc <__adddf3>
 8015c82:	4632      	mov	r2, r6
 8015c84:	463b      	mov	r3, r7
 8015c86:	f7ea fcd7 	bl	8000638 <__aeabi_dmul>
 8015c8a:	a379      	add	r3, pc, #484	; (adr r3, 8015e70 <__ieee754_acos+0x2b8>)
 8015c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c90:	4680      	mov	r8, r0
 8015c92:	4689      	mov	r9, r1
 8015c94:	4630      	mov	r0, r6
 8015c96:	4639      	mov	r1, r7
 8015c98:	f7ea fcce 	bl	8000638 <__aeabi_dmul>
 8015c9c:	a376      	add	r3, pc, #472	; (adr r3, 8015e78 <__ieee754_acos+0x2c0>)
 8015c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca2:	f7ea fb11 	bl	80002c8 <__aeabi_dsub>
 8015ca6:	4632      	mov	r2, r6
 8015ca8:	463b      	mov	r3, r7
 8015caa:	f7ea fcc5 	bl	8000638 <__aeabi_dmul>
 8015cae:	a374      	add	r3, pc, #464	; (adr r3, 8015e80 <__ieee754_acos+0x2c8>)
 8015cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb4:	f7ea fb0a 	bl	80002cc <__adddf3>
 8015cb8:	4632      	mov	r2, r6
 8015cba:	463b      	mov	r3, r7
 8015cbc:	f7ea fcbc 	bl	8000638 <__aeabi_dmul>
 8015cc0:	a371      	add	r3, pc, #452	; (adr r3, 8015e88 <__ieee754_acos+0x2d0>)
 8015cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc6:	f7ea faff 	bl	80002c8 <__aeabi_dsub>
 8015cca:	4632      	mov	r2, r6
 8015ccc:	463b      	mov	r3, r7
 8015cce:	f7ea fcb3 	bl	8000638 <__aeabi_dmul>
 8015cd2:	4b76      	ldr	r3, [pc, #472]	; (8015eac <__ieee754_acos+0x2f4>)
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	f7ea faf9 	bl	80002cc <__adddf3>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	460b      	mov	r3, r1
 8015cde:	4640      	mov	r0, r8
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	f7ea fdd3 	bl	800088c <__aeabi_ddiv>
 8015ce6:	4622      	mov	r2, r4
 8015ce8:	462b      	mov	r3, r5
 8015cea:	f7ea fca5 	bl	8000638 <__aeabi_dmul>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	a167      	add	r1, pc, #412	; (adr r1, 8015e90 <__ieee754_acos+0x2d8>)
 8015cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cf8:	f7ea fae6 	bl	80002c8 <__aeabi_dsub>
 8015cfc:	4602      	mov	r2, r0
 8015cfe:	460b      	mov	r3, r1
 8015d00:	4620      	mov	r0, r4
 8015d02:	4629      	mov	r1, r5
 8015d04:	f7ea fae0 	bl	80002c8 <__aeabi_dsub>
 8015d08:	4602      	mov	r2, r0
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	a162      	add	r1, pc, #392	; (adr r1, 8015e98 <__ieee754_acos+0x2e0>)
 8015d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d12:	f7ea fad9 	bl	80002c8 <__aeabi_dsub>
 8015d16:	e771      	b.n	8015bfc <__ieee754_acos+0x44>
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	f280 80cb 	bge.w	8015eb4 <__ieee754_acos+0x2fc>
 8015d1e:	ee10 0a10 	vmov	r0, s0
 8015d22:	4b62      	ldr	r3, [pc, #392]	; (8015eac <__ieee754_acos+0x2f4>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	4629      	mov	r1, r5
 8015d28:	f7ea fad0 	bl	80002cc <__adddf3>
 8015d2c:	4b60      	ldr	r3, [pc, #384]	; (8015eb0 <__ieee754_acos+0x2f8>)
 8015d2e:	2200      	movs	r2, #0
 8015d30:	f7ea fc82 	bl	8000638 <__aeabi_dmul>
 8015d34:	a342      	add	r3, pc, #264	; (adr r3, 8015e40 <__ieee754_acos+0x288>)
 8015d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	460d      	mov	r5, r1
 8015d3e:	f7ea fc7b 	bl	8000638 <__aeabi_dmul>
 8015d42:	a341      	add	r3, pc, #260	; (adr r3, 8015e48 <__ieee754_acos+0x290>)
 8015d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d48:	f7ea fac0 	bl	80002cc <__adddf3>
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	462b      	mov	r3, r5
 8015d50:	f7ea fc72 	bl	8000638 <__aeabi_dmul>
 8015d54:	a33e      	add	r3, pc, #248	; (adr r3, 8015e50 <__ieee754_acos+0x298>)
 8015d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5a:	f7ea fab5 	bl	80002c8 <__aeabi_dsub>
 8015d5e:	4622      	mov	r2, r4
 8015d60:	462b      	mov	r3, r5
 8015d62:	f7ea fc69 	bl	8000638 <__aeabi_dmul>
 8015d66:	a33c      	add	r3, pc, #240	; (adr r3, 8015e58 <__ieee754_acos+0x2a0>)
 8015d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6c:	f7ea faae 	bl	80002cc <__adddf3>
 8015d70:	4622      	mov	r2, r4
 8015d72:	462b      	mov	r3, r5
 8015d74:	f7ea fc60 	bl	8000638 <__aeabi_dmul>
 8015d78:	a339      	add	r3, pc, #228	; (adr r3, 8015e60 <__ieee754_acos+0x2a8>)
 8015d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7e:	f7ea faa3 	bl	80002c8 <__aeabi_dsub>
 8015d82:	4622      	mov	r2, r4
 8015d84:	462b      	mov	r3, r5
 8015d86:	f7ea fc57 	bl	8000638 <__aeabi_dmul>
 8015d8a:	a337      	add	r3, pc, #220	; (adr r3, 8015e68 <__ieee754_acos+0x2b0>)
 8015d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d90:	f7ea fa9c 	bl	80002cc <__adddf3>
 8015d94:	4622      	mov	r2, r4
 8015d96:	462b      	mov	r3, r5
 8015d98:	f7ea fc4e 	bl	8000638 <__aeabi_dmul>
 8015d9c:	ec45 4b10 	vmov	d0, r4, r5
 8015da0:	4680      	mov	r8, r0
 8015da2:	4689      	mov	r9, r1
 8015da4:	f001 f976 	bl	8017094 <__ieee754_sqrt>
 8015da8:	a331      	add	r3, pc, #196	; (adr r3, 8015e70 <__ieee754_acos+0x2b8>)
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	4620      	mov	r0, r4
 8015db0:	4629      	mov	r1, r5
 8015db2:	ec57 6b10 	vmov	r6, r7, d0
 8015db6:	f7ea fc3f 	bl	8000638 <__aeabi_dmul>
 8015dba:	a32f      	add	r3, pc, #188	; (adr r3, 8015e78 <__ieee754_acos+0x2c0>)
 8015dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc0:	f7ea fa82 	bl	80002c8 <__aeabi_dsub>
 8015dc4:	4622      	mov	r2, r4
 8015dc6:	462b      	mov	r3, r5
 8015dc8:	f7ea fc36 	bl	8000638 <__aeabi_dmul>
 8015dcc:	a32c      	add	r3, pc, #176	; (adr r3, 8015e80 <__ieee754_acos+0x2c8>)
 8015dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd2:	f7ea fa7b 	bl	80002cc <__adddf3>
 8015dd6:	4622      	mov	r2, r4
 8015dd8:	462b      	mov	r3, r5
 8015dda:	f7ea fc2d 	bl	8000638 <__aeabi_dmul>
 8015dde:	a32a      	add	r3, pc, #168	; (adr r3, 8015e88 <__ieee754_acos+0x2d0>)
 8015de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de4:	f7ea fa70 	bl	80002c8 <__aeabi_dsub>
 8015de8:	4622      	mov	r2, r4
 8015dea:	462b      	mov	r3, r5
 8015dec:	f7ea fc24 	bl	8000638 <__aeabi_dmul>
 8015df0:	4b2e      	ldr	r3, [pc, #184]	; (8015eac <__ieee754_acos+0x2f4>)
 8015df2:	2200      	movs	r2, #0
 8015df4:	f7ea fa6a 	bl	80002cc <__adddf3>
 8015df8:	4602      	mov	r2, r0
 8015dfa:	460b      	mov	r3, r1
 8015dfc:	4640      	mov	r0, r8
 8015dfe:	4649      	mov	r1, r9
 8015e00:	f7ea fd44 	bl	800088c <__aeabi_ddiv>
 8015e04:	4632      	mov	r2, r6
 8015e06:	463b      	mov	r3, r7
 8015e08:	f7ea fc16 	bl	8000638 <__aeabi_dmul>
 8015e0c:	a320      	add	r3, pc, #128	; (adr r3, 8015e90 <__ieee754_acos+0x2d8>)
 8015e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e12:	f7ea fa59 	bl	80002c8 <__aeabi_dsub>
 8015e16:	4632      	mov	r2, r6
 8015e18:	463b      	mov	r3, r7
 8015e1a:	f7ea fa57 	bl	80002cc <__adddf3>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	460b      	mov	r3, r1
 8015e22:	f7ea fa53 	bl	80002cc <__adddf3>
 8015e26:	4602      	mov	r2, r0
 8015e28:	460b      	mov	r3, r1
 8015e2a:	a103      	add	r1, pc, #12	; (adr r1, 8015e38 <__ieee754_acos+0x280>)
 8015e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e30:	e76f      	b.n	8015d12 <__ieee754_acos+0x15a>
 8015e32:	bf00      	nop
 8015e34:	f3af 8000 	nop.w
 8015e38:	54442d18 	.word	0x54442d18
 8015e3c:	400921fb 	.word	0x400921fb
 8015e40:	0dfdf709 	.word	0x0dfdf709
 8015e44:	3f023de1 	.word	0x3f023de1
 8015e48:	7501b288 	.word	0x7501b288
 8015e4c:	3f49efe0 	.word	0x3f49efe0
 8015e50:	b5688f3b 	.word	0xb5688f3b
 8015e54:	3fa48228 	.word	0x3fa48228
 8015e58:	0e884455 	.word	0x0e884455
 8015e5c:	3fc9c155 	.word	0x3fc9c155
 8015e60:	03eb6f7d 	.word	0x03eb6f7d
 8015e64:	3fd4d612 	.word	0x3fd4d612
 8015e68:	55555555 	.word	0x55555555
 8015e6c:	3fc55555 	.word	0x3fc55555
 8015e70:	b12e9282 	.word	0xb12e9282
 8015e74:	3fb3b8c5 	.word	0x3fb3b8c5
 8015e78:	1b8d0159 	.word	0x1b8d0159
 8015e7c:	3fe6066c 	.word	0x3fe6066c
 8015e80:	9c598ac8 	.word	0x9c598ac8
 8015e84:	40002ae5 	.word	0x40002ae5
 8015e88:	1c8a2d4b 	.word	0x1c8a2d4b
 8015e8c:	40033a27 	.word	0x40033a27
 8015e90:	33145c07 	.word	0x33145c07
 8015e94:	3c91a626 	.word	0x3c91a626
 8015e98:	54442d18 	.word	0x54442d18
 8015e9c:	3ff921fb 	.word	0x3ff921fb
 8015ea0:	3fefffff 	.word	0x3fefffff
 8015ea4:	3fdfffff 	.word	0x3fdfffff
 8015ea8:	3c600000 	.word	0x3c600000
 8015eac:	3ff00000 	.word	0x3ff00000
 8015eb0:	3fe00000 	.word	0x3fe00000
 8015eb4:	ee10 2a10 	vmov	r2, s0
 8015eb8:	462b      	mov	r3, r5
 8015eba:	496d      	ldr	r1, [pc, #436]	; (8016070 <__ieee754_acos+0x4b8>)
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	f7ea fa03 	bl	80002c8 <__aeabi_dsub>
 8015ec2:	4b6c      	ldr	r3, [pc, #432]	; (8016074 <__ieee754_acos+0x4bc>)
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	f7ea fbb7 	bl	8000638 <__aeabi_dmul>
 8015eca:	4604      	mov	r4, r0
 8015ecc:	460d      	mov	r5, r1
 8015ece:	ec45 4b10 	vmov	d0, r4, r5
 8015ed2:	f001 f8df 	bl	8017094 <__ieee754_sqrt>
 8015ed6:	a34e      	add	r3, pc, #312	; (adr r3, 8016010 <__ieee754_acos+0x458>)
 8015ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015edc:	4620      	mov	r0, r4
 8015ede:	4629      	mov	r1, r5
 8015ee0:	ec59 8b10 	vmov	r8, r9, d0
 8015ee4:	f7ea fba8 	bl	8000638 <__aeabi_dmul>
 8015ee8:	a34b      	add	r3, pc, #300	; (adr r3, 8016018 <__ieee754_acos+0x460>)
 8015eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eee:	f7ea f9ed 	bl	80002cc <__adddf3>
 8015ef2:	4622      	mov	r2, r4
 8015ef4:	462b      	mov	r3, r5
 8015ef6:	f7ea fb9f 	bl	8000638 <__aeabi_dmul>
 8015efa:	a349      	add	r3, pc, #292	; (adr r3, 8016020 <__ieee754_acos+0x468>)
 8015efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f00:	f7ea f9e2 	bl	80002c8 <__aeabi_dsub>
 8015f04:	4622      	mov	r2, r4
 8015f06:	462b      	mov	r3, r5
 8015f08:	f7ea fb96 	bl	8000638 <__aeabi_dmul>
 8015f0c:	a346      	add	r3, pc, #280	; (adr r3, 8016028 <__ieee754_acos+0x470>)
 8015f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f12:	f7ea f9db 	bl	80002cc <__adddf3>
 8015f16:	4622      	mov	r2, r4
 8015f18:	462b      	mov	r3, r5
 8015f1a:	f7ea fb8d 	bl	8000638 <__aeabi_dmul>
 8015f1e:	a344      	add	r3, pc, #272	; (adr r3, 8016030 <__ieee754_acos+0x478>)
 8015f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f24:	f7ea f9d0 	bl	80002c8 <__aeabi_dsub>
 8015f28:	4622      	mov	r2, r4
 8015f2a:	462b      	mov	r3, r5
 8015f2c:	f7ea fb84 	bl	8000638 <__aeabi_dmul>
 8015f30:	a341      	add	r3, pc, #260	; (adr r3, 8016038 <__ieee754_acos+0x480>)
 8015f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f36:	f7ea f9c9 	bl	80002cc <__adddf3>
 8015f3a:	4622      	mov	r2, r4
 8015f3c:	462b      	mov	r3, r5
 8015f3e:	f7ea fb7b 	bl	8000638 <__aeabi_dmul>
 8015f42:	a33f      	add	r3, pc, #252	; (adr r3, 8016040 <__ieee754_acos+0x488>)
 8015f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f48:	4682      	mov	sl, r0
 8015f4a:	468b      	mov	fp, r1
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	4629      	mov	r1, r5
 8015f50:	f7ea fb72 	bl	8000638 <__aeabi_dmul>
 8015f54:	a33c      	add	r3, pc, #240	; (adr r3, 8016048 <__ieee754_acos+0x490>)
 8015f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f5a:	f7ea f9b5 	bl	80002c8 <__aeabi_dsub>
 8015f5e:	4622      	mov	r2, r4
 8015f60:	462b      	mov	r3, r5
 8015f62:	f7ea fb69 	bl	8000638 <__aeabi_dmul>
 8015f66:	a33a      	add	r3, pc, #232	; (adr r3, 8016050 <__ieee754_acos+0x498>)
 8015f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6c:	f7ea f9ae 	bl	80002cc <__adddf3>
 8015f70:	4622      	mov	r2, r4
 8015f72:	462b      	mov	r3, r5
 8015f74:	f7ea fb60 	bl	8000638 <__aeabi_dmul>
 8015f78:	a337      	add	r3, pc, #220	; (adr r3, 8016058 <__ieee754_acos+0x4a0>)
 8015f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7e:	f7ea f9a3 	bl	80002c8 <__aeabi_dsub>
 8015f82:	4622      	mov	r2, r4
 8015f84:	462b      	mov	r3, r5
 8015f86:	f7ea fb57 	bl	8000638 <__aeabi_dmul>
 8015f8a:	4b39      	ldr	r3, [pc, #228]	; (8016070 <__ieee754_acos+0x4b8>)
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f7ea f99d 	bl	80002cc <__adddf3>
 8015f92:	4602      	mov	r2, r0
 8015f94:	460b      	mov	r3, r1
 8015f96:	4650      	mov	r0, sl
 8015f98:	4659      	mov	r1, fp
 8015f9a:	f7ea fc77 	bl	800088c <__aeabi_ddiv>
 8015f9e:	4642      	mov	r2, r8
 8015fa0:	464b      	mov	r3, r9
 8015fa2:	f7ea fb49 	bl	8000638 <__aeabi_dmul>
 8015fa6:	2600      	movs	r6, #0
 8015fa8:	4682      	mov	sl, r0
 8015faa:	468b      	mov	fp, r1
 8015fac:	4632      	mov	r2, r6
 8015fae:	464b      	mov	r3, r9
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	4649      	mov	r1, r9
 8015fb4:	f7ea fb40 	bl	8000638 <__aeabi_dmul>
 8015fb8:	4602      	mov	r2, r0
 8015fba:	460b      	mov	r3, r1
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	4629      	mov	r1, r5
 8015fc0:	f7ea f982 	bl	80002c8 <__aeabi_dsub>
 8015fc4:	4632      	mov	r2, r6
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	460d      	mov	r5, r1
 8015fca:	464b      	mov	r3, r9
 8015fcc:	4640      	mov	r0, r8
 8015fce:	4649      	mov	r1, r9
 8015fd0:	f7ea f97c 	bl	80002cc <__adddf3>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	4620      	mov	r0, r4
 8015fda:	4629      	mov	r1, r5
 8015fdc:	f7ea fc56 	bl	800088c <__aeabi_ddiv>
 8015fe0:	4602      	mov	r2, r0
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4650      	mov	r0, sl
 8015fe6:	4659      	mov	r1, fp
 8015fe8:	f7ea f970 	bl	80002cc <__adddf3>
 8015fec:	4632      	mov	r2, r6
 8015fee:	464b      	mov	r3, r9
 8015ff0:	f7ea f96c 	bl	80002cc <__adddf3>
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	f7ea f968 	bl	80002cc <__adddf3>
 8015ffc:	e5fe      	b.n	8015bfc <__ieee754_acos+0x44>
 8015ffe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016060 <__ieee754_acos+0x4a8>
 8016002:	e5ed      	b.n	8015be0 <__ieee754_acos+0x28>
 8016004:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016068 <__ieee754_acos+0x4b0>
 8016008:	e5ea      	b.n	8015be0 <__ieee754_acos+0x28>
 801600a:	bf00      	nop
 801600c:	f3af 8000 	nop.w
 8016010:	0dfdf709 	.word	0x0dfdf709
 8016014:	3f023de1 	.word	0x3f023de1
 8016018:	7501b288 	.word	0x7501b288
 801601c:	3f49efe0 	.word	0x3f49efe0
 8016020:	b5688f3b 	.word	0xb5688f3b
 8016024:	3fa48228 	.word	0x3fa48228
 8016028:	0e884455 	.word	0x0e884455
 801602c:	3fc9c155 	.word	0x3fc9c155
 8016030:	03eb6f7d 	.word	0x03eb6f7d
 8016034:	3fd4d612 	.word	0x3fd4d612
 8016038:	55555555 	.word	0x55555555
 801603c:	3fc55555 	.word	0x3fc55555
 8016040:	b12e9282 	.word	0xb12e9282
 8016044:	3fb3b8c5 	.word	0x3fb3b8c5
 8016048:	1b8d0159 	.word	0x1b8d0159
 801604c:	3fe6066c 	.word	0x3fe6066c
 8016050:	9c598ac8 	.word	0x9c598ac8
 8016054:	40002ae5 	.word	0x40002ae5
 8016058:	1c8a2d4b 	.word	0x1c8a2d4b
 801605c:	40033a27 	.word	0x40033a27
	...
 8016068:	54442d18 	.word	0x54442d18
 801606c:	3ff921fb 	.word	0x3ff921fb
 8016070:	3ff00000 	.word	0x3ff00000
 8016074:	3fe00000 	.word	0x3fe00000

08016078 <__ieee754_asin>:
 8016078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607c:	ed2d 8b04 	vpush	{d8-d9}
 8016080:	ec55 4b10 	vmov	r4, r5, d0
 8016084:	4bcc      	ldr	r3, [pc, #816]	; (80163b8 <__ieee754_asin+0x340>)
 8016086:	b083      	sub	sp, #12
 8016088:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801608c:	4598      	cmp	r8, r3
 801608e:	9501      	str	r5, [sp, #4]
 8016090:	dd35      	ble.n	80160fe <__ieee754_asin+0x86>
 8016092:	ee10 3a10 	vmov	r3, s0
 8016096:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801609a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801609e:	ea58 0303 	orrs.w	r3, r8, r3
 80160a2:	d117      	bne.n	80160d4 <__ieee754_asin+0x5c>
 80160a4:	a3aa      	add	r3, pc, #680	; (adr r3, 8016350 <__ieee754_asin+0x2d8>)
 80160a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160aa:	ee10 0a10 	vmov	r0, s0
 80160ae:	4629      	mov	r1, r5
 80160b0:	f7ea fac2 	bl	8000638 <__aeabi_dmul>
 80160b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8016358 <__ieee754_asin+0x2e0>)
 80160b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ba:	4606      	mov	r6, r0
 80160bc:	460f      	mov	r7, r1
 80160be:	4620      	mov	r0, r4
 80160c0:	4629      	mov	r1, r5
 80160c2:	f7ea fab9 	bl	8000638 <__aeabi_dmul>
 80160c6:	4602      	mov	r2, r0
 80160c8:	460b      	mov	r3, r1
 80160ca:	4630      	mov	r0, r6
 80160cc:	4639      	mov	r1, r7
 80160ce:	f7ea f8fd 	bl	80002cc <__adddf3>
 80160d2:	e00b      	b.n	80160ec <__ieee754_asin+0x74>
 80160d4:	ee10 2a10 	vmov	r2, s0
 80160d8:	462b      	mov	r3, r5
 80160da:	ee10 0a10 	vmov	r0, s0
 80160de:	4629      	mov	r1, r5
 80160e0:	f7ea f8f2 	bl	80002c8 <__aeabi_dsub>
 80160e4:	4602      	mov	r2, r0
 80160e6:	460b      	mov	r3, r1
 80160e8:	f7ea fbd0 	bl	800088c <__aeabi_ddiv>
 80160ec:	4604      	mov	r4, r0
 80160ee:	460d      	mov	r5, r1
 80160f0:	ec45 4b10 	vmov	d0, r4, r5
 80160f4:	b003      	add	sp, #12
 80160f6:	ecbd 8b04 	vpop	{d8-d9}
 80160fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160fe:	4baf      	ldr	r3, [pc, #700]	; (80163bc <__ieee754_asin+0x344>)
 8016100:	4598      	cmp	r8, r3
 8016102:	dc11      	bgt.n	8016128 <__ieee754_asin+0xb0>
 8016104:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016108:	f280 80ae 	bge.w	8016268 <__ieee754_asin+0x1f0>
 801610c:	a394      	add	r3, pc, #592	; (adr r3, 8016360 <__ieee754_asin+0x2e8>)
 801610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016112:	ee10 0a10 	vmov	r0, s0
 8016116:	4629      	mov	r1, r5
 8016118:	f7ea f8d8 	bl	80002cc <__adddf3>
 801611c:	4ba8      	ldr	r3, [pc, #672]	; (80163c0 <__ieee754_asin+0x348>)
 801611e:	2200      	movs	r2, #0
 8016120:	f7ea fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 8016124:	2800      	cmp	r0, #0
 8016126:	d1e3      	bne.n	80160f0 <__ieee754_asin+0x78>
 8016128:	ec45 4b10 	vmov	d0, r4, r5
 801612c:	f001 fa38 	bl	80175a0 <fabs>
 8016130:	49a3      	ldr	r1, [pc, #652]	; (80163c0 <__ieee754_asin+0x348>)
 8016132:	ec53 2b10 	vmov	r2, r3, d0
 8016136:	2000      	movs	r0, #0
 8016138:	f7ea f8c6 	bl	80002c8 <__aeabi_dsub>
 801613c:	4ba1      	ldr	r3, [pc, #644]	; (80163c4 <__ieee754_asin+0x34c>)
 801613e:	2200      	movs	r2, #0
 8016140:	f7ea fa7a 	bl	8000638 <__aeabi_dmul>
 8016144:	a388      	add	r3, pc, #544	; (adr r3, 8016368 <__ieee754_asin+0x2f0>)
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	4604      	mov	r4, r0
 801614c:	460d      	mov	r5, r1
 801614e:	f7ea fa73 	bl	8000638 <__aeabi_dmul>
 8016152:	a387      	add	r3, pc, #540	; (adr r3, 8016370 <__ieee754_asin+0x2f8>)
 8016154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016158:	f7ea f8b8 	bl	80002cc <__adddf3>
 801615c:	4622      	mov	r2, r4
 801615e:	462b      	mov	r3, r5
 8016160:	f7ea fa6a 	bl	8000638 <__aeabi_dmul>
 8016164:	a384      	add	r3, pc, #528	; (adr r3, 8016378 <__ieee754_asin+0x300>)
 8016166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616a:	f7ea f8ad 	bl	80002c8 <__aeabi_dsub>
 801616e:	4622      	mov	r2, r4
 8016170:	462b      	mov	r3, r5
 8016172:	f7ea fa61 	bl	8000638 <__aeabi_dmul>
 8016176:	a382      	add	r3, pc, #520	; (adr r3, 8016380 <__ieee754_asin+0x308>)
 8016178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801617c:	f7ea f8a6 	bl	80002cc <__adddf3>
 8016180:	4622      	mov	r2, r4
 8016182:	462b      	mov	r3, r5
 8016184:	f7ea fa58 	bl	8000638 <__aeabi_dmul>
 8016188:	a37f      	add	r3, pc, #508	; (adr r3, 8016388 <__ieee754_asin+0x310>)
 801618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618e:	f7ea f89b 	bl	80002c8 <__aeabi_dsub>
 8016192:	4622      	mov	r2, r4
 8016194:	462b      	mov	r3, r5
 8016196:	f7ea fa4f 	bl	8000638 <__aeabi_dmul>
 801619a:	a37d      	add	r3, pc, #500	; (adr r3, 8016390 <__ieee754_asin+0x318>)
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	f7ea f894 	bl	80002cc <__adddf3>
 80161a4:	4622      	mov	r2, r4
 80161a6:	462b      	mov	r3, r5
 80161a8:	f7ea fa46 	bl	8000638 <__aeabi_dmul>
 80161ac:	a37a      	add	r3, pc, #488	; (adr r3, 8016398 <__ieee754_asin+0x320>)
 80161ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b2:	ec41 0b18 	vmov	d8, r0, r1
 80161b6:	4620      	mov	r0, r4
 80161b8:	4629      	mov	r1, r5
 80161ba:	f7ea fa3d 	bl	8000638 <__aeabi_dmul>
 80161be:	a378      	add	r3, pc, #480	; (adr r3, 80163a0 <__ieee754_asin+0x328>)
 80161c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c4:	f7ea f880 	bl	80002c8 <__aeabi_dsub>
 80161c8:	4622      	mov	r2, r4
 80161ca:	462b      	mov	r3, r5
 80161cc:	f7ea fa34 	bl	8000638 <__aeabi_dmul>
 80161d0:	a375      	add	r3, pc, #468	; (adr r3, 80163a8 <__ieee754_asin+0x330>)
 80161d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d6:	f7ea f879 	bl	80002cc <__adddf3>
 80161da:	4622      	mov	r2, r4
 80161dc:	462b      	mov	r3, r5
 80161de:	f7ea fa2b 	bl	8000638 <__aeabi_dmul>
 80161e2:	a373      	add	r3, pc, #460	; (adr r3, 80163b0 <__ieee754_asin+0x338>)
 80161e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e8:	f7ea f86e 	bl	80002c8 <__aeabi_dsub>
 80161ec:	4622      	mov	r2, r4
 80161ee:	462b      	mov	r3, r5
 80161f0:	f7ea fa22 	bl	8000638 <__aeabi_dmul>
 80161f4:	4b72      	ldr	r3, [pc, #456]	; (80163c0 <__ieee754_asin+0x348>)
 80161f6:	2200      	movs	r2, #0
 80161f8:	f7ea f868 	bl	80002cc <__adddf3>
 80161fc:	ec45 4b10 	vmov	d0, r4, r5
 8016200:	4606      	mov	r6, r0
 8016202:	460f      	mov	r7, r1
 8016204:	f000 ff46 	bl	8017094 <__ieee754_sqrt>
 8016208:	4b6f      	ldr	r3, [pc, #444]	; (80163c8 <__ieee754_asin+0x350>)
 801620a:	4598      	cmp	r8, r3
 801620c:	ec5b ab10 	vmov	sl, fp, d0
 8016210:	f340 80dc 	ble.w	80163cc <__ieee754_asin+0x354>
 8016214:	4632      	mov	r2, r6
 8016216:	463b      	mov	r3, r7
 8016218:	ec51 0b18 	vmov	r0, r1, d8
 801621c:	f7ea fb36 	bl	800088c <__aeabi_ddiv>
 8016220:	4652      	mov	r2, sl
 8016222:	465b      	mov	r3, fp
 8016224:	f7ea fa08 	bl	8000638 <__aeabi_dmul>
 8016228:	4652      	mov	r2, sl
 801622a:	465b      	mov	r3, fp
 801622c:	f7ea f84e 	bl	80002cc <__adddf3>
 8016230:	4602      	mov	r2, r0
 8016232:	460b      	mov	r3, r1
 8016234:	f7ea f84a 	bl	80002cc <__adddf3>
 8016238:	a347      	add	r3, pc, #284	; (adr r3, 8016358 <__ieee754_asin+0x2e0>)
 801623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623e:	f7ea f843 	bl	80002c8 <__aeabi_dsub>
 8016242:	4602      	mov	r2, r0
 8016244:	460b      	mov	r3, r1
 8016246:	a142      	add	r1, pc, #264	; (adr r1, 8016350 <__ieee754_asin+0x2d8>)
 8016248:	e9d1 0100 	ldrd	r0, r1, [r1]
 801624c:	f7ea f83c 	bl	80002c8 <__aeabi_dsub>
 8016250:	9b01      	ldr	r3, [sp, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	bfdc      	itt	le
 8016256:	4602      	movle	r2, r0
 8016258:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801625c:	4604      	mov	r4, r0
 801625e:	460d      	mov	r5, r1
 8016260:	bfdc      	itt	le
 8016262:	4614      	movle	r4, r2
 8016264:	461d      	movle	r5, r3
 8016266:	e743      	b.n	80160f0 <__ieee754_asin+0x78>
 8016268:	ee10 2a10 	vmov	r2, s0
 801626c:	ee10 0a10 	vmov	r0, s0
 8016270:	462b      	mov	r3, r5
 8016272:	4629      	mov	r1, r5
 8016274:	f7ea f9e0 	bl	8000638 <__aeabi_dmul>
 8016278:	a33b      	add	r3, pc, #236	; (adr r3, 8016368 <__ieee754_asin+0x2f0>)
 801627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627e:	4606      	mov	r6, r0
 8016280:	460f      	mov	r7, r1
 8016282:	f7ea f9d9 	bl	8000638 <__aeabi_dmul>
 8016286:	a33a      	add	r3, pc, #232	; (adr r3, 8016370 <__ieee754_asin+0x2f8>)
 8016288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628c:	f7ea f81e 	bl	80002cc <__adddf3>
 8016290:	4632      	mov	r2, r6
 8016292:	463b      	mov	r3, r7
 8016294:	f7ea f9d0 	bl	8000638 <__aeabi_dmul>
 8016298:	a337      	add	r3, pc, #220	; (adr r3, 8016378 <__ieee754_asin+0x300>)
 801629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629e:	f7ea f813 	bl	80002c8 <__aeabi_dsub>
 80162a2:	4632      	mov	r2, r6
 80162a4:	463b      	mov	r3, r7
 80162a6:	f7ea f9c7 	bl	8000638 <__aeabi_dmul>
 80162aa:	a335      	add	r3, pc, #212	; (adr r3, 8016380 <__ieee754_asin+0x308>)
 80162ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b0:	f7ea f80c 	bl	80002cc <__adddf3>
 80162b4:	4632      	mov	r2, r6
 80162b6:	463b      	mov	r3, r7
 80162b8:	f7ea f9be 	bl	8000638 <__aeabi_dmul>
 80162bc:	a332      	add	r3, pc, #200	; (adr r3, 8016388 <__ieee754_asin+0x310>)
 80162be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c2:	f7ea f801 	bl	80002c8 <__aeabi_dsub>
 80162c6:	4632      	mov	r2, r6
 80162c8:	463b      	mov	r3, r7
 80162ca:	f7ea f9b5 	bl	8000638 <__aeabi_dmul>
 80162ce:	a330      	add	r3, pc, #192	; (adr r3, 8016390 <__ieee754_asin+0x318>)
 80162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d4:	f7e9 fffa 	bl	80002cc <__adddf3>
 80162d8:	4632      	mov	r2, r6
 80162da:	463b      	mov	r3, r7
 80162dc:	f7ea f9ac 	bl	8000638 <__aeabi_dmul>
 80162e0:	a32d      	add	r3, pc, #180	; (adr r3, 8016398 <__ieee754_asin+0x320>)
 80162e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e6:	4680      	mov	r8, r0
 80162e8:	4689      	mov	r9, r1
 80162ea:	4630      	mov	r0, r6
 80162ec:	4639      	mov	r1, r7
 80162ee:	f7ea f9a3 	bl	8000638 <__aeabi_dmul>
 80162f2:	a32b      	add	r3, pc, #172	; (adr r3, 80163a0 <__ieee754_asin+0x328>)
 80162f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f8:	f7e9 ffe6 	bl	80002c8 <__aeabi_dsub>
 80162fc:	4632      	mov	r2, r6
 80162fe:	463b      	mov	r3, r7
 8016300:	f7ea f99a 	bl	8000638 <__aeabi_dmul>
 8016304:	a328      	add	r3, pc, #160	; (adr r3, 80163a8 <__ieee754_asin+0x330>)
 8016306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630a:	f7e9 ffdf 	bl	80002cc <__adddf3>
 801630e:	4632      	mov	r2, r6
 8016310:	463b      	mov	r3, r7
 8016312:	f7ea f991 	bl	8000638 <__aeabi_dmul>
 8016316:	a326      	add	r3, pc, #152	; (adr r3, 80163b0 <__ieee754_asin+0x338>)
 8016318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631c:	f7e9 ffd4 	bl	80002c8 <__aeabi_dsub>
 8016320:	4632      	mov	r2, r6
 8016322:	463b      	mov	r3, r7
 8016324:	f7ea f988 	bl	8000638 <__aeabi_dmul>
 8016328:	4b25      	ldr	r3, [pc, #148]	; (80163c0 <__ieee754_asin+0x348>)
 801632a:	2200      	movs	r2, #0
 801632c:	f7e9 ffce 	bl	80002cc <__adddf3>
 8016330:	4602      	mov	r2, r0
 8016332:	460b      	mov	r3, r1
 8016334:	4640      	mov	r0, r8
 8016336:	4649      	mov	r1, r9
 8016338:	f7ea faa8 	bl	800088c <__aeabi_ddiv>
 801633c:	4622      	mov	r2, r4
 801633e:	462b      	mov	r3, r5
 8016340:	f7ea f97a 	bl	8000638 <__aeabi_dmul>
 8016344:	4602      	mov	r2, r0
 8016346:	460b      	mov	r3, r1
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	e6bf      	b.n	80160ce <__ieee754_asin+0x56>
 801634e:	bf00      	nop
 8016350:	54442d18 	.word	0x54442d18
 8016354:	3ff921fb 	.word	0x3ff921fb
 8016358:	33145c07 	.word	0x33145c07
 801635c:	3c91a626 	.word	0x3c91a626
 8016360:	8800759c 	.word	0x8800759c
 8016364:	7e37e43c 	.word	0x7e37e43c
 8016368:	0dfdf709 	.word	0x0dfdf709
 801636c:	3f023de1 	.word	0x3f023de1
 8016370:	7501b288 	.word	0x7501b288
 8016374:	3f49efe0 	.word	0x3f49efe0
 8016378:	b5688f3b 	.word	0xb5688f3b
 801637c:	3fa48228 	.word	0x3fa48228
 8016380:	0e884455 	.word	0x0e884455
 8016384:	3fc9c155 	.word	0x3fc9c155
 8016388:	03eb6f7d 	.word	0x03eb6f7d
 801638c:	3fd4d612 	.word	0x3fd4d612
 8016390:	55555555 	.word	0x55555555
 8016394:	3fc55555 	.word	0x3fc55555
 8016398:	b12e9282 	.word	0xb12e9282
 801639c:	3fb3b8c5 	.word	0x3fb3b8c5
 80163a0:	1b8d0159 	.word	0x1b8d0159
 80163a4:	3fe6066c 	.word	0x3fe6066c
 80163a8:	9c598ac8 	.word	0x9c598ac8
 80163ac:	40002ae5 	.word	0x40002ae5
 80163b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80163b4:	40033a27 	.word	0x40033a27
 80163b8:	3fefffff 	.word	0x3fefffff
 80163bc:	3fdfffff 	.word	0x3fdfffff
 80163c0:	3ff00000 	.word	0x3ff00000
 80163c4:	3fe00000 	.word	0x3fe00000
 80163c8:	3fef3332 	.word	0x3fef3332
 80163cc:	ee10 2a10 	vmov	r2, s0
 80163d0:	ee10 0a10 	vmov	r0, s0
 80163d4:	465b      	mov	r3, fp
 80163d6:	4659      	mov	r1, fp
 80163d8:	f7e9 ff78 	bl	80002cc <__adddf3>
 80163dc:	4632      	mov	r2, r6
 80163de:	463b      	mov	r3, r7
 80163e0:	ec41 0b19 	vmov	d9, r0, r1
 80163e4:	ec51 0b18 	vmov	r0, r1, d8
 80163e8:	f7ea fa50 	bl	800088c <__aeabi_ddiv>
 80163ec:	4602      	mov	r2, r0
 80163ee:	460b      	mov	r3, r1
 80163f0:	ec51 0b19 	vmov	r0, r1, d9
 80163f4:	f7ea f920 	bl	8000638 <__aeabi_dmul>
 80163f8:	f04f 0800 	mov.w	r8, #0
 80163fc:	4606      	mov	r6, r0
 80163fe:	460f      	mov	r7, r1
 8016400:	4642      	mov	r2, r8
 8016402:	465b      	mov	r3, fp
 8016404:	4640      	mov	r0, r8
 8016406:	4659      	mov	r1, fp
 8016408:	f7ea f916 	bl	8000638 <__aeabi_dmul>
 801640c:	4602      	mov	r2, r0
 801640e:	460b      	mov	r3, r1
 8016410:	4620      	mov	r0, r4
 8016412:	4629      	mov	r1, r5
 8016414:	f7e9 ff58 	bl	80002c8 <__aeabi_dsub>
 8016418:	4642      	mov	r2, r8
 801641a:	4604      	mov	r4, r0
 801641c:	460d      	mov	r5, r1
 801641e:	465b      	mov	r3, fp
 8016420:	4650      	mov	r0, sl
 8016422:	4659      	mov	r1, fp
 8016424:	f7e9 ff52 	bl	80002cc <__adddf3>
 8016428:	4602      	mov	r2, r0
 801642a:	460b      	mov	r3, r1
 801642c:	4620      	mov	r0, r4
 801642e:	4629      	mov	r1, r5
 8016430:	f7ea fa2c 	bl	800088c <__aeabi_ddiv>
 8016434:	4602      	mov	r2, r0
 8016436:	460b      	mov	r3, r1
 8016438:	f7e9 ff48 	bl	80002cc <__adddf3>
 801643c:	4602      	mov	r2, r0
 801643e:	460b      	mov	r3, r1
 8016440:	a113      	add	r1, pc, #76	; (adr r1, 8016490 <__ieee754_asin+0x418>)
 8016442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016446:	f7e9 ff3f 	bl	80002c8 <__aeabi_dsub>
 801644a:	4602      	mov	r2, r0
 801644c:	460b      	mov	r3, r1
 801644e:	4630      	mov	r0, r6
 8016450:	4639      	mov	r1, r7
 8016452:	f7e9 ff39 	bl	80002c8 <__aeabi_dsub>
 8016456:	4642      	mov	r2, r8
 8016458:	4604      	mov	r4, r0
 801645a:	460d      	mov	r5, r1
 801645c:	465b      	mov	r3, fp
 801645e:	4640      	mov	r0, r8
 8016460:	4659      	mov	r1, fp
 8016462:	f7e9 ff33 	bl	80002cc <__adddf3>
 8016466:	4602      	mov	r2, r0
 8016468:	460b      	mov	r3, r1
 801646a:	a10b      	add	r1, pc, #44	; (adr r1, 8016498 <__ieee754_asin+0x420>)
 801646c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016470:	f7e9 ff2a 	bl	80002c8 <__aeabi_dsub>
 8016474:	4602      	mov	r2, r0
 8016476:	460b      	mov	r3, r1
 8016478:	4620      	mov	r0, r4
 801647a:	4629      	mov	r1, r5
 801647c:	f7e9 ff24 	bl	80002c8 <__aeabi_dsub>
 8016480:	4602      	mov	r2, r0
 8016482:	460b      	mov	r3, r1
 8016484:	a104      	add	r1, pc, #16	; (adr r1, 8016498 <__ieee754_asin+0x420>)
 8016486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801648a:	e6df      	b.n	801624c <__ieee754_asin+0x1d4>
 801648c:	f3af 8000 	nop.w
 8016490:	33145c07 	.word	0x33145c07
 8016494:	3c91a626 	.word	0x3c91a626
 8016498:	54442d18 	.word	0x54442d18
 801649c:	3fe921fb 	.word	0x3fe921fb

080164a0 <__ieee754_atan2>:
 80164a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164a4:	ec57 6b11 	vmov	r6, r7, d1
 80164a8:	4273      	negs	r3, r6
 80164aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016630 <__ieee754_atan2+0x190>
 80164ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80164b2:	4333      	orrs	r3, r6
 80164b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80164b8:	4573      	cmp	r3, lr
 80164ba:	ec51 0b10 	vmov	r0, r1, d0
 80164be:	ee11 8a10 	vmov	r8, s2
 80164c2:	d80a      	bhi.n	80164da <__ieee754_atan2+0x3a>
 80164c4:	4244      	negs	r4, r0
 80164c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80164ca:	4304      	orrs	r4, r0
 80164cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80164d0:	4574      	cmp	r4, lr
 80164d2:	ee10 9a10 	vmov	r9, s0
 80164d6:	468c      	mov	ip, r1
 80164d8:	d907      	bls.n	80164ea <__ieee754_atan2+0x4a>
 80164da:	4632      	mov	r2, r6
 80164dc:	463b      	mov	r3, r7
 80164de:	f7e9 fef5 	bl	80002cc <__adddf3>
 80164e2:	ec41 0b10 	vmov	d0, r0, r1
 80164e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80164ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80164f2:	4334      	orrs	r4, r6
 80164f4:	d103      	bne.n	80164fe <__ieee754_atan2+0x5e>
 80164f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164fa:	f000 beb1 	b.w	8017260 <atan>
 80164fe:	17bc      	asrs	r4, r7, #30
 8016500:	f004 0402 	and.w	r4, r4, #2
 8016504:	ea53 0909 	orrs.w	r9, r3, r9
 8016508:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801650c:	d107      	bne.n	801651e <__ieee754_atan2+0x7e>
 801650e:	2c02      	cmp	r4, #2
 8016510:	d060      	beq.n	80165d4 <__ieee754_atan2+0x134>
 8016512:	2c03      	cmp	r4, #3
 8016514:	d1e5      	bne.n	80164e2 <__ieee754_atan2+0x42>
 8016516:	a142      	add	r1, pc, #264	; (adr r1, 8016620 <__ieee754_atan2+0x180>)
 8016518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801651c:	e7e1      	b.n	80164e2 <__ieee754_atan2+0x42>
 801651e:	ea52 0808 	orrs.w	r8, r2, r8
 8016522:	d106      	bne.n	8016532 <__ieee754_atan2+0x92>
 8016524:	f1bc 0f00 	cmp.w	ip, #0
 8016528:	da5f      	bge.n	80165ea <__ieee754_atan2+0x14a>
 801652a:	a13f      	add	r1, pc, #252	; (adr r1, 8016628 <__ieee754_atan2+0x188>)
 801652c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016530:	e7d7      	b.n	80164e2 <__ieee754_atan2+0x42>
 8016532:	4572      	cmp	r2, lr
 8016534:	d10f      	bne.n	8016556 <__ieee754_atan2+0xb6>
 8016536:	4293      	cmp	r3, r2
 8016538:	f104 34ff 	add.w	r4, r4, #4294967295
 801653c:	d107      	bne.n	801654e <__ieee754_atan2+0xae>
 801653e:	2c02      	cmp	r4, #2
 8016540:	d84c      	bhi.n	80165dc <__ieee754_atan2+0x13c>
 8016542:	4b35      	ldr	r3, [pc, #212]	; (8016618 <__ieee754_atan2+0x178>)
 8016544:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016548:	e9d4 0100 	ldrd	r0, r1, [r4]
 801654c:	e7c9      	b.n	80164e2 <__ieee754_atan2+0x42>
 801654e:	2c02      	cmp	r4, #2
 8016550:	d848      	bhi.n	80165e4 <__ieee754_atan2+0x144>
 8016552:	4b32      	ldr	r3, [pc, #200]	; (801661c <__ieee754_atan2+0x17c>)
 8016554:	e7f6      	b.n	8016544 <__ieee754_atan2+0xa4>
 8016556:	4573      	cmp	r3, lr
 8016558:	d0e4      	beq.n	8016524 <__ieee754_atan2+0x84>
 801655a:	1a9b      	subs	r3, r3, r2
 801655c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016560:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016564:	da1e      	bge.n	80165a4 <__ieee754_atan2+0x104>
 8016566:	2f00      	cmp	r7, #0
 8016568:	da01      	bge.n	801656e <__ieee754_atan2+0xce>
 801656a:	323c      	adds	r2, #60	; 0x3c
 801656c:	db1e      	blt.n	80165ac <__ieee754_atan2+0x10c>
 801656e:	4632      	mov	r2, r6
 8016570:	463b      	mov	r3, r7
 8016572:	f7ea f98b 	bl	800088c <__aeabi_ddiv>
 8016576:	ec41 0b10 	vmov	d0, r0, r1
 801657a:	f001 f811 	bl	80175a0 <fabs>
 801657e:	f000 fe6f 	bl	8017260 <atan>
 8016582:	ec51 0b10 	vmov	r0, r1, d0
 8016586:	2c01      	cmp	r4, #1
 8016588:	d013      	beq.n	80165b2 <__ieee754_atan2+0x112>
 801658a:	2c02      	cmp	r4, #2
 801658c:	d015      	beq.n	80165ba <__ieee754_atan2+0x11a>
 801658e:	2c00      	cmp	r4, #0
 8016590:	d0a7      	beq.n	80164e2 <__ieee754_atan2+0x42>
 8016592:	a319      	add	r3, pc, #100	; (adr r3, 80165f8 <__ieee754_atan2+0x158>)
 8016594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016598:	f7e9 fe96 	bl	80002c8 <__aeabi_dsub>
 801659c:	a318      	add	r3, pc, #96	; (adr r3, 8016600 <__ieee754_atan2+0x160>)
 801659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a2:	e014      	b.n	80165ce <__ieee754_atan2+0x12e>
 80165a4:	a118      	add	r1, pc, #96	; (adr r1, 8016608 <__ieee754_atan2+0x168>)
 80165a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165aa:	e7ec      	b.n	8016586 <__ieee754_atan2+0xe6>
 80165ac:	2000      	movs	r0, #0
 80165ae:	2100      	movs	r1, #0
 80165b0:	e7e9      	b.n	8016586 <__ieee754_atan2+0xe6>
 80165b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80165b6:	4619      	mov	r1, r3
 80165b8:	e793      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165ba:	a30f      	add	r3, pc, #60	; (adr r3, 80165f8 <__ieee754_atan2+0x158>)
 80165bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c0:	f7e9 fe82 	bl	80002c8 <__aeabi_dsub>
 80165c4:	4602      	mov	r2, r0
 80165c6:	460b      	mov	r3, r1
 80165c8:	a10d      	add	r1, pc, #52	; (adr r1, 8016600 <__ieee754_atan2+0x160>)
 80165ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165ce:	f7e9 fe7b 	bl	80002c8 <__aeabi_dsub>
 80165d2:	e786      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165d4:	a10a      	add	r1, pc, #40	; (adr r1, 8016600 <__ieee754_atan2+0x160>)
 80165d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165da:	e782      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165dc:	a10c      	add	r1, pc, #48	; (adr r1, 8016610 <__ieee754_atan2+0x170>)
 80165de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165e2:	e77e      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165e4:	2000      	movs	r0, #0
 80165e6:	2100      	movs	r1, #0
 80165e8:	e77b      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165ea:	a107      	add	r1, pc, #28	; (adr r1, 8016608 <__ieee754_atan2+0x168>)
 80165ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165f0:	e777      	b.n	80164e2 <__ieee754_atan2+0x42>
 80165f2:	bf00      	nop
 80165f4:	f3af 8000 	nop.w
 80165f8:	33145c07 	.word	0x33145c07
 80165fc:	3ca1a626 	.word	0x3ca1a626
 8016600:	54442d18 	.word	0x54442d18
 8016604:	400921fb 	.word	0x400921fb
 8016608:	54442d18 	.word	0x54442d18
 801660c:	3ff921fb 	.word	0x3ff921fb
 8016610:	54442d18 	.word	0x54442d18
 8016614:	3fe921fb 	.word	0x3fe921fb
 8016618:	08018320 	.word	0x08018320
 801661c:	08018338 	.word	0x08018338
 8016620:	54442d18 	.word	0x54442d18
 8016624:	c00921fb 	.word	0xc00921fb
 8016628:	54442d18 	.word	0x54442d18
 801662c:	bff921fb 	.word	0xbff921fb
 8016630:	7ff00000 	.word	0x7ff00000
 8016634:	00000000 	.word	0x00000000

08016638 <__ieee754_pow>:
 8016638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801663c:	ed2d 8b06 	vpush	{d8-d10}
 8016640:	b089      	sub	sp, #36	; 0x24
 8016642:	ed8d 1b00 	vstr	d1, [sp]
 8016646:	e9dd 2900 	ldrd	r2, r9, [sp]
 801664a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801664e:	ea58 0102 	orrs.w	r1, r8, r2
 8016652:	ec57 6b10 	vmov	r6, r7, d0
 8016656:	d115      	bne.n	8016684 <__ieee754_pow+0x4c>
 8016658:	19b3      	adds	r3, r6, r6
 801665a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801665e:	4152      	adcs	r2, r2
 8016660:	4299      	cmp	r1, r3
 8016662:	4b89      	ldr	r3, [pc, #548]	; (8016888 <__ieee754_pow+0x250>)
 8016664:	4193      	sbcs	r3, r2
 8016666:	f080 84d2 	bcs.w	801700e <__ieee754_pow+0x9d6>
 801666a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801666e:	4630      	mov	r0, r6
 8016670:	4639      	mov	r1, r7
 8016672:	f7e9 fe2b 	bl	80002cc <__adddf3>
 8016676:	ec41 0b10 	vmov	d0, r0, r1
 801667a:	b009      	add	sp, #36	; 0x24
 801667c:	ecbd 8b06 	vpop	{d8-d10}
 8016680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016684:	4b81      	ldr	r3, [pc, #516]	; (801688c <__ieee754_pow+0x254>)
 8016686:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801668a:	429c      	cmp	r4, r3
 801668c:	ee10 aa10 	vmov	sl, s0
 8016690:	463d      	mov	r5, r7
 8016692:	dc06      	bgt.n	80166a2 <__ieee754_pow+0x6a>
 8016694:	d101      	bne.n	801669a <__ieee754_pow+0x62>
 8016696:	2e00      	cmp	r6, #0
 8016698:	d1e7      	bne.n	801666a <__ieee754_pow+0x32>
 801669a:	4598      	cmp	r8, r3
 801669c:	dc01      	bgt.n	80166a2 <__ieee754_pow+0x6a>
 801669e:	d10f      	bne.n	80166c0 <__ieee754_pow+0x88>
 80166a0:	b172      	cbz	r2, 80166c0 <__ieee754_pow+0x88>
 80166a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80166a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80166aa:	ea55 050a 	orrs.w	r5, r5, sl
 80166ae:	d1dc      	bne.n	801666a <__ieee754_pow+0x32>
 80166b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80166b4:	18db      	adds	r3, r3, r3
 80166b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80166ba:	4152      	adcs	r2, r2
 80166bc:	429d      	cmp	r5, r3
 80166be:	e7d0      	b.n	8016662 <__ieee754_pow+0x2a>
 80166c0:	2d00      	cmp	r5, #0
 80166c2:	da3b      	bge.n	801673c <__ieee754_pow+0x104>
 80166c4:	4b72      	ldr	r3, [pc, #456]	; (8016890 <__ieee754_pow+0x258>)
 80166c6:	4598      	cmp	r8, r3
 80166c8:	dc51      	bgt.n	801676e <__ieee754_pow+0x136>
 80166ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80166ce:	4598      	cmp	r8, r3
 80166d0:	f340 84ac 	ble.w	801702c <__ieee754_pow+0x9f4>
 80166d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80166d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80166dc:	2b14      	cmp	r3, #20
 80166de:	dd0f      	ble.n	8016700 <__ieee754_pow+0xc8>
 80166e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80166e4:	fa22 f103 	lsr.w	r1, r2, r3
 80166e8:	fa01 f303 	lsl.w	r3, r1, r3
 80166ec:	4293      	cmp	r3, r2
 80166ee:	f040 849d 	bne.w	801702c <__ieee754_pow+0x9f4>
 80166f2:	f001 0101 	and.w	r1, r1, #1
 80166f6:	f1c1 0302 	rsb	r3, r1, #2
 80166fa:	9304      	str	r3, [sp, #16]
 80166fc:	b182      	cbz	r2, 8016720 <__ieee754_pow+0xe8>
 80166fe:	e05f      	b.n	80167c0 <__ieee754_pow+0x188>
 8016700:	2a00      	cmp	r2, #0
 8016702:	d15b      	bne.n	80167bc <__ieee754_pow+0x184>
 8016704:	f1c3 0314 	rsb	r3, r3, #20
 8016708:	fa48 f103 	asr.w	r1, r8, r3
 801670c:	fa01 f303 	lsl.w	r3, r1, r3
 8016710:	4543      	cmp	r3, r8
 8016712:	f040 8488 	bne.w	8017026 <__ieee754_pow+0x9ee>
 8016716:	f001 0101 	and.w	r1, r1, #1
 801671a:	f1c1 0302 	rsb	r3, r1, #2
 801671e:	9304      	str	r3, [sp, #16]
 8016720:	4b5c      	ldr	r3, [pc, #368]	; (8016894 <__ieee754_pow+0x25c>)
 8016722:	4598      	cmp	r8, r3
 8016724:	d132      	bne.n	801678c <__ieee754_pow+0x154>
 8016726:	f1b9 0f00 	cmp.w	r9, #0
 801672a:	f280 8478 	bge.w	801701e <__ieee754_pow+0x9e6>
 801672e:	4959      	ldr	r1, [pc, #356]	; (8016894 <__ieee754_pow+0x25c>)
 8016730:	4632      	mov	r2, r6
 8016732:	463b      	mov	r3, r7
 8016734:	2000      	movs	r0, #0
 8016736:	f7ea f8a9 	bl	800088c <__aeabi_ddiv>
 801673a:	e79c      	b.n	8016676 <__ieee754_pow+0x3e>
 801673c:	2300      	movs	r3, #0
 801673e:	9304      	str	r3, [sp, #16]
 8016740:	2a00      	cmp	r2, #0
 8016742:	d13d      	bne.n	80167c0 <__ieee754_pow+0x188>
 8016744:	4b51      	ldr	r3, [pc, #324]	; (801688c <__ieee754_pow+0x254>)
 8016746:	4598      	cmp	r8, r3
 8016748:	d1ea      	bne.n	8016720 <__ieee754_pow+0xe8>
 801674a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801674e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016752:	ea53 030a 	orrs.w	r3, r3, sl
 8016756:	f000 845a 	beq.w	801700e <__ieee754_pow+0x9d6>
 801675a:	4b4f      	ldr	r3, [pc, #316]	; (8016898 <__ieee754_pow+0x260>)
 801675c:	429c      	cmp	r4, r3
 801675e:	dd08      	ble.n	8016772 <__ieee754_pow+0x13a>
 8016760:	f1b9 0f00 	cmp.w	r9, #0
 8016764:	f2c0 8457 	blt.w	8017016 <__ieee754_pow+0x9de>
 8016768:	e9dd 0100 	ldrd	r0, r1, [sp]
 801676c:	e783      	b.n	8016676 <__ieee754_pow+0x3e>
 801676e:	2302      	movs	r3, #2
 8016770:	e7e5      	b.n	801673e <__ieee754_pow+0x106>
 8016772:	f1b9 0f00 	cmp.w	r9, #0
 8016776:	f04f 0000 	mov.w	r0, #0
 801677a:	f04f 0100 	mov.w	r1, #0
 801677e:	f6bf af7a 	bge.w	8016676 <__ieee754_pow+0x3e>
 8016782:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801678a:	e774      	b.n	8016676 <__ieee754_pow+0x3e>
 801678c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016790:	d106      	bne.n	80167a0 <__ieee754_pow+0x168>
 8016792:	4632      	mov	r2, r6
 8016794:	463b      	mov	r3, r7
 8016796:	4630      	mov	r0, r6
 8016798:	4639      	mov	r1, r7
 801679a:	f7e9 ff4d 	bl	8000638 <__aeabi_dmul>
 801679e:	e76a      	b.n	8016676 <__ieee754_pow+0x3e>
 80167a0:	4b3e      	ldr	r3, [pc, #248]	; (801689c <__ieee754_pow+0x264>)
 80167a2:	4599      	cmp	r9, r3
 80167a4:	d10c      	bne.n	80167c0 <__ieee754_pow+0x188>
 80167a6:	2d00      	cmp	r5, #0
 80167a8:	db0a      	blt.n	80167c0 <__ieee754_pow+0x188>
 80167aa:	ec47 6b10 	vmov	d0, r6, r7
 80167ae:	b009      	add	sp, #36	; 0x24
 80167b0:	ecbd 8b06 	vpop	{d8-d10}
 80167b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b8:	f000 bc6c 	b.w	8017094 <__ieee754_sqrt>
 80167bc:	2300      	movs	r3, #0
 80167be:	9304      	str	r3, [sp, #16]
 80167c0:	ec47 6b10 	vmov	d0, r6, r7
 80167c4:	f000 feec 	bl	80175a0 <fabs>
 80167c8:	ec51 0b10 	vmov	r0, r1, d0
 80167cc:	f1ba 0f00 	cmp.w	sl, #0
 80167d0:	d129      	bne.n	8016826 <__ieee754_pow+0x1ee>
 80167d2:	b124      	cbz	r4, 80167de <__ieee754_pow+0x1a6>
 80167d4:	4b2f      	ldr	r3, [pc, #188]	; (8016894 <__ieee754_pow+0x25c>)
 80167d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80167da:	429a      	cmp	r2, r3
 80167dc:	d123      	bne.n	8016826 <__ieee754_pow+0x1ee>
 80167de:	f1b9 0f00 	cmp.w	r9, #0
 80167e2:	da05      	bge.n	80167f0 <__ieee754_pow+0x1b8>
 80167e4:	4602      	mov	r2, r0
 80167e6:	460b      	mov	r3, r1
 80167e8:	2000      	movs	r0, #0
 80167ea:	492a      	ldr	r1, [pc, #168]	; (8016894 <__ieee754_pow+0x25c>)
 80167ec:	f7ea f84e 	bl	800088c <__aeabi_ddiv>
 80167f0:	2d00      	cmp	r5, #0
 80167f2:	f6bf af40 	bge.w	8016676 <__ieee754_pow+0x3e>
 80167f6:	9b04      	ldr	r3, [sp, #16]
 80167f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80167fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016800:	4323      	orrs	r3, r4
 8016802:	d108      	bne.n	8016816 <__ieee754_pow+0x1de>
 8016804:	4602      	mov	r2, r0
 8016806:	460b      	mov	r3, r1
 8016808:	4610      	mov	r0, r2
 801680a:	4619      	mov	r1, r3
 801680c:	f7e9 fd5c 	bl	80002c8 <__aeabi_dsub>
 8016810:	4602      	mov	r2, r0
 8016812:	460b      	mov	r3, r1
 8016814:	e78f      	b.n	8016736 <__ieee754_pow+0xfe>
 8016816:	9b04      	ldr	r3, [sp, #16]
 8016818:	2b01      	cmp	r3, #1
 801681a:	f47f af2c 	bne.w	8016676 <__ieee754_pow+0x3e>
 801681e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016822:	4619      	mov	r1, r3
 8016824:	e727      	b.n	8016676 <__ieee754_pow+0x3e>
 8016826:	0feb      	lsrs	r3, r5, #31
 8016828:	3b01      	subs	r3, #1
 801682a:	9306      	str	r3, [sp, #24]
 801682c:	9a06      	ldr	r2, [sp, #24]
 801682e:	9b04      	ldr	r3, [sp, #16]
 8016830:	4313      	orrs	r3, r2
 8016832:	d102      	bne.n	801683a <__ieee754_pow+0x202>
 8016834:	4632      	mov	r2, r6
 8016836:	463b      	mov	r3, r7
 8016838:	e7e6      	b.n	8016808 <__ieee754_pow+0x1d0>
 801683a:	4b19      	ldr	r3, [pc, #100]	; (80168a0 <__ieee754_pow+0x268>)
 801683c:	4598      	cmp	r8, r3
 801683e:	f340 80fb 	ble.w	8016a38 <__ieee754_pow+0x400>
 8016842:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016846:	4598      	cmp	r8, r3
 8016848:	4b13      	ldr	r3, [pc, #76]	; (8016898 <__ieee754_pow+0x260>)
 801684a:	dd0c      	ble.n	8016866 <__ieee754_pow+0x22e>
 801684c:	429c      	cmp	r4, r3
 801684e:	dc0f      	bgt.n	8016870 <__ieee754_pow+0x238>
 8016850:	f1b9 0f00 	cmp.w	r9, #0
 8016854:	da0f      	bge.n	8016876 <__ieee754_pow+0x23e>
 8016856:	2000      	movs	r0, #0
 8016858:	b009      	add	sp, #36	; 0x24
 801685a:	ecbd 8b06 	vpop	{d8-d10}
 801685e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016862:	f000 bcf3 	b.w	801724c <__math_oflow>
 8016866:	429c      	cmp	r4, r3
 8016868:	dbf2      	blt.n	8016850 <__ieee754_pow+0x218>
 801686a:	4b0a      	ldr	r3, [pc, #40]	; (8016894 <__ieee754_pow+0x25c>)
 801686c:	429c      	cmp	r4, r3
 801686e:	dd19      	ble.n	80168a4 <__ieee754_pow+0x26c>
 8016870:	f1b9 0f00 	cmp.w	r9, #0
 8016874:	dcef      	bgt.n	8016856 <__ieee754_pow+0x21e>
 8016876:	2000      	movs	r0, #0
 8016878:	b009      	add	sp, #36	; 0x24
 801687a:	ecbd 8b06 	vpop	{d8-d10}
 801687e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016882:	f000 bcda 	b.w	801723a <__math_uflow>
 8016886:	bf00      	nop
 8016888:	fff00000 	.word	0xfff00000
 801688c:	7ff00000 	.word	0x7ff00000
 8016890:	433fffff 	.word	0x433fffff
 8016894:	3ff00000 	.word	0x3ff00000
 8016898:	3fefffff 	.word	0x3fefffff
 801689c:	3fe00000 	.word	0x3fe00000
 80168a0:	41e00000 	.word	0x41e00000
 80168a4:	4b60      	ldr	r3, [pc, #384]	; (8016a28 <__ieee754_pow+0x3f0>)
 80168a6:	2200      	movs	r2, #0
 80168a8:	f7e9 fd0e 	bl	80002c8 <__aeabi_dsub>
 80168ac:	a354      	add	r3, pc, #336	; (adr r3, 8016a00 <__ieee754_pow+0x3c8>)
 80168ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b2:	4604      	mov	r4, r0
 80168b4:	460d      	mov	r5, r1
 80168b6:	f7e9 febf 	bl	8000638 <__aeabi_dmul>
 80168ba:	a353      	add	r3, pc, #332	; (adr r3, 8016a08 <__ieee754_pow+0x3d0>)
 80168bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c0:	4606      	mov	r6, r0
 80168c2:	460f      	mov	r7, r1
 80168c4:	4620      	mov	r0, r4
 80168c6:	4629      	mov	r1, r5
 80168c8:	f7e9 feb6 	bl	8000638 <__aeabi_dmul>
 80168cc:	4b57      	ldr	r3, [pc, #348]	; (8016a2c <__ieee754_pow+0x3f4>)
 80168ce:	4682      	mov	sl, r0
 80168d0:	468b      	mov	fp, r1
 80168d2:	2200      	movs	r2, #0
 80168d4:	4620      	mov	r0, r4
 80168d6:	4629      	mov	r1, r5
 80168d8:	f7e9 feae 	bl	8000638 <__aeabi_dmul>
 80168dc:	4602      	mov	r2, r0
 80168de:	460b      	mov	r3, r1
 80168e0:	a14b      	add	r1, pc, #300	; (adr r1, 8016a10 <__ieee754_pow+0x3d8>)
 80168e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e6:	f7e9 fcef 	bl	80002c8 <__aeabi_dsub>
 80168ea:	4622      	mov	r2, r4
 80168ec:	462b      	mov	r3, r5
 80168ee:	f7e9 fea3 	bl	8000638 <__aeabi_dmul>
 80168f2:	4602      	mov	r2, r0
 80168f4:	460b      	mov	r3, r1
 80168f6:	2000      	movs	r0, #0
 80168f8:	494d      	ldr	r1, [pc, #308]	; (8016a30 <__ieee754_pow+0x3f8>)
 80168fa:	f7e9 fce5 	bl	80002c8 <__aeabi_dsub>
 80168fe:	4622      	mov	r2, r4
 8016900:	4680      	mov	r8, r0
 8016902:	4689      	mov	r9, r1
 8016904:	462b      	mov	r3, r5
 8016906:	4620      	mov	r0, r4
 8016908:	4629      	mov	r1, r5
 801690a:	f7e9 fe95 	bl	8000638 <__aeabi_dmul>
 801690e:	4602      	mov	r2, r0
 8016910:	460b      	mov	r3, r1
 8016912:	4640      	mov	r0, r8
 8016914:	4649      	mov	r1, r9
 8016916:	f7e9 fe8f 	bl	8000638 <__aeabi_dmul>
 801691a:	a33f      	add	r3, pc, #252	; (adr r3, 8016a18 <__ieee754_pow+0x3e0>)
 801691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016920:	f7e9 fe8a 	bl	8000638 <__aeabi_dmul>
 8016924:	4602      	mov	r2, r0
 8016926:	460b      	mov	r3, r1
 8016928:	4650      	mov	r0, sl
 801692a:	4659      	mov	r1, fp
 801692c:	f7e9 fccc 	bl	80002c8 <__aeabi_dsub>
 8016930:	4602      	mov	r2, r0
 8016932:	460b      	mov	r3, r1
 8016934:	4680      	mov	r8, r0
 8016936:	4689      	mov	r9, r1
 8016938:	4630      	mov	r0, r6
 801693a:	4639      	mov	r1, r7
 801693c:	f7e9 fcc6 	bl	80002cc <__adddf3>
 8016940:	2000      	movs	r0, #0
 8016942:	4632      	mov	r2, r6
 8016944:	463b      	mov	r3, r7
 8016946:	4604      	mov	r4, r0
 8016948:	460d      	mov	r5, r1
 801694a:	f7e9 fcbd 	bl	80002c8 <__aeabi_dsub>
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	4640      	mov	r0, r8
 8016954:	4649      	mov	r1, r9
 8016956:	f7e9 fcb7 	bl	80002c8 <__aeabi_dsub>
 801695a:	9b04      	ldr	r3, [sp, #16]
 801695c:	9a06      	ldr	r2, [sp, #24]
 801695e:	3b01      	subs	r3, #1
 8016960:	4313      	orrs	r3, r2
 8016962:	4682      	mov	sl, r0
 8016964:	468b      	mov	fp, r1
 8016966:	f040 81e7 	bne.w	8016d38 <__ieee754_pow+0x700>
 801696a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016a20 <__ieee754_pow+0x3e8>
 801696e:	eeb0 8a47 	vmov.f32	s16, s14
 8016972:	eef0 8a67 	vmov.f32	s17, s15
 8016976:	e9dd 6700 	ldrd	r6, r7, [sp]
 801697a:	2600      	movs	r6, #0
 801697c:	4632      	mov	r2, r6
 801697e:	463b      	mov	r3, r7
 8016980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016984:	f7e9 fca0 	bl	80002c8 <__aeabi_dsub>
 8016988:	4622      	mov	r2, r4
 801698a:	462b      	mov	r3, r5
 801698c:	f7e9 fe54 	bl	8000638 <__aeabi_dmul>
 8016990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016994:	4680      	mov	r8, r0
 8016996:	4689      	mov	r9, r1
 8016998:	4650      	mov	r0, sl
 801699a:	4659      	mov	r1, fp
 801699c:	f7e9 fe4c 	bl	8000638 <__aeabi_dmul>
 80169a0:	4602      	mov	r2, r0
 80169a2:	460b      	mov	r3, r1
 80169a4:	4640      	mov	r0, r8
 80169a6:	4649      	mov	r1, r9
 80169a8:	f7e9 fc90 	bl	80002cc <__adddf3>
 80169ac:	4632      	mov	r2, r6
 80169ae:	463b      	mov	r3, r7
 80169b0:	4680      	mov	r8, r0
 80169b2:	4689      	mov	r9, r1
 80169b4:	4620      	mov	r0, r4
 80169b6:	4629      	mov	r1, r5
 80169b8:	f7e9 fe3e 	bl	8000638 <__aeabi_dmul>
 80169bc:	460b      	mov	r3, r1
 80169be:	4604      	mov	r4, r0
 80169c0:	460d      	mov	r5, r1
 80169c2:	4602      	mov	r2, r0
 80169c4:	4649      	mov	r1, r9
 80169c6:	4640      	mov	r0, r8
 80169c8:	f7e9 fc80 	bl	80002cc <__adddf3>
 80169cc:	4b19      	ldr	r3, [pc, #100]	; (8016a34 <__ieee754_pow+0x3fc>)
 80169ce:	4299      	cmp	r1, r3
 80169d0:	ec45 4b19 	vmov	d9, r4, r5
 80169d4:	4606      	mov	r6, r0
 80169d6:	460f      	mov	r7, r1
 80169d8:	468b      	mov	fp, r1
 80169da:	f340 82f1 	ble.w	8016fc0 <__ieee754_pow+0x988>
 80169de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80169e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80169e6:	4303      	orrs	r3, r0
 80169e8:	f000 81e4 	beq.w	8016db4 <__ieee754_pow+0x77c>
 80169ec:	ec51 0b18 	vmov	r0, r1, d8
 80169f0:	2200      	movs	r2, #0
 80169f2:	2300      	movs	r3, #0
 80169f4:	f7ea f892 	bl	8000b1c <__aeabi_dcmplt>
 80169f8:	3800      	subs	r0, #0
 80169fa:	bf18      	it	ne
 80169fc:	2001      	movne	r0, #1
 80169fe:	e72b      	b.n	8016858 <__ieee754_pow+0x220>
 8016a00:	60000000 	.word	0x60000000
 8016a04:	3ff71547 	.word	0x3ff71547
 8016a08:	f85ddf44 	.word	0xf85ddf44
 8016a0c:	3e54ae0b 	.word	0x3e54ae0b
 8016a10:	55555555 	.word	0x55555555
 8016a14:	3fd55555 	.word	0x3fd55555
 8016a18:	652b82fe 	.word	0x652b82fe
 8016a1c:	3ff71547 	.word	0x3ff71547
 8016a20:	00000000 	.word	0x00000000
 8016a24:	bff00000 	.word	0xbff00000
 8016a28:	3ff00000 	.word	0x3ff00000
 8016a2c:	3fd00000 	.word	0x3fd00000
 8016a30:	3fe00000 	.word	0x3fe00000
 8016a34:	408fffff 	.word	0x408fffff
 8016a38:	4bd5      	ldr	r3, [pc, #852]	; (8016d90 <__ieee754_pow+0x758>)
 8016a3a:	402b      	ands	r3, r5
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	b92b      	cbnz	r3, 8016a4c <__ieee754_pow+0x414>
 8016a40:	4bd4      	ldr	r3, [pc, #848]	; (8016d94 <__ieee754_pow+0x75c>)
 8016a42:	f7e9 fdf9 	bl	8000638 <__aeabi_dmul>
 8016a46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016a4a:	460c      	mov	r4, r1
 8016a4c:	1523      	asrs	r3, r4, #20
 8016a4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016a52:	4413      	add	r3, r2
 8016a54:	9305      	str	r3, [sp, #20]
 8016a56:	4bd0      	ldr	r3, [pc, #832]	; (8016d98 <__ieee754_pow+0x760>)
 8016a58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016a5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016a60:	429c      	cmp	r4, r3
 8016a62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a66:	dd08      	ble.n	8016a7a <__ieee754_pow+0x442>
 8016a68:	4bcc      	ldr	r3, [pc, #816]	; (8016d9c <__ieee754_pow+0x764>)
 8016a6a:	429c      	cmp	r4, r3
 8016a6c:	f340 8162 	ble.w	8016d34 <__ieee754_pow+0x6fc>
 8016a70:	9b05      	ldr	r3, [sp, #20]
 8016a72:	3301      	adds	r3, #1
 8016a74:	9305      	str	r3, [sp, #20]
 8016a76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016a7a:	2400      	movs	r4, #0
 8016a7c:	00e3      	lsls	r3, r4, #3
 8016a7e:	9307      	str	r3, [sp, #28]
 8016a80:	4bc7      	ldr	r3, [pc, #796]	; (8016da0 <__ieee754_pow+0x768>)
 8016a82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a86:	ed93 7b00 	vldr	d7, [r3]
 8016a8a:	4629      	mov	r1, r5
 8016a8c:	ec53 2b17 	vmov	r2, r3, d7
 8016a90:	eeb0 9a47 	vmov.f32	s18, s14
 8016a94:	eef0 9a67 	vmov.f32	s19, s15
 8016a98:	4682      	mov	sl, r0
 8016a9a:	f7e9 fc15 	bl	80002c8 <__aeabi_dsub>
 8016a9e:	4652      	mov	r2, sl
 8016aa0:	4606      	mov	r6, r0
 8016aa2:	460f      	mov	r7, r1
 8016aa4:	462b      	mov	r3, r5
 8016aa6:	ec51 0b19 	vmov	r0, r1, d9
 8016aaa:	f7e9 fc0f 	bl	80002cc <__adddf3>
 8016aae:	4602      	mov	r2, r0
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	2000      	movs	r0, #0
 8016ab4:	49bb      	ldr	r1, [pc, #748]	; (8016da4 <__ieee754_pow+0x76c>)
 8016ab6:	f7e9 fee9 	bl	800088c <__aeabi_ddiv>
 8016aba:	ec41 0b1a 	vmov	d10, r0, r1
 8016abe:	4602      	mov	r2, r0
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	4630      	mov	r0, r6
 8016ac4:	4639      	mov	r1, r7
 8016ac6:	f7e9 fdb7 	bl	8000638 <__aeabi_dmul>
 8016aca:	2300      	movs	r3, #0
 8016acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ad0:	9302      	str	r3, [sp, #8]
 8016ad2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016ad6:	46ab      	mov	fp, r5
 8016ad8:	106d      	asrs	r5, r5, #1
 8016ada:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016ade:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016ae2:	ec41 0b18 	vmov	d8, r0, r1
 8016ae6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016aea:	2200      	movs	r2, #0
 8016aec:	4640      	mov	r0, r8
 8016aee:	4649      	mov	r1, r9
 8016af0:	4614      	mov	r4, r2
 8016af2:	461d      	mov	r5, r3
 8016af4:	f7e9 fda0 	bl	8000638 <__aeabi_dmul>
 8016af8:	4602      	mov	r2, r0
 8016afa:	460b      	mov	r3, r1
 8016afc:	4630      	mov	r0, r6
 8016afe:	4639      	mov	r1, r7
 8016b00:	f7e9 fbe2 	bl	80002c8 <__aeabi_dsub>
 8016b04:	ec53 2b19 	vmov	r2, r3, d9
 8016b08:	4606      	mov	r6, r0
 8016b0a:	460f      	mov	r7, r1
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	4629      	mov	r1, r5
 8016b10:	f7e9 fbda 	bl	80002c8 <__aeabi_dsub>
 8016b14:	4602      	mov	r2, r0
 8016b16:	460b      	mov	r3, r1
 8016b18:	4650      	mov	r0, sl
 8016b1a:	4659      	mov	r1, fp
 8016b1c:	f7e9 fbd4 	bl	80002c8 <__aeabi_dsub>
 8016b20:	4642      	mov	r2, r8
 8016b22:	464b      	mov	r3, r9
 8016b24:	f7e9 fd88 	bl	8000638 <__aeabi_dmul>
 8016b28:	4602      	mov	r2, r0
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	4630      	mov	r0, r6
 8016b2e:	4639      	mov	r1, r7
 8016b30:	f7e9 fbca 	bl	80002c8 <__aeabi_dsub>
 8016b34:	ec53 2b1a 	vmov	r2, r3, d10
 8016b38:	f7e9 fd7e 	bl	8000638 <__aeabi_dmul>
 8016b3c:	ec53 2b18 	vmov	r2, r3, d8
 8016b40:	ec41 0b19 	vmov	d9, r0, r1
 8016b44:	ec51 0b18 	vmov	r0, r1, d8
 8016b48:	f7e9 fd76 	bl	8000638 <__aeabi_dmul>
 8016b4c:	a37c      	add	r3, pc, #496	; (adr r3, 8016d40 <__ieee754_pow+0x708>)
 8016b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b52:	4604      	mov	r4, r0
 8016b54:	460d      	mov	r5, r1
 8016b56:	f7e9 fd6f 	bl	8000638 <__aeabi_dmul>
 8016b5a:	a37b      	add	r3, pc, #492	; (adr r3, 8016d48 <__ieee754_pow+0x710>)
 8016b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b60:	f7e9 fbb4 	bl	80002cc <__adddf3>
 8016b64:	4622      	mov	r2, r4
 8016b66:	462b      	mov	r3, r5
 8016b68:	f7e9 fd66 	bl	8000638 <__aeabi_dmul>
 8016b6c:	a378      	add	r3, pc, #480	; (adr r3, 8016d50 <__ieee754_pow+0x718>)
 8016b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b72:	f7e9 fbab 	bl	80002cc <__adddf3>
 8016b76:	4622      	mov	r2, r4
 8016b78:	462b      	mov	r3, r5
 8016b7a:	f7e9 fd5d 	bl	8000638 <__aeabi_dmul>
 8016b7e:	a376      	add	r3, pc, #472	; (adr r3, 8016d58 <__ieee754_pow+0x720>)
 8016b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b84:	f7e9 fba2 	bl	80002cc <__adddf3>
 8016b88:	4622      	mov	r2, r4
 8016b8a:	462b      	mov	r3, r5
 8016b8c:	f7e9 fd54 	bl	8000638 <__aeabi_dmul>
 8016b90:	a373      	add	r3, pc, #460	; (adr r3, 8016d60 <__ieee754_pow+0x728>)
 8016b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b96:	f7e9 fb99 	bl	80002cc <__adddf3>
 8016b9a:	4622      	mov	r2, r4
 8016b9c:	462b      	mov	r3, r5
 8016b9e:	f7e9 fd4b 	bl	8000638 <__aeabi_dmul>
 8016ba2:	a371      	add	r3, pc, #452	; (adr r3, 8016d68 <__ieee754_pow+0x730>)
 8016ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba8:	f7e9 fb90 	bl	80002cc <__adddf3>
 8016bac:	4622      	mov	r2, r4
 8016bae:	4606      	mov	r6, r0
 8016bb0:	460f      	mov	r7, r1
 8016bb2:	462b      	mov	r3, r5
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	f7e9 fd3e 	bl	8000638 <__aeabi_dmul>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	4630      	mov	r0, r6
 8016bc2:	4639      	mov	r1, r7
 8016bc4:	f7e9 fd38 	bl	8000638 <__aeabi_dmul>
 8016bc8:	4642      	mov	r2, r8
 8016bca:	4604      	mov	r4, r0
 8016bcc:	460d      	mov	r5, r1
 8016bce:	464b      	mov	r3, r9
 8016bd0:	ec51 0b18 	vmov	r0, r1, d8
 8016bd4:	f7e9 fb7a 	bl	80002cc <__adddf3>
 8016bd8:	ec53 2b19 	vmov	r2, r3, d9
 8016bdc:	f7e9 fd2c 	bl	8000638 <__aeabi_dmul>
 8016be0:	4622      	mov	r2, r4
 8016be2:	462b      	mov	r3, r5
 8016be4:	f7e9 fb72 	bl	80002cc <__adddf3>
 8016be8:	4642      	mov	r2, r8
 8016bea:	4682      	mov	sl, r0
 8016bec:	468b      	mov	fp, r1
 8016bee:	464b      	mov	r3, r9
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	4649      	mov	r1, r9
 8016bf4:	f7e9 fd20 	bl	8000638 <__aeabi_dmul>
 8016bf8:	4b6b      	ldr	r3, [pc, #428]	; (8016da8 <__ieee754_pow+0x770>)
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	4606      	mov	r6, r0
 8016bfe:	460f      	mov	r7, r1
 8016c00:	f7e9 fb64 	bl	80002cc <__adddf3>
 8016c04:	4652      	mov	r2, sl
 8016c06:	465b      	mov	r3, fp
 8016c08:	f7e9 fb60 	bl	80002cc <__adddf3>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	4604      	mov	r4, r0
 8016c10:	460d      	mov	r5, r1
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	4640      	mov	r0, r8
 8016c18:	4649      	mov	r1, r9
 8016c1a:	f7e9 fd0d 	bl	8000638 <__aeabi_dmul>
 8016c1e:	4b62      	ldr	r3, [pc, #392]	; (8016da8 <__ieee754_pow+0x770>)
 8016c20:	4680      	mov	r8, r0
 8016c22:	4689      	mov	r9, r1
 8016c24:	2200      	movs	r2, #0
 8016c26:	4620      	mov	r0, r4
 8016c28:	4629      	mov	r1, r5
 8016c2a:	f7e9 fb4d 	bl	80002c8 <__aeabi_dsub>
 8016c2e:	4632      	mov	r2, r6
 8016c30:	463b      	mov	r3, r7
 8016c32:	f7e9 fb49 	bl	80002c8 <__aeabi_dsub>
 8016c36:	4602      	mov	r2, r0
 8016c38:	460b      	mov	r3, r1
 8016c3a:	4650      	mov	r0, sl
 8016c3c:	4659      	mov	r1, fp
 8016c3e:	f7e9 fb43 	bl	80002c8 <__aeabi_dsub>
 8016c42:	ec53 2b18 	vmov	r2, r3, d8
 8016c46:	f7e9 fcf7 	bl	8000638 <__aeabi_dmul>
 8016c4a:	4622      	mov	r2, r4
 8016c4c:	4606      	mov	r6, r0
 8016c4e:	460f      	mov	r7, r1
 8016c50:	462b      	mov	r3, r5
 8016c52:	ec51 0b19 	vmov	r0, r1, d9
 8016c56:	f7e9 fcef 	bl	8000638 <__aeabi_dmul>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	4630      	mov	r0, r6
 8016c60:	4639      	mov	r1, r7
 8016c62:	f7e9 fb33 	bl	80002cc <__adddf3>
 8016c66:	4606      	mov	r6, r0
 8016c68:	460f      	mov	r7, r1
 8016c6a:	4602      	mov	r2, r0
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	4640      	mov	r0, r8
 8016c70:	4649      	mov	r1, r9
 8016c72:	f7e9 fb2b 	bl	80002cc <__adddf3>
 8016c76:	a33e      	add	r3, pc, #248	; (adr r3, 8016d70 <__ieee754_pow+0x738>)
 8016c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	4604      	mov	r4, r0
 8016c80:	460d      	mov	r5, r1
 8016c82:	f7e9 fcd9 	bl	8000638 <__aeabi_dmul>
 8016c86:	4642      	mov	r2, r8
 8016c88:	ec41 0b18 	vmov	d8, r0, r1
 8016c8c:	464b      	mov	r3, r9
 8016c8e:	4620      	mov	r0, r4
 8016c90:	4629      	mov	r1, r5
 8016c92:	f7e9 fb19 	bl	80002c8 <__aeabi_dsub>
 8016c96:	4602      	mov	r2, r0
 8016c98:	460b      	mov	r3, r1
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	4639      	mov	r1, r7
 8016c9e:	f7e9 fb13 	bl	80002c8 <__aeabi_dsub>
 8016ca2:	a335      	add	r3, pc, #212	; (adr r3, 8016d78 <__ieee754_pow+0x740>)
 8016ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca8:	f7e9 fcc6 	bl	8000638 <__aeabi_dmul>
 8016cac:	a334      	add	r3, pc, #208	; (adr r3, 8016d80 <__ieee754_pow+0x748>)
 8016cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb2:	4606      	mov	r6, r0
 8016cb4:	460f      	mov	r7, r1
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	4629      	mov	r1, r5
 8016cba:	f7e9 fcbd 	bl	8000638 <__aeabi_dmul>
 8016cbe:	4602      	mov	r2, r0
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	4639      	mov	r1, r7
 8016cc6:	f7e9 fb01 	bl	80002cc <__adddf3>
 8016cca:	9a07      	ldr	r2, [sp, #28]
 8016ccc:	4b37      	ldr	r3, [pc, #220]	; (8016dac <__ieee754_pow+0x774>)
 8016cce:	4413      	add	r3, r2
 8016cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd4:	f7e9 fafa 	bl	80002cc <__adddf3>
 8016cd8:	4682      	mov	sl, r0
 8016cda:	9805      	ldr	r0, [sp, #20]
 8016cdc:	468b      	mov	fp, r1
 8016cde:	f7e9 fc41 	bl	8000564 <__aeabi_i2d>
 8016ce2:	9a07      	ldr	r2, [sp, #28]
 8016ce4:	4b32      	ldr	r3, [pc, #200]	; (8016db0 <__ieee754_pow+0x778>)
 8016ce6:	4413      	add	r3, r2
 8016ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016cec:	4606      	mov	r6, r0
 8016cee:	460f      	mov	r7, r1
 8016cf0:	4652      	mov	r2, sl
 8016cf2:	465b      	mov	r3, fp
 8016cf4:	ec51 0b18 	vmov	r0, r1, d8
 8016cf8:	f7e9 fae8 	bl	80002cc <__adddf3>
 8016cfc:	4642      	mov	r2, r8
 8016cfe:	464b      	mov	r3, r9
 8016d00:	f7e9 fae4 	bl	80002cc <__adddf3>
 8016d04:	4632      	mov	r2, r6
 8016d06:	463b      	mov	r3, r7
 8016d08:	f7e9 fae0 	bl	80002cc <__adddf3>
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	4632      	mov	r2, r6
 8016d10:	463b      	mov	r3, r7
 8016d12:	4604      	mov	r4, r0
 8016d14:	460d      	mov	r5, r1
 8016d16:	f7e9 fad7 	bl	80002c8 <__aeabi_dsub>
 8016d1a:	4642      	mov	r2, r8
 8016d1c:	464b      	mov	r3, r9
 8016d1e:	f7e9 fad3 	bl	80002c8 <__aeabi_dsub>
 8016d22:	ec53 2b18 	vmov	r2, r3, d8
 8016d26:	f7e9 facf 	bl	80002c8 <__aeabi_dsub>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	4650      	mov	r0, sl
 8016d30:	4659      	mov	r1, fp
 8016d32:	e610      	b.n	8016956 <__ieee754_pow+0x31e>
 8016d34:	2401      	movs	r4, #1
 8016d36:	e6a1      	b.n	8016a7c <__ieee754_pow+0x444>
 8016d38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016d88 <__ieee754_pow+0x750>
 8016d3c:	e617      	b.n	801696e <__ieee754_pow+0x336>
 8016d3e:	bf00      	nop
 8016d40:	4a454eef 	.word	0x4a454eef
 8016d44:	3fca7e28 	.word	0x3fca7e28
 8016d48:	93c9db65 	.word	0x93c9db65
 8016d4c:	3fcd864a 	.word	0x3fcd864a
 8016d50:	a91d4101 	.word	0xa91d4101
 8016d54:	3fd17460 	.word	0x3fd17460
 8016d58:	518f264d 	.word	0x518f264d
 8016d5c:	3fd55555 	.word	0x3fd55555
 8016d60:	db6fabff 	.word	0xdb6fabff
 8016d64:	3fdb6db6 	.word	0x3fdb6db6
 8016d68:	33333303 	.word	0x33333303
 8016d6c:	3fe33333 	.word	0x3fe33333
 8016d70:	e0000000 	.word	0xe0000000
 8016d74:	3feec709 	.word	0x3feec709
 8016d78:	dc3a03fd 	.word	0xdc3a03fd
 8016d7c:	3feec709 	.word	0x3feec709
 8016d80:	145b01f5 	.word	0x145b01f5
 8016d84:	be3e2fe0 	.word	0xbe3e2fe0
 8016d88:	00000000 	.word	0x00000000
 8016d8c:	3ff00000 	.word	0x3ff00000
 8016d90:	7ff00000 	.word	0x7ff00000
 8016d94:	43400000 	.word	0x43400000
 8016d98:	0003988e 	.word	0x0003988e
 8016d9c:	000bb679 	.word	0x000bb679
 8016da0:	08018350 	.word	0x08018350
 8016da4:	3ff00000 	.word	0x3ff00000
 8016da8:	40080000 	.word	0x40080000
 8016dac:	08018370 	.word	0x08018370
 8016db0:	08018360 	.word	0x08018360
 8016db4:	a3b5      	add	r3, pc, #724	; (adr r3, 801708c <__ieee754_pow+0xa54>)
 8016db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dba:	4640      	mov	r0, r8
 8016dbc:	4649      	mov	r1, r9
 8016dbe:	f7e9 fa85 	bl	80002cc <__adddf3>
 8016dc2:	4622      	mov	r2, r4
 8016dc4:	ec41 0b1a 	vmov	d10, r0, r1
 8016dc8:	462b      	mov	r3, r5
 8016dca:	4630      	mov	r0, r6
 8016dcc:	4639      	mov	r1, r7
 8016dce:	f7e9 fa7b 	bl	80002c8 <__aeabi_dsub>
 8016dd2:	4602      	mov	r2, r0
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	ec51 0b1a 	vmov	r0, r1, d10
 8016dda:	f7e9 febd 	bl	8000b58 <__aeabi_dcmpgt>
 8016dde:	2800      	cmp	r0, #0
 8016de0:	f47f ae04 	bne.w	80169ec <__ieee754_pow+0x3b4>
 8016de4:	4aa4      	ldr	r2, [pc, #656]	; (8017078 <__ieee754_pow+0xa40>)
 8016de6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016dea:	4293      	cmp	r3, r2
 8016dec:	f340 8108 	ble.w	8017000 <__ieee754_pow+0x9c8>
 8016df0:	151b      	asrs	r3, r3, #20
 8016df2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016df6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016dfa:	fa4a f303 	asr.w	r3, sl, r3
 8016dfe:	445b      	add	r3, fp
 8016e00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016e04:	4e9d      	ldr	r6, [pc, #628]	; (801707c <__ieee754_pow+0xa44>)
 8016e06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016e0a:	4116      	asrs	r6, r2
 8016e0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016e10:	2000      	movs	r0, #0
 8016e12:	ea23 0106 	bic.w	r1, r3, r6
 8016e16:	f1c2 0214 	rsb	r2, r2, #20
 8016e1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016e1e:	fa4a fa02 	asr.w	sl, sl, r2
 8016e22:	f1bb 0f00 	cmp.w	fp, #0
 8016e26:	4602      	mov	r2, r0
 8016e28:	460b      	mov	r3, r1
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	bfb8      	it	lt
 8016e30:	f1ca 0a00 	rsblt	sl, sl, #0
 8016e34:	f7e9 fa48 	bl	80002c8 <__aeabi_dsub>
 8016e38:	ec41 0b19 	vmov	d9, r0, r1
 8016e3c:	4642      	mov	r2, r8
 8016e3e:	464b      	mov	r3, r9
 8016e40:	ec51 0b19 	vmov	r0, r1, d9
 8016e44:	f7e9 fa42 	bl	80002cc <__adddf3>
 8016e48:	a37b      	add	r3, pc, #492	; (adr r3, 8017038 <__ieee754_pow+0xa00>)
 8016e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4e:	2000      	movs	r0, #0
 8016e50:	4604      	mov	r4, r0
 8016e52:	460d      	mov	r5, r1
 8016e54:	f7e9 fbf0 	bl	8000638 <__aeabi_dmul>
 8016e58:	ec53 2b19 	vmov	r2, r3, d9
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	460f      	mov	r7, r1
 8016e60:	4620      	mov	r0, r4
 8016e62:	4629      	mov	r1, r5
 8016e64:	f7e9 fa30 	bl	80002c8 <__aeabi_dsub>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	460b      	mov	r3, r1
 8016e6c:	4640      	mov	r0, r8
 8016e6e:	4649      	mov	r1, r9
 8016e70:	f7e9 fa2a 	bl	80002c8 <__aeabi_dsub>
 8016e74:	a372      	add	r3, pc, #456	; (adr r3, 8017040 <__ieee754_pow+0xa08>)
 8016e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7a:	f7e9 fbdd 	bl	8000638 <__aeabi_dmul>
 8016e7e:	a372      	add	r3, pc, #456	; (adr r3, 8017048 <__ieee754_pow+0xa10>)
 8016e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e84:	4680      	mov	r8, r0
 8016e86:	4689      	mov	r9, r1
 8016e88:	4620      	mov	r0, r4
 8016e8a:	4629      	mov	r1, r5
 8016e8c:	f7e9 fbd4 	bl	8000638 <__aeabi_dmul>
 8016e90:	4602      	mov	r2, r0
 8016e92:	460b      	mov	r3, r1
 8016e94:	4640      	mov	r0, r8
 8016e96:	4649      	mov	r1, r9
 8016e98:	f7e9 fa18 	bl	80002cc <__adddf3>
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	460d      	mov	r5, r1
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	460b      	mov	r3, r1
 8016ea4:	4630      	mov	r0, r6
 8016ea6:	4639      	mov	r1, r7
 8016ea8:	f7e9 fa10 	bl	80002cc <__adddf3>
 8016eac:	4632      	mov	r2, r6
 8016eae:	463b      	mov	r3, r7
 8016eb0:	4680      	mov	r8, r0
 8016eb2:	4689      	mov	r9, r1
 8016eb4:	f7e9 fa08 	bl	80002c8 <__aeabi_dsub>
 8016eb8:	4602      	mov	r2, r0
 8016eba:	460b      	mov	r3, r1
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	4629      	mov	r1, r5
 8016ec0:	f7e9 fa02 	bl	80002c8 <__aeabi_dsub>
 8016ec4:	4642      	mov	r2, r8
 8016ec6:	4606      	mov	r6, r0
 8016ec8:	460f      	mov	r7, r1
 8016eca:	464b      	mov	r3, r9
 8016ecc:	4640      	mov	r0, r8
 8016ece:	4649      	mov	r1, r9
 8016ed0:	f7e9 fbb2 	bl	8000638 <__aeabi_dmul>
 8016ed4:	a35e      	add	r3, pc, #376	; (adr r3, 8017050 <__ieee754_pow+0xa18>)
 8016ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eda:	4604      	mov	r4, r0
 8016edc:	460d      	mov	r5, r1
 8016ede:	f7e9 fbab 	bl	8000638 <__aeabi_dmul>
 8016ee2:	a35d      	add	r3, pc, #372	; (adr r3, 8017058 <__ieee754_pow+0xa20>)
 8016ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee8:	f7e9 f9ee 	bl	80002c8 <__aeabi_dsub>
 8016eec:	4622      	mov	r2, r4
 8016eee:	462b      	mov	r3, r5
 8016ef0:	f7e9 fba2 	bl	8000638 <__aeabi_dmul>
 8016ef4:	a35a      	add	r3, pc, #360	; (adr r3, 8017060 <__ieee754_pow+0xa28>)
 8016ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016efa:	f7e9 f9e7 	bl	80002cc <__adddf3>
 8016efe:	4622      	mov	r2, r4
 8016f00:	462b      	mov	r3, r5
 8016f02:	f7e9 fb99 	bl	8000638 <__aeabi_dmul>
 8016f06:	a358      	add	r3, pc, #352	; (adr r3, 8017068 <__ieee754_pow+0xa30>)
 8016f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f0c:	f7e9 f9dc 	bl	80002c8 <__aeabi_dsub>
 8016f10:	4622      	mov	r2, r4
 8016f12:	462b      	mov	r3, r5
 8016f14:	f7e9 fb90 	bl	8000638 <__aeabi_dmul>
 8016f18:	a355      	add	r3, pc, #340	; (adr r3, 8017070 <__ieee754_pow+0xa38>)
 8016f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1e:	f7e9 f9d5 	bl	80002cc <__adddf3>
 8016f22:	4622      	mov	r2, r4
 8016f24:	462b      	mov	r3, r5
 8016f26:	f7e9 fb87 	bl	8000638 <__aeabi_dmul>
 8016f2a:	4602      	mov	r2, r0
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	4640      	mov	r0, r8
 8016f30:	4649      	mov	r1, r9
 8016f32:	f7e9 f9c9 	bl	80002c8 <__aeabi_dsub>
 8016f36:	4604      	mov	r4, r0
 8016f38:	460d      	mov	r5, r1
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	4640      	mov	r0, r8
 8016f40:	4649      	mov	r1, r9
 8016f42:	f7e9 fb79 	bl	8000638 <__aeabi_dmul>
 8016f46:	2200      	movs	r2, #0
 8016f48:	ec41 0b19 	vmov	d9, r0, r1
 8016f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f50:	4620      	mov	r0, r4
 8016f52:	4629      	mov	r1, r5
 8016f54:	f7e9 f9b8 	bl	80002c8 <__aeabi_dsub>
 8016f58:	4602      	mov	r2, r0
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	ec51 0b19 	vmov	r0, r1, d9
 8016f60:	f7e9 fc94 	bl	800088c <__aeabi_ddiv>
 8016f64:	4632      	mov	r2, r6
 8016f66:	4604      	mov	r4, r0
 8016f68:	460d      	mov	r5, r1
 8016f6a:	463b      	mov	r3, r7
 8016f6c:	4640      	mov	r0, r8
 8016f6e:	4649      	mov	r1, r9
 8016f70:	f7e9 fb62 	bl	8000638 <__aeabi_dmul>
 8016f74:	4632      	mov	r2, r6
 8016f76:	463b      	mov	r3, r7
 8016f78:	f7e9 f9a8 	bl	80002cc <__adddf3>
 8016f7c:	4602      	mov	r2, r0
 8016f7e:	460b      	mov	r3, r1
 8016f80:	4620      	mov	r0, r4
 8016f82:	4629      	mov	r1, r5
 8016f84:	f7e9 f9a0 	bl	80002c8 <__aeabi_dsub>
 8016f88:	4642      	mov	r2, r8
 8016f8a:	464b      	mov	r3, r9
 8016f8c:	f7e9 f99c 	bl	80002c8 <__aeabi_dsub>
 8016f90:	460b      	mov	r3, r1
 8016f92:	4602      	mov	r2, r0
 8016f94:	493a      	ldr	r1, [pc, #232]	; (8017080 <__ieee754_pow+0xa48>)
 8016f96:	2000      	movs	r0, #0
 8016f98:	f7e9 f996 	bl	80002c8 <__aeabi_dsub>
 8016f9c:	ec41 0b10 	vmov	d0, r0, r1
 8016fa0:	ee10 3a90 	vmov	r3, s1
 8016fa4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016fac:	da2b      	bge.n	8017006 <__ieee754_pow+0x9ce>
 8016fae:	4650      	mov	r0, sl
 8016fb0:	f000 fb0a 	bl	80175c8 <scalbn>
 8016fb4:	ec51 0b10 	vmov	r0, r1, d0
 8016fb8:	ec53 2b18 	vmov	r2, r3, d8
 8016fbc:	f7ff bbed 	b.w	801679a <__ieee754_pow+0x162>
 8016fc0:	4b30      	ldr	r3, [pc, #192]	; (8017084 <__ieee754_pow+0xa4c>)
 8016fc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016fc6:	429e      	cmp	r6, r3
 8016fc8:	f77f af0c 	ble.w	8016de4 <__ieee754_pow+0x7ac>
 8016fcc:	4b2e      	ldr	r3, [pc, #184]	; (8017088 <__ieee754_pow+0xa50>)
 8016fce:	440b      	add	r3, r1
 8016fd0:	4303      	orrs	r3, r0
 8016fd2:	d009      	beq.n	8016fe8 <__ieee754_pow+0x9b0>
 8016fd4:	ec51 0b18 	vmov	r0, r1, d8
 8016fd8:	2200      	movs	r2, #0
 8016fda:	2300      	movs	r3, #0
 8016fdc:	f7e9 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 8016fe0:	3800      	subs	r0, #0
 8016fe2:	bf18      	it	ne
 8016fe4:	2001      	movne	r0, #1
 8016fe6:	e447      	b.n	8016878 <__ieee754_pow+0x240>
 8016fe8:	4622      	mov	r2, r4
 8016fea:	462b      	mov	r3, r5
 8016fec:	f7e9 f96c 	bl	80002c8 <__aeabi_dsub>
 8016ff0:	4642      	mov	r2, r8
 8016ff2:	464b      	mov	r3, r9
 8016ff4:	f7e9 fda6 	bl	8000b44 <__aeabi_dcmpge>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	f43f aef3 	beq.w	8016de4 <__ieee754_pow+0x7ac>
 8016ffe:	e7e9      	b.n	8016fd4 <__ieee754_pow+0x99c>
 8017000:	f04f 0a00 	mov.w	sl, #0
 8017004:	e71a      	b.n	8016e3c <__ieee754_pow+0x804>
 8017006:	ec51 0b10 	vmov	r0, r1, d0
 801700a:	4619      	mov	r1, r3
 801700c:	e7d4      	b.n	8016fb8 <__ieee754_pow+0x980>
 801700e:	491c      	ldr	r1, [pc, #112]	; (8017080 <__ieee754_pow+0xa48>)
 8017010:	2000      	movs	r0, #0
 8017012:	f7ff bb30 	b.w	8016676 <__ieee754_pow+0x3e>
 8017016:	2000      	movs	r0, #0
 8017018:	2100      	movs	r1, #0
 801701a:	f7ff bb2c 	b.w	8016676 <__ieee754_pow+0x3e>
 801701e:	4630      	mov	r0, r6
 8017020:	4639      	mov	r1, r7
 8017022:	f7ff bb28 	b.w	8016676 <__ieee754_pow+0x3e>
 8017026:	9204      	str	r2, [sp, #16]
 8017028:	f7ff bb7a 	b.w	8016720 <__ieee754_pow+0xe8>
 801702c:	2300      	movs	r3, #0
 801702e:	f7ff bb64 	b.w	80166fa <__ieee754_pow+0xc2>
 8017032:	bf00      	nop
 8017034:	f3af 8000 	nop.w
 8017038:	00000000 	.word	0x00000000
 801703c:	3fe62e43 	.word	0x3fe62e43
 8017040:	fefa39ef 	.word	0xfefa39ef
 8017044:	3fe62e42 	.word	0x3fe62e42
 8017048:	0ca86c39 	.word	0x0ca86c39
 801704c:	be205c61 	.word	0xbe205c61
 8017050:	72bea4d0 	.word	0x72bea4d0
 8017054:	3e663769 	.word	0x3e663769
 8017058:	c5d26bf1 	.word	0xc5d26bf1
 801705c:	3ebbbd41 	.word	0x3ebbbd41
 8017060:	af25de2c 	.word	0xaf25de2c
 8017064:	3f11566a 	.word	0x3f11566a
 8017068:	16bebd93 	.word	0x16bebd93
 801706c:	3f66c16c 	.word	0x3f66c16c
 8017070:	5555553e 	.word	0x5555553e
 8017074:	3fc55555 	.word	0x3fc55555
 8017078:	3fe00000 	.word	0x3fe00000
 801707c:	000fffff 	.word	0x000fffff
 8017080:	3ff00000 	.word	0x3ff00000
 8017084:	4090cbff 	.word	0x4090cbff
 8017088:	3f6f3400 	.word	0x3f6f3400
 801708c:	652b82fe 	.word	0x652b82fe
 8017090:	3c971547 	.word	0x3c971547

08017094 <__ieee754_sqrt>:
 8017094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017098:	ec55 4b10 	vmov	r4, r5, d0
 801709c:	4e55      	ldr	r6, [pc, #340]	; (80171f4 <__ieee754_sqrt+0x160>)
 801709e:	43ae      	bics	r6, r5
 80170a0:	ee10 0a10 	vmov	r0, s0
 80170a4:	ee10 3a10 	vmov	r3, s0
 80170a8:	462a      	mov	r2, r5
 80170aa:	4629      	mov	r1, r5
 80170ac:	d110      	bne.n	80170d0 <__ieee754_sqrt+0x3c>
 80170ae:	ee10 2a10 	vmov	r2, s0
 80170b2:	462b      	mov	r3, r5
 80170b4:	f7e9 fac0 	bl	8000638 <__aeabi_dmul>
 80170b8:	4602      	mov	r2, r0
 80170ba:	460b      	mov	r3, r1
 80170bc:	4620      	mov	r0, r4
 80170be:	4629      	mov	r1, r5
 80170c0:	f7e9 f904 	bl	80002cc <__adddf3>
 80170c4:	4604      	mov	r4, r0
 80170c6:	460d      	mov	r5, r1
 80170c8:	ec45 4b10 	vmov	d0, r4, r5
 80170cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170d0:	2d00      	cmp	r5, #0
 80170d2:	dc10      	bgt.n	80170f6 <__ieee754_sqrt+0x62>
 80170d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80170d8:	4330      	orrs	r0, r6
 80170da:	d0f5      	beq.n	80170c8 <__ieee754_sqrt+0x34>
 80170dc:	b15d      	cbz	r5, 80170f6 <__ieee754_sqrt+0x62>
 80170de:	ee10 2a10 	vmov	r2, s0
 80170e2:	462b      	mov	r3, r5
 80170e4:	ee10 0a10 	vmov	r0, s0
 80170e8:	f7e9 f8ee 	bl	80002c8 <__aeabi_dsub>
 80170ec:	4602      	mov	r2, r0
 80170ee:	460b      	mov	r3, r1
 80170f0:	f7e9 fbcc 	bl	800088c <__aeabi_ddiv>
 80170f4:	e7e6      	b.n	80170c4 <__ieee754_sqrt+0x30>
 80170f6:	1512      	asrs	r2, r2, #20
 80170f8:	d074      	beq.n	80171e4 <__ieee754_sqrt+0x150>
 80170fa:	07d4      	lsls	r4, r2, #31
 80170fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8017100:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8017104:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8017108:	bf5e      	ittt	pl
 801710a:	0fda      	lsrpl	r2, r3, #31
 801710c:	005b      	lslpl	r3, r3, #1
 801710e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8017112:	2400      	movs	r4, #0
 8017114:	0fda      	lsrs	r2, r3, #31
 8017116:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801711a:	107f      	asrs	r7, r7, #1
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	2516      	movs	r5, #22
 8017120:	4620      	mov	r0, r4
 8017122:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017126:	1886      	adds	r6, r0, r2
 8017128:	428e      	cmp	r6, r1
 801712a:	bfde      	ittt	le
 801712c:	1b89      	suble	r1, r1, r6
 801712e:	18b0      	addle	r0, r6, r2
 8017130:	18a4      	addle	r4, r4, r2
 8017132:	0049      	lsls	r1, r1, #1
 8017134:	3d01      	subs	r5, #1
 8017136:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801713a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801713e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017142:	d1f0      	bne.n	8017126 <__ieee754_sqrt+0x92>
 8017144:	462a      	mov	r2, r5
 8017146:	f04f 0e20 	mov.w	lr, #32
 801714a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801714e:	4281      	cmp	r1, r0
 8017150:	eb06 0c05 	add.w	ip, r6, r5
 8017154:	dc02      	bgt.n	801715c <__ieee754_sqrt+0xc8>
 8017156:	d113      	bne.n	8017180 <__ieee754_sqrt+0xec>
 8017158:	459c      	cmp	ip, r3
 801715a:	d811      	bhi.n	8017180 <__ieee754_sqrt+0xec>
 801715c:	f1bc 0f00 	cmp.w	ip, #0
 8017160:	eb0c 0506 	add.w	r5, ip, r6
 8017164:	da43      	bge.n	80171ee <__ieee754_sqrt+0x15a>
 8017166:	2d00      	cmp	r5, #0
 8017168:	db41      	blt.n	80171ee <__ieee754_sqrt+0x15a>
 801716a:	f100 0801 	add.w	r8, r0, #1
 801716e:	1a09      	subs	r1, r1, r0
 8017170:	459c      	cmp	ip, r3
 8017172:	bf88      	it	hi
 8017174:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8017178:	eba3 030c 	sub.w	r3, r3, ip
 801717c:	4432      	add	r2, r6
 801717e:	4640      	mov	r0, r8
 8017180:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8017184:	f1be 0e01 	subs.w	lr, lr, #1
 8017188:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801718c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017190:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017194:	d1db      	bne.n	801714e <__ieee754_sqrt+0xba>
 8017196:	430b      	orrs	r3, r1
 8017198:	d006      	beq.n	80171a8 <__ieee754_sqrt+0x114>
 801719a:	1c50      	adds	r0, r2, #1
 801719c:	bf13      	iteet	ne
 801719e:	3201      	addne	r2, #1
 80171a0:	3401      	addeq	r4, #1
 80171a2:	4672      	moveq	r2, lr
 80171a4:	f022 0201 	bicne.w	r2, r2, #1
 80171a8:	1063      	asrs	r3, r4, #1
 80171aa:	0852      	lsrs	r2, r2, #1
 80171ac:	07e1      	lsls	r1, r4, #31
 80171ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80171b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80171b6:	bf48      	it	mi
 80171b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80171bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80171c0:	4614      	mov	r4, r2
 80171c2:	e781      	b.n	80170c8 <__ieee754_sqrt+0x34>
 80171c4:	0ad9      	lsrs	r1, r3, #11
 80171c6:	3815      	subs	r0, #21
 80171c8:	055b      	lsls	r3, r3, #21
 80171ca:	2900      	cmp	r1, #0
 80171cc:	d0fa      	beq.n	80171c4 <__ieee754_sqrt+0x130>
 80171ce:	02cd      	lsls	r5, r1, #11
 80171d0:	d50a      	bpl.n	80171e8 <__ieee754_sqrt+0x154>
 80171d2:	f1c2 0420 	rsb	r4, r2, #32
 80171d6:	fa23 f404 	lsr.w	r4, r3, r4
 80171da:	1e55      	subs	r5, r2, #1
 80171dc:	4093      	lsls	r3, r2
 80171de:	4321      	orrs	r1, r4
 80171e0:	1b42      	subs	r2, r0, r5
 80171e2:	e78a      	b.n	80170fa <__ieee754_sqrt+0x66>
 80171e4:	4610      	mov	r0, r2
 80171e6:	e7f0      	b.n	80171ca <__ieee754_sqrt+0x136>
 80171e8:	0049      	lsls	r1, r1, #1
 80171ea:	3201      	adds	r2, #1
 80171ec:	e7ef      	b.n	80171ce <__ieee754_sqrt+0x13a>
 80171ee:	4680      	mov	r8, r0
 80171f0:	e7bd      	b.n	801716e <__ieee754_sqrt+0xda>
 80171f2:	bf00      	nop
 80171f4:	7ff00000 	.word	0x7ff00000

080171f8 <__ieee754_sqrtf>:
 80171f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80171fc:	4770      	bx	lr

080171fe <with_errno>:
 80171fe:	b570      	push	{r4, r5, r6, lr}
 8017200:	4604      	mov	r4, r0
 8017202:	460d      	mov	r5, r1
 8017204:	4616      	mov	r6, r2
 8017206:	f7f9 fab7 	bl	8010778 <__errno>
 801720a:	4629      	mov	r1, r5
 801720c:	6006      	str	r6, [r0, #0]
 801720e:	4620      	mov	r0, r4
 8017210:	bd70      	pop	{r4, r5, r6, pc}

08017212 <xflow>:
 8017212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017214:	4614      	mov	r4, r2
 8017216:	461d      	mov	r5, r3
 8017218:	b108      	cbz	r0, 801721e <xflow+0xc>
 801721a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801721e:	e9cd 2300 	strd	r2, r3, [sp]
 8017222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017226:	4620      	mov	r0, r4
 8017228:	4629      	mov	r1, r5
 801722a:	f7e9 fa05 	bl	8000638 <__aeabi_dmul>
 801722e:	2222      	movs	r2, #34	; 0x22
 8017230:	b003      	add	sp, #12
 8017232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017236:	f7ff bfe2 	b.w	80171fe <with_errno>

0801723a <__math_uflow>:
 801723a:	b508      	push	{r3, lr}
 801723c:	2200      	movs	r2, #0
 801723e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017242:	f7ff ffe6 	bl	8017212 <xflow>
 8017246:	ec41 0b10 	vmov	d0, r0, r1
 801724a:	bd08      	pop	{r3, pc}

0801724c <__math_oflow>:
 801724c:	b508      	push	{r3, lr}
 801724e:	2200      	movs	r2, #0
 8017250:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017254:	f7ff ffdd 	bl	8017212 <xflow>
 8017258:	ec41 0b10 	vmov	d0, r0, r1
 801725c:	bd08      	pop	{r3, pc}
	...

08017260 <atan>:
 8017260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	ec55 4b10 	vmov	r4, r5, d0
 8017268:	4bc3      	ldr	r3, [pc, #780]	; (8017578 <atan+0x318>)
 801726a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801726e:	429e      	cmp	r6, r3
 8017270:	46ab      	mov	fp, r5
 8017272:	dd18      	ble.n	80172a6 <atan+0x46>
 8017274:	4bc1      	ldr	r3, [pc, #772]	; (801757c <atan+0x31c>)
 8017276:	429e      	cmp	r6, r3
 8017278:	dc01      	bgt.n	801727e <atan+0x1e>
 801727a:	d109      	bne.n	8017290 <atan+0x30>
 801727c:	b144      	cbz	r4, 8017290 <atan+0x30>
 801727e:	4622      	mov	r2, r4
 8017280:	462b      	mov	r3, r5
 8017282:	4620      	mov	r0, r4
 8017284:	4629      	mov	r1, r5
 8017286:	f7e9 f821 	bl	80002cc <__adddf3>
 801728a:	4604      	mov	r4, r0
 801728c:	460d      	mov	r5, r1
 801728e:	e006      	b.n	801729e <atan+0x3e>
 8017290:	f1bb 0f00 	cmp.w	fp, #0
 8017294:	f300 8131 	bgt.w	80174fa <atan+0x29a>
 8017298:	a59b      	add	r5, pc, #620	; (adr r5, 8017508 <atan+0x2a8>)
 801729a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801729e:	ec45 4b10 	vmov	d0, r4, r5
 80172a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a6:	4bb6      	ldr	r3, [pc, #728]	; (8017580 <atan+0x320>)
 80172a8:	429e      	cmp	r6, r3
 80172aa:	dc14      	bgt.n	80172d6 <atan+0x76>
 80172ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80172b0:	429e      	cmp	r6, r3
 80172b2:	dc0d      	bgt.n	80172d0 <atan+0x70>
 80172b4:	a396      	add	r3, pc, #600	; (adr r3, 8017510 <atan+0x2b0>)
 80172b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ba:	ee10 0a10 	vmov	r0, s0
 80172be:	4629      	mov	r1, r5
 80172c0:	f7e9 f804 	bl	80002cc <__adddf3>
 80172c4:	4baf      	ldr	r3, [pc, #700]	; (8017584 <atan+0x324>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	f7e9 fc46 	bl	8000b58 <__aeabi_dcmpgt>
 80172cc:	2800      	cmp	r0, #0
 80172ce:	d1e6      	bne.n	801729e <atan+0x3e>
 80172d0:	f04f 3aff 	mov.w	sl, #4294967295
 80172d4:	e02b      	b.n	801732e <atan+0xce>
 80172d6:	f000 f963 	bl	80175a0 <fabs>
 80172da:	4bab      	ldr	r3, [pc, #684]	; (8017588 <atan+0x328>)
 80172dc:	429e      	cmp	r6, r3
 80172de:	ec55 4b10 	vmov	r4, r5, d0
 80172e2:	f300 80bf 	bgt.w	8017464 <atan+0x204>
 80172e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80172ea:	429e      	cmp	r6, r3
 80172ec:	f300 80a0 	bgt.w	8017430 <atan+0x1d0>
 80172f0:	ee10 2a10 	vmov	r2, s0
 80172f4:	ee10 0a10 	vmov	r0, s0
 80172f8:	462b      	mov	r3, r5
 80172fa:	4629      	mov	r1, r5
 80172fc:	f7e8 ffe6 	bl	80002cc <__adddf3>
 8017300:	4ba0      	ldr	r3, [pc, #640]	; (8017584 <atan+0x324>)
 8017302:	2200      	movs	r2, #0
 8017304:	f7e8 ffe0 	bl	80002c8 <__aeabi_dsub>
 8017308:	2200      	movs	r2, #0
 801730a:	4606      	mov	r6, r0
 801730c:	460f      	mov	r7, r1
 801730e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017312:	4620      	mov	r0, r4
 8017314:	4629      	mov	r1, r5
 8017316:	f7e8 ffd9 	bl	80002cc <__adddf3>
 801731a:	4602      	mov	r2, r0
 801731c:	460b      	mov	r3, r1
 801731e:	4630      	mov	r0, r6
 8017320:	4639      	mov	r1, r7
 8017322:	f7e9 fab3 	bl	800088c <__aeabi_ddiv>
 8017326:	f04f 0a00 	mov.w	sl, #0
 801732a:	4604      	mov	r4, r0
 801732c:	460d      	mov	r5, r1
 801732e:	4622      	mov	r2, r4
 8017330:	462b      	mov	r3, r5
 8017332:	4620      	mov	r0, r4
 8017334:	4629      	mov	r1, r5
 8017336:	f7e9 f97f 	bl	8000638 <__aeabi_dmul>
 801733a:	4602      	mov	r2, r0
 801733c:	460b      	mov	r3, r1
 801733e:	4680      	mov	r8, r0
 8017340:	4689      	mov	r9, r1
 8017342:	f7e9 f979 	bl	8000638 <__aeabi_dmul>
 8017346:	a374      	add	r3, pc, #464	; (adr r3, 8017518 <atan+0x2b8>)
 8017348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734c:	4606      	mov	r6, r0
 801734e:	460f      	mov	r7, r1
 8017350:	f7e9 f972 	bl	8000638 <__aeabi_dmul>
 8017354:	a372      	add	r3, pc, #456	; (adr r3, 8017520 <atan+0x2c0>)
 8017356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801735a:	f7e8 ffb7 	bl	80002cc <__adddf3>
 801735e:	4632      	mov	r2, r6
 8017360:	463b      	mov	r3, r7
 8017362:	f7e9 f969 	bl	8000638 <__aeabi_dmul>
 8017366:	a370      	add	r3, pc, #448	; (adr r3, 8017528 <atan+0x2c8>)
 8017368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736c:	f7e8 ffae 	bl	80002cc <__adddf3>
 8017370:	4632      	mov	r2, r6
 8017372:	463b      	mov	r3, r7
 8017374:	f7e9 f960 	bl	8000638 <__aeabi_dmul>
 8017378:	a36d      	add	r3, pc, #436	; (adr r3, 8017530 <atan+0x2d0>)
 801737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737e:	f7e8 ffa5 	bl	80002cc <__adddf3>
 8017382:	4632      	mov	r2, r6
 8017384:	463b      	mov	r3, r7
 8017386:	f7e9 f957 	bl	8000638 <__aeabi_dmul>
 801738a:	a36b      	add	r3, pc, #428	; (adr r3, 8017538 <atan+0x2d8>)
 801738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017390:	f7e8 ff9c 	bl	80002cc <__adddf3>
 8017394:	4632      	mov	r2, r6
 8017396:	463b      	mov	r3, r7
 8017398:	f7e9 f94e 	bl	8000638 <__aeabi_dmul>
 801739c:	a368      	add	r3, pc, #416	; (adr r3, 8017540 <atan+0x2e0>)
 801739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a2:	f7e8 ff93 	bl	80002cc <__adddf3>
 80173a6:	4642      	mov	r2, r8
 80173a8:	464b      	mov	r3, r9
 80173aa:	f7e9 f945 	bl	8000638 <__aeabi_dmul>
 80173ae:	a366      	add	r3, pc, #408	; (adr r3, 8017548 <atan+0x2e8>)
 80173b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b4:	4680      	mov	r8, r0
 80173b6:	4689      	mov	r9, r1
 80173b8:	4630      	mov	r0, r6
 80173ba:	4639      	mov	r1, r7
 80173bc:	f7e9 f93c 	bl	8000638 <__aeabi_dmul>
 80173c0:	a363      	add	r3, pc, #396	; (adr r3, 8017550 <atan+0x2f0>)
 80173c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c6:	f7e8 ff7f 	bl	80002c8 <__aeabi_dsub>
 80173ca:	4632      	mov	r2, r6
 80173cc:	463b      	mov	r3, r7
 80173ce:	f7e9 f933 	bl	8000638 <__aeabi_dmul>
 80173d2:	a361      	add	r3, pc, #388	; (adr r3, 8017558 <atan+0x2f8>)
 80173d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d8:	f7e8 ff76 	bl	80002c8 <__aeabi_dsub>
 80173dc:	4632      	mov	r2, r6
 80173de:	463b      	mov	r3, r7
 80173e0:	f7e9 f92a 	bl	8000638 <__aeabi_dmul>
 80173e4:	a35e      	add	r3, pc, #376	; (adr r3, 8017560 <atan+0x300>)
 80173e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ea:	f7e8 ff6d 	bl	80002c8 <__aeabi_dsub>
 80173ee:	4632      	mov	r2, r6
 80173f0:	463b      	mov	r3, r7
 80173f2:	f7e9 f921 	bl	8000638 <__aeabi_dmul>
 80173f6:	a35c      	add	r3, pc, #368	; (adr r3, 8017568 <atan+0x308>)
 80173f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173fc:	f7e8 ff64 	bl	80002c8 <__aeabi_dsub>
 8017400:	4632      	mov	r2, r6
 8017402:	463b      	mov	r3, r7
 8017404:	f7e9 f918 	bl	8000638 <__aeabi_dmul>
 8017408:	4602      	mov	r2, r0
 801740a:	460b      	mov	r3, r1
 801740c:	4640      	mov	r0, r8
 801740e:	4649      	mov	r1, r9
 8017410:	f7e8 ff5c 	bl	80002cc <__adddf3>
 8017414:	4622      	mov	r2, r4
 8017416:	462b      	mov	r3, r5
 8017418:	f7e9 f90e 	bl	8000638 <__aeabi_dmul>
 801741c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017420:	4602      	mov	r2, r0
 8017422:	460b      	mov	r3, r1
 8017424:	d14b      	bne.n	80174be <atan+0x25e>
 8017426:	4620      	mov	r0, r4
 8017428:	4629      	mov	r1, r5
 801742a:	f7e8 ff4d 	bl	80002c8 <__aeabi_dsub>
 801742e:	e72c      	b.n	801728a <atan+0x2a>
 8017430:	ee10 0a10 	vmov	r0, s0
 8017434:	4b53      	ldr	r3, [pc, #332]	; (8017584 <atan+0x324>)
 8017436:	2200      	movs	r2, #0
 8017438:	4629      	mov	r1, r5
 801743a:	f7e8 ff45 	bl	80002c8 <__aeabi_dsub>
 801743e:	4b51      	ldr	r3, [pc, #324]	; (8017584 <atan+0x324>)
 8017440:	4606      	mov	r6, r0
 8017442:	460f      	mov	r7, r1
 8017444:	2200      	movs	r2, #0
 8017446:	4620      	mov	r0, r4
 8017448:	4629      	mov	r1, r5
 801744a:	f7e8 ff3f 	bl	80002cc <__adddf3>
 801744e:	4602      	mov	r2, r0
 8017450:	460b      	mov	r3, r1
 8017452:	4630      	mov	r0, r6
 8017454:	4639      	mov	r1, r7
 8017456:	f7e9 fa19 	bl	800088c <__aeabi_ddiv>
 801745a:	f04f 0a01 	mov.w	sl, #1
 801745e:	4604      	mov	r4, r0
 8017460:	460d      	mov	r5, r1
 8017462:	e764      	b.n	801732e <atan+0xce>
 8017464:	4b49      	ldr	r3, [pc, #292]	; (801758c <atan+0x32c>)
 8017466:	429e      	cmp	r6, r3
 8017468:	da1d      	bge.n	80174a6 <atan+0x246>
 801746a:	ee10 0a10 	vmov	r0, s0
 801746e:	4b48      	ldr	r3, [pc, #288]	; (8017590 <atan+0x330>)
 8017470:	2200      	movs	r2, #0
 8017472:	4629      	mov	r1, r5
 8017474:	f7e8 ff28 	bl	80002c8 <__aeabi_dsub>
 8017478:	4b45      	ldr	r3, [pc, #276]	; (8017590 <atan+0x330>)
 801747a:	4606      	mov	r6, r0
 801747c:	460f      	mov	r7, r1
 801747e:	2200      	movs	r2, #0
 8017480:	4620      	mov	r0, r4
 8017482:	4629      	mov	r1, r5
 8017484:	f7e9 f8d8 	bl	8000638 <__aeabi_dmul>
 8017488:	4b3e      	ldr	r3, [pc, #248]	; (8017584 <atan+0x324>)
 801748a:	2200      	movs	r2, #0
 801748c:	f7e8 ff1e 	bl	80002cc <__adddf3>
 8017490:	4602      	mov	r2, r0
 8017492:	460b      	mov	r3, r1
 8017494:	4630      	mov	r0, r6
 8017496:	4639      	mov	r1, r7
 8017498:	f7e9 f9f8 	bl	800088c <__aeabi_ddiv>
 801749c:	f04f 0a02 	mov.w	sl, #2
 80174a0:	4604      	mov	r4, r0
 80174a2:	460d      	mov	r5, r1
 80174a4:	e743      	b.n	801732e <atan+0xce>
 80174a6:	462b      	mov	r3, r5
 80174a8:	ee10 2a10 	vmov	r2, s0
 80174ac:	4939      	ldr	r1, [pc, #228]	; (8017594 <atan+0x334>)
 80174ae:	2000      	movs	r0, #0
 80174b0:	f7e9 f9ec 	bl	800088c <__aeabi_ddiv>
 80174b4:	f04f 0a03 	mov.w	sl, #3
 80174b8:	4604      	mov	r4, r0
 80174ba:	460d      	mov	r5, r1
 80174bc:	e737      	b.n	801732e <atan+0xce>
 80174be:	4b36      	ldr	r3, [pc, #216]	; (8017598 <atan+0x338>)
 80174c0:	4e36      	ldr	r6, [pc, #216]	; (801759c <atan+0x33c>)
 80174c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80174c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80174ca:	e9da 2300 	ldrd	r2, r3, [sl]
 80174ce:	f7e8 fefb 	bl	80002c8 <__aeabi_dsub>
 80174d2:	4622      	mov	r2, r4
 80174d4:	462b      	mov	r3, r5
 80174d6:	f7e8 fef7 	bl	80002c8 <__aeabi_dsub>
 80174da:	4602      	mov	r2, r0
 80174dc:	460b      	mov	r3, r1
 80174de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80174e2:	f7e8 fef1 	bl	80002c8 <__aeabi_dsub>
 80174e6:	f1bb 0f00 	cmp.w	fp, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	460d      	mov	r5, r1
 80174ee:	f6bf aed6 	bge.w	801729e <atan+0x3e>
 80174f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80174f6:	461d      	mov	r5, r3
 80174f8:	e6d1      	b.n	801729e <atan+0x3e>
 80174fa:	a51d      	add	r5, pc, #116	; (adr r5, 8017570 <atan+0x310>)
 80174fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017500:	e6cd      	b.n	801729e <atan+0x3e>
 8017502:	bf00      	nop
 8017504:	f3af 8000 	nop.w
 8017508:	54442d18 	.word	0x54442d18
 801750c:	bff921fb 	.word	0xbff921fb
 8017510:	8800759c 	.word	0x8800759c
 8017514:	7e37e43c 	.word	0x7e37e43c
 8017518:	e322da11 	.word	0xe322da11
 801751c:	3f90ad3a 	.word	0x3f90ad3a
 8017520:	24760deb 	.word	0x24760deb
 8017524:	3fa97b4b 	.word	0x3fa97b4b
 8017528:	a0d03d51 	.word	0xa0d03d51
 801752c:	3fb10d66 	.word	0x3fb10d66
 8017530:	c54c206e 	.word	0xc54c206e
 8017534:	3fb745cd 	.word	0x3fb745cd
 8017538:	920083ff 	.word	0x920083ff
 801753c:	3fc24924 	.word	0x3fc24924
 8017540:	5555550d 	.word	0x5555550d
 8017544:	3fd55555 	.word	0x3fd55555
 8017548:	2c6a6c2f 	.word	0x2c6a6c2f
 801754c:	bfa2b444 	.word	0xbfa2b444
 8017550:	52defd9a 	.word	0x52defd9a
 8017554:	3fadde2d 	.word	0x3fadde2d
 8017558:	af749a6d 	.word	0xaf749a6d
 801755c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017560:	fe231671 	.word	0xfe231671
 8017564:	3fbc71c6 	.word	0x3fbc71c6
 8017568:	9998ebc4 	.word	0x9998ebc4
 801756c:	3fc99999 	.word	0x3fc99999
 8017570:	54442d18 	.word	0x54442d18
 8017574:	3ff921fb 	.word	0x3ff921fb
 8017578:	440fffff 	.word	0x440fffff
 801757c:	7ff00000 	.word	0x7ff00000
 8017580:	3fdbffff 	.word	0x3fdbffff
 8017584:	3ff00000 	.word	0x3ff00000
 8017588:	3ff2ffff 	.word	0x3ff2ffff
 801758c:	40038000 	.word	0x40038000
 8017590:	3ff80000 	.word	0x3ff80000
 8017594:	bff00000 	.word	0xbff00000
 8017598:	080183a0 	.word	0x080183a0
 801759c:	08018380 	.word	0x08018380

080175a0 <fabs>:
 80175a0:	ec51 0b10 	vmov	r0, r1, d0
 80175a4:	ee10 2a10 	vmov	r2, s0
 80175a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80175ac:	ec43 2b10 	vmov	d0, r2, r3
 80175b0:	4770      	bx	lr

080175b2 <finite>:
 80175b2:	b082      	sub	sp, #8
 80175b4:	ed8d 0b00 	vstr	d0, [sp]
 80175b8:	9801      	ldr	r0, [sp, #4]
 80175ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80175be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80175c2:	0fc0      	lsrs	r0, r0, #31
 80175c4:	b002      	add	sp, #8
 80175c6:	4770      	bx	lr

080175c8 <scalbn>:
 80175c8:	b570      	push	{r4, r5, r6, lr}
 80175ca:	ec55 4b10 	vmov	r4, r5, d0
 80175ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80175d2:	4606      	mov	r6, r0
 80175d4:	462b      	mov	r3, r5
 80175d6:	b99a      	cbnz	r2, 8017600 <scalbn+0x38>
 80175d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80175dc:	4323      	orrs	r3, r4
 80175de:	d036      	beq.n	801764e <scalbn+0x86>
 80175e0:	4b39      	ldr	r3, [pc, #228]	; (80176c8 <scalbn+0x100>)
 80175e2:	4629      	mov	r1, r5
 80175e4:	ee10 0a10 	vmov	r0, s0
 80175e8:	2200      	movs	r2, #0
 80175ea:	f7e9 f825 	bl	8000638 <__aeabi_dmul>
 80175ee:	4b37      	ldr	r3, [pc, #220]	; (80176cc <scalbn+0x104>)
 80175f0:	429e      	cmp	r6, r3
 80175f2:	4604      	mov	r4, r0
 80175f4:	460d      	mov	r5, r1
 80175f6:	da10      	bge.n	801761a <scalbn+0x52>
 80175f8:	a32b      	add	r3, pc, #172	; (adr r3, 80176a8 <scalbn+0xe0>)
 80175fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fe:	e03a      	b.n	8017676 <scalbn+0xae>
 8017600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017604:	428a      	cmp	r2, r1
 8017606:	d10c      	bne.n	8017622 <scalbn+0x5a>
 8017608:	ee10 2a10 	vmov	r2, s0
 801760c:	4620      	mov	r0, r4
 801760e:	4629      	mov	r1, r5
 8017610:	f7e8 fe5c 	bl	80002cc <__adddf3>
 8017614:	4604      	mov	r4, r0
 8017616:	460d      	mov	r5, r1
 8017618:	e019      	b.n	801764e <scalbn+0x86>
 801761a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801761e:	460b      	mov	r3, r1
 8017620:	3a36      	subs	r2, #54	; 0x36
 8017622:	4432      	add	r2, r6
 8017624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017628:	428a      	cmp	r2, r1
 801762a:	dd08      	ble.n	801763e <scalbn+0x76>
 801762c:	2d00      	cmp	r5, #0
 801762e:	a120      	add	r1, pc, #128	; (adr r1, 80176b0 <scalbn+0xe8>)
 8017630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017634:	da1c      	bge.n	8017670 <scalbn+0xa8>
 8017636:	a120      	add	r1, pc, #128	; (adr r1, 80176b8 <scalbn+0xf0>)
 8017638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801763c:	e018      	b.n	8017670 <scalbn+0xa8>
 801763e:	2a00      	cmp	r2, #0
 8017640:	dd08      	ble.n	8017654 <scalbn+0x8c>
 8017642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801764a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801764e:	ec45 4b10 	vmov	d0, r4, r5
 8017652:	bd70      	pop	{r4, r5, r6, pc}
 8017654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017658:	da19      	bge.n	801768e <scalbn+0xc6>
 801765a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801765e:	429e      	cmp	r6, r3
 8017660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017664:	dd0a      	ble.n	801767c <scalbn+0xb4>
 8017666:	a112      	add	r1, pc, #72	; (adr r1, 80176b0 <scalbn+0xe8>)
 8017668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d1e2      	bne.n	8017636 <scalbn+0x6e>
 8017670:	a30f      	add	r3, pc, #60	; (adr r3, 80176b0 <scalbn+0xe8>)
 8017672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017676:	f7e8 ffdf 	bl	8000638 <__aeabi_dmul>
 801767a:	e7cb      	b.n	8017614 <scalbn+0x4c>
 801767c:	a10a      	add	r1, pc, #40	; (adr r1, 80176a8 <scalbn+0xe0>)
 801767e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0b8      	beq.n	80175f8 <scalbn+0x30>
 8017686:	a10e      	add	r1, pc, #56	; (adr r1, 80176c0 <scalbn+0xf8>)
 8017688:	e9d1 0100 	ldrd	r0, r1, [r1]
 801768c:	e7b4      	b.n	80175f8 <scalbn+0x30>
 801768e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017692:	3236      	adds	r2, #54	; 0x36
 8017694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801769c:	4620      	mov	r0, r4
 801769e:	4b0c      	ldr	r3, [pc, #48]	; (80176d0 <scalbn+0x108>)
 80176a0:	2200      	movs	r2, #0
 80176a2:	e7e8      	b.n	8017676 <scalbn+0xae>
 80176a4:	f3af 8000 	nop.w
 80176a8:	c2f8f359 	.word	0xc2f8f359
 80176ac:	01a56e1f 	.word	0x01a56e1f
 80176b0:	8800759c 	.word	0x8800759c
 80176b4:	7e37e43c 	.word	0x7e37e43c
 80176b8:	8800759c 	.word	0x8800759c
 80176bc:	fe37e43c 	.word	0xfe37e43c
 80176c0:	c2f8f359 	.word	0xc2f8f359
 80176c4:	81a56e1f 	.word	0x81a56e1f
 80176c8:	43500000 	.word	0x43500000
 80176cc:	ffff3cb0 	.word	0xffff3cb0
 80176d0:	3c900000 	.word	0x3c900000

080176d4 <_init>:
 80176d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d6:	bf00      	nop
 80176d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176da:	bc08      	pop	{r3}
 80176dc:	469e      	mov	lr, r3
 80176de:	4770      	bx	lr

080176e0 <_fini>:
 80176e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e2:	bf00      	nop
 80176e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176e6:	bc08      	pop	{r3}
 80176e8:	469e      	mov	lr, r3
 80176ea:	4770      	bx	lr
