
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  080179c0  080179c0  000279c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018730  08018730  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08018730  08018730  00028730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018738  08018738  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018738  08018738  00028738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801873c  0801873c  0002873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08018740  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004774  20000200  08018940  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004974  08018940  00034974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a95  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de3  00000000  00000000  00050cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00055aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  000572c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a750  00000000  00000000  000588e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d81  00000000  00000000  00083038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6148  00000000  00000000  000a8db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ef01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f54  00000000  00000000  0018ef54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080179a4 	.word	0x080179a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080179a4 	.word	0x080179a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0000      	movs	r0, r0
	...

080012f8 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001302:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001328 <sqr+0x30>
 8001306:	ed97 0b00 	vldr	d0, [r7]
 800130a:	f014 fd01 	bl	8015d10 <pow>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
}
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000

08001330 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001338:	f006 f8cc 	bl	80074d4 <HAL_GetTick>
 800133c:	ee07 0a90 	vmov	s15, r0
 8001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f91e 	bl	8000588 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b81      	ldr	r3, [pc, #516]	; (8001558 <algorithm_1_update+0x228>)
 8001352:	f7ff fa9b 	bl	800088c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc63 	bl	8000c28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a7d      	ldr	r2, [pc, #500]	; (800155c <algorithm_1_update+0x22c>)
 8001366:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <algorithm_1_update+0x22c>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <algorithm_1_update+0x230>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	a372      	add	r3, pc, #456	; (adr r3, 8001550 <algorithm_1_update+0x220>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 800139a:	4b72      	ldr	r3, [pc, #456]	; (8001564 <algorithm_1_update+0x234>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013a8:	4b6c      	ldr	r3, [pc, #432]	; (800155c <algorithm_1_update+0x22c>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <algorithm_1_update+0x230>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013c2:	4a68      	ldr	r2, [pc, #416]	; (8001564 <algorithm_1_update+0x234>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <algorithm_1_update+0x22c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a64      	ldr	r2, [pc, #400]	; (8001560 <algorithm_1_update+0x230>)
 80013ce:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013d0:	4b65      	ldr	r3, [pc, #404]	; (8001568 <algorithm_1_update+0x238>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013d6:	4b64      	ldr	r3, [pc, #400]	; (8001568 <algorithm_1_update+0x238>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80b4 	beq.w	8001548 <algorithm_1_update+0x218>
  {
	isUpdated_1 = 0;
 80013e0:	4b61      	ldr	r3, [pc, #388]	; (8001568 <algorithm_1_update+0x238>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013ec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd09      	ble.n	800140e <algorithm_1_update+0xde>
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <algorithm_1_update+0x23c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001402:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <algorithm_1_update+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a59      	ldr	r2, [pc, #356]	; (8001570 <algorithm_1_update+0x240>)
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e002      	b.n	8001414 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <algorithm_1_update+0x240>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <algorithm_1_update+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d11f      	bne.n	800145c <algorithm_1_update+0x12c>
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <algorithm_1_update+0x23c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d11b      	bne.n	800145c <algorithm_1_update+0x12c>
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <algorithm_1_update+0x244>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d117      	bne.n	800145c <algorithm_1_update+0x12c>
	{
	  isRising = 1;
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <algorithm_1_update+0x23c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001432:	f006 f84f 	bl	80074d4 <HAL_GetTick>
 8001436:	4603      	mov	r3, r0
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <algorithm_1_update+0x248>)
 800143a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <algorithm_1_update+0x24c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <algorithm_1_update+0x24c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2a02      	cmp	r2, #2
 8001448:	bf38      	it	cc
 800144a:	2202      	movcc	r2, #2
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001450:	484b      	ldr	r0, [pc, #300]	; (8001580 <algorithm_1_update+0x250>)
 8001452:	f002 f997 	bl	8003784 <ext_pin_open>
	  sd_csv_log_transmit("Rising via pressure");
 8001456:	484b      	ldr	r0, [pc, #300]	; (8001584 <algorithm_1_update+0x254>)
 8001458:	f005 fbbe 	bl	8006bd8 <sd_csv_log_transmit>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001462:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d50f      	bpl.n	8001490 <algorithm_1_update+0x160>
 8001470:	f006 f830 	bl	80074d4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <algorithm_1_update+0x248>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001480:	4293      	cmp	r3, r2
 8001482:	d905      	bls.n	8001490 <algorithm_1_update+0x160>
	{
	  fallingCounter++;
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <algorithm_1_update+0x258>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a3f      	ldr	r2, [pc, #252]	; (8001588 <algorithm_1_update+0x258>)
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e002      	b.n	8001496 <algorithm_1_update+0x166>
	}
	else
	{
	  fallingCounter = 0;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <algorithm_1_update+0x258>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <algorithm_1_update+0x258>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d123      	bne.n	80014e6 <algorithm_1_update+0x1b6>
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <algorithm_1_update+0x23c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d11f      	bne.n	80014e6 <algorithm_1_update+0x1b6>
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <algorithm_1_update+0x244>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11b      	bne.n	80014e6 <algorithm_1_update+0x1b6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014b4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800158c <algorithm_1_update+0x25c>
 80014b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	dd11      	ble.n	80014e6 <algorithm_1_update+0x1b6>
	{
	  isFalling = 1;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <algorithm_1_update+0x244>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <algorithm_1_update+0x24c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <algorithm_1_update+0x24c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2a04      	cmp	r2, #4
 80014d4:	bf38      	it	cc
 80014d6:	2204      	movcc	r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014dc:	f003 ff00 	bl	80052e0 <deploy_p_1>
	  sd_csv_log_transmit("P_1 via pressure");
 80014e0:	482b      	ldr	r0, [pc, #172]	; (8001590 <algorithm_1_update+0x260>)
 80014e2:	f005 fb79 	bl	8006bd8 <sd_csv_log_transmit>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ec:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001594 <algorithm_1_update+0x264>
 80014f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d50d      	bpl.n	8001516 <algorithm_1_update+0x1e6>
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <algorithm_1_update+0x244>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d109      	bne.n	8001516 <algorithm_1_update+0x1e6>
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <algorithm_1_update+0x268>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <algorithm_1_update+0x1e6>
	{
		second_p_counter_1++;
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <algorithm_1_update+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <algorithm_1_update+0x26c>)
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e002      	b.n	800151c <algorithm_1_update+0x1ec>
	}
	else{
		second_p_counter_1 = 0;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <algorithm_1_update+0x26c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <algorithm_1_update+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b0a      	cmp	r3, #10
 8001522:	d111      	bne.n	8001548 <algorithm_1_update+0x218>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <algorithm_1_update+0x24c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <algorithm_1_update+0x24c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2a05      	cmp	r2, #5
 8001530:	bf38      	it	cc
 8001532:	2205      	movcc	r2, #5
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <algorithm_1_update+0x268>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 800153e:	f003 fedf 	bl	8005300 <deploy_p_2>
		sd_csv_log_transmit("P_2 via pressure algorithm_1");
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <algorithm_1_update+0x270>)
 8001544:	f005 fb48 	bl	8006bd8 <sd_csv_log_transmit>
	}
  }
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	9999999a 	.word	0x9999999a
 8001554:	3fb99999 	.word	0x3fb99999
 8001558:	408f4000 	.word	0x408f4000
 800155c:	2000021c 	.word	0x2000021c
 8001560:	20000220 	.word	0x20000220
 8001564:	20000224 	.word	0x20000224
 8001568:	20000244 	.word	0x20000244
 800156c:	20000242 	.word	0x20000242
 8001570:	20000228 	.word	0x20000228
 8001574:	20000240 	.word	0x20000240
 8001578:	20000238 	.word	0x20000238
 800157c:	20000008 	.word	0x20000008
 8001580:	2000087c 	.word	0x2000087c
 8001584:	080179c0 	.word	0x080179c0
 8001588:	2000022c 	.word	0x2000022c
 800158c:	447a0000 	.word	0x447a0000
 8001590:	080179d4 	.word	0x080179d4
 8001594:	440e8000 	.word	0x440e8000
 8001598:	20000246 	.word	0x20000246
 800159c:	20000248 	.word	0x20000248
 80015a0:	080179e8 	.word	0x080179e8

080015a4 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffe7 	bl	8000588 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b10 	vmov	d0, r2, r3
 80015c2:	f7ff fe99 	bl	80012f8 <sqr>
 80015c6:	ec55 4b10 	vmov	r4, r5, d0
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffd9 	bl	8000588 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b10 	vmov	d0, r2, r3
 80015de:	f7ff fe8b 	bl	80012f8 <sqr>
 80015e2:	ec53 2b10 	vmov	r2, r3, d0
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fe6f 	bl	80002cc <__adddf3>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffc3 	bl	8000588 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	ec43 2b10 	vmov	d0, r2, r3
 800160a:	f7ff fe75 	bl	80012f8 <sqr>
 800160e:	ec53 2b10 	vmov	r2, r3, d0
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fe59 	bl	80002cc <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fb01 	bl	8000c28 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	ee00 3a10 	vmov	s0, r3
 800162c:	f014 fc0c 	bl	8015e48 <sqrtf>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80018bc <algorithm_2_update+0x318>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	dd3c      	ble.n	80016bc <algorithm_2_update+0x118>
 8001642:	4b9f      	ldr	r3, [pc, #636]	; (80018c0 <algorithm_2_update+0x31c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d138      	bne.n	80016bc <algorithm_2_update+0x118>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001650:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80018c4 <algorithm_2_update+0x320>
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d516      	bpl.n	800168c <algorithm_2_update+0xe8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001664:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80018c8 <algorithm_2_update+0x324>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd0c      	ble.n	800168c <algorithm_2_update+0xe8>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001678:	4b94      	ldr	r3, [pc, #592]	; (80018cc <algorithm_2_update+0x328>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001680:	4b92      	ldr	r3, [pc, #584]	; (80018cc <algorithm_2_update+0x328>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 800168c:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <algorithm_2_update+0x31c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
		algorithm_2_start_time_u32 = HAL_GetTick();
 8001692:	f005 ff1f 	bl	80074d4 <HAL_GetTick>
 8001696:	4603      	mov	r3, r0
 8001698:	4a8d      	ldr	r2, [pc, #564]	; (80018d0 <algorithm_2_update+0x32c>)
 800169a:	6013      	str	r3, [r2, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800169c:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <algorithm_2_update+0x328>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <algorithm_2_update+0x328>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2a02      	cmp	r2, #2
 80016a8:	bf38      	it	cc
 80016aa:	2202      	movcc	r2, #2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016b0:	4888      	ldr	r0, [pc, #544]	; (80018d4 <algorithm_2_update+0x330>)
 80016b2:	f002 f867 	bl	8003784 <ext_pin_open>
		sd_csv_log_transmit("Rising via Accel");
 80016b6:	4888      	ldr	r0, [pc, #544]	; (80018d8 <algorithm_2_update+0x334>)
 80016b8:	f005 fa8e 	bl	8006bd8 <sd_csv_log_transmit>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 12)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016c2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80018dc <algorithm_2_update+0x338>
 80016c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d50c      	bpl.n	80016ea <algorithm_2_update+0x146>
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <algorithm_2_update+0x31c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <algorithm_2_update+0x146>
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <algorithm_2_update+0x33c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b0b      	cmp	r3, #11
 80016de:	dc04      	bgt.n	80016ea <algorithm_2_update+0x146>
	{
		burnout_counter++;
 80016e0:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <algorithm_2_update+0x33c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a7e      	ldr	r2, [pc, #504]	; (80018e0 <algorithm_2_update+0x33c>)
 80016e8:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <algorithm_2_update+0x33c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d10f      	bne.n	8001712 <algorithm_2_update+0x16e>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <algorithm_2_update+0x328>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b74      	ldr	r3, [pc, #464]	; (80018cc <algorithm_2_update+0x328>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2a03      	cmp	r2, #3
 80016fe:	bf38      	it	cc
 8001700:	2203      	movcc	r2, #3
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 8001706:	4873      	ldr	r0, [pc, #460]	; (80018d4 <algorithm_2_update+0x330>)
 8001708:	f002 f83c 	bl	8003784 <ext_pin_open>
		sd_csv_log_transmit("Burnout");
 800170c:	4875      	ldr	r0, [pc, #468]	; (80018e4 <algorithm_2_update+0x340>)
 800170e:	f005 fa63 	bl	8006bd8 <sd_csv_log_transmit>
	  sd_csv_log_transmit("Quaternion set zero");
	}
#endif

	//Falling detection || First parachute
	if(BMI->angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && HAL_GetTick() - algorithm_2_start_time_u32 > ALGORITHM_2_LOCKOUT_TIME)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8001718:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80018e8 <algorithm_2_update+0x344>
 800171c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	dd23      	ble.n	800176e <algorithm_2_update+0x1ca>
 8001726:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <algorithm_2_update+0x31c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11f      	bne.n	800176e <algorithm_2_update+0x1ca>
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <algorithm_2_update+0x348>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d11b      	bne.n	800176e <algorithm_2_update+0x1ca>
 8001736:	f005 fecd 	bl	80074d4 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <algorithm_2_update+0x32c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001746:	4293      	cmp	r3, r2
 8001748:	d911      	bls.n	800176e <algorithm_2_update+0x1ca>
	{
		isFalling_2 = 1;
 800174a:	4b68      	ldr	r3, [pc, #416]	; (80018ec <algorithm_2_update+0x348>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <algorithm_2_update+0x328>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <algorithm_2_update+0x328>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2a04      	cmp	r2, #4
 800175c:	bf38      	it	cc
 800175e:	2204      	movcc	r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001764:	f003 fdbc 	bl	80052e0 <deploy_p_1>
		sd_csv_log_transmit("P_1 via Gyro");
 8001768:	4861      	ldr	r0, [pc, #388]	; (80018f0 <algorithm_2_update+0x34c>)
 800176a:	f005 fa35 	bl	8006bd8 <sd_csv_log_transmit>
	}

	if(is_BME_ok == 1)
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <algorithm_2_update+0x350>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d130      	bne.n	80017d8 <algorithm_2_update+0x234>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800177c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80018f8 <algorithm_2_update+0x354>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d50d      	bpl.n	80017a6 <algorithm_2_update+0x202>
 800178a:	4b58      	ldr	r3, [pc, #352]	; (80018ec <algorithm_2_update+0x348>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d109      	bne.n	80017a6 <algorithm_2_update+0x202>
 8001792:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <algorithm_2_update+0x358>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <algorithm_2_update+0x202>
		{
			secondP_counter++;
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <algorithm_2_update+0x35c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a57      	ldr	r2, [pc, #348]	; (8001900 <algorithm_2_update+0x35c>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e002      	b.n	80017ac <algorithm_2_update+0x208>
		}
		else{
			secondP_counter = 0;
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <algorithm_2_update+0x35c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 80017ac:	4b54      	ldr	r3, [pc, #336]	; (8001900 <algorithm_2_update+0x35c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b0a      	cmp	r3, #10
 80017b2:	d111      	bne.n	80017d8 <algorithm_2_update+0x234>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <algorithm_2_update+0x328>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <algorithm_2_update+0x328>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2a05      	cmp	r2, #5
 80017c0:	bf38      	it	cc
 80017c2:	2205      	movcc	r2, #5
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <algorithm_2_update+0x358>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017ce:	f003 fd97 	bl	8005300 <deploy_p_2>
			sd_csv_log_transmit("P_2 via pressure algorithm_2");
 80017d2:	484c      	ldr	r0, [pc, #304]	; (8001904 <algorithm_2_update+0x360>)
 80017d4:	f005 fa00 	bl	8006bd8 <sd_csv_log_transmit>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f7ff fd87 	bl	80012f8 <sqr>
 80017ea:	ec55 4b10 	vmov	r4, r5, d0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f7ff fd7c 	bl	80012f8 <sqr>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd60 	bl	80002cc <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800181a:	eeb0 0a47 	vmov.f32	s0, s14
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	f7ff fd69 	bl	80012f8 <sqr>
 8001826:	ec53 2b10 	vmov	r2, r3, d0
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fd4d 	bl	80002cc <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f014 fad5 	bl	8015df0 <sqrt>
 8001846:	ec51 0b10 	vmov	r0, r1, d0
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <algorithm_2_update+0x364>)
 8001850:	f7ff f964 	bl	8000b1c <__aeabi_dcmplt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d011      	beq.n	800187e <algorithm_2_update+0x2da>
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <algorithm_2_update+0x348>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <algorithm_2_update+0x2da>
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <algorithm_2_update+0x358>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d109      	bne.n	800187e <algorithm_2_update+0x2da>
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <algorithm_2_update+0x368>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <algorithm_2_update+0x2da>
	{
			TD_counter++;
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <algorithm_2_update+0x36c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <algorithm_2_update+0x36c>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e002      	b.n	8001884 <algorithm_2_update+0x2e0>
	}
	else{
		TD_counter = 0;
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <algorithm_2_update+0x36c>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <algorithm_2_update+0x36c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188c:	dd12      	ble.n	80018b4 <algorithm_2_update+0x310>
	{
		is_TD = 1;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <algorithm_2_update+0x368>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <algorithm_2_update+0x328>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <algorithm_2_update+0x328>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2a06      	cmp	r2, #6
 80018a0:	bf38      	it	cc
 80018a2:	2206      	movcc	r2, #6
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <algorithm_2_update+0x330>)
 80018aa:	f001 ff6b 	bl	8003784 <ext_pin_open>
		sd_csv_log_transmit("TD");
 80018ae:	4819      	ldr	r0, [pc, #100]	; (8001914 <algorithm_2_update+0x370>)
 80018b0:	f005 f992 	bl	8006bd8 <sd_csv_log_transmit>
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}
 80018bc:	453b8000 	.word	0x453b8000
 80018c0:	20000243 	.word	0x20000243
 80018c4:	43480000 	.word	0x43480000
 80018c8:	c3480000 	.word	0xc3480000
 80018cc:	20000008 	.word	0x20000008
 80018d0:	2000023c 	.word	0x2000023c
 80018d4:	2000087c 	.word	0x2000087c
 80018d8:	08017a08 	.word	0x08017a08
 80018dc:	c4fa0000 	.word	0xc4fa0000
 80018e0:	2000024c 	.word	0x2000024c
 80018e4:	08017a1c 	.word	0x08017a1c
 80018e8:	42a00000 	.word	0x42a00000
 80018ec:	20000241 	.word	0x20000241
 80018f0:	08017a24 	.word	0x08017a24
 80018f4:	200008dc 	.word	0x200008dc
 80018f8:	440e8000 	.word	0x440e8000
 80018fc:	20000245 	.word	0x20000245
 8001900:	20000234 	.word	0x20000234
 8001904:	08017a34 	.word	0x08017a34
 8001908:	40240000 	.word	0x40240000
 800190c:	20000250 	.word	0x20000250
 8001910:	20000230 	.word	0x20000230
 8001914:	08017a54 	.word	0x08017a54

08001918 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <bme280_getVals+0xac>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2301      	movs	r3, #1
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2301      	movs	r3, #1
 8001930:	22f3      	movs	r2, #243	; 0xf3
 8001932:	21ec      	movs	r1, #236	; 0xec
 8001934:	f007 fd1a 	bl	800936c <HAL_I2C_Mem_Read>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <bme280_getVals+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d035      	beq.n	80019bc <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <bme280_getVals+0xac>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	2314      	movs	r3, #20
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2308      	movs	r3, #8
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	22f7      	movs	r2, #247	; 0xf7
 8001964:	21ec      	movs	r1, #236	; 0xec
 8001966:	f007 fd01 	bl	800936c <HAL_I2C_Mem_Read>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d123      	bne.n	80019bc <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <bme280_getVals+0xb0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	031a      	lsls	r2, r3, #12
 8001982:	7a3b      	ldrb	r3, [r7, #8]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4313      	orrs	r3, r2
 8001988:	7a7a      	ldrb	r2, [r7, #9]
 800198a:	0912      	lsrs	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	431a      	orrs	r2, r3
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <bme280_getVals+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 8001996:	793b      	ldrb	r3, [r7, #4]
 8001998:	031a      	lsls	r2, r3, #12
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4313      	orrs	r3, r2
 80019a0:	79ba      	ldrb	r2, [r7, #6]
 80019a2:	0912      	lsrs	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	431a      	orrs	r2, r3
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <bme280_getVals+0xb0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 80019ae:	7abb      	ldrb	r3, [r7, #10]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	7afa      	ldrb	r2, [r7, #11]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <bme280_getVals+0xb0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000254 	.word	0x20000254
 80019c8:	20000258 	.word	0x20000258
 80019cc:	00000000 	.word	0x00000000

080019d0 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <bme280_get_altitude+0xd0>)
 80019d8:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <bme280_get_altitude+0xd4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	ed93 7a06 	vldr	s14, [r3, #24]
 80019e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ea:	ee16 0a90 	vmov	r0, s13
 80019ee:	f7fe fdcb 	bl	8000588 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a90 <bme280_get_altitude+0xc0>
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	f014 f987 	bl	8015d10 <pow>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	4927      	ldr	r1, [pc, #156]	; (8001aa8 <bme280_get_altitude+0xd8>)
 8001a0c:	f7fe fc5c 	bl	80002c8 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	a31f      	add	r3, pc, #124	; (adr r3, 8001a98 <bme280_get_altitude+0xc8>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe0b 	bl	8000638 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8fd 	bl	8000c28 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <bme280_get_altitude+0xdc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <bme280_get_altitude+0xd4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	ed97 7a00 	vldr	s14, [r7]
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <bme280_get_altitude+0xd4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <bme280_get_altitude+0xdc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	dc00      	bgt.n	8001a66 <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a64:	e00e      	b.n	8001a84 <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <bme280_get_altitude+0xdc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	d005      	beq.n	8001a84 <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <bme280_get_altitude+0xd4>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <bme280_get_altitude+0xdc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	f3af 8000 	nop.w
 8001a90:	ccd9456c 	.word	0xccd9456c
 8001a94:	3fc85b95 	.word	0x3fc85b95
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40e5a540 	.word	0x40e5a540
 8001aa0:	447d5000 	.word	0x447d5000
 8001aa4:	20000258 	.word	0x20000258
 8001aa8:	3ff00000 	.word	0x3ff00000
 8001aac:	20000008 	.word	0x20000008

08001ab0 <bme280_config>:
void bme280_config()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	; 0x38
 8001ab4:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001ab6:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <bme280_config+0x270>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001ac0:	4b98      	ldr	r3, [pc, #608]	; (8001d24 <bme280_config+0x274>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 fb27 	bl	8009118 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001aca:	2005      	movs	r0, #5
 8001acc:	f005 fd0e 	bl	80074ec <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <bme280_config+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f007 f9db 	bl	8008e90 <HAL_I2C_Init>
	HAL_Delay(5);
 8001ada:	2005      	movs	r0, #5
 8001adc:	f005 fd06 	bl	80074ec <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <bme280_config+0x274>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	23c8      	movs	r3, #200	; 0xc8
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	2319      	movs	r3, #25
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	2288      	movs	r2, #136	; 0x88
 8001af4:	21ec      	movs	r1, #236	; 0xec
 8001af6:	f007 fc39 	bl	800936c <HAL_I2C_Mem_Read>
 8001afa:	4603      	mov	r3, r0
 8001afc:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001afe:	793b      	ldrb	r3, [r7, #4]
 8001b00:	b299      	uxth	r1, r3
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b87      	ldr	r3, [pc, #540]	; (8001d28 <bme280_config+0x278>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	b292      	uxth	r2, r2
 8001b14:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	b219      	sxth	r1, r3
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <bme280_config+0x278>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	b212      	sxth	r2, r2
 8001b2a:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001b2c:	7a3b      	ldrb	r3, [r7, #8]
 8001b2e:	b219      	sxth	r1, r3
 8001b30:	7a7b      	ldrb	r3, [r7, #9]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <bme280_config+0x278>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	b212      	sxth	r2, r2
 8001b40:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <bme280_config+0x278>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b292      	uxth	r2, r2
 8001b58:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b5a:	7b3b      	ldrb	r3, [r7, #12]
 8001b5c:	b219      	sxth	r1, r3
 8001b5e:	7b7b      	ldrb	r3, [r7, #13]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <bme280_config+0x278>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	b212      	sxth	r2, r2
 8001b6e:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	b219      	sxth	r1, r3
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <bme280_config+0x278>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	b212      	sxth	r2, r2
 8001b84:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b86:	7c3b      	ldrb	r3, [r7, #16]
 8001b88:	b219      	sxth	r1, r3
 8001b8a:	7c7b      	ldrb	r3, [r7, #17]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <bme280_config+0x278>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	b212      	sxth	r2, r2
 8001b9a:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b9c:	7cbb      	ldrb	r3, [r7, #18]
 8001b9e:	b219      	sxth	r1, r3
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <bme280_config+0x278>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	b212      	sxth	r2, r2
 8001bb0:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001bb2:	7d3b      	ldrb	r3, [r7, #20]
 8001bb4:	b219      	sxth	r1, r3
 8001bb6:	7d7b      	ldrb	r3, [r7, #21]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <bme280_config+0x278>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	b212      	sxth	r2, r2
 8001bc6:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001bc8:	7dbb      	ldrb	r3, [r7, #22]
 8001bca:	b219      	sxth	r1, r3
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <bme280_config+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	b212      	sxth	r2, r2
 8001bdc:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001bde:	7e3b      	ldrb	r3, [r7, #24]
 8001be0:	b219      	sxth	r1, r3
 8001be2:	7e7b      	ldrb	r3, [r7, #25]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <bme280_config+0x278>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	b212      	sxth	r2, r2
 8001bf2:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bf4:	7ebb      	ldrb	r3, [r7, #26]
 8001bf6:	b219      	sxth	r1, r3
 8001bf8:	7efb      	ldrb	r3, [r7, #27]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <bme280_config+0x278>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	b212      	sxth	r2, r2
 8001c08:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <bme280_config+0x278>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	7f3a      	ldrb	r2, [r7, #28]
 8001c12:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <bme280_config+0x274>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	2332      	movs	r3, #50	; 0x32
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	22e1      	movs	r2, #225	; 0xe1
 8001c28:	21ec      	movs	r1, #236	; 0xec
 8001c2a:	f007 fb9f 	bl	800936c <HAL_I2C_Mem_Read>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001c32:	793b      	ldrb	r3, [r7, #4]
 8001c34:	b219      	sxth	r1, r3
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <bme280_config+0x278>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	b212      	sxth	r2, r2
 8001c46:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <bme280_config+0x278>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	79ba      	ldrb	r2, [r7, #6]
 8001c50:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c52:	7a3b      	ldrb	r3, [r7, #8]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	b219      	sxth	r1, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <bme280_config+0x278>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	b212      	sxth	r2, r2
 8001c6c:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c6e:	7a3b      	ldrb	r3, [r7, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	b219      	sxth	r1, r3
 8001c76:	7a7b      	ldrb	r3, [r7, #9]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <bme280_config+0x278>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	b212      	sxth	r2, r2
 8001c86:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c88:	7aba      	ldrb	r2, [r7, #10]
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <bme280_config+0x278>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b252      	sxtb	r2, r2
 8001c92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <bme280_config+0x278>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	7c5b      	ldrb	r3, [r3, #17]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <bme280_config+0x274>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	2332      	movs	r3, #50	; 0x32
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2301      	movs	r3, #1
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	1cfb      	adds	r3, r7, #3
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	22f2      	movs	r2, #242	; 0xf2
 8001cb8:	21ec      	movs	r1, #236	; 0xec
 8001cba:	f007 fa5d 	bl	8009178 <HAL_I2C_Mem_Write>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <bme280_config+0x278>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	7c1b      	ldrb	r3, [r3, #16]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	b25a      	sxtb	r2, r3
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <bme280_config+0x278>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	7c5b      	ldrb	r3, [r3, #17]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <bme280_config+0x278>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	7c5b      	ldrb	r3, [r3, #17]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	015b      	lsls	r3, r3, #5
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <bme280_config+0x274>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	2332      	movs	r3, #50	; 0x32
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	1cfb      	adds	r3, r7, #3
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	22f4      	movs	r2, #244	; 0xf4
 8001d08:	21ec      	movs	r1, #236	; 0xec
 8001d0a:	f007 fa35 	bl	8009178 <HAL_I2C_Mem_Write>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <bme280_config+0x278>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	7c9b      	ldrb	r3, [r3, #18]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e005      	b.n	8001d2c <bme280_config+0x27c>
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000254 	.word	0x20000254
 8001d28:	20000258 	.word	0x20000258
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <bme280_config+0x308>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	2332      	movs	r3, #50	; 0x32
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	1cfb      	adds	r3, r7, #3
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	22f5      	movs	r2, #245	; 0xf5
 8001d46:	21ec      	movs	r1, #236	; 0xec
 8001d48:	f007 fa16 	bl	8009178 <HAL_I2C_Mem_Write>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d56:	2064      	movs	r0, #100	; 0x64
 8001d58:	f005 fbc8 	bl	80074ec <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	e011      	b.n	8001d86 <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d62:	f000 f865 	bl	8001e30 <bme280_update>
	  base +=  BME->altitude;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <bme280_config+0x30c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f005 fbb6 	bl	80074ec <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	3301      	adds	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	2b1d      	cmp	r3, #29
 8001d8a:	ddea      	ble.n	8001d62 <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <bme280_config+0x310>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d94:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001da0:	f000 f846 	bl	8001e30 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <bme280_config+0x310>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000254 	.word	0x20000254
 8001dbc:	20000258 	.word	0x20000258
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af04      	add	r7, sp, #16
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <bme280_init+0x5c>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <bme280_init+0x60>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <bme280_init+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <bme280_init+0x5c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3214      	adds	r2, #20
 8001de4:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <bme280_init+0x60>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	2332      	movs	r3, #50	; 0x32
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	22d0      	movs	r2, #208	; 0xd0
 8001dfc:	21ec      	movs	r1, #236	; 0xec
 8001dfe:	f007 fab5 	bl	800936c <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001e02:	7b3b      	ldrb	r3, [r7, #12]
 8001e04:	2b60      	cmp	r3, #96	; 0x60
 8001e06:	d103      	bne.n	8001e10 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <bme280_init+0x68>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001e0e:	e002      	b.n	8001e16 <bme280_init+0x52>
		is_BME_ok = 0;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <bme280_init+0x68>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000258 	.word	0x20000258
 8001e24:	20000254 	.word	0x20000254
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	200008dc 	.word	0x200008dc

08001e30 <bme280_update>:


void bme280_update(){
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b0d2      	sub	sp, #328	; 0x148
 8001e36:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e38:	f7ff fd6e 	bl	8001918 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e3c:	4bd4      	ldr	r3, [pc, #848]	; (8002190 <bme280_update+0x360>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 83bc 	bne.w	80025c2 <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e4a:	4bd1      	ldr	r3, [pc, #836]	; (8002190 <bme280_update+0x360>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e58:	10da      	asrs	r2, r3, #3
 8001e5a:	4bcd      	ldr	r3, [pc, #820]	; (8002190 <bme280_update+0x360>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	4bc9      	ldr	r3, [pc, #804]	; (8002190 <bme280_update+0x360>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	12db      	asrs	r3, r3, #11
 8001e78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e80:	111a      	asrs	r2, r3, #4
 8001e82:	4bc3      	ldr	r3, [pc, #780]	; (8002190 <bme280_update+0x360>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	1ad1      	subs	r1, r2, r3
 8001e8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e92:	111a      	asrs	r2, r3, #4
 8001e94:	4bbe      	ldr	r3, [pc, #760]	; (8002190 <bme280_update+0x360>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	131a      	asrs	r2, r3, #12
 8001ea6:	4bba      	ldr	r3, [pc, #744]	; (8002190 <bme280_update+0x360>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	889b      	ldrh	r3, [r3, #4]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	139b      	asrs	r3, r3, #14
 8001eb6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001eba:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001ec8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3380      	adds	r3, #128	; 0x80
 8001ed4:	121b      	asrs	r3, r3, #8
 8001ed6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	4baa      	ldr	r3, [pc, #680]	; (8002190 <bme280_update+0x360>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8002194 <bme280_update+0x364>
 8001eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef2:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ef6:	4ba6      	ldr	r3, [pc, #664]	; (8002190 <bme280_update+0x360>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	653b      	str	r3, [r7, #80]	; 0x50
 8001f00:	657a      	str	r2, [r7, #84]	; 0x54
 8001f02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f06:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001f0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f0e:	17da      	asrs	r2, r3, #31
 8001f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f14:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f18:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f24:	4613      	mov	r3, r2
 8001f26:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f30:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001f34:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f3c:	fb03 f102 	mul.w	r1, r3, r2
 8001f40:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	18ca      	adds	r2, r1, r3
 8001f4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f52:	fba3 4503 	umull	r4, r5, r3, r3
 8001f56:	1953      	adds	r3, r2, r5
 8001f58:	461d      	mov	r5, r3
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	; (8002190 <bme280_update+0x360>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	8a1b      	ldrh	r3, [r3, #16]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	17da      	asrs	r2, r3, #31
 8001f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f70:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f74:	4603      	mov	r3, r0
 8001f76:	fb03 f205 	mul.w	r2, r3, r5
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	fb04 f303 	mul.w	r3, r4, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	4602      	mov	r2, r0
 8001f84:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f88:	445b      	add	r3, fp
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f90:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f94:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <bme280_update+0x360>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	89db      	ldrh	r3, [r3, #14]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	17da      	asrs	r2, r3, #31
 8001fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fa6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001faa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fae:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001fb2:	462a      	mov	r2, r5
 8001fb4:	fb02 f203 	mul.w	r2, r2, r3
 8001fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	441a      	add	r2, r3
 8001fc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fc8:	4621      	mov	r1, r4
 8001fca:	fba3 8901 	umull	r8, r9, r3, r1
 8001fce:	eb02 0309 	add.w	r3, r2, r9
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fe0:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fe4:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fe8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fec:	1814      	adds	r4, r2, r0
 8001fee:	643c      	str	r4, [r7, #64]	; 0x40
 8001ff0:	414b      	adcs	r3, r1
 8001ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ff8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <bme280_update+0x360>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	899b      	ldrh	r3, [r3, #12]
 8002004:	b21b      	sxth	r3, r3
 8002006:	b21b      	sxth	r3, r3
 8002008:	17da      	asrs	r2, r3, #31
 800200a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800200e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800201e:	00d9      	lsls	r1, r3, #3
 8002020:	2000      	movs	r0, #0
 8002022:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002026:	1814      	adds	r4, r2, r0
 8002028:	63bc      	str	r4, [r7, #56]	; 0x38
 800202a:	414b      	adcs	r3, r1
 800202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002032:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8002036:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800203a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203e:	fb03 f102 	mul.w	r1, r3, r2
 8002042:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002046:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	18ca      	adds	r2, r1, r3
 8002050:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002054:	fba3 1303 	umull	r1, r3, r3, r3
 8002058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800205c:	460b      	mov	r3, r1
 800205e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002066:	18d3      	adds	r3, r2, r3
 8002068:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800206c:	4b48      	ldr	r3, [pc, #288]	; (8002190 <bme280_update+0x360>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	895b      	ldrh	r3, [r3, #10]
 8002074:	b21b      	sxth	r3, r3
 8002076:	b21b      	sxth	r3, r3
 8002078:	17da      	asrs	r2, r3, #31
 800207a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800207e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002082:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002086:	462b      	mov	r3, r5
 8002088:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800208c:	4642      	mov	r2, r8
 800208e:	fb02 f203 	mul.w	r2, r2, r3
 8002092:	464b      	mov	r3, r9
 8002094:	4621      	mov	r1, r4
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	4622      	mov	r2, r4
 800209e:	4641      	mov	r1, r8
 80020a0:	fba2 1201 	umull	r1, r2, r2, r1
 80020a4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80020a8:	460a      	mov	r2, r1
 80020aa:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80020ae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80020b2:	4413      	add	r3, r2
 80020b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80020b8:	f04f 0000 	mov.w	r0, #0
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80020c4:	4623      	mov	r3, r4
 80020c6:	0a18      	lsrs	r0, r3, #8
 80020c8:	462b      	mov	r3, r5
 80020ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020ce:	462b      	mov	r3, r5
 80020d0:	1219      	asrs	r1, r3, #8
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <bme280_update+0x360>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	891b      	ldrh	r3, [r3, #8]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	b21b      	sxth	r3, r3
 80020de:	17da      	asrs	r2, r3, #31
 80020e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020f0:	464a      	mov	r2, r9
 80020f2:	fb02 f203 	mul.w	r2, r2, r3
 80020f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020fa:	4644      	mov	r4, r8
 80020fc:	fb04 f303 	mul.w	r3, r4, r3
 8002100:	441a      	add	r2, r3
 8002102:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002106:	4644      	mov	r4, r8
 8002108:	fba3 4304 	umull	r4, r3, r3, r4
 800210c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002110:	4623      	mov	r3, r4
 8002112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800212c:	464c      	mov	r4, r9
 800212e:	0323      	lsls	r3, r4, #12
 8002130:	4644      	mov	r4, r8
 8002132:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002136:	4644      	mov	r4, r8
 8002138:	0322      	lsls	r2, r4, #12
 800213a:	1884      	adds	r4, r0, r2
 800213c:	633c      	str	r4, [r7, #48]	; 0x30
 800213e:	eb41 0303 	adc.w	r3, r1, r3
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
 8002144:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002148:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 800214c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002150:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002154:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002158:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <bme280_update+0x360>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	88db      	ldrh	r3, [r3, #6]
 8002164:	b29b      	uxth	r3, r3
 8002166:	b29b      	uxth	r3, r3
 8002168:	2200      	movs	r2, #0
 800216a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800216e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002172:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002176:	462b      	mov	r3, r5
 8002178:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800217c:	4642      	mov	r2, r8
 800217e:	fb02 f203 	mul.w	r2, r2, r3
 8002182:	464b      	mov	r3, r9
 8002184:	4621      	mov	r1, r4
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	e004      	b.n	8002198 <bme280_update+0x368>
 800218e:	bf00      	nop
 8002190:	20000258 	.word	0x20000258
 8002194:	42c80000 	.word	0x42c80000
 8002198:	4622      	mov	r2, r4
 800219a:	4641      	mov	r1, r8
 800219c:	fba2 1201 	umull	r1, r2, r2, r1
 80021a0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021a4:	460a      	mov	r2, r1
 80021a6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80021aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021ae:	4413      	add	r3, r2
 80021b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021c0:	4629      	mov	r1, r5
 80021c2:	104a      	asrs	r2, r1, #1
 80021c4:	4629      	mov	r1, r5
 80021c6:	17cb      	asrs	r3, r1, #31
 80021c8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 80021cc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021d0:	4313      	orrs	r3, r2
 80021d2:	d106      	bne.n	80021e2 <bme280_update+0x3b2>
		{
			P = 0;
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021e0:	e14b      	b.n	800247a <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021e6:	2100      	movs	r1, #0
 80021e8:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80021ee:	eb61 0303 	sbc.w	r3, r1, r3
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021f8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	07d9      	lsls	r1, r3, #31
 800220a:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800220e:	07d0      	lsls	r0, r2, #31
 8002210:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002214:	1a84      	subs	r4, r0, r2
 8002216:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800221a:	eb61 0303 	sbc.w	r3, r1, r3
 800221e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002222:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002226:	4622      	mov	r2, r4
 8002228:	462b      	mov	r3, r5
 800222a:	1891      	adds	r1, r2, r2
 800222c:	6239      	str	r1, [r7, #32]
 800222e:	415b      	adcs	r3, r3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002236:	4621      	mov	r1, r4
 8002238:	1851      	adds	r1, r2, r1
 800223a:	61b9      	str	r1, [r7, #24]
 800223c:	4629      	mov	r1, r5
 800223e:	414b      	adcs	r3, r1
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800224e:	4649      	mov	r1, r9
 8002250:	018b      	lsls	r3, r1, #6
 8002252:	4641      	mov	r1, r8
 8002254:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002258:	4641      	mov	r1, r8
 800225a:	018a      	lsls	r2, r1, #6
 800225c:	4641      	mov	r1, r8
 800225e:	1889      	adds	r1, r1, r2
 8002260:	6139      	str	r1, [r7, #16]
 8002262:	4649      	mov	r1, r9
 8002264:	eb43 0101 	adc.w	r1, r3, r1
 8002268:	6179      	str	r1, [r7, #20]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002276:	4649      	mov	r1, r9
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	4641      	mov	r1, r8
 800227c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002280:	4641      	mov	r1, r8
 8002282:	008a      	lsls	r2, r1, #2
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	4603      	mov	r3, r0
 800228a:	4622      	mov	r2, r4
 800228c:	189b      	adds	r3, r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	460b      	mov	r3, r1
 8002292:	462a      	mov	r2, r5
 8002294:	eb42 0303 	adc.w	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80022a6:	4649      	mov	r1, r9
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	4641      	mov	r1, r8
 80022ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b0:	4641      	mov	r1, r8
 80022b2:	008a      	lsls	r2, r1, #2
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4603      	mov	r3, r0
 80022ba:	4622      	mov	r2, r4
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c2:	462b      	mov	r3, r5
 80022c4:	460a      	mov	r2, r1
 80022c6:	eb42 0303 	adc.w	r3, r2, r3
 80022ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80022d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022d6:	f7fe fe05 	bl	8000ee4 <__aeabi_ldivmod>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022e2:	4bbb      	ldr	r3, [pc, #748]	; (80025d0 <bme280_update+0x7a0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	8adb      	ldrh	r3, [r3, #22]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	17da      	asrs	r2, r3, #31
 80022f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022f4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0b50      	lsrs	r0, r2, #13
 8002302:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002306:	1359      	asrs	r1, r3, #13
 8002308:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800230c:	462b      	mov	r3, r5
 800230e:	fb00 f203 	mul.w	r2, r0, r3
 8002312:	4623      	mov	r3, r4
 8002314:	fb03 f301 	mul.w	r3, r3, r1
 8002318:	4413      	add	r3, r2
 800231a:	4622      	mov	r2, r4
 800231c:	fba2 1200 	umull	r1, r2, r2, r0
 8002320:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002324:	460a      	mov	r2, r1
 8002326:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800232a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800232e:	4413      	add	r3, r2
 8002330:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002334:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002338:	f04f 0000 	mov.w	r0, #0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	0b50      	lsrs	r0, r2, #13
 8002342:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002346:	1359      	asrs	r1, r3, #13
 8002348:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800234c:	462b      	mov	r3, r5
 800234e:	fb00 f203 	mul.w	r2, r0, r3
 8002352:	4623      	mov	r3, r4
 8002354:	fb03 f301 	mul.w	r3, r3, r1
 8002358:	4413      	add	r3, r2
 800235a:	4622      	mov	r2, r4
 800235c:	fba2 1200 	umull	r1, r2, r2, r0
 8002360:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002364:	460a      	mov	r2, r1
 8002366:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800236a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800236e:	4413      	add	r3, r2
 8002370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002380:	4621      	mov	r1, r4
 8002382:	0e4a      	lsrs	r2, r1, #25
 8002384:	4629      	mov	r1, r5
 8002386:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800238a:	4629      	mov	r1, r5
 800238c:	164b      	asrs	r3, r1, #25
 800238e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8002392:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <bme280_update+0x7a0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	8a9b      	ldrh	r3, [r3, #20]
 800239a:	b21b      	sxth	r3, r3
 800239c:	b21b      	sxth	r3, r3
 800239e:	17da      	asrs	r2, r3, #31
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
 80023a2:	677a      	str	r2, [r7, #116]	; 0x74
 80023a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80023a8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80023ac:	462a      	mov	r2, r5
 80023ae:	fb02 f203 	mul.w	r2, r2, r3
 80023b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80023b6:	4621      	mov	r1, r4
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80023c2:	4621      	mov	r1, r4
 80023c4:	fba2 1201 	umull	r1, r2, r2, r1
 80023c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023cc:	460a      	mov	r2, r1
 80023ce:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023d6:	4413      	add	r3, r2
 80023d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023e8:	4621      	mov	r1, r4
 80023ea:	0cca      	lsrs	r2, r1, #19
 80023ec:	4629      	mov	r1, r5
 80023ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023f2:	4629      	mov	r1, r5
 80023f4:	14cb      	asrs	r3, r1, #19
 80023f6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023fa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002402:	1884      	adds	r4, r0, r2
 8002404:	66bc      	str	r4, [r7, #104]	; 0x68
 8002406:	eb41 0303 	adc.w	r3, r1, r3
 800240a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800240c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002410:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002414:	4621      	mov	r1, r4
 8002416:	1889      	adds	r1, r1, r2
 8002418:	6639      	str	r1, [r7, #96]	; 0x60
 800241a:	4629      	mov	r1, r5
 800241c:	eb43 0101 	adc.w	r1, r3, r1
 8002420:	6679      	str	r1, [r7, #100]	; 0x64
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800242e:	4623      	mov	r3, r4
 8002430:	0a18      	lsrs	r0, r3, #8
 8002432:	462b      	mov	r3, r5
 8002434:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002438:	462b      	mov	r3, r5
 800243a:	1219      	asrs	r1, r3, #8
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <bme280_update+0x7a0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	8a5b      	ldrh	r3, [r3, #18]
 8002444:	b21b      	sxth	r3, r3
 8002446:	b21b      	sxth	r3, r3
 8002448:	17da      	asrs	r2, r3, #31
 800244a:	65bb      	str	r3, [r7, #88]	; 0x58
 800244c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800245a:	464c      	mov	r4, r9
 800245c:	0123      	lsls	r3, r4, #4
 800245e:	4644      	mov	r4, r8
 8002460:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002464:	4644      	mov	r4, r8
 8002466:	0122      	lsls	r2, r4, #4
 8002468:	1884      	adds	r4, r0, r2
 800246a:	603c      	str	r4, [r7, #0]
 800246c:	eb41 0303 	adc.w	r3, r1, r3
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002476:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 800247a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800247e:	f7fe fcf3 	bl	8000e68 <__aeabi_l2f>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f87f 	bl	8000588 <__aeabi_f2d>
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <bme280_update+0x7a4>)
 8002490:	f7fe f9fc 	bl	800088c <__aeabi_ddiv>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <bme280_update+0x7a8>)
 80024a2:	f7fe f9f3 	bl	800088c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4949      	ldr	r1, [pc, #292]	; (80025d0 <bme280_update+0x7a0>)
 80024ac:	680c      	ldr	r4, [r1, #0]
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fbb9 	bl	8000c28 <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <bme280_update+0x7a0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 80024c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024c8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80024cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 80024d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024d4:	039b      	lsls	r3, r3, #14
 80024d6:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <bme280_update+0x7a0>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	8bd2      	ldrh	r2, [r2, #30]
 80024de:	b212      	sxth	r2, r2
 80024e0:	0512      	lsls	r2, r2, #20
 80024e2:	1a9a      	subs	r2, r3, r2
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <bme280_update+0x7a0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	8c1b      	ldrh	r3, [r3, #32]
 80024ec:	b21b      	sxth	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024fe:	0bdb      	lsrs	r3, r3, #15
 8002500:	4a33      	ldr	r2, [pc, #204]	; (80025d0 <bme280_update+0x7a0>)
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800250a:	b252      	sxtb	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002512:	fb01 f202 	mul.w	r2, r1, r2
 8002516:	0a92      	lsrs	r2, r2, #10
 8002518:	492d      	ldr	r1, [pc, #180]	; (80025d0 <bme280_update+0x7a0>)
 800251a:	6809      	ldr	r1, [r1, #0]
 800251c:	6809      	ldr	r1, [r1, #0]
 800251e:	7f09      	ldrb	r1, [r1, #28]
 8002520:	b2c9      	uxtb	r1, r1
 8002522:	4608      	mov	r0, r1
 8002524:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002528:	fb00 f101 	mul.w	r1, r0, r1
 800252c:	0ac9      	lsrs	r1, r1, #11
 800252e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8002532:	fb01 f202 	mul.w	r2, r1, r2
 8002536:	0a92      	lsrs	r2, r2, #10
 8002538:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800253c:	4924      	ldr	r1, [pc, #144]	; (80025d0 <bme280_update+0x7a0>)
 800253e:	6809      	ldr	r1, [r1, #0]
 8002540:	6809      	ldr	r1, [r1, #0]
 8002542:	8b49      	ldrh	r1, [r1, #26]
 8002544:	b209      	sxth	r1, r1
 8002546:	fb01 f202 	mul.w	r2, r1, r2
 800254a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800254e:	0b92      	lsrs	r2, r2, #14
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800255c:	0bdb      	lsrs	r3, r3, #15
 800255e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002562:	0bd2      	lsrs	r2, r2, #15
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	09db      	lsrs	r3, r3, #7
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <bme280_update+0x7a0>)
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	7e12      	ldrb	r2, [r2, #24]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 8002584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002588:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800258c:	bf28      	it	cs
 800258e:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 8002592:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8002596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800259a:	0b1b      	lsrs	r3, r3, #12
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <bme280_update+0x7a0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025dc <bme280_update+0x7ac>
 80025ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b0:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 80025b4:	f7ff fa0c 	bl	80019d0 <bme280_get_altitude>
		BME->isUpdated = 0;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <bme280_update+0x7a0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 80025c2:	bf00      	nop
 80025c4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ce:	bf00      	nop
 80025d0:	20000258 	.word	0x20000258
 80025d4:	40700000 	.word	0x40700000
 80025d8:	40590000 	.word	0x40590000
 80025dc:	44800000 	.word	0x44800000

080025e0 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025e6:	2009      	movs	r0, #9
 80025e8:	f005 fccf 	bl	8007f8a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025ec:	200a      	movs	r0, #10
 80025ee:	f005 fccc 	bl	8007f8a <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025f6:	2301      	movs	r3, #1
 80025f8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025fa:	4bb7      	ldr	r3, [pc, #732]	; (80028d8 <bmi088_config+0x2f8>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	2301      	movs	r3, #1
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2301      	movs	r3, #1
 800260c:	227c      	movs	r2, #124	; 0x7c
 800260e:	2130      	movs	r1, #48	; 0x30
 8002610:	f006 fdb2 	bl	8009178 <HAL_I2C_Mem_Write>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4313      	orrs	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8002622:	4bad      	ldr	r3, [pc, #692]	; (80028d8 <bmi088_config+0x2f8>)
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	2364      	movs	r3, #100	; 0x64
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	2301      	movs	r3, #1
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	227d      	movs	r2, #125	; 0x7d
 8002636:	2130      	movs	r1, #48	; 0x30
 8002638:	f006 fd9e 	bl	8009178 <HAL_I2C_Mem_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	4313      	orrs	r3, r2
 8002644:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8002646:	2014      	movs	r0, #20
 8002648:	f004 ff50 	bl	80074ec <HAL_Delay>

	buf[0] = ACC_RESET;
 800264c:	23b6      	movs	r3, #182	; 0xb6
 800264e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002650:	4ba1      	ldr	r3, [pc, #644]	; (80028d8 <bmi088_config+0x2f8>)
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	2364      	movs	r3, #100	; 0x64
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	2301      	movs	r3, #1
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2301      	movs	r3, #1
 8002662:	227e      	movs	r2, #126	; 0x7e
 8002664:	2130      	movs	r1, #48	; 0x30
 8002666:	f006 fd87 	bl	8009178 <HAL_I2C_Mem_Write>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4313      	orrs	r3, r2
 8002672:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <bmi088_config+0xa0>
 800267a:	4b98      	ldr	r3, [pc, #608]	; (80028dc <bmi088_config+0x2fc>)
 800267c:	2285      	movs	r2, #133	; 0x85
 800267e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002680:	200a      	movs	r0, #10
 8002682:	f004 ff33 	bl	80074ec <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002686:	23b0      	movs	r3, #176	; 0xb0
 8002688:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800268a:	4b93      	ldr	r3, [pc, #588]	; (80028d8 <bmi088_config+0x2f8>)
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	2364      	movs	r3, #100	; 0x64
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	2301      	movs	r3, #1
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	227e      	movs	r2, #126	; 0x7e
 800269e:	2130      	movs	r1, #48	; 0x30
 80026a0:	f006 fd6a 	bl	8009178 <HAL_I2C_Mem_Write>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <bmi088_config+0xda>
 80026b4:	4b89      	ldr	r3, [pc, #548]	; (80028dc <bmi088_config+0x2fc>)
 80026b6:	228a      	movs	r2, #138	; 0x8a
 80026b8:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026ba:	200a      	movs	r0, #10
 80026bc:	f004 ff16 	bl	80074ec <HAL_Delay>

	buf[0] = GYRO_RESET;
 80026c0:	23b6      	movs	r3, #182	; 0xb6
 80026c2:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80026c4:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <bmi088_config+0x2f8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	2364      	movs	r3, #100	; 0x64
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	2301      	movs	r3, #1
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2214      	movs	r2, #20
 80026d8:	21d0      	movs	r1, #208	; 0xd0
 80026da:	f006 fd4d 	bl	8009178 <HAL_I2C_Mem_Write>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <bmi088_config+0x114>
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <bmi088_config+0x2fc>)
 80026f0:	228f      	movs	r2, #143	; 0x8f
 80026f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026f4:	200a      	movs	r0, #10
 80026f6:	f004 fef9 	bl	80074ec <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026fa:	4b79      	ldr	r3, [pc, #484]	; (80028e0 <bmi088_config+0x300>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	7e5b      	ldrb	r3, [r3, #25]
 8002700:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002702:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <bmi088_config+0x2f8>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	2364      	movs	r3, #100	; 0x64
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	2301      	movs	r3, #1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	220f      	movs	r2, #15
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f006 fd2e 	bl	8009178 <HAL_I2C_Mem_Write>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <bmi088_config+0x152>
 800272c:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <bmi088_config+0x2fc>)
 800272e:	2295      	movs	r2, #149	; 0x95
 8002730:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <bmi088_config+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
 8002738:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <bmi088_config+0x2f8>)
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	2314      	movs	r3, #20
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	2210      	movs	r2, #16
 800274e:	21d0      	movs	r1, #208	; 0xd0
 8002750:	f006 fd12 	bl	8009178 <HAL_I2C_Mem_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4313      	orrs	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <bmi088_config+0x18a>
 8002764:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <bmi088_config+0x2fc>)
 8002766:	2299      	movs	r2, #153	; 0x99
 8002768:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <bmi088_config+0x300>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	7ddb      	ldrb	r3, [r3, #23]
 8002770:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002772:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <bmi088_config+0x2f8>)
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	2314      	movs	r3, #20
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2301      	movs	r3, #1
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2301      	movs	r3, #1
 8002784:	2211      	movs	r2, #17
 8002786:	21d0      	movs	r1, #208	; 0xd0
 8002788:	f006 fcf6 	bl	8009178 <HAL_I2C_Mem_Write>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4313      	orrs	r3, r2
 8002794:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <bmi088_config+0x1c2>
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <bmi088_config+0x2fc>)
 800279e:	229d      	movs	r2, #157	; 0x9d
 80027a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80027a2:	2014      	movs	r0, #20
 80027a4:	f004 fea2 	bl	80074ec <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <bmi088_config+0x2f8>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	2314      	movs	r3, #20
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2301      	movs	r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	2215      	movs	r2, #21
 80027c0:	21d0      	movs	r1, #208	; 0xd0
 80027c2:	f006 fcd9 	bl	8009178 <HAL_I2C_Mem_Write>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <bmi088_config+0x1fc>
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <bmi088_config+0x2fc>)
 80027d8:	22a3      	movs	r2, #163	; 0xa3
 80027da:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027dc:	2301      	movs	r3, #1
 80027de:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027e0:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <bmi088_config+0x2f8>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	2314      	movs	r3, #20
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	2301      	movs	r3, #1
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2301      	movs	r3, #1
 80027f2:	2216      	movs	r2, #22
 80027f4:	21d0      	movs	r1, #208	; 0xd0
 80027f6:	f006 fcbf 	bl	8009178 <HAL_I2C_Mem_Write>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4313      	orrs	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <bmi088_config+0x230>
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <bmi088_config+0x2fc>)
 800280c:	22a7      	movs	r2, #167	; 0xa7
 800280e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 8002810:	2301      	movs	r3, #1
 8002812:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <bmi088_config+0x2f8>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	2314      	movs	r3, #20
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2301      	movs	r3, #1
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2301      	movs	r3, #1
 8002826:	2218      	movs	r2, #24
 8002828:	21d0      	movs	r1, #208	; 0xd0
 800282a:	f006 fca5 	bl	8009178 <HAL_I2C_Mem_Write>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4313      	orrs	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <bmi088_config+0x264>
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <bmi088_config+0x2fc>)
 8002840:	22ab      	movs	r2, #171	; 0xab
 8002842:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002844:	2304      	movs	r3, #4
 8002846:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <bmi088_config+0x2f8>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	2314      	movs	r3, #20
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	2301      	movs	r3, #1
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	227d      	movs	r2, #125	; 0x7d
 800285c:	2130      	movs	r1, #48	; 0x30
 800285e:	f006 fc8b 	bl	8009178 <HAL_I2C_Mem_Write>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	4313      	orrs	r3, r2
 800286a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <bmi088_config+0x298>
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <bmi088_config+0x2fc>)
 8002874:	22b0      	movs	r2, #176	; 0xb0
 8002876:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002878:	2008      	movs	r0, #8
 800287a:	f004 fe37 	bl	80074ec <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <bmi088_config+0x300>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	7cdb      	ldrb	r3, [r3, #19]
 8002884:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <bmi088_config+0x2f8>)
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	2314      	movs	r3, #20
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	2301      	movs	r3, #1
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	227c      	movs	r2, #124	; 0x7c
 800289a:	2130      	movs	r1, #48	; 0x30
 800289c:	f006 fc6c 	bl	8009178 <HAL_I2C_Mem_Write>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <bmi088_config+0x2d6>
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <bmi088_config+0x2fc>)
 80028b2:	22b5      	movs	r2, #181	; 0xb5
 80028b4:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80028b6:	2008      	movs	r0, #8
 80028b8:	f004 fe18 	bl	80074ec <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <bmi088_config+0x300>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	7d5b      	ldrb	r3, [r3, #21]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	b25a      	sxtb	r2, r3
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <bmi088_config+0x300>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	7d9b      	ldrb	r3, [r3, #22]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	713b      	strb	r3, [r7, #4]
 80028d6:	e005      	b.n	80028e4 <bmi088_config+0x304>
 80028d8:	2000025c 	.word	0x2000025c
 80028dc:	20000268 	.word	0x20000268
 80028e0:	20000260 	.word	0x20000260
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <bmi088_config+0x3d0>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	2314      	movs	r3, #20
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	2240      	movs	r2, #64	; 0x40
 80028f8:	2130      	movs	r1, #48	; 0x30
 80028fa:	f006 fc3d 	bl	8009178 <HAL_I2C_Mem_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4313      	orrs	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <bmi088_config+0x334>
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <bmi088_config+0x3d4>)
 8002910:	22ba      	movs	r2, #186	; 0xba
 8002912:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <bmi088_config+0x3d8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	7d1b      	ldrb	r3, [r3, #20]
 800291a:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <bmi088_config+0x3d0>)
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	2314      	movs	r3, #20
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	2301      	movs	r3, #1
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	2241      	movs	r2, #65	; 0x41
 8002930:	2130      	movs	r1, #48	; 0x30
 8002932:	f006 fc21 	bl	8009178 <HAL_I2C_Mem_Write>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4313      	orrs	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <bmi088_config+0x36c>
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <bmi088_config+0x3d4>)
 8002948:	22be      	movs	r2, #190	; 0xbe
 800294a:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800294c:	230a      	movs	r3, #10
 800294e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <bmi088_config+0x3d0>)
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	2314      	movs	r3, #20
 8002956:	9302      	str	r3, [sp, #8]
 8002958:	2301      	movs	r3, #1
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	2253      	movs	r2, #83	; 0x53
 8002964:	2130      	movs	r1, #48	; 0x30
 8002966:	f006 fc07 	bl	8009178 <HAL_I2C_Mem_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4313      	orrs	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002974:	2304      	movs	r3, #4
 8002976:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <bmi088_config+0x3d0>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	2314      	movs	r3, #20
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2301      	movs	r3, #1
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	2258      	movs	r2, #88	; 0x58
 800298c:	2130      	movs	r1, #48	; 0x30
 800298e:	f006 fbf3 	bl	8009178 <HAL_I2C_Mem_Write>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4313      	orrs	r3, r2
 800299a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800299c:	2009      	movs	r0, #9
 800299e:	f005 faf4 	bl	8007f8a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f005 faf1 	bl	8007f8a <HAL_NVIC_EnableIRQ>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2000025c 	.word	0x2000025c
 80029b4:	20000268 	.word	0x20000268
 80029b8:	20000260 	.word	0x20000260

080029bc <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <bmi088_init+0x90>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <bmi088_init+0x94>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <bmi088_init+0x94>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <bmi088_init+0x94>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <bmi088_init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <bmi088_init+0x9c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029ee:	2332      	movs	r3, #50	; 0x32
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	2301      	movs	r3, #1
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	2200      	movs	r2, #0
 8002a00:	21d0      	movs	r1, #208	; 0xd0
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	f006 fcb2 	bl	800936c <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 8002a08:	7b3b      	ldrb	r3, [r7, #12]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d103      	bne.n	8002a16 <bmi088_init+0x5a>
		is_BMI_ok = 1;
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <bmi088_init+0xa0>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 8002a14:	e016      	b.n	8002a44 <bmi088_init+0x88>
		is_BMI_ok = 0;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <bmi088_init+0xa0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <bmi088_init+0xa4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a24:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <bmi088_init+0xa4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <bmi088_init+0xa4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <bmi088_init+0xa4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	2000025c 	.word	0x2000025c
 8002a50:	20000260 	.word	0x20000260
 8002a54:	20000264 	.word	0x20000264
 8002a58:	20000265 	.word	0x20000265
 8002a5c:	200008e0 	.word	0x200008e0
 8002a60:	20000008 	.word	0x20000008
 8002a64:	00000000 	.word	0x00000000

08002a68 <bmi088_update>:
void bmi088_update()
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	b08d      	sub	sp, #52	; 0x34
 8002a6e:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <bmi088_update+0x94>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	7c9b      	ldrb	r3, [r3, #18]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 81eb 	beq.w	8002e56 <bmi088_update+0x3ee>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <bmi088_update+0x98>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <bmi088_update+0x94>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2314      	movs	r3, #20
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	2309      	movs	r3, #9
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	2212      	movs	r2, #18
 8002a98:	2130      	movs	r1, #48	; 0x30
 8002a9a:	f006 fc67 	bl	800936c <HAL_I2C_Mem_Read>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 83a9 	bne.w	80031fc <bmi088_update+0x794>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <bmi088_update+0x98>)
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <bmi088_update+0x94>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3309      	adds	r3, #9
 8002ab4:	2214      	movs	r2, #20
 8002ab6:	9202      	str	r2, [sp, #8]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	9201      	str	r2, [sp, #4]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2301      	movs	r3, #1
 8002ac0:	2222      	movs	r2, #34	; 0x22
 8002ac2:	2130      	movs	r1, #48	; 0x30
 8002ac4:	f006 fc52 	bl	800936c <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <bmi088_update+0x94>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	7a5b      	ldrb	r3, [r3, #9]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <bmi088_update+0x94>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	7a9b      	ldrb	r3, [r3, #10]
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	b21b      	sxth	r3, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ae8:	8bbb      	ldrh	r3, [r7, #28]
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d309      	bcc.n	8002b04 <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002af0:	8bbb      	ldrh	r3, [r7, #28]
 8002af2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	837b      	strh	r3, [r7, #26]
 8002afa:	e029      	b.n	8002b50 <bmi088_update+0xe8>
 8002afc:	20000260 	.word	0x20000260
 8002b00:	2000025c 	.word	0x2000025c
			}
			else{
				Temp_int11 = Temp_uint11;
 8002b04:	8bbb      	ldrh	r3, [r7, #28]
 8002b06:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002b08:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee17 0a90 	vmov	r0, s15
 8002b18:	f7fd fd36 	bl	8000588 <__aeabi_f2d>
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4bb6      	ldr	r3, [pc, #728]	; (8002e10 <bmi088_update+0x3a8>)
 8002b36:	f7fd fbc9 	bl	80002cc <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	49b5      	ldr	r1, [pc, #724]	; (8002e14 <bmi088_update+0x3ac>)
 8002b40:	680e      	ldr	r6, [r1, #0]
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fe f86f 	bl	8000c28 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b50:	4bb0      	ldr	r3, [pc, #704]	; (8002e14 <bmi088_update+0x3ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	7a1b      	ldrb	r3, [r3, #8]
 8002b56:	041a      	lsls	r2, r3, #16
 8002b58:	4bae      	ldr	r3, [pc, #696]	; (8002e14 <bmi088_update+0x3ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	79db      	ldrb	r3, [r3, #7]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4313      	orrs	r3, r2
 8002b62:	4aac      	ldr	r2, [pc, #688]	; (8002e14 <bmi088_update+0x3ac>)
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	7992      	ldrb	r2, [r2, #6]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	ee17 0a90 	vmov	r0, s15
 8002b7a:	f7fd fd05 	bl	8000588 <__aeabi_f2d>
 8002b7e:	a39e      	add	r3, pc, #632	; (adr r3, 8002df8 <bmi088_update+0x390>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fd58 	bl	8000638 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	a39b      	add	r3, pc, #620	; (adr r3, 8002e00 <bmi088_update+0x398>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fe79 	bl	800088c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	499d      	ldr	r1, [pc, #628]	; (8002e14 <bmi088_update+0x3ac>)
 8002ba0:	680e      	ldr	r6, [r1, #0]
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe f83f 	bl	8000c28 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002bb0:	4b98      	ldr	r3, [pc, #608]	; (8002e14 <bmi088_update+0x3ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <bmi088_update+0x3ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	791b      	ldrb	r3, [r3, #4]
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002bc6:	4b93      	ldr	r3, [pc, #588]	; (8002e14 <bmi088_update+0x3ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	78db      	ldrb	r3, [r3, #3]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <bmi088_update+0x3ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002bdc:	4b8d      	ldr	r3, [pc, #564]	; (8002e14 <bmi088_update+0x3ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <bmi088_update+0x3ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfe:	ee17 0a90 	vmov	r0, s15
 8002c02:	f7fd fcc1 	bl	8000588 <__aeabi_f2d>
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	4b83      	ldr	r3, [pc, #524]	; (8002e18 <bmi088_update+0x3b0>)
 8002c0c:	f7fd fe3e 	bl	800088c <__aeabi_ddiv>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <bmi088_update+0x3b4>)
 8002c1e:	f7fd fd0b 	bl	8000638 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <bmi088_update+0x3b8>)
 8002c30:	f7fd fd02 	bl	8000638 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4692      	mov	sl, r2
 8002c3a:	469b      	mov	fp, r3
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <bmi088_update+0x3ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	7d1b      	ldrb	r3, [r3, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	ee17 0a90 	vmov	r0, s15
 8002c50:	f7fd fc9a 	bl	8000588 <__aeabi_f2d>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	ec43 2b11 	vmov	d1, r2, r3
 8002c5c:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8002e08 <bmi088_update+0x3a0>
 8002c60:	f013 f856 	bl	8015d10 <pow>
 8002c64:	ec53 2b10 	vmov	r2, r3, d0
 8002c68:	4650      	mov	r0, sl
 8002c6a:	4659      	mov	r1, fp
 8002c6c:	f7fd fce4 	bl	8000638 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4967      	ldr	r1, [pc, #412]	; (8002e14 <bmi088_update+0x3ac>)
 8002c76:	680e      	ldr	r6, [r1, #0]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ffd4 	bl	8000c28 <__aeabi_d2f>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c92:	ee17 0a90 	vmov	r0, s15
 8002c96:	f7fd fc77 	bl	8000588 <__aeabi_f2d>
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <bmi088_update+0x3b0>)
 8002ca0:	f7fd fdf4 	bl	800088c <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	; (8002e1c <bmi088_update+0x3b4>)
 8002cb2:	f7fd fcc1 	bl	8000638 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <bmi088_update+0x3b8>)
 8002cc4:	f7fd fcb8 	bl	8000638 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4692      	mov	sl, r2
 8002cce:	469b      	mov	fp, r3
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <bmi088_update+0x3ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	7d1b      	ldrb	r3, [r3, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce0:	ee17 0a90 	vmov	r0, s15
 8002ce4:	f7fd fc50 	bl	8000588 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	ec43 2b11 	vmov	d1, r2, r3
 8002cf0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8002e08 <bmi088_update+0x3a0>
 8002cf4:	f013 f80c 	bl	8015d10 <pow>
 8002cf8:	ec53 2b10 	vmov	r2, r3, d0
 8002cfc:	4650      	mov	r0, sl
 8002cfe:	4659      	mov	r1, fp
 8002d00:	f7fd fc9a 	bl	8000638 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4942      	ldr	r1, [pc, #264]	; (8002e14 <bmi088_update+0x3ac>)
 8002d0a:	680e      	ldr	r6, [r1, #0]
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff8a 	bl	8000c28 <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d26:	ee17 0a90 	vmov	r0, s15
 8002d2a:	f7fd fc2d 	bl	8000588 <__aeabi_f2d>
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <bmi088_update+0x3b0>)
 8002d34:	f7fd fdaa 	bl	800088c <__aeabi_ddiv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <bmi088_update+0x3b4>)
 8002d46:	f7fd fc77 	bl	8000638 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <bmi088_update+0x3b8>)
 8002d58:	f7fd fc6e 	bl	8000638 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4692      	mov	sl, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <bmi088_update+0x3ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	7d1b      	ldrb	r3, [r3, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fd fc06 	bl	8000588 <__aeabi_f2d>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	ec43 2b11 	vmov	d1, r2, r3
 8002d84:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8002e08 <bmi088_update+0x3a0>
 8002d88:	f012 ffc2 	bl	8015d10 <pow>
 8002d8c:	ec53 2b10 	vmov	r2, r3, d0
 8002d90:	4650      	mov	r0, sl
 8002d92:	4659      	mov	r1, fp
 8002d94:	f7fd fc50 	bl	8000638 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	491d      	ldr	r1, [pc, #116]	; (8002e14 <bmi088_update+0x3ac>)
 8002d9e:	680e      	ldr	r6, [r1, #0]
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fd ff40 	bl	8000c28 <__aeabi_d2f>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <bmi088_update+0x3bc>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03a      	beq.n	8002e2c <bmi088_update+0x3c4>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <bmi088_update+0x3ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <bmi088_update+0x3ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d502      	bpl.n	8002dda <bmi088_update+0x372>
 8002dd4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002e28 <bmi088_update+0x3c0>
 8002dd8:	e009      	b.n	8002dee <bmi088_update+0x386>
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <bmi088_update+0x3ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <bmi088_update+0x3ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <bmi088_update+0x3ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002df6:	e01f      	b.n	8002e38 <bmi088_update+0x3d0>
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40438800 	.word	0x40438800
 8002e00:	00000000 	.word	0x00000000
 8002e04:	412e8480 	.word	0x412e8480
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40000000 	.word	0x40000000
 8002e10:	40370000 	.word	0x40370000
 8002e14:	20000260 	.word	0x20000260
 8002e18:	40e00000 	.word	0x40e00000
 8002e1c:	408f4000 	.word	0x408f4000
 8002e20:	3ff80000 	.word	0x3ff80000
 8002e24:	20000265 	.word	0x20000265
 8002e28:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002e2c:	4bb6      	ldr	r3, [pc, #728]	; (8003108 <bmi088_update+0x6a0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4bb4      	ldr	r3, [pc, #720]	; (8003108 <bmi088_update+0x6a0>)
 8002e36:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e38:	4bb4      	ldr	r3, [pc, #720]	; (800310c <bmi088_update+0x6a4>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4bb3      	ldr	r3, [pc, #716]	; (800310c <bmi088_update+0x6a4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e44:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e48:	4bb0      	ldr	r3, [pc, #704]	; (800310c <bmi088_update+0x6a4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e50:	4baf      	ldr	r3, [pc, #700]	; (8003110 <bmi088_update+0x6a8>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e56:	4bad      	ldr	r3, [pc, #692]	; (800310c <bmi088_update+0x6a4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	7c5b      	ldrb	r3, [r3, #17]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 81d0 	beq.w	8003202 <bmi088_update+0x79a>
 8002e62:	4bab      	ldr	r3, [pc, #684]	; (8003110 <bmi088_update+0x6a8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 81cb 	beq.w	8003202 <bmi088_update+0x79a>
		{
			if(isStarded){
 8002e6c:	4ba6      	ldr	r3, [pc, #664]	; (8003108 <bmi088_update+0x6a0>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 81bb 	beq.w	80031ec <bmi088_update+0x784>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e76:	4ba7      	ldr	r3, [pc, #668]	; (8003114 <bmi088_update+0x6ac>)
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	4ba4      	ldr	r3, [pc, #656]	; (800310c <bmi088_update+0x6a4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330b      	adds	r3, #11
 8002e80:	220a      	movs	r2, #10
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	2206      	movs	r2, #6
 8002e86:	9201      	str	r2, [sp, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	21d0      	movs	r1, #208	; 0xd0
 8002e90:	f006 fa6c 	bl	800936c <HAL_I2C_Mem_Read>
 8002e94:	4603      	mov	r3, r0
 8002e96:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 81b0 	bne.w	8003200 <bmi088_update+0x798>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002ea0:	4b9a      	ldr	r3, [pc, #616]	; (800310c <bmi088_update+0x6a4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	7c1b      	ldrb	r3, [r3, #16]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	4b98      	ldr	r3, [pc, #608]	; (800310c <bmi088_update+0x6a4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	7bdb      	ldrb	r3, [r3, #15]
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002eb6:	4b95      	ldr	r3, [pc, #596]	; (800310c <bmi088_update+0x6a4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	7b9b      	ldrb	r3, [r3, #14]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <bmi088_update+0x6a4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	7b5b      	ldrb	r3, [r3, #13]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002ecc:	4b8f      	ldr	r3, [pc, #572]	; (800310c <bmi088_update+0x6a4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	; (800310c <bmi088_update+0x6a4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	7adb      	ldrb	r3, [r3, #11]
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002ee2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb3c 	bl	8000564 <__aeabi_i2d>
 8002eec:	a384      	add	r3, pc, #528	; (adr r3, 8003100 <bmi088_update+0x698>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fccb 	bl	800088c <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4692      	mov	sl, r2
 8002efc:	469b      	mov	fp, r3
 8002efe:	4b83      	ldr	r3, [pc, #524]	; (800310c <bmi088_update+0x6a4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	7e5b      	ldrb	r3, [r3, #25]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f0a:	4113      	asrs	r3, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb29 	bl	8000564 <__aeabi_i2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4650      	mov	r0, sl
 8002f18:	4659      	mov	r1, fp
 8002f1a:	f7fd fb8d 	bl	8000638 <__aeabi_dmul>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <bmi088_update+0x6b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f2e:	4e77      	ldr	r6, [pc, #476]	; (800310c <bmi088_update+0x6a4>)
 8002f30:	6836      	ldr	r6, [r6, #0]
 8002f32:	f7fd f9c9 	bl	80002c8 <__aeabi_dsub>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb0e 	bl	8000564 <__aeabi_i2d>
 8002f48:	a36d      	add	r3, pc, #436	; (adr r3, 8003100 <bmi088_update+0x698>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fc9d 	bl	800088c <__aeabi_ddiv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4692      	mov	sl, r2
 8002f58:	469b      	mov	fp, r3
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <bmi088_update+0x6a4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f66:	4113      	asrs	r3, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fafb 	bl	8000564 <__aeabi_i2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4650      	mov	r0, sl
 8002f74:	4659      	mov	r1, fp
 8002f76:	f7fd fb5f 	bl	8000638 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <bmi088_update+0x6b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f8a:	4e60      	ldr	r6, [pc, #384]	; (800310c <bmi088_update+0x6a4>)
 8002f8c:	6836      	ldr	r6, [r6, #0]
 8002f8e:	f7fd f99b 	bl	80002c8 <__aeabi_dsub>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002f9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fae0 	bl	8000564 <__aeabi_i2d>
 8002fa4:	a356      	add	r3, pc, #344	; (adr r3, 8003100 <bmi088_update+0x698>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fc6f 	bl	800088c <__aeabi_ddiv>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4692      	mov	sl, r2
 8002fb4:	469b      	mov	fp, r3
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <bmi088_update+0x6a4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	7e5b      	ldrb	r3, [r3, #25]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fc2:	4113      	asrs	r3, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd facd 	bl	8000564 <__aeabi_i2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4650      	mov	r0, sl
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	f7fd fb31 	bl	8000638 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <bmi088_update+0x6b0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fe6:	4e49      	ldr	r6, [pc, #292]	; (800310c <bmi088_update+0x6a4>)
 8002fe8:	6836      	ldr	r6, [r6, #0]
 8002fea:	f7fd f96d 	bl	80002c8 <__aeabi_dsub>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002ff6:	4b45      	ldr	r3, [pc, #276]	; (800310c <bmi088_update+0x6a4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fac2 	bl	8000588 <__aeabi_f2d>
 8003004:	e9c7 0100 	strd	r0, r1, [r7]
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <bmi088_update+0x6a4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8003010:	4b3e      	ldr	r3, [pc, #248]	; (800310c <bmi088_update+0x6a4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fab5 	bl	8000588 <__aeabi_f2d>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4650      	mov	r0, sl
 8003024:	4659      	mov	r1, fp
 8003026:	f7fd fb07 	bl	8000638 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003032:	f7fd f94b 	bl	80002cc <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4934      	ldr	r1, [pc, #208]	; (800310c <bmi088_update+0x6a4>)
 800303c:	680e      	ldr	r6, [r1, #0]
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f7fd fdf1 	bl	8000c28 <__aeabi_d2f>
 8003046:	4603      	mov	r3, r0
 8003048:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <bmi088_update+0x6a4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa97 	bl	8000588 <__aeabi_f2d>
 800305a:	e9c7 0100 	strd	r0, r1, [r7]
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <bmi088_update+0x6a4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 8003066:	4b29      	ldr	r3, [pc, #164]	; (800310c <bmi088_update+0x6a4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fa8a 	bl	8000588 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4650      	mov	r0, sl
 800307a:	4659      	mov	r1, fp
 800307c:	f7fd fadc 	bl	8000638 <__aeabi_dmul>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003088:	f7fd f920 	bl	80002cc <__adddf3>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	491e      	ldr	r1, [pc, #120]	; (800310c <bmi088_update+0x6a4>)
 8003092:	680e      	ldr	r6, [r1, #0]
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f7fd fdc6 	bl	8000c28 <__aeabi_d2f>
 800309c:	4603      	mov	r3, r0
 800309e:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <bmi088_update+0x6a4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fa6c 	bl	8000588 <__aeabi_f2d>
 80030b0:	e9c7 0100 	strd	r0, r1, [r7]
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <bmi088_update+0x6a4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <bmi088_update+0x6a4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fa5f 	bl	8000588 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4650      	mov	r0, sl
 80030d0:	4659      	mov	r1, fp
 80030d2:	f7fd fab1 	bl	8000638 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030de:	f7fd f8f5 	bl	80002cc <__adddf3>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <bmi088_update+0x6a4>)
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd9b 	bl	8000c28 <__aeabi_d2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 80030f8:	e010      	b.n	800311c <bmi088_update+0x6b4>
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	00000000 	.word	0x00000000
 8003104:	40dfffc0 	.word	0x40dfffc0
 8003108:	20000265 	.word	0x20000265
 800310c:	20000260 	.word	0x20000260
 8003110:	20000264 	.word	0x20000264
 8003114:	2000025c 	.word	0x2000025c
 8003118:	20000008 	.word	0x20000008


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 800311c:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <bmi088_update+0x7b0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003124:	4690      	mov	r8, r2
 8003126:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800312a:	a339      	add	r3, pc, #228	; (adr r3, 8003210 <bmi088_update+0x7a8>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	4640      	mov	r0, r8
 8003132:	4649      	mov	r1, r9
 8003134:	f7fd fa80 	bl	8000638 <__aeabi_dmul>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <bmi088_update+0x7b4>)
 8003146:	f7fd fba1 	bl	800088c <__aeabi_ddiv>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7fd fd69 	bl	8000c28 <__aeabi_d2f>
 8003156:	4606      	mov	r6, r0
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <bmi088_update+0x7b0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003160:	a32b      	add	r3, pc, #172	; (adr r3, 8003210 <bmi088_update+0x7a8>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fa67 	bl	8000638 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <bmi088_update+0x7b4>)
 8003178:	f7fd fb88 	bl	800088c <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fd50 	bl	8000c28 <__aeabi_d2f>
 8003188:	4680      	mov	r8, r0
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <bmi088_update+0x7b0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003192:	4614      	mov	r4, r2
 8003194:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003198:	a31d      	add	r3, pc, #116	; (adr r3, 8003210 <bmi088_update+0x7a8>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd fa49 	bl	8000638 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <bmi088_update+0x7b4>)
 80031b4:	f7fd fb6a 	bl	800088c <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f7fd fd32 	bl	8000c28 <__aeabi_d2f>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <bmi088_update+0x7b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80031ce:	eef0 1a67 	vmov.f32	s3, s15
 80031d2:	ee01 2a10 	vmov	s2, r2
 80031d6:	ee00 8a90 	vmov	s1, r8
 80031da:	ee00 6a10 	vmov	s0, r6
 80031de:	f002 f8cf 	bl	8005380 <updateQuaternion>
				quaternionToEuler();
 80031e2:	f002 fa19 	bl	8005618 <quaternionToEuler>

				is_gyro_offset = 1;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <bmi088_update+0x7b8>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <bmi088_update+0x7b0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <bmi088_update+0x7bc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e002      	b.n	8003202 <bmi088_update+0x79a>
				return;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <bmi088_update+0x79a>
					return;
 8003200:	bf00      	nop
		}


}
 8003202:	3724      	adds	r7, #36	; 0x24
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320a:	bf00      	nop
 800320c:	f3af 8000 	nop.w
 8003210:	54442d18 	.word	0x54442d18
 8003214:	400921fb 	.word	0x400921fb
 8003218:	20000260 	.word	0x20000260
 800321c:	40668000 	.word	0x40668000
 8003220:	20000266 	.word	0x20000266
 8003224:	20000264 	.word	0x20000264

08003228 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <bmi088_getAccelDatas_INT+0x18>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	749a      	strb	r2, [r3, #18]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000260 	.word	0x20000260

08003244 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <bmi088_getGyroDatas_INT+0x18>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	745a      	strb	r2, [r3, #17]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000260 	.word	0x20000260

08003260 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8003264:	f7ff fc00 	bl	8002a68 <bmi088_update>
		if(is_gyro_offset == 1)
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <getOffset+0x104>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d1f9      	bne.n	8003264 <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <getOffset+0x108>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003278:	da32      	bge.n	80032e0 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <getOffset+0x10c>)
 800327c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <getOffset+0x110>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003288:	f7fd f820 	bl	80002cc <__adddf3>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4936      	ldr	r1, [pc, #216]	; (800336c <getOffset+0x10c>)
 8003292:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <getOffset+0x10c>)
 8003298:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <getOffset+0x110>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80032a4:	f7fd f812 	bl	80002cc <__adddf3>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	492f      	ldr	r1, [pc, #188]	; (800336c <getOffset+0x10c>)
 80032ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <getOffset+0x10c>)
 80032b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <getOffset+0x110>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80032c0:	f7fd f804 	bl	80002cc <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4928      	ldr	r1, [pc, #160]	; (800336c <getOffset+0x10c>)
 80032ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <getOffset+0x108>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	4a24      	ldr	r2, [pc, #144]	; (8003368 <getOffset+0x108>)
 80032d6:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 getInitialQuaternion();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 80032d8:	4b22      	ldr	r3, [pc, #136]	; (8003364 <getOffset+0x104>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e7c1      	b.n	8003264 <getOffset+0x4>
					 g[0][0] /= 1000.0;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <getOffset+0x10c>)
 80032e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <getOffset+0x114>)
 80032ec:	f7fd face 	bl	800088c <__aeabi_ddiv>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	491d      	ldr	r1, [pc, #116]	; (800336c <getOffset+0x10c>)
 80032f6:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <getOffset+0x10c>)
 80032fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <getOffset+0x114>)
 8003306:	f7fd fac1 	bl	800088c <__aeabi_ddiv>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4917      	ldr	r1, [pc, #92]	; (800336c <getOffset+0x10c>)
 8003310:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <getOffset+0x10c>)
 8003316:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <getOffset+0x114>)
 8003320:	f7fd fab4 	bl	800088c <__aeabi_ddiv>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4910      	ldr	r1, [pc, #64]	; (800336c <getOffset+0x10c>)
 800332a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <getOffset+0x118>)
 8003330:	6819      	ldr	r1, [r3, #0]
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <getOffset+0x10c>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <getOffset+0x118>)
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <getOffset+0x10c>)
 8003342:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003346:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <getOffset+0x118>)
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <getOffset+0x10c>)
 8003350:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003354:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 getInitialQuaternion();
 8003358:	f002 fb0a 	bl	8005970 <getInitialQuaternion>
					 break;
 800335c:	bf00      	nop
		}

	}
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000266 	.word	0x20000266
 8003368:	200002a0 	.word	0x200002a0
 800336c:	20000270 	.word	0x20000270
 8003370:	20000260 	.word	0x20000260
 8003374:	408f4000 	.word	0x408f4000
 8003378:	20000008 	.word	0x20000008

0800337c <calculateCRC>:

union DataPack veriler;
uint8_t bufferPrint[400];

static uint8_t calculateCRC()
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
	int check_sum = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8003386:	2301      	movs	r3, #1
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	e00a      	b.n	80033a2 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <calculateCRC+0x48>)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b3c      	cmp	r3, #60	; 0x3c
 80033a6:	d9f1      	bls.n	800338c <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	425a      	negs	r2, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	bf58      	it	pl
 80033b2:	4253      	negpl	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200002a4 	.word	0x200002a4

080033c8 <sendRF>:

static void sendRF()
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 80033cc:	4806      	ldr	r0, [pc, #24]	; (80033e8 <sendRF+0x20>)
 80033ce:	f005 f985 	bl	80086dc <HAL_DMA_GetState>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d004      	beq.n	80033e2 <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.arr));
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <sendRF+0x24>)
 80033dc:	4804      	ldr	r0, [pc, #16]	; (80033f0 <sendRF+0x28>)
 80033de:	f008 fe25 	bl	800c02c <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000560 	.word	0x20000560
 80033ec:	200002a4 	.word	0x200002a4
 80033f0:	20000450 	.word	0x20000450

080033f4 <sendPC>:

static void sendPC()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 80033f8:	4806      	ldr	r0, [pc, #24]	; (8003414 <sendPC+0x20>)
 80033fa:	f005 f96f 	bl	80086dc <HAL_DMA_GetState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 8003404:	2240      	movs	r2, #64	; 0x40
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <sendPC+0x24>)
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <sendPC+0x28>)
 800340a:	f008 fe0f 	bl	800c02c <HAL_UART_Transmit_DMA>
	}
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000620 	.word	0x20000620
 8003418:	200002a4 	.word	0x200002a4
 800341c:	20000494 	.word	0x20000494

08003420 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6178      	str	r0, [r7, #20]
 8003428:	6139      	str	r1, [r7, #16]
 800342a:	60fa      	str	r2, [r7, #12]
 800342c:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 800342e:	4b7b      	ldr	r3, [pc, #492]	; (800361c <packDatas+0x1fc>)
 8003430:	22ff      	movs	r2, #255	; 0xff
 8003432:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003446:	ee17 3a90 	vmov	r3, s15
 800344a:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4a74      	ldr	r2, [pc, #464]	; (8003620 <packDatas+0x200>)
 8003450:	fb82 1203 	smull	r1, r2, r2, r3
 8003454:	1151      	asrs	r1, r2, #5
 8003456:	17da      	asrs	r2, r3, #31
 8003458:	1a8a      	subs	r2, r1, r2
 800345a:	2164      	movs	r1, #100	; 0x64
 800345c:	fb01 f202 	mul.w	r2, r1, r2
 8003460:	1a9a      	subs	r2, r3, r2
 8003462:	4613      	mov	r3, r2
 8003464:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4a6d      	ldr	r2, [pc, #436]	; (8003620 <packDatas+0x200>)
 800346a:	fb82 1203 	smull	r1, r2, r2, r3
 800346e:	1152      	asrs	r2, r2, #5
 8003470:	17db      	asrs	r3, r3, #31
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4a69      	ldr	r2, [pc, #420]	; (8003620 <packDatas+0x200>)
 800347a:	fb82 1203 	smull	r1, r2, r2, r3
 800347e:	1151      	asrs	r1, r2, #5
 8003480:	17da      	asrs	r2, r3, #31
 8003482:	1a8a      	subs	r2, r1, r2
 8003484:	2164      	movs	r1, #100	; 0x64
 8003486:	fb01 f202 	mul.w	r2, r1, r2
 800348a:	1a9a      	subs	r2, r3, r2
 800348c:	4613      	mov	r3, r2
 800348e:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003490:	7ffb      	ldrb	r3, [r7, #31]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	b25a      	sxtb	r2, r3
 8003496:	7fbb      	ldrb	r3, [r7, #30]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	b2db      	uxtb	r3, r3
 800349c:	b25b      	sxtb	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 80034a4:	7fbb      	ldrb	r3, [r7, #30]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80034b4:	4a59      	ldr	r2, [pc, #356]	; (800361c <packDatas+0x1fc>)
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80034ba:	4a58      	ldr	r2, [pc, #352]	; (800361c <packDatas+0x1fc>)
 80034bc:	7fbb      	ldrb	r3, [r7, #30]
 80034be:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003624 <packDatas+0x204>
 80034ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d2:	ee17 3a90 	vmov	r3, s15
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <packDatas+0x1fc>)
 80034da:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	edd3 7a03 	vldr	s15, [r3, #12]
 80034e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e6:	ee17 3a90 	vmov	r3, s15
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <packDatas+0x1fc>)
 80034ee:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80034f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8003502:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8003506:	4b45      	ldr	r3, [pc, #276]	; (800361c <packDatas+0x1fc>)
 8003508:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003514:	edc7 7a01 	vstr	s15, [r7, #4]
 8003518:	793a      	ldrb	r2, [r7, #4]
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <packDatas+0x1fc>)
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	4a3d      	ldr	r2, [pc, #244]	; (800361c <packDatas+0x1fc>)
 8003526:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
 8003528:	483f      	ldr	r0, [pc, #252]	; (8003628 <packDatas+0x208>)
 800352a:	f003 f93a 	bl	80067a2 <strain_gage_get_vals>
 800352e:	ee07 0a90 	vmov	s15, r0
 8003532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003536:	ee17 0a90 	vmov	r0, s15
 800353a:	f7fd f825 	bl	8000588 <__aeabi_f2d>
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	4b3a      	ldr	r3, [pc, #232]	; (800362c <packDatas+0x20c>)
 8003544:	f7fd f9a2 	bl	800088c <__aeabi_ddiv>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fb22 	bl	8000b98 <__aeabi_d2iz>
 8003554:	4603      	mov	r3, r0
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b30      	ldr	r3, [pc, #192]	; (800361c <packDatas+0x1fc>)
 800355a:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	4a2e      	ldr	r2, [pc, #184]	; (800361c <packDatas+0x1fc>)
 8003562:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <packDatas+0x1fc>)
 800356a:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <packDatas+0x1fc>)
 8003572:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fb53 	bl	8000c28 <__aeabi_d2f>
 8003582:	4603      	mov	r3, r0
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef1 7a67 	vneg.f32	s15, s15
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <packDatas+0x1fc>)
 800358e:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	f7fd fb44 	bl	8000c28 <__aeabi_d2f>
 80035a0:	4603      	mov	r3, r0
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef1 7a67 	vneg.f32	s15, s15
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <packDatas+0x1fc>)
 80035ac:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7fd fb35 	bl	8000c28 <__aeabi_d2f>
 80035be:	4603      	mov	r3, r0
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef1 7a67 	vneg.f32	s15, s15
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <packDatas+0x1fc>)
 80035ca:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80035d4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003630 <packDatas+0x210>
 80035d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <packDatas+0x1fc>)
 80035de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035e8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003630 <packDatas+0x210>
 80035ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <packDatas+0x1fc>)
 80035f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 80035f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d91a      	bls.n	8003634 <packDatas+0x214>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003604:	eeb1 7a67 	vneg.f32	s14, s15
 8003608:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003630 <packDatas+0x210>
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003618:	e013      	b.n	8003642 <packDatas+0x222>
 800361a:	bf00      	nop
 800361c:	200002a4 	.word	0x200002a4
 8003620:	51eb851f 	.word	0x51eb851f
 8003624:	42c80000 	.word	0x42c80000
 8003628:	2000088c 	.word	0x2000088c
 800362c:	408f4000 	.word	0x408f4000
 8003630:	447a0000 	.word	0x447a0000
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800363a:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003630 <packDatas+0x210>
 800363e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <packDatas+0x35c>)
 8003644:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	b25a      	sxtb	r2, r3
 8003652:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <packDatas+0x360>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	135b      	asrs	r3, r3, #13
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	b25b      	sxtb	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b25a      	sxtb	r2, r3
 800366e:	4b44      	ldr	r3, [pc, #272]	; (8003780 <packDatas+0x360>)
 8003670:	edd3 7a01 	vldr	s15, [r3, #4]
 8003674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003678:	ee17 3a90 	vmov	r3, s15
 800367c:	139b      	asrs	r3, r3, #14
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	b25b      	sxtb	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b25a      	sxtb	r2, r3
 800368a:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <packDatas+0x360>)
 800368c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003694:	ee17 3a90 	vmov	r3, s15
 8003698:	13db      	asrs	r3, r3, #15
 800369a:	b25b      	sxtb	r3, r3
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	4b34      	ldr	r3, [pc, #208]	; (800377c <packDatas+0x35c>)
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c0:	ee17 3a90 	vmov	r3, s15
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	4b2d      	ldr	r3, [pc, #180]	; (800377c <packDatas+0x35c>)
 80036c8:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80036ca:	f002 f891 	bl	80057f0 <quaternionToTheta>
 80036ce:	eef0 7a40 	vmov.f32	s15, s0
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <packDatas+0x35c>)
 80036d4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <packDatas+0x360>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e2:	ee17 3a90 	vmov	r3, s15
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <packDatas+0x35c>)
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <packDatas+0x360>)
 80036f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80036fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036fe:	ee17 3a90 	vmov	r3, s15
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	425b      	neglt	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <packDatas+0x35c>)
 800370c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <packDatas+0x360>)
 8003712:	edd3 7a02 	vldr	s15, [r3, #8]
 8003716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371a:	ee17 3a90 	vmov	r3, s15
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb8      	it	lt
 8003722:	425b      	neglt	r3, r3
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <packDatas+0x35c>)
 8003728:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 800372c:	f7ff fe26 	bl	800337c <calculateCRC>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <packDatas+0x35c>)
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <packDatas+0x35c>)
 800373c:	220d      	movs	r2, #13
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <packDatas+0x35c>)
 8003744:	220a      	movs	r2, #10
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	dd06      	ble.n	800376c <packDatas+0x34c>
		lora_activate();
 800375e:	f000 fd69 	bl	8004234 <lora_activate>
		sendRF();
 8003762:	f7ff fe31 	bl	80033c8 <sendRF>
		sendPC();
 8003766:	f7ff fe45 	bl	80033f4 <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 800376a:	e003      	b.n	8003774 <packDatas+0x354>
		sendPC();
 800376c:	f7ff fe42 	bl	80033f4 <sendPC>
		lora_deactivate();
 8003770:	f000 fd72 	bl	8004258 <lora_deactivate>
}
 8003774:	bf00      	nop
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200002a4 	.word	0x200002a4
 8003780:	200009e4 	.word	0x200009e4

08003784 <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	899b      	ldrh	r3, [r3, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	4619      	mov	r1, r3
 8003798:	f005 fb2e 	bl	8008df8 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 800379c:	f003 fe9a 	bl	80074d4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2264      	movs	r2, #100	; 0x64
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	899b      	ldrh	r3, [r3, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4619      	mov	r1, r3
 80037ca:	f005 fb15 	bl	8008df8 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037ce:	f003 fe81 	bl	80074d4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	609a      	str	r2, [r3, #8]
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037ee:	f003 fe71 	bl	80074d4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	1ad2      	subs	r2, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d907      	bls.n	8003812 <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	899b      	ldrh	r3, [r3, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	4619      	mov	r1, r3
 800380e:	f005 faf3 	bl	8008df8 <HAL_GPIO_WritePin>
	}
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003820:	2200      	movs	r2, #0
 8003822:	2110      	movs	r1, #16
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <SELECT+0x14>)
 8003826:	f005 fae7 	bl	8008df8 <HAL_GPIO_WritePin>
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40020000 	.word	0x40020000

08003834 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003838:	2201      	movs	r2, #1
 800383a:	2110      	movs	r1, #16
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <DESELECT+0x14>)
 800383e:	f005 fadb 	bl	8008df8 <HAL_GPIO_WritePin>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40020000 	.word	0x40020000

0800384c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003856:	bf00      	nop
 8003858:	4808      	ldr	r0, [pc, #32]	; (800387c <SPI_TxByte+0x30>)
 800385a:	f008 fa01 	bl	800bc60 <HAL_SPI_GetState>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d1f9      	bne.n	8003858 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8003864:	1df9      	adds	r1, r7, #7
 8003866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386a:	2201      	movs	r2, #1
 800386c:	4803      	ldr	r0, [pc, #12]	; (800387c <SPI_TxByte+0x30>)
 800386e:	f007 ff19 	bl	800b6a4 <HAL_SPI_Transmit>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200003f8 	.word	0x200003f8

08003880 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8003886:	23ff      	movs	r3, #255	; 0xff
 8003888:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800388e:	bf00      	nop
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <SPI_RxByte+0x38>)
 8003892:	f008 f9e5 	bl	800bc60 <HAL_SPI_GetState>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d1f9      	bne.n	8003890 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800389c:	1dba      	adds	r2, r7, #6
 800389e:	1df9      	adds	r1, r7, #7
 80038a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2301      	movs	r3, #1
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <SPI_RxByte+0x38>)
 80038aa:	f008 f837 	bl	800b91c <HAL_SPI_TransmitReceive>

  return data;
 80038ae:	79bb      	ldrb	r3, [r7, #6]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200003f8 	.word	0x200003f8

080038bc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80038c4:	f7ff ffdc 	bl	8003880 <SPI_RxByte>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	701a      	strb	r2, [r3, #0]
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <SD_ReadyWait+0x34>)
 80038e0:	2232      	movs	r2, #50	; 0x32
 80038e2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80038e4:	f7ff ffcc 	bl	8003880 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80038e8:	f7ff ffca 	bl	8003880 <SPI_RxByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2bff      	cmp	r3, #255	; 0xff
 80038f4:	d004      	beq.n	8003900 <SD_ReadyWait+0x28>
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <SD_ReadyWait+0x34>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f3      	bne.n	80038e8 <SD_ReadyWait+0x10>

  return res;
 8003900:	79fb      	ldrb	r3, [r7, #7]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200009f2 	.word	0x200009f2

08003910 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8003916:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800391a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800391c:	f7ff ff8a 	bl	8003834 <DESELECT>

  for(int i = 0; i < 10; i++)
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e005      	b.n	8003932 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8003926:	20ff      	movs	r0, #255	; 0xff
 8003928:	f7ff ff90 	bl	800384c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3301      	adds	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b09      	cmp	r3, #9
 8003936:	ddf6      	ble.n	8003926 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8003938:	f7ff ff70 	bl	800381c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8003950:	2395      	movs	r3, #149	; 0x95
 8003952:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e009      	b.n	800396e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800395a:	1d3a      	adds	r2, r7, #4
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff72 	bl	800384c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b05      	cmp	r3, #5
 8003972:	ddf2      	ble.n	800395a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8003974:	e002      	b.n	800397c <SD_PowerOn+0x6c>
  {
    Count--;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3b01      	subs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800397c:	f7ff ff80 	bl	8003880 <SPI_RxByte>
 8003980:	4603      	mov	r3, r0
 8003982:	2b01      	cmp	r3, #1
 8003984:	d002      	beq.n	800398c <SD_PowerOn+0x7c>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f4      	bne.n	8003976 <SD_PowerOn+0x66>
  }

  DESELECT();
 800398c:	f7ff ff52 	bl	8003834 <DESELECT>
  SPI_TxByte(0XFF);
 8003990:	20ff      	movs	r0, #255	; 0xff
 8003992:	f7ff ff5b 	bl	800384c <SPI_TxByte>

  PowerFlag = 1;
 8003996:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <SD_PowerOn+0x94>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200002e5 	.word	0x200002e5

080039a8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <SD_PowerOff+0x14>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	200002e5 	.word	0x200002e5

080039c0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <SD_CheckPower+0x14>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	200002e5 	.word	0x200002e5

080039d8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <SD_RxDataBlock+0x68>)
 80039e4:	220a      	movs	r2, #10
 80039e6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80039e8:	f7ff ff4a 	bl	8003880 <SPI_RxByte>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2bff      	cmp	r3, #255	; 0xff
 80039f4:	d104      	bne.n	8003a00 <SD_RxDataBlock+0x28>
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <SD_RxDataBlock+0x68>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f3      	bne.n	80039e8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2bfe      	cmp	r3, #254	; 0xfe
 8003a04:	d001      	beq.n	8003a0a <SD_RxDataBlock+0x32>
    return FALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e016      	b.n	8003a38 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff53 	bl	80038bc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff4d 	bl	80038bc <SPI_RxBytePtr>
  } while(btr -= 2);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3b02      	subs	r3, #2
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ed      	bne.n	8003a0a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8003a2e:	f7ff ff27 	bl	8003880 <SPI_RxByte>
  SPI_RxByte();
 8003a32:	f7ff ff25 	bl	8003880 <SPI_RxByte>

  return TRUE;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200009f1 	.word	0x200009f1

08003a44 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0, wc;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
  uint8_t i = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003a58:	f7ff ff3e 	bl	80038d8 <SD_ReadyWait>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2bff      	cmp	r3, #255	; 0xff
 8003a60:	d001      	beq.n	8003a66 <SD_TxDataBlock+0x22>
    return FALSE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e040      	b.n	8003ae8 <SD_TxDataBlock+0xa4>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff feef 	bl	800384c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	2bfd      	cmp	r3, #253	; 0xfd
 8003a72:	d031      	beq.n	8003ad8 <SD_TxDataBlock+0x94>
  {
    wc = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fee3 	bl	800384c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fedc 	bl	800384c <SPI_TxByte>
    } while (--wc);
 8003a94:	7bbb      	ldrb	r3, [r7, #14]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	73bb      	strb	r3, [r7, #14]
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1eb      	bne.n	8003a78 <SD_TxDataBlock+0x34>

    SPI_RxByte();       /* CRC 무시 */
 8003aa0:	f7ff feee 	bl	8003880 <SPI_RxByte>
    SPI_RxByte();
 8003aa4:	f7ff feec 	bl	8003880 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8003aa8:	e00b      	b.n	8003ac2 <SD_TxDataBlock+0x7e>
    {
      resp = SPI_RxByte();
 8003aaa:	f7ff fee9 	bl	8003880 <SPI_RxByte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d006      	beq.n	8003aca <SD_TxDataBlock+0x86>
        break;

      i++;
 8003abc:	7b7b      	ldrb	r3, [r7, #13]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8003ac2:	7b7b      	ldrb	r3, [r7, #13]
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d9f0      	bls.n	8003aaa <SD_TxDataBlock+0x66>
 8003ac8:	e000      	b.n	8003acc <SD_TxDataBlock+0x88>
        break;
 8003aca:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003acc:	bf00      	nop
 8003ace:	f7ff fed7 	bl	8003880 <SPI_RxByte>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0fa      	beq.n	8003ace <SD_TxDataBlock+0x8a>
  }

  if ((resp & 0x1F) == 0x05)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d101      	bne.n	8003ae6 <SD_TxDataBlock+0xa2>
    return TRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <SD_TxDataBlock+0xa4>
  else
    return FALSE;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003afc:	f7ff feec 	bl	80038d8 <SD_ReadyWait>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2bff      	cmp	r3, #255	; 0xff
 8003b04:	d001      	beq.n	8003b0a <SD_SendCmd+0x1a>
    return 0xFF;
 8003b06:	23ff      	movs	r3, #255	; 0xff
 8003b08:	e040      	b.n	8003b8c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fe9d 	bl	800384c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fe97 	bl	800384c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fe91 	bl	800384c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fe8b 	bl	800384c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fe86 	bl	800384c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d101      	bne.n	8003b4e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003b4a:	2395      	movs	r3, #149	; 0x95
 8003b4c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b48      	cmp	r3, #72	; 0x48
 8003b52:	d101      	bne.n	8003b58 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003b54:	2387      	movs	r3, #135	; 0x87
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fe76 	bl	800384c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	2b4c      	cmp	r3, #76	; 0x4c
 8003b64:	d101      	bne.n	8003b6a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8003b66:	f7ff fe8b 	bl	8003880 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003b6e:	f7ff fe87 	bl	8003880 <SPI_RxByte>
 8003b72:	4603      	mov	r3, r0
 8003b74:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003b76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da05      	bge.n	8003b8a <SD_SendCmd+0x9a>
 8003b7e:	7bbb      	ldrb	r3, [r7, #14]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	73bb      	strb	r3, [r7, #14]
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f1      	bne.n	8003b6e <SD_SendCmd+0x7e>

  return res;
 8003b8a:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d5      	b.n	8003d54 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <SD_disk_initialize+0x1c8>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <SD_disk_initialize+0x2a>
    return Stat;
 8003bb6:	4b69      	ldr	r3, [pc, #420]	; (8003d5c <SD_disk_initialize+0x1c8>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e0ca      	b.n	8003d54 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8003bbe:	f7ff fea7 	bl	8003910 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8003bc2:	f7ff fe2b 	bl	800381c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003bca:	2100      	movs	r1, #0
 8003bcc:	2040      	movs	r0, #64	; 0x40
 8003bce:	f7ff ff8f 	bl	8003af0 <SD_SendCmd>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	f040 80a5 	bne.w	8003d24 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003bda:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <SD_disk_initialize+0x1cc>)
 8003bdc:	2264      	movs	r2, #100	; 0x64
 8003bde:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003be0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003be4:	2048      	movs	r0, #72	; 0x48
 8003be6:	f7ff ff83 	bl	8003af0 <SD_SendCmd>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d158      	bne.n	8003ca2 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e00c      	b.n	8003c10 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8003bf6:	7bfc      	ldrb	r4, [r7, #15]
 8003bf8:	f7ff fe42 	bl	8003880 <SPI_RxByte>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f104 0310 	add.w	r3, r4, #16
 8003c04:	443b      	add	r3, r7
 8003c06:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d9ef      	bls.n	8003bf6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003c16:	7abb      	ldrb	r3, [r7, #10]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 8083 	bne.w	8003d24 <SD_disk_initialize+0x190>
 8003c1e:	7afb      	ldrb	r3, [r7, #11]
 8003c20:	2baa      	cmp	r3, #170	; 0xaa
 8003c22:	d17f      	bne.n	8003d24 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003c24:	2100      	movs	r1, #0
 8003c26:	2077      	movs	r0, #119	; 0x77
 8003c28:	f7ff ff62 	bl	8003af0 <SD_SendCmd>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d807      	bhi.n	8003c42 <SD_disk_initialize+0xae>
 8003c32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c36:	2069      	movs	r0, #105	; 0x69
 8003c38:	f7ff ff5a 	bl	8003af0 <SD_SendCmd>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <SD_disk_initialize+0x1cc>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1eb      	bne.n	8003c24 <SD_disk_initialize+0x90>
 8003c4c:	e000      	b.n	8003c50 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003c4e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003c50:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <SD_disk_initialize+0x1cc>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d064      	beq.n	8003d24 <SD_disk_initialize+0x190>
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	207a      	movs	r0, #122	; 0x7a
 8003c5e:	f7ff ff47 	bl	8003af0 <SD_SendCmd>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d15d      	bne.n	8003d24 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	e00c      	b.n	8003c88 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003c6e:	7bfc      	ldrb	r4, [r7, #15]
 8003c70:	f7ff fe06 	bl	8003880 <SPI_RxByte>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	f104 0310 	add.w	r3, r4, #16
 8003c7c:	443b      	add	r3, r7
 8003c7e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	3301      	adds	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d9ef      	bls.n	8003c6e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8003c8e:	7a3b      	ldrb	r3, [r7, #8]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <SD_disk_initialize+0x108>
 8003c98:	2306      	movs	r3, #6
 8003c9a:	e000      	b.n	8003c9e <SD_disk_initialize+0x10a>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	73bb      	strb	r3, [r7, #14]
 8003ca0:	e040      	b.n	8003d24 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2077      	movs	r0, #119	; 0x77
 8003ca6:	f7ff ff23 	bl	8003af0 <SD_SendCmd>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d808      	bhi.n	8003cc2 <SD_disk_initialize+0x12e>
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2069      	movs	r0, #105	; 0x69
 8003cb4:	f7ff ff1c 	bl	8003af0 <SD_SendCmd>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d801      	bhi.n	8003cc2 <SD_disk_initialize+0x12e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e000      	b.n	8003cc4 <SD_disk_initialize+0x130>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8003cc6:	7bbb      	ldrb	r3, [r7, #14]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d10e      	bne.n	8003cea <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2077      	movs	r0, #119	; 0x77
 8003cd0:	f7ff ff0e 	bl	8003af0 <SD_SendCmd>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d80e      	bhi.n	8003cf8 <SD_disk_initialize+0x164>
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2069      	movs	r0, #105	; 0x69
 8003cde:	f7ff ff07 	bl	8003af0 <SD_SendCmd>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003ce8:	e00d      	b.n	8003d06 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003cea:	2100      	movs	r1, #0
 8003cec:	2041      	movs	r0, #65	; 0x41
 8003cee:	f7ff feff 	bl	8003af0 <SD_SendCmd>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003cf8:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <SD_disk_initialize+0x1cc>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e1      	bne.n	8003cc6 <SD_disk_initialize+0x132>
 8003d02:	e000      	b.n	8003d06 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8003d04:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <SD_disk_initialize+0x1cc>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <SD_disk_initialize+0x18c>
 8003d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d14:	2050      	movs	r0, #80	; 0x50
 8003d16:	f7ff feeb 	bl	8003af0 <SD_SendCmd>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <SD_disk_initialize+0x1d0>)
 8003d26:	7bbb      	ldrb	r3, [r7, #14]
 8003d28:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003d2a:	f7ff fd83 	bl	8003834 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003d2e:	f7ff fda7 	bl	8003880 <SPI_RxByte>

  if (type)
 8003d32:	7bbb      	ldrb	r3, [r7, #14]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <SD_disk_initialize+0x1c8>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <SD_disk_initialize+0x1c8>)
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e001      	b.n	8003d4e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003d4a:	f7ff fe2d 	bl	80039a8 <SD_PowerOff>
  }

  return Stat;
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <SD_disk_initialize+0x1c8>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd90      	pop	{r4, r7, pc}
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	200009f1 	.word	0x200009f1
 8003d64:	200002e4 	.word	0x200002e4

08003d68 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <SD_disk_status+0x14>
    return STA_NOINIT;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e002      	b.n	8003d82 <SD_disk_status+0x1a>

  return Stat;
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <SD_disk_status+0x28>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <SD_disk_read+0x1c>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <SD_disk_read+0x20>
    return RES_PARERR;
 8003db0:	2304      	movs	r3, #4
 8003db2:	e051      	b.n	8003e58 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8003db4:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <SD_disk_read+0xcc>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e048      	b.n	8003e58 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8003dc6:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <SD_disk_read+0xd0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	025b      	lsls	r3, r3, #9
 8003dd6:	607b      	str	r3, [r7, #4]

  SELECT();
 8003dd8:	f7ff fd20 	bl	800381c <SELECT>

  if (count == 1)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d111      	bne.n	8003e06 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	2051      	movs	r0, #81	; 0x51
 8003de6:	f7ff fe83 	bl	8003af0 <SD_SendCmd>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d129      	bne.n	8003e44 <SD_disk_read+0xb0>
 8003df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df4:	68b8      	ldr	r0, [r7, #8]
 8003df6:	f7ff fdef 	bl	80039d8 <SD_RxDataBlock>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d021      	beq.n	8003e44 <SD_disk_read+0xb0>
      count = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	e01e      	b.n	8003e44 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	2052      	movs	r0, #82	; 0x52
 8003e0a:	f7ff fe71 	bl	8003af0 <SD_SendCmd>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d117      	bne.n	8003e44 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8003e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e18:	68b8      	ldr	r0, [r7, #8]
 8003e1a:	f7ff fddd 	bl	80039d8 <SD_RxDataBlock>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e2a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ed      	bne.n	8003e14 <SD_disk_read+0x80>
 8003e38:	e000      	b.n	8003e3c <SD_disk_read+0xa8>
          break;
 8003e3a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	204c      	movs	r0, #76	; 0x4c
 8003e40:	f7ff fe56 	bl	8003af0 <SD_SendCmd>
    }
  }

  DESELECT();
 8003e44:	f7ff fcf6 	bl	8003834 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8003e48:	f7ff fd1a 	bl	8003880 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000000 	.word	0x20000000
 8003e64:	200002e4 	.word	0x200002e4

08003e68 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <SD_disk_write+0x1c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <SD_disk_write+0x20>
    return RES_PARERR;
 8003e84:	2304      	movs	r3, #4
 8003e86:	e06b      	b.n	8003f60 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <SD_disk_write+0x100>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e062      	b.n	8003f60 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <SD_disk_write+0x100>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SD_disk_write+0x44>
    return RES_WRPRT;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e059      	b.n	8003f60 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <SD_disk_write+0x104>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	025b      	lsls	r3, r3, #9
 8003ebc:	607b      	str	r3, [r7, #4]

  SELECT();
 8003ebe:	f7ff fcad 	bl	800381c <SELECT>

  if (count == 1)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d110      	bne.n	8003eea <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	2058      	movs	r0, #88	; 0x58
 8003ecc:	f7ff fe10 	bl	8003af0 <SD_SendCmd>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13a      	bne.n	8003f4c <SD_disk_write+0xe4>
 8003ed6:	21fe      	movs	r1, #254	; 0xfe
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	f7ff fdb3 	bl	8003a44 <SD_TxDataBlock>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d033      	beq.n	8003f4c <SD_disk_write+0xe4>
      count = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	e030      	b.n	8003f4c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <SD_disk_write+0x104>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	2077      	movs	r0, #119	; 0x77
 8003efa:	f7ff fdf9 	bl	8003af0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	2057      	movs	r0, #87	; 0x57
 8003f02:	f7ff fdf5 	bl	8003af0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	2059      	movs	r0, #89	; 0x59
 8003f0a:	f7ff fdf1 	bl	8003af0 <SD_SendCmd>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11b      	bne.n	8003f4c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003f14:	21fc      	movs	r1, #252	; 0xfc
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f7ff fd94 	bl	8003a44 <SD_TxDataBlock>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f28:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ee      	bne.n	8003f14 <SD_disk_write+0xac>
 8003f36:	e000      	b.n	8003f3a <SD_disk_write+0xd2>
          break;
 8003f38:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003f3a:	21fd      	movs	r1, #253	; 0xfd
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff fd81 	bl	8003a44 <SD_TxDataBlock>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <SD_disk_write+0xe4>
      {
        count = 1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003f4c:	f7ff fc72 	bl	8003834 <DESELECT>
  SPI_RxByte();
 8003f50:	f7ff fc96 	bl	8003880 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	200002e4 	.word	0x200002e4

08003f70 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b08b      	sub	sp, #44	; 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	603a      	str	r2, [r7, #0]
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	e11b      	b.n	80041c6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8003f94:	79bb      	ldrb	r3, [r7, #6]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d129      	bne.n	8003fee <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d017      	beq.n	8003fd2 <SD_disk_ioctl+0x62>
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	dc1f      	bgt.n	8003fe6 <SD_disk_ioctl+0x76>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <SD_disk_ioctl+0x40>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00b      	beq.n	8003fc6 <SD_disk_ioctl+0x56>
 8003fae:	e01a      	b.n	8003fe6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003fb0:	f7ff fd06 	bl	80039c0 <SD_CheckPower>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003fba:	f7ff fcf5 	bl	80039a8 <SD_PowerOff>
      res = RES_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fc4:	e0fd      	b.n	80041c2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8003fc6:	f7ff fca3 	bl	8003910 <SD_PowerOn>
      res = RES_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fd0:	e0f7      	b.n	80041c2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	1c5c      	adds	r4, r3, #1
 8003fd6:	f7ff fcf3 	bl	80039c0 <SD_CheckPower>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fe4:	e0ed      	b.n	80041c2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fec:	e0e9      	b.n	80041c2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003fee:	4b78      	ldr	r3, [pc, #480]	; (80041d0 <SD_disk_ioctl+0x260>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0e2      	b.n	80041c6 <SD_disk_ioctl+0x256>

    SELECT();
 8004000:	f7ff fc0c 	bl	800381c <SELECT>

    switch (ctrl)
 8004004:	79bb      	ldrb	r3, [r7, #6]
 8004006:	2b0d      	cmp	r3, #13
 8004008:	f200 80cc 	bhi.w	80041a4 <SD_disk_ioctl+0x234>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <SD_disk_ioctl+0xa4>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	0800410f 	.word	0x0800410f
 8004018:	0800404d 	.word	0x0800404d
 800401c:	080040ff 	.word	0x080040ff
 8004020:	080041a5 	.word	0x080041a5
 8004024:	080041a5 	.word	0x080041a5
 8004028:	080041a5 	.word	0x080041a5
 800402c:	080041a5 	.word	0x080041a5
 8004030:	080041a5 	.word	0x080041a5
 8004034:	080041a5 	.word	0x080041a5
 8004038:	080041a5 	.word	0x080041a5
 800403c:	080041a5 	.word	0x080041a5
 8004040:	08004121 	.word	0x08004121
 8004044:	08004145 	.word	0x08004145
 8004048:	08004169 	.word	0x08004169
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800404c:	2100      	movs	r1, #0
 800404e:	2049      	movs	r0, #73	; 0x49
 8004050:	f7ff fd4e 	bl	8003af0 <SD_SendCmd>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 80a8 	bne.w	80041ac <SD_disk_ioctl+0x23c>
 800405c:	f107 030c 	add.w	r3, r7, #12
 8004060:	2110      	movs	r1, #16
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fcb8 	bl	80039d8 <SD_RxDataBlock>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 809e 	beq.w	80041ac <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8004070:	7b3b      	ldrb	r3, [r7, #12]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10e      	bne.n	8004098 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800407a:	7d7b      	ldrb	r3, [r7, #21]
 800407c:	b29a      	uxth	r2, r3
 800407e:	7d3b      	ldrb	r3, [r7, #20]
 8004080:	b29b      	uxth	r3, r3
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	b29b      	uxth	r3, r3
 8004086:	4413      	add	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800408e:	8bfb      	ldrh	r3, [r7, #30]
 8004090:	029a      	lsls	r2, r3, #10
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e02e      	b.n	80040f6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004098:	7c7b      	ldrb	r3, [r7, #17]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	7dbb      	ldrb	r3, [r7, #22]
 80040a2:	09db      	lsrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	7d7b      	ldrb	r3, [r7, #21]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 0306 	and.w	r3, r3, #6
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3302      	adds	r3, #2
 80040bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80040c0:	7d3b      	ldrb	r3, [r7, #20]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	7cbb      	ldrb	r3, [r7, #18]
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80040e8:	8bfa      	ldrh	r2, [r7, #30]
 80040ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040ee:	3b09      	subs	r3, #9
 80040f0:	409a      	lsls	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80040fc:	e056      	b.n	80041ac <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004104:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800410c:	e055      	b.n	80041ba <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800410e:	f7ff fbe3 	bl	80038d8 <SD_ReadyWait>
 8004112:	4603      	mov	r3, r0
 8004114:	2bff      	cmp	r3, #255	; 0xff
 8004116:	d14b      	bne.n	80041b0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800411e:	e047      	b.n	80041b0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004120:	2100      	movs	r1, #0
 8004122:	2049      	movs	r0, #73	; 0x49
 8004124:	f7ff fce4 	bl	8003af0 <SD_SendCmd>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d142      	bne.n	80041b4 <SD_disk_ioctl+0x244>
 800412e:	2110      	movs	r1, #16
 8004130:	6a38      	ldr	r0, [r7, #32]
 8004132:	f7ff fc51 	bl	80039d8 <SD_RxDataBlock>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d03b      	beq.n	80041b4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004142:	e037      	b.n	80041b4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004144:	2100      	movs	r1, #0
 8004146:	204a      	movs	r0, #74	; 0x4a
 8004148:	f7ff fcd2 	bl	8003af0 <SD_SendCmd>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d132      	bne.n	80041b8 <SD_disk_ioctl+0x248>
 8004152:	2110      	movs	r1, #16
 8004154:	6a38      	ldr	r0, [r7, #32]
 8004156:	f7ff fc3f 	bl	80039d8 <SD_RxDataBlock>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02b      	beq.n	80041b8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004166:	e027      	b.n	80041b8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8004168:	2100      	movs	r1, #0
 800416a:	207a      	movs	r0, #122	; 0x7a
 800416c:	f7ff fcc0 	bl	8003af0 <SD_SendCmd>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8004176:	2300      	movs	r3, #0
 8004178:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800417c:	e00b      	b.n	8004196 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800417e:	6a3c      	ldr	r4, [r7, #32]
 8004180:	1c63      	adds	r3, r4, #1
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	f7ff fb7c 	bl	8003880 <SPI_RxByte>
 8004188:	4603      	mov	r3, r0
 800418a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800418c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004190:	3301      	adds	r3, #1
 8004192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800419a:	2b03      	cmp	r3, #3
 800419c:	d9ef      	bls.n	800417e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041aa:	e006      	b.n	80041ba <SD_disk_ioctl+0x24a>
      break;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <SD_disk_ioctl+0x24a>
      break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <SD_disk_ioctl+0x24a>
      break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <SD_disk_ioctl+0x24a>
      break;
 80041b8:	bf00      	nop
    }

    DESELECT();
 80041ba:	f7ff fb3b 	bl	8003834 <DESELECT>
    SPI_RxByte();
 80041be:	f7ff fb5f 	bl	8003880 <SPI_RxByte>
  }

  return res;
 80041c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	372c      	adds	r7, #44	; 0x2c
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
 80041e0:	460b      	mov	r3, r1
 80041e2:	71bb      	strb	r3, [r7, #6]
 80041e4:	4613      	mov	r3, r2
 80041e6:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80041ec:	79bb      	ldrb	r3, [r7, #6]
 80041ee:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80041f0:	797b      	ldrb	r3, [r7, #5]
 80041f2:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e00c      	b.n	8004214 <send_command+0x40>
        command[3 + i] = data[i];
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	441a      	add	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3303      	adds	r3, #3
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	3318      	adds	r3, #24
 8004208:	443b      	add	r3, r7
 800420a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3301      	adds	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b08      	cmp	r3, #8
 8004218:	ddef      	ble.n	80041fa <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 800421a:	f107 0108 	add.w	r1, r7, #8
 800421e:	2364      	movs	r3, #100	; 0x64
 8004220:	220c      	movs	r2, #12
 8004222:	4803      	ldr	r0, [pc, #12]	; (8004230 <send_command+0x5c>)
 8004224:	f007 fe70 	bl	800bf08 <HAL_UART_Transmit>
}
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000450 	.word	0x20000450

08004234 <lora_activate>:

void lora_activate()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800423e:	4805      	ldr	r0, [pc, #20]	; (8004254 <lora_activate+0x20>)
 8004240:	f004 fdda 	bl	8008df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800424a:	4802      	ldr	r0, [pc, #8]	; (8004254 <lora_activate+0x20>)
 800424c:	f004 fdd4 	bl	8008df8 <HAL_GPIO_WritePin>
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40020800 	.word	0x40020800

08004258 <lora_deactivate>:

void lora_deactivate()
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 800425c:	2201      	movs	r2, #1
 800425e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <lora_deactivate+0x20>)
 8004264:	f004 fdc8 	bl	8008df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8004268:	2201      	movs	r2, #1
 800426a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800426e:	4802      	ldr	r0, [pc, #8]	; (8004278 <lora_deactivate+0x20>)
 8004270:	f004 fdc2 	bl	8008df8 <HAL_GPIO_WritePin>
}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40020800 	.word	0x40020800

0800427c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2208      	movs	r2, #8
 80042b2:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2207      	movs	r2, #7
 80042b8:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	79db      	ldrb	r3, [r3, #7]
 80042be:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	799b      	ldrb	r3, [r3, #6]
 80042c4:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7a5b      	ldrb	r3, [r3, #9]
 80042ca:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7c5b      	ldrb	r3, [r3, #17]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	4313      	orrs	r3, r2
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	789a      	ldrb	r2, [r3, #2]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7a9b      	ldrb	r3, [r3, #10]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	78db      	ldrb	r3, [r3, #3]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7a1b      	ldrb	r3, [r3, #8]
 80042fc:	2b53      	cmp	r3, #83	; 0x53
 80042fe:	d902      	bls.n	8004306 <lora_configure+0x8a>
    	config->channel = 83;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2253      	movs	r2, #83	; 0x53
 8004304:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7a1b      	ldrb	r3, [r3, #8]
 800430a:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7ada      	ldrb	r2, [r3, #11]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7b1b      	ldrb	r3, [r3, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7b5b      	ldrb	r3, [r3, #13]
 800431c:	4313      	orrs	r3, r2
 800431e:	b2da      	uxtb	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7b9b      	ldrb	r3, [r3, #14]
 8004324:	4313      	orrs	r3, r2
 8004326:	b2da      	uxtb	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7bdb      	ldrb	r3, [r3, #15]
 800432c:	4313      	orrs	r3, r2
 800432e:	b2da      	uxtb	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7c1b      	ldrb	r3, [r3, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	b2db      	uxtb	r3, r3
 8004338:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	795b      	ldrb	r3, [r3, #5]
 800433e:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	2209      	movs	r2, #9
 800434c:	2100      	movs	r1, #0
 800434e:	20c0      	movs	r0, #192	; 0xc0
 8004350:	f7ff ff40 	bl	80041d4 <send_command>
}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	0000      	movs	r0, r0
	...

08004360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004366:	f003 f84f 	bl	8007408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800436a:	f000 fb41 	bl	80049f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800436e:	f000 fdb9 	bl	8004ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004372:	f000 fd71 	bl	8004e58 <MX_DMA_Init>
  MX_I2C3_Init();
 8004376:	f000 fc3d 	bl	8004bf4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800437a:	f000 fcef 	bl	8004d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800437e:	f000 fd17 	bl	8004db0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004382:	f000 fc09 	bl	8004b98 <MX_I2C1_Init>
  MX_ADC1_Init();
 8004386:	f000 fba7 	bl	8004ad8 <MX_ADC1_Init>
  MX_UART4_Init();
 800438a:	f000 fcbd 	bl	8004d08 <MX_UART4_Init>
  MX_RTC_Init();
 800438e:	f000 fc5f 	bl	8004c50 <MX_RTC_Init>
  MX_SPI1_Init();
 8004392:	f000 fc83 	bl	8004c9c <MX_SPI1_Init>
  MX_FATFS_Init();
 8004396:	f009 f84f 	bl	800d438 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800439a:	f000 fd33 	bl	8004e04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2102      	movs	r1, #2
 80043a2:	2009      	movs	r0, #9
 80043a4:	f003 fdd5 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80043a8:	2200      	movs	r2, #0
 80043aa:	2102      	movs	r1, #2
 80043ac:	200a      	movs	r0, #10
 80043ae:	f003 fdd0 	bl	8007f52 <HAL_NVIC_SetPriority>

  usr_fatfsInitial();
 80043b2:	f002 fb75 	bl	8006aa0 <usr_fatfsInitial>
  sdInitials();
 80043b6:	f002 fb79 	bl	8006aac <sdInitials>

  lora_deactivate();
 80043ba:	f7ff ff4d 	bl	8004258 <lora_deactivate>
  HAL_PWR_EnableBkUpAccess();
 80043be:	f005 fd57 	bl	8009e70 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80043c2:	4ba8      	ldr	r3, [pc, #672]	; (8004664 <main+0x304>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4aa7      	ldr	r2, [pc, #668]	; (8004664 <main+0x304>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80043ce:	f005 fd63 	bl	8009e98 <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043d2:	2200      	movs	r2, #0
 80043d4:	49a4      	ldr	r1, [pc, #656]	; (8004668 <main+0x308>)
 80043d6:	48a5      	ldr	r0, [pc, #660]	; (800466c <main+0x30c>)
 80043d8:	f006 ff5c 	bl	800b294 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80043dc:	2200      	movs	r2, #0
 80043de:	49a4      	ldr	r1, [pc, #656]	; (8004670 <main+0x310>)
 80043e0:	48a2      	ldr	r0, [pc, #648]	; (800466c <main+0x30c>)
 80043e2:	f006 ffb5 	bl	800b350 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80043e6:	2005      	movs	r0, #5
 80043e8:	f003 f880 	bl	80074ec <HAL_Delay>
  bme280_begin();
 80043ec:	f000 fe30 	bl	8005050 <bme280_begin>
  bmi088_begin();
 80043f0:	f000 fe44 	bl	800507c <bmi088_begin>

  if(measure_abs_time(sTime, sDate) > 1)
 80043f4:	4b9c      	ldr	r3, [pc, #624]	; (8004668 <main+0x308>)
 80043f6:	4a9e      	ldr	r2, [pc, #632]	; (8004670 <main+0x310>)
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004402:	f001 fc2d 	bl	8005c60 <measure_abs_time>
 8004406:	4603      	mov	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	f240 809a 	bls.w	8004542 <main+0x1e2>
  {
	  if(is_BMI_ok)
 800440e:	4b99      	ldr	r3, [pc, #612]	; (8004674 <main+0x314>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <main+0xba>
		  bmi088_config();
 8004416:	f7fe f8e3 	bl	80025e0 <bmi088_config>
	  if(is_BME_ok)
 800441a:	4b97      	ldr	r3, [pc, #604]	; (8004678 <main+0x318>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <main+0xc6>
		  bme280_config();
 8004422:	f7fd fb45 	bl	8001ab0 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 8004426:	4b95      	ldr	r3, [pc, #596]	; (800467c <main+0x31c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 800442e:	4b93      	ldr	r3, [pc, #588]	; (800467c <main+0x31c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 8004438:	4b90      	ldr	r3, [pc, #576]	; (800467c <main+0x31c>)
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <main+0x31c>)
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <main+0x31c>)
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 8004468:	4b84      	ldr	r3, [pc, #528]	; (800467c <main+0x31c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8004472:	4b82      	ldr	r3, [pc, #520]	; (800467c <main+0x31c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 800447c:	4b7f      	ldr	r3, [pc, #508]	; (800467c <main+0x31c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 8004486:	4b7d      	ldr	r3, [pc, #500]	; (800467c <main+0x31c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e00a      	b.n	80044ac <main+0x14c>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800449a:	4879      	ldr	r0, [pc, #484]	; (8004680 <main+0x320>)
 800449c:	f004 fcc5 	bl	8008e2a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80044a0:	2032      	movs	r0, #50	; 0x32
 80044a2:	f003 f823 	bl	80074ec <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b13      	cmp	r3, #19
 80044b0:	ddf1      	ble.n	8004496 <main+0x136>
	  }

	  loraBegin();
 80044b2:	f000 fe05 	bl	80050c0 <loraBegin>
	  lora_activate();
 80044b6:	f7ff febd 	bl	8004234 <lora_activate>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80044ba:	2364      	movs	r3, #100	; 0x64
 80044bc:	2213      	movs	r2, #19
 80044be:	4971      	ldr	r1, [pc, #452]	; (8004684 <main+0x324>)
 80044c0:	4871      	ldr	r0, [pc, #452]	; (8004688 <main+0x328>)
 80044c2:	f007 fd21 	bl	800bf08 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok){
 80044c6:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <main+0x314>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <main+0x172>
		  getOffset();
 80044ce:	f7fe fec7 	bl	8003260 <getOffset>
	  }

	  getInitialQuaternion();
 80044d2:	f001 fa4d 	bl	8005970 <getInitialQuaternion>

	  bme280_update();
 80044d6:	f7fd fcab 	bl	8001e30 <bme280_update>
		if(BME280_sensor.altitude < 200.0 && BME280_sensor.altitude > -200.0){
 80044da:	4b6c      	ldr	r3, [pc, #432]	; (800468c <main+0x32c>)
 80044dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044e0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004690 <main+0x330>
 80044e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	d51b      	bpl.n	8004526 <main+0x1c6>
 80044ee:	4b67      	ldr	r3, [pc, #412]	; (800468c <main+0x32c>)
 80044f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004694 <main+0x334>
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	dd11      	ble.n	8004526 <main+0x1c6>

			saved_datas->base_altitude = BME280_sensor.altitude + saved_datas->base_altitude;
 8004502:	4b62      	ldr	r3, [pc, #392]	; (800468c <main+0x32c>)
 8004504:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004508:	4b5c      	ldr	r3, [pc, #368]	; (800467c <main+0x31c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004510:	4b5a      	ldr	r3, [pc, #360]	; (800467c <main+0x31c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004518:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			saved_datas->max_altitude = 0.0;
 800451c:	4b57      	ldr	r3, [pc, #348]	; (800467c <main+0x31c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c
		}
#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
 8004526:	2302      	movs	r3, #2
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4b55      	ldr	r3, [pc, #340]	; (8004680 <main+0x320>)
 800452c:	2201      	movs	r2, #1
 800452e:	4954      	ldr	r1, [pc, #336]	; (8004680 <main+0x320>)
 8004530:	4859      	ldr	r0, [pc, #356]	; (8004698 <main+0x338>)
 8004532:	f002 f8c6 	bl	80066c2 <straing_gage_gpio_init>
#endif
  sd_transmit("ok");
 8004536:	4859      	ldr	r0, [pc, #356]	; (800469c <main+0x33c>)
 8004538:	f002 fb8e 	bl	8006c58 <sd_transmit>
	  HAL_Delay(10);
 800453c:	200a      	movs	r0, #10
 800453e:	f002 ffd5 	bl	80074ec <HAL_Delay>
  }



  HAL_UART_DeInit(&huart4);
 8004542:	4857      	ldr	r0, [pc, #348]	; (80046a0 <main+0x340>)
 8004544:	f007 fcb1 	bl	800beaa <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8004548:	484f      	ldr	r0, [pc, #316]	; (8004688 <main+0x328>)
 800454a:	f007 fcae 	bl	800beaa <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 800454e:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <main+0x340>)
 8004550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004554:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <main+0x328>)
 8004558:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800455c:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 800455e:	4850      	ldr	r0, [pc, #320]	; (80046a0 <main+0x340>)
 8004560:	f007 fc56 	bl	800be10 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8004564:	4848      	ldr	r0, [pc, #288]	; (8004688 <main+0x328>)
 8004566:	f007 fc53 	bl	800be10 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 800456a:	484e      	ldr	r0, [pc, #312]	; (80046a4 <main+0x344>)
 800456c:	f003 fd36 	bl	8007fdc <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8004570:	484d      	ldr	r0, [pc, #308]	; (80046a8 <main+0x348>)
 8004572:	f003 fd33 	bl	8007fdc <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8004576:	484d      	ldr	r0, [pc, #308]	; (80046ac <main+0x34c>)
 8004578:	f003 fd30 	bl	8007fdc <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 800457c:	484c      	ldr	r0, [pc, #304]	; (80046b0 <main+0x350>)
 800457e:	f003 fd2d 	bl	8007fdc <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8004582:	2203      	movs	r2, #3
 8004584:	494b      	ldr	r1, [pc, #300]	; (80046b4 <main+0x354>)
 8004586:	4846      	ldr	r0, [pc, #280]	; (80046a0 <main+0x340>)
 8004588:	f007 fdce 	bl	800c128 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 800458c:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <main+0x358>)
 800458e:	4a4b      	ldr	r2, [pc, #300]	; (80046bc <main+0x35c>)
 8004590:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8004592:	4b49      	ldr	r3, [pc, #292]	; (80046b8 <main+0x358>)
 8004594:	2208      	movs	r2, #8
 8004596:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8004598:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <main+0x360>)
 800459a:	4a48      	ldr	r2, [pc, #288]	; (80046bc <main+0x35c>)
 800459c:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 800459e:	4b48      	ldr	r3, [pc, #288]	; (80046c0 <main+0x360>)
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 80045a4:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <main+0x364>)
 80045a6:	4a36      	ldr	r2, [pc, #216]	; (8004680 <main+0x320>)
 80045a8:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <main+0x364>)
 80045ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045b0:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 80045b2:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <main+0x368>)
 80045b4:	4a32      	ldr	r2, [pc, #200]	; (8004680 <main+0x320>)
 80045b6:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 80045b8:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <main+0x368>)
 80045ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045be:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045c0:	2009      	movs	r0, #9
 80045c2:	f003 fce2 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045c6:	200a      	movs	r0, #10
 80045c8:	f003 fcdf 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 80045cc:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <main+0x36c>)
 80045ce:	4a40      	ldr	r2, [pc, #256]	; (80046d0 <main+0x370>)
 80045d0:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 80045d2:	482d      	ldr	r0, [pc, #180]	; (8004688 <main+0x328>)
 80045d4:	f002 fd06 	bl	8006fe4 <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 80045d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045dc:	483a      	ldr	r0, [pc, #232]	; (80046c8 <main+0x368>)
 80045de:	f7ff f8e9 	bl	80037b4 <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 80045e2:	4b3c      	ldr	r3, [pc, #240]	; (80046d4 <main+0x374>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 80045e8:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <main+0x374>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	749a      	strb	r2, [r3, #18]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <main+0x314>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <main+0x29a>
		  bmi088_update();
 80045f6:	f7fe fa37 	bl	8002a68 <bmi088_update>
	  if(is_BME_ok)
 80045fa:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <main+0x318>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <main+0x2a6>
		  bme280_update();
 8004602:	f7fd fc15 	bl	8001e30 <bme280_update>

	  measurePower(&guc);
 8004606:	4834      	ldr	r0, [pc, #208]	; (80046d8 <main+0x378>)
 8004608:	f000 fd8e 	bl	8005128 <measurePower>

	  ext_pin_update(&mos_1);
 800460c:	482a      	ldr	r0, [pc, #168]	; (80046b8 <main+0x358>)
 800460e:	f7ff f8ea 	bl	80037e6 <ext_pin_update>
	  ext_pin_update(&mos_2);
 8004612:	482b      	ldr	r0, [pc, #172]	; (80046c0 <main+0x360>)
 8004614:	f7ff f8e7 	bl	80037e6 <ext_pin_update>
	  ext_pin_update(&led);
 8004618:	482a      	ldr	r0, [pc, #168]	; (80046c4 <main+0x364>)
 800461a:	f7ff f8e4 	bl	80037e6 <ext_pin_update>
	  ext_pin_update(&buzzer);
 800461e:	482a      	ldr	r0, [pc, #168]	; (80046c8 <main+0x368>)
 8004620:	f7ff f8e1 	bl	80037e6 <ext_pin_update>

#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <main+0x318>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <main+0x2d2>
		  algorithm_1_update(&BME280_sensor);
 800462c:	4817      	ldr	r0, [pc, #92]	; (800468c <main+0x32c>)
 800462e:	f7fc fe7f 	bl	8001330 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  BMI_sensor.angle = quaternionToTheta();
 8004632:	f001 f8dd 	bl	80057f0 <quaternionToTheta>
 8004636:	eef0 7a40 	vmov.f32	s15, s0
 800463a:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <main+0x374>)
 800463c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	  if(is_BMI_ok)
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <main+0x314>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <main+0x2f0>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor);
 8004648:	4922      	ldr	r1, [pc, #136]	; (80046d4 <main+0x374>)
 800464a:	4810      	ldr	r0, [pc, #64]	; (800468c <main+0x32c>)
 800464c:	f7fc ffaa 	bl	80015a4 <algorithm_2_update>

#ifdef ROCKET_CARD
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
#else
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <main+0x31c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d144      	bne.n	80046e4 <main+0x384>
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <main+0x37c>)
 800465c:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <main+0x380>)
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e049      	b.n	80046f6 <main+0x396>
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	200008a4 	.word	0x200008a4
 800466c:	200003d8 	.word	0x200003d8
 8004670:	200008b8 	.word	0x200008b8
 8004674:	200008e0 	.word	0x200008e0
 8004678:	200008dc 	.word	0x200008dc
 800467c:	20000008 	.word	0x20000008
 8004680:	40020400 	.word	0x40020400
 8004684:	08017a58 	.word	0x08017a58
 8004688:	200004d8 	.word	0x200004d8
 800468c:	200006e0 	.word	0x200006e0
 8004690:	43480000 	.word	0x43480000
 8004694:	c3480000 	.word	0xc3480000
 8004698:	2000088c 	.word	0x2000088c
 800469c:	08017a6c 	.word	0x08017a6c
 80046a0:	20000450 	.word	0x20000450
 80046a4:	20000620 	.word	0x20000620
 80046a8:	20000680 	.word	0x20000680
 80046ac:	20000560 	.word	0x20000560
 80046b0:	200005c0 	.word	0x200005c0
 80046b4:	20000844 	.word	0x20000844
 80046b8:	2000084c 	.word	0x2000084c
 80046bc:	40020800 	.word	0x40020800
 80046c0:	2000085c 	.word	0x2000085c
 80046c4:	2000086c 	.word	0x2000086c
 80046c8:	2000087c 	.word	0x2000087c
 80046cc:	200008cc 	.word	0x200008cc
 80046d0:	bf800000 	.word	0xbf800000
 80046d4:	20000710 	.word	0x20000710
 80046d8:	20000834 	.word	0x20000834
 80046dc:	20000004 	.word	0x20000004
 80046e0:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status == STAT_TOUCH_DOWN){lora_hz = 1;}
 80046e4:	4bac      	ldr	r3, [pc, #688]	; (8004998 <main+0x638>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d103      	bne.n	80046f6 <main+0x396>
 80046ee:	4bab      	ldr	r3, [pc, #684]	; (800499c <main+0x63c>)
 80046f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046f4:	601a      	str	r2, [r3, #0]
#endif

		  currentTime = ((float)HAL_GetTick()) / 1000.0;
 80046f6:	f002 feed 	bl	80074d4 <HAL_GetTick>
 80046fa:	ee07 0a90 	vmov	s15, r0
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	ee17 0a90 	vmov	r0, s15
 8004706:	f7fb ff3f 	bl	8000588 <__aeabi_f2d>
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4ba4      	ldr	r3, [pc, #656]	; (80049a0 <main+0x640>)
 8004710:	f7fc f8bc 	bl	800088c <__aeabi_ddiv>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7fc fa84 	bl	8000c28 <__aeabi_d2f>
 8004720:	4603      	mov	r3, r0
 8004722:	4aa0      	ldr	r2, [pc, #640]	; (80049a4 <main+0x644>)
 8004724:	6013      	str	r3, [r2, #0]
	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 8004726:	4b9f      	ldr	r3, [pc, #636]	; (80049a4 <main+0x644>)
 8004728:	ed93 7a00 	vldr	s14, [r3]
 800472c:	4b9e      	ldr	r3, [pc, #632]	; (80049a8 <main+0x648>)
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004736:	eef0 7ae7 	vabs.f32	s15, s15
 800473a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80049ac <main+0x64c>
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	dd5a      	ble.n	80047fe <main+0x49e>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 8004748:	4b93      	ldr	r3, [pc, #588]	; (8004998 <main+0x638>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d151      	bne.n	80047f6 <main+0x496>
 8004752:	4b97      	ldr	r3, [pc, #604]	; (80049b0 <main+0x650>)
 8004754:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8004758:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8004980 <main+0x620>
 800475c:	eeb0 0a47 	vmov.f32	s0, s14
 8004760:	eef0 0a67 	vmov.f32	s1, s15
 8004764:	f011 fad4 	bl	8015d10 <pow>
 8004768:	ec55 4b10 	vmov	r4, r5, d0
 800476c:	4b90      	ldr	r3, [pc, #576]	; (80049b0 <main+0x650>)
 800476e:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8004772:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8004980 <main+0x620>
 8004776:	eeb0 0a47 	vmov.f32	s0, s14
 800477a:	eef0 0a67 	vmov.f32	s1, s15
 800477e:	f011 fac7 	bl	8015d10 <pow>
 8004782:	ec53 2b10 	vmov	r2, r3, d0
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fb fd9f 	bl	80002cc <__adddf3>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4614      	mov	r4, r2
 8004794:	461d      	mov	r5, r3
 8004796:	4b86      	ldr	r3, [pc, #536]	; (80049b0 <main+0x650>)
 8004798:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800479c:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8004980 <main+0x620>
 80047a0:	eeb0 0a47 	vmov.f32	s0, s14
 80047a4:	eef0 0a67 	vmov.f32	s1, s15
 80047a8:	f011 fab2 	bl	8015d10 <pow>
 80047ac:	ec53 2b10 	vmov	r2, r3, d0
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7fb fd8a 	bl	80002cc <__adddf3>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	ec43 2b17 	vmov	d7, r2, r3
 80047c0:	eeb0 0a47 	vmov.f32	s0, s14
 80047c4:	eef0 0a67 	vmov.f32	s1, s15
 80047c8:	f011 fb12 	bl	8015df0 <sqrt>
 80047cc:	ec51 0b10 	vmov	r0, r1, d0
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <main+0x654>)
 80047d6:	f7fc f9a1 	bl	8000b1c <__aeabi_dcmplt>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <main+0x496>
 80047e0:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <main+0x658>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <main+0x496>
			 {
				 getInitialQuaternion();
 80047e8:	f001 f8c2 	bl	8005970 <getInitialQuaternion>
				 ext_pin_open_duration(&buzzer, 500);
 80047ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80047f0:	4872      	ldr	r0, [pc, #456]	; (80049bc <main+0x65c>)
 80047f2:	f7fe ffdf 	bl	80037b4 <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 80047f6:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <main+0x644>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6b      	ldr	r2, [pc, #428]	; (80049a8 <main+0x648>)
 80047fc:	6013      	str	r3, [r2, #0]



		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 80047fe:	f002 fe69 	bl	80074d4 <HAL_GetTick>
 8004802:	ee07 0a90 	vmov	s15, r0
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	ee17 0a90 	vmov	r0, s15
 800480e:	f7fb febb 	bl	8000588 <__aeabi_f2d>
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	4b62      	ldr	r3, [pc, #392]	; (80049a0 <main+0x640>)
 8004818:	f7fc f838 	bl	800088c <__aeabi_ddiv>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fc fa00 	bl	8000c28 <__aeabi_d2f>
 8004828:	4603      	mov	r3, r0
 800482a:	4a5e      	ldr	r2, [pc, #376]	; (80049a4 <main+0x644>)
 800482c:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 800482e:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <main+0x644>)
 8004830:	ed93 7a00 	vldr	s14, [r3]
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <main+0x660>)
 8004836:	edd3 7a00 	vldr	s15, [r3]
 800483a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800483e:	eef0 7ae7 	vabs.f32	s15, s15
 8004842:	ee17 0a90 	vmov	r0, s15
 8004846:	f7fb fe9f 	bl	8000588 <__aeabi_f2d>
 800484a:	4604      	mov	r4, r0
 800484c:	460d      	mov	r5, r1
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <main+0x63c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fe98 	bl	8000588 <__aeabi_f2d>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	4958      	ldr	r1, [pc, #352]	; (80049c4 <main+0x664>)
 8004862:	f7fc f813 	bl	800088c <__aeabi_ddiv>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f7fc f973 	bl	8000b58 <__aeabi_dcmpgt>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <main+0x538>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8004878:	f000 fcea 	bl	8005250 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 800487c:	4b46      	ldr	r3, [pc, #280]	; (8004998 <main+0x638>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <main+0x668>)
 8004886:	4a51      	ldr	r2, [pc, #324]	; (80049cc <main+0x66c>)
 8004888:	4951      	ldr	r1, [pc, #324]	; (80049d0 <main+0x670>)
 800488a:	4849      	ldr	r0, [pc, #292]	; (80049b0 <main+0x650>)
 800488c:	f7fe fdc8 	bl	8003420 <packDatas>
			 loraLastTime = currentTime;
 8004890:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <main+0x644>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <main+0x660>)
 8004896:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }

		 if(fabs(currentTime - sd_last_time_f) > 0.1)
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <main+0x644>)
 800489a:	ed93 7a00 	vldr	s14, [r3]
 800489e:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <main+0x674>)
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048a8:	eef0 7ae7 	vabs.f32	s15, s15
 80048ac:	ee17 0a90 	vmov	r0, s15
 80048b0:	f7fb fe6a 	bl	8000588 <__aeabi_f2d>
 80048b4:	a334      	add	r3, pc, #208	; (adr r3, 8004988 <main+0x628>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fc f94d 	bl	8000b58 <__aeabi_dcmpgt>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d014      	beq.n	80048ee <main+0x58e>
		 {
			 sdDataLogger(sd_log_counter, &BME280_sensor, &BMI_sensor, saved_datas, &gnss_data, &guc); // SD TRANSMIT
 80048c4:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <main+0x678>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4b33      	ldr	r3, [pc, #204]	; (8004998 <main+0x638>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3e      	ldr	r2, [pc, #248]	; (80049c8 <main+0x668>)
 80048ce:	9201      	str	r2, [sp, #4]
 80048d0:	4a3e      	ldr	r2, [pc, #248]	; (80049cc <main+0x66c>)
 80048d2:	9200      	str	r2, [sp, #0]
 80048d4:	4a36      	ldr	r2, [pc, #216]	; (80049b0 <main+0x650>)
 80048d6:	493e      	ldr	r1, [pc, #248]	; (80049d0 <main+0x670>)
 80048d8:	f002 f9f6 	bl	8006cc8 <sdDataLogger>
			 sd_log_counter++;
 80048dc:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <main+0x678>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <main+0x678>)
 80048e4:	6013      	str	r3, [r2, #0]
			 sd_last_time_f = currentTime;
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <main+0x644>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <main+0x674>)
 80048ec:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS update function.
		 if(fabs(currentTime - gnss_last_update_time) > 1.0)
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <main+0x644>)
 80048f0:	ed93 7a00 	vldr	s14, [r3]
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <main+0x67c>)
 80048f6:	edd3 7a00 	vldr	s15, [r3]
 80048fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048fe:	eef0 7ae7 	vabs.f32	s15, s15
 8004902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	dd06      	ble.n	800491e <main+0x5be>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 8004910:	482e      	ldr	r0, [pc, #184]	; (80049cc <main+0x66c>)
 8004912:	f002 fb77 	bl	8007004 <Usr_GpsL86GetValues>
			 gnss_last_update_time = currentTime;
 8004916:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <main+0x644>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a30      	ldr	r2, [pc, #192]	; (80049dc <main+0x67c>)
 800491c:	6013      	str	r3, [r2, #0]
		 }

		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <main+0x644>)
 8004920:	ed93 7a00 	vldr	s14, [r3]
 8004924:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <main+0x680>)
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800492e:	eef0 7ae7 	vabs.f32	s15, s15
 8004932:	ee17 0a90 	vmov	r0, s15
 8004936:	f7fb fe27 	bl	8000588 <__aeabi_f2d>
 800493a:	a315      	add	r3, pc, #84	; (adr r3, 8004990 <main+0x630>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fc f90a 	bl	8000b58 <__aeabi_dcmpgt>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <main+0x618>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800494a:	2200      	movs	r2, #0
 800494c:	4925      	ldr	r1, [pc, #148]	; (80049e4 <main+0x684>)
 800494e:	4826      	ldr	r0, [pc, #152]	; (80049e8 <main+0x688>)
 8004950:	f006 fca0 	bl	800b294 <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004954:	2200      	movs	r2, #0
 8004956:	4925      	ldr	r1, [pc, #148]	; (80049ec <main+0x68c>)
 8004958:	4823      	ldr	r0, [pc, #140]	; (80049e8 <main+0x688>)
 800495a:	f006 fcf9 	bl	800b350 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <main+0x684>)
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <main+0x68c>)
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	9201      	str	r2, [sp, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	9200      	str	r2, [sp, #0]
 800496a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800496c:	f001 f93e 	bl	8005bec <save_time>
			 lastTime = currentTime;
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <main+0x644>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <main+0x680>)
 8004976:	6013      	str	r3, [r2, #0]
	  if(is_BMI_ok)
 8004978:	e639      	b.n	80045ee <main+0x28e>
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w
 8004980:	00000000 	.word	0x00000000
 8004984:	40000000 	.word	0x40000000
 8004988:	9999999a 	.word	0x9999999a
 800498c:	3fb99999 	.word	0x3fb99999
 8004990:	9999999a 	.word	0x9999999a
 8004994:	3fc99999 	.word	0x3fc99999
 8004998:	20000008 	.word	0x20000008
 800499c:	20000004 	.word	0x20000004
 80049a0:	408f4000 	.word	0x408f4000
 80049a4:	200008bc 	.word	0x200008bc
 80049a8:	200008c4 	.word	0x200008c4
 80049ac:	42700000 	.word	0x42700000
 80049b0:	20000710 	.word	0x20000710
 80049b4:	40140000 	.word	0x40140000
 80049b8:	200008e0 	.word	0x200008e0
 80049bc:	2000087c 	.word	0x2000087c
 80049c0:	200008cc 	.word	0x200008cc
 80049c4:	3ff00000 	.word	0x3ff00000
 80049c8:	20000834 	.word	0x20000834
 80049cc:	20000804 	.word	0x20000804
 80049d0:	200006e0 	.word	0x200006e0
 80049d4:	200008d4 	.word	0x200008d4
 80049d8:	200008e4 	.word	0x200008e4
 80049dc:	200008d8 	.word	0x200008d8
 80049e0:	200008c0 	.word	0x200008c0
 80049e4:	200008a4 	.word	0x200008a4
 80049e8:	200003d8 	.word	0x200003d8
 80049ec:	200008b8 	.word	0x200008b8

080049f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b094      	sub	sp, #80	; 0x50
 80049f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	2234      	movs	r2, #52	; 0x34
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f00c f84c 	bl	8010a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	2300      	movs	r3, #0
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <SystemClock_Config+0xe0>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	4a2c      	ldr	r2, [pc, #176]	; (8004ad0 <SystemClock_Config+0xe0>)
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6413      	str	r3, [r2, #64]	; 0x40
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <SystemClock_Config+0xe0>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a30:	2300      	movs	r3, #0
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <SystemClock_Config+0xe4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <SystemClock_Config+0xe4>)
 8004a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <SystemClock_Config+0xe4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004a4c:	2305      	movs	r3, #5
 8004a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004a56:	2301      	movs	r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a64:	2304      	movs	r3, #4
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004a68:	23b4      	movs	r3, #180	; 0xb4
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a70:	2302      	movs	r3, #2
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a74:	2302      	movs	r3, #2
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a78:	f107 031c 	add.w	r3, r7, #28
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f006 f8f5 	bl	800ac6c <HAL_RCC_OscConfig>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004a88:	f000 fc4a 	bl	8005320 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a8c:	f005 fa2a 	bl	8009ee4 <HAL_PWREx_EnableOverDrive>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004a96:	f000 fc43 	bl	8005320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004aa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	2105      	movs	r1, #5
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f005 fa63 	bl	8009f84 <HAL_RCC_ClockConfig>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004ac4:	f000 fc2c 	bl	8005320 <Error_Handler>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3750      	adds	r7, #80	; 0x50
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40007000 	.word	0x40007000

08004ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ade:	463b      	mov	r3, r7
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <MX_ADC1_Init+0xb8>)
 8004aee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004af0:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004af2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004af6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004af8:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b12:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <MX_ADC1_Init+0xbc>)
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b26:	2202      	movs	r2, #2
 8004b28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b38:	4814      	ldr	r0, [pc, #80]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b3a:	f002 fcfb 	bl	8007534 <HAL_ADC_Init>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004b44:	f000 fbec 	bl	8005320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8004b50:	2304      	movs	r3, #4
 8004b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b54:	463b      	mov	r3, r7
 8004b56:	4619      	mov	r1, r3
 8004b58:	480c      	ldr	r0, [pc, #48]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b5a:	f002 fecd 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004b64:	f000 fbdc 	bl	8005320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004b68:	230b      	movs	r3, #11
 8004b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b70:	463b      	mov	r3, r7
 8004b72:	4619      	mov	r1, r3
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <MX_ADC1_Init+0xb4>)
 8004b76:	f002 febf 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004b80:	f000 fbce 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200002e8 	.word	0x200002e8
 8004b90:	40012000 	.word	0x40012000
 8004b94:	0f000001 	.word	0x0f000001

08004b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <MX_I2C1_Init+0x54>)
 8004ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004ba4:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <MX_I2C1_Init+0x58>)
 8004ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004bae:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bd4:	4804      	ldr	r0, [pc, #16]	; (8004be8 <MX_I2C1_Init+0x50>)
 8004bd6:	f004 f95b 	bl	8008e90 <HAL_I2C_Init>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004be0:	f000 fb9e 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000330 	.word	0x20000330
 8004bec:	40005400 	.word	0x40005400
 8004bf0:	000186a0 	.word	0x000186a0

08004bf4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004bfa:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <MX_I2C3_Init+0x54>)
 8004bfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004bfe:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c00:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <MX_I2C3_Init+0x58>)
 8004c02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004c30:	4804      	ldr	r0, [pc, #16]	; (8004c44 <MX_I2C3_Init+0x50>)
 8004c32:	f004 f92d 	bl	8008e90 <HAL_I2C_Init>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004c3c:	f000 fb70 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000384 	.word	0x20000384
 8004c48:	40005c00 	.word	0x40005c00
 8004c4c:	000186a0 	.word	0x000186a0

08004c50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <MX_RTC_Init+0x48>)
 8004c58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c62:	227f      	movs	r2, #127	; 0x7f
 8004c64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c68:	22ff      	movs	r2, #255	; 0xff
 8004c6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c7e:	4805      	ldr	r0, [pc, #20]	; (8004c94 <MX_RTC_Init+0x44>)
 8004c80:	f006 fa92 	bl	800b1a8 <HAL_RTC_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004c8a:	f000 fb49 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200003d8 	.word	0x200003d8
 8004c98:	40002800 	.word	0x40002800

08004c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <MX_SPI1_Init+0x68>)
 8004ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004ce8:	220a      	movs	r2, #10
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004cec:	4804      	ldr	r0, [pc, #16]	; (8004d00 <MX_SPI1_Init+0x64>)
 8004cee:	f006 fc50 	bl	800b592 <HAL_SPI_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004cf8:	f000 fb12 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200003f8 	.word	0x200003f8
 8004d04:	40013000 	.word	0x40013000

08004d08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <MX_UART4_Init+0x50>)
 8004d10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d2e:	220c      	movs	r2, #12
 8004d30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_UART4_Init+0x4c>)
 8004d40:	f007 f866 	bl	800be10 <HAL_UART_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d4a:	f000 fae9 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000450 	.word	0x20000450
 8004d58:	40004c00 	.word	0x40004c00

08004d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d60:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d62:	4a12      	ldr	r2, [pc, #72]	; (8004dac <MX_USART1_UART_Init+0x50>)
 8004d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d82:	220c      	movs	r2, #12
 8004d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d92:	4805      	ldr	r0, [pc, #20]	; (8004da8 <MX_USART1_UART_Init+0x4c>)
 8004d94:	f007 f83c 	bl	800be10 <HAL_UART_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d9e:	f000 fabf 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000494 	.word	0x20000494
 8004dac:	40011000 	.word	0x40011000

08004db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <MX_USART2_UART_Init+0x50>)
 8004db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dda:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004de6:	4805      	ldr	r0, [pc, #20]	; (8004dfc <MX_USART2_UART_Init+0x4c>)
 8004de8:	f007 f812 	bl	800be10 <HAL_UART_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004df2:	f000 fa95 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200004d8 	.word	0x200004d8
 8004e00:	40004400 	.word	0x40004400

08004e04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <MX_USART3_UART_Init+0x50>)
 8004e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e3a:	4805      	ldr	r0, [pc, #20]	; (8004e50 <MX_USART3_UART_Init+0x4c>)
 8004e3c:	f006 ffe8 	bl	800be10 <HAL_UART_Init>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e46:	f000 fa6b 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000051c 	.word	0x2000051c
 8004e54:	40004800 	.word	0x40004800

08004e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <MX_DMA_Init+0x88>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2100      	movs	r1, #0
 8004e9a:	200d      	movs	r0, #13
 8004e9c:	f003 f859 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004ea0:	200d      	movs	r0, #13
 8004ea2:	f003 f872 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	200f      	movs	r0, #15
 8004eac:	f003 f851 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004eb0:	200f      	movs	r0, #15
 8004eb2:	f003 f86a 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2010      	movs	r0, #16
 8004ebc:	f003 f849 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004ec0:	2010      	movs	r0, #16
 8004ec2:	f003 f862 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	2046      	movs	r0, #70	; 0x46
 8004ecc:	f003 f841 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004ed0:	2046      	movs	r0, #70	; 0x46
 8004ed2:	f003 f85a 	bl	8007f8a <HAL_NVIC_EnableIRQ>

}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800

08004ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	4b50      	ldr	r3, [pc, #320]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a4f      	ldr	r2, [pc, #316]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b49      	ldr	r3, [pc, #292]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a48      	ldr	r2, [pc, #288]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	4b42      	ldr	r3, [pc, #264]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a41      	ldr	r2, [pc, #260]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5e:	4b38      	ldr	r3, [pc, #224]	; (8005040 <MX_GPIO_Init+0x15c>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f640 4188 	movw	r1, #3208	; 0xc88
 8004f70:	4834      	ldr	r0, [pc, #208]	; (8005044 <MX_GPIO_Init+0x160>)
 8004f72:	f003 ff41 	bl	8008df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2110      	movs	r1, #16
 8004f7a:	4833      	ldr	r0, [pc, #204]	; (8005048 <MX_GPIO_Init+0x164>)
 8004f7c:	f003 ff3c 	bl	8008df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8004f80:	2200      	movs	r2, #0
 8004f82:	f243 0103 	movw	r1, #12291	; 0x3003
 8004f86:	4831      	ldr	r0, [pc, #196]	; (800504c <MX_GPIO_Init+0x168>)
 8004f88:	f003 ff36 	bl	8008df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8004f8c:	f640 4388 	movw	r3, #3208	; 0xc88
 8004f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4827      	ldr	r0, [pc, #156]	; (8005044 <MX_GPIO_Init+0x160>)
 8004fa6:	f003 fc87 	bl	80088b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004faa:	2310      	movs	r3, #16
 8004fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4821      	ldr	r0, [pc, #132]	; (8005048 <MX_GPIO_Init+0x164>)
 8004fc2:	f003 fc79 	bl	80088b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 8004fc6:	f243 0303 	movw	r3, #12291	; 0x3003
 8004fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	4619      	mov	r1, r3
 8004fde:	481b      	ldr	r0, [pc, #108]	; (800504c <MX_GPIO_Init+0x168>)
 8004fe0:	f003 fc6a 	bl	80088b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8004fe4:	2318      	movs	r3, #24
 8004fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff2:	f107 0314 	add.w	r3, r7, #20
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4814      	ldr	r0, [pc, #80]	; (800504c <MX_GPIO_Init+0x168>)
 8004ffa:	f003 fc5d 	bl	80088b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8004ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005004:	2300      	movs	r3, #0
 8005006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4619      	mov	r1, r3
 8005012:	480e      	ldr	r0, [pc, #56]	; (800504c <MX_GPIO_Init+0x168>)
 8005014:	f003 fc50 	bl	80088b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8005018:	2200      	movs	r2, #0
 800501a:	2102      	movs	r1, #2
 800501c:	2009      	movs	r0, #9
 800501e:	f002 ff98 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005022:	2009      	movs	r0, #9
 8005024:	f002 ffb1 	bl	8007f8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8005028:	2200      	movs	r2, #0
 800502a:	2102      	movs	r1, #2
 800502c:	200a      	movs	r0, #10
 800502e:	f002 ff90 	bl	8007f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005032:	200a      	movs	r0, #10
 8005034:	f002 ffa9 	bl	8007f8a <HAL_NVIC_EnableIRQ>

}
 8005038:	bf00      	nop
 800503a:	3728      	adds	r7, #40	; 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	40020800 	.word	0x40020800
 8005048:	40020000 	.word	0x40020000
 800504c:	40020400 	.word	0x40020400

08005050 <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <bme280_begin+0x24>)
 8005056:	2203      	movs	r2, #3
 8005058:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <bme280_begin+0x24>)
 800505c:	2203      	movs	r2, #3
 800505e:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <bme280_begin+0x24>)
 8005062:	2204      	movs	r2, #4
 8005064:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <bme280_begin+0x28>)
 8005068:	4802      	ldr	r0, [pc, #8]	; (8005074 <bme280_begin+0x24>)
 800506a:	f7fc feab 	bl	8001dc4 <bme280_init>
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200006e0 	.word	0x200006e0
 8005078:	20000330 	.word	0x20000330

0800507c <bmi088_begin>:
void bmi088_begin()
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <bmi088_begin+0x3c>)
 8005082:	2208      	movs	r2, #8
 8005084:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <bmi088_begin+0x3c>)
 8005088:	2209      	movs	r2, #9
 800508a:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <bmi088_begin+0x3c>)
 800508e:	2200      	movs	r2, #0
 8005090:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <bmi088_begin+0x3c>)
 8005094:	2202      	movs	r2, #2
 8005096:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <bmi088_begin+0x3c>)
 800509a:	2201      	movs	r2, #1
 800509c:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <bmi088_begin+0x3c>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <bmi088_begin+0x3c>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 80050aa:	4904      	ldr	r1, [pc, #16]	; (80050bc <bmi088_begin+0x40>)
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <bmi088_begin+0x3c>)
 80050ae:	f7fd fc85 	bl	80029bc <bmi088_init>
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000710 	.word	0x20000710
 80050bc:	20000384 	.word	0x20000384

080050c0 <loraBegin>:


void loraBegin()
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ca:	4814      	ldr	r0, [pc, #80]	; (800511c <loraBegin+0x5c>)
 80050cc:	f003 fe94 	bl	8008df8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050d6:	4811      	ldr	r0, [pc, #68]	; (800511c <loraBegin+0x5c>)
 80050d8:	f003 fe8e 	bl	8008df8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80050dc:	2064      	movs	r0, #100	; 0x64
 80050de:	f002 fa05 	bl	80074ec <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <loraBegin+0x60>)
 80050e4:	22e0      	movs	r2, #224	; 0xe0
 80050e6:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <loraBegin+0x60>)
 80050ea:	2206      	movs	r2, #6
 80050ec:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <loraBegin+0x60>)
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <loraBegin+0x60>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <loraBegin+0x60>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <loraBegin+0x60>)
 8005102:	2200      	movs	r2, #0
 8005104:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <loraBegin+0x60>)
 8005108:	221e      	movs	r2, #30
 800510a:	721a      	strb	r2, [r3, #8]
#endif

    lora_configure(&e22_lora);
 800510c:	4804      	ldr	r0, [pc, #16]	; (8005120 <loraBegin+0x60>)
 800510e:	f7ff f8b5 	bl	800427c <lora_configure>

    HAL_Delay(100);
 8005112:	2064      	movs	r0, #100	; 0x64
 8005114:	f002 f9ea 	bl	80074ec <HAL_Delay>
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40020800 	.word	0x40020800
 8005120:	200007f0 	.word	0x200007f0
 8005124:	00000000 	.word	0x00000000

08005128 <measurePower>:

void measurePower(power *guc_)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	ed2d 8b02 	vpush	{d8}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8005134:	4840      	ldr	r0, [pc, #256]	; (8005238 <measurePower+0x110>)
 8005136:	f002 fa41 	bl	80075bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800513a:	210a      	movs	r1, #10
 800513c:	483e      	ldr	r0, [pc, #248]	; (8005238 <measurePower+0x110>)
 800513e:	f002 fb42 	bl	80077c6 <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 8005142:	483d      	ldr	r0, [pc, #244]	; (8005238 <measurePower+0x110>)
 8005144:	f002 fbca 	bl	80078dc <HAL_ADC_GetValue>
 8005148:	4603      	mov	r3, r0
 800514a:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800514c:	210a      	movs	r1, #10
 800514e:	483a      	ldr	r0, [pc, #232]	; (8005238 <measurePower+0x110>)
 8005150:	f002 fb39 	bl	80077c6 <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 8005154:	4838      	ldr	r0, [pc, #224]	; (8005238 <measurePower+0x110>)
 8005156:	f002 fbc1 	bl	80078dc <HAL_ADC_GetValue>
 800515a:	4603      	mov	r3, r0
 800515c:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 800515e:	4836      	ldr	r0, [pc, #216]	; (8005238 <measurePower+0x110>)
 8005160:	f002 fafe 	bl	8007760 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800523c <measurePower+0x114>
 8005172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005176:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005240 <measurePower+0x118>
 800517a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518e:	ee17 0a90 	vmov	r0, s15
 8005192:	f7fb f9f9 	bl	8000588 <__aeabi_f2d>
 8005196:	a326      	add	r3, pc, #152	; (adr r3, 8005230 <measurePower+0x108>)
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb fa4c 	bl	8000638 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <measurePower+0x11c>)
 80051ae:	f7fb fb6d 	bl	800088c <__aeabi_ddiv>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4610      	mov	r0, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	f7fb fd35 	bl	8000c28 <__aeabi_d2f>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80051d4:	f002 f97e 	bl	80074d4 <HAL_GetTick>
 80051d8:	ee07 0a90 	vmov	s15, r0
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005248 <measurePower+0x120>
 80051e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <measurePower+0x124>)
 80051ea:	edd3 7a00 	vldr	s15, [r3]
 80051ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80051fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8005206:	f002 f965 	bl	80074d4 <HAL_GetTick>
 800520a:	ee07 0a90 	vmov	s15, r0
 800520e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005212:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005248 <measurePower+0x120>
 8005216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <measurePower+0x124>)
 800521c:	edc3 7a00 	vstr	s15, [r3]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	ecbd 8b02 	vpop	{d8}
 800522a:	bd80      	pop	{r7, pc}
 800522c:	f3af 8000 	nop.w
 8005230:	66666666 	.word	0x66666666
 8005234:	402a6666 	.word	0x402a6666
 8005238:	200002e8 	.word	0x200002e8
 800523c:	454e4000 	.word	0x454e4000
 8005240:	45800000 	.word	0x45800000
 8005244:	40b00000 	.word	0x40b00000
 8005248:	447a0000 	.word	0x447a0000
 800524c:	200008c8 	.word	0x200008c8

08005250 <getWatt>:

void getWatt()
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 8005256:	f002 f93d 	bl	80074d4 <HAL_GetTick>
 800525a:	ee07 0a90 	vmov	s15, r0
 800525e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005262:	eddf 6a12 	vldr	s13, [pc, #72]	; 80052ac <getWatt+0x5c>
 8005266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800526a:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <getWatt+0x60>)
 8005270:	edd3 7a00 	vldr	s15, [r3]
 8005274:	ed97 7a01 	vldr	s14, [r7, #4]
 8005278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527c:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8005280:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <getWatt+0x60>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <getWatt+0x64>)
 8005288:	edd3 6a02 	vldr	s13, [r3, #8]
 800528c:	ed97 7a00 	vldr	s14, [r7]
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <getWatt+0x64>)
 8005296:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <getWatt+0x64>)
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	447a0000 	.word	0x447a0000
 80052b0:	200008d0 	.word	0x200008d0
 80052b4:	20000834 	.word	0x20000834

080052b8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d101      	bne.n	80052cc <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 80052c8:	f7fd ffbc 	bl	8003244 <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d101      	bne.n	80052d6 <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	bmi088_getAccelDatas_INT();
 80052d2:	f7fd ffa9 	bl	8003228 <bmi088_getAccelDatas_INT>
    	//counterAcc++;
    }
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <deploy_p_1>:

void deploy_p_1()
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 80052e4:	2164      	movs	r1, #100	; 0x64
 80052e6:	4804      	ldr	r0, [pc, #16]	; (80052f8 <deploy_p_1+0x18>)
 80052e8:	f7fe fa64 	bl	80037b4 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 80052ec:	4803      	ldr	r0, [pc, #12]	; (80052fc <deploy_p_1+0x1c>)
 80052ee:	f7fe fa49 	bl	8003784 <ext_pin_open>
}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	2000084c 	.word	0x2000084c
 80052fc:	2000087c 	.word	0x2000087c

08005300 <deploy_p_2>:

void deploy_p_2()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 8005304:	2164      	movs	r1, #100	; 0x64
 8005306:	4804      	ldr	r0, [pc, #16]	; (8005318 <deploy_p_2+0x18>)
 8005308:	f7fe fa54 	bl	80037b4 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 800530c:	4803      	ldr	r0, [pc, #12]	; (800531c <deploy_p_2+0x1c>)
 800530e:	f7fe fa39 	bl	8003784 <ext_pin_open>
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000085c 	.word	0x2000085c
 800531c:	2000087c 	.word	0x2000087c

08005320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8005324:	4b11      	ldr	r3, [pc, #68]	; (800536c <Error_Handler+0x4c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	4911      	ldr	r1, [pc, #68]	; (8005370 <Error_Handler+0x50>)
 800532c:	4811      	ldr	r0, [pc, #68]	; (8005374 <Error_Handler+0x54>)
 800532e:	f00c fa3d 	bl	80117ac <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 8005332:	4810      	ldr	r0, [pc, #64]	; (8005374 <Error_Handler+0x54>)
 8005334:	f7fa ff6c 	bl	8000210 <strlen>
 8005338:	4603      	mov	r3, r0
 800533a:	b29a      	uxth	r2, r3
 800533c:	23fa      	movs	r3, #250	; 0xfa
 800533e:	490d      	ldr	r1, [pc, #52]	; (8005374 <Error_Handler+0x54>)
 8005340:	480d      	ldr	r0, [pc, #52]	; (8005378 <Error_Handler+0x58>)
 8005342:	f006 fde1 	bl	800bf08 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005346:	b672      	cpsid	i
}
 8005348:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800534a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800534e:	480b      	ldr	r0, [pc, #44]	; (800537c <Error_Handler+0x5c>)
 8005350:	f003 fd6b 	bl	8008e2a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005354:	2064      	movs	r0, #100	; 0x64
 8005356:	f002 f8c9 	bl	80074ec <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800535a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800535e:	4807      	ldr	r0, [pc, #28]	; (800537c <Error_Handler+0x5c>)
 8005360:	f003 fd63 	bl	8008e2a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8005364:	2064      	movs	r0, #100	; 0x64
 8005366:	f002 f8c1 	bl	80074ec <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800536a:	e7ee      	b.n	800534a <Error_Handler+0x2a>
 800536c:	20000268 	.word	0x20000268
 8005370:	08017a70 	.word	0x08017a70
 8005374:	200008e8 	.word	0x200008e8
 8005378:	20000494 	.word	0x20000494
 800537c:	40020400 	.word	0x40020400

08005380 <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	ed87 0a03 	vstr	s0, [r7, #12]
 800538a:	edc7 0a02 	vstr	s1, [r7, #8]
 800538e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005392:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 8005396:	4b9f      	ldr	r3, [pc, #636]	; (8005614 <updateQuaternion+0x294>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	edd3 7a02 	vldr	s15, [r3, #8]
 800539e:	eeb1 7a67 	vneg.f32	s14, s15
 80053a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80053a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053aa:	4b9a      	ldr	r3, [pc, #616]	; (8005614 <updateQuaternion+0x294>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	edd3 6a03 	vldr	s13, [r3, #12]
 80053b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80053b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053be:	4b95      	ldr	r3, [pc, #596]	; (8005614 <updateQuaternion+0x294>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80053c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80053ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 80053de:	4b8d      	ldr	r3, [pc, #564]	; (8005614 <updateQuaternion+0x294>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80053e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ee:	4b89      	ldr	r3, [pc, #548]	; (8005614 <updateQuaternion+0x294>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80053f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80053fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005402:	4b84      	ldr	r3, [pc, #528]	; (8005614 <updateQuaternion+0x294>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	edd3 6a04 	vldr	s13, [r3, #16]
 800540a:	edd7 7a02 	vldr	s15, [r7, #8]
 800540e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005416:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800541a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541e:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 8005422:	4b7c      	ldr	r3, [pc, #496]	; (8005614 <updateQuaternion+0x294>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	ed93 7a01 	vldr	s14, [r3, #4]
 800542a:	edd7 7a02 	vldr	s15, [r7, #8]
 800542e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005432:	4b78      	ldr	r3, [pc, #480]	; (8005614 <updateQuaternion+0x294>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	edd3 6a02 	vldr	s13, [r3, #8]
 800543a:	edd7 7a01 	vldr	s15, [r7, #4]
 800543e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005446:	4b73      	ldr	r3, [pc, #460]	; (8005614 <updateQuaternion+0x294>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	edd3 6a04 	vldr	s13, [r3, #16]
 800544e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800545e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 8005466:	4b6b      	ldr	r3, [pc, #428]	; (8005614 <updateQuaternion+0x294>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	ed93 7a01 	vldr	s14, [r3, #4]
 800546e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005476:	4b67      	ldr	r3, [pc, #412]	; (8005614 <updateQuaternion+0x294>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	edd3 6a02 	vldr	s13, [r3, #8]
 800547e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800548a:	4b62      	ldr	r3, [pc, #392]	; (8005614 <updateQuaternion+0x294>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005492:	edd7 7a03 	vldr	s15, [r7, #12]
 8005496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800549a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800549e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a6:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 80054aa:	4b5a      	ldr	r3, [pc, #360]	; (8005614 <updateQuaternion+0x294>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80054b2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80054b6:	edd7 7a00 	vldr	s15, [r7]
 80054ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054be:	4b55      	ldr	r3, [pc, #340]	; (8005614 <updateQuaternion+0x294>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c6:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 80054ca:	4b52      	ldr	r3, [pc, #328]	; (8005614 <updateQuaternion+0x294>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80054d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80054d6:	edd7 7a00 	vldr	s15, [r7]
 80054da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054de:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <updateQuaternion+0x294>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e6:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 80054ea:	4b4a      	ldr	r3, [pc, #296]	; (8005614 <updateQuaternion+0x294>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80054f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f6:	edd7 7a00 	vldr	s15, [r7]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	4b45      	ldr	r3, [pc, #276]	; (8005614 <updateQuaternion+0x294>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005506:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <updateQuaternion+0x294>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005512:	edd7 6a06 	vldr	s13, [r7, #24]
 8005516:	edd7 7a00 	vldr	s15, [r7]
 800551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551e:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <updateQuaternion+0x294>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005526:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 800552a:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <updateQuaternion+0x294>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <updateQuaternion+0x294>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	edd3 7a01 	vldr	s15, [r3, #4]
 800553a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800553e:	4b35      	ldr	r3, [pc, #212]	; (8005614 <updateQuaternion+0x294>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	edd3 6a02 	vldr	s13, [r3, #8]
 8005546:	4b33      	ldr	r3, [pc, #204]	; (8005614 <updateQuaternion+0x294>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	edd3 7a02 	vldr	s15, [r3, #8]
 800554e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005556:	4b2f      	ldr	r3, [pc, #188]	; (8005614 <updateQuaternion+0x294>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	edd3 6a03 	vldr	s13, [r3, #12]
 800555e:	4b2d      	ldr	r3, [pc, #180]	; (8005614 <updateQuaternion+0x294>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	edd3 7a03 	vldr	s15, [r3, #12]
 8005566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800556a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <updateQuaternion+0x294>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	edd3 6a04 	vldr	s13, [r3, #16]
 8005576:	4b27      	ldr	r3, [pc, #156]	; (8005614 <updateQuaternion+0x294>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	edd3 7a04 	vldr	s15, [r3, #16]
 800557e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005586:	ee17 0a90 	vmov	r0, s15
 800558a:	f7fa fffd 	bl	8000588 <__aeabi_f2d>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	ec43 2b10 	vmov	d0, r2, r3
 8005596:	f010 fc2b 	bl	8015df0 <sqrt>
 800559a:	ec53 2b10 	vmov	r2, r3, d0
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	f7fb fb41 	bl	8000c28 <__aeabi_d2f>
 80055a6:	4603      	mov	r3, r0
 80055a8:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 80055aa:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <updateQuaternion+0x294>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80055b2:	4b18      	ldr	r3, [pc, #96]	; (8005614 <updateQuaternion+0x294>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80055ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055be:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <updateQuaternion+0x294>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <updateQuaternion+0x294>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80055d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d6:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 80055da:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <updateQuaternion+0x294>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	edd3 6a03 	vldr	s13, [r3, #12]
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <updateQuaternion+0x294>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80055ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ee:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <updateQuaternion+0x294>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	edd3 6a04 	vldr	s13, [r3, #16]
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <updateQuaternion+0x294>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8005602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005606:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800560a:	bf00      	nop
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000008 	.word	0x20000008

08005618 <quaternionToEuler>:

void quaternionToEuler(void) {
 8005618:	b5b0      	push	{r4, r5, r7, lr}
 800561a:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 800561c:	4b72      	ldr	r3, [pc, #456]	; (80057e8 <quaternionToEuler+0x1d0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	ed93 7a01 	vldr	s14, [r3, #4]
 8005624:	4b70      	ldr	r3, [pc, #448]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	edd3 7a02 	vldr	s15, [r3, #8]
 800562c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005630:	4b6d      	ldr	r3, [pc, #436]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	edd3 6a03 	vldr	s13, [r3, #12]
 8005638:	4b6b      	ldr	r3, [pc, #428]	; (80057e8 <quaternionToEuler+0x1d0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005648:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800564c:	ee17 0a90 	vmov	r0, s15
 8005650:	f7fa ff9a 	bl	8000588 <__aeabi_f2d>
 8005654:	4604      	mov	r4, r0
 8005656:	460d      	mov	r5, r1
 8005658:	4b63      	ldr	r3, [pc, #396]	; (80057e8 <quaternionToEuler+0x1d0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005660:	4b61      	ldr	r3, [pc, #388]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	edd3 7a02 	vldr	s15, [r3, #8]
 8005668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800566c:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <quaternionToEuler+0x1d0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	edd3 6a03 	vldr	s13, [r3, #12]
 8005674:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	edd3 7a03 	vldr	s15, [r3, #12]
 800567c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005684:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005690:	ee17 0a90 	vmov	r0, s15
 8005694:	f7fa ff78 	bl	8000588 <__aeabi_f2d>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	ec43 2b11 	vmov	d1, r2, r3
 80056a0:	ec45 4b10 	vmov	d0, r4, r5
 80056a4:	f010 fb32 	bl	8015d0c <atan2>
 80056a8:	ec51 0b10 	vmov	r0, r1, d0
 80056ac:	a34c      	add	r3, pc, #304	; (adr r3, 80057e0 <quaternionToEuler+0x1c8>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa ffc1 	bl	8000638 <__aeabi_dmul>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	f7fb fab3 	bl	8000c28 <__aeabi_d2f>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a49      	ldr	r2, [pc, #292]	; (80057ec <quaternionToEuler+0x1d4>)
 80056c6:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 80056c8:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <quaternionToEuler+0x1d0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <quaternionToEuler+0x1d0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80056d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056dc:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <quaternionToEuler+0x1d0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	edd3 6a04 	vldr	s13, [r3, #16]
 80056e4:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <quaternionToEuler+0x1d0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80056ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056f8:	ee17 0a90 	vmov	r0, s15
 80056fc:	f7fa ff44 	bl	8000588 <__aeabi_f2d>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	ec43 2b10 	vmov	d0, r2, r3
 8005708:	f010 facc 	bl	8015ca4 <asin>
 800570c:	ec51 0b10 	vmov	r0, r1, d0
 8005710:	a333      	add	r3, pc, #204	; (adr r3, 80057e0 <quaternionToEuler+0x1c8>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa ff8f 	bl	8000638 <__aeabi_dmul>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f7fb fa81 	bl	8000c28 <__aeabi_d2f>
 8005726:	4603      	mov	r3, r0
 8005728:	4a30      	ldr	r2, [pc, #192]	; (80057ec <quaternionToEuler+0x1d4>)
 800572a:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 800572c:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <quaternionToEuler+0x1d0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	ed93 7a01 	vldr	s14, [r3, #4]
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	edd3 7a04 	vldr	s15, [r3, #16]
 800573c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005740:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	edd3 6a02 	vldr	s13, [r3, #8]
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <quaternionToEuler+0x1d0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005758:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800575c:	ee17 0a90 	vmov	r0, s15
 8005760:	f7fa ff12 	bl	8000588 <__aeabi_f2d>
 8005764:	4604      	mov	r4, r0
 8005766:	460d      	mov	r5, r1
 8005768:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <quaternionToEuler+0x1d0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	edd3 7a03 	vldr	s15, [r3, #12]
 8005778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <quaternionToEuler+0x1d0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	edd3 6a04 	vldr	s13, [r3, #16]
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <quaternionToEuler+0x1d0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	edd3 7a04 	vldr	s15, [r3, #16]
 800578c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005794:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a0:	ee17 0a90 	vmov	r0, s15
 80057a4:	f7fa fef0 	bl	8000588 <__aeabi_f2d>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	ec43 2b11 	vmov	d1, r2, r3
 80057b0:	ec45 4b10 	vmov	d0, r4, r5
 80057b4:	f010 faaa 	bl	8015d0c <atan2>
 80057b8:	ec51 0b10 	vmov	r0, r1, d0
 80057bc:	a308      	add	r3, pc, #32	; (adr r3, 80057e0 <quaternionToEuler+0x1c8>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f7fa ff39 	bl	8000638 <__aeabi_dmul>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	f7fb fa2b 	bl	8000c28 <__aeabi_d2f>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4a05      	ldr	r2, [pc, #20]	; (80057ec <quaternionToEuler+0x1d4>)
 80057d6:	6093      	str	r3, [r2, #8]
}
 80057d8:	bf00      	nop
 80057da:	bdb0      	pop	{r4, r5, r7, pc}
 80057dc:	f3af 8000 	nop.w
 80057e0:	1a63c1f8 	.word	0x1a63c1f8
 80057e4:	404ca5dc 	.word	0x404ca5dc
 80057e8:	20000008 	.word	0x20000008
 80057ec:	200009e4 	.word	0x200009e4

080057f0 <quaternionToTheta>:


float quaternionToTheta(){
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0

	float theta = 0.0;
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 80057fc:	4b5a      	ldr	r3, [pc, #360]	; (8005968 <quaternionToTheta+0x178>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	edd3 7a02 	vldr	s15, [r3, #8]
 8005804:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005808:	4b57      	ldr	r3, [pc, #348]	; (8005968 <quaternionToTheta+0x178>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005814:	4b54      	ldr	r3, [pc, #336]	; (8005968 <quaternionToTheta+0x178>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	edd3 7a03 	vldr	s15, [r3, #12]
 800581c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005820:	4b51      	ldr	r3, [pc, #324]	; (8005968 <quaternionToTheta+0x178>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	edd3 7a01 	vldr	s15, [r3, #4]
 8005828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800582c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005830:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 8005834:	4b4c      	ldr	r3, [pc, #304]	; (8005968 <quaternionToTheta+0x178>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	edd3 7a03 	vldr	s15, [r3, #12]
 800583c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005840:	4b49      	ldr	r3, [pc, #292]	; (8005968 <quaternionToTheta+0x178>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	edd3 7a04 	vldr	s15, [r3, #16]
 8005848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584c:	4b46      	ldr	r3, [pc, #280]	; (8005968 <quaternionToTheta+0x178>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	edd3 7a02 	vldr	s15, [r3, #8]
 8005854:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005858:	4b43      	ldr	r3, [pc, #268]	; (8005968 <quaternionToTheta+0x178>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005868:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <quaternionToTheta+0x178>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	edd3 7a02 	vldr	s15, [r3, #8]
 8005874:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005878:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <quaternionToTheta+0x178>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005888:	ee37 7a67 	vsub.f32	s14, s14, s15
 800588c:	4b36      	ldr	r3, [pc, #216]	; (8005968 <quaternionToTheta+0x178>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	edd3 7a03 	vldr	s15, [r3, #12]
 8005894:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005898:	4b33      	ldr	r3, [pc, #204]	; (8005968 <quaternionToTheta+0x178>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	edd3 7a03 	vldr	s15, [r3, #12]
 80058a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058a8:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 80058bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80058c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80058c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80058c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80058d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	ee17 0a90 	vmov	r0, s15
 80058e0:	f7fa fe52 	bl	8000588 <__aeabi_f2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	ec43 2b10 	vmov	d0, r2, r3
 80058ec:	f010 fa80 	bl	8015df0 <sqrt>
 80058f0:	ec53 2b10 	vmov	r2, r3, d0
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	f7fb f996 	bl	8000c28 <__aeabi_d2f>
 80058fc:	4603      	mov	r3, r0
 80058fe:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8005900:	ed97 7a02 	vldr	s14, [r7, #8]
 8005904:	edd7 7a01 	vldr	s15, [r7, #4]
 8005908:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800590c:	ee16 0a90 	vmov	r0, s13
 8005910:	f7fa fe3a 	bl	8000588 <__aeabi_f2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	ec43 2b10 	vmov	d0, r2, r3
 800591c:	f010 f98e 	bl	8015c3c <acos>
 8005920:	ec51 0b10 	vmov	r0, r1, d0
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	4b10      	ldr	r3, [pc, #64]	; (800596c <quaternionToTheta+0x17c>)
 800592a:	f7fa fe85 	bl	8000638 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	a30a      	add	r3, pc, #40	; (adr r3, 8005960 <quaternionToTheta+0x170>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa ffa6 	bl	800088c <__aeabi_ddiv>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f7fb f96e 	bl	8000c28 <__aeabi_d2f>
 800594c:	4603      	mov	r3, r0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	ee07 3a90 	vmov	s15, r3
}
 8005956:	eeb0 0a67 	vmov.f32	s0, s15
 800595a:	3728      	adds	r7, #40	; 0x28
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	51eb851f 	.word	0x51eb851f
 8005964:	40091eb8 	.word	0x40091eb8
 8005968:	20000008 	.word	0x20000008
 800596c:	40668000 	.word	0x40668000

08005970 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion() {
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b092      	sub	sp, #72	; 0x48
 8005974:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8005976:	4b99      	ldr	r3, [pc, #612]	; (8005bdc <getInitialQuaternion+0x26c>)
 8005978:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800597c:	4b97      	ldr	r3, [pc, #604]	; (8005bdc <getInitialQuaternion+0x26c>)
 800597e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005986:	4b95      	ldr	r3, [pc, #596]	; (8005bdc <getInitialQuaternion+0x26c>)
 8005988:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800598c:	4b93      	ldr	r3, [pc, #588]	; (8005bdc <getInitialQuaternion+0x26c>)
 800598e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800599a:	4b90      	ldr	r3, [pc, #576]	; (8005bdc <getInitialQuaternion+0x26c>)
 800599c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 80059a0:	4b8e      	ldr	r3, [pc, #568]	; (8005bdc <getInitialQuaternion+0x26c>)
 80059a2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80059a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ae:	ee17 0a90 	vmov	r0, s15
 80059b2:	f7fa fde9 	bl	8000588 <__aeabi_f2d>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	ec43 2b10 	vmov	d0, r2, r3
 80059be:	f010 fa17 	bl	8015df0 <sqrt>
 80059c2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 80059c6:	4b85      	ldr	r3, [pc, #532]	; (8005bdc <getInitialQuaternion+0x26c>)
 80059c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fddb 	bl	8000588 <__aeabi_f2d>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 80059da:	4b80      	ldr	r3, [pc, #512]	; (8005bdc <getInitialQuaternion+0x26c>)
 80059dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fa fdd1 	bl	8000588 <__aeabi_f2d>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 80059ee:	4b7b      	ldr	r3, [pc, #492]	; (8005bdc <getInitialQuaternion+0x26c>)
 80059f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fa fdc7 	bl	8000588 <__aeabi_f2d>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8005a02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a0a:	f7fa ff3f 	bl	800088c <__aeabi_ddiv>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8005a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a1e:	f7fa ff35 	bl	800088c <__aeabi_ddiv>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 8005a2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a32:	f7fa ff2b 	bl	800088c <__aeabi_ddiv>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8005a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	4966      	ldr	r1, [pc, #408]	; (8005be0 <getInitialQuaternion+0x270>)
 8005a48:	f7fa fc3e 	bl	80002c8 <__aeabi_dsub>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	ec43 2b17 	vmov	d7, r2, r3
 8005a54:	eeb0 0a47 	vmov.f32	s0, s14
 8005a58:	eef0 0a67 	vmov.f32	s1, s15
 8005a5c:	f010 f9c8 	bl	8015df0 <sqrt>
 8005a60:	ec51 0b10 	vmov	r0, r1, d0
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	4b5e      	ldr	r3, [pc, #376]	; (8005be4 <getInitialQuaternion+0x274>)
 8005a6a:	f7fa fde5 	bl	8000638 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8005a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7a:	f04f 0000 	mov.w	r0, #0
 8005a7e:	4959      	ldr	r1, [pc, #356]	; (8005be4 <getInitialQuaternion+0x274>)
 8005a80:	f7fa ff04 	bl	800088c <__aeabi_ddiv>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8005a8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a94:	f7fa fdd0 	bl	8000638 <__aeabi_dmul>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	4b4f      	ldr	r3, [pc, #316]	; (8005be4 <getInitialQuaternion+0x274>)
 8005aa6:	f7fa fdc7 	bl	8000638 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8005ab2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005ab6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005aba:	f7fa fdbd 	bl	8000638 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <getInitialQuaternion+0x274>)
 8005acc:	f7fa fdb4 	bl	8000638 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aec:	f7fa fda4 	bl	8000638 <__aeabi_dmul>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4614      	mov	r4, r2
 8005af6:	461d      	mov	r5, r3
 8005af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b00:	f7fa fd9a 	bl	8000638 <__aeabi_dmul>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4620      	mov	r0, r4
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	f7fa fbde 	bl	80002cc <__adddf3>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	461d      	mov	r5, r3
 8005b18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b20:	f7fa fd8a 	bl	8000638 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7fa fbce 	bl	80002cc <__adddf3>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b40:	f7fa fd7a 	bl	8000638 <__aeabi_dmul>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fa fbbe 	bl	80002cc <__adddf3>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	ec43 2b17 	vmov	d7, r2, r3
 8005b58:	eeb0 0a47 	vmov.f32	s0, s14
 8005b5c:	eef0 0a67 	vmov.f32	s1, s15
 8005b60:	f010 f946 	bl	8015df0 <sqrt>
 8005b64:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b70:	f7fa fe8c 	bl	800088c <__aeabi_ddiv>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	491b      	ldr	r1, [pc, #108]	; (8005be8 <getInitialQuaternion+0x278>)
 8005b7a:	680c      	ldr	r4, [r1, #0]
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f7fb f852 	bl	8000c28 <__aeabi_d2f>
 8005b84:	4603      	mov	r3, r0
 8005b86:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8005b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b90:	f7fa fe7c 	bl	800088c <__aeabi_ddiv>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4913      	ldr	r1, [pc, #76]	; (8005be8 <getInitialQuaternion+0x278>)
 8005b9a:	680c      	ldr	r4, [r1, #0]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f7fb f842 	bl	8000c28 <__aeabi_d2f>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb0:	f7fa fe6c 	bl	800088c <__aeabi_ddiv>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	490b      	ldr	r1, [pc, #44]	; (8005be8 <getInitialQuaternion+0x278>)
 8005bba:	680c      	ldr	r4, [r1, #0]
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	f7fb f832 	bl	8000c28 <__aeabi_d2f>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <getInitialQuaternion+0x278>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	611a      	str	r2, [r3, #16]
}
 8005bd2:	bf00      	nop
 8005bd4:	3748      	adds	r7, #72	; 0x48
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000710 	.word	0x20000710
 8005be0:	3ff00000 	.word	0x3ff00000
 8005be4:	3fe00000 	.word	0x3fe00000
 8005be8:	20000008 	.word	0x20000008

08005bec <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005bec:	b084      	sub	sp, #16
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	f107 0c10 	add.w	ip, r7, #16
 8005bf8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005c00:	7c3b      	ldrb	r3, [r7, #16]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c08:	fb03 f202 	mul.w	r2, r3, r2
 8005c0c:	7c7b      	ldrb	r3, [r7, #17]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	460b      	mov	r3, r1
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	1a5b      	subs	r3, r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	7cba      	ldrb	r2, [r7, #18]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005c26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <save_time+0x6c>)
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005c3a:	f004 f919 	bl	8009e70 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	2102      	movs	r1, #2
 8005c42:	4806      	ldr	r0, [pc, #24]	; (8005c5c <save_time+0x70>)
 8005c44:	f005 fc73 	bl	800b52e <HAL_RTCEx_BKUPWrite>
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c52:	b004      	add	sp, #16
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	00015180 	.word	0x00015180
 8005c5c:	200003d8 	.word	0x200003d8

08005c60 <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005c60:	b084      	sub	sp, #16
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	f107 0c10 	add.w	ip, r7, #16
 8005c6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005c74:	7c3b      	ldrb	r3, [r7, #16]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c7c:	fb03 f202 	mul.w	r2, r3, r2
 8005c80:	7c7b      	ldrb	r3, [r7, #17]
 8005c82:	4619      	mov	r1, r3
 8005c84:	460b      	mov	r3, r1
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	1a5b      	subs	r3, r3, r1
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	7cba      	ldrb	r2, [r7, #18]
 8005c90:	4413      	add	r3, r2
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <measure_abs_time+0x78>)
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005cae:	f004 f8df 	bl	8009e70 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4809      	ldr	r0, [pc, #36]	; (8005cdc <measure_abs_time+0x7c>)
 8005cb6:	f005 fc54 	bl	800b562 <HAL_RTCEx_BKUPRead>
 8005cba:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfb8      	it	lt
 8005cc6:	425b      	neglt	r3, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd2:	b004      	add	sp, #16
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00015180 	.word	0x00015180
 8005cdc:	200003d8 	.word	0x200003d8

08005ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <HAL_MspInit+0x4c>)
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <HAL_MspInit+0x4c>)
 8005cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <HAL_MspInit+0x4c>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	2300      	movs	r3, #0
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_MspInit+0x4c>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <HAL_MspInit+0x4c>)
 8005d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_MspInit+0x4c>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40023800 	.word	0x40023800

08005d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	605a      	str	r2, [r3, #4]
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a17      	ldr	r2, [pc, #92]	; (8005dac <HAL_ADC_MspInit+0x7c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d127      	bne.n	8005da2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d60:	6453      	str	r3, [r2, #68]	; 0x44
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d78:	f043 0304 	orr.w	r3, r3, #4
 8005d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <HAL_ADC_MspInit+0x80>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8005d8a:	2306      	movs	r3, #6
 8005d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4805      	ldr	r0, [pc, #20]	; (8005db4 <HAL_ADC_MspInit+0x84>)
 8005d9e:	f002 fd8b 	bl	80088b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005da2:	bf00      	nop
 8005da4:	3728      	adds	r7, #40	; 0x28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40012000 	.word	0x40012000
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40020800 	.word	0x40020800

08005db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	; 0x30
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc0:	f107 031c 	add.w	r3, r7, #28
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <HAL_I2C_MspInit+0x128>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d12c      	bne.n	8005e34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4a40      	ldr	r2, [pc, #256]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dea:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005df6:	23c0      	movs	r3, #192	; 0xc0
 8005df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dfa:	2312      	movs	r3, #18
 8005dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e02:	2303      	movs	r3, #3
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e06:	2304      	movs	r3, #4
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e0a:	f107 031c 	add.w	r3, r7, #28
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4835      	ldr	r0, [pc, #212]	; (8005ee8 <HAL_I2C_MspInit+0x130>)
 8005e12:	f002 fd51 	bl	80088b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e24:	6413      	str	r3, [r2, #64]	; 0x40
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005e32:	e050      	b.n	8005ed6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2c      	ldr	r2, [pc, #176]	; (8005eec <HAL_I2C_MspInit+0x134>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d14b      	bne.n	8005ed6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4e:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e84:	2303      	movs	r3, #3
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	4817      	ldr	r0, [pc, #92]	; (8005ef0 <HAL_I2C_MspInit+0x138>)
 8005e94:	f002 fd10 	bl	80088b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e9e:	2312      	movs	r3, #18
 8005ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005eaa:	2304      	movs	r3, #4
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eae:	f107 031c 	add.w	r3, r7, #28
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	480f      	ldr	r0, [pc, #60]	; (8005ef4 <HAL_I2C_MspInit+0x13c>)
 8005eb6:	f002 fcff 	bl	80088b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	4a08      	ldr	r2, [pc, #32]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_I2C_MspInit+0x12c>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
}
 8005ed6:	bf00      	nop
 8005ed8:	3730      	adds	r7, #48	; 0x30
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40005400 	.word	0x40005400
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40020400 	.word	0x40020400
 8005eec:	40005c00 	.word	0x40005c00
 8005ef0:	40020800 	.word	0x40020800
 8005ef4:	40020000 	.word	0x40020000

08005ef8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <HAL_I2C_MspDeInit+0x64>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10e      	bne.n	8005f28 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <HAL_I2C_MspDeInit+0x68>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <HAL_I2C_MspDeInit+0x68>)
 8005f10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005f16:	2140      	movs	r1, #64	; 0x40
 8005f18:	4812      	ldr	r0, [pc, #72]	; (8005f64 <HAL_I2C_MspDeInit+0x6c>)
 8005f1a:	f002 fe61 	bl	8008be0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	4810      	ldr	r0, [pc, #64]	; (8005f64 <HAL_I2C_MspDeInit+0x6c>)
 8005f22:	f002 fe5d 	bl	8008be0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005f26:	e014      	b.n	8005f52 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <HAL_I2C_MspDeInit+0x70>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10f      	bne.n	8005f52 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_I2C_MspDeInit+0x68>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	4a0a      	ldr	r2, [pc, #40]	; (8005f60 <HAL_I2C_MspDeInit+0x68>)
 8005f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f3c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f42:	480a      	ldr	r0, [pc, #40]	; (8005f6c <HAL_I2C_MspDeInit+0x74>)
 8005f44:	f002 fe4c 	bl	8008be0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f4c:	4808      	ldr	r0, [pc, #32]	; (8005f70 <HAL_I2C_MspDeInit+0x78>)
 8005f4e:	f002 fe47 	bl	8008be0 <HAL_GPIO_DeInit>
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40005400 	.word	0x40005400
 8005f60:	40023800 	.word	0x40023800
 8005f64:	40020400 	.word	0x40020400
 8005f68:	40005c00 	.word	0x40005c00
 8005f6c:	40020800 	.word	0x40020800
 8005f70:	40020000 	.word	0x40020000

08005f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b09a      	sub	sp, #104	; 0x68
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	225c      	movs	r2, #92	; 0x5c
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00a fd89 	bl	8010a9c <memset>
  if(hrtc->Instance==RTC)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <HAL_RTC_MspInit+0x4c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d111      	bne.n	8005fb8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f94:	2320      	movs	r3, #32
 8005f96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f9e:	f107 030c 	add.w	r3, r7, #12
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f004 f908 	bl	800a1b8 <HAL_RCCEx_PeriphCLKConfig>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005fae:	f7ff f9b7 	bl	8005320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_RTC_MspInit+0x50>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005fb8:	bf00      	nop
 8005fba:	3768      	adds	r7, #104	; 0x68
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40002800 	.word	0x40002800
 8005fc4:	42470e3c 	.word	0x42470e3c

08005fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_SPI_MspInit+0x84>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d12b      	bne.n	8006042 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_SPI_MspInit+0x88>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	6313      	str	r3, [r2, #48]	; 0x30
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006022:	23e0      	movs	r3, #224	; 0xe0
 8006024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006026:	2302      	movs	r3, #2
 8006028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602e:	2303      	movs	r3, #3
 8006030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006032:	2305      	movs	r3, #5
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	4619      	mov	r1, r3
 800603c:	4805      	ldr	r0, [pc, #20]	; (8006054 <HAL_SPI_MspInit+0x8c>)
 800603e:	f002 fc3b 	bl	80088b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006042:	bf00      	nop
 8006044:	3728      	adds	r7, #40	; 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40013000 	.word	0x40013000
 8006050:	40023800 	.word	0x40023800
 8006054:	40020000 	.word	0x40020000

08006058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b090      	sub	sp, #64	; 0x40
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7f      	ldr	r2, [pc, #508]	; (8006274 <HAL_UART_MspInit+0x21c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	f040 8092 	bne.w	80061a0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800607c:	2300      	movs	r3, #0
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006080:	4b7d      	ldr	r3, [pc, #500]	; (8006278 <HAL_UART_MspInit+0x220>)
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	4a7c      	ldr	r2, [pc, #496]	; (8006278 <HAL_UART_MspInit+0x220>)
 8006086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608a:	6413      	str	r3, [r2, #64]	; 0x40
 800608c:	4b7a      	ldr	r3, [pc, #488]	; (8006278 <HAL_UART_MspInit+0x220>)
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	4b76      	ldr	r3, [pc, #472]	; (8006278 <HAL_UART_MspInit+0x220>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	4a75      	ldr	r2, [pc, #468]	; (8006278 <HAL_UART_MspInit+0x220>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6313      	str	r3, [r2, #48]	; 0x30
 80060a8:	4b73      	ldr	r3, [pc, #460]	; (8006278 <HAL_UART_MspInit+0x220>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060b4:	2303      	movs	r3, #3
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b8:	2302      	movs	r3, #2
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c0:	2303      	movs	r3, #3
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80060c4:	2308      	movs	r3, #8
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060cc:	4619      	mov	r1, r3
 80060ce:	486b      	ldr	r0, [pc, #428]	; (800627c <HAL_UART_MspInit+0x224>)
 80060d0:	f002 fbf2 	bl	80088b8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060d6:	4a6b      	ldr	r2, [pc, #428]	; (8006284 <HAL_UART_MspInit+0x22c>)
 80060d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80060da:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060e0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060e2:	4b67      	ldr	r3, [pc, #412]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060e4:	2240      	movs	r2, #64	; 0x40
 80060e6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060e8:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060ee:	4b64      	ldr	r3, [pc, #400]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060f4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f6:	4b62      	ldr	r3, [pc, #392]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006102:	4b5f      	ldr	r3, [pc, #380]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006104:	2200      	movs	r2, #0
 8006106:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_UART_MspInit+0x228>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800610e:	4b5c      	ldr	r3, [pc, #368]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006110:	2200      	movs	r2, #0
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006114:	485a      	ldr	r0, [pc, #360]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006116:	f001 ff61 	bl	8007fdc <HAL_DMA_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006120:	f7ff f8fe 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a56      	ldr	r2, [pc, #344]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006128:	635a      	str	r2, [r3, #52]	; 0x34
 800612a:	4a55      	ldr	r2, [pc, #340]	; (8006280 <HAL_UART_MspInit+0x228>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006130:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006132:	4a56      	ldr	r2, [pc, #344]	; (800628c <HAL_UART_MspInit+0x234>)
 8006134:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006136:	4b54      	ldr	r3, [pc, #336]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800613c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800613e:	4b52      	ldr	r3, [pc, #328]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006140:	2200      	movs	r2, #0
 8006142:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006146:	2200      	movs	r2, #0
 8006148:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800614a:	4b4f      	ldr	r3, [pc, #316]	; (8006288 <HAL_UART_MspInit+0x230>)
 800614c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006150:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006152:	4b4d      	ldr	r3, [pc, #308]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006154:	2200      	movs	r2, #0
 8006156:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006158:	4b4b      	ldr	r3, [pc, #300]	; (8006288 <HAL_UART_MspInit+0x230>)
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800615e:	4b4a      	ldr	r3, [pc, #296]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006164:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006166:	4b48      	ldr	r3, [pc, #288]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006168:	2200      	movs	r2, #0
 800616a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800616c:	4b46      	ldr	r3, [pc, #280]	; (8006288 <HAL_UART_MspInit+0x230>)
 800616e:	2200      	movs	r2, #0
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006172:	4845      	ldr	r0, [pc, #276]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006174:	f001 ff32 	bl	8007fdc <HAL_DMA_Init>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800617e:	f7ff f8cf 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a40      	ldr	r2, [pc, #256]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
 8006188:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <HAL_UART_MspInit+0x230>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800618e:	2200      	movs	r2, #0
 8006190:	2100      	movs	r1, #0
 8006192:	2034      	movs	r0, #52	; 0x34
 8006194:	f001 fedd 	bl	8007f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006198:	2034      	movs	r0, #52	; 0x34
 800619a:	f001 fef6 	bl	8007f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800619e:	e135      	b.n	800640c <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART1)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <HAL_UART_MspInit+0x238>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d178      	bne.n	800629c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	4b32      	ldr	r3, [pc, #200]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	4a31      	ldr	r2, [pc, #196]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	6453      	str	r3, [r2, #68]	; 0x44
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b28      	ldr	r3, [pc, #160]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	2302      	movs	r3, #2
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061f4:	2307      	movs	r3, #7
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061fc:	4619      	mov	r1, r3
 80061fe:	481f      	ldr	r0, [pc, #124]	; (800627c <HAL_UART_MspInit+0x224>)
 8006200:	f002 fb5a 	bl	80088b8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006204:	4b23      	ldr	r3, [pc, #140]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006206:	4a24      	ldr	r2, [pc, #144]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006208:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800620a:	4b22      	ldr	r3, [pc, #136]	; (8006294 <HAL_UART_MspInit+0x23c>)
 800620c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006210:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006212:	4b20      	ldr	r3, [pc, #128]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006214:	2240      	movs	r2, #64	; 0x40
 8006216:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <HAL_UART_MspInit+0x23c>)
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006224:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006226:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006228:	2200      	movs	r2, #0
 800622a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800622c:	4b19      	ldr	r3, [pc, #100]	; (8006294 <HAL_UART_MspInit+0x23c>)
 800622e:	2200      	movs	r2, #0
 8006230:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006234:	2200      	movs	r2, #0
 8006236:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_UART_MspInit+0x23c>)
 800623a:	2200      	movs	r2, #0
 800623c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006240:	2200      	movs	r2, #0
 8006242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006244:	4813      	ldr	r0, [pc, #76]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006246:	f001 fec9 	bl	8007fdc <HAL_DMA_Init>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006250:	f7ff f866 	bl	8005320 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0f      	ldr	r2, [pc, #60]	; (8006294 <HAL_UART_MspInit+0x23c>)
 8006258:	635a      	str	r2, [r3, #52]	; 0x34
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <HAL_UART_MspInit+0x23c>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006260:	2200      	movs	r2, #0
 8006262:	2100      	movs	r1, #0
 8006264:	2025      	movs	r0, #37	; 0x25
 8006266:	f001 fe74 	bl	8007f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800626a:	2025      	movs	r0, #37	; 0x25
 800626c:	f001 fe8d 	bl	8007f8a <HAL_NVIC_EnableIRQ>
}
 8006270:	e0cc      	b.n	800640c <HAL_UART_MspInit+0x3b4>
 8006272:	bf00      	nop
 8006274:	40004c00 	.word	0x40004c00
 8006278:	40023800 	.word	0x40023800
 800627c:	40020000 	.word	0x40020000
 8006280:	20000560 	.word	0x20000560
 8006284:	40026070 	.word	0x40026070
 8006288:	200005c0 	.word	0x200005c0
 800628c:	40026040 	.word	0x40026040
 8006290:	40011000 	.word	0x40011000
 8006294:	20000620 	.word	0x20000620
 8006298:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <HAL_UART_MspInit+0x3bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d162      	bne.n	800636c <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART2_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b4:	6413      	str	r3, [r2, #64]	; 0x40
 80062b6:	4b58      	ldr	r3, [pc, #352]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	4b54      	ldr	r3, [pc, #336]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4a53      	ldr	r2, [pc, #332]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	6313      	str	r3, [r2, #48]	; 0x30
 80062d2:	4b51      	ldr	r3, [pc, #324]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062de:	230c      	movs	r3, #12
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e2:	2302      	movs	r3, #2
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ea:	2303      	movs	r3, #3
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80062ee:	2307      	movs	r3, #7
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062f6:	4619      	mov	r1, r3
 80062f8:	4848      	ldr	r0, [pc, #288]	; (800641c <HAL_UART_MspInit+0x3c4>)
 80062fa:	f002 fadd 	bl	80088b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80062fe:	4b48      	ldr	r3, [pc, #288]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006300:	4a48      	ldr	r2, [pc, #288]	; (8006424 <HAL_UART_MspInit+0x3cc>)
 8006302:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006304:	4b46      	ldr	r3, [pc, #280]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800630a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800630c:	4b44      	ldr	r3, [pc, #272]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006312:	4b43      	ldr	r3, [pc, #268]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006318:	4b41      	ldr	r3, [pc, #260]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 800631a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800631e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006320:	4b3f      	ldr	r3, [pc, #252]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006322:	2200      	movs	r2, #0
 8006324:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800632c:	4b3c      	ldr	r3, [pc, #240]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006332:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006334:	2200      	movs	r2, #0
 8006336:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006338:	4b39      	ldr	r3, [pc, #228]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 800633a:	2200      	movs	r2, #0
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800633e:	4838      	ldr	r0, [pc, #224]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006340:	f001 fe4c 	bl	8007fdc <HAL_DMA_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800634a:	f7fe ffe9 	bl	8005320 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a33      	ldr	r2, [pc, #204]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
 8006354:	4a32      	ldr	r2, [pc, #200]	; (8006420 <HAL_UART_MspInit+0x3c8>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800635a:	2200      	movs	r2, #0
 800635c:	2101      	movs	r1, #1
 800635e:	2026      	movs	r0, #38	; 0x26
 8006360:	f001 fdf7 	bl	8007f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006364:	2026      	movs	r0, #38	; 0x26
 8006366:	f001 fe10 	bl	8007f8a <HAL_NVIC_EnableIRQ>
}
 800636a:	e04f      	b.n	800640c <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART3)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <HAL_UART_MspInit+0x3d0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d14a      	bne.n	800640c <HAL_UART_MspInit+0x3b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	4a26      	ldr	r2, [pc, #152]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 8006380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006384:	6413      	str	r3, [r2, #64]	; 0x40
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	4a1f      	ldr	r2, [pc, #124]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 800639c:	f043 0304 	orr.w	r3, r3, #4
 80063a0:	6313      	str	r3, [r2, #48]	; 0x30
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]
 80063b2:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	4a18      	ldr	r2, [pc, #96]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	6313      	str	r3, [r2, #48]	; 0x30
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <HAL_UART_MspInit+0x3c0>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	60bb      	str	r3, [r7, #8]
 80063c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80063ca:	2320      	movs	r3, #32
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ce:	2302      	movs	r3, #2
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063d6:	2303      	movs	r3, #3
 80063d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063da:	2307      	movs	r3, #7
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063e2:	4619      	mov	r1, r3
 80063e4:	4811      	ldr	r0, [pc, #68]	; (800642c <HAL_UART_MspInit+0x3d4>)
 80063e6:	f002 fa67 	bl	80088b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f0:	2302      	movs	r3, #2
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f8:	2303      	movs	r3, #3
 80063fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063fc:	2307      	movs	r3, #7
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006404:	4619      	mov	r1, r3
 8006406:	480a      	ldr	r0, [pc, #40]	; (8006430 <HAL_UART_MspInit+0x3d8>)
 8006408:	f002 fa56 	bl	80088b8 <HAL_GPIO_Init>
}
 800640c:	bf00      	nop
 800640e:	3740      	adds	r7, #64	; 0x40
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40004400 	.word	0x40004400
 8006418:	40023800 	.word	0x40023800
 800641c:	40020000 	.word	0x40020000
 8006420:	20000680 	.word	0x20000680
 8006424:	40026088 	.word	0x40026088
 8006428:	40004800 	.word	0x40004800
 800642c:	40020800 	.word	0x40020800
 8006430:	40020400 	.word	0x40020400

08006434 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a31      	ldr	r2, [pc, #196]	; (8006508 <HAL_UART_MspDeInit+0xd4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d117      	bne.n	8006476 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8006446:	4b31      	ldr	r3, [pc, #196]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	4a30      	ldr	r2, [pc, #192]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 800644c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006450:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8006452:	2103      	movs	r1, #3
 8006454:	482e      	ldr	r0, [pc, #184]	; (8006510 <HAL_UART_MspDeInit+0xdc>)
 8006456:	f002 fbc3 	bl	8008be0 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fe6a 	bl	8008138 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fe65 	bl	8008138 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800646e:	2034      	movs	r0, #52	; 0x34
 8006470:	f001 fd99 	bl	8007fa6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8006474:	e044      	b.n	8006500 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a26      	ldr	r2, [pc, #152]	; (8006514 <HAL_UART_MspDeInit+0xe0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006480:	4b22      	ldr	r3, [pc, #136]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800648c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006490:	481f      	ldr	r0, [pc, #124]	; (8006510 <HAL_UART_MspDeInit+0xdc>)
 8006492:	f002 fba5 	bl	8008be0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fe4c 	bl	8008138 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80064a0:	2025      	movs	r0, #37	; 0x25
 80064a2:	f001 fd80 	bl	8007fa6 <HAL_NVIC_DisableIRQ>
}
 80064a6:	e02b      	b.n	8006500 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART2)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <HAL_UART_MspDeInit+0xe4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d112      	bne.n	80064d8 <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART2_CLK_DISABLE();
 80064b2:	4b16      	ldr	r3, [pc, #88]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 80064b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064bc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80064be:	210c      	movs	r1, #12
 80064c0:	4813      	ldr	r0, [pc, #76]	; (8006510 <HAL_UART_MspDeInit+0xdc>)
 80064c2:	f002 fb8d 	bl	8008be0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fe34 	bl	8008138 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80064d0:	2026      	movs	r0, #38	; 0x26
 80064d2:	f001 fd68 	bl	8007fa6 <HAL_NVIC_DisableIRQ>
}
 80064d6:	e013      	b.n	8006500 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART3)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a0f      	ldr	r2, [pc, #60]	; (800651c <HAL_UART_MspDeInit+0xe8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d10e      	bne.n	8006500 <HAL_UART_MspDeInit+0xcc>
    __HAL_RCC_USART3_CLK_DISABLE();
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	4a09      	ldr	r2, [pc, #36]	; (800650c <HAL_UART_MspDeInit+0xd8>)
 80064e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80064ee:	2120      	movs	r1, #32
 80064f0:	480b      	ldr	r0, [pc, #44]	; (8006520 <HAL_UART_MspDeInit+0xec>)
 80064f2:	f002 fb75 	bl	8008be0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80064f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064fa:	480a      	ldr	r0, [pc, #40]	; (8006524 <HAL_UART_MspDeInit+0xf0>)
 80064fc:	f002 fb70 	bl	8008be0 <HAL_GPIO_DeInit>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40004c00 	.word	0x40004c00
 800650c:	40023800 	.word	0x40023800
 8006510:	40020000 	.word	0x40020000
 8006514:	40011000 	.word	0x40011000
 8006518:	40004400 	.word	0x40004400
 800651c:	40004800 	.word	0x40004800
 8006520:	40020800 	.word	0x40020800
 8006524:	40020400 	.word	0x40020400

08006528 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void){
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 800652c:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <SDTimer_Handler+0x40>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d006      	beq.n	8006544 <SDTimer_Handler+0x1c>
		Timer1--;
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <SDTimer_Handler+0x40>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <SDTimer_Handler+0x40>)
 8006542:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8006544:	4b09      	ldr	r3, [pc, #36]	; (800656c <SDTimer_Handler+0x44>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d006      	beq.n	800655c <SDTimer_Handler+0x34>
		Timer2--;
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <SDTimer_Handler+0x44>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <SDTimer_Handler+0x44>)
 800655a:	701a      	strb	r2, [r3, #0]

}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	200009f1 	.word	0x200009f1
 800656c:	200009f2 	.word	0x200009f2

08006570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006574:	e7fe      	b.n	8006574 <NMI_Handler+0x4>

08006576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800657a:	e7fe      	b.n	800657a <HardFault_Handler+0x4>

0800657c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006580:	e7fe      	b.n	8006580 <MemManage_Handler+0x4>

08006582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006586:	e7fe      	b.n	8006586 <BusFault_Handler+0x4>

08006588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800658c:	e7fe      	b.n	800658c <UsageFault_Handler+0x4>

0800658e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <SysTick_Handler+0x30>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	3301      	adds	r3, #1
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <SysTick_Handler+0x30>)
 80065c8:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt>=10)
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <SysTick_Handler+0x30>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b09      	cmp	r3, #9
 80065d2:	d904      	bls.n	80065de <SysTick_Handler+0x26>
		{
			FatFsCnt=0;
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <SysTick_Handler+0x30>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 80065da:	f7ff ffa5 	bl	8006528 <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065de:	f000 ff65 	bl	80074ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	200009f0 	.word	0x200009f0

080065ec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80065f0:	2008      	movs	r0, #8
 80065f2:	f002 fc35 	bl	8008e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}

080065fa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80065fe:	2010      	movs	r0, #16
 8006600:	f002 fc2e 	bl	8008e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006604:	bf00      	nop
 8006606:	bd80      	pop	{r7, pc}

08006608 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800660c:	4802      	ldr	r0, [pc, #8]	; (8006618 <DMA1_Stream2_IRQHandler+0x10>)
 800660e:	f001 fedb 	bl	80083c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200005c0 	.word	0x200005c0

0800661c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006620:	4802      	ldr	r0, [pc, #8]	; (800662c <DMA1_Stream4_IRQHandler+0x10>)
 8006622:	f001 fed1 	bl	80083c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000560 	.word	0x20000560

08006630 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006634:	4802      	ldr	r0, [pc, #8]	; (8006640 <DMA1_Stream5_IRQHandler+0x10>)
 8006636:	f001 fec7 	bl	80083c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000680 	.word	0x20000680

08006644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006648:	4802      	ldr	r0, [pc, #8]	; (8006654 <USART1_IRQHandler+0x10>)
 800664a:	f005 fd9d 	bl	800c188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000494 	.word	0x20000494

08006658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800665c:	4802      	ldr	r0, [pc, #8]	; (8006668 <USART2_IRQHandler+0x10>)
 800665e:	f005 fd93 	bl	800c188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200004d8 	.word	0x200004d8

0800666c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <UART4_IRQHandler+0x10>)
 8006672:	f005 fd89 	bl	800c188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000450 	.word	0x20000450

08006680 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006684:	4802      	ldr	r0, [pc, #8]	; (8006690 <DMA2_Stream7_IRQHandler+0x10>)
 8006686:	f001 fe9f 	bl	80083c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000620 	.word	0x20000620

08006694 <strain_gage_delay_us>:
#include "strain_gauge.h"

extern UART_HandleTypeDef huart1;

static void strain_gage_delay_us(void)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
  uint32_t delay = 4;
 800669a:	2304      	movs	r3, #4
 800669c:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800669e:	e006      	b.n	80066ae <strain_gage_delay_us+0x1a>
  {
    delay--;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	607b      	str	r3, [r7, #4]
    __nop(); __nop(); __nop(); __nop();
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
  while (delay > 0)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f5      	bne.n	80066a0 <strain_gage_delay_us+0xc>
  }
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <straing_gage_gpio_init>:

void straing_gage_gpio_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b09a      	sub	sp, #104	; 0x68
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[50];
  hx711->clk_gpio = clk_gpio;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80066ea:	815a      	strh	r2, [r3, #10]

  HAL_GPIO_DeInit(clk_gpio, clk_pin);
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	4619      	mov	r1, r3
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	f002 fa75 	bl	8008be0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(dat_gpio, dat_pin);
 80066f6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80066fa:	4619      	mov	r1, r3
 80066fc:	6838      	ldr	r0, [r7, #0]
 80066fe:	f002 fa6f 	bl	8008be0 <HAL_GPIO_DeInit>

  GPIO_InitTypeDef  gpio = {0};
 8006702:	f107 0310 	add.w	r3, r7, #16
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	605a      	str	r2, [r3, #4]
 800670c:	609a      	str	r2, [r3, #8]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8006712:	2301      	movs	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800671a:	2302      	movs	r3, #2
 800671c:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	4619      	mov	r1, r3
 8006728:	68b8      	ldr	r0, [r7, #8]
 800672a:	f002 f8c5 	bl	80088b8 <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_INPUT;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8006732:	2301      	movs	r3, #1
 8006734:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8006736:	2302      	movs	r3, #2
 8006738:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 800673a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800673e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	4619      	mov	r1, r3
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f002 f8b6 	bl	80088b8 <HAL_GPIO_Init>

  hx711_delay(10);
 800674c:	200a      	movs	r0, #10
 800674e:	f000 fecd 	bl	80074ec <HAL_Delay>
  int counter = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	667b      	str	r3, [r7, #100]	; 0x64
  int32_t offset = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
  for(int i = 0; i < 20; i++)
 800675a:	2300      	movs	r3, #0
 800675c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675e:	e013      	b.n	8006788 <straing_gage_gpio_init+0xc6>
  {
	  int32_t value = strain_gage_get_vals(hx711);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f81e 	bl	80067a2 <strain_gage_get_vals>
 8006766:	65b8      	str	r0, [r7, #88]	; 0x58
	  if(value != 0)
 8006768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <straing_gage_gpio_init+0xba>
	  {
		  offset += value;
 800676e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006772:	4413      	add	r3, r2
 8006774:	663b      	str	r3, [r7, #96]	; 0x60
		  counter++;
 8006776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006778:	3301      	adds	r3, #1
 800677a:	667b      	str	r3, [r7, #100]	; 0x64

	  }
	  hx711_delay(10);
 800677c:	200a      	movs	r0, #10
 800677e:	f000 feb5 	bl	80074ec <HAL_Delay>
  for(int i = 0; i < 20; i++)
 8006782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006784:	3301      	adds	r3, #1
 8006786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678a:	2b13      	cmp	r3, #19
 800678c:	dde8      	ble.n	8006760 <straing_gage_gpio_init+0x9e>
  }
  hx711->offset = offset / counter;
 800678e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006792:	fb92 f2f3 	sdiv	r2, r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	60da      	str	r2, [r3, #12]
}
 800679a:	bf00      	nop
 800679c:	3768      	adds	r7, #104	; 0x68
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <strain_gage_get_vals>:

int32_t strain_gage_get_vals(hx711_t *hx711)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80067ae:	f000 fe91 	bl	80074d4 <HAL_GetTick>
 80067b2:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80067b4:	e00b      	b.n	80067ce <strain_gage_get_vals+0x2c>
  {
    hx711_delay(1);
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 fe98 	bl	80074ec <HAL_Delay>
    if(HAL_GetTick() - startTime > 2)
 80067bc:	f000 fe8a 	bl	80074d4 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <strain_gage_get_vals+0x2c>
      return 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e058      	b.n	8006880 <strain_gage_get_vals+0xde>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	895b      	ldrh	r3, [r3, #10]
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f002 faf5 	bl	8008dc8 <HAL_GPIO_ReadPin>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d0e8      	beq.n	80067b6 <strain_gage_get_vals+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	74fb      	strb	r3, [r7, #19]
 80067e8:	e02a      	b.n	8006840 <strain_gage_get_vals+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	891b      	ldrh	r3, [r3, #8]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4619      	mov	r1, r3
 80067f6:	f002 faff 	bl	8008df8 <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 80067fa:	f7ff ff4b 	bl	8006694 <strain_gage_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	891b      	ldrh	r3, [r3, #8]
 8006806:	2200      	movs	r2, #0
 8006808:	4619      	mov	r1, r3
 800680a:	f002 faf5 	bl	8008df8 <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 800680e:	f7ff ff41 	bl	8006694 <strain_gage_delay_us>
    data = data << 1;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	895b      	ldrh	r3, [r3, #10]
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f002 fad0 	bl	8008dc8 <HAL_GPIO_ReadPin>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d102      	bne.n	8006834 <strain_gage_get_vals+0x92>
      data ++;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3301      	adds	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8006834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	3301      	adds	r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	74fb      	strb	r3, [r7, #19]
 8006840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006844:	2b17      	cmp	r3, #23
 8006846:	ddd0      	ble.n	80067ea <strain_gage_get_vals+0x48>
  }
  data = data ^ 0x800000;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 800684e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	891b      	ldrh	r3, [r3, #8]
 8006858:	2201      	movs	r2, #1
 800685a:	4619      	mov	r1, r3
 800685c:	f002 facc 	bl	8008df8 <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8006860:	f7ff ff18 	bl	8006694 <strain_gage_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	891b      	ldrh	r3, [r3, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	4619      	mov	r1, r3
 8006870:	f002 fac2 	bl	8008df8 <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8006874:	f7ff ff0e 	bl	8006694 <strain_gage_delay_us>
  return (int32_t)data - hx711->offset;
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	1ad3      	subs	r3, r2, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
	return 1;
 800688c:	2301      	movs	r3, #1
}
 800688e:	4618      	mov	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <_kill>:

int _kill(int pid, int sig)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80068a2:	f00a f8d1 	bl	8010a48 <__errno>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2216      	movs	r2, #22
 80068aa:	601a      	str	r2, [r3, #0]
	return -1;
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <_exit>:

void _exit (int status)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80068c0:	f04f 31ff 	mov.w	r1, #4294967295
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ffe7 	bl	8006898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80068ca:	e7fe      	b.n	80068ca <_exit+0x12>

080068cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e00a      	b.n	80068f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068de:	f3af 8000 	nop.w
 80068e2:	4601      	mov	r1, r0
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	60ba      	str	r2, [r7, #8]
 80068ea:	b2ca      	uxtb	r2, r1
 80068ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	3301      	adds	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	dbf0      	blt.n	80068de <_read+0x12>
	}

return len;
 80068fc:	687b      	ldr	r3, [r7, #4]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e009      	b.n	800692c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	60ba      	str	r2, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3301      	adds	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	dbf1      	blt.n	8006918 <_write+0x12>
	}
	return len;
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <_close>:

int _close(int file)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	return -1;
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006966:	605a      	str	r2, [r3, #4]
	return 0;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <_isatty>:

int _isatty(int file)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
	return 1;
 800697e:	2301      	movs	r3, #1
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
	return 0;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069b0:	4a14      	ldr	r2, [pc, #80]	; (8006a04 <_sbrk+0x5c>)
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <_sbrk+0x60>)
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <_sbrk+0x64>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069c4:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <_sbrk+0x64>)
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <_sbrk+0x68>)
 80069c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069ca:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <_sbrk+0x64>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d207      	bcs.n	80069e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069d8:	f00a f836 	bl	8010a48 <__errno>
 80069dc:	4603      	mov	r3, r0
 80069de:	220c      	movs	r2, #12
 80069e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	e009      	b.n	80069fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069e8:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <_sbrk+0x64>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069ee:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <_sbrk+0x64>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <_sbrk+0x64>)
 80069f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069fa:	68fb      	ldr	r3, [r7, #12]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20020000 	.word	0x20020000
 8006a08:	00000400 	.word	0x00000400
 8006a0c:	200009f4 	.word	0x200009f4
 8006a10:	20004978 	.word	0x20004978

08006a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <SystemInit+0x20>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <SystemInit+0x20>)
 8006a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <uart_Sd_Transmit>:
static power Power_Pack;
backup_sram_datas_s *Backup_Pack = (backup_sram_datas_s *)BKPSRAM_BASE;
*/

_io void uart_Sd_Transmit(char *string)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7f9 fbe5 	bl	8000210 <strlen>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, len, 2000); // transmit in blocking mode
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4803      	ldr	r0, [pc, #12]	; (8006a64 <uart_Sd_Transmit+0x2c>)
 8006a56:	f005 fa57 	bl	800bf08 <HAL_UART_Transmit>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	2000051c 	.word	0x2000051c

08006a68 <sdBufClear>:
	while (*buf++ != '\0')
		i++;
	return i;
}
_io void sdBufClear(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	e007      	b.n	8006a84 <sdBufClear+0x1c>
		fatBuff[i] = 0;
 8006a74:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <sdBufClear+0x34>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3301      	adds	r3, #1
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8a:	dbf3      	blt.n	8006a74 <sdBufClear+0xc>
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	200009f8 	.word	0x200009f8

08006aa0 <usr_fatfsInitial>:
	} while (fno.fname[0] != 0);

	f_closedir(&dir);
}
PUBLIC void usr_fatfsInitial(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
	MX_FATFS_Init();
 8006aa4:	f006 fcc8 	bl	800d438 <MX_FATFS_Init>
}
 8006aa8:	bf00      	nop
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <sdInitials>:
PUBLIC void sdInitials(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4939      	ldr	r1, [pc, #228]	; (8006b98 <sdInitials+0xec>)
 8006ab4:	4839      	ldr	r0, [pc, #228]	; (8006b9c <sdInitials+0xf0>)
 8006ab6:	f008 ff0d 	bl	800f8d4 <f_mount>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b38      	ldr	r3, [pc, #224]	; (8006ba0 <sdInitials+0xf4>)
 8006ac0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <sdInitials+0xf4>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <sdInitials+0x26>
		uart_Sd_Transmit("error in mount [Check For Fat Response (fresult) in debug mode!!!!]......\n");
 8006aca:	4836      	ldr	r0, [pc, #216]	; (8006ba4 <sdInitials+0xf8>)
 8006acc:	f7ff ffb4 	bl	8006a38 <uart_Sd_Transmit>
 8006ad0:	e002      	b.n	8006ad8 <sdInitials+0x2c>
	else
		uart_Sd_Transmit("SD CARD MOUNTED CUSSESSFULY..\n");
 8006ad2:	4835      	ldr	r0, [pc, #212]	; (8006ba8 <sdInitials+0xfc>)
 8006ad4:	f7ff ffb0 	bl	8006a38 <uart_Sd_Transmit>

	/*capacity details*/
	f_getfree("", &fre_clust, &pfs);
 8006ad8:	4a34      	ldr	r2, [pc, #208]	; (8006bac <sdInitials+0x100>)
 8006ada:	4935      	ldr	r1, [pc, #212]	; (8006bb0 <sdInitials+0x104>)
 8006adc:	4835      	ldr	r0, [pc, #212]	; (8006bb4 <sdInitials+0x108>)
 8006ade:	f009 fb47 	bl	8010170 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8006ae2:	4b32      	ldr	r3, [pc, #200]	; (8006bac <sdInitials+0x100>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	3b02      	subs	r3, #2
 8006aea:	4a30      	ldr	r2, [pc, #192]	; (8006bac <sdInitials+0x100>)
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	8952      	ldrh	r2, [r2, #10]
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7f9 fd25 	bl	8000544 <__aeabi_ui2d>
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <sdInitials+0x10c>)
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f7fa f86c 	bl	8000be8 <__aeabi_d2uiz>
 8006b10:	4603      	mov	r3, r0
 8006b12:	4a2a      	ldr	r2, [pc, #168]	; (8006bbc <sdInitials+0x110>)
 8006b14:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Total] Size: \t%lu\n", total);
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <sdInitials+0x110>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4928      	ldr	r1, [pc, #160]	; (8006bc0 <sdInitials+0x114>)
 8006b1e:	4829      	ldr	r0, [pc, #164]	; (8006bc4 <sdInitials+0x118>)
 8006b20:	f00a fe44 	bl	80117ac <siprintf>
	uart_Sd_Transmit(fatBuff);
 8006b24:	4827      	ldr	r0, [pc, #156]	; (8006bc4 <sdInitials+0x118>)
 8006b26:	f7ff ff87 	bl	8006a38 <uart_Sd_Transmit>
	sdBufClear();
 8006b2a:	f7ff ff9d 	bl	8006a68 <sdBufClear>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <sdInitials+0x100>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	895b      	ldrh	r3, [r3, #10]
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <sdInitials+0x104>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7f9 fd00 	bl	8000544 <__aeabi_ui2d>
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <sdInitials+0x10c>)
 8006b4a:	f7f9 fd75 	bl	8000638 <__aeabi_dmul>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fa f847 	bl	8000be8 <__aeabi_d2uiz>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4a1a      	ldr	r2, [pc, #104]	; (8006bc8 <sdInitials+0x11c>)
 8006b5e:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Free] Size: \t%lu\n", free_space);
 8006b60:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <sdInitials+0x11c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	4919      	ldr	r1, [pc, #100]	; (8006bcc <sdInitials+0x120>)
 8006b68:	4816      	ldr	r0, [pc, #88]	; (8006bc4 <sdInitials+0x118>)
 8006b6a:	f00a fe1f 	bl	80117ac <siprintf>
	uart_Sd_Transmit(fatBuff);
 8006b6e:	4815      	ldr	r0, [pc, #84]	; (8006bc4 <sdInitials+0x118>)
 8006b70:	f7ff ff62 	bl	8006a38 <uart_Sd_Transmit>
	fresult = f_open(&fil, "flightRecorder.csv", FA_CREATE_NEW | FA_WRITE);//test
 8006b74:	2206      	movs	r2, #6
 8006b76:	4916      	ldr	r1, [pc, #88]	; (8006bd0 <sdInitials+0x124>)
 8006b78:	4816      	ldr	r0, [pc, #88]	; (8006bd4 <sdInitials+0x128>)
 8006b7a:	f008 fef1 	bl	800f960 <f_open>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <sdInitials+0xf4>)
 8006b84:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8006b86:	4813      	ldr	r0, [pc, #76]	; (8006bd4 <sdInitials+0x128>)
 8006b88:	f009 fac8 	bl	801011c <f_close>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <sdInitials+0xf4>)
 8006b92:	701a      	strb	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	08017a84 	.word	0x08017a84
 8006b9c:	200015f8 	.word	0x200015f8
 8006ba0:	20003660 	.word	0x20003660
 8006ba4:	08017a9c 	.word	0x08017a9c
 8006ba8:	08017ae8 	.word	0x08017ae8
 8006bac:	20003664 	.word	0x20003664
 8006bb0:	20003668 	.word	0x20003668
 8006bb4:	08017b08 	.word	0x08017b08
 8006bb8:	3fe00000 	.word	0x3fe00000
 8006bbc:	2000366c 	.word	0x2000366c
 8006bc0:	08017b0c 	.word	0x08017b0c
 8006bc4:	200009f8 	.word	0x200009f8
 8006bc8:	20003670 	.word	0x20003670
 8006bcc:	08017b28 	.word	0x08017b28
 8006bd0:	08017b44 	.word	0x08017b44
 8006bd4:	20002630 	.word	0x20002630

08006bd8 <sd_csv_log_transmit>:

#endif
}

int sd_csv_log_transmit(const char *str)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE);
 8006be0:	2232      	movs	r2, #50	; 0x32
 8006be2:	4918      	ldr	r1, [pc, #96]	; (8006c44 <sd_csv_log_transmit+0x6c>)
 8006be4:	4818      	ldr	r0, [pc, #96]	; (8006c48 <sd_csv_log_transmit+0x70>)
 8006be6:	f008 febb 	bl	800f960 <f_open>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <sd_csv_log_transmit+0x74>)
 8006bf0:	701a      	strb	r2, [r3, #0]
	sprintf(_aBuf,"--;;; %s ;;;--\n",str);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4916      	ldr	r1, [pc, #88]	; (8006c50 <sd_csv_log_transmit+0x78>)
 8006bf6:	4817      	ldr	r0, [pc, #92]	; (8006c54 <sd_csv_log_transmit+0x7c>)
 8006bf8:	f00a fdd8 	bl	80117ac <siprintf>
	fresult = f_printf(&fil, _aBuf);
 8006bfc:	4915      	ldr	r1, [pc, #84]	; (8006c54 <sd_csv_log_transmit+0x7c>)
 8006bfe:	4812      	ldr	r0, [pc, #72]	; (8006c48 <sd_csv_log_transmit+0x70>)
 8006c00:	f009 fbe2 	bl	80103c8 <f_printf>
 8006c04:	4603      	mov	r3, r0
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <sd_csv_log_transmit+0x74>)
 8006c0a:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8006c0c:	480e      	ldr	r0, [pc, #56]	; (8006c48 <sd_csv_log_transmit+0x70>)
 8006c0e:	f009 fa85 	bl	801011c <f_close>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <sd_csv_log_transmit+0x74>)
 8006c18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2024; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e007      	b.n	8006c30 <sd_csv_log_transmit+0x58>
		_aBuf[i] = 0;
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <sd_csv_log_transmit+0x7c>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2024; i++)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8006c36:	dbf3      	blt.n	8006c20 <sd_csv_log_transmit+0x48>
	return fresult;
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <sd_csv_log_transmit+0x74>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08017b44 	.word	0x08017b44
 8006c48:	20002630 	.word	0x20002630
 8006c4c:	20003660 	.word	0x20003660
 8006c50:	08017b58 	.word	0x08017b58
 8006c54:	20000df8 	.word	0x20000df8

08006c58 <sd_transmit>:

PUBLIC int sd_transmit(const char *str)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0c2      	sub	sp, #264	; 0x108
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c66:	6018      	str	r0, [r3, #0]
	uint8_t _buffer[250];
#ifdef ROCKET_CARD
	sprintf((char*)_buffer, "Counter;Time;Pressure(mPa);Humidity(%%);Temperature(C);Altitude(m);Velocity(m/s);Acc_X;Acc_Y;Acc_Z;Gyro_X;Gyro_Y;Gyro_Z;Rocket_Status;Angle(degree);Q0;Q1;Q2;Q3;Max_altitude(m);Latitude;Longitude;Sat_count;GPS_altitude;Voltage;Current(mA);Power(mWs)\n");
#else
	sprintf((char*)_buffer, "Counter;Time;Pressure(mPa);Humidity(%%);Temperature(C);Altitude(m);Velocity(m/s);Acc_X;Acc_Y;Acc_Z;Gyro_X;Gyro_Y;Gyro_Z;Rocket_Status;Angle(degree);Q0;Q1;Q2;Q3;Strain;Latitude;Longitude;Sat_count;GPS_altitude;Voltage;Current(mA);Power(mWs)\n");
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	4912      	ldr	r1, [pc, #72]	; (8006cb8 <sd_transmit+0x60>)
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f00a fd9c 	bl	80117ac <siprintf>
#endif
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE); // open to write
 8006c74:	2232      	movs	r2, #50	; 0x32
 8006c76:	4911      	ldr	r1, [pc, #68]	; (8006cbc <sd_transmit+0x64>)
 8006c78:	4811      	ldr	r0, [pc, #68]	; (8006cc0 <sd_transmit+0x68>)
 8006c7a:	f008 fe71 	bl	800f960 <f_open>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <sd_transmit+0x6c>)
 8006c84:	701a      	strb	r2, [r3, #0]
	fresult = f_printf(&fil, (char*)_buffer);
 8006c86:	f107 030c 	add.w	r3, r7, #12
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	480c      	ldr	r0, [pc, #48]	; (8006cc0 <sd_transmit+0x68>)
 8006c8e:	f009 fb9b 	bl	80103c8 <f_printf>
 8006c92:	4603      	mov	r3, r0
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <sd_transmit+0x6c>)
 8006c98:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil); // close
 8006c9a:	4809      	ldr	r0, [pc, #36]	; (8006cc0 <sd_transmit+0x68>)
 8006c9c:	f009 fa3e 	bl	801011c <f_close>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <sd_transmit+0x6c>)
 8006ca6:	701a      	strb	r2, [r3, #0]
	return fresult;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <sd_transmit+0x6c>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08017b68 	.word	0x08017b68
 8006cbc:	08017b44 	.word	0x08017b44
 8006cc0:	20002630 	.word	0x20002630
 8006cc4:	20003660 	.word	0x20003660

08006cc8 <sdDataLogger>:
PUBLIC void sdDataLogger(uint32_t counter, BME_280_t *BME_Pack, bmi088_struct_t *BMI_Pack, backup_sram_datas_s *Backup_Pack, S_GPS_L86_DATA *GPS_Pack, power *Power_Pack)
{
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	ed2d 8b06 	vpush	{d8-d10}
 8006cd0:	b0dd      	sub	sp, #372	; 0x174
 8006cd2:	af34      	add	r7, sp, #208	; 0xd0
 8006cd4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8006cd8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE);
 8006ce4:	2232      	movs	r2, #50	; 0x32
 8006ce6:	49a3      	ldr	r1, [pc, #652]	; (8006f74 <sdDataLogger+0x2ac>)
 8006ce8:	48a3      	ldr	r0, [pc, #652]	; (8006f78 <sdDataLogger+0x2b0>)
 8006cea:	f008 fe39 	bl	800f960 <f_open>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4ba2      	ldr	r3, [pc, #648]	; (8006f7c <sdDataLogger+0x2b4>)
 8006cf4:	701a      	strb	r2, [r3, #0]
#ifdef ROCKET_CARD
	sprintf(_aBuf, "%lu;%.0f;%.3f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%d;%.2f;%f;%f;%f;%f;%.1f;%f;%f;%d;%.1f;%.2f;%.2f;%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], Backup_Pack->max_altitude, GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
#else
	sprintf(_aBuf, "%lu;%.0f;%.3f;%.1f;%.1f;%.1f;%.1f;%f;%f;%f;%f;%f;%f;%d;%.2f;%f;%f;%f;%f;%.1f;%f;%f;%d;%.1f;%.2f;%.2f;%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], strain_gage_get_vals(&loadcell), GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7f9 fc43 	bl	8000588 <__aeabi_f2d>
 8006d02:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 8006d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7f9 fc3b 	bl	8000588 <__aeabi_f2d>
 8006d12:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8006d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7f9 fc33 	bl	8000588 <__aeabi_f2d>
 8006d22:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8006d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7f9 fc2b 	bl	8000588 <__aeabi_f2d>
 8006d32:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8006d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7f9 fc23 	bl	8000588 <__aeabi_f2d>
 8006d42:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8006d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7f9 fc1b 	bl	8000588 <__aeabi_f2d>
 8006d52:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8006d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7f9 fc12 	bl	8000588 <__aeabi_f2d>
 8006d64:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8006d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7f9 fc09 	bl	8000588 <__aeabi_f2d>
 8006d76:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8006d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7f9 fc00 	bl	8000588 <__aeabi_f2d>
 8006d88:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8006d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d90:	ed93 ab20 	vldr	d10, [r3, #128]	; 0x80
 8006d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d98:	ed93 9b22 	vldr	d9, [r3, #136]	; 0x88
 8006d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da0:	ed93 8b24 	vldr	d8, [r3, #144]	; 0x90
 8006da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7f9 fbe7 	bl	8000588 <__aeabi_f2d>
 8006dba:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8006dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7f9 fbdf 	bl	8000588 <__aeabi_f2d>
 8006dca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 fbd7 	bl	8000588 <__aeabi_f2d>
 8006dda:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8006dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7f9 fbcf 	bl	8000588 <__aeabi_f2d>
 8006dea:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8006dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7f9 fbc7 	bl	8000588 <__aeabi_f2d>
 8006dfa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006dfe:	4860      	ldr	r0, [pc, #384]	; (8006f80 <sdDataLogger+0x2b8>)
 8006e00:	f7ff fccf 	bl	80067a2 <strain_gage_get_vals>
 8006e04:	63b8      	str	r0, [r7, #56]	; 0x38
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7f9 fbbb 	bl	8000588 <__aeabi_f2d>
 8006e12:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fbb3 	bl	8000588 <__aeabi_f2d>
 8006e22:	e9c7 0100 	strd	r0, r1, [r7]
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2a:	6a1e      	ldr	r6, [r3, #32]
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7f9 fba8 	bl	8000588 <__aeabi_f2d>
 8006e38:	4682      	mov	sl, r0
 8006e3a:	468b      	mov	fp, r1
 8006e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fba0 	bl	8000588 <__aeabi_f2d>
 8006e48:	4680      	mov	r8, r0
 8006e4a:	4689      	mov	r9, r1
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7f9 fb98 	bl	8000588 <__aeabi_f2d>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7f9 fb90 	bl	8000588 <__aeabi_f2d>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8006e70:	e9cd 4530 	strd	r4, r5, [sp, #192]	; 0xc0
 8006e74:	e9cd 892e 	strd	r8, r9, [sp, #184]	; 0xb8
 8006e78:	e9cd ab2c 	strd	sl, fp, [sp, #176]	; 0xb0
 8006e7c:	962a      	str	r6, [sp, #168]	; 0xa8
 8006e7e:	ed97 7b00 	vldr	d7, [r7]
 8006e82:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8006e86:	ed97 7b02 	vldr	d7, [r7, #8]
 8006e8a:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8006e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e90:	9224      	str	r2, [sp, #144]	; 0x90
 8006e92:	ed97 7b04 	vldr	d7, [r7, #16]
 8006e96:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8006e9a:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e9e:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8006ea2:	ed97 7b08 	vldr	d7, [r7, #32]
 8006ea6:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8006eaa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006eae:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006eb2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006eb6:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8006eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebc:	9318      	str	r3, [sp, #96]	; 0x60
 8006ebe:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8006ec2:	ed8d 9b14 	vstr	d9, [sp, #80]	; 0x50
 8006ec6:	ed8d ab12 	vstr	d10, [sp, #72]	; 0x48
 8006eca:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006ece:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006ed2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006ed6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006eda:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006ede:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006ee2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006ee6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006eea:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8006eee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006ef2:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8006ef6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006efa:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8006efe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f02:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8006f06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f0a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8006f0e:	ed8d 7b00 	vstr	d7, [sp]
 8006f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f16:	491b      	ldr	r1, [pc, #108]	; (8006f84 <sdDataLogger+0x2bc>)
 8006f18:	481b      	ldr	r0, [pc, #108]	; (8006f88 <sdDataLogger+0x2c0>)
 8006f1a:	f00a fc47 	bl	80117ac <siprintf>
#endif
	fresult = f_printf(&fil, _aBuf);
 8006f1e:	491a      	ldr	r1, [pc, #104]	; (8006f88 <sdDataLogger+0x2c0>)
 8006f20:	4815      	ldr	r0, [pc, #84]	; (8006f78 <sdDataLogger+0x2b0>)
 8006f22:	f009 fa51 	bl	80103c8 <f_printf>
 8006f26:	4603      	mov	r3, r0
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <sdDataLogger+0x2b4>)
 8006f2c:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);// SD CLOSE
 8006f2e:	4812      	ldr	r0, [pc, #72]	; (8006f78 <sdDataLogger+0x2b0>)
 8006f30:	f009 f8f4 	bl	801011c <f_close>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <sdDataLogger+0x2b4>)
 8006f3a:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f42:	e00a      	b.n	8006f5a <sdDataLogger+0x292>
		_aBuf[i] = 0 ;
 8006f44:	4a10      	ldr	r2, [pc, #64]	; (8006f88 <sdDataLogger+0x2c0>)
 8006f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f4a:	4413      	add	r3, r2
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f54:	3301      	adds	r3, #1
 8006f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f5e:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8006f62:	dbef      	blt.n	8006f44 <sdDataLogger+0x27c>
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	37a4      	adds	r7, #164	; 0xa4
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	ecbd 8b06 	vpop	{d8-d10}
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	08017b44 	.word	0x08017b44
 8006f78:	20002630 	.word	0x20002630
 8006f7c:	20003660 	.word	0x20003660
 8006f80:	2000088c 	.word	0x2000088c
 8006f84:	08017c5c 	.word	0x08017c5c
 8006f88:	20000df8 	.word	0x20000df8

08006f8c <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a0d      	ldr	r2, [pc, #52]	; (8006fcc <HAL_UART_RxCpltCallback+0x40>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d105      	bne.n	8006fa8 <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <HAL_UART_RxCpltCallback+0x44>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <HAL_UART_RxCpltCallback+0x48>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <HAL_UART_RxCpltCallback+0x4c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d109      	bne.n	8006fc4 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_UART_RxCpltCallback+0x50>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <HAL_UART_RxCpltCallback+0x54>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2203      	movs	r2, #3
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4806      	ldr	r0, [pc, #24]	; (8006fd8 <HAL_UART_RxCpltCallback+0x4c>)
 8006fc0:	f005 f8b2 	bl	800c128 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200004d8 	.word	0x200004d8
 8006fd0:	20003674 	.word	0x20003674
 8006fd4:	20003675 	.word	0x20003675
 8006fd8:	20000450 	.word	0x20000450
 8006fdc:	20000848 	.word	0x20000848
 8006fe0:	20000844 	.word	0x20000844

08006fe4 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8006fec:	f240 228a 	movw	r2, #650	; 0x28a
 8006ff0:	4903      	ldr	r1, [pc, #12]	; (8007000 <UsrGpsL86Init+0x1c>)
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f005 f898 	bl	800c128 <HAL_UART_Receive_DMA>
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	2000374c 	.word	0x2000374c

08007004 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    getRmc();
 800700c:	f000 f83a 	bl	8007084 <getRmc>
    getGGA();
 8007010:	f000 f94a 	bl	80072a8 <getGGA>
    if (rmcValidFlag)
 8007014:	4b18      	ldr	r3, [pc, #96]	; (8007078 <Usr_GpsL86GetValues+0x74>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 800701e:	4b16      	ldr	r3, [pc, #88]	; (8007078 <Usr_GpsL86GetValues+0x74>)
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8007024:	f000 f8d2 	bl	80071cc <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8007028:	4b14      	ldr	r3, [pc, #80]	; (800707c <Usr_GpsL86GetValues+0x78>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <Usr_GpsL86GetValues+0x78>)
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <Usr_GpsL86GetValues+0x78>)
 800703a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8007040:	4b0e      	ldr	r3, [pc, #56]	; (800707c <Usr_GpsL86GetValues+0x78>)
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <Usr_GpsL86GetValues+0x78>)
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <Usr_GpsL86GetValues+0x78>)
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <Usr_GpsL86GetValues+0x78>)
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <Usr_GpsL86GetValues+0x78>)
 8007062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8007068:	4805      	ldr	r0, [pc, #20]	; (8007080 <Usr_GpsL86GetValues+0x7c>)
 800706a:	f7ff ffbb 	bl	8006fe4 <UsrGpsL86Init>
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20003676 	.word	0x20003676
 800707c:	200046f4 	.word	0x200046f4
 8007080:	200004d8 	.word	0x200004d8

08007084 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 800708a:	4b41      	ldr	r3, [pc, #260]	; (8007190 <getRmc+0x10c>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8007090:	4940      	ldr	r1, [pc, #256]	; (8007194 <getRmc+0x110>)
 8007092:	4841      	ldr	r0, [pc, #260]	; (8007198 <getRmc+0x114>)
 8007094:	f00a fc1b 	bl	80118ce <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8007098:	4940      	ldr	r1, [pc, #256]	; (800719c <getRmc+0x118>)
 800709a:	483f      	ldr	r0, [pc, #252]	; (8007198 <getRmc+0x114>)
 800709c:	f00a fc1f 	bl	80118de <strstr>
 80070a0:	4603      	mov	r3, r0
 80070a2:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <getRmc+0x11c>)
 80070a4:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 80070a6:	4b3e      	ldr	r3, [pc, #248]	; (80071a0 <getRmc+0x11c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b47      	cmp	r3, #71	; 0x47
 80070ae:	d167      	bne.n	8007180 <getRmc+0xfc>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 80070b0:	4b3b      	ldr	r3, [pc, #236]	; (80071a0 <getRmc+0x11c>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b36      	ldr	r3, [pc, #216]	; (8007190 <getRmc+0x10c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	7811      	ldrb	r1, [r2, #0]
 80070ba:	4a3a      	ldr	r2, [pc, #232]	; (80071a4 <getRmc+0x120>)
 80070bc:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 80070be:	4b34      	ldr	r3, [pc, #208]	; (8007190 <getRmc+0x10c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a32      	ldr	r2, [pc, #200]	; (8007190 <getRmc+0x10c>)
 80070c6:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 80070c8:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <getRmc+0x11c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a30      	ldr	r2, [pc, #192]	; (8007190 <getRmc+0x10c>)
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	441a      	add	r2, r3
 80070d2:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <getRmc+0x11c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <getRmc+0x11c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b0a      	cmp	r3, #10
 80070e2:	d003      	beq.n	80070ec <getRmc+0x68>
 80070e4:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <getRmc+0x10c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b5a      	cmp	r3, #90	; 0x5a
 80070ea:	dde1      	ble.n	80070b0 <getRmc+0x2c>
	                {
	                    MsgIndex = 0;
 80070ec:	4b28      	ldr	r3, [pc, #160]	; (8007190 <getRmc+0x10c>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	e014      	b.n	8007122 <getRmc+0x9e>
	                    {
	                        if (gpsPayload[i] == 'N')
 80070f8:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <getRmc+0x120>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b4e      	cmp	r3, #78	; 0x4e
 8007102:	d102      	bne.n	800710a <getRmc+0x86>
	                            f_northFlag = true;
 8007104:	4b28      	ldr	r3, [pc, #160]	; (80071a8 <getRmc+0x124>)
 8007106:	2201      	movs	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 800710a:	4a26      	ldr	r2, [pc, #152]	; (80071a4 <getRmc+0x120>)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b45      	cmp	r3, #69	; 0x45
 8007114:	d102      	bne.n	800711c <getRmc+0x98>
	                            f_eastFlag = true;
 8007116:	4b25      	ldr	r3, [pc, #148]	; (80071ac <getRmc+0x128>)
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3301      	adds	r3, #1
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b63      	cmp	r3, #99	; 0x63
 8007126:	dde7      	ble.n	80070f8 <getRmc+0x74>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8007128:	481e      	ldr	r0, [pc, #120]	; (80071a4 <getRmc+0x120>)
 800712a:	f7f9 f871 	bl	8000210 <strlen>
 800712e:	4603      	mov	r3, r0
 8007130:	2b0a      	cmp	r3, #10
 8007132:	d91f      	bls.n	8007174 <getRmc+0xf0>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <getRmc+0x128>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01f      	beq.n	800717e <getRmc+0xfa>
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <getRmc+0x124>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <getRmc+0xfa>
	                        {
	                            f_northFlag = false;
 8007148:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <getRmc+0x124>)
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <getRmc+0x128>)
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <getRmc+0x12c>)
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <getRmc+0x130>)
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <getRmc+0x134>)
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <getRmc+0x138>)
 8007160:	4917      	ldr	r1, [pc, #92]	; (80071c0 <getRmc+0x13c>)
 8007162:	4810      	ldr	r0, [pc, #64]	; (80071a4 <getRmc+0x120>)
 8007164:	f00a fb42 	bl	80117ec <siscanf>
	                            rmcValidFlag = true;
 8007168:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <getRmc+0x140>)
 800716a:	2201      	movs	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 800716e:	f000 f82d 	bl	80071cc <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8007172:	e004      	b.n	800717e <getRmc+0xfa>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8007174:	2264      	movs	r2, #100	; 0x64
 8007176:	2100      	movs	r1, #0
 8007178:	480a      	ldr	r0, [pc, #40]	; (80071a4 <getRmc+0x120>)
 800717a:	f009 fc8f 	bl	8010a9c <memset>
	                    break;
 800717e:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8007180:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <getRmc+0x144>)
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]



}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2000367c 	.word	0x2000367c
 8007194:	2000374c 	.word	0x2000374c
 8007198:	20003f1c 	.word	0x20003f1c
 800719c:	08017cc8 	.word	0x08017cc8
 80071a0:	20003680 	.word	0x20003680
 80071a4:	20003684 	.word	0x20003684
 80071a8:	20003677 	.word	0x20003677
 80071ac:	20003678 	.word	0x20003678
 80071b0:	200046fc 	.word	0x200046fc
 80071b4:	200046f0 	.word	0x200046f0
 80071b8:	200046ec 	.word	0x200046ec
 80071bc:	20004700 	.word	0x20004700
 80071c0:	08017cd0 	.word	0x08017cd0
 80071c4:	20003676 	.word	0x20003676
 80071c8:	20003674 	.word	0x20003674

080071cc <formatLatLong>:

_io void formatLatLong(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 80071d2:	4b30      	ldr	r3, [pc, #192]	; (8007294 <formatLatLong+0xc8>)
 80071d4:	edd3 7a00 	vldr	s15, [r3]
 80071d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071dc:	ee17 1a90 	vmov	r1, s15
 80071e0:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <formatLatLong+0xcc>)
 80071e2:	fb83 2301 	smull	r2, r3, r3, r1
 80071e6:	115a      	asrs	r2, r3, #5
 80071e8:	17cb      	asrs	r3, r1, #31
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <formatLatLong+0xc8>)
 80071f0:	ed93 7a00 	vldr	s14, [r3]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2264      	movs	r2, #100	; 0x64
 80071f8:	fb02 f303 	mul.w	r3, r2, r3
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007208:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007216:	edd7 6a00 	vldr	s13, [r7]
 800721a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800729c <formatLatLong+0xd0>
 800721e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007226:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <formatLatLong+0xd4>)
 8007228:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 800722c:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <formatLatLong+0xd8>)
 800722e:	edd3 7a00 	vldr	s15, [r3]
 8007232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007236:	ee17 1a90 	vmov	r1, s15
 800723a:	4b17      	ldr	r3, [pc, #92]	; (8007298 <formatLatLong+0xcc>)
 800723c:	fb83 2301 	smull	r2, r3, r3, r1
 8007240:	115a      	asrs	r2, r3, #5
 8007242:	17cb      	asrs	r3, r1, #31
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8007248:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <formatLatLong+0xd8>)
 800724a:	ed93 7a00 	vldr	s14, [r3]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2264      	movs	r2, #100	; 0x64
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800725e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007262:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007270:	edd7 6a00 	vldr	s13, [r7]
 8007274:	ed9f 6a09 	vldr	s12, [pc, #36]	; 800729c <formatLatLong+0xd0>
 8007278:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800727c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <formatLatLong+0xd4>)
 8007282:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	200046ec 	.word	0x200046ec
 8007298:	51eb851f 	.word	0x51eb851f
 800729c:	42700000 	.word	0x42700000
 80072a0:	200046f4 	.word	0x200046f4
 80072a4:	200046f0 	.word	0x200046f0

080072a8 <getGGA>:

_io void getGGA(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 80072ae:	4b30      	ldr	r3, [pc, #192]	; (8007370 <getGGA+0xc8>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80072b4:	492f      	ldr	r1, [pc, #188]	; (8007374 <getGGA+0xcc>)
 80072b6:	4830      	ldr	r0, [pc, #192]	; (8007378 <getGGA+0xd0>)
 80072b8:	f00a fb11 	bl	80118de <strstr>
 80072bc:	4603      	mov	r3, r0
 80072be:	4a2f      	ldr	r2, [pc, #188]	; (800737c <getGGA+0xd4>)
 80072c0:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <getGGA+0xd4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b47      	cmp	r3, #71	; 0x47
 80072ca:	d14a      	bne.n	8007362 <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <getGGA+0xd4>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4b27      	ldr	r3, [pc, #156]	; (8007370 <getGGA+0xc8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	7811      	ldrb	r1, [r2, #0]
 80072d6:	4a2a      	ldr	r2, [pc, #168]	; (8007380 <getGGA+0xd8>)
 80072d8:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 80072da:	4b25      	ldr	r3, [pc, #148]	; (8007370 <getGGA+0xc8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3301      	adds	r3, #1
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <getGGA+0xc8>)
 80072e2:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <getGGA+0xd4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a21      	ldr	r2, [pc, #132]	; (8007370 <getGGA+0xc8>)
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	441a      	add	r2, r3
 80072ee:	4b23      	ldr	r3, [pc, #140]	; (800737c <getGGA+0xd4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80072f6:	4b21      	ldr	r3, [pc, #132]	; (800737c <getGGA+0xd4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b0a      	cmp	r3, #10
 80072fe:	d003      	beq.n	8007308 <getGGA+0x60>
 8007300:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <getGGA+0xc8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b5a      	cmp	r3, #90	; 0x5a
 8007306:	dde1      	ble.n	80072cc <getGGA+0x24>
                {
                    MsgIndex = 0;
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <getGGA+0xc8>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800730e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007312:	2100      	movs	r1, #0
 8007314:	4818      	ldr	r0, [pc, #96]	; (8007378 <getGGA+0xd0>)
 8007316:	f009 fbc1 	bl	8010a9c <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 800731a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800731e:	2100      	movs	r1, #0
 8007320:	4818      	ldr	r0, [pc, #96]	; (8007384 <getGGA+0xdc>)
 8007322:	f009 fbbb 	bl	8010a9c <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8007326:	4816      	ldr	r0, [pc, #88]	; (8007380 <getGGA+0xd8>)
 8007328:	f7f8 ff72 	bl	8000210 <strlen>
 800732c:	4603      	mov	r3, r0
 800732e:	2b0a      	cmp	r3, #10
 8007330:	d912      	bls.n	8007358 <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <getGGA+0xe0>)
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	4b15      	ldr	r3, [pc, #84]	; (800738c <getGGA+0xe4>)
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	4b15      	ldr	r3, [pc, #84]	; (8007390 <getGGA+0xe8>)
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	4b15      	ldr	r3, [pc, #84]	; (8007394 <getGGA+0xec>)
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <getGGA+0xf0>)
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <getGGA+0xf4>)
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <getGGA+0xf8>)
 800734c:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <getGGA+0xfc>)
 800734e:	4916      	ldr	r1, [pc, #88]	; (80073a8 <getGGA+0x100>)
 8007350:	480b      	ldr	r0, [pc, #44]	; (8007380 <getGGA+0xd8>)
 8007352:	f00a fa4b 	bl	80117ec <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8007356:	e004      	b.n	8007362 <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8007358:	2264      	movs	r2, #100	; 0x64
 800735a:	2100      	movs	r1, #0
 800735c:	4813      	ldr	r0, [pc, #76]	; (80073ac <getGGA+0x104>)
 800735e:	f009 fb9d 	bl	8010a9c <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8007362:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <getGGA+0x108>)
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	2000367c 	.word	0x2000367c
 8007374:	08017cec 	.word	0x08017cec
 8007378:	20003f1c 	.word	0x20003f1c
 800737c:	20003680 	.word	0x20003680
 8007380:	200036e8 	.word	0x200036e8
 8007384:	2000374c 	.word	0x2000374c
 8007388:	20004720 	.word	0x20004720
 800738c:	2000471c 	.word	0x2000471c
 8007390:	20004718 	.word	0x20004718
 8007394:	20004714 	.word	0x20004714
 8007398:	20004710 	.word	0x20004710
 800739c:	2000470c 	.word	0x2000470c
 80073a0:	20004708 	.word	0x20004708
 80073a4:	20004704 	.word	0x20004704
 80073a8:	08017cf4 	.word	0x08017cf4
 80073ac:	20003684 	.word	0x20003684
 80073b0:	20003675 	.word	0x20003675

080073b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80073b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80073b8:	480d      	ldr	r0, [pc, #52]	; (80073f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80073ba:	490e      	ldr	r1, [pc, #56]	; (80073f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80073bc:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80073be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073c0:	e002      	b.n	80073c8 <LoopCopyDataInit>

080073c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073c6:	3304      	adds	r3, #4

080073c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073cc:	d3f9      	bcc.n	80073c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073ce:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80073d0:	4c0b      	ldr	r4, [pc, #44]	; (8007400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80073d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073d4:	e001      	b.n	80073da <LoopFillZerobss>

080073d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073d8:	3204      	adds	r2, #4

080073da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073dc:	d3fb      	bcc.n	80073d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80073de:	f7ff fb19 	bl	8006a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073e2:	f009 fb37 	bl	8010a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073e6:	f7fc ffbb 	bl	8004360 <main>
  bx  lr    
 80073ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80073ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80073f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80073f4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80073f8:	08018740 	.word	0x08018740
  ldr r2, =_sbss
 80073fc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8007400:	20004974 	.word	0x20004974

08007404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007404:	e7fe      	b.n	8007404 <ADC_IRQHandler>
	...

08007408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <HAL_Init+0x40>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <HAL_Init+0x40>)
 8007412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <HAL_Init+0x40>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <HAL_Init+0x40>)
 800741e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007424:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_Init+0x40>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a07      	ldr	r2, [pc, #28]	; (8007448 <HAL_Init+0x40>)
 800742a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007430:	2003      	movs	r0, #3
 8007432:	f000 fd83 	bl	8007f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007436:	200f      	movs	r0, #15
 8007438:	f000 f808 	bl	800744c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800743c:	f7fe fc50 	bl	8005ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40023c00 	.word	0x40023c00

0800744c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <HAL_InitTick+0x54>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <HAL_InitTick+0x58>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	4619      	mov	r1, r3
 800745e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007462:	fbb3 f3f1 	udiv	r3, r3, r1
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fda9 	bl	8007fc2 <HAL_SYSTICK_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e00e      	b.n	8007498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b0f      	cmp	r3, #15
 800747e:	d80a      	bhi.n	8007496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007480:	2200      	movs	r2, #0
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	f000 fd63 	bl	8007f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800748c:	4a06      	ldr	r2, [pc, #24]	; (80074a8 <HAL_InitTick+0x5c>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	e000      	b.n	8007498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	2000000c 	.word	0x2000000c
 80074a4:	20000014 	.word	0x20000014
 80074a8:	20000010 	.word	0x20000010

080074ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <HAL_IncTick+0x20>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_IncTick+0x24>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4413      	add	r3, r2
 80074bc:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <HAL_IncTick+0x24>)
 80074be:	6013      	str	r3, [r2, #0]
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000014 	.word	0x20000014
 80074d0:	20004724 	.word	0x20004724

080074d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return uwTick;
 80074d8:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <HAL_GetTick+0x14>)
 80074da:	681b      	ldr	r3, [r3, #0]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20004724 	.word	0x20004724

080074ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074f4:	f7ff ffee 	bl	80074d4 <HAL_GetTick>
 80074f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d005      	beq.n	8007512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <HAL_Delay+0x44>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007512:	bf00      	nop
 8007514:	f7ff ffde 	bl	80074d4 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	429a      	cmp	r2, r3
 8007522:	d8f7      	bhi.n	8007514 <HAL_Delay+0x28>
  {
  }
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000014 	.word	0x20000014

08007534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e033      	b.n	80075b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fe fbec 	bl	8005d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	d118      	bne.n	80075a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800757a:	f023 0302 	bic.w	r3, r3, #2
 800757e:	f043 0202 	orr.w	r2, r3, #2
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fae8 	bl	8007b5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f023 0303 	bic.w	r3, r3, #3
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
 80075a2:	e001      	b.n	80075a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_ADC_Start+0x1a>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e0b2      	b.n	800773c <HAL_ADC_Start+0x180>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d018      	beq.n	800761e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80075fc:	4b52      	ldr	r3, [pc, #328]	; (8007748 <HAL_ADC_Start+0x18c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a52      	ldr	r2, [pc, #328]	; (800774c <HAL_ADC_Start+0x190>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0c9a      	lsrs	r2, r3, #18
 8007608:	4613      	mov	r3, r2
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	4413      	add	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007610:	e002      	b.n	8007618 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	3b01      	subs	r3, #1
 8007616:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f9      	bne.n	8007612 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d17a      	bne.n	8007722 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d106      	bne.n	800767a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	f023 0206 	bic.w	r2, r3, #6
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	645a      	str	r2, [r3, #68]	; 0x44
 8007678:	e002      	b.n	8007680 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007688:	4b31      	ldr	r3, [pc, #196]	; (8007750 <HAL_ADC_Start+0x194>)
 800768a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007694:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d12a      	bne.n	80076f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2b      	ldr	r2, [pc, #172]	; (8007754 <HAL_ADC_Start+0x198>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d015      	beq.n	80076d8 <HAL_ADC_Start+0x11c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a29      	ldr	r2, [pc, #164]	; (8007758 <HAL_ADC_Start+0x19c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d105      	bne.n	80076c2 <HAL_ADC_Start+0x106>
 80076b6:	4b26      	ldr	r3, [pc, #152]	; (8007750 <HAL_ADC_Start+0x194>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a25      	ldr	r2, [pc, #148]	; (800775c <HAL_ADC_Start+0x1a0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d136      	bne.n	800773a <HAL_ADC_Start+0x17e>
 80076cc:	4b20      	ldr	r3, [pc, #128]	; (8007750 <HAL_ADC_Start+0x194>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d130      	bne.n	800773a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d129      	bne.n	800773a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80076f4:	609a      	str	r2, [r3, #8]
 80076f6:	e020      	b.n	800773a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a15      	ldr	r2, [pc, #84]	; (8007754 <HAL_ADC_Start+0x198>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d11b      	bne.n	800773a <HAL_ADC_Start+0x17e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d114      	bne.n	800773a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	e00b      	b.n	800773a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f043 0210 	orr.w	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	f043 0201 	orr.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	2000000c 	.word	0x2000000c
 800774c:	431bde83 	.word	0x431bde83
 8007750:	40012300 	.word	0x40012300
 8007754:	40012000 	.word	0x40012000
 8007758:	40012100 	.word	0x40012100
 800775c:	40012200 	.word	0x40012200

08007760 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_ADC_Stop+0x16>
 8007772:	2302      	movs	r3, #2
 8007774:	e021      	b.n	80077ba <HAL_ADC_Stop+0x5a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f043 0201 	orr.w	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e2:	d113      	bne.n	800780c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80077ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f2:	d10b      	bne.n	800780c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e063      	b.n	80078d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800780c:	f7ff fe62 	bl	80074d4 <HAL_GetTick>
 8007810:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007812:	e021      	b.n	8007858 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d01d      	beq.n	8007858 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_ADC_PollForConversion+0x6c>
 8007822:	f7ff fe57 	bl	80074d4 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d212      	bcs.n	8007858 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d00b      	beq.n	8007858 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	f043 0204 	orr.w	r2, r3, #4
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e03d      	b.n	80078d4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d1d6      	bne.n	8007814 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0212 	mvn.w	r2, #18
 800786e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d123      	bne.n	80078d2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11f      	bne.n	80078d2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800789c:	2b00      	cmp	r3, #0
 800789e:	d006      	beq.n	80078ae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d111      	bne.n	80078d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f043 0201 	orr.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x1c>
 8007910:	2302      	movs	r3, #2
 8007912:	e113      	b.n	8007b3c <HAL_ADC_ConfigChannel+0x244>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b09      	cmp	r3, #9
 8007922:	d925      	bls.n	8007970 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68d9      	ldr	r1, [r3, #12]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	3b1e      	subs	r3, #30
 800793a:	2207      	movs	r2, #7
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	43da      	mvns	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	400a      	ands	r2, r1
 8007948:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68d9      	ldr	r1, [r3, #12]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	4618      	mov	r0, r3
 800795c:	4603      	mov	r3, r0
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4403      	add	r3, r0
 8007962:	3b1e      	subs	r3, #30
 8007964:	409a      	lsls	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	e022      	b.n	80079b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6919      	ldr	r1, [r3, #16]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	4613      	mov	r3, r2
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4413      	add	r3, r2
 8007984:	2207      	movs	r2, #7
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43da      	mvns	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	400a      	ands	r2, r1
 8007992:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6919      	ldr	r1, [r3, #16]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4618      	mov	r0, r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4403      	add	r3, r0
 80079ac:	409a      	lsls	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b06      	cmp	r3, #6
 80079bc:	d824      	bhi.n	8007a08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	3b05      	subs	r3, #5
 80079d0:	221f      	movs	r2, #31
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43da      	mvns	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	400a      	ands	r2, r1
 80079de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	3b05      	subs	r3, #5
 80079fa:	fa00 f203 	lsl.w	r2, r0, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	635a      	str	r2, [r3, #52]	; 0x34
 8007a06:	e04c      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d824      	bhi.n	8007a5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	3b23      	subs	r3, #35	; 0x23
 8007a22:	221f      	movs	r2, #31
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43da      	mvns	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	400a      	ands	r2, r1
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	4618      	mov	r0, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	3b23      	subs	r3, #35	; 0x23
 8007a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
 8007a58:	e023      	b.n	8007aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	3b41      	subs	r3, #65	; 0x41
 8007a6c:	221f      	movs	r2, #31
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43da      	mvns	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	400a      	ands	r2, r1
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4618      	mov	r0, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	3b41      	subs	r3, #65	; 0x41
 8007a96:	fa00 f203 	lsl.w	r2, r0, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aa2:	4b29      	ldr	r3, [pc, #164]	; (8007b48 <HAL_ADC_ConfigChannel+0x250>)
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <HAL_ADC_ConfigChannel+0x254>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10f      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x1d8>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b12      	cmp	r3, #18
 8007ab6:	d10b      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <HAL_ADC_ConfigChannel+0x254>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d12b      	bne.n	8007b32 <HAL_ADC_ConfigChannel+0x23a>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <HAL_ADC_ConfigChannel+0x258>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <HAL_ADC_ConfigChannel+0x1f4>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b11      	cmp	r3, #17
 8007aea:	d122      	bne.n	8007b32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <HAL_ADC_ConfigChannel+0x258>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d111      	bne.n	8007b32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <HAL_ADC_ConfigChannel+0x25c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <HAL_ADC_ConfigChannel+0x260>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	0c9a      	lsrs	r2, r3, #18
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b24:	e002      	b.n	8007b2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f9      	bne.n	8007b26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40012300 	.word	0x40012300
 8007b4c:	40012000 	.word	0x40012000
 8007b50:	10000012 	.word	0x10000012
 8007b54:	2000000c 	.word	0x2000000c
 8007b58:	431bde83 	.word	0x431bde83

08007b5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b64:	4b79      	ldr	r3, [pc, #484]	; (8007d4c <ADC_Init+0x1f0>)
 8007b66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	021a      	lsls	r2, r3, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	4a58      	ldr	r2, [pc, #352]	; (8007d50 <ADC_Init+0x1f4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6899      	ldr	r1, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	e00f      	b.n	8007c5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0202 	bic.w	r2, r2, #2
 8007c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6899      	ldr	r1, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7e1b      	ldrb	r3, [r3, #24]
 8007c74:	005a      	lsls	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01b      	beq.n	8007cc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007ca6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	035a      	lsls	r2, r3, #13
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	e007      	b.n	8007cd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	051a      	lsls	r2, r3, #20
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6899      	ldr	r1, [r3, #8]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d12:	025a      	lsls	r2, r3, #9
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6899      	ldr	r1, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	029a      	lsls	r2, r3, #10
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40012300 	.word	0x40012300
 8007d50:	0f000001 	.word	0x0f000001

08007d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <__NVIC_SetPriorityGrouping+0x44>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d70:	4013      	ands	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d86:	4a04      	ldr	r2, [pc, #16]	; (8007d98 <__NVIC_SetPriorityGrouping+0x44>)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	60d3      	str	r3, [r2, #12]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	e000ed00 	.word	0xe000ed00

08007d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <__NVIC_GetPriorityGrouping+0x18>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	f003 0307 	and.w	r3, r3, #7
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	e000ed00 	.word	0xe000ed00

08007db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	db0b      	blt.n	8007de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	f003 021f 	and.w	r2, r3, #31
 8007dd0:	4907      	ldr	r1, [pc, #28]	; (8007df0 <__NVIC_EnableIRQ+0x38>)
 8007dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2001      	movs	r0, #1
 8007dda:	fa00 f202 	lsl.w	r2, r0, r2
 8007dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	e000e100 	.word	0xe000e100

08007df4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	db12      	blt.n	8007e2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	f003 021f 	and.w	r2, r3, #31
 8007e0c:	490a      	ldr	r1, [pc, #40]	; (8007e38 <__NVIC_DisableIRQ+0x44>)
 8007e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	2001      	movs	r0, #1
 8007e16:	fa00 f202 	lsl.w	r2, r0, r2
 8007e1a:	3320      	adds	r3, #32
 8007e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e20:	f3bf 8f4f 	dsb	sy
}
 8007e24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e26:	f3bf 8f6f 	isb	sy
}
 8007e2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	e000e100 	.word	0xe000e100

08007e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	db0a      	blt.n	8007e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	490c      	ldr	r1, [pc, #48]	; (8007e88 <__NVIC_SetPriority+0x4c>)
 8007e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5a:	0112      	lsls	r2, r2, #4
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	440b      	add	r3, r1
 8007e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e64:	e00a      	b.n	8007e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4908      	ldr	r1, [pc, #32]	; (8007e8c <__NVIC_SetPriority+0x50>)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	3b04      	subs	r3, #4
 8007e74:	0112      	lsls	r2, r2, #4
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	440b      	add	r3, r1
 8007e7a:	761a      	strb	r2, [r3, #24]
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	e000e100 	.word	0xe000e100
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f1c3 0307 	rsb	r3, r3, #7
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	bf28      	it	cs
 8007eae:	2304      	movcs	r3, #4
 8007eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d902      	bls.n	8007ec0 <NVIC_EncodePriority+0x30>
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	3b03      	subs	r3, #3
 8007ebe:	e000      	b.n	8007ec2 <NVIC_EncodePriority+0x32>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43da      	mvns	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee2:	43d9      	mvns	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee8:	4313      	orrs	r3, r2
         );
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3724      	adds	r7, #36	; 0x24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f08:	d301      	bcc.n	8007f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e00f      	b.n	8007f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <SysTick_Config+0x40>)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f16:	210f      	movs	r1, #15
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	f7ff ff8e 	bl	8007e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <SysTick_Config+0x40>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f26:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <SysTick_Config+0x40>)
 8007f28:	2207      	movs	r2, #7
 8007f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	e000e010 	.word	0xe000e010

08007f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ff05 	bl	8007d54 <__NVIC_SetPriorityGrouping>
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b086      	sub	sp, #24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	4603      	mov	r3, r0
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f64:	f7ff ff1a 	bl	8007d9c <__NVIC_GetPriorityGrouping>
 8007f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	6978      	ldr	r0, [r7, #20]
 8007f70:	f7ff ff8e 	bl	8007e90 <NVIC_EncodePriority>
 8007f74:	4602      	mov	r2, r0
 8007f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff ff5d 	bl	8007e3c <__NVIC_SetPriority>
}
 8007f82:	bf00      	nop
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	4603      	mov	r3, r0
 8007f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff ff0d 	bl	8007db8 <__NVIC_EnableIRQ>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff ff1d 	bl	8007df4 <__NVIC_DisableIRQ>
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff ff94 	bl	8007ef8 <SysTick_Config>
 8007fd0:	4603      	mov	r3, r0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007fe8:	f7ff fa74 	bl	80074d4 <HAL_GetTick>
 8007fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e099      	b.n	800812c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008018:	e00f      	b.n	800803a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800801a:	f7ff fa5b 	bl	80074d4 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b05      	cmp	r3, #5
 8008026:	d908      	bls.n	800803a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e078      	b.n	800812c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e8      	bne.n	800801a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4b38      	ldr	r3, [pc, #224]	; (8008134 <HAL_DMA_Init+0x158>)
 8008054:	4013      	ands	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800807e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b04      	cmp	r3, #4
 8008092:	d107      	bne.n	80080a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	4313      	orrs	r3, r2
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d117      	bne.n	80080fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00e      	beq.n	80080fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb6d 	bl	80087c0 <DMA_CheckFifoParam>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80080fa:	2301      	movs	r3, #1
 80080fc:	e016      	b.n	800812c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb24 	bl	8008754 <DMA_CalcBaseAndBitshift>
 800810c:	4603      	mov	r3, r0
 800810e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008114:	223f      	movs	r2, #63	; 0x3f
 8008116:	409a      	lsls	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	f010803f 	.word	0xf010803f

08008138 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e050      	b.n	80081ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d101      	bne.n	800815a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008156:	2302      	movs	r3, #2
 8008158:	e048      	b.n	80081ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0201 	bic.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2221      	movs	r2, #33	; 0x21
 8008198:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fada 	bl	8008754 <DMA_CalcBaseAndBitshift>
 80081a0:	4603      	mov	r3, r0
 80081a2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	223f      	movs	r2, #63	; 0x3f
 80081ce:	409a      	lsls	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_DMA_Start_IT+0x26>
 8008216:	2302      	movs	r3, #2
 8008218:	e040      	b.n	800829c <HAL_DMA_Start_IT+0xa8>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b01      	cmp	r3, #1
 800822c:	d12f      	bne.n	800828e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fa58 	bl	80086f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824c:	223f      	movs	r2, #63	; 0x3f
 800824e:	409a      	lsls	r2, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0216 	orr.w	r2, r2, #22
 8008262:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0208 	orr.w	r2, r2, #8
 800827a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e005      	b.n	800829a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008296:	2302      	movs	r3, #2
 8008298:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80082b2:	f7ff f90f 	bl	80074d4 <HAL_GetTick>
 80082b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d008      	beq.n	80082d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e052      	b.n	800837c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0216 	bic.w	r2, r2, #22
 80082e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695a      	ldr	r2, [r3, #20]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <HAL_DMA_Abort+0x62>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0208 	bic.w	r2, r2, #8
 8008314:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008326:	e013      	b.n	8008350 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008328:	f7ff f8d4 	bl	80074d4 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b05      	cmp	r3, #5
 8008334:	d90c      	bls.n	8008350 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2203      	movs	r2, #3
 8008340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e015      	b.n	800837c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e4      	bne.n	8008328 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008362:	223f      	movs	r2, #63	; 0x3f
 8008364:	409a      	lsls	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d004      	beq.n	80083a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2280      	movs	r2, #128	; 0x80
 800839c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e00c      	b.n	80083bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2205      	movs	r2, #5
 80083a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80083d4:	4b8e      	ldr	r3, [pc, #568]	; (8008610 <HAL_DMA_IRQHandler+0x248>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a8e      	ldr	r2, [pc, #568]	; (8008614 <HAL_DMA_IRQHandler+0x24c>)
 80083da:	fba2 2303 	umull	r2, r3, r2, r3
 80083de:	0a9b      	lsrs	r3, r3, #10
 80083e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f2:	2208      	movs	r2, #8
 80083f4:	409a      	lsls	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01a      	beq.n	8008434 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d013      	beq.n	8008434 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0204 	bic.w	r2, r2, #4
 800841a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	2208      	movs	r2, #8
 8008422:	409a      	lsls	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842c:	f043 0201 	orr.w	r2, r3, #1
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008438:	2201      	movs	r2, #1
 800843a:	409a      	lsls	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4013      	ands	r3, r2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d012      	beq.n	800846a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008456:	2201      	movs	r2, #1
 8008458:	409a      	lsls	r2, r3
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	f043 0202 	orr.w	r2, r3, #2
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800846e:	2204      	movs	r2, #4
 8008470:	409a      	lsls	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4013      	ands	r3, r2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d012      	beq.n	80084a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848c:	2204      	movs	r2, #4
 800848e:	409a      	lsls	r2, r3
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008498:	f043 0204 	orr.w	r2, r3, #4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	2210      	movs	r2, #16
 80084a6:	409a      	lsls	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d043      	beq.n	8008538 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d03c      	beq.n	8008538 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c2:	2210      	movs	r2, #16
 80084c4:	409a      	lsls	r2, r3
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d018      	beq.n	800850a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d108      	bne.n	80084f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d024      	beq.n	8008538 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	e01f      	b.n	8008538 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
 8008508:	e016      	b.n	8008538 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d107      	bne.n	8008528 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0208 	bic.w	r2, r2, #8
 8008526:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853c:	2220      	movs	r2, #32
 800853e:	409a      	lsls	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4013      	ands	r3, r2
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 808f 	beq.w	8008668 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0310 	and.w	r3, r3, #16
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8087 	beq.w	8008668 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855e:	2220      	movs	r2, #32
 8008560:	409a      	lsls	r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b05      	cmp	r3, #5
 8008570:	d136      	bne.n	80085e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0216 	bic.w	r2, r2, #22
 8008580:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	695a      	ldr	r2, [r3, #20]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008590:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d103      	bne.n	80085a2 <HAL_DMA_IRQHandler+0x1da>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0208 	bic.w	r2, r2, #8
 80085b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b6:	223f      	movs	r2, #63	; 0x3f
 80085b8:	409a      	lsls	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d07e      	beq.n	80086d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
        }
        return;
 80085de:	e079      	b.n	80086d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01d      	beq.n	800862a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10d      	bne.n	8008618 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	2b00      	cmp	r3, #0
 8008602:	d031      	beq.n	8008668 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
 800860c:	e02c      	b.n	8008668 <HAL_DMA_IRQHandler+0x2a0>
 800860e:	bf00      	nop
 8008610:	2000000c 	.word	0x2000000c
 8008614:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d023      	beq.n	8008668 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
 8008628:	e01e      	b.n	8008668 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10f      	bne.n	8008658 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0210 	bic.w	r2, r2, #16
 8008646:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866c:	2b00      	cmp	r3, #0
 800866e:	d032      	beq.n	80086d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d022      	beq.n	80086c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2205      	movs	r2, #5
 8008680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3301      	adds	r3, #1
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	429a      	cmp	r2, r3
 800869e:	d307      	bcc.n	80086b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f2      	bne.n	8008694 <HAL_DMA_IRQHandler+0x2cc>
 80086ae:	e000      	b.n	80086b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80086b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	e000      	b.n	80086d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80086d4:	bf00      	nop
    }
  }
}
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ea:	b2db      	uxtb	r3, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d108      	bne.n	8008738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008736:	e007      	b.n	8008748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
}
 8008748:	bf00      	nop
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	3b10      	subs	r3, #16
 8008764:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <DMA_CalcBaseAndBitshift+0x64>)
 8008766:	fba2 2303 	umull	r2, r3, r2, r3
 800876a:	091b      	lsrs	r3, r3, #4
 800876c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800876e:	4a13      	ldr	r2, [pc, #76]	; (80087bc <DMA_CalcBaseAndBitshift+0x68>)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b03      	cmp	r3, #3
 8008780:	d909      	bls.n	8008796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	659a      	str	r2, [r3, #88]	; 0x58
 8008794:	e007      	b.n	80087a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	aaaaaaab 	.word	0xaaaaaaab
 80087bc:	08017d88 	.word	0x08017d88

080087c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11f      	bne.n	800881a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d856      	bhi.n	800888e <DMA_CheckFifoParam+0xce>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <DMA_CheckFifoParam+0x28>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	0800880b 	.word	0x0800880b
 80087f0:	080087f9 	.word	0x080087f9
 80087f4:	0800888f 	.word	0x0800888f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d046      	beq.n	8008892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008808:	e043      	b.n	8008892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008812:	d140      	bne.n	8008896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008818:	e03d      	b.n	8008896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008822:	d121      	bne.n	8008868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b03      	cmp	r3, #3
 8008828:	d837      	bhi.n	800889a <DMA_CheckFifoParam+0xda>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <DMA_CheckFifoParam+0x70>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008841 	.word	0x08008841
 8008834:	08008847 	.word	0x08008847
 8008838:	08008841 	.word	0x08008841
 800883c:	08008859 	.word	0x08008859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e030      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d025      	beq.n	800889e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008856:	e022      	b.n	800889e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008860:	d11f      	bne.n	80088a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008866:	e01c      	b.n	80088a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d903      	bls.n	8008876 <DMA_CheckFifoParam+0xb6>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b03      	cmp	r3, #3
 8008872:	d003      	beq.n	800887c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008874:	e018      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
      break;
 800887a:	e015      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	73fb      	strb	r3, [r7, #15]
      break;
 800888c:	e00b      	b.n	80088a6 <DMA_CheckFifoParam+0xe6>
      break;
 800888e:	bf00      	nop
 8008890:	e00a      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008892:	bf00      	nop
 8008894:	e008      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;
 8008896:	bf00      	nop
 8008898:	e006      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;
 800889a:	bf00      	nop
 800889c:	e004      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <DMA_CheckFifoParam+0xe8>
      break;
 80088a6:	bf00      	nop
    }
  } 
  
  return status; 
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	; 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	61fb      	str	r3, [r7, #28]
 80088d2:	e165      	b.n	8008ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80088d4:	2201      	movs	r2, #1
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4013      	ands	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	f040 8154 	bne.w	8008b9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d005      	beq.n	800890a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008906:	2b02      	cmp	r3, #2
 8008908:	d130      	bne.n	800896c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	2203      	movs	r2, #3
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	4013      	ands	r3, r2
 8008920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	fa02 f303 	lsl.w	r3, r2, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4313      	orrs	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008940:	2201      	movs	r2, #1
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	43db      	mvns	r3, r3
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	4013      	ands	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	091b      	lsrs	r3, r3, #4
 8008956:	f003 0201 	and.w	r2, r3, #1
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	fa02 f303 	lsl.w	r3, r2, r3
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	4313      	orrs	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	2b03      	cmp	r3, #3
 8008976:	d017      	beq.n	80089a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	2203      	movs	r2, #3
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	4013      	ands	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	4313      	orrs	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d123      	bne.n	80089fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	08da      	lsrs	r2, r3, #3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3208      	adds	r2, #8
 80089bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	220f      	movs	r2, #15
 80089cc:	fa02 f303 	lsl.w	r3, r2, r3
 80089d0:	43db      	mvns	r3, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4013      	ands	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	08da      	lsrs	r2, r3, #3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3208      	adds	r2, #8
 80089f6:	69b9      	ldr	r1, [r7, #24]
 80089f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	2203      	movs	r2, #3
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	4013      	ands	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f003 0203 	and.w	r2, r3, #3
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80ae 	beq.w	8008b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	4b5d      	ldr	r3, [pc, #372]	; (8008bb8 <HAL_GPIO_Init+0x300>)
 8008a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a46:	4a5c      	ldr	r2, [pc, #368]	; (8008bb8 <HAL_GPIO_Init+0x300>)
 8008a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a4e:	4b5a      	ldr	r3, [pc, #360]	; (8008bb8 <HAL_GPIO_Init+0x300>)
 8008a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a5a:	4a58      	ldr	r2, [pc, #352]	; (8008bbc <HAL_GPIO_Init+0x304>)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	3302      	adds	r3, #2
 8008a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	220f      	movs	r2, #15
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	43db      	mvns	r3, r3
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a4f      	ldr	r2, [pc, #316]	; (8008bc0 <HAL_GPIO_Init+0x308>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d025      	beq.n	8008ad2 <HAL_GPIO_Init+0x21a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a4e      	ldr	r2, [pc, #312]	; (8008bc4 <HAL_GPIO_Init+0x30c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01f      	beq.n	8008ace <HAL_GPIO_Init+0x216>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a4d      	ldr	r2, [pc, #308]	; (8008bc8 <HAL_GPIO_Init+0x310>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d019      	beq.n	8008aca <HAL_GPIO_Init+0x212>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a4c      	ldr	r2, [pc, #304]	; (8008bcc <HAL_GPIO_Init+0x314>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <HAL_GPIO_Init+0x20e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a4b      	ldr	r2, [pc, #300]	; (8008bd0 <HAL_GPIO_Init+0x318>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00d      	beq.n	8008ac2 <HAL_GPIO_Init+0x20a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a4a      	ldr	r2, [pc, #296]	; (8008bd4 <HAL_GPIO_Init+0x31c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <HAL_GPIO_Init+0x206>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a49      	ldr	r2, [pc, #292]	; (8008bd8 <HAL_GPIO_Init+0x320>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d101      	bne.n	8008aba <HAL_GPIO_Init+0x202>
 8008ab6:	2306      	movs	r3, #6
 8008ab8:	e00c      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008aba:	2307      	movs	r3, #7
 8008abc:	e00a      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008abe:	2305      	movs	r3, #5
 8008ac0:	e008      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	e006      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e004      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e002      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <HAL_GPIO_Init+0x21c>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	f002 0203 	and.w	r2, r2, #3
 8008ada:	0092      	lsls	r2, r2, #2
 8008adc:	4093      	lsls	r3, r2
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ae4:	4935      	ldr	r1, [pc, #212]	; (8008bbc <HAL_GPIO_Init+0x304>)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	089b      	lsrs	r3, r3, #2
 8008aea:	3302      	adds	r3, #2
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008af2:	4b3a      	ldr	r3, [pc, #232]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	43db      	mvns	r3, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4013      	ands	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b16:	4a31      	ldr	r2, [pc, #196]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b1c:	4b2f      	ldr	r3, [pc, #188]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b40:	4a26      	ldr	r2, [pc, #152]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008b46:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4013      	ands	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b6a:	4a1c      	ldr	r2, [pc, #112]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b70:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b94:	4a11      	ldr	r2, [pc, #68]	; (8008bdc <HAL_GPIO_Init+0x324>)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	2b0f      	cmp	r3, #15
 8008ba4:	f67f ae96 	bls.w	80088d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	3724      	adds	r7, #36	; 0x24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	40013800 	.word	0x40013800
 8008bc0:	40020000 	.word	0x40020000
 8008bc4:	40020400 	.word	0x40020400
 8008bc8:	40020800 	.word	0x40020800
 8008bcc:	40020c00 	.word	0x40020c00
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	40021400 	.word	0x40021400
 8008bd8:	40021800 	.word	0x40021800
 8008bdc:	40013c00 	.word	0x40013c00

08008be0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e0c7      	b.n	8008d8c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	f040 80b7 	bne.w	8008d86 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c18:	4a62      	ldr	r2, [pc, #392]	; (8008da4 <HAL_GPIO_DeInit+0x1c4>)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	089b      	lsrs	r3, r3, #2
 8008c1e:	3302      	adds	r3, #2
 8008c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	220f      	movs	r2, #15
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a5a      	ldr	r2, [pc, #360]	; (8008da8 <HAL_GPIO_DeInit+0x1c8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d025      	beq.n	8008c8e <HAL_GPIO_DeInit+0xae>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a59      	ldr	r2, [pc, #356]	; (8008dac <HAL_GPIO_DeInit+0x1cc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01f      	beq.n	8008c8a <HAL_GPIO_DeInit+0xaa>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a58      	ldr	r2, [pc, #352]	; (8008db0 <HAL_GPIO_DeInit+0x1d0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d019      	beq.n	8008c86 <HAL_GPIO_DeInit+0xa6>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a57      	ldr	r2, [pc, #348]	; (8008db4 <HAL_GPIO_DeInit+0x1d4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d013      	beq.n	8008c82 <HAL_GPIO_DeInit+0xa2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a56      	ldr	r2, [pc, #344]	; (8008db8 <HAL_GPIO_DeInit+0x1d8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00d      	beq.n	8008c7e <HAL_GPIO_DeInit+0x9e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a55      	ldr	r2, [pc, #340]	; (8008dbc <HAL_GPIO_DeInit+0x1dc>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <HAL_GPIO_DeInit+0x9a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a54      	ldr	r2, [pc, #336]	; (8008dc0 <HAL_GPIO_DeInit+0x1e0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d101      	bne.n	8008c76 <HAL_GPIO_DeInit+0x96>
 8008c72:	2306      	movs	r3, #6
 8008c74:	e00c      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c76:	2307      	movs	r3, #7
 8008c78:	e00a      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c7a:	2305      	movs	r3, #5
 8008c7c:	e008      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c7e:	2304      	movs	r3, #4
 8008c80:	e006      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c82:	2303      	movs	r3, #3
 8008c84:	e004      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e002      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <HAL_GPIO_DeInit+0xb0>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	f002 0203 	and.w	r2, r2, #3
 8008c96:	0092      	lsls	r2, r2, #2
 8008c98:	4093      	lsls	r3, r2
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d132      	bne.n	8008d06 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008ca0:	4b48      	ldr	r3, [pc, #288]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	4946      	ldr	r1, [pc, #280]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008cae:	4b45      	ldr	r3, [pc, #276]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	4943      	ldr	r1, [pc, #268]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008cbc:	4b41      	ldr	r3, [pc, #260]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	493f      	ldr	r1, [pc, #252]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008cca:	4b3e      	ldr	r3, [pc, #248]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	493c      	ldr	r1, [pc, #240]	; (8008dc4 <HAL_GPIO_DeInit+0x1e4>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	220f      	movs	r2, #15
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008ce8:	4a2e      	ldr	r2, [pc, #184]	; (8008da4 <HAL_GPIO_DeInit+0x1c4>)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	089b      	lsrs	r3, r3, #2
 8008cee:	3302      	adds	r3, #2
 8008cf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	43da      	mvns	r2, r3
 8008cf8:	482a      	ldr	r0, [pc, #168]	; (8008da4 <HAL_GPIO_DeInit+0x1c4>)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	089b      	lsrs	r3, r3, #2
 8008cfe:	400a      	ands	r2, r1
 8008d00:	3302      	adds	r3, #2
 8008d02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	2103      	movs	r1, #3
 8008d10:	fa01 f303 	lsl.w	r3, r1, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	401a      	ands	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	08da      	lsrs	r2, r3, #3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3208      	adds	r2, #8
 8008d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	220f      	movs	r2, #15
 8008d32:	fa02 f303 	lsl.w	r3, r2, r3
 8008d36:	43db      	mvns	r3, r3
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	08d2      	lsrs	r2, r2, #3
 8008d3c:	4019      	ands	r1, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3208      	adds	r2, #8
 8008d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	2103      	movs	r1, #3
 8008d50:	fa01 f303 	lsl.w	r3, r1, r3
 8008d54:	43db      	mvns	r3, r3
 8008d56:	401a      	ands	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	2101      	movs	r1, #1
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	fa01 f303 	lsl.w	r3, r1, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	2103      	movs	r1, #3
 8008d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	401a      	ands	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2b0f      	cmp	r3, #15
 8008d90:	f67f af34 	bls.w	8008bfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40013800 	.word	0x40013800
 8008da8:	40020000 	.word	0x40020000
 8008dac:	40020400 	.word	0x40020400
 8008db0:	40020800 	.word	0x40020800
 8008db4:	40020c00 	.word	0x40020c00
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	40021400 	.word	0x40021400
 8008dc0:	40021800 	.word	0x40021800
 8008dc4:	40013c00 	.word	0x40013c00

08008dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	887b      	ldrh	r3, [r7, #2]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]
 8008de4:	e001      	b.n	8008dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	807b      	strh	r3, [r7, #2]
 8008e04:	4613      	mov	r3, r2
 8008e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e08:	787b      	ldrb	r3, [r7, #1]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e0e:	887a      	ldrh	r2, [r7, #2]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e14:	e003      	b.n	8008e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e16:	887b      	ldrh	r3, [r7, #2]
 8008e18:	041a      	lsls	r2, r3, #16
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e3c:	887a      	ldrh	r2, [r7, #2]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4013      	ands	r3, r2
 8008e42:	041a      	lsls	r2, r3, #16
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	43d9      	mvns	r1, r3
 8008e48:	887b      	ldrh	r3, [r7, #2]
 8008e4a:	400b      	ands	r3, r1
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	619a      	str	r2, [r3, #24]
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d006      	beq.n	8008e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e76:	4a05      	ldr	r2, [pc, #20]	; (8008e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fc fa1a 	bl	80052b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40013c00 	.word	0x40013c00

08008e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e12b      	b.n	80090fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fc ff7e 	bl	8005db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2224      	movs	r2, #36	; 0x24
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ef4:	f001 f938 	bl	800a168 <HAL_RCC_GetPCLK1Freq>
 8008ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	4a81      	ldr	r2, [pc, #516]	; (8009104 <HAL_I2C_Init+0x274>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d807      	bhi.n	8008f14 <HAL_I2C_Init+0x84>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a80      	ldr	r2, [pc, #512]	; (8009108 <HAL_I2C_Init+0x278>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	bf94      	ite	ls
 8008f0c:	2301      	movls	r3, #1
 8008f0e:	2300      	movhi	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	e006      	b.n	8008f22 <HAL_I2C_Init+0x92>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4a7d      	ldr	r2, [pc, #500]	; (800910c <HAL_I2C_Init+0x27c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	bf94      	ite	ls
 8008f1c:	2301      	movls	r3, #1
 8008f1e:	2300      	movhi	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e0e7      	b.n	80090fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a78      	ldr	r2, [pc, #480]	; (8009110 <HAL_I2C_Init+0x280>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	0c9b      	lsrs	r3, r3, #18
 8008f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a6a      	ldr	r2, [pc, #424]	; (8009104 <HAL_I2C_Init+0x274>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d802      	bhi.n	8008f64 <HAL_I2C_Init+0xd4>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3301      	adds	r3, #1
 8008f62:	e009      	b.n	8008f78 <HAL_I2C_Init+0xe8>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
 8008f6e:	4a69      	ldr	r2, [pc, #420]	; (8009114 <HAL_I2C_Init+0x284>)
 8008f70:	fba2 2303 	umull	r2, r3, r2, r3
 8008f74:	099b      	lsrs	r3, r3, #6
 8008f76:	3301      	adds	r3, #1
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6812      	ldr	r2, [r2, #0]
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008f8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	495c      	ldr	r1, [pc, #368]	; (8009104 <HAL_I2C_Init+0x274>)
 8008f94:	428b      	cmp	r3, r1
 8008f96:	d819      	bhi.n	8008fcc <HAL_I2C_Init+0x13c>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	1e59      	subs	r1, r3, #1
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fa6:	1c59      	adds	r1, r3, #1
 8008fa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008fac:	400b      	ands	r3, r1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <HAL_I2C_Init+0x138>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1e59      	subs	r1, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fc6:	e051      	b.n	800906c <HAL_I2C_Init+0x1dc>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	e04f      	b.n	800906c <HAL_I2C_Init+0x1dc>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <HAL_I2C_Init+0x168>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	1e58      	subs	r0, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6859      	ldr	r1, [r3, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	440b      	add	r3, r1
 8008fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf0c      	ite	eq
 8008ff0:	2301      	moveq	r3, #1
 8008ff2:	2300      	movne	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	e012      	b.n	800901e <HAL_I2C_Init+0x18e>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	1e58      	subs	r0, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6859      	ldr	r1, [r3, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	0099      	lsls	r1, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	fbb0 f3f3 	udiv	r3, r0, r3
 800900e:	3301      	adds	r3, #1
 8009010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009014:	2b00      	cmp	r3, #0
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <HAL_I2C_Init+0x196>
 8009022:	2301      	movs	r3, #1
 8009024:	e022      	b.n	800906c <HAL_I2C_Init+0x1dc>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10e      	bne.n	800904c <HAL_I2C_Init+0x1bc>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1e58      	subs	r0, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6859      	ldr	r1, [r3, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	440b      	add	r3, r1
 800903c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009040:	3301      	adds	r3, #1
 8009042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904a:	e00f      	b.n	800906c <HAL_I2C_Init+0x1dc>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	1e58      	subs	r0, r3, #1
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6859      	ldr	r1, [r3, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	0099      	lsls	r1, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009062:	3301      	adds	r3, #1
 8009064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	6809      	ldr	r1, [r1, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69da      	ldr	r2, [r3, #28]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	431a      	orrs	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800909a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6911      	ldr	r1, [r2, #16]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	68d2      	ldr	r2, [r2, #12]
 80090a6:	4311      	orrs	r1, r2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695a      	ldr	r2, [r3, #20]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	000186a0 	.word	0x000186a0
 8009108:	001e847f 	.word	0x001e847f
 800910c:	003d08ff 	.word	0x003d08ff
 8009110:	431bde83 	.word	0x431bde83
 8009114:	10624dd3 	.word	0x10624dd3

08009118 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e021      	b.n	800916e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2224      	movs	r2, #36	; 0x24
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0201 	bic.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7fc fed8 	bl	8005ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	461a      	mov	r2, r3
 8009186:	4603      	mov	r3, r0
 8009188:	817b      	strh	r3, [r7, #10]
 800918a:	460b      	mov	r3, r1
 800918c:	813b      	strh	r3, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009192:	f7fe f99f 	bl	80074d4 <HAL_GetTick>
 8009196:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	f040 80d9 	bne.w	8009358 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2319      	movs	r3, #25
 80091ac:	2201      	movs	r2, #1
 80091ae:	496d      	ldr	r1, [pc, #436]	; (8009364 <HAL_I2C_Mem_Write+0x1ec>)
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fc7f 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80091bc:	2302      	movs	r3, #2
 80091be:	e0cc      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_I2C_Mem_Write+0x56>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e0c5      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d007      	beq.n	80091f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2221      	movs	r2, #33	; 0x21
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2240      	movs	r2, #64	; 0x40
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a3a      	ldr	r2, [r7, #32]
 800921e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a4d      	ldr	r2, [pc, #308]	; (8009368 <HAL_I2C_Mem_Write+0x1f0>)
 8009234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009236:	88f8      	ldrh	r0, [r7, #6]
 8009238:	893a      	ldrh	r2, [r7, #8]
 800923a:	8979      	ldrh	r1, [r7, #10]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4603      	mov	r3, r0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fab6 	bl	80097b8 <I2C_RequestMemoryWrite>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d052      	beq.n	80092f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e081      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fd00 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	2b04      	cmp	r3, #4
 800926c:	d107      	bne.n	800927e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e06b      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d11b      	bne.n	80092f8 <HAL_I2C_Mem_Write+0x180>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d017      	beq.n	80092f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1aa      	bne.n	8009256 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fcec 	bl	8009ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00d      	beq.n	800932c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	2b04      	cmp	r3, #4
 8009316:	d107      	bne.n	8009328 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009326:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e016      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800933a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2220      	movs	r2, #32
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	00100002 	.word	0x00100002
 8009368:	ffff0000 	.word	0xffff0000

0800936c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08c      	sub	sp, #48	; 0x30
 8009370:	af02      	add	r7, sp, #8
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	4608      	mov	r0, r1
 8009376:	4611      	mov	r1, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4603      	mov	r3, r0
 800937c:	817b      	strh	r3, [r7, #10]
 800937e:	460b      	mov	r3, r1
 8009380:	813b      	strh	r3, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009386:	f7fe f8a5 	bl	80074d4 <HAL_GetTick>
 800938a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b20      	cmp	r3, #32
 8009396:	f040 8208 	bne.w	80097aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2319      	movs	r3, #25
 80093a0:	2201      	movs	r2, #1
 80093a2:	497b      	ldr	r1, [pc, #492]	; (8009590 <HAL_I2C_Mem_Read+0x224>)
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fb85 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80093b0:	2302      	movs	r3, #2
 80093b2:	e1fb      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_I2C_Mem_Read+0x56>
 80093be:	2302      	movs	r3, #2
 80093c0:	e1f4      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d007      	beq.n	80093e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0201 	orr.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2222      	movs	r2, #34	; 0x22
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a5b      	ldr	r2, [pc, #364]	; (8009594 <HAL_I2C_Mem_Read+0x228>)
 8009428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800942a:	88f8      	ldrh	r0, [r7, #6]
 800942c:	893a      	ldrh	r2, [r7, #8]
 800942e:	8979      	ldrh	r1, [r7, #10]
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4603      	mov	r3, r0
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fa52 	bl	80098e4 <I2C_RequestMemoryRead>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e1b0      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d113      	bne.n	800947a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009452:	2300      	movs	r3, #0
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	623b      	str	r3, [r7, #32]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	623b      	str	r3, [r7, #32]
 8009466:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e184      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947e:	2b01      	cmp	r3, #1
 8009480:	d11b      	bne.n	80094ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009492:	2300      	movs	r3, #0
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	e164      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d11b      	bne.n	80094fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094e2:	2300      	movs	r3, #0
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	e144      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009510:	e138      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009516:	2b03      	cmp	r3, #3
 8009518:	f200 80f1 	bhi.w	80096fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009520:	2b01      	cmp	r3, #1
 8009522:	d123      	bne.n	800956c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fc1b 	bl	8009d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e139      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009554:	3b01      	subs	r3, #1
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	855a      	strh	r2, [r3, #42]	; 0x2a
 800956a:	e10b      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009570:	2b02      	cmp	r3, #2
 8009572:	d14e      	bne.n	8009612 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	2200      	movs	r2, #0
 800957c:	4906      	ldr	r1, [pc, #24]	; (8009598 <HAL_I2C_Mem_Read+0x22c>)
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fa98 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d008      	beq.n	800959c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e10e      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
 800958e:	bf00      	nop
 8009590:	00100002 	.word	0x00100002
 8009594:	ffff0000 	.word	0xffff0000
 8009598:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009610:	e0b8      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	2200      	movs	r2, #0
 800961a:	4966      	ldr	r1, [pc, #408]	; (80097b4 <HAL_I2C_Mem_Read+0x448>)
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fa49 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0bf      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800963a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	2200      	movs	r2, #0
 8009676:	494f      	ldr	r1, [pc, #316]	; (80097b4 <HAL_I2C_Mem_Read+0x448>)
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fa1b 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e091      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691a      	ldr	r2, [r3, #16]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	3b01      	subs	r3, #1
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096fc:	e042      	b.n	8009784 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fb2e 	bl	8009d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e04c      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0304 	and.w	r3, r3, #4
 800974e:	2b04      	cmp	r3, #4
 8009750:	d118      	bne.n	8009784 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	b2d2      	uxtb	r2, r2
 800975e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976e:	3b01      	subs	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977a:	b29b      	uxth	r3, r3
 800977c:	3b01      	subs	r3, #1
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f aec2 	bne.w	8009512 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	e000      	b.n	80097ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80097aa:	2302      	movs	r3, #2
  }
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3728      	adds	r7, #40	; 0x28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	00010004 	.word	0x00010004

080097b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	461a      	mov	r2, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	817b      	strh	r3, [r7, #10]
 80097ca:	460b      	mov	r3, r1
 80097cc:	813b      	strh	r3, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 f960 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00d      	beq.n	8009816 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009808:	d103      	bne.n	8009812 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e05f      	b.n	80098d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009816:	897b      	ldrh	r3, [r7, #10]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	492d      	ldr	r1, [pc, #180]	; (80098e0 <I2C_RequestMemoryWrite+0x128>)
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 f998 	bl	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e04c      	b.n	80098d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009854:	6a39      	ldr	r1, [r7, #32]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fa02 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00d      	beq.n	800987e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	2b04      	cmp	r3, #4
 8009868:	d107      	bne.n	800987a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e02b      	b.n	80098d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d105      	bne.n	8009890 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009884:	893b      	ldrh	r3, [r7, #8]
 8009886:	b2da      	uxtb	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	611a      	str	r2, [r3, #16]
 800988e:	e021      	b.n	80098d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009890:	893b      	ldrh	r3, [r7, #8]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b29b      	uxth	r3, r3
 8009896:	b2da      	uxtb	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	6a39      	ldr	r1, [r7, #32]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f9dc 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00d      	beq.n	80098ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d107      	bne.n	80098c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e005      	b.n	80098d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098ca:	893b      	ldrh	r3, [r7, #8]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	00010002 	.word	0x00010002

080098e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	817b      	strh	r3, [r7, #10]
 80098f6:	460b      	mov	r3, r1
 80098f8:	813b      	strh	r3, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800990c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800991c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	2200      	movs	r2, #0
 8009926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 f8c2 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00d      	beq.n	8009952 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009944:	d103      	bne.n	800994e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800994c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e0aa      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009952:	897b      	ldrh	r3, [r7, #10]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	4952      	ldr	r1, [pc, #328]	; (8009ab0 <I2C_RequestMemoryRead+0x1cc>)
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f8fa 	bl	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e097      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800998e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009990:	6a39      	ldr	r1, [r7, #32]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f964 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00d      	beq.n	80099ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d107      	bne.n	80099b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e076      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099ba:	88fb      	ldrh	r3, [r7, #6]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d105      	bne.n	80099cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099c0:	893b      	ldrh	r3, [r7, #8]
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	611a      	str	r2, [r3, #16]
 80099ca:	e021      	b.n	8009a10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099cc:	893b      	ldrh	r3, [r7, #8]
 80099ce:	0a1b      	lsrs	r3, r3, #8
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099dc:	6a39      	ldr	r1, [r7, #32]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f93e 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00d      	beq.n	8009a06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d107      	bne.n	8009a02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e050      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a06:	893b      	ldrh	r3, [r7, #8]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a12:	6a39      	ldr	r1, [r7, #32]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f923 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00d      	beq.n	8009a3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d107      	bne.n	8009a38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e035      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f82b 	bl	8009ab4 <I2C_WaitOnFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00d      	beq.n	8009a80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a72:	d103      	bne.n	8009a7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e013      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a80:	897b      	ldrh	r3, [r7, #10]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	6a3a      	ldr	r2, [r7, #32]
 8009a94:	4906      	ldr	r1, [pc, #24]	; (8009ab0 <I2C_RequestMemoryRead+0x1cc>)
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 f863 	bl	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	00010002 	.word	0x00010002

08009ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ac4:	e025      	b.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d021      	beq.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ace:	f7fd fd01 	bl	80074d4 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d302      	bcc.n	8009ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d116      	bne.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	f043 0220 	orr.w	r2, r3, #32
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e023      	b.n	8009b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d10d      	bne.n	8009b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	43da      	mvns	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4013      	ands	r3, r2
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	e00c      	b.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	43da      	mvns	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4013      	ands	r3, r2
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bf0c      	ite	eq
 8009b4a:	2301      	moveq	r3, #1
 8009b4c:	2300      	movne	r3, #0
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	461a      	mov	r2, r3
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d0b6      	beq.n	8009ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
 8009b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b70:	e051      	b.n	8009c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b80:	d123      	bne.n	8009bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f043 0204 	orr.w	r2, r3, #4
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e046      	b.n	8009c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd0:	d021      	beq.n	8009c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd2:	f7fd fc7f 	bl	80074d4 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d302      	bcc.n	8009be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d116      	bne.n	8009c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f043 0220 	orr.w	r2, r3, #32
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e020      	b.n	8009c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	0c1b      	lsrs	r3, r3, #16
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d10c      	bne.n	8009c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	43da      	mvns	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf14      	ite	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	2300      	moveq	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	e00b      	b.n	8009c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	43da      	mvns	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4013      	ands	r3, r2
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d18d      	bne.n	8009b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c6c:	e02d      	b.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f8ce 	bl	8009e10 <I2C_IsAcknowledgeFailed>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e02d      	b.n	8009cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d021      	beq.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fd fc25 	bl	80074d4 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d116      	bne.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	f043 0220 	orr.w	r2, r3, #32
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e007      	b.n	8009cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d1ca      	bne.n	8009c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cee:	e02d      	b.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f88d 	bl	8009e10 <I2C_IsAcknowledgeFailed>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e02d      	b.n	8009d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d06:	d021      	beq.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d08:	f7fd fbe4 	bl	80074d4 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d302      	bcc.n	8009d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d116      	bne.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	f043 0220 	orr.w	r2, r3, #32
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e007      	b.n	8009d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d1ca      	bne.n	8009cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d70:	e042      	b.n	8009df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	2b10      	cmp	r3, #16
 8009d7e:	d119      	bne.n	8009db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f06f 0210 	mvn.w	r2, #16
 8009d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e029      	b.n	8009e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db4:	f7fd fb8e 	bl	80074d4 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d302      	bcc.n	8009dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d116      	bne.n	8009df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	f043 0220 	orr.w	r2, r3, #32
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e007      	b.n	8009e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d1b5      	bne.n	8009d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e26:	d11b      	bne.n	8009e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	f043 0204 	orr.w	r2, r3, #4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e000      	b.n	8009e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
	...

08009e70 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009e76:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009e82:	687b      	ldr	r3, [r7, #4]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	420e0020 	.word	0x420e0020
 8009e94:	40007000 	.word	0x40007000

08009e98 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8009ea2:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <HAL_PWREx_EnableBkUpReg+0x44>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ea8:	f7fd fb14 	bl	80074d4 <HAL_GetTick>
 8009eac:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009eae:	e009      	b.n	8009ec4 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8009eb0:	f7fd fb10 	bl	80074d4 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebe:	d901      	bls.n	8009ec4 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e006      	b.n	8009ed2 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009ec4:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <HAL_PWREx_EnableBkUpReg+0x48>)
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 0308 	and.w	r3, r3, #8
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d1ef      	bne.n	8009eb0 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	420e00a4 	.word	0x420e00a4
 8009ee0:	40007000 	.word	0x40007000

08009ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009eee:	2300      	movs	r3, #0
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	4b20      	ldr	r3, [pc, #128]	; (8009f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	4a1f      	ldr	r2, [pc, #124]	; (8009f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8009ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009efc:	6413      	str	r3, [r2, #64]	; 0x40
 8009efe:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009f0a:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <HAL_PWREx_EnableOverDrive+0x94>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f10:	f7fd fae0 	bl	80074d4 <HAL_GetTick>
 8009f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f16:	e009      	b.n	8009f2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f18:	f7fd fadc 	bl	80074d4 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f26:	d901      	bls.n	8009f2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e01f      	b.n	8009f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f2c:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f38:	d1ee      	bne.n	8009f18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009f3a:	4b11      	ldr	r3, [pc, #68]	; (8009f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f40:	f7fd fac8 	bl	80074d4 <HAL_GetTick>
 8009f44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f46:	e009      	b.n	8009f5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f48:	f7fd fac4 	bl	80074d4 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f56:	d901      	bls.n	8009f5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e007      	b.n	8009f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f68:	d1ee      	bne.n	8009f48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	40023800 	.word	0x40023800
 8009f78:	420e0040 	.word	0x420e0040
 8009f7c:	40007000 	.word	0x40007000
 8009f80:	420e0044 	.word	0x420e0044

08009f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0cc      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f98:	4b68      	ldr	r3, [pc, #416]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d90c      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa6:	4b65      	ldr	r3, [pc, #404]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fae:	4b63      	ldr	r3, [pc, #396]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d001      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0b8      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d020      	beq.n	800a00e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fd8:	4b59      	ldr	r3, [pc, #356]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	4a58      	ldr	r2, [pc, #352]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ff0:	4b53      	ldr	r3, [pc, #332]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	4a52      	ldr	r2, [pc, #328]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ffc:	4b50      	ldr	r3, [pc, #320]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	494d      	ldr	r1, [pc, #308]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d044      	beq.n	800a0a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d107      	bne.n	800a032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a022:	4b47      	ldr	r3, [pc, #284]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d119      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e07f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d003      	beq.n	800a042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d107      	bne.n	800a052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a042:	4b3f      	ldr	r3, [pc, #252]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e06f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a052:	4b3b      	ldr	r3, [pc, #236]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e067      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f023 0203 	bic.w	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	4934      	ldr	r1, [pc, #208]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	4313      	orrs	r3, r2
 800a072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a074:	f7fd fa2e 	bl	80074d4 <HAL_GetTick>
 800a078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a07a:	e00a      	b.n	800a092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a07c:	f7fd fa2a 	bl	80074d4 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d901      	bls.n	800a092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e04f      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a092:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 020c 	and.w	r2, r3, #12
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d1eb      	bne.n	800a07c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0a4:	4b25      	ldr	r3, [pc, #148]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 030f 	and.w	r3, r3, #15
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d20c      	bcs.n	800a0cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0b2:	4b22      	ldr	r3, [pc, #136]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	b2d2      	uxtb	r2, r2
 800a0b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ba:	4b20      	ldr	r3, [pc, #128]	; (800a13c <HAL_RCC_ClockConfig+0x1b8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d001      	beq.n	800a0cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e032      	b.n	800a132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0d8:	4b19      	ldr	r3, [pc, #100]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4916      	ldr	r1, [pc, #88]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	490e      	ldr	r1, [pc, #56]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a106:	4313      	orrs	r3, r2
 800a108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a10a:	f000 fb7f 	bl	800a80c <HAL_RCC_GetSysClockFreq>
 800a10e:	4602      	mov	r2, r0
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <HAL_RCC_ClockConfig+0x1bc>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	091b      	lsrs	r3, r3, #4
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	490a      	ldr	r1, [pc, #40]	; (800a144 <HAL_RCC_ClockConfig+0x1c0>)
 800a11c:	5ccb      	ldrb	r3, [r1, r3]
 800a11e:	fa22 f303 	lsr.w	r3, r2, r3
 800a122:	4a09      	ldr	r2, [pc, #36]	; (800a148 <HAL_RCC_ClockConfig+0x1c4>)
 800a124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a126:	4b09      	ldr	r3, [pc, #36]	; (800a14c <HAL_RCC_ClockConfig+0x1c8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fd f98e 	bl	800744c <HAL_InitTick>

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	40023c00 	.word	0x40023c00
 800a140:	40023800 	.word	0x40023800
 800a144:	08017d70 	.word	0x08017d70
 800a148:	2000000c 	.word	0x2000000c
 800a14c:	20000010 	.word	0x20000010

0800a150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a154:	4b03      	ldr	r3, [pc, #12]	; (800a164 <HAL_RCC_GetHCLKFreq+0x14>)
 800a156:	681b      	ldr	r3, [r3, #0]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	2000000c 	.word	0x2000000c

0800a168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a16c:	f7ff fff0 	bl	800a150 <HAL_RCC_GetHCLKFreq>
 800a170:	4602      	mov	r2, r0
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	0a9b      	lsrs	r3, r3, #10
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	4903      	ldr	r1, [pc, #12]	; (800a18c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a17e:	5ccb      	ldrb	r3, [r1, r3]
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a184:	4618      	mov	r0, r3
 800a186:	bd80      	pop	{r7, pc}
 800a188:	40023800 	.word	0x40023800
 800a18c:	08017d80 	.word	0x08017d80

0800a190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a194:	f7ff ffdc 	bl	800a150 <HAL_RCC_GetHCLKFreq>
 800a198:	4602      	mov	r2, r0
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	0b5b      	lsrs	r3, r3, #13
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	4903      	ldr	r1, [pc, #12]	; (800a1b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1a6:	5ccb      	ldrb	r3, [r1, r3]
 800a1a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	40023800 	.word	0x40023800
 800a1b4:	08017d80 	.word	0x08017d80

0800a1b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08c      	sub	sp, #48	; 0x30
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d010      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a1f0:	4b6f      	ldr	r3, [pc, #444]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a1f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	496c      	ldr	r1, [pc, #432]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a200:	4313      	orrs	r3, r2
 800a202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800a20e:	2301      	movs	r3, #1
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d010      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a21e:	4b64      	ldr	r3, [pc, #400]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a224:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22c:	4960      	ldr	r1, [pc, #384]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800a23c:	2301      	movs	r3, #1
 800a23e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d017      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a24c:	4b58      	ldr	r3, [pc, #352]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25a:	4955      	ldr	r1, [pc, #340]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26a:	d101      	bne.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800a26c:	2301      	movs	r3, #1
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800a278:	2301      	movs	r3, #1
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0308 	and.w	r3, r3, #8
 800a284:	2b00      	cmp	r3, #0
 800a286:	d017      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a288:	4b49      	ldr	r3, [pc, #292]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a28e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	4946      	ldr	r1, [pc, #280]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2a6:	d101      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 808a 	beq.w	800a3da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]
 800a2ca:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	4a38      	ldr	r2, [pc, #224]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2d6:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2de:	60bb      	str	r3, [r7, #8]
 800a2e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a2e2:	4b34      	ldr	r3, [pc, #208]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a33      	ldr	r2, [pc, #204]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a2e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2ee:	f7fd f8f1 	bl	80074d4 <HAL_GetTick>
 800a2f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a2f4:	e008      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a2f6:	f7fd f8ed 	bl	80074d4 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e278      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a308:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0f0      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a314:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a31c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02f      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a32c:	6a3a      	ldr	r2, [r7, #32]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d028      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a332:	4b1f      	ldr	r3, [pc, #124]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a33a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a33c:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a33e:	2201      	movs	r2, #1
 800a340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a342:	4b1d      	ldr	r3, [pc, #116]	; (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a348:	4a19      	ldr	r2, [pc, #100]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a34e:	4b18      	ldr	r3, [pc, #96]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b01      	cmp	r3, #1
 800a358:	d114      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a35a:	f7fd f8bb 	bl	80074d4 <HAL_GetTick>
 800a35e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a360:	e00a      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a362:	f7fd f8b7 	bl	80074d4 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a370:	4293      	cmp	r3, r2
 800a372:	d901      	bls.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e240      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a378:	4b0d      	ldr	r3, [pc, #52]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0ee      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a38c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a390:	d114      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a392:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a6:	4902      	ldr	r1, [pc, #8]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	608b      	str	r3, [r1, #8]
 800a3ac:	e00c      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a3ae:	bf00      	nop
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	40007000 	.word	0x40007000
 800a3b8:	42470e40 	.word	0x42470e40
 800a3bc:	4b4a      	ldr	r3, [pc, #296]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	4a49      	ldr	r2, [pc, #292]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a3c6:	6093      	str	r3, [r2, #8]
 800a3c8:	4b47      	ldr	r3, [pc, #284]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3d4:	4944      	ldr	r1, [pc, #272]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d004      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a3ec:	4b3f      	ldr	r3, [pc, #252]	; (800a4ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a3ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00a      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a3fc:	4b3a      	ldr	r3, [pc, #232]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40a:	4937      	ldr	r1, [pc, #220]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a41e:	4b32      	ldr	r3, [pc, #200]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a424:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a42c:	492e      	ldr	r1, [pc, #184]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d011      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a440:	4b29      	ldr	r3, [pc, #164]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a446:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44e:	4926      	ldr	r1, [pc, #152]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a450:	4313      	orrs	r3, r2
 800a452:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a45e:	d101      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a460:	2301      	movs	r3, #1
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a476:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47e:	491a      	ldr	r1, [pc, #104]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d011      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a498:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	4911      	ldr	r1, [pc, #68]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b0:	d101      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d005      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4c4:	f040 80ff 	bne.w	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a4c8:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4ce:	f7fd f801 	bl	80074d4 <HAL_GetTick>
 800a4d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4d4:	e00e      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a4d6:	f7fc fffd 	bl	80074d4 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d907      	bls.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e188      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	424711e0 	.word	0x424711e0
 800a4f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4f4:	4b7e      	ldr	r3, [pc, #504]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1ea      	bne.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d028      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d124      	bne.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a528:	4b71      	ldr	r3, [pc, #452]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a52e:	0c1b      	lsrs	r3, r3, #16
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	3301      	adds	r3, #1
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a53a:	4b6d      	ldr	r3, [pc, #436]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a540:	0e1b      	lsrs	r3, r3, #24
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	019b      	lsls	r3, r3, #6
 800a552:	431a      	orrs	r2, r3
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	3b01      	subs	r3, #1
 800a55a:	041b      	lsls	r3, r3, #16
 800a55c:	431a      	orrs	r2, r3
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	061b      	lsls	r3, r3, #24
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	071b      	lsls	r3, r3, #28
 800a56a:	4961      	ldr	r1, [pc, #388]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a586:	d00a      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a590:	2b00      	cmp	r3, #0
 800a592:	d035      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a59c:	d130      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a59e:	4b54      	ldr	r3, [pc, #336]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a4:	0c1b      	lsrs	r3, r3, #16
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a5b0:	4b4f      	ldr	r3, [pc, #316]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	f003 0307 	and.w	r3, r3, #7
 800a5bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	019b      	lsls	r3, r3, #6
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	061b      	lsls	r3, r3, #24
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	071b      	lsls	r3, r3, #28
 800a5e0:	4943      	ldr	r1, [pc, #268]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a5e8:	4b41      	ldr	r3, [pc, #260]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5ee:	f023 021f 	bic.w	r2, r3, #31
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	493d      	ldr	r1, [pc, #244]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d029      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a614:	d124      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a616:	4b36      	ldr	r3, [pc, #216]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a61c:	0c1b      	lsrs	r3, r3, #16
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	3301      	adds	r3, #1
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a628:	4b31      	ldr	r3, [pc, #196]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a62e:	0f1b      	lsrs	r3, r3, #28
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	019b      	lsls	r3, r3, #6
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	3b01      	subs	r3, #1
 800a64a:	041b      	lsls	r3, r3, #16
 800a64c:	431a      	orrs	r2, r3
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	061b      	lsls	r3, r3, #24
 800a652:	431a      	orrs	r2, r3
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	071b      	lsls	r3, r3, #28
 800a658:	4925      	ldr	r1, [pc, #148]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d016      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	019b      	lsls	r3, r3, #6
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	085b      	lsrs	r3, r3, #1
 800a67e:	3b01      	subs	r3, #1
 800a680:	041b      	lsls	r3, r3, #16
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	061b      	lsls	r3, r3, #24
 800a68a:	431a      	orrs	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	071b      	lsls	r3, r3, #28
 800a692:	4917      	ldr	r1, [pc, #92]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a694:	4313      	orrs	r3, r2
 800a696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a69a:	4b16      	ldr	r3, [pc, #88]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6a0:	f7fc ff18 	bl	80074d4 <HAL_GetTick>
 800a6a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6a6:	e008      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a6a8:	f7fc ff14 	bl	80074d4 <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e09f      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6ba:	4b0d      	ldr	r3, [pc, #52]	; (800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f0      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	f040 8095 	bne.w	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6d4:	f7fc fefe 	bl	80074d4 <HAL_GetTick>
 800a6d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a6da:	e00f      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a6dc:	f7fc fefa 	bl	80074d4 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d908      	bls.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e085      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a6ee:	bf00      	nop
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	42470068 	.word	0x42470068
 800a6f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a6fc:	4b41      	ldr	r3, [pc, #260]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a708:	d0e8      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d009      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02b      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d127      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a732:	4b34      	ldr	r3, [pc, #208]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a738:	0c1b      	lsrs	r3, r3, #16
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	3301      	adds	r3, #1
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699a      	ldr	r2, [r3, #24]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	019b      	lsls	r3, r3, #6
 800a74e:	431a      	orrs	r2, r3
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	3b01      	subs	r3, #1
 800a756:	041b      	lsls	r3, r3, #16
 800a758:	431a      	orrs	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	061b      	lsls	r3, r3, #24
 800a760:	4928      	ldr	r1, [pc, #160]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a762:	4313      	orrs	r3, r2
 800a764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a768:	4b26      	ldr	r3, [pc, #152]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	3b01      	subs	r3, #1
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	4922      	ldr	r1, [pc, #136]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d01d      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a796:	d118      	bne.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a798:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79e:	0e1b      	lsrs	r3, r3, #24
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	699a      	ldr	r2, [r3, #24]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	019b      	lsls	r3, r3, #6
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	061b      	lsls	r3, r3, #24
 800a7c2:	4910      	ldr	r1, [pc, #64]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a7d0:	f7fc fe80 	bl	80074d4 <HAL_GetTick>
 800a7d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a7d6:	e008      	b.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a7d8:	f7fc fe7c 	bl	80074d4 <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d901      	bls.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e007      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a7ea:	4b06      	ldr	r3, [pc, #24]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f6:	d1ef      	bne.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3730      	adds	r7, #48	; 0x30
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	40023800 	.word	0x40023800
 800a808:	42470070 	.word	0x42470070

0800a80c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a80c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a810:	b0ae      	sub	sp, #184	; 0xb8
 800a812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a832:	4bcb      	ldr	r3, [pc, #812]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 030c 	and.w	r3, r3, #12
 800a83a:	2b0c      	cmp	r3, #12
 800a83c:	f200 8206 	bhi.w	800ac4c <HAL_RCC_GetSysClockFreq+0x440>
 800a840:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a846:	bf00      	nop
 800a848:	0800a87d 	.word	0x0800a87d
 800a84c:	0800ac4d 	.word	0x0800ac4d
 800a850:	0800ac4d 	.word	0x0800ac4d
 800a854:	0800ac4d 	.word	0x0800ac4d
 800a858:	0800a885 	.word	0x0800a885
 800a85c:	0800ac4d 	.word	0x0800ac4d
 800a860:	0800ac4d 	.word	0x0800ac4d
 800a864:	0800ac4d 	.word	0x0800ac4d
 800a868:	0800a88d 	.word	0x0800a88d
 800a86c:	0800ac4d 	.word	0x0800ac4d
 800a870:	0800ac4d 	.word	0x0800ac4d
 800a874:	0800ac4d 	.word	0x0800ac4d
 800a878:	0800aa7d 	.word	0x0800aa7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a87c:	4bb9      	ldr	r3, [pc, #740]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x358>)
 800a87e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a882:	e1e7      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a884:	4bb8      	ldr	r3, [pc, #736]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a88a:	e1e3      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a88c:	4bb4      	ldr	r3, [pc, #720]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a898:	4bb1      	ldr	r3, [pc, #708]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d071      	beq.n	800a988 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8a4:	4bae      	ldr	r3, [pc, #696]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	099b      	lsrs	r3, r3, #6
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a8b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	f04f 0000 	mov.w	r0, #0
 800a8d2:	f04f 0100 	mov.w	r1, #0
 800a8d6:	0159      	lsls	r1, r3, #5
 800a8d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8dc:	0150      	lsls	r0, r2, #5
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	1a51      	subs	r1, r2, r1
 800a8e6:	6439      	str	r1, [r7, #64]	; 0x40
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	eb63 0301 	sbc.w	r3, r3, r1
 800a8ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a8f0:	f04f 0200 	mov.w	r2, #0
 800a8f4:	f04f 0300 	mov.w	r3, #0
 800a8f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	018b      	lsls	r3, r1, #6
 800a900:	4641      	mov	r1, r8
 800a902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a906:	4641      	mov	r1, r8
 800a908:	018a      	lsls	r2, r1, #6
 800a90a:	4641      	mov	r1, r8
 800a90c:	1a51      	subs	r1, r2, r1
 800a90e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a910:	4649      	mov	r1, r9
 800a912:	eb63 0301 	sbc.w	r3, r3, r1
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a924:	4649      	mov	r1, r9
 800a926:	00cb      	lsls	r3, r1, #3
 800a928:	4641      	mov	r1, r8
 800a92a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a92e:	4641      	mov	r1, r8
 800a930:	00ca      	lsls	r2, r1, #3
 800a932:	4610      	mov	r0, r2
 800a934:	4619      	mov	r1, r3
 800a936:	4603      	mov	r3, r0
 800a938:	4622      	mov	r2, r4
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	633b      	str	r3, [r7, #48]	; 0x30
 800a93e:	462b      	mov	r3, r5
 800a940:	460a      	mov	r2, r1
 800a942:	eb42 0303 	adc.w	r3, r2, r3
 800a946:	637b      	str	r3, [r7, #52]	; 0x34
 800a948:	f04f 0200 	mov.w	r2, #0
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a954:	4629      	mov	r1, r5
 800a956:	024b      	lsls	r3, r1, #9
 800a958:	4621      	mov	r1, r4
 800a95a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a95e:	4621      	mov	r1, r4
 800a960:	024a      	lsls	r2, r1, #9
 800a962:	4610      	mov	r0, r2
 800a964:	4619      	mov	r1, r3
 800a966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a974:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a978:	f7f6 fb04 	bl	8000f84 <__aeabi_uldivmod>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4613      	mov	r3, r2
 800a982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a986:	e067      	b.n	800aa58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a988:	4b75      	ldr	r3, [pc, #468]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	099b      	lsrs	r3, r3, #6
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a994:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	462b      	mov	r3, r5
 800a9ae:	f04f 0000 	mov.w	r0, #0
 800a9b2:	f04f 0100 	mov.w	r1, #0
 800a9b6:	0159      	lsls	r1, r3, #5
 800a9b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a9bc:	0150      	lsls	r0, r2, #5
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	1a51      	subs	r1, r2, r1
 800a9c6:	62b9      	str	r1, [r7, #40]	; 0x28
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	eb63 0301 	sbc.w	r3, r3, r1
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d0:	f04f 0200 	mov.w	r2, #0
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a9dc:	4649      	mov	r1, r9
 800a9de:	018b      	lsls	r3, r1, #6
 800a9e0:	4641      	mov	r1, r8
 800a9e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a9e6:	4641      	mov	r1, r8
 800a9e8:	018a      	lsls	r2, r1, #6
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	ebb2 0a01 	subs.w	sl, r2, r1
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	eb63 0b01 	sbc.w	fp, r3, r1
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa0a:	4692      	mov	sl, r2
 800aa0c:	469b      	mov	fp, r3
 800aa0e:	4623      	mov	r3, r4
 800aa10:	eb1a 0303 	adds.w	r3, sl, r3
 800aa14:	623b      	str	r3, [r7, #32]
 800aa16:	462b      	mov	r3, r5
 800aa18:	eb4b 0303 	adc.w	r3, fp, r3
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1e:	f04f 0200 	mov.w	r2, #0
 800aa22:	f04f 0300 	mov.w	r3, #0
 800aa26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	028b      	lsls	r3, r1, #10
 800aa2e:	4621      	mov	r1, r4
 800aa30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa34:	4621      	mov	r1, r4
 800aa36:	028a      	lsls	r2, r1, #10
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa40:	2200      	movs	r2, #0
 800aa42:	673b      	str	r3, [r7, #112]	; 0x70
 800aa44:	677a      	str	r2, [r7, #116]	; 0x74
 800aa46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800aa4a:	f7f6 fa9b 	bl	8000f84 <__aeabi_uldivmod>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4613      	mov	r3, r2
 800aa54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa58:	4b41      	ldr	r3, [pc, #260]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	3301      	adds	r3, #1
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800aa6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa72:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800aa7a:	e0eb      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa7c:	4b38      	ldr	r3, [pc, #224]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa88:	4b35      	ldr	r3, [pc, #212]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d06b      	beq.n	800ab6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa94:	4b32      	ldr	r3, [pc, #200]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	099b      	lsrs	r3, r3, #6
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa6:	663b      	str	r3, [r7, #96]	; 0x60
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	667b      	str	r3, [r7, #100]	; 0x64
 800aaac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800aab0:	4622      	mov	r2, r4
 800aab2:	462b      	mov	r3, r5
 800aab4:	f04f 0000 	mov.w	r0, #0
 800aab8:	f04f 0100 	mov.w	r1, #0
 800aabc:	0159      	lsls	r1, r3, #5
 800aabe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aac2:	0150      	lsls	r0, r2, #5
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4621      	mov	r1, r4
 800aaca:	1a51      	subs	r1, r2, r1
 800aacc:	61b9      	str	r1, [r7, #24]
 800aace:	4629      	mov	r1, r5
 800aad0:	eb63 0301 	sbc.w	r3, r3, r1
 800aad4:	61fb      	str	r3, [r7, #28]
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	f04f 0300 	mov.w	r3, #0
 800aade:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800aae2:	4659      	mov	r1, fp
 800aae4:	018b      	lsls	r3, r1, #6
 800aae6:	4651      	mov	r1, sl
 800aae8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aaec:	4651      	mov	r1, sl
 800aaee:	018a      	lsls	r2, r1, #6
 800aaf0:	4651      	mov	r1, sl
 800aaf2:	ebb2 0801 	subs.w	r8, r2, r1
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	eb63 0901 	sbc.w	r9, r3, r1
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab10:	4690      	mov	r8, r2
 800ab12:	4699      	mov	r9, r3
 800ab14:	4623      	mov	r3, r4
 800ab16:	eb18 0303 	adds.w	r3, r8, r3
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	eb49 0303 	adc.w	r3, r9, r3
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ab30:	4629      	mov	r1, r5
 800ab32:	024b      	lsls	r3, r1, #9
 800ab34:	4621      	mov	r1, r4
 800ab36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	024a      	lsls	r2, r1, #9
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab46:	2200      	movs	r2, #0
 800ab48:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ab4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab50:	f7f6 fa18 	bl	8000f84 <__aeabi_uldivmod>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4613      	mov	r3, r2
 800ab5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab5e:	e065      	b.n	800ac2c <HAL_RCC_GetSysClockFreq+0x420>
 800ab60:	40023800 	.word	0x40023800
 800ab64:	00f42400 	.word	0x00f42400
 800ab68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab6c:	4b3d      	ldr	r3, [pc, #244]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x458>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	099b      	lsrs	r3, r3, #6
 800ab72:	2200      	movs	r2, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	4611      	mov	r1, r2
 800ab78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ab7c:	653b      	str	r3, [r7, #80]	; 0x50
 800ab7e:	2300      	movs	r3, #0
 800ab80:	657b      	str	r3, [r7, #84]	; 0x54
 800ab82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ab86:	4642      	mov	r2, r8
 800ab88:	464b      	mov	r3, r9
 800ab8a:	f04f 0000 	mov.w	r0, #0
 800ab8e:	f04f 0100 	mov.w	r1, #0
 800ab92:	0159      	lsls	r1, r3, #5
 800ab94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab98:	0150      	lsls	r0, r2, #5
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	4641      	mov	r1, r8
 800aba0:	1a51      	subs	r1, r2, r1
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	4649      	mov	r1, r9
 800aba6:	eb63 0301 	sbc.w	r3, r3, r1
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 0300 	mov.w	r3, #0
 800abb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800abb8:	4659      	mov	r1, fp
 800abba:	018b      	lsls	r3, r1, #6
 800abbc:	4651      	mov	r1, sl
 800abbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800abc2:	4651      	mov	r1, sl
 800abc4:	018a      	lsls	r2, r1, #6
 800abc6:	4651      	mov	r1, sl
 800abc8:	1a54      	subs	r4, r2, r1
 800abca:	4659      	mov	r1, fp
 800abcc:	eb63 0501 	sbc.w	r5, r3, r1
 800abd0:	f04f 0200 	mov.w	r2, #0
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	00eb      	lsls	r3, r5, #3
 800abda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abde:	00e2      	lsls	r2, r4, #3
 800abe0:	4614      	mov	r4, r2
 800abe2:	461d      	mov	r5, r3
 800abe4:	4643      	mov	r3, r8
 800abe6:	18e3      	adds	r3, r4, r3
 800abe8:	603b      	str	r3, [r7, #0]
 800abea:	464b      	mov	r3, r9
 800abec:	eb45 0303 	adc.w	r3, r5, r3
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	f04f 0200 	mov.w	r2, #0
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800abfe:	4629      	mov	r1, r5
 800ac00:	028b      	lsls	r3, r1, #10
 800ac02:	4621      	mov	r1, r4
 800ac04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ac08:	4621      	mov	r1, r4
 800ac0a:	028a      	lsls	r2, r1, #10
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4619      	mov	r1, r3
 800ac10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac14:	2200      	movs	r2, #0
 800ac16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac18:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ac1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac1e:	f7f6 f9b1 	bl	8000f84 <__aeabi_uldivmod>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4613      	mov	r3, r2
 800ac28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x458>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	0f1b      	lsrs	r3, r3, #28
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800ac3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ac4a:	e003      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac4c:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x45c>)
 800ac4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ac52:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	37b8      	adds	r7, #184	; 0xb8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac62:	bf00      	nop
 800ac64:	40023800 	.word	0x40023800
 800ac68:	00f42400 	.word	0x00f42400

0800ac6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e28d      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 8083 	beq.w	800ad92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ac8c:	4b94      	ldr	r3, [pc, #592]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 030c 	and.w	r3, r3, #12
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d019      	beq.n	800accc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ac98:	4b91      	ldr	r3, [pc, #580]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d106      	bne.n	800acb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800aca4:	4b8e      	ldr	r3, [pc, #568]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acb0:	d00c      	beq.n	800accc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acb2:	4b8b      	ldr	r3, [pc, #556]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800acba:	2b0c      	cmp	r3, #12
 800acbc:	d112      	bne.n	800ace4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acbe:	4b88      	ldr	r3, [pc, #544]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acca:	d10b      	bne.n	800ace4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800accc:	4b84      	ldr	r3, [pc, #528]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d05b      	beq.n	800ad90 <HAL_RCC_OscConfig+0x124>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d157      	bne.n	800ad90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e25a      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acec:	d106      	bne.n	800acfc <HAL_RCC_OscConfig+0x90>
 800acee:	4b7c      	ldr	r3, [pc, #496]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a7b      	ldr	r2, [pc, #492]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800acf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	e01d      	b.n	800ad38 <HAL_RCC_OscConfig+0xcc>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad04:	d10c      	bne.n	800ad20 <HAL_RCC_OscConfig+0xb4>
 800ad06:	4b76      	ldr	r3, [pc, #472]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a75      	ldr	r2, [pc, #468]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	4b73      	ldr	r3, [pc, #460]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a72      	ldr	r2, [pc, #456]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	e00b      	b.n	800ad38 <HAL_RCC_OscConfig+0xcc>
 800ad20:	4b6f      	ldr	r3, [pc, #444]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a6e      	ldr	r2, [pc, #440]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	4b6c      	ldr	r3, [pc, #432]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a6b      	ldr	r2, [pc, #428]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d013      	beq.n	800ad68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad40:	f7fc fbc8 	bl	80074d4 <HAL_GetTick>
 800ad44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad46:	e008      	b.n	800ad5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad48:	f7fc fbc4 	bl	80074d4 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	2b64      	cmp	r3, #100	; 0x64
 800ad54:	d901      	bls.n	800ad5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e21f      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5a:	4b61      	ldr	r3, [pc, #388]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0f0      	beq.n	800ad48 <HAL_RCC_OscConfig+0xdc>
 800ad66:	e014      	b.n	800ad92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad68:	f7fc fbb4 	bl	80074d4 <HAL_GetTick>
 800ad6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad70:	f7fc fbb0 	bl	80074d4 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b64      	cmp	r3, #100	; 0x64
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e20b      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad82:	4b57      	ldr	r3, [pc, #348]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <HAL_RCC_OscConfig+0x104>
 800ad8e:	e000      	b.n	800ad92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d06f      	beq.n	800ae7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ad9e:	4b50      	ldr	r3, [pc, #320]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f003 030c 	and.w	r3, r3, #12
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d017      	beq.n	800adda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800adaa:	4b4d      	ldr	r3, [pc, #308]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	d105      	bne.n	800adc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800adb6:	4b4a      	ldr	r3, [pc, #296]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adc2:	4b47      	ldr	r3, [pc, #284]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800adca:	2b0c      	cmp	r3, #12
 800adcc:	d11c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adce:	4b44      	ldr	r3, [pc, #272]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d116      	bne.n	800ae08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adda:	4b41      	ldr	r3, [pc, #260]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <HAL_RCC_OscConfig+0x186>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d001      	beq.n	800adf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e1d3      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adf2:	4b3b      	ldr	r3, [pc, #236]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	4937      	ldr	r1, [pc, #220]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae06:	e03a      	b.n	800ae7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d020      	beq.n	800ae52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae10:	4b34      	ldr	r3, [pc, #208]	; (800aee4 <HAL_RCC_OscConfig+0x278>)
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae16:	f7fc fb5d 	bl	80074d4 <HAL_GetTick>
 800ae1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae1c:	e008      	b.n	800ae30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae1e:	f7fc fb59 	bl	80074d4 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e1b4      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae30:	4b2b      	ldr	r3, [pc, #172]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0f0      	beq.n	800ae1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae3c:	4b28      	ldr	r3, [pc, #160]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	4925      	ldr	r1, [pc, #148]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	e015      	b.n	800ae7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae52:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <HAL_RCC_OscConfig+0x278>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae58:	f7fc fb3c 	bl	80074d4 <HAL_GetTick>
 800ae5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae60:	f7fc fb38 	bl	80074d4 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e193      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae72:	4b1b      	ldr	r3, [pc, #108]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f0      	bne.n	800ae60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0308 	and.w	r3, r3, #8
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d036      	beq.n	800aef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d016      	beq.n	800aec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae92:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <HAL_RCC_OscConfig+0x27c>)
 800ae94:	2201      	movs	r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae98:	f7fc fb1c 	bl	80074d4 <HAL_GetTick>
 800ae9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aea0:	f7fc fb18 	bl	80074d4 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e173      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <HAL_RCC_OscConfig+0x274>)
 800aeb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f0      	beq.n	800aea0 <HAL_RCC_OscConfig+0x234>
 800aebe:	e01b      	b.n	800aef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aec0:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <HAL_RCC_OscConfig+0x27c>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec6:	f7fc fb05 	bl	80074d4 <HAL_GetTick>
 800aeca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aecc:	e00e      	b.n	800aeec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aece:	f7fc fb01 	bl	80074d4 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d907      	bls.n	800aeec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e15c      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
 800aee0:	40023800 	.word	0x40023800
 800aee4:	42470000 	.word	0x42470000
 800aee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeec:	4b8a      	ldr	r3, [pc, #552]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800aeee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1ea      	bne.n	800aece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8097 	beq.w	800b034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af0a:	4b83      	ldr	r3, [pc, #524]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10f      	bne.n	800af36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	4b7f      	ldr	r3, [pc, #508]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1e:	4a7e      	ldr	r2, [pc, #504]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af24:	6413      	str	r3, [r2, #64]	; 0x40
 800af26:	4b7c      	ldr	r3, [pc, #496]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2e:	60bb      	str	r3, [r7, #8]
 800af30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af32:	2301      	movs	r3, #1
 800af34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af36:	4b79      	ldr	r3, [pc, #484]	; (800b11c <HAL_RCC_OscConfig+0x4b0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d118      	bne.n	800af74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af42:	4b76      	ldr	r3, [pc, #472]	; (800b11c <HAL_RCC_OscConfig+0x4b0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a75      	ldr	r2, [pc, #468]	; (800b11c <HAL_RCC_OscConfig+0x4b0>)
 800af48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af4e:	f7fc fac1 	bl	80074d4 <HAL_GetTick>
 800af52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af54:	e008      	b.n	800af68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af56:	f7fc fabd 	bl	80074d4 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d901      	bls.n	800af68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e118      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af68:	4b6c      	ldr	r3, [pc, #432]	; (800b11c <HAL_RCC_OscConfig+0x4b0>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af70:	2b00      	cmp	r3, #0
 800af72:	d0f0      	beq.n	800af56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d106      	bne.n	800af8a <HAL_RCC_OscConfig+0x31e>
 800af7c:	4b66      	ldr	r3, [pc, #408]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af80:	4a65      	ldr	r2, [pc, #404]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	6713      	str	r3, [r2, #112]	; 0x70
 800af88:	e01c      	b.n	800afc4 <HAL_RCC_OscConfig+0x358>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	2b05      	cmp	r3, #5
 800af90:	d10c      	bne.n	800afac <HAL_RCC_OscConfig+0x340>
 800af92:	4b61      	ldr	r3, [pc, #388]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af96:	4a60      	ldr	r2, [pc, #384]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800af98:	f043 0304 	orr.w	r3, r3, #4
 800af9c:	6713      	str	r3, [r2, #112]	; 0x70
 800af9e:	4b5e      	ldr	r3, [pc, #376]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa2:	4a5d      	ldr	r2, [pc, #372]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afa4:	f043 0301 	orr.w	r3, r3, #1
 800afa8:	6713      	str	r3, [r2, #112]	; 0x70
 800afaa:	e00b      	b.n	800afc4 <HAL_RCC_OscConfig+0x358>
 800afac:	4b5a      	ldr	r3, [pc, #360]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb0:	4a59      	ldr	r2, [pc, #356]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	6713      	str	r3, [r2, #112]	; 0x70
 800afb8:	4b57      	ldr	r3, [pc, #348]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbc:	4a56      	ldr	r2, [pc, #344]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afbe:	f023 0304 	bic.w	r3, r3, #4
 800afc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d015      	beq.n	800aff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afcc:	f7fc fa82 	bl	80074d4 <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd2:	e00a      	b.n	800afea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afd4:	f7fc fa7e 	bl	80074d4 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e0d7      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afea:	4b4b      	ldr	r3, [pc, #300]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0ee      	beq.n	800afd4 <HAL_RCC_OscConfig+0x368>
 800aff6:	e014      	b.n	800b022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aff8:	f7fc fa6c 	bl	80074d4 <HAL_GetTick>
 800affc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800affe:	e00a      	b.n	800b016 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b000:	f7fc fa68 	bl	80074d4 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00e:	4293      	cmp	r3, r2
 800b010:	d901      	bls.n	800b016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e0c1      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b016:	4b40      	ldr	r3, [pc, #256]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1ee      	bne.n	800b000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d105      	bne.n	800b034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b028:	4b3b      	ldr	r3, [pc, #236]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02c:	4a3a      	ldr	r2, [pc, #232]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b02e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 80ad 	beq.w	800b198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b03e:	4b36      	ldr	r3, [pc, #216]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f003 030c 	and.w	r3, r3, #12
 800b046:	2b08      	cmp	r3, #8
 800b048:	d060      	beq.n	800b10c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d145      	bne.n	800b0de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b052:	4b33      	ldr	r3, [pc, #204]	; (800b120 <HAL_RCC_OscConfig+0x4b4>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b058:	f7fc fa3c 	bl	80074d4 <HAL_GetTick>
 800b05c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b05e:	e008      	b.n	800b072 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b060:	f7fc fa38 	bl	80074d4 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e093      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b072:	4b29      	ldr	r3, [pc, #164]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f0      	bne.n	800b060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	019b      	lsls	r3, r3, #6
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b094:	085b      	lsrs	r3, r3, #1
 800b096:	3b01      	subs	r3, #1
 800b098:	041b      	lsls	r3, r3, #16
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	061b      	lsls	r3, r3, #24
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	071b      	lsls	r3, r3, #28
 800b0aa:	491b      	ldr	r1, [pc, #108]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0b0:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <HAL_RCC_OscConfig+0x4b4>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b6:	f7fc fa0d 	bl	80074d4 <HAL_GetTick>
 800b0ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0bc:	e008      	b.n	800b0d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0be:	f7fc fa09 	bl	80074d4 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d901      	bls.n	800b0d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e064      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0d0:	4b11      	ldr	r3, [pc, #68]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0f0      	beq.n	800b0be <HAL_RCC_OscConfig+0x452>
 800b0dc:	e05c      	b.n	800b198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <HAL_RCC_OscConfig+0x4b4>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e4:	f7fc f9f6 	bl	80074d4 <HAL_GetTick>
 800b0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ea:	e008      	b.n	800b0fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0ec:	f7fc f9f2 	bl	80074d4 <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d901      	bls.n	800b0fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e04d      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0fe:	4b06      	ldr	r3, [pc, #24]	; (800b118 <HAL_RCC_OscConfig+0x4ac>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f0      	bne.n	800b0ec <HAL_RCC_OscConfig+0x480>
 800b10a:	e045      	b.n	800b198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d107      	bne.n	800b124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e040      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
 800b118:	40023800 	.word	0x40023800
 800b11c:	40007000 	.word	0x40007000
 800b120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b124:	4b1f      	ldr	r3, [pc, #124]	; (800b1a4 <HAL_RCC_OscConfig+0x538>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d030      	beq.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d129      	bne.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d122      	bne.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b154:	4013      	ands	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b15a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d119      	bne.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	085b      	lsrs	r3, r3, #1
 800b16c:	3b01      	subs	r3, #1
 800b16e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b170:	429a      	cmp	r2, r3
 800b172:	d10f      	bne.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b180:	429a      	cmp	r2, r3
 800b182:	d107      	bne.n	800b194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b190:	429a      	cmp	r2, r3
 800b192:	d001      	beq.n	800b198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40023800 	.word	0x40023800

0800b1a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e066      	b.n	800b28c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	7f5b      	ldrb	r3, [r3, #29]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d105      	bne.n	800b1d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7fa fed0 	bl	8005f74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	22ca      	movs	r2, #202	; 0xca
 800b1e0:	625a      	str	r2, [r3, #36]	; 0x24
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2253      	movs	r2, #83	; 0x53
 800b1e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f927 	bl	800b43e <RTC_EnterInitMode>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d12c      	bne.n	800b254 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b20c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6899      	ldr	r1, [r3, #8]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	68d2      	ldr	r2, [r2, #12]
 800b234:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6919      	ldr	r1, [r3, #16]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	041a      	lsls	r2, r3, #16
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f92e 	bl	800b4ac <RTC_ExitInitMode>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d113      	bne.n	800b282 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b268:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	22ff      	movs	r2, #255	; 0xff
 800b288:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b2c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b2ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	0c1b      	lsrs	r3, r3, #16
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	0a1b      	lsrs	r3, r3, #8
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	0d9b      	lsrs	r3, r3, #22
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	b2da      	uxtb	r2, r3
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11a      	bne.n	800b346 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f8ee 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b31a:	4603      	mov	r3, r0
 800b31c:	461a      	mov	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	785b      	ldrb	r3, [r3, #1]
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f8e5 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b32c:	4603      	mov	r3, r0
 800b32e:	461a      	mov	r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	789b      	ldrb	r3, [r3, #2]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 f8dc 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b33e:	4603      	mov	r3, r0
 800b340:	461a      	mov	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b36a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b36e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	0c1b      	lsrs	r3, r3, #16
 800b374:	b2da      	uxtb	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	0a1b      	lsrs	r3, r3, #8
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 031f 	and.w	r3, r3, #31
 800b384:	b2da      	uxtb	r2, r3
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b392:	b2da      	uxtb	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	0b5b      	lsrs	r3, r3, #13
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d11a      	bne.n	800b3e4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	78db      	ldrb	r3, [r3, #3]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f89f 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	785b      	ldrb	r3, [r3, #1]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 f896 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	789b      	ldrb	r3, [r3, #2]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f88d 	bl	800b4f6 <RTC_Bcd2ToByte>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	461a      	mov	r2, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68da      	ldr	r2, [r3, #12]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b408:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b40a:	f7fc f863 	bl	80074d4 <HAL_GetTick>
 800b40e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b410:	e009      	b.n	800b426 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b412:	f7fc f85f 	bl	80074d4 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b420:	d901      	bls.n	800b426 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e007      	b.n	800b436 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f003 0320 	and.w	r3, r3, #32
 800b430:	2b00      	cmp	r3, #0
 800b432:	d0ee      	beq.n	800b412 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d122      	bne.n	800b4a2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68da      	ldr	r2, [r3, #12]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b46a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b46c:	f7fc f832 	bl	80074d4 <HAL_GetTick>
 800b470:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b472:	e00c      	b.n	800b48e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b474:	f7fc f82e 	bl	80074d4 <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b482:	d904      	bls.n	800b48e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2204      	movs	r2, #4
 800b488:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <RTC_EnterInitMode+0x64>
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d1e8      	bne.n	800b474 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff ff89 	bl	800b3ee <HAL_RTC_WaitForSynchro>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2204      	movs	r2, #4
 800b4e6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	091b      	lsrs	r3, r3, #4
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	461a      	mov	r2, r3
 800b50c:	0092      	lsls	r2, r2, #2
 800b50e:	4413      	add	r3, r2
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	f003 030f 	and.w	r3, r3, #15
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	4413      	add	r3, r2
 800b520:	b2db      	uxtb	r3, r3
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b52e:	b480      	push	{r7}
 800b530:	b087      	sub	sp, #28
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3350      	adds	r3, #80	; 0x50
 800b544:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4413      	add	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
}
 800b556:	bf00      	nop
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3350      	adds	r3, #80	; 0x50
 800b576:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e07b      	b.n	800b69c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d108      	bne.n	800b5be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5b4:	d009      	beq.n	800b5ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	61da      	str	r2, [r3, #28]
 800b5bc:	e005      	b.n	800b5ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d106      	bne.n	800b5ea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7fa fcef 	bl	8005fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b600:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b612:	431a      	orrs	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b61c:	431a      	orrs	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	431a      	orrs	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	431a      	orrs	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b644:	431a      	orrs	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b64e:	ea42 0103 	orr.w	r1, r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b656:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	0c1b      	lsrs	r3, r3, #16
 800b668:	f003 0104 	and.w	r1, r3, #4
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	f003 0210 	and.w	r2, r3, #16
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69da      	ldr	r2, [r3, #28]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b68a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d101      	bne.n	800b6c6 <HAL_SPI_Transmit+0x22>
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	e126      	b.n	800b914 <HAL_SPI_Transmit+0x270>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6ce:	f7fb ff01 	bl	80074d4 <HAL_GetTick>
 800b6d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b6d4:	88fb      	ldrh	r3, [r7, #6]
 800b6d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d002      	beq.n	800b6ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b6e8:	e10b      	b.n	800b902 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <HAL_SPI_Transmit+0x52>
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b6fa:	e102      	b.n	800b902 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2203      	movs	r2, #3
 800b700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	88fa      	ldrh	r2, [r7, #6]
 800b714:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	88fa      	ldrh	r2, [r7, #6]
 800b71a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b742:	d10f      	bne.n	800b764 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76e:	2b40      	cmp	r3, #64	; 0x40
 800b770:	d007      	beq.n	800b782 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b78a:	d14b      	bne.n	800b824 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <HAL_SPI_Transmit+0xf6>
 800b794:	8afb      	ldrh	r3, [r7, #22]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d13e      	bne.n	800b818 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	881a      	ldrh	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	1c9a      	adds	r2, r3, #2
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b7be:	e02b      	b.n	800b818 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d112      	bne.n	800b7f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d2:	881a      	ldrh	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	1c9a      	adds	r2, r3, #2
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b7f2:	e011      	b.n	800b818 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7f4:	f7fb fe6e 	bl	80074d4 <HAL_GetTick>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d803      	bhi.n	800b80c <HAL_SPI_Transmit+0x168>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80a:	d102      	bne.n	800b812 <HAL_SPI_Transmit+0x16e>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d102      	bne.n	800b818 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b816:	e074      	b.n	800b902 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1ce      	bne.n	800b7c0 <HAL_SPI_Transmit+0x11c>
 800b822:	e04c      	b.n	800b8be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_SPI_Transmit+0x18e>
 800b82c:	8afb      	ldrh	r3, [r7, #22]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d140      	bne.n	800b8b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	330c      	adds	r3, #12
 800b83c:	7812      	ldrb	r2, [r2, #0]
 800b83e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b84e:	b29b      	uxth	r3, r3
 800b850:	3b01      	subs	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b858:	e02c      	b.n	800b8b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 0302 	and.w	r3, r3, #2
 800b864:	2b02      	cmp	r3, #2
 800b866:	d113      	bne.n	800b890 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	330c      	adds	r3, #12
 800b872:	7812      	ldrb	r2, [r2, #0]
 800b874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	86da      	strh	r2, [r3, #54]	; 0x36
 800b88e:	e011      	b.n	800b8b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b890:	f7fb fe20 	bl	80074d4 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d803      	bhi.n	800b8a8 <HAL_SPI_Transmit+0x204>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d102      	bne.n	800b8ae <HAL_SPI_Transmit+0x20a>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d102      	bne.n	800b8b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b8b2:	e026      	b.n	800b902 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1cd      	bne.n	800b85a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 fa62 	bl	800bd8c <SPI_EndRxTxTransaction>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8dc:	2300      	movs	r3, #0
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	613b      	str	r3, [r7, #16]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	77fb      	strb	r3, [r7, #31]
 800b8fe:	e000      	b.n	800b902 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b900:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b912:	7ffb      	ldrb	r3, [r7, #31]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08c      	sub	sp, #48	; 0x30
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b92a:	2301      	movs	r3, #1
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <HAL_SPI_TransmitReceive+0x26>
 800b93e:	2302      	movs	r3, #2
 800b940:	e18a      	b.n	800bc58 <HAL_SPI_TransmitReceive+0x33c>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b94a:	f7fb fdc3 	bl	80074d4 <HAL_GetTick>
 800b94e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b960:	887b      	ldrh	r3, [r7, #2]
 800b962:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d00f      	beq.n	800b98c <HAL_SPI_TransmitReceive+0x70>
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b972:	d107      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d103      	bne.n	800b984 <HAL_SPI_TransmitReceive+0x68>
 800b97c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b980:	2b04      	cmp	r3, #4
 800b982:	d003      	beq.n	800b98c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b984:	2302      	movs	r3, #2
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b98a:	e15b      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d005      	beq.n	800b99e <HAL_SPI_TransmitReceive+0x82>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <HAL_SPI_TransmitReceive+0x82>
 800b998:	887b      	ldrh	r3, [r7, #2]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d103      	bne.n	800b9a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9a4:	e14e      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d003      	beq.n	800b9ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2205      	movs	r2, #5
 800b9b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	887a      	ldrh	r2, [r7, #2]
 800b9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	887a      	ldrh	r2, [r7, #2]
 800b9d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	887a      	ldrh	r2, [r7, #2]
 800b9dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	887a      	ldrh	r2, [r7, #2]
 800b9e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fa:	2b40      	cmp	r3, #64	; 0x40
 800b9fc:	d007      	beq.n	800ba0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba16:	d178      	bne.n	800bb0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <HAL_SPI_TransmitReceive+0x10a>
 800ba20:	8b7b      	ldrh	r3, [r7, #26]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d166      	bne.n	800baf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	881a      	ldrh	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	1c9a      	adds	r2, r3, #2
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba4a:	e053      	b.n	800baf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d11b      	bne.n	800ba92 <HAL_SPI_TransmitReceive+0x176>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d016      	beq.n	800ba92 <HAL_SPI_TransmitReceive+0x176>
 800ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d113      	bne.n	800ba92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	881a      	ldrh	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7a:	1c9a      	adds	r2, r3, #2
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d119      	bne.n	800bad4 <HAL_SPI_TransmitReceive+0x1b8>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d014      	beq.n	800bad4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	b292      	uxth	r2, r2
 800bab6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babc:	1c9a      	adds	r2, r3, #2
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bad0:	2301      	movs	r3, #1
 800bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bad4:	f7fb fcfe 	bl	80074d4 <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d807      	bhi.n	800baf4 <HAL_SPI_TransmitReceive+0x1d8>
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d003      	beq.n	800baf4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800baf2:	e0a7      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1a6      	bne.n	800ba4c <HAL_SPI_TransmitReceive+0x130>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1a1      	bne.n	800ba4c <HAL_SPI_TransmitReceive+0x130>
 800bb08:	e07c      	b.n	800bc04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <HAL_SPI_TransmitReceive+0x1fc>
 800bb12:	8b7b      	ldrh	r3, [r7, #26]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d16b      	bne.n	800bbf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	330c      	adds	r3, #12
 800bb22:	7812      	ldrb	r2, [r2, #0]
 800bb24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb3e:	e057      	b.n	800bbf0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f003 0302 	and.w	r3, r3, #2
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d11c      	bne.n	800bb88 <HAL_SPI_TransmitReceive+0x26c>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d017      	beq.n	800bb88 <HAL_SPI_TransmitReceive+0x26c>
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d114      	bne.n	800bb88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	330c      	adds	r3, #12
 800bb68:	7812      	ldrb	r2, [r2, #0]
 800bb6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb84:	2300      	movs	r3, #0
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d119      	bne.n	800bbca <HAL_SPI_TransmitReceive+0x2ae>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d014      	beq.n	800bbca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbca:	f7fb fc83 	bl	80074d4 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d803      	bhi.n	800bbe2 <HAL_SPI_TransmitReceive+0x2c6>
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe0:	d102      	bne.n	800bbe8 <HAL_SPI_TransmitReceive+0x2cc>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d103      	bne.n	800bbf0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bbee:	e029      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1a2      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x224>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d19d      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f8bf 	bl	800bd8c <SPI_EndRxTxTransaction>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d006      	beq.n	800bc22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc20:	e010      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	617b      	str	r3, [r7, #20]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	617b      	str	r3, [r7, #20]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	e000      	b.n	800bc44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bc42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3730      	adds	r7, #48	; 0x30
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc6e:	b2db      	uxtb	r3, r3
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc8c:	f7fb fc22 	bl	80074d4 <HAL_GetTick>
 800bc90:	4602      	mov	r2, r0
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	4413      	add	r3, r2
 800bc9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc9c:	f7fb fc1a 	bl	80074d4 <HAL_GetTick>
 800bca0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bca2:	4b39      	ldr	r3, [pc, #228]	; (800bd88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	015b      	lsls	r3, r3, #5
 800bca8:	0d1b      	lsrs	r3, r3, #20
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	fb02 f303 	mul.w	r3, r2, r3
 800bcb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcb2:	e054      	b.n	800bd5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d050      	beq.n	800bd5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcbc:	f7fb fc0a 	bl	80074d4 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d902      	bls.n	800bcd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d13d      	bne.n	800bd4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bce0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcea:	d111      	bne.n	800bd10 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf4:	d004      	beq.n	800bd00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfe:	d107      	bne.n	800bd10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd18:	d10f      	bne.n	800bd3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e017      	b.n	800bd7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4013      	ands	r3, r2
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	bf0c      	ite	eq
 800bd6e:	2301      	moveq	r3, #1
 800bd70:	2300      	movne	r3, #0
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	461a      	mov	r2, r3
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d19b      	bne.n	800bcb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	2000000c 	.word	0x2000000c

0800bd8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af02      	add	r7, sp, #8
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd98:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <SPI_EndRxTxTransaction+0x7c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a1b      	ldr	r2, [pc, #108]	; (800be0c <SPI_EndRxTxTransaction+0x80>)
 800bd9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bda2:	0d5b      	lsrs	r3, r3, #21
 800bda4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bda8:	fb02 f303 	mul.w	r3, r2, r3
 800bdac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdb6:	d112      	bne.n	800bdde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2180      	movs	r1, #128	; 0x80
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff ff5a 	bl	800bc7c <SPI_WaitFlagStateUntilTimeout>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d016      	beq.n	800bdfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd2:	f043 0220 	orr.w	r2, r3, #32
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e00f      	b.n	800bdfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf4:	2b80      	cmp	r3, #128	; 0x80
 800bdf6:	d0f2      	beq.n	800bdde <SPI_EndRxTxTransaction+0x52>
 800bdf8:	e000      	b.n	800bdfc <SPI_EndRxTxTransaction+0x70>
        break;
 800bdfa:	bf00      	nop
  }

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	2000000c 	.word	0x2000000c
 800be0c:	165e9f81 	.word	0x165e9f81

0800be10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e03f      	b.n	800bea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7fa f90e 	bl	8006058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2224      	movs	r2, #36	; 0x24
 800be40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68da      	ldr	r2, [r3, #12]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f001 f87b 	bl	800cf50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695a      	ldr	r2, [r3, #20]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2220      	movs	r2, #32
 800be9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e021      	b.n	800bf00 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2224      	movs	r2, #36	; 0x24
 800bec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bed2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fa faad 	bl	8006434 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	4613      	mov	r3, r2
 800bf16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	d17c      	bne.n	800c022 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <HAL_UART_Transmit+0x2c>
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e075      	b.n	800c024 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <HAL_UART_Transmit+0x3e>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e06e      	b.n	800c024 <HAL_UART_Transmit+0x11c>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2221      	movs	r2, #33	; 0x21
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf5c:	f7fb faba 	bl	80074d4 <HAL_GetTick>
 800bf60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	88fa      	ldrh	r2, [r7, #6]
 800bf66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	88fa      	ldrh	r2, [r7, #6]
 800bf6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf76:	d108      	bne.n	800bf8a <HAL_UART_Transmit+0x82>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d104      	bne.n	800bf8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	61bb      	str	r3, [r7, #24]
 800bf88:	e003      	b.n	800bf92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bf9a:	e02a      	b.n	800bff2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2180      	movs	r1, #128	; 0x80
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 fd03 	bl	800c9b2 <UART_WaitOnFlagUntilTimeout>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e036      	b.n	800c024 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	3302      	adds	r3, #2
 800bfd0:	61bb      	str	r3, [r7, #24]
 800bfd2:	e007      	b.n	800bfe4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	781a      	ldrb	r2, [r3, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	3b01      	subs	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1cf      	bne.n	800bf9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2200      	movs	r2, #0
 800c004:	2140      	movs	r1, #64	; 0x40
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f000 fcd3 	bl	800c9b2 <UART_WaitOnFlagUntilTimeout>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e006      	b.n	800c024 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2220      	movs	r2, #32
 800c01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e000      	b.n	800c024 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c022:	2302      	movs	r3, #2
  }
}
 800c024:	4618      	mov	r0, r3
 800c026:	3720      	adds	r7, #32
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08c      	sub	sp, #48	; 0x30
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c040:	b2db      	uxtb	r3, r3
 800c042:	2b20      	cmp	r3, #32
 800c044:	d165      	bne.n	800c112 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <HAL_UART_Transmit_DMA+0x26>
 800c04c:	88fb      	ldrh	r3, [r7, #6]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e05e      	b.n	800c114 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d101      	bne.n	800c064 <HAL_UART_Transmit_DMA+0x38>
 800c060:	2302      	movs	r3, #2
 800c062:	e057      	b.n	800c114 <HAL_UART_Transmit_DMA+0xe8>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	88fa      	ldrh	r2, [r7, #6]
 800c076:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	88fa      	ldrh	r2, [r7, #6]
 800c07c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2221      	movs	r2, #33	; 0x21
 800c088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c090:	4a22      	ldr	r2, [pc, #136]	; (800c11c <HAL_UART_Transmit_DMA+0xf0>)
 800c092:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	4a21      	ldr	r2, [pc, #132]	; (800c120 <HAL_UART_Transmit_DMA+0xf4>)
 800c09a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	4a20      	ldr	r2, [pc, #128]	; (800c124 <HAL_UART_Transmit_DMA+0xf8>)
 800c0a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	6819      	ldr	r1, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	f7fc f896 	bl	80081f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c0d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3314      	adds	r3, #20
 800c0e0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	617b      	str	r3, [r7, #20]
   return(result);
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3314      	adds	r3, #20
 800c0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c0fc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6a39      	ldr	r1, [r7, #32]
 800c100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	61fb      	str	r3, [r7, #28]
   return(result);
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e5      	bne.n	800c0da <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	e000      	b.n	800c114 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c112:	2302      	movs	r3, #2
  }
}
 800c114:	4618      	mov	r0, r3
 800c116:	3730      	adds	r7, #48	; 0x30
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0800c70d 	.word	0x0800c70d
 800c120:	0800c7a7 	.word	0x0800c7a7
 800c124:	0800c91f 	.word	0x0800c91f

0800c128 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	4613      	mov	r3, r2
 800c134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d11d      	bne.n	800c17e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <HAL_UART_Receive_DMA+0x26>
 800c148:	88fb      	ldrh	r3, [r7, #6]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e016      	b.n	800c180 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d101      	bne.n	800c160 <HAL_UART_Receive_DMA+0x38>
 800c15c:	2302      	movs	r3, #2
 800c15e:	e00f      	b.n	800c180 <HAL_UART_Receive_DMA+0x58>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c16e:	88fb      	ldrh	r3, [r7, #6]
 800c170:	461a      	mov	r2, r3
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 fc8b 	bl	800ca90 <UART_Start_Receive_DMA>
 800c17a:	4603      	mov	r3, r0
 800c17c:	e000      	b.n	800c180 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c17e:	2302      	movs	r3, #2
  }
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b0ba      	sub	sp, #232	; 0xe8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1be:	f003 030f 	and.w	r3, r3, #15
 800c1c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c1c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10f      	bne.n	800c1ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <HAL_UART_IRQHandler+0x66>
 800c1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fdf7 	bl	800cdda <UART_Receive_IT>
      return;
 800c1ec:	e256      	b.n	800c69c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c1ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 80de 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x22c>
 800c1f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80d1 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <HAL_UART_IRQHandler+0xae>
 800c21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c226:	2b00      	cmp	r3, #0
 800c228:	d005      	beq.n	800c236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	f043 0201 	orr.w	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c23a:	f003 0304 	and.w	r3, r3, #4
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00b      	beq.n	800c25a <HAL_UART_IRQHandler+0xd2>
 800c242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d005      	beq.n	800c25a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	f043 0202 	orr.w	r2, r3, #2
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <HAL_UART_IRQHandler+0xf6>
 800c266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d005      	beq.n	800c27e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c276:	f043 0204 	orr.w	r2, r3, #4
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c282:	f003 0308 	and.w	r3, r3, #8
 800c286:	2b00      	cmp	r3, #0
 800c288:	d011      	beq.n	800c2ae <HAL_UART_IRQHandler+0x126>
 800c28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d105      	bne.n	800c2a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d005      	beq.n	800c2ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	f043 0208 	orr.w	r2, r3, #8
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 81ed 	beq.w	800c692 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2bc:	f003 0320 	and.w	r3, r3, #32
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d008      	beq.n	800c2d6 <HAL_UART_IRQHandler+0x14e>
 800c2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fd82 	bl	800cdda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e0:	2b40      	cmp	r3, #64	; 0x40
 800c2e2:	bf0c      	ite	eq
 800c2e4:	2301      	moveq	r3, #1
 800c2e6:	2300      	movne	r3, #0
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f2:	f003 0308 	and.w	r3, r3, #8
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d103      	bne.n	800c302 <HAL_UART_IRQHandler+0x17a>
 800c2fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d04f      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fc8a 	bl	800cc1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d141      	bne.n	800c39a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3314      	adds	r3, #20
 800c31c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c32c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3314      	adds	r3, #20
 800c33e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c34e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c35a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1d9      	bne.n	800c316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c366:	2b00      	cmp	r3, #0
 800c368:	d013      	beq.n	800c392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36e:	4a7d      	ldr	r2, [pc, #500]	; (800c564 <HAL_UART_IRQHandler+0x3dc>)
 800c370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	4618      	mov	r0, r3
 800c378:	f7fc f804 	bl	8008384 <HAL_DMA_Abort_IT>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d016      	beq.n	800c3b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c390:	e00e      	b.n	800c3b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f9a4 	bl	800c6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c398:	e00a      	b.n	800c3b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f9a0 	bl	800c6e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a0:	e006      	b.n	800c3b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f99c 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c3ae:	e170      	b.n	800c692 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b0:	bf00      	nop
    return;
 800c3b2:	e16e      	b.n	800c692 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	f040 814a 	bne.w	800c652 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	f003 0310 	and.w	r3, r3, #16
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 8143 	beq.w	800c652 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d0:	f003 0310 	and.w	r3, r3, #16
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 813c 	beq.w	800c652 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60bb      	str	r3, [r7, #8]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	60bb      	str	r3, [r7, #8]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	60bb      	str	r3, [r7, #8]
 800c3ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fa:	2b40      	cmp	r3, #64	; 0x40
 800c3fc:	f040 80b4 	bne.w	800c568 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c40c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 8140 	beq.w	800c696 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c41a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c41e:	429a      	cmp	r2, r3
 800c420:	f080 8139 	bcs.w	800c696 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c42a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c430:	69db      	ldr	r3, [r3, #28]
 800c432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c436:	f000 8088 	beq.w	800c54a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	330c      	adds	r3, #12
 800c440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	330c      	adds	r3, #12
 800c462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c46a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c476:	e841 2300 	strex	r3, r2, [r1]
 800c47a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c47e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1d9      	bne.n	800c43a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3314      	adds	r3, #20
 800c48c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c490:	e853 3f00 	ldrex	r3, [r3]
 800c494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c498:	f023 0301 	bic.w	r3, r3, #1
 800c49c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1e1      	bne.n	800c486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3314      	adds	r3, #20
 800c4c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4cc:	e853 3f00 	ldrex	r3, [r3]
 800c4d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3314      	adds	r3, #20
 800c4e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c4ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c4f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e3      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	330c      	adds	r3, #12
 800c50e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51a:	f023 0310 	bic.w	r3, r3, #16
 800c51e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	330c      	adds	r3, #12
 800c528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c52c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c52e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e3      	bne.n	800c508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	4618      	mov	r0, r3
 800c546:	f7fb fead 	bl	80082a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c552:	b29b      	uxth	r3, r3
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	b29b      	uxth	r3, r3
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f8ca 	bl	800c6f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c560:	e099      	b.n	800c696 <HAL_UART_IRQHandler+0x50e>
 800c562:	bf00      	nop
 800c564:	0800cce3 	.word	0x0800cce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c570:	b29b      	uxth	r3, r3
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 808b 	beq.w	800c69a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8086 	beq.w	800c69a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	330c      	adds	r3, #12
 800c594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	e853 3f00 	ldrex	r3, [r3]
 800c59c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	330c      	adds	r3, #12
 800c5ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c5b2:	647a      	str	r2, [r7, #68]	; 0x44
 800c5b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5ba:	e841 2300 	strex	r3, r2, [r1]
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1e3      	bne.n	800c58e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3314      	adds	r3, #20
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3314      	adds	r3, #20
 800c5e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c5ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5f2:	e841 2300 	strex	r3, r2, [r1]
 800c5f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1e3      	bne.n	800c5c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2220      	movs	r2, #32
 800c602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	330c      	adds	r3, #12
 800c612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f023 0310 	bic.w	r3, r3, #16
 800c622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	330c      	adds	r3, #12
 800c62c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c630:	61fa      	str	r2, [r7, #28]
 800c632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c634:	69b9      	ldr	r1, [r7, #24]
 800c636:	69fa      	ldr	r2, [r7, #28]
 800c638:	e841 2300 	strex	r3, r2, [r1]
 800c63c:	617b      	str	r3, [r7, #20]
   return(result);
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e3      	bne.n	800c60c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f852 	bl	800c6f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c650:	e023      	b.n	800c69a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d009      	beq.n	800c672 <HAL_UART_IRQHandler+0x4ea>
 800c65e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fb4d 	bl	800cd0a <UART_Transmit_IT>
    return;
 800c670:	e014      	b.n	800c69c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00e      	beq.n	800c69c <HAL_UART_IRQHandler+0x514>
 800c67e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d008      	beq.n	800c69c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fb8d 	bl	800cdaa <UART_EndTransmit_IT>
    return;
 800c690:	e004      	b.n	800c69c <HAL_UART_IRQHandler+0x514>
    return;
 800c692:	bf00      	nop
 800c694:	e002      	b.n	800c69c <HAL_UART_IRQHandler+0x514>
      return;
 800c696:	bf00      	nop
 800c698:	e000      	b.n	800c69c <HAL_UART_IRQHandler+0x514>
      return;
 800c69a:	bf00      	nop
  }
}
 800c69c:	37e8      	adds	r7, #232	; 0xe8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop

0800c6a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b090      	sub	sp, #64	; 0x40
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c724:	2b00      	cmp	r3, #0
 800c726:	d137      	bne.n	800c798 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72a:	2200      	movs	r2, #0
 800c72c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3314      	adds	r3, #20
 800c734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	623b      	str	r3, [r7, #32]
   return(result);
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c744:	63bb      	str	r3, [r7, #56]	; 0x38
 800c746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3314      	adds	r3, #20
 800c74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c74e:	633a      	str	r2, [r7, #48]	; 0x30
 800c750:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e5      	bne.n	800c72e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	330c      	adds	r3, #12
 800c768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	60fb      	str	r3, [r7, #12]
   return(result);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c778:	637b      	str	r3, [r7, #52]	; 0x34
 800c77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	330c      	adds	r3, #12
 800c780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c782:	61fa      	str	r2, [r7, #28]
 800c784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	69b9      	ldr	r1, [r7, #24]
 800c788:	69fa      	ldr	r2, [r7, #28]
 800c78a:	e841 2300 	strex	r3, r2, [r1]
 800c78e:	617b      	str	r3, [r7, #20]
   return(result);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1e5      	bne.n	800c762 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c796:	e002      	b.n	800c79e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c798:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c79a:	f7ff ff83 	bl	800c6a4 <HAL_UART_TxCpltCallback>
}
 800c79e:	bf00      	nop
 800c7a0:	3740      	adds	r7, #64	; 0x40
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f7ff ff7f 	bl	800c6b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ba:	bf00      	nop
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b09c      	sub	sp, #112	; 0x70
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d172      	bne.n	800c8c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c7de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	330c      	adds	r3, #12
 800c7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ee:	e853 3f00 	ldrex	r3, [r3]
 800c7f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	330c      	adds	r3, #12
 800c802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c804:	65ba      	str	r2, [r7, #88]	; 0x58
 800c806:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c80a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c80c:	e841 2300 	strex	r3, r2, [r1]
 800c810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1e5      	bne.n	800c7e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3314      	adds	r3, #20
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	e853 3f00 	ldrex	r3, [r3]
 800c826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	f023 0301 	bic.w	r3, r3, #1
 800c82e:	667b      	str	r3, [r7, #100]	; 0x64
 800c830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3314      	adds	r3, #20
 800c836:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c838:	647a      	str	r2, [r7, #68]	; 0x44
 800c83a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c83e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c840:	e841 2300 	strex	r3, r2, [r1]
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1e5      	bne.n	800c818 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3314      	adds	r3, #20
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	623b      	str	r3, [r7, #32]
   return(result);
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c862:	663b      	str	r3, [r7, #96]	; 0x60
 800c864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3314      	adds	r3, #20
 800c86a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c86c:	633a      	str	r2, [r7, #48]	; 0x30
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e5      	bne.n	800c84c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c882:	2220      	movs	r2, #32
 800c884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d119      	bne.n	800c8c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	330c      	adds	r3, #12
 800c896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	e853 3f00 	ldrex	r3, [r3]
 800c89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 0310 	bic.w	r3, r3, #16
 800c8a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	330c      	adds	r3, #12
 800c8ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8b0:	61fa      	str	r2, [r7, #28]
 800c8b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b4:	69b9      	ldr	r1, [r7, #24]
 800c8b6:	69fa      	ldr	r2, [r7, #28]
 800c8b8:	e841 2300 	strex	r3, r2, [r1]
 800c8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e5      	bne.n	800c890 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d106      	bne.n	800c8da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8d4:	f7ff ff0e 	bl	800c6f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8d8:	e002      	b.n	800c8e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c8da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8dc:	f7fa fb56 	bl	8006f8c <HAL_UART_RxCpltCallback>
}
 800c8e0:	bf00      	nop
 800c8e2:	3770      	adds	r7, #112	; 0x70
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d108      	bne.n	800c910 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c902:	085b      	lsrs	r3, r3, #1
 800c904:	b29b      	uxth	r3, r3
 800c906:	4619      	mov	r1, r3
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7ff fef3 	bl	800c6f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c90e:	e002      	b.n	800c916 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f7ff fedb 	bl	800c6cc <HAL_UART_RxHalfCpltCallback>
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c93a:	2b80      	cmp	r3, #128	; 0x80
 800c93c:	bf0c      	ite	eq
 800c93e:	2301      	moveq	r3, #1
 800c940:	2300      	movne	r3, #0
 800c942:	b2db      	uxtb	r3, r3
 800c944:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b21      	cmp	r3, #33	; 0x21
 800c950:	d108      	bne.n	800c964 <UART_DMAError+0x46>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c95e:	68b8      	ldr	r0, [r7, #8]
 800c960:	f000 f934 	bl	800cbcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	bf0c      	ite	eq
 800c972:	2301      	moveq	r3, #1
 800c974:	2300      	movne	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b22      	cmp	r3, #34	; 0x22
 800c984:	d108      	bne.n	800c998 <UART_DMAError+0x7a>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d005      	beq.n	800c998 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c992:	68b8      	ldr	r0, [r7, #8]
 800c994:	f000 f942 	bl	800cc1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99c:	f043 0210 	orr.w	r2, r3, #16
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9a4:	68b8      	ldr	r0, [r7, #8]
 800c9a6:	f7ff fe9b 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b090      	sub	sp, #64	; 0x40
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	60f8      	str	r0, [r7, #12]
 800c9ba:	60b9      	str	r1, [r7, #8]
 800c9bc:	603b      	str	r3, [r7, #0]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9c2:	e050      	b.n	800ca66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ca:	d04c      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d007      	beq.n	800c9e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9d2:	f7fa fd7f 	bl	80074d4 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d241      	bcs.n	800ca66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	330c      	adds	r3, #12
 800ca00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca02:	637a      	str	r2, [r7, #52]	; 0x34
 800ca04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca0a:	e841 2300 	strex	r3, r2, [r1]
 800ca0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e5      	bne.n	800c9e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3314      	adds	r3, #20
 800ca1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	e853 3f00 	ldrex	r3, [r3]
 800ca24:	613b      	str	r3, [r7, #16]
   return(result);
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3314      	adds	r3, #20
 800ca34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca36:	623a      	str	r2, [r7, #32]
 800ca38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3a:	69f9      	ldr	r1, [r7, #28]
 800ca3c:	6a3a      	ldr	r2, [r7, #32]
 800ca3e:	e841 2300 	strex	r3, r2, [r1]
 800ca42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1e5      	bne.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e00f      	b.n	800ca86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4013      	ands	r3, r2
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	bf0c      	ite	eq
 800ca76:	2301      	moveq	r3, #1
 800ca78:	2300      	movne	r3, #0
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d09f      	beq.n	800c9c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3740      	adds	r7, #64	; 0x40
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b098      	sub	sp, #96	; 0x60
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	88fa      	ldrh	r2, [r7, #6]
 800caa8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2222      	movs	r2, #34	; 0x22
 800cab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	4a40      	ldr	r2, [pc, #256]	; (800cbc0 <UART_Start_Receive_DMA+0x130>)
 800cabe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac4:	4a3f      	ldr	r2, [pc, #252]	; (800cbc4 <UART_Start_Receive_DMA+0x134>)
 800cac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	4a3e      	ldr	r2, [pc, #248]	; (800cbc8 <UART_Start_Receive_DMA+0x138>)
 800cace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad4:	2200      	movs	r2, #0
 800cad6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cad8:	f107 0308 	add.w	r3, r7, #8
 800cadc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	88fb      	ldrh	r3, [r7, #6]
 800caf0:	f7fb fb80 	bl	80081f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800caf4:	2300      	movs	r3, #0
 800caf6:	613b      	str	r3, [r7, #16]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	613b      	str	r3, [r7, #16]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	613b      	str	r3, [r7, #16]
 800cb08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d019      	beq.n	800cb4e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	330c      	adds	r3, #12
 800cb20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb24:	e853 3f00 	ldrex	r3, [r3]
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb30:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	330c      	adds	r3, #12
 800cb38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cb3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb42:	e841 2300 	strex	r3, r2, [r1]
 800cb46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1e5      	bne.n	800cb1a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3314      	adds	r3, #20
 800cb54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	657b      	str	r3, [r7, #84]	; 0x54
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3314      	adds	r3, #20
 800cb6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb6e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb76:	e841 2300 	strex	r3, r2, [r1]
 800cb7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1e5      	bne.n	800cb4e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3314      	adds	r3, #20
 800cb88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	617b      	str	r3, [r7, #20]
   return(result);
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb98:	653b      	str	r3, [r7, #80]	; 0x50
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3314      	adds	r3, #20
 800cba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cba2:	627a      	str	r2, [r7, #36]	; 0x24
 800cba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	6a39      	ldr	r1, [r7, #32]
 800cba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e5      	bne.n	800cb82 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3760      	adds	r7, #96	; 0x60
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	0800c7c3 	.word	0x0800c7c3
 800cbc4:	0800c8e9 	.word	0x0800c8e9
 800cbc8:	0800c91f 	.word	0x0800c91f

0800cbcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b089      	sub	sp, #36	; 0x24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	330c      	adds	r3, #12
 800cbda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	e853 3f00 	ldrex	r3, [r3]
 800cbe2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbea:	61fb      	str	r3, [r7, #28]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	330c      	adds	r3, #12
 800cbf2:	69fa      	ldr	r2, [r7, #28]
 800cbf4:	61ba      	str	r2, [r7, #24]
 800cbf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf8:	6979      	ldr	r1, [r7, #20]
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	e841 2300 	strex	r3, r2, [r1]
 800cc00:	613b      	str	r3, [r7, #16]
   return(result);
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1e5      	bne.n	800cbd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cc10:	bf00      	nop
 800cc12:	3724      	adds	r7, #36	; 0x24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b095      	sub	sp, #84	; 0x54
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	330c      	adds	r3, #12
 800cc2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2e:	e853 3f00 	ldrex	r3, [r3]
 800cc32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	330c      	adds	r3, #12
 800cc42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc44:	643a      	str	r2, [r7, #64]	; 0x40
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc4c:	e841 2300 	strex	r3, r2, [r1]
 800cc50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1e5      	bne.n	800cc24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f023 0301 	bic.w	r3, r3, #1
 800cc6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3314      	adds	r3, #20
 800cc76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e5      	bne.n	800cc58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d119      	bne.n	800ccc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	330c      	adds	r3, #12
 800cc9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f023 0310 	bic.w	r3, r3, #16
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccb4:	61ba      	str	r2, [r7, #24]
 800ccb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6979      	ldr	r1, [r7, #20]
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2220      	movs	r2, #32
 800cccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ccd6:	bf00      	nop
 800ccd8:	3754      	adds	r7, #84	; 0x54
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7ff fcef 	bl	800c6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd02:	bf00      	nop
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b085      	sub	sp, #20
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b21      	cmp	r3, #33	; 0x21
 800cd1c:	d13e      	bne.n	800cd9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd26:	d114      	bne.n	800cd52 <UART_Transmit_IT+0x48>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d110      	bne.n	800cd52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a1b      	ldr	r3, [r3, #32]
 800cd34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	1c9a      	adds	r2, r3, #2
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	621a      	str	r2, [r3, #32]
 800cd50:	e008      	b.n	800cd64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	6211      	str	r1, [r2, #32]
 800cd5c:	781a      	ldrb	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	4619      	mov	r1, r3
 800cd72:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10f      	bne.n	800cd98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68da      	ldr	r2, [r3, #12]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68da      	ldr	r2, [r3, #12]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e000      	b.n	800cd9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd9c:	2302      	movs	r3, #2
  }
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68da      	ldr	r2, [r3, #12]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7ff fc6a 	bl	800c6a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b08c      	sub	sp, #48	; 0x30
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b22      	cmp	r3, #34	; 0x22
 800cdec:	f040 80ab 	bne.w	800cf46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf8:	d117      	bne.n	800ce2a <UART_Receive_IT+0x50>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d113      	bne.n	800ce2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce22:	1c9a      	adds	r2, r3, #2
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	629a      	str	r2, [r3, #40]	; 0x28
 800ce28:	e026      	b.n	800ce78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce30:	2300      	movs	r3, #0
 800ce32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3c:	d007      	beq.n	800ce4e <UART_Receive_IT+0x74>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10a      	bne.n	800ce5c <UART_Receive_IT+0x82>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	701a      	strb	r2, [r3, #0]
 800ce5a:	e008      	b.n	800ce6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	4619      	mov	r1, r3
 800ce86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d15a      	bne.n	800cf42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68da      	ldr	r2, [r3, #12]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f022 0220 	bic.w	r2, r2, #32
 800ce9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68da      	ldr	r2, [r3, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	695a      	ldr	r2, [r3, #20]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2220      	movs	r2, #32
 800cec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d135      	bne.n	800cf38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	330c      	adds	r3, #12
 800ced8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	613b      	str	r3, [r7, #16]
   return(result);
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f023 0310 	bic.w	r3, r3, #16
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	330c      	adds	r3, #12
 800cef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef2:	623a      	str	r2, [r7, #32]
 800cef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef6:	69f9      	ldr	r1, [r7, #28]
 800cef8:	6a3a      	ldr	r2, [r7, #32]
 800cefa:	e841 2300 	strex	r3, r2, [r1]
 800cefe:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1e5      	bne.n	800ced2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0310 	and.w	r3, r3, #16
 800cf10:	2b10      	cmp	r3, #16
 800cf12:	d10a      	bne.n	800cf2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff fbdf 	bl	800c6f4 <HAL_UARTEx_RxEventCallback>
 800cf36:	e002      	b.n	800cf3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7fa f827 	bl	8006f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e002      	b.n	800cf48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e000      	b.n	800cf48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cf46:	2302      	movs	r3, #2
  }
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3730      	adds	r7, #48	; 0x30
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf54:	b0c0      	sub	sp, #256	; 0x100
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf6c:	68d9      	ldr	r1, [r3, #12]
 800cf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	ea40 0301 	orr.w	r3, r0, r1
 800cf78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	431a      	orrs	r2, r3
 800cf88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cfa8:	f021 010c 	bic.w	r1, r1, #12
 800cfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfb6:	430b      	orrs	r3, r1
 800cfb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cfba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cfc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfca:	6999      	ldr	r1, [r3, #24]
 800cfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	ea40 0301 	orr.w	r3, r0, r1
 800cfd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	4b8f      	ldr	r3, [pc, #572]	; (800d21c <UART_SetConfig+0x2cc>)
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d005      	beq.n	800cff0 <UART_SetConfig+0xa0>
 800cfe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b8d      	ldr	r3, [pc, #564]	; (800d220 <UART_SetConfig+0x2d0>)
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d104      	bne.n	800cffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cff0:	f7fd f8ce 	bl	800a190 <HAL_RCC_GetPCLK2Freq>
 800cff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cff8:	e003      	b.n	800d002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cffa:	f7fd f8b5 	bl	800a168 <HAL_RCC_GetPCLK1Freq>
 800cffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d006:	69db      	ldr	r3, [r3, #28]
 800d008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d00c:	f040 810c 	bne.w	800d228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d014:	2200      	movs	r2, #0
 800d016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d01a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d01e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d022:	4622      	mov	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	1891      	adds	r1, r2, r2
 800d028:	65b9      	str	r1, [r7, #88]	; 0x58
 800d02a:	415b      	adcs	r3, r3
 800d02c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d02e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d032:	4621      	mov	r1, r4
 800d034:	eb12 0801 	adds.w	r8, r2, r1
 800d038:	4629      	mov	r1, r5
 800d03a:	eb43 0901 	adc.w	r9, r3, r1
 800d03e:	f04f 0200 	mov.w	r2, #0
 800d042:	f04f 0300 	mov.w	r3, #0
 800d046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d04a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d04e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d052:	4690      	mov	r8, r2
 800d054:	4699      	mov	r9, r3
 800d056:	4623      	mov	r3, r4
 800d058:	eb18 0303 	adds.w	r3, r8, r3
 800d05c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d060:	462b      	mov	r3, r5
 800d062:	eb49 0303 	adc.w	r3, r9, r3
 800d066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d07a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d07e:	460b      	mov	r3, r1
 800d080:	18db      	adds	r3, r3, r3
 800d082:	653b      	str	r3, [r7, #80]	; 0x50
 800d084:	4613      	mov	r3, r2
 800d086:	eb42 0303 	adc.w	r3, r2, r3
 800d08a:	657b      	str	r3, [r7, #84]	; 0x54
 800d08c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d094:	f7f3 ff76 	bl	8000f84 <__aeabi_uldivmod>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4b61      	ldr	r3, [pc, #388]	; (800d224 <UART_SetConfig+0x2d4>)
 800d09e:	fba3 2302 	umull	r2, r3, r3, r2
 800d0a2:	095b      	lsrs	r3, r3, #5
 800d0a4:	011c      	lsls	r4, r3, #4
 800d0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d0b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	1891      	adds	r1, r2, r2
 800d0be:	64b9      	str	r1, [r7, #72]	; 0x48
 800d0c0:	415b      	adcs	r3, r3
 800d0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d0c8:	4641      	mov	r1, r8
 800d0ca:	eb12 0a01 	adds.w	sl, r2, r1
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	eb43 0b01 	adc.w	fp, r3, r1
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	f04f 0300 	mov.w	r3, #0
 800d0dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0e8:	4692      	mov	sl, r2
 800d0ea:	469b      	mov	fp, r3
 800d0ec:	4643      	mov	r3, r8
 800d0ee:	eb1a 0303 	adds.w	r3, sl, r3
 800d0f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	eb4b 0303 	adc.w	r3, fp, r3
 800d0fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d10c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d114:	460b      	mov	r3, r1
 800d116:	18db      	adds	r3, r3, r3
 800d118:	643b      	str	r3, [r7, #64]	; 0x40
 800d11a:	4613      	mov	r3, r2
 800d11c:	eb42 0303 	adc.w	r3, r2, r3
 800d120:	647b      	str	r3, [r7, #68]	; 0x44
 800d122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d12a:	f7f3 ff2b 	bl	8000f84 <__aeabi_uldivmod>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4611      	mov	r1, r2
 800d134:	4b3b      	ldr	r3, [pc, #236]	; (800d224 <UART_SetConfig+0x2d4>)
 800d136:	fba3 2301 	umull	r2, r3, r3, r1
 800d13a:	095b      	lsrs	r3, r3, #5
 800d13c:	2264      	movs	r2, #100	; 0x64
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
 800d142:	1acb      	subs	r3, r1, r3
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d14a:	4b36      	ldr	r3, [pc, #216]	; (800d224 <UART_SetConfig+0x2d4>)
 800d14c:	fba3 2302 	umull	r2, r3, r3, r2
 800d150:	095b      	lsrs	r3, r3, #5
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d158:	441c      	add	r4, r3
 800d15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d16c:	4642      	mov	r2, r8
 800d16e:	464b      	mov	r3, r9
 800d170:	1891      	adds	r1, r2, r2
 800d172:	63b9      	str	r1, [r7, #56]	; 0x38
 800d174:	415b      	adcs	r3, r3
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d17c:	4641      	mov	r1, r8
 800d17e:	1851      	adds	r1, r2, r1
 800d180:	6339      	str	r1, [r7, #48]	; 0x30
 800d182:	4649      	mov	r1, r9
 800d184:	414b      	adcs	r3, r1
 800d186:	637b      	str	r3, [r7, #52]	; 0x34
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	f04f 0300 	mov.w	r3, #0
 800d190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d194:	4659      	mov	r1, fp
 800d196:	00cb      	lsls	r3, r1, #3
 800d198:	4651      	mov	r1, sl
 800d19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d19e:	4651      	mov	r1, sl
 800d1a0:	00ca      	lsls	r2, r1, #3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	460a      	mov	r2, r1
 800d1b4:	eb42 0303 	adc.w	r3, r2, r3
 800d1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d1c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d1cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	18db      	adds	r3, r3, r3
 800d1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	eb42 0303 	adc.w	r3, r2, r3
 800d1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d1e6:	f7f3 fecd 	bl	8000f84 <__aeabi_uldivmod>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4b0d      	ldr	r3, [pc, #52]	; (800d224 <UART_SetConfig+0x2d4>)
 800d1f0:	fba3 1302 	umull	r1, r3, r3, r2
 800d1f4:	095b      	lsrs	r3, r3, #5
 800d1f6:	2164      	movs	r1, #100	; 0x64
 800d1f8:	fb01 f303 	mul.w	r3, r1, r3
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	3332      	adds	r3, #50	; 0x32
 800d202:	4a08      	ldr	r2, [pc, #32]	; (800d224 <UART_SetConfig+0x2d4>)
 800d204:	fba2 2303 	umull	r2, r3, r2, r3
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	f003 0207 	and.w	r2, r3, #7
 800d20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4422      	add	r2, r4
 800d216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d218:	e105      	b.n	800d426 <UART_SetConfig+0x4d6>
 800d21a:	bf00      	nop
 800d21c:	40011000 	.word	0x40011000
 800d220:	40011400 	.word	0x40011400
 800d224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d22c:	2200      	movs	r2, #0
 800d22e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d23a:	4642      	mov	r2, r8
 800d23c:	464b      	mov	r3, r9
 800d23e:	1891      	adds	r1, r2, r2
 800d240:	6239      	str	r1, [r7, #32]
 800d242:	415b      	adcs	r3, r3
 800d244:	627b      	str	r3, [r7, #36]	; 0x24
 800d246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d24a:	4641      	mov	r1, r8
 800d24c:	1854      	adds	r4, r2, r1
 800d24e:	4649      	mov	r1, r9
 800d250:	eb43 0501 	adc.w	r5, r3, r1
 800d254:	f04f 0200 	mov.w	r2, #0
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	00eb      	lsls	r3, r5, #3
 800d25e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d262:	00e2      	lsls	r2, r4, #3
 800d264:	4614      	mov	r4, r2
 800d266:	461d      	mov	r5, r3
 800d268:	4643      	mov	r3, r8
 800d26a:	18e3      	adds	r3, r4, r3
 800d26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d270:	464b      	mov	r3, r9
 800d272:	eb45 0303 	adc.w	r3, r5, r3
 800d276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d296:	4629      	mov	r1, r5
 800d298:	008b      	lsls	r3, r1, #2
 800d29a:	4621      	mov	r1, r4
 800d29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	008a      	lsls	r2, r1, #2
 800d2a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d2a8:	f7f3 fe6c 	bl	8000f84 <__aeabi_uldivmod>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4b60      	ldr	r3, [pc, #384]	; (800d434 <UART_SetConfig+0x4e4>)
 800d2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800d2b6:	095b      	lsrs	r3, r3, #5
 800d2b8:	011c      	lsls	r4, r3, #4
 800d2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d2c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	464b      	mov	r3, r9
 800d2d0:	1891      	adds	r1, r2, r2
 800d2d2:	61b9      	str	r1, [r7, #24]
 800d2d4:	415b      	adcs	r3, r3
 800d2d6:	61fb      	str	r3, [r7, #28]
 800d2d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2dc:	4641      	mov	r1, r8
 800d2de:	1851      	adds	r1, r2, r1
 800d2e0:	6139      	str	r1, [r7, #16]
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	414b      	adcs	r3, r1
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	f04f 0200 	mov.w	r2, #0
 800d2ec:	f04f 0300 	mov.w	r3, #0
 800d2f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2f4:	4659      	mov	r1, fp
 800d2f6:	00cb      	lsls	r3, r1, #3
 800d2f8:	4651      	mov	r1, sl
 800d2fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2fe:	4651      	mov	r1, sl
 800d300:	00ca      	lsls	r2, r1, #3
 800d302:	4610      	mov	r0, r2
 800d304:	4619      	mov	r1, r3
 800d306:	4603      	mov	r3, r0
 800d308:	4642      	mov	r2, r8
 800d30a:	189b      	adds	r3, r3, r2
 800d30c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d310:	464b      	mov	r3, r9
 800d312:	460a      	mov	r2, r1
 800d314:	eb42 0303 	adc.w	r3, r2, r3
 800d318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	67bb      	str	r3, [r7, #120]	; 0x78
 800d326:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d334:	4649      	mov	r1, r9
 800d336:	008b      	lsls	r3, r1, #2
 800d338:	4641      	mov	r1, r8
 800d33a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d33e:	4641      	mov	r1, r8
 800d340:	008a      	lsls	r2, r1, #2
 800d342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d346:	f7f3 fe1d 	bl	8000f84 <__aeabi_uldivmod>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4b39      	ldr	r3, [pc, #228]	; (800d434 <UART_SetConfig+0x4e4>)
 800d350:	fba3 1302 	umull	r1, r3, r3, r2
 800d354:	095b      	lsrs	r3, r3, #5
 800d356:	2164      	movs	r1, #100	; 0x64
 800d358:	fb01 f303 	mul.w	r3, r1, r3
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	3332      	adds	r3, #50	; 0x32
 800d362:	4a34      	ldr	r2, [pc, #208]	; (800d434 <UART_SetConfig+0x4e4>)
 800d364:	fba2 2303 	umull	r2, r3, r2, r3
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d36e:	441c      	add	r4, r3
 800d370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d374:	2200      	movs	r2, #0
 800d376:	673b      	str	r3, [r7, #112]	; 0x70
 800d378:	677a      	str	r2, [r7, #116]	; 0x74
 800d37a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d37e:	4642      	mov	r2, r8
 800d380:	464b      	mov	r3, r9
 800d382:	1891      	adds	r1, r2, r2
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	415b      	adcs	r3, r3
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d38e:	4641      	mov	r1, r8
 800d390:	1851      	adds	r1, r2, r1
 800d392:	6039      	str	r1, [r7, #0]
 800d394:	4649      	mov	r1, r9
 800d396:	414b      	adcs	r3, r1
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	f04f 0200 	mov.w	r2, #0
 800d39e:	f04f 0300 	mov.w	r3, #0
 800d3a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d3a6:	4659      	mov	r1, fp
 800d3a8:	00cb      	lsls	r3, r1, #3
 800d3aa:	4651      	mov	r1, sl
 800d3ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d3b0:	4651      	mov	r1, sl
 800d3b2:	00ca      	lsls	r2, r1, #3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	4642      	mov	r2, r8
 800d3bc:	189b      	adds	r3, r3, r2
 800d3be:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3c0:	464b      	mov	r3, r9
 800d3c2:	460a      	mov	r2, r1
 800d3c4:	eb42 0303 	adc.w	r3, r2, r3
 800d3c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	663b      	str	r3, [r7, #96]	; 0x60
 800d3d4:	667a      	str	r2, [r7, #100]	; 0x64
 800d3d6:	f04f 0200 	mov.w	r2, #0
 800d3da:	f04f 0300 	mov.w	r3, #0
 800d3de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	008b      	lsls	r3, r1, #2
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3ec:	4641      	mov	r1, r8
 800d3ee:	008a      	lsls	r2, r1, #2
 800d3f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d3f4:	f7f3 fdc6 	bl	8000f84 <__aeabi_uldivmod>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	; (800d434 <UART_SetConfig+0x4e4>)
 800d3fe:	fba3 1302 	umull	r1, r3, r3, r2
 800d402:	095b      	lsrs	r3, r3, #5
 800d404:	2164      	movs	r1, #100	; 0x64
 800d406:	fb01 f303 	mul.w	r3, r1, r3
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	011b      	lsls	r3, r3, #4
 800d40e:	3332      	adds	r3, #50	; 0x32
 800d410:	4a08      	ldr	r2, [pc, #32]	; (800d434 <UART_SetConfig+0x4e4>)
 800d412:	fba2 2303 	umull	r2, r3, r2, r3
 800d416:	095b      	lsrs	r3, r3, #5
 800d418:	f003 020f 	and.w	r2, r3, #15
 800d41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4422      	add	r2, r4
 800d424:	609a      	str	r2, [r3, #8]
}
 800d426:	bf00      	nop
 800d428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d42c:	46bd      	mov	sp, r7
 800d42e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d432:	bf00      	nop
 800d434:	51eb851f 	.word	0x51eb851f

0800d438 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d43c:	4904      	ldr	r1, [pc, #16]	; (800d450 <MX_FATFS_Init+0x18>)
 800d43e:	4805      	ldr	r0, [pc, #20]	; (800d454 <MX_FATFS_Init+0x1c>)
 800d440:	f003 fa2c 	bl	801089c <FATFS_LinkDriver>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <MX_FATFS_Init+0x20>)
 800d44a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d44c:	bf00      	nop
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	2000472c 	.word	0x2000472c
 800d454:	20000018 	.word	0x20000018
 800d458:	20004728 	.word	0x20004728

0800d45c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d460:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d462:	4618      	mov	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f6 fb8b 	bl	8003b94 <SD_disk_initialize>
 800d47e:	4603      	mov	r3, r0
 800d480:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b082      	sub	sp, #8
 800d48e:	af00      	add	r7, sp, #0
 800d490:	4603      	mov	r3, r0
 800d492:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status (pdrv);
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	4618      	mov	r0, r3
 800d498:	f7f6 fc66 	bl	8003d68 <SD_disk_status>
 800d49c:	4603      	mov	r3, r0
 800d49e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800d4b8:	7bf8      	ldrb	r0, [r7, #15]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	f7f6 fc68 	bl	8003d94 <SD_disk_read>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
 800d4da:	603b      	str	r3, [r7, #0]
 800d4dc:	4603      	mov	r3, r0
 800d4de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d4e0:	7bf8      	ldrb	r0, [r7, #15]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	f7f6 fcbe 	bl	8003e68 <SD_disk_write>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	603a      	str	r2, [r7, #0]
 800d502:	71fb      	strb	r3, [r7, #7]
 800d504:	460b      	mov	r3, r1
 800d506:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	79b9      	ldrb	r1, [r7, #6]
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f6 fd2e 	bl	8003f70 <SD_disk_ioctl>
 800d514:	4603      	mov	r3, r0
 800d516:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	4a08      	ldr	r2, [pc, #32]	; (800d550 <disk_status+0x30>)
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4413      	add	r3, r2
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	79fa      	ldrb	r2, [r7, #7]
 800d538:	4905      	ldr	r1, [pc, #20]	; (800d550 <disk_status+0x30>)
 800d53a:	440a      	add	r2, r1
 800d53c:	7a12      	ldrb	r2, [r2, #8]
 800d53e:	4610      	mov	r0, r2
 800d540:	4798      	blx	r3
 800d542:	4603      	mov	r3, r0
 800d544:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20004958 	.word	0x20004958

0800d554 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d562:	79fb      	ldrb	r3, [r7, #7]
 800d564:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <disk_initialize+0x48>)
 800d566:	5cd3      	ldrb	r3, [r2, r3]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d111      	bne.n	800d590 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	4a0b      	ldr	r2, [pc, #44]	; (800d59c <disk_initialize+0x48>)
 800d570:	2101      	movs	r1, #1
 800d572:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <disk_initialize+0x48>)
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	79fa      	ldrb	r2, [r7, #7]
 800d582:	4906      	ldr	r1, [pc, #24]	; (800d59c <disk_initialize+0x48>)
 800d584:	440a      	add	r2, r1
 800d586:	7a12      	ldrb	r2, [r2, #8]
 800d588:	4610      	mov	r0, r2
 800d58a:	4798      	blx	r3
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d590:	7bfb      	ldrb	r3, [r7, #15]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20004958 	.word	0x20004958

0800d5a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d5a0:	b590      	push	{r4, r7, lr}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	607a      	str	r2, [r7, #4]
 800d5aa:	603b      	str	r3, [r7, #0]
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	4a0a      	ldr	r2, [pc, #40]	; (800d5dc <disk_read+0x3c>)
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	689c      	ldr	r4, [r3, #8]
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	4a07      	ldr	r2, [pc, #28]	; (800d5dc <disk_read+0x3c>)
 800d5c0:	4413      	add	r3, r2
 800d5c2:	7a18      	ldrb	r0, [r3, #8]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	68b9      	ldr	r1, [r7, #8]
 800d5ca:	47a0      	blx	r4
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd90      	pop	{r4, r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20004958 	.word	0x20004958

0800d5e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b087      	sub	sp, #28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
 800d5f2:	4a0a      	ldr	r2, [pc, #40]	; (800d61c <disk_write+0x3c>)
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	68dc      	ldr	r4, [r3, #12]
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	4a07      	ldr	r2, [pc, #28]	; (800d61c <disk_write+0x3c>)
 800d600:	4413      	add	r3, r2
 800d602:	7a18      	ldrb	r0, [r3, #8]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	47a0      	blx	r4
 800d60c:	4603      	mov	r3, r0
 800d60e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d610:	7dfb      	ldrb	r3, [r7, #23]
}
 800d612:	4618      	mov	r0, r3
 800d614:	371c      	adds	r7, #28
 800d616:	46bd      	mov	sp, r7
 800d618:	bd90      	pop	{r4, r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20004958 	.word	0x20004958

0800d620 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	4603      	mov	r3, r0
 800d628:	603a      	str	r2, [r7, #0]
 800d62a:	71fb      	strb	r3, [r7, #7]
 800d62c:	460b      	mov	r3, r1
 800d62e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	4a09      	ldr	r2, [pc, #36]	; (800d658 <disk_ioctl+0x38>)
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	79fa      	ldrb	r2, [r7, #7]
 800d63e:	4906      	ldr	r1, [pc, #24]	; (800d658 <disk_ioctl+0x38>)
 800d640:	440a      	add	r2, r1
 800d642:	7a10      	ldrb	r0, [r2, #8]
 800d644:	79b9      	ldrb	r1, [r7, #6]
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	4798      	blx	r3
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20004958 	.word	0x20004958

0800d65c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	3301      	adds	r3, #1
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d66c:	89fb      	ldrh	r3, [r7, #14]
 800d66e:	021b      	lsls	r3, r3, #8
 800d670:	b21a      	sxth	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	b21b      	sxth	r3, r3
 800d678:	4313      	orrs	r3, r2
 800d67a:	b21b      	sxth	r3, r3
 800d67c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d67e:	89fb      	ldrh	r3, [r7, #14]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3303      	adds	r3, #3
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	3202      	adds	r2, #2
 800d6a4:	7812      	ldrb	r2, [r2, #0]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	021b      	lsls	r3, r3, #8
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	3201      	adds	r2, #1
 800d6b2:	7812      	ldrb	r2, [r2, #0]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	021b      	lsls	r3, r3, #8
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	7812      	ldrb	r2, [r2, #0]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	460b      	mov	r3, r1
 800d6dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	887a      	ldrh	r2, [r7, #2]
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	701a      	strb	r2, [r3, #0]
 800d6ea:	887b      	ldrh	r3, [r7, #2]
 800d6ec:	0a1b      	lsrs	r3, r3, #8
 800d6ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	607a      	str	r2, [r7, #4]
 800d6f6:	887a      	ldrh	r2, [r7, #2]
 800d6f8:	b2d2      	uxtb	r2, r2
 800d6fa:	701a      	strb	r2, [r3, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	b2d2      	uxtb	r2, r2
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	0a1b      	lsrs	r3, r3, #8
 800d722:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	607a      	str	r2, [r7, #4]
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	b2d2      	uxtb	r2, r2
 800d72e:	701a      	strb	r2, [r3, #0]
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	0a1b      	lsrs	r3, r3, #8
 800d734:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	b2d2      	uxtb	r2, r2
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	607a      	str	r2, [r7, #4]
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	b2d2      	uxtb	r2, r2
 800d752:	701a      	strb	r2, [r3, #0]
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d760:	b480      	push	{r7}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00d      	beq.n	800d796 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	1c53      	adds	r3, r2, #1
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	1c59      	adds	r1, r3, #1
 800d784:	6179      	str	r1, [r7, #20]
 800d786:	7812      	ldrb	r2, [r2, #0]
 800d788:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	607b      	str	r3, [r7, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1f1      	bne.n	800d77a <mem_cpy+0x1a>
	}
}
 800d796:	bf00      	nop
 800d798:	371c      	adds	r7, #28
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d7a2:	b480      	push	{r7}
 800d7a4:	b087      	sub	sp, #28
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	617a      	str	r2, [r7, #20]
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	607b      	str	r3, [r7, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1f3      	bne.n	800d7b2 <mem_set+0x10>
}
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
 800d7ce:	371c      	adds	r7, #28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d7d8:	b480      	push	{r7}
 800d7da:	b089      	sub	sp, #36	; 0x24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	61fb      	str	r3, [r7, #28]
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	1c5a      	adds	r2, r3, #1
 800d7f4:	61fa      	str	r2, [r7, #28]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	61ba      	str	r2, [r7, #24]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	1acb      	subs	r3, r1, r3
 800d804:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	3b01      	subs	r3, #1
 800d80a:	607b      	str	r3, [r7, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <mem_cmp+0x40>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d0eb      	beq.n	800d7f0 <mem_cmp+0x18>

	return r;
 800d818:	697b      	ldr	r3, [r7, #20]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3724      	adds	r7, #36	; 0x24
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d830:	e002      	b.n	800d838 <chk_chr+0x12>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	3301      	adds	r3, #1
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d005      	beq.n	800d84c <chk_chr+0x26>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	4293      	cmp	r3, r2
 800d84a:	d1f2      	bne.n	800d832 <chk_chr+0xc>
	return *str;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	781b      	ldrb	r3, [r3, #0]
}
 800d850:	4618      	mov	r0, r3
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d866:	2300      	movs	r3, #0
 800d868:	60bb      	str	r3, [r7, #8]
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	e029      	b.n	800d8c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d870:	4a27      	ldr	r2, [pc, #156]	; (800d910 <chk_lock+0xb4>)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	4413      	add	r3, r2
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d01d      	beq.n	800d8ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d87e:	4a24      	ldr	r2, [pc, #144]	; (800d910 <chk_lock+0xb4>)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	011b      	lsls	r3, r3, #4
 800d884:	4413      	add	r3, r2
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d116      	bne.n	800d8be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d890:	4a1f      	ldr	r2, [pc, #124]	; (800d910 <chk_lock+0xb4>)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	4413      	add	r3, r2
 800d898:	3304      	adds	r3, #4
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d10c      	bne.n	800d8be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8a4:	4a1a      	ldr	r2, [pc, #104]	; (800d910 <chk_lock+0xb4>)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	011b      	lsls	r3, r3, #4
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d102      	bne.n	800d8be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8b8:	e007      	b.n	800d8ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d9d2      	bls.n	800d870 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d109      	bne.n	800d8e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <chk_lock+0x80>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d101      	bne.n	800d8e0 <chk_lock+0x84>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e010      	b.n	800d902 <chk_lock+0xa6>
 800d8e0:	2312      	movs	r3, #18
 800d8e2:	e00e      	b.n	800d902 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d108      	bne.n	800d8fc <chk_lock+0xa0>
 800d8ea:	4a09      	ldr	r2, [pc, #36]	; (800d910 <chk_lock+0xb4>)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	011b      	lsls	r3, r3, #4
 800d8f0:	4413      	add	r3, r2
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8fa:	d101      	bne.n	800d900 <chk_lock+0xa4>
 800d8fc:	2310      	movs	r3, #16
 800d8fe:	e000      	b.n	800d902 <chk_lock+0xa6>
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	20004738 	.word	0x20004738

0800d914 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d91a:	2300      	movs	r3, #0
 800d91c:	607b      	str	r3, [r7, #4]
 800d91e:	e002      	b.n	800d926 <enq_lock+0x12>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3301      	adds	r3, #1
 800d924:	607b      	str	r3, [r7, #4]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d806      	bhi.n	800d93a <enq_lock+0x26>
 800d92c:	4a09      	ldr	r2, [pc, #36]	; (800d954 <enq_lock+0x40>)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	011b      	lsls	r3, r3, #4
 800d932:	4413      	add	r3, r2
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1f2      	bne.n	800d920 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	bf14      	ite	ne
 800d940:	2301      	movne	r3, #1
 800d942:	2300      	moveq	r3, #0
 800d944:	b2db      	uxtb	r3, r3
}
 800d946:	4618      	mov	r0, r3
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20004738 	.word	0x20004738

0800d958 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d962:	2300      	movs	r3, #0
 800d964:	60fb      	str	r3, [r7, #12]
 800d966:	e01f      	b.n	800d9a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d968:	4a41      	ldr	r2, [pc, #260]	; (800da70 <inc_lock+0x118>)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	4413      	add	r3, r2
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	429a      	cmp	r2, r3
 800d978:	d113      	bne.n	800d9a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d97a:	4a3d      	ldr	r2, [pc, #244]	; (800da70 <inc_lock+0x118>)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	011b      	lsls	r3, r3, #4
 800d980:	4413      	add	r3, r2
 800d982:	3304      	adds	r3, #4
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d109      	bne.n	800d9a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d98e:	4a38      	ldr	r2, [pc, #224]	; (800da70 <inc_lock+0x118>)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	011b      	lsls	r3, r3, #4
 800d994:	4413      	add	r3, r2
 800d996:	3308      	adds	r3, #8
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d006      	beq.n	800d9b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d9dc      	bls.n	800d968 <inc_lock+0x10>
 800d9ae:	e000      	b.n	800d9b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d9b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d132      	bne.n	800da1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	e002      	b.n	800d9c4 <inc_lock+0x6c>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d806      	bhi.n	800d9d8 <inc_lock+0x80>
 800d9ca:	4a29      	ldr	r2, [pc, #164]	; (800da70 <inc_lock+0x118>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	4413      	add	r3, r2
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1f2      	bne.n	800d9be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d101      	bne.n	800d9e2 <inc_lock+0x8a>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e040      	b.n	800da64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	4922      	ldr	r1, [pc, #136]	; (800da70 <inc_lock+0x118>)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	011b      	lsls	r3, r3, #4
 800d9ec:	440b      	add	r3, r1
 800d9ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	491e      	ldr	r1, [pc, #120]	; (800da70 <inc_lock+0x118>)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	011b      	lsls	r3, r3, #4
 800d9fa:	440b      	add	r3, r1
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	695a      	ldr	r2, [r3, #20]
 800da04:	491a      	ldr	r1, [pc, #104]	; (800da70 <inc_lock+0x118>)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	440b      	add	r3, r1
 800da0c:	3308      	adds	r3, #8
 800da0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da10:	4a17      	ldr	r2, [pc, #92]	; (800da70 <inc_lock+0x118>)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	011b      	lsls	r3, r3, #4
 800da16:	4413      	add	r3, r2
 800da18:	330c      	adds	r3, #12
 800da1a:	2200      	movs	r2, #0
 800da1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d009      	beq.n	800da38 <inc_lock+0xe0>
 800da24:	4a12      	ldr	r2, [pc, #72]	; (800da70 <inc_lock+0x118>)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	4413      	add	r3, r2
 800da2c:	330c      	adds	r3, #12
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <inc_lock+0xe0>
 800da34:	2300      	movs	r3, #0
 800da36:	e015      	b.n	800da64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d108      	bne.n	800da50 <inc_lock+0xf8>
 800da3e:	4a0c      	ldr	r2, [pc, #48]	; (800da70 <inc_lock+0x118>)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	011b      	lsls	r3, r3, #4
 800da44:	4413      	add	r3, r2
 800da46:	330c      	adds	r3, #12
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	3301      	adds	r3, #1
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	e001      	b.n	800da54 <inc_lock+0xfc>
 800da50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da54:	4906      	ldr	r1, [pc, #24]	; (800da70 <inc_lock+0x118>)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	011b      	lsls	r3, r3, #4
 800da5a:	440b      	add	r3, r1
 800da5c:	330c      	adds	r3, #12
 800da5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3301      	adds	r3, #1
}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	20004738 	.word	0x20004738

0800da74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3b01      	subs	r3, #1
 800da80:	607b      	str	r3, [r7, #4]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d825      	bhi.n	800dad4 <dec_lock+0x60>
		n = Files[i].ctr;
 800da88:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <dec_lock+0x74>)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	011b      	lsls	r3, r3, #4
 800da8e:	4413      	add	r3, r2
 800da90:	330c      	adds	r3, #12
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800da96:	89fb      	ldrh	r3, [r7, #14]
 800da98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da9c:	d101      	bne.n	800daa2 <dec_lock+0x2e>
 800da9e:	2300      	movs	r3, #0
 800daa0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800daa2:	89fb      	ldrh	r3, [r7, #14]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <dec_lock+0x3a>
 800daa8:	89fb      	ldrh	r3, [r7, #14]
 800daaa:	3b01      	subs	r3, #1
 800daac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800daae:	4a0e      	ldr	r2, [pc, #56]	; (800dae8 <dec_lock+0x74>)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	011b      	lsls	r3, r3, #4
 800dab4:	4413      	add	r3, r2
 800dab6:	330c      	adds	r3, #12
 800dab8:	89fa      	ldrh	r2, [r7, #14]
 800daba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dabc:	89fb      	ldrh	r3, [r7, #14]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d105      	bne.n	800dace <dec_lock+0x5a>
 800dac2:	4a09      	ldr	r2, [pc, #36]	; (800dae8 <dec_lock+0x74>)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	4413      	add	r3, r2
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	737b      	strb	r3, [r7, #13]
 800dad2:	e001      	b.n	800dad8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dad4:	2302      	movs	r3, #2
 800dad6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dad8:	7b7b      	ldrb	r3, [r7, #13]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	20004738 	.word	0x20004738

0800daec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800daf4:	2300      	movs	r3, #0
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	e010      	b.n	800db1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dafa:	4a0d      	ldr	r2, [pc, #52]	; (800db30 <clear_lock+0x44>)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	011b      	lsls	r3, r3, #4
 800db00:	4413      	add	r3, r2
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	429a      	cmp	r2, r3
 800db08:	d105      	bne.n	800db16 <clear_lock+0x2a>
 800db0a:	4a09      	ldr	r2, [pc, #36]	; (800db30 <clear_lock+0x44>)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	4413      	add	r3, r2
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d9eb      	bls.n	800dafa <clear_lock+0xe>
	}
}
 800db22:	bf00      	nop
 800db24:	bf00      	nop
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	20004738 	.word	0x20004738

0800db34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	78db      	ldrb	r3, [r3, #3]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d034      	beq.n	800dbb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7858      	ldrb	r0, [r3, #1]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db58:	2301      	movs	r3, #1
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	f7ff fd40 	bl	800d5e0 <disk_write>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <sync_window+0x38>
			res = FR_DISK_ERR;
 800db66:	2301      	movs	r3, #1
 800db68:	73fb      	strb	r3, [r7, #15]
 800db6a:	e022      	b.n	800dbb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	1ad2      	subs	r2, r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d217      	bcs.n	800dbb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	789b      	ldrb	r3, [r3, #2]
 800db86:	613b      	str	r3, [r7, #16]
 800db88:	e010      	b.n	800dbac <sync_window+0x78>
					wsect += fs->fsize;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	4413      	add	r3, r2
 800db92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7858      	ldrb	r0, [r3, #1]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db9e:	2301      	movs	r3, #1
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	f7ff fd1d 	bl	800d5e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	613b      	str	r3, [r7, #16]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d8eb      	bhi.n	800db8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d01b      	beq.n	800dc0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ffad 	bl	800db34 <sync_window>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d113      	bne.n	800dc0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7858      	ldrb	r0, [r3, #1]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbee:	2301      	movs	r3, #1
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	f7ff fcd5 	bl	800d5a0 <disk_read>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d004      	beq.n	800dc06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800dc00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7ff ff87 	bl	800db34 <sync_window>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d159      	bne.n	800dce4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d149      	bne.n	800dccc <sync_fs+0xb4>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	791b      	ldrb	r3, [r3, #4]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d145      	bne.n	800dccc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	899b      	ldrh	r3, [r3, #12]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	f7ff fda8 	bl	800d7a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3338      	adds	r3, #56	; 0x38
 800dc56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff fd37 	bl	800d6d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	3338      	adds	r3, #56	; 0x38
 800dc68:	4921      	ldr	r1, [pc, #132]	; (800dcf0 <sync_fs+0xd8>)
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff fd4c 	bl	800d708 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3338      	adds	r3, #56	; 0x38
 800dc74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc78:	491e      	ldr	r1, [pc, #120]	; (800dcf4 <sync_fs+0xdc>)
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff fd44 	bl	800d708 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3338      	adds	r3, #56	; 0x38
 800dc84:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	699b      	ldr	r3, [r3, #24]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4610      	mov	r0, r2
 800dc90:	f7ff fd3a 	bl	800d708 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3338      	adds	r3, #56	; 0x38
 800dc98:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	4619      	mov	r1, r3
 800dca2:	4610      	mov	r0, r2
 800dca4:	f7ff fd30 	bl	800d708 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcac:	1c5a      	adds	r2, r3, #1
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	7858      	ldrb	r0, [r3, #1]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f7ff fc8d 	bl	800d5e0 <disk_write>
			fs->fsi_flag = 0;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	785b      	ldrb	r3, [r3, #1]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff fca3 	bl	800d620 <disk_ioctl>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <sync_fs+0xcc>
 800dce0:	2301      	movs	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	41615252 	.word	0x41615252
 800dcf4:	61417272 	.word	0x61417272

0800dcf8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	3b02      	subs	r3, #2
 800dd06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	3b02      	subs	r3, #2
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d301      	bcc.n	800dd18 <clust2sect+0x20>
 800dd14:	2300      	movs	r3, #0
 800dd16:	e008      	b.n	800dd2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	895b      	ldrh	r3, [r3, #10]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	fb03 f202 	mul.w	r2, r3, r2
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd28:	4413      	add	r3, r2
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d904      	bls.n	800dd56 <get_fat+0x20>
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	683a      	ldr	r2, [r7, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d302      	bcc.n	800dd5c <get_fat+0x26>
		val = 1;	/* Internal error */
 800dd56:	2301      	movs	r3, #1
 800dd58:	617b      	str	r3, [r7, #20]
 800dd5a:	e0bb      	b.n	800ded4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	f000 8083 	beq.w	800de72 <get_fat+0x13c>
 800dd6c:	2b03      	cmp	r3, #3
 800dd6e:	f300 80a7 	bgt.w	800dec0 <get_fat+0x18a>
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d002      	beq.n	800dd7c <get_fat+0x46>
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d056      	beq.n	800de28 <get_fat+0xf2>
 800dd7a:	e0a1      	b.n	800dec0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	085b      	lsrs	r3, r3, #1
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	4413      	add	r3, r2
 800dd88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	899b      	ldrh	r3, [r3, #12]
 800dd92:	4619      	mov	r1, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6938      	ldr	r0, [r7, #16]
 800dda0:	f7ff ff0c 	bl	800dbbc <move_window>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f040 808d 	bne.w	800dec6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	60fa      	str	r2, [r7, #12]
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	8992      	ldrh	r2, [r2, #12]
 800ddb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddba:	fb01 f202 	mul.w	r2, r1, r2
 800ddbe:	1a9b      	subs	r3, r3, r2
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ddc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	899b      	ldrh	r3, [r3, #12]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddda:	4413      	add	r3, r2
 800dddc:	4619      	mov	r1, r3
 800ddde:	6938      	ldr	r0, [r7, #16]
 800dde0:	f7ff feec 	bl	800dbbc <move_window>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d16f      	bne.n	800deca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	899b      	ldrh	r3, [r3, #12]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddf6:	fb01 f202 	mul.w	r2, r1, r2
 800ddfa:	1a9b      	subs	r3, r3, r2
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	4413      	add	r3, r2
 800de00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de04:	021b      	lsls	r3, r3, #8
 800de06:	461a      	mov	r2, r3
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <get_fat+0xe8>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	091b      	lsrs	r3, r3, #4
 800de1c:	e002      	b.n	800de24 <get_fat+0xee>
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de24:	617b      	str	r3, [r7, #20]
			break;
 800de26:	e055      	b.n	800ded4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	899b      	ldrh	r3, [r3, #12]
 800de30:	085b      	lsrs	r3, r3, #1
 800de32:	b29b      	uxth	r3, r3
 800de34:	4619      	mov	r1, r3
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	fbb3 f3f1 	udiv	r3, r3, r1
 800de3c:	4413      	add	r3, r2
 800de3e:	4619      	mov	r1, r3
 800de40:	6938      	ldr	r0, [r7, #16]
 800de42:	f7ff febb 	bl	800dbbc <move_window>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d140      	bne.n	800dece <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	693a      	ldr	r2, [r7, #16]
 800de58:	8992      	ldrh	r2, [r2, #12]
 800de5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de5e:	fb00 f202 	mul.w	r2, r0, r2
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	440b      	add	r3, r1
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fbf8 	bl	800d65c <ld_word>
 800de6c:	4603      	mov	r3, r0
 800de6e:	617b      	str	r3, [r7, #20]
			break;
 800de70:	e030      	b.n	800ded4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	899b      	ldrh	r3, [r3, #12]
 800de7a:	089b      	lsrs	r3, r3, #2
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	4619      	mov	r1, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	fbb3 f3f1 	udiv	r3, r3, r1
 800de86:	4413      	add	r3, r2
 800de88:	4619      	mov	r1, r3
 800de8a:	6938      	ldr	r0, [r7, #16]
 800de8c:	f7ff fe96 	bl	800dbbc <move_window>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d11d      	bne.n	800ded2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	8992      	ldrh	r2, [r2, #12]
 800dea4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dea8:	fb00 f202 	mul.w	r2, r0, r2
 800deac:	1a9b      	subs	r3, r3, r2
 800deae:	440b      	add	r3, r1
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff fbeb 	bl	800d68c <ld_dword>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800debc:	617b      	str	r3, [r7, #20]
			break;
 800debe:	e009      	b.n	800ded4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dec0:	2301      	movs	r3, #1
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	e006      	b.n	800ded4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dec6:	bf00      	nop
 800dec8:	e004      	b.n	800ded4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800deca:	bf00      	nop
 800decc:	e002      	b.n	800ded4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dece:	bf00      	nop
 800ded0:	e000      	b.n	800ded4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ded2:	bf00      	nop
		}
	}

	return val;
 800ded4:	697b      	ldr	r3, [r7, #20]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dede:	b590      	push	{r4, r7, lr}
 800dee0:	b089      	sub	sp, #36	; 0x24
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800deea:	2302      	movs	r3, #2
 800deec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b01      	cmp	r3, #1
 800def2:	f240 8102 	bls.w	800e0fa <put_fat+0x21c>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	429a      	cmp	r2, r3
 800defe:	f080 80fc 	bcs.w	800e0fa <put_fat+0x21c>
		switch (fs->fs_type) {
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b03      	cmp	r3, #3
 800df08:	f000 80b6 	beq.w	800e078 <put_fat+0x19a>
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	f300 80fd 	bgt.w	800e10c <put_fat+0x22e>
 800df12:	2b01      	cmp	r3, #1
 800df14:	d003      	beq.n	800df1e <put_fat+0x40>
 800df16:	2b02      	cmp	r3, #2
 800df18:	f000 8083 	beq.w	800e022 <put_fat+0x144>
 800df1c:	e0f6      	b.n	800e10c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	61bb      	str	r3, [r7, #24]
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	085b      	lsrs	r3, r3, #1
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	4413      	add	r3, r2
 800df2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	899b      	ldrh	r3, [r3, #12]
 800df34:	4619      	mov	r1, r3
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	fbb3 f3f1 	udiv	r3, r3, r1
 800df3c:	4413      	add	r3, r2
 800df3e:	4619      	mov	r1, r3
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f7ff fe3b 	bl	800dbbc <move_window>
 800df46:	4603      	mov	r3, r0
 800df48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df4a:	7ffb      	ldrb	r3, [r7, #31]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f040 80d6 	bne.w	800e0fe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	61ba      	str	r2, [r7, #24]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	8992      	ldrh	r2, [r2, #12]
 800df62:	fbb3 f0f2 	udiv	r0, r3, r2
 800df66:	fb00 f202 	mul.w	r2, r0, r2
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	440b      	add	r3, r1
 800df6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00d      	beq.n	800df96 <put_fat+0xb8>
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	f003 030f 	and.w	r3, r3, #15
 800df84:	b25a      	sxtb	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	011b      	lsls	r3, r3, #4
 800df8c:	b25b      	sxtb	r3, r3
 800df8e:	4313      	orrs	r3, r2
 800df90:	b25b      	sxtb	r3, r3
 800df92:	b2db      	uxtb	r3, r3
 800df94:	e001      	b.n	800df9a <put_fat+0xbc>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	899b      	ldrh	r3, [r3, #12]
 800dfac:	4619      	mov	r1, r3
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff fdff 	bl	800dbbc <move_window>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfc2:	7ffb      	ldrb	r3, [r7, #31]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f040 809c 	bne.w	800e102 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	899b      	ldrh	r3, [r3, #12]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfdc:	fb00 f202 	mul.w	r2, r0, r2
 800dfe0:	1a9b      	subs	r3, r3, r2
 800dfe2:	440b      	add	r3, r1
 800dfe4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	f003 0301 	and.w	r3, r3, #1
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d003      	beq.n	800dff8 <put_fat+0x11a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	091b      	lsrs	r3, r3, #4
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	e00e      	b.n	800e016 <put_fat+0x138>
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b25b      	sxtb	r3, r3
 800dffe:	f023 030f 	bic.w	r3, r3, #15
 800e002:	b25a      	sxtb	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b25b      	sxtb	r3, r3
 800e00a:	f003 030f 	and.w	r3, r3, #15
 800e00e:	b25b      	sxtb	r3, r3
 800e010:	4313      	orrs	r3, r2
 800e012:	b25b      	sxtb	r3, r3
 800e014:	b2db      	uxtb	r3, r3
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	70da      	strb	r2, [r3, #3]
			break;
 800e020:	e074      	b.n	800e10c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	899b      	ldrh	r3, [r3, #12]
 800e02a:	085b      	lsrs	r3, r3, #1
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	4619      	mov	r1, r3
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	fbb3 f3f1 	udiv	r3, r3, r1
 800e036:	4413      	add	r3, r2
 800e038:	4619      	mov	r1, r3
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fdbe 	bl	800dbbc <move_window>
 800e040:	4603      	mov	r3, r0
 800e042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e044:	7ffb      	ldrb	r3, [r7, #31]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d15d      	bne.n	800e106 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	8992      	ldrh	r2, [r2, #12]
 800e058:	fbb3 f0f2 	udiv	r0, r3, r2
 800e05c:	fb00 f202 	mul.w	r2, r0, r2
 800e060:	1a9b      	subs	r3, r3, r2
 800e062:	440b      	add	r3, r1
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	b292      	uxth	r2, r2
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fb31 	bl	800d6d2 <st_word>
			fs->wflag = 1;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	70da      	strb	r2, [r3, #3]
			break;
 800e076:	e049      	b.n	800e10c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	899b      	ldrh	r3, [r3, #12]
 800e080:	089b      	lsrs	r3, r3, #2
 800e082:	b29b      	uxth	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	fbb3 f3f1 	udiv	r3, r3, r1
 800e08c:	4413      	add	r3, r2
 800e08e:	4619      	mov	r1, r3
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7ff fd93 	bl	800dbbc <move_window>
 800e096:	4603      	mov	r3, r0
 800e098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e09a:	7ffb      	ldrb	r3, [r7, #31]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d134      	bne.n	800e10a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	8992      	ldrh	r2, [r2, #12]
 800e0b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0b8:	fb00 f202 	mul.w	r2, r0, r2
 800e0bc:	1a9b      	subs	r3, r3, r2
 800e0be:	440b      	add	r3, r1
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff fae3 	bl	800d68c <ld_dword>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e0cc:	4323      	orrs	r3, r4
 800e0ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	8992      	ldrh	r2, [r2, #12]
 800e0de:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0e2:	fb00 f202 	mul.w	r2, r0, r2
 800e0e6:	1a9b      	subs	r3, r3, r2
 800e0e8:	440b      	add	r3, r1
 800e0ea:	6879      	ldr	r1, [r7, #4]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff fb0b 	bl	800d708 <st_dword>
			fs->wflag = 1;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	70da      	strb	r2, [r3, #3]
			break;
 800e0f8:	e008      	b.n	800e10c <put_fat+0x22e>
		}
	}
 800e0fa:	bf00      	nop
 800e0fc:	e006      	b.n	800e10c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e0fe:	bf00      	nop
 800e100:	e004      	b.n	800e10c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e102:	bf00      	nop
 800e104:	e002      	b.n	800e10c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e106:	bf00      	nop
 800e108:	e000      	b.n	800e10c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e10a:	bf00      	nop
	return res;
 800e10c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3724      	adds	r7, #36	; 0x24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd90      	pop	{r4, r7, pc}

0800e116 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b088      	sub	sp, #32
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	60f8      	str	r0, [r7, #12]
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e122:	2300      	movs	r3, #0
 800e124:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d904      	bls.n	800e13c <remove_chain+0x26>
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d301      	bcc.n	800e140 <remove_chain+0x2a>
 800e13c:	2302      	movs	r3, #2
 800e13e:	e04b      	b.n	800e1d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00c      	beq.n	800e160 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e146:	f04f 32ff 	mov.w	r2, #4294967295
 800e14a:	6879      	ldr	r1, [r7, #4]
 800e14c:	69b8      	ldr	r0, [r7, #24]
 800e14e:	f7ff fec6 	bl	800dede <put_fat>
 800e152:	4603      	mov	r3, r0
 800e154:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e156:	7ffb      	ldrb	r3, [r7, #31]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <remove_chain+0x4a>
 800e15c:	7ffb      	ldrb	r3, [r7, #31]
 800e15e:	e03b      	b.n	800e1d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e160:	68b9      	ldr	r1, [r7, #8]
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff fde7 	bl	800dd36 <get_fat>
 800e168:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d031      	beq.n	800e1d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <remove_chain+0x64>
 800e176:	2302      	movs	r3, #2
 800e178:	e02e      	b.n	800e1d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e180:	d101      	bne.n	800e186 <remove_chain+0x70>
 800e182:	2301      	movs	r3, #1
 800e184:	e028      	b.n	800e1d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e186:	2200      	movs	r2, #0
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	69b8      	ldr	r0, [r7, #24]
 800e18c:	f7ff fea7 	bl	800dede <put_fat>
 800e190:	4603      	mov	r3, r0
 800e192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e194:	7ffb      	ldrb	r3, [r7, #31]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <remove_chain+0x88>
 800e19a:	7ffb      	ldrb	r3, [r7, #31]
 800e19c:	e01c      	b.n	800e1d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	699a      	ldr	r2, [r3, #24]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	69db      	ldr	r3, [r3, #28]
 800e1a6:	3b02      	subs	r3, #2
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d20b      	bcs.n	800e1c4 <remove_chain+0xae>
			fs->free_clst++;
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	791b      	ldrb	r3, [r3, #4]
 800e1ba:	f043 0301 	orr.w	r3, r3, #1
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	69db      	ldr	r3, [r3, #28]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d3c6      	bcc.n	800e160 <remove_chain+0x4a>
 800e1d2:	e000      	b.n	800e1d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e1d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10d      	bne.n	800e212 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d004      	beq.n	800e20c <create_chain+0x2c>
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d31b      	bcc.n	800e244 <create_chain+0x64>
 800e20c:	2301      	movs	r3, #1
 800e20e:	61bb      	str	r3, [r7, #24]
 800e210:	e018      	b.n	800e244 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7ff fd8e 	bl	800dd36 <get_fat>
 800e21a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d801      	bhi.n	800e226 <create_chain+0x46>
 800e222:	2301      	movs	r3, #1
 800e224:	e070      	b.n	800e308 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22c:	d101      	bne.n	800e232 <create_chain+0x52>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	e06a      	b.n	800e308 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	69db      	ldr	r3, [r3, #28]
 800e236:	68fa      	ldr	r2, [r7, #12]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d201      	bcs.n	800e240 <create_chain+0x60>
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	e063      	b.n	800e308 <create_chain+0x128>
		scl = clst;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	3301      	adds	r3, #1
 800e24c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	69fa      	ldr	r2, [r7, #28]
 800e254:	429a      	cmp	r2, r3
 800e256:	d307      	bcc.n	800e268 <create_chain+0x88>
				ncl = 2;
 800e258:	2302      	movs	r3, #2
 800e25a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e25c:	69fa      	ldr	r2, [r7, #28]
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	429a      	cmp	r2, r3
 800e262:	d901      	bls.n	800e268 <create_chain+0x88>
 800e264:	2300      	movs	r3, #0
 800e266:	e04f      	b.n	800e308 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e268:	69f9      	ldr	r1, [r7, #28]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff fd63 	bl	800dd36 <get_fat>
 800e270:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00e      	beq.n	800e296 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d003      	beq.n	800e286 <create_chain+0xa6>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e284:	d101      	bne.n	800e28a <create_chain+0xaa>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	e03e      	b.n	800e308 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d1da      	bne.n	800e248 <create_chain+0x68>
 800e292:	2300      	movs	r3, #0
 800e294:	e038      	b.n	800e308 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e296:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e298:	f04f 32ff 	mov.w	r2, #4294967295
 800e29c:	69f9      	ldr	r1, [r7, #28]
 800e29e:	6938      	ldr	r0, [r7, #16]
 800e2a0:	f7ff fe1d 	bl	800dede <put_fat>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e2a8:	7dfb      	ldrb	r3, [r7, #23]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d109      	bne.n	800e2c2 <create_chain+0xe2>
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d006      	beq.n	800e2c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e2b4:	69fa      	ldr	r2, [r7, #28]
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6938      	ldr	r0, [r7, #16]
 800e2ba:	f7ff fe10 	bl	800dede <put_fat>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e2c2:	7dfb      	ldrb	r3, [r7, #23]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d116      	bne.n	800e2f6 <create_chain+0x116>
		fs->last_clst = ncl;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	69fa      	ldr	r2, [r7, #28]
 800e2cc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	699a      	ldr	r2, [r3, #24]
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	3b02      	subs	r3, #2
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d804      	bhi.n	800e2e6 <create_chain+0x106>
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	699b      	ldr	r3, [r3, #24]
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	791b      	ldrb	r3, [r3, #4]
 800e2ea:	f043 0301 	orr.w	r3, r3, #1
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	711a      	strb	r2, [r3, #4]
 800e2f4:	e007      	b.n	800e306 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d102      	bne.n	800e302 <create_chain+0x122>
 800e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e300:	e000      	b.n	800e304 <create_chain+0x124>
 800e302:	2301      	movs	r3, #1
 800e304:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e306:	69fb      	ldr	r3, [r7, #28]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e324:	3304      	adds	r3, #4
 800e326:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	461a      	mov	r2, r3
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	fbb3 f3f2 	udiv	r3, r3, r2
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	8952      	ldrh	r2, [r2, #10]
 800e338:	fbb3 f3f2 	udiv	r3, r3, r2
 800e33c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	1d1a      	adds	r2, r3, #4
 800e342:	613a      	str	r2, [r7, #16]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <clmt_clust+0x42>
 800e34e:	2300      	movs	r3, #0
 800e350:	e010      	b.n	800e374 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	429a      	cmp	r2, r3
 800e358:	d307      	bcc.n	800e36a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	1ad3      	subs	r3, r2, r3
 800e360:	617b      	str	r3, [r7, #20]
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	3304      	adds	r3, #4
 800e366:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e368:	e7e9      	b.n	800e33e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e36a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	4413      	add	r3, r2
}
 800e374:	4618      	mov	r0, r3
 800e376:	371c      	adds	r7, #28
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e396:	d204      	bcs.n	800e3a2 <dir_sdi+0x22>
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f003 031f 	and.w	r3, r3, #31
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	e071      	b.n	800e48a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d106      	bne.n	800e3c6 <dir_sdi+0x46>
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d902      	bls.n	800e3c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10c      	bne.n	800e3e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	095b      	lsrs	r3, r3, #5
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	8912      	ldrh	r2, [r2, #8]
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d301      	bcc.n	800e3dc <dir_sdi+0x5c>
 800e3d8:	2302      	movs	r3, #2
 800e3da:	e056      	b.n	800e48a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	61da      	str	r2, [r3, #28]
 800e3e4:	e02d      	b.n	800e442 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	895b      	ldrh	r3, [r3, #10]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	899b      	ldrh	r3, [r3, #12]
 800e3f0:	fb02 f303 	mul.w	r3, r2, r3
 800e3f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e3f6:	e019      	b.n	800e42c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6979      	ldr	r1, [r7, #20]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7ff fc9a 	bl	800dd36 <get_fat>
 800e402:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d101      	bne.n	800e410 <dir_sdi+0x90>
 800e40c:	2301      	movs	r3, #1
 800e40e:	e03c      	b.n	800e48a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d904      	bls.n	800e420 <dir_sdi+0xa0>
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d301      	bcc.n	800e424 <dir_sdi+0xa4>
 800e420:	2302      	movs	r3, #2
 800e422:	e032      	b.n	800e48a <dir_sdi+0x10a>
			ofs -= csz;
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	429a      	cmp	r2, r3
 800e432:	d2e1      	bcs.n	800e3f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e434:	6979      	ldr	r1, [r7, #20]
 800e436:	6938      	ldr	r0, [r7, #16]
 800e438:	f7ff fc5e 	bl	800dcf8 <clust2sect>
 800e43c:	4602      	mov	r2, r0
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	697a      	ldr	r2, [r7, #20]
 800e446:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	69db      	ldr	r3, [r3, #28]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <dir_sdi+0xd4>
 800e450:	2302      	movs	r3, #2
 800e452:	e01a      	b.n	800e48a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	69da      	ldr	r2, [r3, #28]
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	899b      	ldrh	r3, [r3, #12]
 800e45c:	4619      	mov	r1, r3
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	fbb3 f3f1 	udiv	r3, r3, r1
 800e464:	441a      	add	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	899b      	ldrh	r3, [r3, #12]
 800e474:	461a      	mov	r2, r3
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	fbb3 f0f2 	udiv	r0, r3, r2
 800e47c:	fb00 f202 	mul.w	r2, r0, r2
 800e480:	1a9b      	subs	r3, r3, r2
 800e482:	18ca      	adds	r2, r1, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b086      	sub	sp, #24
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	3320      	adds	r3, #32
 800e4a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	69db      	ldr	r3, [r3, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <dir_next+0x28>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4b8:	d301      	bcc.n	800e4be <dir_next+0x2c>
 800e4ba:	2304      	movs	r3, #4
 800e4bc:	e0bb      	b.n	800e636 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	899b      	ldrh	r3, [r3, #12]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4ca:	fb01 f202 	mul.w	r2, r1, r2
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f040 809d 	bne.w	800e610 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	69db      	ldr	r3, [r3, #28]
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10b      	bne.n	800e500 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	095b      	lsrs	r3, r3, #5
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	8912      	ldrh	r2, [r2, #8]
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	f0c0 808d 	bcc.w	800e610 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	61da      	str	r2, [r3, #28]
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	e09a      	b.n	800e636 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	899b      	ldrh	r3, [r3, #12]
 800e504:	461a      	mov	r2, r3
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	fbb3 f3f2 	udiv	r3, r3, r2
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	8952      	ldrh	r2, [r2, #10]
 800e510:	3a01      	subs	r2, #1
 800e512:	4013      	ands	r3, r2
 800e514:	2b00      	cmp	r3, #0
 800e516:	d17b      	bne.n	800e610 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	4619      	mov	r1, r3
 800e520:	4610      	mov	r0, r2
 800e522:	f7ff fc08 	bl	800dd36 <get_fat>
 800e526:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d801      	bhi.n	800e532 <dir_next+0xa0>
 800e52e:	2302      	movs	r3, #2
 800e530:	e081      	b.n	800e636 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e538:	d101      	bne.n	800e53e <dir_next+0xac>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e07b      	b.n	800e636 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	69db      	ldr	r3, [r3, #28]
 800e542:	697a      	ldr	r2, [r7, #20]
 800e544:	429a      	cmp	r2, r3
 800e546:	d359      	bcc.n	800e5fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d104      	bne.n	800e558 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	61da      	str	r2, [r3, #28]
 800e554:	2304      	movs	r3, #4
 800e556:	e06e      	b.n	800e636 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	699b      	ldr	r3, [r3, #24]
 800e55e:	4619      	mov	r1, r3
 800e560:	4610      	mov	r0, r2
 800e562:	f7ff fe3d 	bl	800e1e0 <create_chain>
 800e566:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <dir_next+0xe0>
 800e56e:	2307      	movs	r3, #7
 800e570:	e061      	b.n	800e636 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d101      	bne.n	800e57c <dir_next+0xea>
 800e578:	2302      	movs	r3, #2
 800e57a:	e05c      	b.n	800e636 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e582:	d101      	bne.n	800e588 <dir_next+0xf6>
 800e584:	2301      	movs	r3, #1
 800e586:	e056      	b.n	800e636 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f7ff fad3 	bl	800db34 <sync_window>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <dir_next+0x106>
 800e594:	2301      	movs	r3, #1
 800e596:	e04e      	b.n	800e636 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	899b      	ldrh	r3, [r3, #12]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	f7ff f8fc 	bl	800d7a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	613b      	str	r3, [r7, #16]
 800e5ae:	6979      	ldr	r1, [r7, #20]
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7ff fba1 	bl	800dcf8 <clust2sect>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	635a      	str	r2, [r3, #52]	; 0x34
 800e5bc:	e012      	b.n	800e5e4 <dir_next+0x152>
						fs->wflag = 1;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7ff fab5 	bl	800db34 <sync_window>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <dir_next+0x142>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e030      	b.n	800e636 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	613b      	str	r3, [r7, #16]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5de:	1c5a      	adds	r2, r3, #1
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	635a      	str	r2, [r3, #52]	; 0x34
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	895b      	ldrh	r3, [r3, #10]
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d3e6      	bcc.n	800e5be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	1ad2      	subs	r2, r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e602:	6979      	ldr	r1, [r7, #20]
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7ff fb77 	bl	800dcf8 <clust2sect>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	899b      	ldrh	r3, [r3, #12]
 800e620:	461a      	mov	r2, r3
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	fbb3 f0f2 	udiv	r0, r3, r2
 800e628:	fb00 f202 	mul.w	r2, r0, r2
 800e62c:	1a9b      	subs	r3, r3, r2
 800e62e:	18ca      	adds	r2, r1, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b086      	sub	sp, #24
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e64e:	2100      	movs	r1, #0
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff fe95 	bl	800e380 <dir_sdi>
 800e656:	4603      	mov	r3, r0
 800e658:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d12b      	bne.n	800e6b8 <dir_alloc+0x7a>
		n = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	69db      	ldr	r3, [r3, #28]
 800e668:	4619      	mov	r1, r3
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7ff faa6 	bl	800dbbc <move_window>
 800e670:	4603      	mov	r3, r0
 800e672:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e674:	7dfb      	ldrb	r3, [r7, #23]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d11d      	bne.n	800e6b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2be5      	cmp	r3, #229	; 0xe5
 800e682:	d004      	beq.n	800e68e <dir_alloc+0x50>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d107      	bne.n	800e69e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	3301      	adds	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d102      	bne.n	800e6a2 <dir_alloc+0x64>
 800e69c:	e00c      	b.n	800e6b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e69e:	2300      	movs	r3, #0
 800e6a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff fef4 	bl	800e492 <dir_next>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0d7      	beq.n	800e664 <dir_alloc+0x26>
 800e6b4:	e000      	b.n	800e6b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e6b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d101      	bne.n	800e6c2 <dir_alloc+0x84>
 800e6be:	2307      	movs	r3, #7
 800e6c0:	75fb      	strb	r3, [r7, #23]
	return res;
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	331a      	adds	r3, #26
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe ffbe 	bl	800d65c <ld_word>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	d109      	bne.n	800e700 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	3314      	adds	r3, #20
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe ffb3 	bl	800d65c <ld_word>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	041b      	lsls	r3, r3, #16
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e700:	68fb      	ldr	r3, [r7, #12]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b084      	sub	sp, #16
 800e70e:	af00      	add	r7, sp, #0
 800e710:	60f8      	str	r0, [r7, #12]
 800e712:	60b9      	str	r1, [r7, #8]
 800e714:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	331a      	adds	r3, #26
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	b292      	uxth	r2, r2
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe ffd6 	bl	800d6d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	d109      	bne.n	800e742 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f103 0214 	add.w	r2, r3, #20
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	0c1b      	lsrs	r3, r3, #16
 800e738:	b29b      	uxth	r3, r3
 800e73a:	4619      	mov	r1, r3
 800e73c:	4610      	mov	r0, r2
 800e73e:	f7fe ffc8 	bl	800d6d2 <st_word>
	}
}
 800e742:	bf00      	nop
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e74c:	b590      	push	{r4, r7, lr}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	331a      	adds	r3, #26
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fe ff7e 	bl	800d65c <ld_word>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <cmp_lfn+0x1e>
 800e766:	2300      	movs	r3, #0
 800e768:	e059      	b.n	800e81e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e772:	1e5a      	subs	r2, r3, #1
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4413      	add	r3, r2
 800e77e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e780:	2301      	movs	r3, #1
 800e782:	81fb      	strh	r3, [r7, #14]
 800e784:	2300      	movs	r3, #0
 800e786:	613b      	str	r3, [r7, #16]
 800e788:	e033      	b.n	800e7f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e78a:	4a27      	ldr	r2, [pc, #156]	; (800e828 <cmp_lfn+0xdc>)
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	4413      	add	r3, r2
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	4413      	add	r3, r2
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe ff5f 	bl	800d65c <ld_word>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e7a2:	89fb      	ldrh	r3, [r7, #14]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d01a      	beq.n	800e7de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	2bfe      	cmp	r3, #254	; 0xfe
 800e7ac:	d812      	bhi.n	800e7d4 <cmp_lfn+0x88>
 800e7ae:	89bb      	ldrh	r3, [r7, #12]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f002 f8bf 	bl	8010934 <ff_wtoupper>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	461c      	mov	r4, r3
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	617a      	str	r2, [r7, #20]
 800e7c0:	005b      	lsls	r3, r3, #1
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f002 f8b3 	bl	8010934 <ff_wtoupper>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	429c      	cmp	r4, r3
 800e7d2:	d001      	beq.n	800e7d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	e022      	b.n	800e81e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e7d8:	89bb      	ldrh	r3, [r7, #12]
 800e7da:	81fb      	strh	r3, [r7, #14]
 800e7dc:	e006      	b.n	800e7ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e7de:	89bb      	ldrh	r3, [r7, #12]
 800e7e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d001      	beq.n	800e7ec <cmp_lfn+0xa0>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e018      	b.n	800e81e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	2b0c      	cmp	r3, #12
 800e7f6:	d9c8      	bls.n	800e78a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <cmp_lfn+0xd0>
 800e804:	89fb      	ldrh	r3, [r7, #14]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d008      	beq.n	800e81c <cmp_lfn+0xd0>
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	4413      	add	r3, r2
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d001      	beq.n	800e81c <cmp_lfn+0xd0>
 800e818:	2300      	movs	r3, #0
 800e81a:	e000      	b.n	800e81e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e81c:	2301      	movs	r3, #1
}
 800e81e:	4618      	mov	r0, r3
 800e820:	371c      	adds	r7, #28
 800e822:	46bd      	mov	sp, r7
 800e824:	bd90      	pop	{r4, r7, pc}
 800e826:	bf00      	nop
 800e828:	08017e10 	.word	0x08017e10

0800e82c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	4611      	mov	r1, r2
 800e838:	461a      	mov	r2, r3
 800e83a:	460b      	mov	r3, r1
 800e83c:	71fb      	strb	r3, [r7, #7]
 800e83e:	4613      	mov	r3, r2
 800e840:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	330d      	adds	r3, #13
 800e846:	79ba      	ldrb	r2, [r7, #6]
 800e848:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	330b      	adds	r3, #11
 800e84e:	220f      	movs	r2, #15
 800e850:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	330c      	adds	r3, #12
 800e856:	2200      	movs	r2, #0
 800e858:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	331a      	adds	r3, #26
 800e85e:	2100      	movs	r1, #0
 800e860:	4618      	mov	r0, r3
 800e862:	f7fe ff36 	bl	800d6d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	1e5a      	subs	r2, r3, #1
 800e86a:	4613      	mov	r3, r2
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4413      	add	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4413      	add	r3, r2
 800e874:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	82fb      	strh	r3, [r7, #22]
 800e87a:	2300      	movs	r3, #0
 800e87c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e87e:	8afb      	ldrh	r3, [r7, #22]
 800e880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e884:	4293      	cmp	r3, r2
 800e886:	d007      	beq.n	800e898 <put_lfn+0x6c>
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	61fa      	str	r2, [r7, #28]
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	4413      	add	r3, r2
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e898:	4a17      	ldr	r2, [pc, #92]	; (800e8f8 <put_lfn+0xcc>)
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	4413      	add	r3, r2
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	8afa      	ldrh	r2, [r7, #22]
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe ff11 	bl	800d6d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e8b0:	8afb      	ldrh	r3, [r7, #22]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d102      	bne.n	800e8bc <put_lfn+0x90>
 800e8b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	61bb      	str	r3, [r7, #24]
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	2b0c      	cmp	r3, #12
 800e8c6:	d9da      	bls.n	800e87e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e8c8:	8afb      	ldrh	r3, [r7, #22]
 800e8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d006      	beq.n	800e8e0 <put_lfn+0xb4>
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	4413      	add	r3, r2
 800e8da:	881b      	ldrh	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d103      	bne.n	800e8e8 <put_lfn+0xbc>
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	79fa      	ldrb	r2, [r7, #7]
 800e8ec:	701a      	strb	r2, [r3, #0]
}
 800e8ee:	bf00      	nop
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	08017e10 	.word	0x08017e10

0800e8fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08c      	sub	sp, #48	; 0x30
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
 800e908:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e90a:	220b      	movs	r2, #11
 800e90c:	68b9      	ldr	r1, [r7, #8]
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7fe ff26 	bl	800d760 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b05      	cmp	r3, #5
 800e918:	d92b      	bls.n	800e972 <gen_numname+0x76>
		sr = seq;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e91e:	e022      	b.n	800e966 <gen_numname+0x6a>
			wc = *lfn++;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	1c9a      	adds	r2, r3, #2
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e92a:	2300      	movs	r3, #0
 800e92c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e92e:	e017      	b.n	800e960 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	005a      	lsls	r2, r3, #1
 800e934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	4413      	add	r3, r2
 800e93c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e93e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e940:	085b      	lsrs	r3, r3, #1
 800e942:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <gen_numname+0x5e>
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e954:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e958:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	3301      	adds	r3, #1
 800e95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	2b0f      	cmp	r3, #15
 800e964:	d9e4      	bls.n	800e930 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1d8      	bne.n	800e920 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e972:	2307      	movs	r3, #7
 800e974:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	f003 030f 	and.w	r3, r3, #15
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	3330      	adds	r3, #48	; 0x30
 800e982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e98a:	2b39      	cmp	r3, #57	; 0x39
 800e98c:	d904      	bls.n	800e998 <gen_numname+0x9c>
 800e98e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e992:	3307      	adds	r3, #7
 800e994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	1e5a      	subs	r2, r3, #1
 800e99c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e99e:	3330      	adds	r3, #48	; 0x30
 800e9a0:	443b      	add	r3, r7
 800e9a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e9a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	091b      	lsrs	r3, r3, #4
 800e9ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1df      	bne.n	800e976 <gen_numname+0x7a>
	ns[i] = '~';
 800e9b6:	f107 0214 	add.w	r2, r7, #20
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	4413      	add	r3, r2
 800e9be:	227e      	movs	r2, #126	; 0x7e
 800e9c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c6:	e002      	b.n	800e9ce <gen_numname+0xd2>
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d205      	bcs.n	800e9e2 <gen_numname+0xe6>
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9da:	4413      	add	r3, r2
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b20      	cmp	r3, #32
 800e9e0:	d1f2      	bne.n	800e9c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	2b07      	cmp	r3, #7
 800e9e6:	d807      	bhi.n	800e9f8 <gen_numname+0xfc>
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800e9ee:	3330      	adds	r3, #48	; 0x30
 800e9f0:	443b      	add	r3, r7
 800e9f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e9f6:	e000      	b.n	800e9fa <gen_numname+0xfe>
 800e9f8:	2120      	movs	r1, #32
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	627a      	str	r2, [r7, #36]	; 0x24
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	4413      	add	r3, r2
 800ea04:	460a      	mov	r2, r1
 800ea06:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	2b07      	cmp	r3, #7
 800ea0c:	d9e9      	bls.n	800e9e2 <gen_numname+0xe6>
}
 800ea0e:	bf00      	nop
 800ea10:	bf00      	nop
 800ea12:	3730      	adds	r7, #48	; 0x30
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ea24:	230b      	movs	r3, #11
 800ea26:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	0852      	lsrs	r2, r2, #1
 800ea2e:	01db      	lsls	r3, r3, #7
 800ea30:	4313      	orrs	r3, r2
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	1c59      	adds	r1, r3, #1
 800ea38:	6079      	str	r1, [r7, #4]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	60bb      	str	r3, [r7, #8]
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1ed      	bne.n	800ea28 <sum_sfn+0x10>
	return sum;
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b086      	sub	sp, #24
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ea68:	2100      	movs	r1, #0
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7ff fc88 	bl	800e380 <dir_sdi>
 800ea70:	4603      	mov	r3, r0
 800ea72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d001      	beq.n	800ea7e <dir_find+0x24>
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	e0a9      	b.n	800ebd2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea7e:	23ff      	movs	r3, #255	; 0xff
 800ea80:	753b      	strb	r3, [r7, #20]
 800ea82:	7d3b      	ldrb	r3, [r7, #20]
 800ea84:	757b      	strb	r3, [r7, #21]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	69db      	ldr	r3, [r3, #28]
 800ea92:	4619      	mov	r1, r3
 800ea94:	6938      	ldr	r0, [r7, #16]
 800ea96:	f7ff f891 	bl	800dbbc <move_window>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f040 8090 	bne.w	800ebc6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a1b      	ldr	r3, [r3, #32]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eaae:	7dbb      	ldrb	r3, [r7, #22]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <dir_find+0x60>
 800eab4:	2304      	movs	r3, #4
 800eab6:	75fb      	strb	r3, [r7, #23]
 800eab8:	e08a      	b.n	800ebd0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	330b      	adds	r3, #11
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eac6:	73fb      	strb	r3, [r7, #15]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7bfa      	ldrb	r2, [r7, #15]
 800eacc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eace:	7dbb      	ldrb	r3, [r7, #22]
 800ead0:	2be5      	cmp	r3, #229	; 0xe5
 800ead2:	d007      	beq.n	800eae4 <dir_find+0x8a>
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
 800ead6:	f003 0308 	and.w	r3, r3, #8
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d009      	beq.n	800eaf2 <dir_find+0x98>
 800eade:	7bfb      	ldrb	r3, [r7, #15]
 800eae0:	2b0f      	cmp	r3, #15
 800eae2:	d006      	beq.n	800eaf2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eae4:	23ff      	movs	r3, #255	; 0xff
 800eae6:	757b      	strb	r3, [r7, #21]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f04f 32ff 	mov.w	r2, #4294967295
 800eaee:	631a      	str	r2, [r3, #48]	; 0x30
 800eaf0:	e05e      	b.n	800ebb0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	2b0f      	cmp	r3, #15
 800eaf6:	d136      	bne.n	800eb66 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d154      	bne.n	800ebb0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800eb06:	7dbb      	ldrb	r3, [r7, #22]
 800eb08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00d      	beq.n	800eb2c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6a1b      	ldr	r3, [r3, #32]
 800eb14:	7b5b      	ldrb	r3, [r3, #13]
 800eb16:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800eb18:	7dbb      	ldrb	r3, [r7, #22]
 800eb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb1e:	75bb      	strb	r3, [r7, #22]
 800eb20:	7dbb      	ldrb	r3, [r7, #22]
 800eb22:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	695a      	ldr	r2, [r3, #20]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800eb2c:	7dba      	ldrb	r2, [r7, #22]
 800eb2e:	7d7b      	ldrb	r3, [r7, #21]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d115      	bne.n	800eb60 <dir_find+0x106>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a1b      	ldr	r3, [r3, #32]
 800eb38:	330d      	adds	r3, #13
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	7d3a      	ldrb	r2, [r7, #20]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d10e      	bne.n	800eb60 <dir_find+0x106>
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	691a      	ldr	r2, [r3, #16]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f7ff fdfd 	bl	800e74c <cmp_lfn>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d003      	beq.n	800eb60 <dir_find+0x106>
 800eb58:	7d7b      	ldrb	r3, [r7, #21]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	e000      	b.n	800eb62 <dir_find+0x108>
 800eb60:	23ff      	movs	r3, #255	; 0xff
 800eb62:	757b      	strb	r3, [r7, #21]
 800eb64:	e024      	b.n	800ebb0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb66:	7d7b      	ldrb	r3, [r7, #21]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d109      	bne.n	800eb80 <dir_find+0x126>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a1b      	ldr	r3, [r3, #32]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff ff51 	bl	800ea18 <sum_sfn>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	7d3b      	ldrb	r3, [r7, #20]
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d024      	beq.n	800ebca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb86:	f003 0301 	and.w	r3, r3, #1
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10a      	bne.n	800eba4 <dir_find+0x14a>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a18      	ldr	r0, [r3, #32]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	3324      	adds	r3, #36	; 0x24
 800eb96:	220b      	movs	r2, #11
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f7fe fe1d 	bl	800d7d8 <mem_cmp>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d014      	beq.n	800ebce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eba4:	23ff      	movs	r3, #255	; 0xff
 800eba6:	757b      	strb	r3, [r7, #21]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff fc6d 	bl	800e492 <dir_next>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f43f af65 	beq.w	800ea8e <dir_find+0x34>
 800ebc4:	e004      	b.n	800ebd0 <dir_find+0x176>
		if (res != FR_OK) break;
 800ebc6:	bf00      	nop
 800ebc8:	e002      	b.n	800ebd0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ebca:	bf00      	nop
 800ebcc:	e000      	b.n	800ebd0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ebce:	bf00      	nop

	return res;
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
	...

0800ebdc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08c      	sub	sp, #48	; 0x30
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ebf0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <dir_register+0x20>
 800ebf8:	2306      	movs	r3, #6
 800ebfa:	e0e0      	b.n	800edbe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ec00:	e002      	b.n	800ec08 <dir_register+0x2c>
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec04:	3301      	adds	r3, #1
 800ec06:	627b      	str	r3, [r7, #36]	; 0x24
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	691a      	ldr	r2, [r3, #16]
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	005b      	lsls	r3, r3, #1
 800ec10:	4413      	add	r3, r2
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1f4      	bne.n	800ec02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ec1e:	f107 030c 	add.w	r3, r7, #12
 800ec22:	220c      	movs	r2, #12
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fe fd9b 	bl	800d760 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d032      	beq.n	800ec9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2240      	movs	r2, #64	; 0x40
 800ec38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec40:	e016      	b.n	800ec70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	691a      	ldr	r2, [r3, #16]
 800ec4c:	f107 010c 	add.w	r1, r7, #12
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	f7ff fe53 	bl	800e8fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff feff 	bl	800ea5a <dir_find>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ec62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec72:	2b63      	cmp	r3, #99	; 0x63
 800ec74:	d9e5      	bls.n	800ec42 <dir_register+0x66>
 800ec76:	e000      	b.n	800ec7a <dir_register+0x9e>
			if (res != FR_OK) break;
 800ec78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	2b64      	cmp	r3, #100	; 0x64
 800ec7e:	d101      	bne.n	800ec84 <dir_register+0xa8>
 800ec80:	2307      	movs	r3, #7
 800ec82:	e09c      	b.n	800edbe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ec84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	d002      	beq.n	800ec92 <dir_register+0xb6>
 800ec8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec90:	e095      	b.n	800edbe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ec92:	7dfa      	ldrb	r2, [r7, #23]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <dir_register+0xd8>
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	330c      	adds	r3, #12
 800eca8:	4a47      	ldr	r2, [pc, #284]	; (800edc8 <dir_register+0x1ec>)
 800ecaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ecae:	089b      	lsrs	r3, r3, #2
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	e000      	b.n	800ecb6 <dir_register+0xda>
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ecb8:	6a39      	ldr	r1, [r7, #32]
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7ff fcbf 	bl	800e63e <dir_alloc>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ecc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d148      	bne.n	800ed60 <dir_register+0x184>
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	623b      	str	r3, [r7, #32]
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d042      	beq.n	800ed60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	695a      	ldr	r2, [r3, #20]
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	015b      	lsls	r3, r3, #5
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	4619      	mov	r1, r3
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff fb4a 	bl	800e380 <dir_sdi>
 800ecec:	4603      	mov	r3, r0
 800ecee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ecf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d132      	bne.n	800ed60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	3324      	adds	r3, #36	; 0x24
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff fe8a 	bl	800ea18 <sum_sfn>
 800ed04:	4603      	mov	r3, r0
 800ed06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	69db      	ldr	r3, [r3, #28]
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	69f8      	ldr	r0, [r7, #28]
 800ed10:	f7fe ff54 	bl	800dbbc <move_window>
 800ed14:	4603      	mov	r3, r0
 800ed16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ed1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d11d      	bne.n	800ed5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	6918      	ldr	r0, [r3, #16]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a19      	ldr	r1, [r3, #32]
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	7efb      	ldrb	r3, [r7, #27]
 800ed30:	f7ff fd7c 	bl	800e82c <put_lfn>
				fs->wflag = 1;
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	2201      	movs	r2, #1
 800ed38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff fba8 	bl	800e492 <dir_next>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ed48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d107      	bne.n	800ed60 <dir_register+0x184>
 800ed50:	6a3b      	ldr	r3, [r7, #32]
 800ed52:	3b01      	subs	r3, #1
 800ed54:	623b      	str	r3, [r7, #32]
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1d5      	bne.n	800ed08 <dir_register+0x12c>
 800ed5c:	e000      	b.n	800ed60 <dir_register+0x184>
				if (res != FR_OK) break;
 800ed5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ed60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d128      	bne.n	800edba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69db      	ldr	r3, [r3, #28]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	69f8      	ldr	r0, [r7, #28]
 800ed70:	f7fe ff24 	bl	800dbbc <move_window>
 800ed74:	4603      	mov	r3, r0
 800ed76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ed7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d11b      	bne.n	800edba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a1b      	ldr	r3, [r3, #32]
 800ed86:	2220      	movs	r2, #32
 800ed88:	2100      	movs	r1, #0
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fd09 	bl	800d7a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a18      	ldr	r0, [r3, #32]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3324      	adds	r3, #36	; 0x24
 800ed98:	220b      	movs	r2, #11
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	f7fe fce0 	bl	800d760 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	330c      	adds	r3, #12
 800edac:	f002 0218 	and.w	r2, r2, #24
 800edb0:	b2d2      	uxtb	r2, r2
 800edb2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	2201      	movs	r2, #1
 800edb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800edba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3730      	adds	r7, #48	; 0x30
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	4ec4ec4f 	.word	0x4ec4ec4f

0800edcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b08a      	sub	sp, #40	; 0x28
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	613b      	str	r3, [r7, #16]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	2300      	movs	r3, #0
 800ede6:	617b      	str	r3, [r7, #20]
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	61ba      	str	r2, [r7, #24]
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	4413      	add	r3, r2
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800edfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edfc:	2b1f      	cmp	r3, #31
 800edfe:	d940      	bls.n	800ee82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ee00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee02:	2b2f      	cmp	r3, #47	; 0x2f
 800ee04:	d006      	beq.n	800ee14 <create_name+0x48>
 800ee06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee08:	2b5c      	cmp	r3, #92	; 0x5c
 800ee0a:	d110      	bne.n	800ee2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ee0c:	e002      	b.n	800ee14 <create_name+0x48>
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	3301      	adds	r3, #1
 800ee12:	61bb      	str	r3, [r7, #24]
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	4413      	add	r3, r2
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b2f      	cmp	r3, #47	; 0x2f
 800ee1e:	d0f6      	beq.n	800ee0e <create_name+0x42>
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	4413      	add	r3, r2
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	2b5c      	cmp	r3, #92	; 0x5c
 800ee2a:	d0f0      	beq.n	800ee0e <create_name+0x42>
			break;
 800ee2c:	e02a      	b.n	800ee84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2bfe      	cmp	r3, #254	; 0xfe
 800ee32:	d901      	bls.n	800ee38 <create_name+0x6c>
 800ee34:	2306      	movs	r3, #6
 800ee36:	e17d      	b.n	800f134 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ee38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ee3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee40:	2101      	movs	r1, #1
 800ee42:	4618      	mov	r0, r3
 800ee44:	f001 fd3a 	bl	80108bc <ff_convert>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ee4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <create_name+0x8a>
 800ee52:	2306      	movs	r3, #6
 800ee54:	e16e      	b.n	800f134 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee58:	2b7f      	cmp	r3, #127	; 0x7f
 800ee5a:	d809      	bhi.n	800ee70 <create_name+0xa4>
 800ee5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee5e:	4619      	mov	r1, r3
 800ee60:	488d      	ldr	r0, [pc, #564]	; (800f098 <create_name+0x2cc>)
 800ee62:	f7fe fce0 	bl	800d826 <chk_chr>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <create_name+0xa4>
 800ee6c:	2306      	movs	r3, #6
 800ee6e:	e161      	b.n	800f134 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	617a      	str	r2, [r7, #20]
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ee80:	e7b4      	b.n	800edec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ee82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	441a      	add	r2, r3
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ee8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee90:	2b1f      	cmp	r3, #31
 800ee92:	d801      	bhi.n	800ee98 <create_name+0xcc>
 800ee94:	2304      	movs	r3, #4
 800ee96:	e000      	b.n	800ee9a <create_name+0xce>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ee9e:	e011      	b.n	800eec4 <create_name+0xf8>
		w = lfn[di - 1];
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eea6:	3b01      	subs	r3, #1
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	4413      	add	r3, r2
 800eeae:	881b      	ldrh	r3, [r3, #0]
 800eeb0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800eeb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeb4:	2b20      	cmp	r3, #32
 800eeb6:	d002      	beq.n	800eebe <create_name+0xf2>
 800eeb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeba:	2b2e      	cmp	r3, #46	; 0x2e
 800eebc:	d106      	bne.n	800eecc <create_name+0x100>
		di--;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1ea      	bne.n	800eea0 <create_name+0xd4>
 800eeca:	e000      	b.n	800eece <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800eecc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	4413      	add	r3, r2
 800eed6:	2200      	movs	r2, #0
 800eed8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <create_name+0x118>
 800eee0:	2306      	movs	r3, #6
 800eee2:	e127      	b.n	800f134 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3324      	adds	r3, #36	; 0x24
 800eee8:	220b      	movs	r2, #11
 800eeea:	2120      	movs	r1, #32
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe fc58 	bl	800d7a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eef2:	2300      	movs	r3, #0
 800eef4:	61bb      	str	r3, [r7, #24]
 800eef6:	e002      	b.n	800eefe <create_name+0x132>
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	3301      	adds	r3, #1
 800eefc:	61bb      	str	r3, [r7, #24]
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	4413      	add	r3, r2
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	2b20      	cmp	r3, #32
 800ef0a:	d0f5      	beq.n	800eef8 <create_name+0x12c>
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	4413      	add	r3, r2
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	2b2e      	cmp	r3, #46	; 0x2e
 800ef18:	d0ee      	beq.n	800eef8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d009      	beq.n	800ef34 <create_name+0x168>
 800ef20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef24:	f043 0303 	orr.w	r3, r3, #3
 800ef28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ef2c:	e002      	b.n	800ef34 <create_name+0x168>
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	617b      	str	r3, [r7, #20]
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d009      	beq.n	800ef4e <create_name+0x182>
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef40:	3b01      	subs	r3, #1
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef4c:	d1ef      	bne.n	800ef2e <create_name+0x162>

	i = b = 0; ni = 8;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef54:	2300      	movs	r3, #0
 800ef56:	623b      	str	r3, [r7, #32]
 800ef58:	2308      	movs	r3, #8
 800ef5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	61ba      	str	r2, [r7, #24]
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ef6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 8090 	beq.w	800f094 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ef74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef76:	2b20      	cmp	r3, #32
 800ef78:	d006      	beq.n	800ef88 <create_name+0x1bc>
 800ef7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef7e:	d10a      	bne.n	800ef96 <create_name+0x1ca>
 800ef80:	69ba      	ldr	r2, [r7, #24]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d006      	beq.n	800ef96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ef88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef8c:	f043 0303 	orr.w	r3, r3, #3
 800ef90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef94:	e07d      	b.n	800f092 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ef96:	6a3a      	ldr	r2, [r7, #32]
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d203      	bcs.n	800efa6 <create_name+0x1da>
 800ef9e:	69ba      	ldr	r2, [r7, #24]
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d123      	bne.n	800efee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	2b0b      	cmp	r3, #11
 800efaa:	d106      	bne.n	800efba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800efac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb0:	f043 0303 	orr.w	r3, r3, #3
 800efb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efb8:	e075      	b.n	800f0a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800efba:	69ba      	ldr	r2, [r7, #24]
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d005      	beq.n	800efce <create_name+0x202>
 800efc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc6:	f043 0303 	orr.w	r3, r3, #3
 800efca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800efce:	69ba      	ldr	r2, [r7, #24]
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d866      	bhi.n	800f0a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	61bb      	str	r3, [r7, #24]
 800efda:	2308      	movs	r3, #8
 800efdc:	623b      	str	r3, [r7, #32]
 800efde:	230b      	movs	r3, #11
 800efe0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800efe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800efec:	e051      	b.n	800f092 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800efee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff0:	2b7f      	cmp	r3, #127	; 0x7f
 800eff2:	d914      	bls.n	800f01e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff6:	2100      	movs	r1, #0
 800eff8:	4618      	mov	r0, r3
 800effa:	f001 fc5f 	bl	80108bc <ff_convert>
 800effe:	4603      	mov	r3, r0
 800f000:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <create_name+0x246>
 800f008:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f00a:	3b80      	subs	r3, #128	; 0x80
 800f00c:	4a23      	ldr	r2, [pc, #140]	; (800f09c <create_name+0x2d0>)
 800f00e:	5cd3      	ldrb	r3, [r2, r3]
 800f010:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f016:	f043 0302 	orr.w	r3, r3, #2
 800f01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f020:	2b00      	cmp	r3, #0
 800f022:	d007      	beq.n	800f034 <create_name+0x268>
 800f024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f026:	4619      	mov	r1, r3
 800f028:	481d      	ldr	r0, [pc, #116]	; (800f0a0 <create_name+0x2d4>)
 800f02a:	f7fe fbfc 	bl	800d826 <chk_chr>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d008      	beq.n	800f046 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f034:	235f      	movs	r3, #95	; 0x5f
 800f036:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f03c:	f043 0303 	orr.w	r3, r3, #3
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f044:	e01b      	b.n	800f07e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f048:	2b40      	cmp	r3, #64	; 0x40
 800f04a:	d909      	bls.n	800f060 <create_name+0x294>
 800f04c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f04e:	2b5a      	cmp	r3, #90	; 0x5a
 800f050:	d806      	bhi.n	800f060 <create_name+0x294>
					b |= 2;
 800f052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f056:	f043 0302 	orr.w	r3, r3, #2
 800f05a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f05e:	e00e      	b.n	800f07e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f062:	2b60      	cmp	r3, #96	; 0x60
 800f064:	d90b      	bls.n	800f07e <create_name+0x2b2>
 800f066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f068:	2b7a      	cmp	r3, #122	; 0x7a
 800f06a:	d808      	bhi.n	800f07e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f06c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f070:	f043 0301 	orr.w	r3, r3, #1
 800f074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f07a:	3b20      	subs	r3, #32
 800f07c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	1c5a      	adds	r2, r3, #1
 800f082:	623a      	str	r2, [r7, #32]
 800f084:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f086:	b2d1      	uxtb	r1, r2
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	4413      	add	r3, r2
 800f08c:	460a      	mov	r2, r1
 800f08e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f092:	e763      	b.n	800ef5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f094:	bf00      	nop
 800f096:	e006      	b.n	800f0a6 <create_name+0x2da>
 800f098:	08017d1c 	.word	0x08017d1c
 800f09c:	08017d90 	.word	0x08017d90
 800f0a0:	08017d28 	.word	0x08017d28
			if (si > di) break;			/* No extension */
 800f0a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f0ac:	2be5      	cmp	r3, #229	; 0xe5
 800f0ae:	d103      	bne.n	800f0b8 <create_name+0x2ec>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2205      	movs	r2, #5
 800f0b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b08      	cmp	r3, #8
 800f0bc:	d104      	bne.n	800f0c8 <create_name+0x2fc>
 800f0be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0cc:	f003 030c 	and.w	r3, r3, #12
 800f0d0:	2b0c      	cmp	r3, #12
 800f0d2:	d005      	beq.n	800f0e0 <create_name+0x314>
 800f0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0d8:	f003 0303 	and.w	r3, r3, #3
 800f0dc:	2b03      	cmp	r3, #3
 800f0de:	d105      	bne.n	800f0ec <create_name+0x320>
 800f0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0e4:	f043 0302 	orr.w	r3, r3, #2
 800f0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0f0:	f003 0302 	and.w	r3, r3, #2
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d117      	bne.n	800f128 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0fc:	f003 0303 	and.w	r3, r3, #3
 800f100:	2b01      	cmp	r3, #1
 800f102:	d105      	bne.n	800f110 <create_name+0x344>
 800f104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f108:	f043 0310 	orr.w	r3, r3, #16
 800f10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f114:	f003 030c 	and.w	r3, r3, #12
 800f118:	2b04      	cmp	r3, #4
 800f11a:	d105      	bne.n	800f128 <create_name+0x35c>
 800f11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f120:	f043 0308 	orr.w	r3, r3, #8
 800f124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f12e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f132:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f134:	4618      	mov	r0, r3
 800f136:	3728      	adds	r7, #40	; 0x28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f150:	e002      	b.n	800f158 <follow_path+0x1c>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b2f      	cmp	r3, #47	; 0x2f
 800f15e:	d0f8      	beq.n	800f152 <follow_path+0x16>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	2b5c      	cmp	r3, #92	; 0x5c
 800f166:	d0f4      	beq.n	800f152 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	2200      	movs	r2, #0
 800f16c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b1f      	cmp	r3, #31
 800f174:	d80a      	bhi.n	800f18c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2280      	movs	r2, #128	; 0x80
 800f17a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f17e:	2100      	movs	r1, #0
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff f8fd 	bl	800e380 <dir_sdi>
 800f186:	4603      	mov	r3, r0
 800f188:	75fb      	strb	r3, [r7, #23]
 800f18a:	e048      	b.n	800f21e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f18c:	463b      	mov	r3, r7
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff fe1b 	bl	800edcc <create_name>
 800f196:	4603      	mov	r3, r0
 800f198:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d139      	bne.n	800f214 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff fc5a 	bl	800ea5a <dir_find>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f1b2:	7dfb      	ldrb	r3, [r7, #23]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00a      	beq.n	800f1ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f1b8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ba:	2b04      	cmp	r3, #4
 800f1bc:	d12c      	bne.n	800f218 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	f003 0304 	and.w	r3, r3, #4
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d127      	bne.n	800f218 <follow_path+0xdc>
 800f1c8:	2305      	movs	r3, #5
 800f1ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f1cc:	e024      	b.n	800f218 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f1ce:	7afb      	ldrb	r3, [r7, #11]
 800f1d0:	f003 0304 	and.w	r3, r3, #4
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d121      	bne.n	800f21c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	799b      	ldrb	r3, [r3, #6]
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f1e4:	2305      	movs	r3, #5
 800f1e6:	75fb      	strb	r3, [r7, #23]
 800f1e8:	e019      	b.n	800f21e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	8992      	ldrh	r2, [r2, #12]
 800f1f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1fc:	fb00 f202 	mul.w	r2, r0, r2
 800f200:	1a9b      	subs	r3, r3, r2
 800f202:	440b      	add	r3, r1
 800f204:	4619      	mov	r1, r3
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7ff fa60 	bl	800e6cc <ld_clust>
 800f20c:	4602      	mov	r2, r0
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f212:	e7bb      	b.n	800f18c <follow_path+0x50>
			if (res != FR_OK) break;
 800f214:	bf00      	nop
 800f216:	e002      	b.n	800f21e <follow_path+0xe2>
				break;
 800f218:	bf00      	nop
 800f21a:	e000      	b.n	800f21e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f21c:	bf00      	nop
			}
		}
	}

	return res;
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3718      	adds	r7, #24
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f228:	b480      	push	{r7}
 800f22a:	b087      	sub	sp, #28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f230:	f04f 33ff 	mov.w	r3, #4294967295
 800f234:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d031      	beq.n	800f2a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	617b      	str	r3, [r7, #20]
 800f244:	e002      	b.n	800f24c <get_ldnumber+0x24>
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	3301      	adds	r3, #1
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b1f      	cmp	r3, #31
 800f252:	d903      	bls.n	800f25c <get_ldnumber+0x34>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b3a      	cmp	r3, #58	; 0x3a
 800f25a:	d1f4      	bne.n	800f246 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	2b3a      	cmp	r3, #58	; 0x3a
 800f262:	d11c      	bne.n	800f29e <get_ldnumber+0x76>
			tp = *path;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	60fa      	str	r2, [r7, #12]
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	3b30      	subs	r3, #48	; 0x30
 800f274:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b09      	cmp	r3, #9
 800f27a:	d80e      	bhi.n	800f29a <get_ldnumber+0x72>
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	429a      	cmp	r2, r3
 800f282:	d10a      	bne.n	800f29a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d107      	bne.n	800f29a <get_ldnumber+0x72>
					vol = (int)i;
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	3301      	adds	r3, #1
 800f292:	617b      	str	r3, [r7, #20]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	697a      	ldr	r2, [r7, #20]
 800f298:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	e002      	b.n	800f2a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f29e:	2300      	movs	r3, #0
 800f2a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f2a2:	693b      	ldr	r3, [r7, #16]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	371c      	adds	r7, #28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	70da      	strb	r2, [r3, #3]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7fe fc76 	bl	800dbbc <move_window>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <check_fs+0x2a>
 800f2d6:	2304      	movs	r3, #4
 800f2d8:	e038      	b.n	800f34c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	3338      	adds	r3, #56	; 0x38
 800f2de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe f9ba 	bl	800d65c <ld_word>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d001      	beq.n	800f2f8 <check_fs+0x48>
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	e029      	b.n	800f34c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f2fe:	2be9      	cmp	r3, #233	; 0xe9
 800f300:	d009      	beq.n	800f316 <check_fs+0x66>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f308:	2beb      	cmp	r3, #235	; 0xeb
 800f30a:	d11e      	bne.n	800f34a <check_fs+0x9a>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f312:	2b90      	cmp	r3, #144	; 0x90
 800f314:	d119      	bne.n	800f34a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3338      	adds	r3, #56	; 0x38
 800f31a:	3336      	adds	r3, #54	; 0x36
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fe f9b5 	bl	800d68c <ld_dword>
 800f322:	4603      	mov	r3, r0
 800f324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f328:	4a0a      	ldr	r2, [pc, #40]	; (800f354 <check_fs+0xa4>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d101      	bne.n	800f332 <check_fs+0x82>
 800f32e:	2300      	movs	r3, #0
 800f330:	e00c      	b.n	800f34c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3338      	adds	r3, #56	; 0x38
 800f336:	3352      	adds	r3, #82	; 0x52
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fe f9a7 	bl	800d68c <ld_dword>
 800f33e:	4603      	mov	r3, r0
 800f340:	4a05      	ldr	r2, [pc, #20]	; (800f358 <check_fs+0xa8>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d101      	bne.n	800f34a <check_fs+0x9a>
 800f346:	2300      	movs	r3, #0
 800f348:	e000      	b.n	800f34c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f34a:	2302      	movs	r3, #2
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	00544146 	.word	0x00544146
 800f358:	33544146 	.word	0x33544146

0800f35c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b096      	sub	sp, #88	; 0x58
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	4613      	mov	r3, r2
 800f368:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	2200      	movs	r2, #0
 800f36e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f7ff ff59 	bl	800f228 <get_ldnumber>
 800f376:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	da01      	bge.n	800f382 <find_volume+0x26>
 800f37e:	230b      	movs	r3, #11
 800f380:	e265      	b.n	800f84e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f382:	4a9f      	ldr	r2, [pc, #636]	; (800f600 <find_volume+0x2a4>)
 800f384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f38a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <find_volume+0x3a>
 800f392:	230c      	movs	r3, #12
 800f394:	e25b      	b.n	800f84e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f39a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f39c:	79fb      	ldrb	r3, [r7, #7]
 800f39e:	f023 0301 	bic.w	r3, r3, #1
 800f3a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d01a      	beq.n	800f3e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ae:	785b      	ldrb	r3, [r3, #1]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fe f8b5 	bl	800d520 <disk_status>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f3bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10c      	bne.n	800f3e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d007      	beq.n	800f3de <find_volume+0x82>
 800f3ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3d2:	f003 0304 	and.w	r3, r3, #4
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f3da:	230a      	movs	r3, #10
 800f3dc:	e237      	b.n	800f84e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f3de:	2300      	movs	r3, #0
 800f3e0:	e235      	b.n	800f84e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f2:	785b      	ldrb	r3, [r3, #1]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe f8ad 	bl	800d554 <disk_initialize>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f40c:	2303      	movs	r3, #3
 800f40e:	e21e      	b.n	800f84e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d007      	beq.n	800f426 <find_volume+0xca>
 800f416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f41a:	f003 0304 	and.w	r3, r3, #4
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f422:	230a      	movs	r3, #10
 800f424:	e213      	b.n	800f84e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f428:	7858      	ldrb	r0, [r3, #1]
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	330c      	adds	r3, #12
 800f42e:	461a      	mov	r2, r3
 800f430:	2102      	movs	r1, #2
 800f432:	f7fe f8f5 	bl	800d620 <disk_ioctl>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d001      	beq.n	800f440 <find_volume+0xe4>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e206      	b.n	800f84e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	899b      	ldrh	r3, [r3, #12]
 800f444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f448:	d80d      	bhi.n	800f466 <find_volume+0x10a>
 800f44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44c:	899b      	ldrh	r3, [r3, #12]
 800f44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f452:	d308      	bcc.n	800f466 <find_volume+0x10a>
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	899b      	ldrh	r3, [r3, #12]
 800f458:	461a      	mov	r2, r3
 800f45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45c:	899b      	ldrh	r3, [r3, #12]
 800f45e:	3b01      	subs	r3, #1
 800f460:	4013      	ands	r3, r2
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <find_volume+0x10e>
 800f466:	2301      	movs	r3, #1
 800f468:	e1f1      	b.n	800f84e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f46a:	2300      	movs	r3, #0
 800f46c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f46e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f472:	f7ff ff1d 	bl	800f2b0 <check_fs>
 800f476:	4603      	mov	r3, r0
 800f478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f47c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f480:	2b02      	cmp	r3, #2
 800f482:	d149      	bne.n	800f518 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f484:	2300      	movs	r3, #0
 800f486:	643b      	str	r3, [r7, #64]	; 0x40
 800f488:	e01e      	b.n	800f4c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f498:	4413      	add	r3, r2
 800f49a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	3304      	adds	r3, #4
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d006      	beq.n	800f4b4 <find_volume+0x158>
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	3308      	adds	r3, #8
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fe f8ee 	bl	800d68c <ld_dword>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	e000      	b.n	800f4b6 <find_volume+0x15a>
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	3358      	adds	r3, #88	; 0x58
 800f4bc:	443b      	add	r3, r7
 800f4be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800f4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d9dd      	bls.n	800f48a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d002      	beq.n	800f4de <find_volume+0x182>
 800f4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	3358      	adds	r3, #88	; 0x58
 800f4e4:	443b      	add	r3, r7
 800f4e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f4ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d005      	beq.n	800f4fe <find_volume+0x1a2>
 800f4f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4f6:	f7ff fedb 	bl	800f2b0 <check_fs>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	e000      	b.n	800f500 <find_volume+0x1a4>
 800f4fe:	2303      	movs	r3, #3
 800f500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d905      	bls.n	800f518 <find_volume+0x1bc>
 800f50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f50e:	3301      	adds	r3, #1
 800f510:	643b      	str	r3, [r7, #64]	; 0x40
 800f512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f514:	2b03      	cmp	r3, #3
 800f516:	d9e2      	bls.n	800f4de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d101      	bne.n	800f524 <find_volume+0x1c8>
 800f520:	2301      	movs	r3, #1
 800f522:	e194      	b.n	800f84e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d901      	bls.n	800f530 <find_volume+0x1d4>
 800f52c:	230d      	movs	r3, #13
 800f52e:	e18e      	b.n	800f84e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	3338      	adds	r3, #56	; 0x38
 800f534:	330b      	adds	r3, #11
 800f536:	4618      	mov	r0, r3
 800f538:	f7fe f890 	bl	800d65c <ld_word>
 800f53c:	4603      	mov	r3, r0
 800f53e:	461a      	mov	r2, r3
 800f540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f542:	899b      	ldrh	r3, [r3, #12]
 800f544:	429a      	cmp	r2, r3
 800f546:	d001      	beq.n	800f54c <find_volume+0x1f0>
 800f548:	230d      	movs	r3, #13
 800f54a:	e180      	b.n	800f84e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	3338      	adds	r3, #56	; 0x38
 800f550:	3316      	adds	r3, #22
 800f552:	4618      	mov	r0, r3
 800f554:	f7fe f882 	bl	800d65c <ld_word>
 800f558:	4603      	mov	r3, r0
 800f55a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <find_volume+0x214>
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	3338      	adds	r3, #56	; 0x38
 800f566:	3324      	adds	r3, #36	; 0x24
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe f88f 	bl	800d68c <ld_dword>
 800f56e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f574:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f578:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	789b      	ldrb	r3, [r3, #2]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d005      	beq.n	800f594 <find_volume+0x238>
 800f588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58a:	789b      	ldrb	r3, [r3, #2]
 800f58c:	2b02      	cmp	r3, #2
 800f58e:	d001      	beq.n	800f594 <find_volume+0x238>
 800f590:	230d      	movs	r3, #13
 800f592:	e15c      	b.n	800f84e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f596:	789b      	ldrb	r3, [r3, #2]
 800f598:	461a      	mov	r2, r3
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	fb02 f303 	mul.w	r3, r2, r3
 800f5a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b0:	895b      	ldrh	r3, [r3, #10]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d008      	beq.n	800f5c8 <find_volume+0x26c>
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	895b      	ldrh	r3, [r3, #10]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	895b      	ldrh	r3, [r3, #10]
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <find_volume+0x270>
 800f5c8:	230d      	movs	r3, #13
 800f5ca:	e140      	b.n	800f84e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ce:	3338      	adds	r3, #56	; 0x38
 800f5d0:	3311      	adds	r3, #17
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fe f842 	bl	800d65c <ld_word>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	461a      	mov	r2, r3
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e2:	891b      	ldrh	r3, [r3, #8]
 800f5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5e6:	8992      	ldrh	r2, [r2, #12]
 800f5e8:	0952      	lsrs	r2, r2, #5
 800f5ea:	b292      	uxth	r2, r2
 800f5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5f0:	fb01 f202 	mul.w	r2, r1, r2
 800f5f4:	1a9b      	subs	r3, r3, r2
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d003      	beq.n	800f604 <find_volume+0x2a8>
 800f5fc:	230d      	movs	r3, #13
 800f5fe:	e126      	b.n	800f84e <find_volume+0x4f2>
 800f600:	20004730 	.word	0x20004730

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	3338      	adds	r3, #56	; 0x38
 800f608:	3313      	adds	r3, #19
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fe f826 	bl	800d65c <ld_word>
 800f610:	4603      	mov	r3, r0
 800f612:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <find_volume+0x2cc>
 800f61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61c:	3338      	adds	r3, #56	; 0x38
 800f61e:	3320      	adds	r3, #32
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe f833 	bl	800d68c <ld_dword>
 800f626:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	3338      	adds	r3, #56	; 0x38
 800f62c:	330e      	adds	r3, #14
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe f814 	bl	800d65c <ld_word>
 800f634:	4603      	mov	r3, r0
 800f636:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <find_volume+0x2e6>
 800f63e:	230d      	movs	r3, #13
 800f640:	e105      	b.n	800f84e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f642:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f646:	4413      	add	r3, r2
 800f648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f64a:	8911      	ldrh	r1, [r2, #8]
 800f64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f64e:	8992      	ldrh	r2, [r2, #12]
 800f650:	0952      	lsrs	r2, r2, #5
 800f652:	b292      	uxth	r2, r2
 800f654:	fbb1 f2f2 	udiv	r2, r1, r2
 800f658:	b292      	uxth	r2, r2
 800f65a:	4413      	add	r3, r2
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f65e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f662:	429a      	cmp	r2, r3
 800f664:	d201      	bcs.n	800f66a <find_volume+0x30e>
 800f666:	230d      	movs	r3, #13
 800f668:	e0f1      	b.n	800f84e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	1ad3      	subs	r3, r2, r3
 800f670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f672:	8952      	ldrh	r2, [r2, #10]
 800f674:	fbb3 f3f2 	udiv	r3, r3, r2
 800f678:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d101      	bne.n	800f684 <find_volume+0x328>
 800f680:	230d      	movs	r3, #13
 800f682:	e0e4      	b.n	800f84e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f684:	2303      	movs	r3, #3
 800f686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f690:	4293      	cmp	r3, r2
 800f692:	d802      	bhi.n	800f69a <find_volume+0x33e>
 800f694:	2302      	movs	r3, #2
 800f696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d802      	bhi.n	800f6aa <find_volume+0x34e>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	1c9a      	adds	r2, r3, #2
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f6b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6bc:	441a      	add	r2, r3
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f6c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	441a      	add	r2, r3
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d11e      	bne.n	800f712 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	3338      	adds	r3, #56	; 0x38
 800f6d8:	332a      	adds	r3, #42	; 0x2a
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fd ffbe 	bl	800d65c <ld_word>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <find_volume+0x38e>
 800f6e6:	230d      	movs	r3, #13
 800f6e8:	e0b1      	b.n	800f84e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ec:	891b      	ldrh	r3, [r3, #8]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d001      	beq.n	800f6f6 <find_volume+0x39a>
 800f6f2:	230d      	movs	r3, #13
 800f6f4:	e0ab      	b.n	800f84e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	3338      	adds	r3, #56	; 0x38
 800f6fa:	332c      	adds	r3, #44	; 0x2c
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fd ffc5 	bl	800d68c <ld_dword>
 800f702:	4602      	mov	r2, r0
 800f704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f706:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	647b      	str	r3, [r7, #68]	; 0x44
 800f710:	e01f      	b.n	800f752 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f714:	891b      	ldrh	r3, [r3, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <find_volume+0x3c2>
 800f71a:	230d      	movs	r3, #13
 800f71c:	e097      	b.n	800f84e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f724:	441a      	add	r2, r3
 800f726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f728:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f72a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f72e:	2b02      	cmp	r3, #2
 800f730:	d103      	bne.n	800f73a <find_volume+0x3de>
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	69db      	ldr	r3, [r3, #28]
 800f736:	005b      	lsls	r3, r3, #1
 800f738:	e00a      	b.n	800f750 <find_volume+0x3f4>
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	69da      	ldr	r2, [r3, #28]
 800f73e:	4613      	mov	r3, r2
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	085a      	lsrs	r2, r3, #1
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	69db      	ldr	r3, [r3, #28]
 800f74a:	f003 0301 	and.w	r3, r3, #1
 800f74e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f750:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f754:	6a1a      	ldr	r2, [r3, #32]
 800f756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f758:	899b      	ldrh	r3, [r3, #12]
 800f75a:	4619      	mov	r1, r3
 800f75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f75e:	440b      	add	r3, r1
 800f760:	3b01      	subs	r3, #1
 800f762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f764:	8989      	ldrh	r1, [r1, #12]
 800f766:	fbb3 f3f1 	udiv	r3, r3, r1
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d201      	bcs.n	800f772 <find_volume+0x416>
 800f76e:	230d      	movs	r3, #13
 800f770:	e06d      	b.n	800f84e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	619a      	str	r2, [r3, #24]
 800f77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77c:	699a      	ldr	r2, [r3, #24]
 800f77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f780:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	2280      	movs	r2, #128	; 0x80
 800f786:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d149      	bne.n	800f824 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f792:	3338      	adds	r3, #56	; 0x38
 800f794:	3330      	adds	r3, #48	; 0x30
 800f796:	4618      	mov	r0, r3
 800f798:	f7fd ff60 	bl	800d65c <ld_word>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d140      	bne.n	800f824 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7aa:	f7fe fa07 	bl	800dbbc <move_window>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d137      	bne.n	800f824 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	3338      	adds	r3, #56	; 0x38
 800f7be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fd ff4a 	bl	800d65c <ld_word>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d127      	bne.n	800f824 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	3338      	adds	r3, #56	; 0x38
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fd ff57 	bl	800d68c <ld_dword>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <find_volume+0x4fc>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d11e      	bne.n	800f824 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	3338      	adds	r3, #56	; 0x38
 800f7ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fd ff4c 	bl	800d68c <ld_dword>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	4a19      	ldr	r2, [pc, #100]	; (800f85c <find_volume+0x500>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d113      	bne.n	800f824 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	3338      	adds	r3, #56	; 0x38
 800f800:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f804:	4618      	mov	r0, r3
 800f806:	f7fd ff41 	bl	800d68c <ld_dword>
 800f80a:	4602      	mov	r2, r0
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f812:	3338      	adds	r3, #56	; 0x38
 800f814:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fd ff37 	bl	800d68c <ld_dword>
 800f81e:	4602      	mov	r2, r0
 800f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f822:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f826:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f82a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f82c:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <find_volume+0x504>)
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	3301      	adds	r3, #1
 800f832:	b29a      	uxth	r2, r3
 800f834:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <find_volume+0x504>)
 800f836:	801a      	strh	r2, [r3, #0]
 800f838:	4b09      	ldr	r3, [pc, #36]	; (800f860 <find_volume+0x504>)
 800f83a:	881a      	ldrh	r2, [r3, #0]
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	4a08      	ldr	r2, [pc, #32]	; (800f864 <find_volume+0x508>)
 800f844:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f846:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f848:	f7fe f950 	bl	800daec <clear_lock>
#endif
	return FR_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3758      	adds	r7, #88	; 0x58
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	41615252 	.word	0x41615252
 800f85c:	61417272 	.word	0x61417272
 800f860:	20004734 	.word	0x20004734
 800f864:	20004758 	.word	0x20004758

0800f868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f872:	2309      	movs	r3, #9
 800f874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d01c      	beq.n	800f8b6 <validate+0x4e>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d018      	beq.n	800f8b6 <validate+0x4e>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d013      	beq.n	800f8b6 <validate+0x4e>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	889a      	ldrh	r2, [r3, #4]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	88db      	ldrh	r3, [r3, #6]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d10c      	bne.n	800f8b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	785b      	ldrb	r3, [r3, #1]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fd fe3c 	bl	800d520 <disk_status>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <validate+0x4e>
			res = FR_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f8b6:	7bfb      	ldrb	r3, [r7, #15]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d102      	bne.n	800f8c2 <validate+0x5a>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	e000      	b.n	800f8c4 <validate+0x5c>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	6013      	str	r3, [r2, #0]
	return res;
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f8e6:	f107 0310 	add.w	r3, r7, #16
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fc9c 	bl	800f228 <get_ldnumber>
 800f8f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	da01      	bge.n	800f8fc <f_mount+0x28>
 800f8f8:	230b      	movs	r3, #11
 800f8fa:	e02b      	b.n	800f954 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f8fc:	4a17      	ldr	r2, [pc, #92]	; (800f95c <f_mount+0x88>)
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f904:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f90c:	69b8      	ldr	r0, [r7, #24]
 800f90e:	f7fe f8ed 	bl	800daec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	2200      	movs	r2, #0
 800f916:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d002      	beq.n	800f924 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	490d      	ldr	r1, [pc, #52]	; (800f95c <f_mount+0x88>)
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <f_mount+0x66>
 800f934:	79fb      	ldrb	r3, [r7, #7]
 800f936:	2b01      	cmp	r3, #1
 800f938:	d001      	beq.n	800f93e <f_mount+0x6a>
 800f93a:	2300      	movs	r3, #0
 800f93c:	e00a      	b.n	800f954 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f93e:	f107 010c 	add.w	r1, r7, #12
 800f942:	f107 0308 	add.w	r3, r7, #8
 800f946:	2200      	movs	r2, #0
 800f948:	4618      	mov	r0, r3
 800f94a:	f7ff fd07 	bl	800f35c <find_volume>
 800f94e:	4603      	mov	r3, r0
 800f950:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f952:	7dfb      	ldrb	r3, [r7, #23]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	20004730 	.word	0x20004730

0800f960 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b09a      	sub	sp, #104	; 0x68
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	4613      	mov	r3, r2
 800f96c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d101      	bne.n	800f978 <f_open+0x18>
 800f974:	2309      	movs	r3, #9
 800f976:	e1bb      	b.n	800fcf0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f978:	79fb      	ldrb	r3, [r7, #7]
 800f97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f97e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f980:	79fa      	ldrb	r2, [r7, #7]
 800f982:	f107 0114 	add.w	r1, r7, #20
 800f986:	f107 0308 	add.w	r3, r7, #8
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff fce6 	bl	800f35c <find_volume>
 800f990:	4603      	mov	r3, r0
 800f992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f040 819f 	bne.w	800fcde <f_open+0x37e>
		dj.obj.fs = fs;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	f107 0318 	add.w	r3, r7, #24
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7ff fbc5 	bl	800f13c <follow_path>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d11a      	bne.n	800f9f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f9c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f9c4:	b25b      	sxtb	r3, r3
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	da03      	bge.n	800f9d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f9ca:	2306      	movs	r3, #6
 800f9cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f9d0:	e011      	b.n	800f9f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	f023 0301 	bic.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	bf14      	ite	ne
 800f9dc:	2301      	movne	r3, #1
 800f9de:	2300      	moveq	r3, #0
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	f107 0318 	add.w	r3, r7, #24
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fd ff36 	bl	800d85c <chk_lock>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f9f6:	79fb      	ldrb	r3, [r7, #7]
 800f9f8:	f003 031c 	and.w	r3, r3, #28
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d07f      	beq.n	800fb00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fa00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d017      	beq.n	800fa38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fa08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa0c:	2b04      	cmp	r3, #4
 800fa0e:	d10e      	bne.n	800fa2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fa10:	f7fd ff80 	bl	800d914 <enq_lock>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d006      	beq.n	800fa28 <f_open+0xc8>
 800fa1a:	f107 0318 	add.w	r3, r7, #24
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff f8dc 	bl	800ebdc <dir_register>
 800fa24:	4603      	mov	r3, r0
 800fa26:	e000      	b.n	800fa2a <f_open+0xca>
 800fa28:	2312      	movs	r3, #18
 800fa2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fa2e:	79fb      	ldrb	r3, [r7, #7]
 800fa30:	f043 0308 	orr.w	r3, r3, #8
 800fa34:	71fb      	strb	r3, [r7, #7]
 800fa36:	e010      	b.n	800fa5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fa38:	7fbb      	ldrb	r3, [r7, #30]
 800fa3a:	f003 0311 	and.w	r3, r3, #17
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d003      	beq.n	800fa4a <f_open+0xea>
					res = FR_DENIED;
 800fa42:	2307      	movs	r3, #7
 800fa44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa48:	e007      	b.n	800fa5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fa4a:	79fb      	ldrb	r3, [r7, #7]
 800fa4c:	f003 0304 	and.w	r3, r3, #4
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <f_open+0xfa>
 800fa54:	2308      	movs	r3, #8
 800fa56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fa5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d168      	bne.n	800fb34 <f_open+0x1d4>
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	f003 0308 	and.w	r3, r3, #8
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d063      	beq.n	800fb34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fa6c:	f7fd fcf6 	bl	800d45c <get_fattime>
 800fa70:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa74:	330e      	adds	r3, #14
 800fa76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fd fe45 	bl	800d708 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	3316      	adds	r3, #22
 800fa82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fd fe3f 	bl	800d708 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8c:	330b      	adds	r3, #11
 800fa8e:	2220      	movs	r2, #32
 800fa90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fe fe17 	bl	800e6cc <ld_clust>
 800fa9e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faa4:	2200      	movs	r2, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe fe2f 	bl	800e70a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	331c      	adds	r3, #28
 800fab0:	2100      	movs	r1, #0
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fd fe28 	bl	800d708 <st_dword>
					fs->wflag = 1;
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	2201      	movs	r2, #1
 800fabc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d037      	beq.n	800fb34 <f_open+0x1d4>
						dw = fs->winsect;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800faca:	f107 0318 	add.w	r3, r7, #24
 800face:	2200      	movs	r2, #0
 800fad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fb1f 	bl	800e116 <remove_chain>
 800fad8:	4603      	mov	r3, r0
 800fada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d126      	bne.n	800fb34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe f866 	bl	800dbbc <move_window>
 800faf0:	4603      	mov	r3, r0
 800faf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fafa:	3a01      	subs	r2, #1
 800fafc:	615a      	str	r2, [r3, #20]
 800fafe:	e019      	b.n	800fb34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fb00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d115      	bne.n	800fb34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fb08:	7fbb      	ldrb	r3, [r7, #30]
 800fb0a:	f003 0310 	and.w	r3, r3, #16
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d003      	beq.n	800fb1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800fb12:	2304      	movs	r3, #4
 800fb14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb18:	e00c      	b.n	800fb34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fb1a:	79fb      	ldrb	r3, [r7, #7]
 800fb1c:	f003 0302 	and.w	r3, r3, #2
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d007      	beq.n	800fb34 <f_open+0x1d4>
 800fb24:	7fbb      	ldrb	r3, [r7, #30]
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d002      	beq.n	800fb34 <f_open+0x1d4>
						res = FR_DENIED;
 800fb2e:	2307      	movs	r3, #7
 800fb30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fb34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d128      	bne.n	800fb8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	f003 0308 	and.w	r3, r3, #8
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fb56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb5c:	79fb      	ldrb	r3, [r7, #7]
 800fb5e:	f023 0301 	bic.w	r3, r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	bf14      	ite	ne
 800fb66:	2301      	movne	r3, #1
 800fb68:	2300      	moveq	r3, #0
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	4611      	mov	r1, r2
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fd feef 	bl	800d958 <inc_lock>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d102      	bne.n	800fb8e <f_open+0x22e>
 800fb88:	2302      	movs	r3, #2
 800fb8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f040 80a3 	bne.w	800fcde <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fe fd94 	bl	800e6cc <ld_clust>
 800fba4:	4602      	mov	r2, r0
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbac:	331c      	adds	r3, #28
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd fd6c 	bl	800d68c <ld_dword>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	88da      	ldrh	r2, [r3, #6]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	79fa      	ldrb	r2, [r7, #7]
 800fbd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3330      	adds	r3, #48	; 0x30
 800fbea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbee:	2100      	movs	r1, #0
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd fdd6 	bl	800d7a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	f003 0320 	and.w	r3, r3, #32
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d06e      	beq.n	800fcde <f_open+0x37e>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d06a      	beq.n	800fcde <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	68da      	ldr	r2, [r3, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	895b      	ldrh	r3, [r3, #10]
 800fc14:	461a      	mov	r2, r3
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	899b      	ldrh	r3, [r3, #12]
 800fc1a:	fb02 f303 	mul.w	r3, r2, r3
 800fc1e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc2c:	e016      	b.n	800fc5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe f87f 	bl	800dd36 <get_fat>
 800fc38:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fc3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d802      	bhi.n	800fc46 <f_open+0x2e6>
 800fc40:	2302      	movs	r3, #2
 800fc42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc4c:	d102      	bne.n	800fc54 <f_open+0x2f4>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d103      	bne.n	800fc6c <f_open+0x30c>
 800fc64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d8e0      	bhi.n	800fc2e <f_open+0x2ce>
				}
				fp->clust = clst;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d131      	bne.n	800fcde <f_open+0x37e>
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	899b      	ldrh	r3, [r3, #12]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc86:	fb01 f202 	mul.w	r2, r1, r2
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d026      	beq.n	800fcde <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fe f82f 	bl	800dcf8 <clust2sect>
 800fc9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d103      	bne.n	800fcaa <f_open+0x34a>
						res = FR_INT_ERR;
 800fca2:	2302      	movs	r3, #2
 800fca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fca8:	e019      	b.n	800fcde <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	899b      	ldrh	r3, [r3, #12]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb8:	441a      	add	r2, r3
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	7858      	ldrb	r0, [r3, #1]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6a1a      	ldr	r2, [r3, #32]
 800fccc:	2301      	movs	r3, #1
 800fcce:	f7fd fc67 	bl	800d5a0 <disk_read>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <f_open+0x37e>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fcde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d002      	beq.n	800fcec <f_open+0x38c>
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3768      	adds	r7, #104	; 0x68
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08c      	sub	sp, #48	; 0x30
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f107 0210 	add.w	r2, r7, #16
 800fd16:	4611      	mov	r1, r2
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7ff fda5 	bl	800f868 <validate>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fd24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d107      	bne.n	800fd3c <f_write+0x44>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	7d5b      	ldrb	r3, [r3, #21]
 800fd30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fd34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <f_write+0x4a>
 800fd3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd40:	e16a      	b.n	8010018 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	7d1b      	ldrb	r3, [r3, #20]
 800fd46:	f003 0302 	and.w	r3, r3, #2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <f_write+0x5a>
 800fd4e:	2307      	movs	r3, #7
 800fd50:	e162      	b.n	8010018 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	699a      	ldr	r2, [r3, #24]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	441a      	add	r2, r3
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	f080 814c 	bcs.w	800fffc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	43db      	mvns	r3, r3
 800fd6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fd6c:	e146      	b.n	800fffc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	699b      	ldr	r3, [r3, #24]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	8992      	ldrh	r2, [r2, #12]
 800fd76:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd7a:	fb01 f202 	mul.w	r2, r1, r2
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f040 80f1 	bne.w	800ff68 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	699b      	ldr	r3, [r3, #24]
 800fd8a:	693a      	ldr	r2, [r7, #16]
 800fd8c:	8992      	ldrh	r2, [r2, #12]
 800fd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	8952      	ldrh	r2, [r2, #10]
 800fd96:	3a01      	subs	r2, #1
 800fd98:	4013      	ands	r3, r2
 800fd9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d143      	bne.n	800fe2a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10c      	bne.n	800fdc4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d11a      	bne.n	800fdec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2100      	movs	r1, #0
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fa10 	bl	800e1e0 <create_chain>
 800fdc0:	62b8      	str	r0, [r7, #40]	; 0x28
 800fdc2:	e013      	b.n	800fdec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d007      	beq.n	800fddc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f7fe fa9c 	bl	800e310 <clmt_clust>
 800fdd8:	62b8      	str	r0, [r7, #40]	; 0x28
 800fdda:	e007      	b.n	800fdec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	69db      	ldr	r3, [r3, #28]
 800fde2:	4619      	mov	r1, r3
 800fde4:	4610      	mov	r0, r2
 800fde6:	f7fe f9fb 	bl	800e1e0 <create_chain>
 800fdea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 8109 	beq.w	8010006 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d104      	bne.n	800fe04 <f_write+0x10c>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2202      	movs	r2, #2
 800fdfe:	755a      	strb	r2, [r3, #21]
 800fe00:	2302      	movs	r3, #2
 800fe02:	e109      	b.n	8010018 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0a:	d104      	bne.n	800fe16 <f_write+0x11e>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	755a      	strb	r2, [r3, #21]
 800fe12:	2301      	movs	r3, #1
 800fe14:	e100      	b.n	8010018 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d102      	bne.n	800fe2a <f_write+0x132>
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	7d1b      	ldrb	r3, [r3, #20]
 800fe2e:	b25b      	sxtb	r3, r3
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	da18      	bge.n	800fe66 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	7858      	ldrb	r0, [r3, #1]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6a1a      	ldr	r2, [r3, #32]
 800fe42:	2301      	movs	r3, #1
 800fe44:	f7fd fbcc 	bl	800d5e0 <disk_write>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d004      	beq.n	800fe58 <f_write+0x160>
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2201      	movs	r2, #1
 800fe52:	755a      	strb	r2, [r3, #21]
 800fe54:	2301      	movs	r3, #1
 800fe56:	e0df      	b.n	8010018 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	7d1b      	ldrb	r3, [r3, #20]
 800fe5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	69db      	ldr	r3, [r3, #28]
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	4610      	mov	r0, r2
 800fe70:	f7fd ff42 	bl	800dcf8 <clust2sect>
 800fe74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d104      	bne.n	800fe86 <f_write+0x18e>
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	755a      	strb	r2, [r3, #21]
 800fe82:	2302      	movs	r3, #2
 800fe84:	e0c8      	b.n	8010018 <f_write+0x320>
			sect += csect;
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	899b      	ldrh	r3, [r3, #12]
 800fe92:	461a      	mov	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fe9c:	6a3b      	ldr	r3, [r7, #32]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d043      	beq.n	800ff2a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	6a3b      	ldr	r3, [r7, #32]
 800fea6:	4413      	add	r3, r2
 800fea8:	693a      	ldr	r2, [r7, #16]
 800feaa:	8952      	ldrh	r2, [r2, #10]
 800feac:	4293      	cmp	r3, r2
 800feae:	d905      	bls.n	800febc <f_write+0x1c4>
					cc = fs->csize - csect;
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	895b      	ldrh	r3, [r3, #10]
 800feb4:	461a      	mov	r2, r3
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	7858      	ldrb	r0, [r3, #1]
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	69f9      	ldr	r1, [r7, #28]
 800fec6:	f7fd fb8b 	bl	800d5e0 <disk_write>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d004      	beq.n	800feda <f_write+0x1e2>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2201      	movs	r2, #1
 800fed4:	755a      	strb	r2, [r3, #21]
 800fed6:	2301      	movs	r3, #1
 800fed8:	e09e      	b.n	8010018 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6a1a      	ldr	r2, [r3, #32]
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	6a3a      	ldr	r2, [r7, #32]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d918      	bls.n	800ff1a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6a1a      	ldr	r2, [r3, #32]
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	8992      	ldrh	r2, [r2, #12]
 800fefa:	fb02 f303 	mul.w	r3, r2, r3
 800fefe:	69fa      	ldr	r2, [r7, #28]
 800ff00:	18d1      	adds	r1, r2, r3
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	899b      	ldrh	r3, [r3, #12]
 800ff06:	461a      	mov	r2, r3
 800ff08:	f7fd fc2a 	bl	800d760 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	7d1b      	ldrb	r3, [r3, #20]
 800ff10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	899b      	ldrh	r3, [r3, #12]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	fb02 f303 	mul.w	r3, r2, r3
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ff28:	e04b      	b.n	800ffc2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6a1b      	ldr	r3, [r3, #32]
 800ff2e:	697a      	ldr	r2, [r7, #20]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d016      	beq.n	800ff62 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	699a      	ldr	r2, [r3, #24]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d210      	bcs.n	800ff62 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	7858      	ldrb	r0, [r3, #1]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	697a      	ldr	r2, [r7, #20]
 800ff4e:	f7fd fb27 	bl	800d5a0 <disk_read>
 800ff52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d004      	beq.n	800ff62 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	755a      	strb	r2, [r3, #21]
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e05a      	b.n	8010018 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	899b      	ldrh	r3, [r3, #12]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	693a      	ldr	r2, [r7, #16]
 800ff74:	8992      	ldrh	r2, [r2, #12]
 800ff76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff7a:	fb01 f202 	mul.w	r2, r1, r2
 800ff7e:	1a9b      	subs	r3, r3, r2
 800ff80:	1ac3      	subs	r3, r0, r3
 800ff82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ff84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d901      	bls.n	800ff90 <f_write+0x298>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	8992      	ldrh	r2, [r2, #12]
 800ff9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffa2:	fb00 f202 	mul.w	r2, r0, r2
 800ffa6:	1a9b      	subs	r3, r3, r2
 800ffa8:	440b      	add	r3, r1
 800ffaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffac:	69f9      	ldr	r1, [r7, #28]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fd fbd6 	bl	800d760 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	7d1b      	ldrb	r3, [r3, #20]
 800ffb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ffc2:	69fa      	ldr	r2, [r7, #28]
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	4413      	add	r3, r2
 800ffc8:	61fb      	str	r3, [r7, #28]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	699a      	ldr	r2, [r3, #24]
 800ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd0:	441a      	add	r2, r3
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	619a      	str	r2, [r3, #24]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	bf38      	it	cc
 800ffe2:	461a      	movcc	r2, r3
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	60da      	str	r2, [r3, #12]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	441a      	add	r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f47f aeb5 	bne.w	800fd6e <f_write+0x76>
 8010004:	e000      	b.n	8010008 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010006:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	7d1b      	ldrb	r3, [r3, #20]
 801000c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010010:	b2da      	uxtb	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3730      	adds	r7, #48	; 0x30
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f107 0208 	add.w	r2, r7, #8
 801002e:	4611      	mov	r1, r2
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff fc19 	bl	800f868 <validate>
 8010036:	4603      	mov	r3, r0
 8010038:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801003a:	7dfb      	ldrb	r3, [r7, #23]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d168      	bne.n	8010112 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d1b      	ldrb	r3, [r3, #20]
 8010044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010048:	2b00      	cmp	r3, #0
 801004a:	d062      	beq.n	8010112 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	7d1b      	ldrb	r3, [r3, #20]
 8010050:	b25b      	sxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	da15      	bge.n	8010082 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	7858      	ldrb	r0, [r3, #1]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6a1a      	ldr	r2, [r3, #32]
 8010064:	2301      	movs	r3, #1
 8010066:	f7fd fabb 	bl	800d5e0 <disk_write>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <f_sync+0x54>
 8010070:	2301      	movs	r3, #1
 8010072:	e04f      	b.n	8010114 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	7d1b      	ldrb	r3, [r3, #20]
 8010078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801007c:	b2da      	uxtb	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010082:	f7fd f9eb 	bl	800d45c <get_fattime>
 8010086:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010088:	68ba      	ldr	r2, [r7, #8]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	4619      	mov	r1, r3
 8010090:	4610      	mov	r0, r2
 8010092:	f7fd fd93 	bl	800dbbc <move_window>
 8010096:	4603      	mov	r3, r0
 8010098:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801009a:	7dfb      	ldrb	r3, [r7, #23]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d138      	bne.n	8010112 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	330b      	adds	r3, #11
 80100aa:	781a      	ldrb	r2, [r3, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	330b      	adds	r3, #11
 80100b0:	f042 0220 	orr.w	r2, r2, #32
 80100b4:	b2d2      	uxtb	r2, r2
 80100b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6818      	ldr	r0, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	461a      	mov	r2, r3
 80100c2:	68f9      	ldr	r1, [r7, #12]
 80100c4:	f7fe fb21 	bl	800e70a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f103 021c 	add.w	r2, r3, #28
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	4619      	mov	r1, r3
 80100d4:	4610      	mov	r0, r2
 80100d6:	f7fd fb17 	bl	800d708 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3316      	adds	r3, #22
 80100de:	6939      	ldr	r1, [r7, #16]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fd fb11 	bl	800d708 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	3312      	adds	r3, #18
 80100ea:	2100      	movs	r1, #0
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fd faf0 	bl	800d6d2 <st_word>
					fs->wflag = 1;
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	2201      	movs	r2, #1
 80100f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fd fd8c 	bl	800dc18 <sync_fs>
 8010100:	4603      	mov	r3, r0
 8010102:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	7d1b      	ldrb	r3, [r3, #20]
 8010108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801010c:	b2da      	uxtb	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010112:	7dfb      	ldrb	r3, [r7, #23]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3718      	adds	r7, #24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff ff7b 	bl	8010020 <f_sync>
 801012a:	4603      	mov	r3, r0
 801012c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801012e:	7bfb      	ldrb	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d118      	bne.n	8010166 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f107 0208 	add.w	r2, r7, #8
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fb93 	bl	800f868 <validate>
 8010142:	4603      	mov	r3, r0
 8010144:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10c      	bne.n	8010166 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	691b      	ldr	r3, [r3, #16]
 8010150:	4618      	mov	r0, r3
 8010152:	f7fd fc8f 	bl	800da74 <dec_lock>
 8010156:	4603      	mov	r3, r0
 8010158:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d102      	bne.n	8010166 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010166:	7bfb      	ldrb	r3, [r7, #15]
}
 8010168:	4618      	mov	r0, r3
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b092      	sub	sp, #72	; 0x48
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801017c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010180:	f107 030c 	add.w	r3, r7, #12
 8010184:	2200      	movs	r2, #0
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff f8e8 	bl	800f35c <find_volume>
 801018c:	4603      	mov	r3, r0
 801018e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010192:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010196:	2b00      	cmp	r3, #0
 8010198:	f040 8099 	bne.w	80102ce <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801019c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	699a      	ldr	r2, [r3, #24]
 80101a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a8:	69db      	ldr	r3, [r3, #28]
 80101aa:	3b02      	subs	r3, #2
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d804      	bhi.n	80101ba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80101b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b2:	699a      	ldr	r2, [r3, #24]
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	e089      	b.n	80102ce <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80101be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d128      	bne.n	8010218 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80101c6:	2302      	movs	r3, #2
 80101c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101cc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80101ce:	f107 0314 	add.w	r3, r7, #20
 80101d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fd fdae 	bl	800dd36 <get_fat>
 80101da:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e2:	d103      	bne.n	80101ec <f_getfree+0x7c>
 80101e4:	2301      	movs	r3, #1
 80101e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80101ea:	e063      	b.n	80102b4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d103      	bne.n	80101fa <f_getfree+0x8a>
 80101f2:	2302      	movs	r3, #2
 80101f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80101f8:	e05c      	b.n	80102b4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d102      	bne.n	8010206 <f_getfree+0x96>
 8010200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010202:	3301      	adds	r3, #1
 8010204:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010208:	3301      	adds	r3, #1
 801020a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801020c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010212:	429a      	cmp	r2, r3
 8010214:	d3db      	bcc.n	80101ce <f_getfree+0x5e>
 8010216:	e04d      	b.n	80102b4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	69db      	ldr	r3, [r3, #28]
 801021c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801021e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010222:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	637b      	str	r3, [r7, #52]	; 0x34
 8010228:	2300      	movs	r3, #0
 801022a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801022c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022e:	2b00      	cmp	r3, #0
 8010230:	d113      	bne.n	801025a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	63ba      	str	r2, [r7, #56]	; 0x38
 801023a:	4619      	mov	r1, r3
 801023c:	f7fd fcbe 	bl	800dbbc <move_window>
 8010240:	4603      	mov	r3, r0
 8010242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010246:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801024a:	2b00      	cmp	r3, #0
 801024c:	d131      	bne.n	80102b2 <f_getfree+0x142>
							p = fs->win;
 801024e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010250:	3338      	adds	r3, #56	; 0x38
 8010252:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010256:	899b      	ldrh	r3, [r3, #12]
 8010258:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	2b02      	cmp	r3, #2
 8010260:	d10f      	bne.n	8010282 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010264:	f7fd f9fa 	bl	800d65c <ld_word>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d102      	bne.n	8010274 <f_getfree+0x104>
 801026e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010270:	3301      	adds	r3, #1
 8010272:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010276:	3302      	adds	r3, #2
 8010278:	633b      	str	r3, [r7, #48]	; 0x30
 801027a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801027c:	3b02      	subs	r3, #2
 801027e:	637b      	str	r3, [r7, #52]	; 0x34
 8010280:	e010      	b.n	80102a4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010284:	f7fd fa02 	bl	800d68c <ld_dword>
 8010288:	4603      	mov	r3, r0
 801028a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801028e:	2b00      	cmp	r3, #0
 8010290:	d102      	bne.n	8010298 <f_getfree+0x128>
 8010292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010294:	3301      	adds	r3, #1
 8010296:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029a:	3304      	adds	r3, #4
 801029c:	633b      	str	r3, [r7, #48]	; 0x30
 801029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a0:	3b04      	subs	r3, #4
 80102a2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80102a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102a6:	3b01      	subs	r3, #1
 80102a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d1bd      	bne.n	801022c <f_getfree+0xbc>
 80102b0:	e000      	b.n	80102b4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80102b2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102b8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102be:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	791a      	ldrb	r2, [r3, #4]
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	f042 0201 	orr.w	r2, r2, #1
 80102ca:	b2d2      	uxtb	r2, r2
 80102cc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80102ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3748      	adds	r7, #72	; 0x48
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b084      	sub	sp, #16
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	460b      	mov	r3, r1
 80102e4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80102e6:	78fb      	ldrb	r3, [r7, #3]
 80102e8:	2b0a      	cmp	r3, #10
 80102ea:	d103      	bne.n	80102f4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80102ec:	210d      	movs	r1, #13
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff fff3 	bl	80102da <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	db25      	blt.n	801034c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	1c5a      	adds	r2, r3, #1
 8010304:	60fa      	str	r2, [r7, #12]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	4413      	add	r3, r2
 801030a:	78fa      	ldrb	r2, [r7, #3]
 801030c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b3c      	cmp	r3, #60	; 0x3c
 8010312:	dd12      	ble.n	801033a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f103 010c 	add.w	r1, r3, #12
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	f107 0308 	add.w	r3, r7, #8
 8010324:	f7ff fce8 	bl	800fcf8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	429a      	cmp	r2, r3
 801032e:	d101      	bne.n	8010334 <putc_bfd+0x5a>
 8010330:	2300      	movs	r3, #0
 8010332:	e001      	b.n	8010338 <putc_bfd+0x5e>
 8010334:	f04f 33ff 	mov.w	r3, #4294967295
 8010338:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	609a      	str	r2, [r3, #8]
 801034a:	e000      	b.n	801034e <putc_bfd+0x74>
	if (i < 0) return;
 801034c:	bf00      	nop
}
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	db16      	blt.n	8010392 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f103 010c 	add.w	r1, r3, #12
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	461a      	mov	r2, r3
 8010374:	f107 030c 	add.w	r3, r7, #12
 8010378:	f7ff fcbe 	bl	800fcf8 <f_write>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d107      	bne.n	8010392 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	4293      	cmp	r3, r2
 801038a:	d102      	bne.n	8010392 <putc_flush+0x3e>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	e001      	b.n	8010396 <putc_flush+0x42>
	return EOF;
 8010392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	683a      	ldr	r2, [r7, #0]
 80103ac:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	605a      	str	r2, [r3, #4]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	685a      	ldr	r2, [r3, #4]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	609a      	str	r2, [r3, #8]
}
 80103bc:	bf00      	nop
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80103c8:	b40e      	push	{r1, r2, r3}
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b0a7      	sub	sp, #156	; 0x9c
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80103d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	f7ff ffe0 	bl	801039e <putc_init>

	va_start(arp, fmt);
 80103de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80103e2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80103e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80103f4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 81f2 	beq.w	80107e2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80103fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010402:	2b25      	cmp	r3, #37	; 0x25
 8010404:	d008      	beq.n	8010418 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010406:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801040a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801040e:	4611      	mov	r1, r2
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff ff62 	bl	80102da <putc_bfd>
			continue;
 8010416:	e1e3      	b.n	80107e0 <f_printf+0x418>
		}
		w = f = 0;
 8010418:	2300      	movs	r3, #0
 801041a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801041e:	2300      	movs	r3, #0
 8010420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010428:	1c5a      	adds	r2, r3, #1
 801042a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010434:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010438:	2b30      	cmp	r3, #48	; 0x30
 801043a:	d10b      	bne.n	8010454 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801043c:	2301      	movs	r3, #1
 801043e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010452:	e024      	b.n	801049e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010454:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010458:	2b2d      	cmp	r3, #45	; 0x2d
 801045a:	d120      	bne.n	801049e <f_printf+0xd6>
				f = 2; c = *fmt++;
 801045c:	2302      	movs	r3, #2
 801045e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010472:	e014      	b.n	801049e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010474:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010478:	4613      	mov	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	4413      	add	r3, r2
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	461a      	mov	r2, r3
 8010482:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010486:	4413      	add	r3, r2
 8010488:	3b30      	subs	r3, #48	; 0x30
 801048a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801048e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010492:	1c5a      	adds	r2, r3, #1
 8010494:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801049e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104a2:	2b2f      	cmp	r3, #47	; 0x2f
 80104a4:	d903      	bls.n	80104ae <f_printf+0xe6>
 80104a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104aa:	2b39      	cmp	r3, #57	; 0x39
 80104ac:	d9e2      	bls.n	8010474 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80104ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104b2:	2b6c      	cmp	r3, #108	; 0x6c
 80104b4:	d003      	beq.n	80104be <f_printf+0xf6>
 80104b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104ba:	2b4c      	cmp	r3, #76	; 0x4c
 80104bc:	d10d      	bne.n	80104da <f_printf+0x112>
			f |= 4; c = *fmt++;
 80104be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80104c2:	f043 0304 	orr.w	r3, r3, #4
 80104c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80104ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80104da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 8181 	beq.w	80107e6 <f_printf+0x41e>
		d = c;
 80104e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80104e8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80104ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80104f0:	2b60      	cmp	r3, #96	; 0x60
 80104f2:	d908      	bls.n	8010506 <f_printf+0x13e>
 80104f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80104f8:	2b7a      	cmp	r3, #122	; 0x7a
 80104fa:	d804      	bhi.n	8010506 <f_printf+0x13e>
 80104fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010500:	3b20      	subs	r3, #32
 8010502:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8010506:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801050a:	3b42      	subs	r3, #66	; 0x42
 801050c:	2b16      	cmp	r3, #22
 801050e:	f200 8098 	bhi.w	8010642 <f_printf+0x27a>
 8010512:	a201      	add	r2, pc, #4	; (adr r2, 8010518 <f_printf+0x150>)
 8010514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010518:	08010623 	.word	0x08010623
 801051c:	0801060b 	.word	0x0801060b
 8010520:	08010633 	.word	0x08010633
 8010524:	08010643 	.word	0x08010643
 8010528:	08010643 	.word	0x08010643
 801052c:	08010643 	.word	0x08010643
 8010530:	08010643 	.word	0x08010643
 8010534:	08010643 	.word	0x08010643
 8010538:	08010643 	.word	0x08010643
 801053c:	08010643 	.word	0x08010643
 8010540:	08010643 	.word	0x08010643
 8010544:	08010643 	.word	0x08010643
 8010548:	08010643 	.word	0x08010643
 801054c:	0801062b 	.word	0x0801062b
 8010550:	08010643 	.word	0x08010643
 8010554:	08010643 	.word	0x08010643
 8010558:	08010643 	.word	0x08010643
 801055c:	08010575 	.word	0x08010575
 8010560:	08010643 	.word	0x08010643
 8010564:	08010633 	.word	0x08010633
 8010568:	08010643 	.word	0x08010643
 801056c:	08010643 	.word	0x08010643
 8010570:	0801063b 	.word	0x0801063b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010576:	1d1a      	adds	r2, r3, #4
 8010578:	67ba      	str	r2, [r7, #120]	; 0x78
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801057e:	2300      	movs	r3, #0
 8010580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010584:	e004      	b.n	8010590 <f_printf+0x1c8>
 8010586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801058a:	3301      	adds	r3, #1
 801058c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010590:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010596:	4413      	add	r3, r2
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1f3      	bne.n	8010586 <f_printf+0x1be>
			if (!(f & 2)) {
 801059e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105a2:	f003 0302 	and.w	r3, r3, #2
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d11a      	bne.n	80105e0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80105aa:	e005      	b.n	80105b8 <f_printf+0x1f0>
 80105ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80105b0:	2120      	movs	r1, #32
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7ff fe91 	bl	80102da <putc_bfd>
 80105b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105bc:	1c5a      	adds	r2, r3, #1
 80105be:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80105c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d8f0      	bhi.n	80105ac <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80105ca:	e009      	b.n	80105e0 <f_printf+0x218>
 80105cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80105ce:	1c5a      	adds	r2, r3, #1
 80105d0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80105d2:	781a      	ldrb	r2, [r3, #0]
 80105d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80105d8:	4611      	mov	r1, r2
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff fe7d 	bl	80102da <putc_bfd>
 80105e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1f1      	bne.n	80105cc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80105e8:	e005      	b.n	80105f6 <f_printf+0x22e>
 80105ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80105ee:	2120      	movs	r1, #32
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7ff fe72 	bl	80102da <putc_bfd>
 80105f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010600:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010604:	429a      	cmp	r2, r3
 8010606:	d8f0      	bhi.n	80105ea <f_printf+0x222>
			continue;
 8010608:	e0ea      	b.n	80107e0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801060a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801060c:	1d1a      	adds	r2, r3, #4
 801060e:	67ba      	str	r2, [r7, #120]	; 0x78
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	b2da      	uxtb	r2, r3
 8010614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff fe5d 	bl	80102da <putc_bfd>
 8010620:	e0de      	b.n	80107e0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010622:	2302      	movs	r3, #2
 8010624:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010628:	e014      	b.n	8010654 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801062a:	2308      	movs	r3, #8
 801062c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010630:	e010      	b.n	8010654 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010632:	230a      	movs	r3, #10
 8010634:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010638:	e00c      	b.n	8010654 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801063a:	2310      	movs	r3, #16
 801063c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010640:	e008      	b.n	8010654 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010642:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801064a:	4611      	mov	r1, r2
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff fe44 	bl	80102da <putc_bfd>
 8010652:	e0c5      	b.n	80107e0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010654:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010658:	f003 0304 	and.w	r3, r3, #4
 801065c:	2b00      	cmp	r3, #0
 801065e:	d004      	beq.n	801066a <f_printf+0x2a2>
 8010660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010662:	1d1a      	adds	r2, r3, #4
 8010664:	67ba      	str	r2, [r7, #120]	; 0x78
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	e00c      	b.n	8010684 <f_printf+0x2bc>
 801066a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801066e:	2b44      	cmp	r3, #68	; 0x44
 8010670:	d104      	bne.n	801067c <f_printf+0x2b4>
 8010672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010674:	1d1a      	adds	r2, r3, #4
 8010676:	67ba      	str	r2, [r7, #120]	; 0x78
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	e003      	b.n	8010684 <f_printf+0x2bc>
 801067c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801067e:	1d1a      	adds	r2, r3, #4
 8010680:	67ba      	str	r2, [r7, #120]	; 0x78
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010688:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801068c:	2b44      	cmp	r3, #68	; 0x44
 801068e:	d10e      	bne.n	80106ae <f_printf+0x2e6>
 8010690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010694:	2b00      	cmp	r3, #0
 8010696:	da0a      	bge.n	80106ae <f_printf+0x2e6>
			v = 0 - v;
 8010698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801069c:	425b      	negs	r3, r3
 801069e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80106a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80106a6:	f043 0308 	orr.w	r3, r3, #8
 80106aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80106b4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80106b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80106c0:	fb01 f202 	mul.w	r2, r1, r2
 80106c4:	1a9b      	subs	r3, r3, r2
 80106c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80106ca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80106ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80106d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80106d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80106da:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80106de:	2b09      	cmp	r3, #9
 80106e0:	d90b      	bls.n	80106fa <f_printf+0x332>
 80106e2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80106e6:	2b78      	cmp	r3, #120	; 0x78
 80106e8:	d101      	bne.n	80106ee <f_printf+0x326>
 80106ea:	2227      	movs	r2, #39	; 0x27
 80106ec:	e000      	b.n	80106f0 <f_printf+0x328>
 80106ee:	2207      	movs	r2, #7
 80106f0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80106f4:	4413      	add	r3, r2
 80106f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80106fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106fe:	1c5a      	adds	r2, r3, #1
 8010700:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010704:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010708:	3230      	adds	r2, #48	; 0x30
 801070a:	b2d2      	uxtb	r2, r2
 801070c:	3398      	adds	r3, #152	; 0x98
 801070e:	443b      	add	r3, r7
 8010710:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010718:	2b00      	cmp	r3, #0
 801071a:	d003      	beq.n	8010724 <f_printf+0x35c>
 801071c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010720:	2b1f      	cmp	r3, #31
 8010722:	d9c7      	bls.n	80106b4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010724:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010728:	f003 0308 	and.w	r3, r3, #8
 801072c:	2b00      	cmp	r3, #0
 801072e:	d009      	beq.n	8010744 <f_printf+0x37c>
 8010730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801073a:	3398      	adds	r3, #152	; 0x98
 801073c:	443b      	add	r3, r7
 801073e:	222d      	movs	r2, #45	; 0x2d
 8010740:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801074c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010750:	f003 0301 	and.w	r3, r3, #1
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <f_printf+0x394>
 8010758:	2330      	movs	r3, #48	; 0x30
 801075a:	e000      	b.n	801075e <f_printf+0x396>
 801075c:	2320      	movs	r3, #32
 801075e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8010762:	e007      	b.n	8010774 <f_printf+0x3ac>
 8010764:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f7ff fdb3 	bl	80102da <putc_bfd>
 8010774:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010778:	f003 0302 	and.w	r3, r3, #2
 801077c:	2b00      	cmp	r3, #0
 801077e:	d108      	bne.n	8010792 <f_printf+0x3ca>
 8010780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010784:	1c5a      	adds	r2, r3, #1
 8010786:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801078a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801078e:	429a      	cmp	r2, r3
 8010790:	d8e8      	bhi.n	8010764 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8010792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010796:	3b01      	subs	r3, #1
 8010798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801079c:	f107 020c 	add.w	r2, r7, #12
 80107a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107a4:	4413      	add	r3, r2
 80107a6:	781a      	ldrb	r2, [r3, #0]
 80107a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107ac:	4611      	mov	r1, r2
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7ff fd93 	bl	80102da <putc_bfd>
		} while (i);
 80107b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1ea      	bne.n	8010792 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80107bc:	e007      	b.n	80107ce <f_printf+0x406>
 80107be:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80107c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107c6:	4611      	mov	r1, r2
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fd86 	bl	80102da <putc_bfd>
 80107ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80107d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80107dc:	429a      	cmp	r2, r3
 80107de:	d8ee      	bhi.n	80107be <f_printf+0x3f6>
		c = *fmt++;
 80107e0:	e600      	b.n	80103e4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80107e2:	bf00      	nop
 80107e4:	e000      	b.n	80107e8 <f_printf+0x420>
		if (!c) break;
 80107e6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80107e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff fdb1 	bl	8010354 <putc_flush>
 80107f2:	4603      	mov	r3, r0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	379c      	adds	r7, #156	; 0x9c
 80107f8:	46bd      	mov	sp, r7
 80107fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80107fe:	b003      	add	sp, #12
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop

08010804 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010804:	b480      	push	{r7}
 8010806:	b087      	sub	sp, #28
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	4613      	mov	r3, r2
 8010810:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010812:	2301      	movs	r3, #1
 8010814:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801081a:	4b1f      	ldr	r3, [pc, #124]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 801081c:	7a5b      	ldrb	r3, [r3, #9]
 801081e:	b2db      	uxtb	r3, r3
 8010820:	2b00      	cmp	r3, #0
 8010822:	d131      	bne.n	8010888 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010824:	4b1c      	ldr	r3, [pc, #112]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 8010826:	7a5b      	ldrb	r3, [r3, #9]
 8010828:	b2db      	uxtb	r3, r3
 801082a:	461a      	mov	r2, r3
 801082c:	4b1a      	ldr	r3, [pc, #104]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 801082e:	2100      	movs	r1, #0
 8010830:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010832:	4b19      	ldr	r3, [pc, #100]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 8010834:	7a5b      	ldrb	r3, [r3, #9]
 8010836:	b2db      	uxtb	r3, r3
 8010838:	4a17      	ldr	r2, [pc, #92]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4413      	add	r3, r2
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010842:	4b15      	ldr	r3, [pc, #84]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 8010844:	7a5b      	ldrb	r3, [r3, #9]
 8010846:	b2db      	uxtb	r3, r3
 8010848:	461a      	mov	r2, r3
 801084a:	4b13      	ldr	r3, [pc, #76]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 801084c:	4413      	add	r3, r2
 801084e:	79fa      	ldrb	r2, [r7, #7]
 8010850:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010852:	4b11      	ldr	r3, [pc, #68]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 8010854:	7a5b      	ldrb	r3, [r3, #9]
 8010856:	b2db      	uxtb	r3, r3
 8010858:	1c5a      	adds	r2, r3, #1
 801085a:	b2d1      	uxtb	r1, r2
 801085c:	4a0e      	ldr	r2, [pc, #56]	; (8010898 <FATFS_LinkDriverEx+0x94>)
 801085e:	7251      	strb	r1, [r2, #9]
 8010860:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010862:	7dbb      	ldrb	r3, [r7, #22]
 8010864:	3330      	adds	r3, #48	; 0x30
 8010866:	b2da      	uxtb	r2, r3
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	3301      	adds	r3, #1
 8010870:	223a      	movs	r2, #58	; 0x3a
 8010872:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	3302      	adds	r3, #2
 8010878:	222f      	movs	r2, #47	; 0x2f
 801087a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	3303      	adds	r3, #3
 8010880:	2200      	movs	r2, #0
 8010882:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010888:	7dfb      	ldrb	r3, [r7, #23]
}
 801088a:	4618      	mov	r0, r3
 801088c:	371c      	adds	r7, #28
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop
 8010898:	20004958 	.word	0x20004958

0801089c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80108a6:	2200      	movs	r2, #0
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff ffaa 	bl	8010804 <FATFS_LinkDriverEx>
 80108b0:	4603      	mov	r3, r0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	4603      	mov	r3, r0
 80108c4:	6039      	str	r1, [r7, #0]
 80108c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80108c8:	88fb      	ldrh	r3, [r7, #6]
 80108ca:	2b7f      	cmp	r3, #127	; 0x7f
 80108cc:	d802      	bhi.n	80108d4 <ff_convert+0x18>
		c = chr;
 80108ce:	88fb      	ldrh	r3, [r7, #6]
 80108d0:	81fb      	strh	r3, [r7, #14]
 80108d2:	e025      	b.n	8010920 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00b      	beq.n	80108f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80108da:	88fb      	ldrh	r3, [r7, #6]
 80108dc:	2bff      	cmp	r3, #255	; 0xff
 80108de:	d805      	bhi.n	80108ec <ff_convert+0x30>
 80108e0:	88fb      	ldrh	r3, [r7, #6]
 80108e2:	3b80      	subs	r3, #128	; 0x80
 80108e4:	4a12      	ldr	r2, [pc, #72]	; (8010930 <ff_convert+0x74>)
 80108e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108ea:	e000      	b.n	80108ee <ff_convert+0x32>
 80108ec:	2300      	movs	r3, #0
 80108ee:	81fb      	strh	r3, [r7, #14]
 80108f0:	e016      	b.n	8010920 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80108f2:	2300      	movs	r3, #0
 80108f4:	81fb      	strh	r3, [r7, #14]
 80108f6:	e009      	b.n	801090c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80108f8:	89fb      	ldrh	r3, [r7, #14]
 80108fa:	4a0d      	ldr	r2, [pc, #52]	; (8010930 <ff_convert+0x74>)
 80108fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010900:	88fa      	ldrh	r2, [r7, #6]
 8010902:	429a      	cmp	r2, r3
 8010904:	d006      	beq.n	8010914 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010906:	89fb      	ldrh	r3, [r7, #14]
 8010908:	3301      	adds	r3, #1
 801090a:	81fb      	strh	r3, [r7, #14]
 801090c:	89fb      	ldrh	r3, [r7, #14]
 801090e:	2b7f      	cmp	r3, #127	; 0x7f
 8010910:	d9f2      	bls.n	80108f8 <ff_convert+0x3c>
 8010912:	e000      	b.n	8010916 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010914:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010916:	89fb      	ldrh	r3, [r7, #14]
 8010918:	3380      	adds	r3, #128	; 0x80
 801091a:	b29b      	uxth	r3, r3
 801091c:	b2db      	uxtb	r3, r3
 801091e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010920:	89fb      	ldrh	r3, [r7, #14]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	08017e20 	.word	0x08017e20

08010934 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010934:	b480      	push	{r7}
 8010936:	b087      	sub	sp, #28
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801093e:	88fb      	ldrh	r3, [r7, #6]
 8010940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010944:	d201      	bcs.n	801094a <ff_wtoupper+0x16>
 8010946:	4b3e      	ldr	r3, [pc, #248]	; (8010a40 <ff_wtoupper+0x10c>)
 8010948:	e000      	b.n	801094c <ff_wtoupper+0x18>
 801094a:	4b3e      	ldr	r3, [pc, #248]	; (8010a44 <ff_wtoupper+0x110>)
 801094c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	1c9a      	adds	r2, r3, #2
 8010952:	617a      	str	r2, [r7, #20]
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010958:	8a7b      	ldrh	r3, [r7, #18]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d068      	beq.n	8010a30 <ff_wtoupper+0xfc>
 801095e:	88fa      	ldrh	r2, [r7, #6]
 8010960:	8a7b      	ldrh	r3, [r7, #18]
 8010962:	429a      	cmp	r2, r3
 8010964:	d364      	bcc.n	8010a30 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	1c9a      	adds	r2, r3, #2
 801096a:	617a      	str	r2, [r7, #20]
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	823b      	strh	r3, [r7, #16]
 8010970:	8a3b      	ldrh	r3, [r7, #16]
 8010972:	0a1b      	lsrs	r3, r3, #8
 8010974:	81fb      	strh	r3, [r7, #14]
 8010976:	8a3b      	ldrh	r3, [r7, #16]
 8010978:	b2db      	uxtb	r3, r3
 801097a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801097c:	88fa      	ldrh	r2, [r7, #6]
 801097e:	8a79      	ldrh	r1, [r7, #18]
 8010980:	8a3b      	ldrh	r3, [r7, #16]
 8010982:	440b      	add	r3, r1
 8010984:	429a      	cmp	r2, r3
 8010986:	da49      	bge.n	8010a1c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010988:	89fb      	ldrh	r3, [r7, #14]
 801098a:	2b08      	cmp	r3, #8
 801098c:	d84f      	bhi.n	8010a2e <ff_wtoupper+0xfa>
 801098e:	a201      	add	r2, pc, #4	; (adr r2, 8010994 <ff_wtoupper+0x60>)
 8010990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010994:	080109b9 	.word	0x080109b9
 8010998:	080109cb 	.word	0x080109cb
 801099c:	080109e1 	.word	0x080109e1
 80109a0:	080109e9 	.word	0x080109e9
 80109a4:	080109f1 	.word	0x080109f1
 80109a8:	080109f9 	.word	0x080109f9
 80109ac:	08010a01 	.word	0x08010a01
 80109b0:	08010a09 	.word	0x08010a09
 80109b4:	08010a11 	.word	0x08010a11
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80109b8:	88fa      	ldrh	r2, [r7, #6]
 80109ba:	8a7b      	ldrh	r3, [r7, #18]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	005b      	lsls	r3, r3, #1
 80109c0:	697a      	ldr	r2, [r7, #20]
 80109c2:	4413      	add	r3, r2
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	80fb      	strh	r3, [r7, #6]
 80109c8:	e027      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80109ca:	88fa      	ldrh	r2, [r7, #6]
 80109cc:	8a7b      	ldrh	r3, [r7, #18]
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	f003 0301 	and.w	r3, r3, #1
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	88fa      	ldrh	r2, [r7, #6]
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	80fb      	strh	r3, [r7, #6]
 80109de:	e01c      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80109e0:	88fb      	ldrh	r3, [r7, #6]
 80109e2:	3b10      	subs	r3, #16
 80109e4:	80fb      	strh	r3, [r7, #6]
 80109e6:	e018      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80109e8:	88fb      	ldrh	r3, [r7, #6]
 80109ea:	3b20      	subs	r3, #32
 80109ec:	80fb      	strh	r3, [r7, #6]
 80109ee:	e014      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80109f0:	88fb      	ldrh	r3, [r7, #6]
 80109f2:	3b30      	subs	r3, #48	; 0x30
 80109f4:	80fb      	strh	r3, [r7, #6]
 80109f6:	e010      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80109f8:	88fb      	ldrh	r3, [r7, #6]
 80109fa:	3b1a      	subs	r3, #26
 80109fc:	80fb      	strh	r3, [r7, #6]
 80109fe:	e00c      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010a00:	88fb      	ldrh	r3, [r7, #6]
 8010a02:	3308      	adds	r3, #8
 8010a04:	80fb      	strh	r3, [r7, #6]
 8010a06:	e008      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010a08:	88fb      	ldrh	r3, [r7, #6]
 8010a0a:	3b50      	subs	r3, #80	; 0x50
 8010a0c:	80fb      	strh	r3, [r7, #6]
 8010a0e:	e004      	b.n	8010a1a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010a10:	88fb      	ldrh	r3, [r7, #6]
 8010a12:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010a16:	80fb      	strh	r3, [r7, #6]
 8010a18:	bf00      	nop
			}
			break;
 8010a1a:	e008      	b.n	8010a2e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010a1c:	89fb      	ldrh	r3, [r7, #14]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d195      	bne.n	801094e <ff_wtoupper+0x1a>
 8010a22:	8a3b      	ldrh	r3, [r7, #16]
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	697a      	ldr	r2, [r7, #20]
 8010a28:	4413      	add	r3, r2
 8010a2a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010a2c:	e78f      	b.n	801094e <ff_wtoupper+0x1a>
			break;
 8010a2e:	bf00      	nop
	}

	return chr;
 8010a30:	88fb      	ldrh	r3, [r7, #6]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	371c      	adds	r7, #28
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	08017f20 	.word	0x08017f20
 8010a44:	08018114 	.word	0x08018114

08010a48 <__errno>:
 8010a48:	4b01      	ldr	r3, [pc, #4]	; (8010a50 <__errno+0x8>)
 8010a4a:	6818      	ldr	r0, [r3, #0]
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	2000002c 	.word	0x2000002c

08010a54 <__libc_init_array>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	4d0d      	ldr	r5, [pc, #52]	; (8010a8c <__libc_init_array+0x38>)
 8010a58:	4c0d      	ldr	r4, [pc, #52]	; (8010a90 <__libc_init_array+0x3c>)
 8010a5a:	1b64      	subs	r4, r4, r5
 8010a5c:	10a4      	asrs	r4, r4, #2
 8010a5e:	2600      	movs	r6, #0
 8010a60:	42a6      	cmp	r6, r4
 8010a62:	d109      	bne.n	8010a78 <__libc_init_array+0x24>
 8010a64:	4d0b      	ldr	r5, [pc, #44]	; (8010a94 <__libc_init_array+0x40>)
 8010a66:	4c0c      	ldr	r4, [pc, #48]	; (8010a98 <__libc_init_array+0x44>)
 8010a68:	f006 ff9c 	bl	80179a4 <_init>
 8010a6c:	1b64      	subs	r4, r4, r5
 8010a6e:	10a4      	asrs	r4, r4, #2
 8010a70:	2600      	movs	r6, #0
 8010a72:	42a6      	cmp	r6, r4
 8010a74:	d105      	bne.n	8010a82 <__libc_init_array+0x2e>
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a7c:	4798      	blx	r3
 8010a7e:	3601      	adds	r6, #1
 8010a80:	e7ee      	b.n	8010a60 <__libc_init_array+0xc>
 8010a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a86:	4798      	blx	r3
 8010a88:	3601      	adds	r6, #1
 8010a8a:	e7f2      	b.n	8010a72 <__libc_init_array+0x1e>
 8010a8c:	08018738 	.word	0x08018738
 8010a90:	08018738 	.word	0x08018738
 8010a94:	08018738 	.word	0x08018738
 8010a98:	0801873c 	.word	0x0801873c

08010a9c <memset>:
 8010a9c:	4402      	add	r2, r0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d100      	bne.n	8010aa6 <memset+0xa>
 8010aa4:	4770      	bx	lr
 8010aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8010aaa:	e7f9      	b.n	8010aa0 <memset+0x4>

08010aac <__cvt>:
 8010aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab0:	ec55 4b10 	vmov	r4, r5, d0
 8010ab4:	2d00      	cmp	r5, #0
 8010ab6:	460e      	mov	r6, r1
 8010ab8:	4619      	mov	r1, r3
 8010aba:	462b      	mov	r3, r5
 8010abc:	bfbb      	ittet	lt
 8010abe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010ac2:	461d      	movlt	r5, r3
 8010ac4:	2300      	movge	r3, #0
 8010ac6:	232d      	movlt	r3, #45	; 0x2d
 8010ac8:	700b      	strb	r3, [r1, #0]
 8010aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010acc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ad0:	4691      	mov	r9, r2
 8010ad2:	f023 0820 	bic.w	r8, r3, #32
 8010ad6:	bfbc      	itt	lt
 8010ad8:	4622      	movlt	r2, r4
 8010ada:	4614      	movlt	r4, r2
 8010adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ae0:	d005      	beq.n	8010aee <__cvt+0x42>
 8010ae2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ae6:	d100      	bne.n	8010aea <__cvt+0x3e>
 8010ae8:	3601      	adds	r6, #1
 8010aea:	2102      	movs	r1, #2
 8010aec:	e000      	b.n	8010af0 <__cvt+0x44>
 8010aee:	2103      	movs	r1, #3
 8010af0:	ab03      	add	r3, sp, #12
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	ab02      	add	r3, sp, #8
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	ec45 4b10 	vmov	d0, r4, r5
 8010afc:	4653      	mov	r3, sl
 8010afe:	4632      	mov	r2, r6
 8010b00:	f001 fe62 	bl	80127c8 <_dtoa_r>
 8010b04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010b08:	4607      	mov	r7, r0
 8010b0a:	d102      	bne.n	8010b12 <__cvt+0x66>
 8010b0c:	f019 0f01 	tst.w	r9, #1
 8010b10:	d022      	beq.n	8010b58 <__cvt+0xac>
 8010b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b16:	eb07 0906 	add.w	r9, r7, r6
 8010b1a:	d110      	bne.n	8010b3e <__cvt+0x92>
 8010b1c:	783b      	ldrb	r3, [r7, #0]
 8010b1e:	2b30      	cmp	r3, #48	; 0x30
 8010b20:	d10a      	bne.n	8010b38 <__cvt+0x8c>
 8010b22:	2200      	movs	r2, #0
 8010b24:	2300      	movs	r3, #0
 8010b26:	4620      	mov	r0, r4
 8010b28:	4629      	mov	r1, r5
 8010b2a:	f7ef ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8010b2e:	b918      	cbnz	r0, 8010b38 <__cvt+0x8c>
 8010b30:	f1c6 0601 	rsb	r6, r6, #1
 8010b34:	f8ca 6000 	str.w	r6, [sl]
 8010b38:	f8da 3000 	ldr.w	r3, [sl]
 8010b3c:	4499      	add	r9, r3
 8010b3e:	2200      	movs	r2, #0
 8010b40:	2300      	movs	r3, #0
 8010b42:	4620      	mov	r0, r4
 8010b44:	4629      	mov	r1, r5
 8010b46:	f7ef ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8010b4a:	b108      	cbz	r0, 8010b50 <__cvt+0xa4>
 8010b4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b50:	2230      	movs	r2, #48	; 0x30
 8010b52:	9b03      	ldr	r3, [sp, #12]
 8010b54:	454b      	cmp	r3, r9
 8010b56:	d307      	bcc.n	8010b68 <__cvt+0xbc>
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b5c:	1bdb      	subs	r3, r3, r7
 8010b5e:	4638      	mov	r0, r7
 8010b60:	6013      	str	r3, [r2, #0]
 8010b62:	b004      	add	sp, #16
 8010b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b68:	1c59      	adds	r1, r3, #1
 8010b6a:	9103      	str	r1, [sp, #12]
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	e7f0      	b.n	8010b52 <__cvt+0xa6>

08010b70 <__exponent>:
 8010b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b72:	4603      	mov	r3, r0
 8010b74:	2900      	cmp	r1, #0
 8010b76:	bfb8      	it	lt
 8010b78:	4249      	neglt	r1, r1
 8010b7a:	f803 2b02 	strb.w	r2, [r3], #2
 8010b7e:	bfb4      	ite	lt
 8010b80:	222d      	movlt	r2, #45	; 0x2d
 8010b82:	222b      	movge	r2, #43	; 0x2b
 8010b84:	2909      	cmp	r1, #9
 8010b86:	7042      	strb	r2, [r0, #1]
 8010b88:	dd2a      	ble.n	8010be0 <__exponent+0x70>
 8010b8a:	f10d 0407 	add.w	r4, sp, #7
 8010b8e:	46a4      	mov	ip, r4
 8010b90:	270a      	movs	r7, #10
 8010b92:	46a6      	mov	lr, r4
 8010b94:	460a      	mov	r2, r1
 8010b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b9a:	fb07 1516 	mls	r5, r7, r6, r1
 8010b9e:	3530      	adds	r5, #48	; 0x30
 8010ba0:	2a63      	cmp	r2, #99	; 0x63
 8010ba2:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ba6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010baa:	4631      	mov	r1, r6
 8010bac:	dcf1      	bgt.n	8010b92 <__exponent+0x22>
 8010bae:	3130      	adds	r1, #48	; 0x30
 8010bb0:	f1ae 0502 	sub.w	r5, lr, #2
 8010bb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010bb8:	1c44      	adds	r4, r0, #1
 8010bba:	4629      	mov	r1, r5
 8010bbc:	4561      	cmp	r1, ip
 8010bbe:	d30a      	bcc.n	8010bd6 <__exponent+0x66>
 8010bc0:	f10d 0209 	add.w	r2, sp, #9
 8010bc4:	eba2 020e 	sub.w	r2, r2, lr
 8010bc8:	4565      	cmp	r5, ip
 8010bca:	bf88      	it	hi
 8010bcc:	2200      	movhi	r2, #0
 8010bce:	4413      	add	r3, r2
 8010bd0:	1a18      	subs	r0, r3, r0
 8010bd2:	b003      	add	sp, #12
 8010bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010bde:	e7ed      	b.n	8010bbc <__exponent+0x4c>
 8010be0:	2330      	movs	r3, #48	; 0x30
 8010be2:	3130      	adds	r1, #48	; 0x30
 8010be4:	7083      	strb	r3, [r0, #2]
 8010be6:	70c1      	strb	r1, [r0, #3]
 8010be8:	1d03      	adds	r3, r0, #4
 8010bea:	e7f1      	b.n	8010bd0 <__exponent+0x60>

08010bec <_printf_float>:
 8010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	ed2d 8b02 	vpush	{d8}
 8010bf4:	b08d      	sub	sp, #52	; 0x34
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010bfc:	4616      	mov	r6, r2
 8010bfe:	461f      	mov	r7, r3
 8010c00:	4605      	mov	r5, r0
 8010c02:	f002 ff3f 	bl	8013a84 <_localeconv_r>
 8010c06:	f8d0 a000 	ldr.w	sl, [r0]
 8010c0a:	4650      	mov	r0, sl
 8010c0c:	f7ef fb00 	bl	8000210 <strlen>
 8010c10:	2300      	movs	r3, #0
 8010c12:	930a      	str	r3, [sp, #40]	; 0x28
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	9305      	str	r3, [sp, #20]
 8010c18:	f8d8 3000 	ldr.w	r3, [r8]
 8010c1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c20:	3307      	adds	r3, #7
 8010c22:	f023 0307 	bic.w	r3, r3, #7
 8010c26:	f103 0208 	add.w	r2, r3, #8
 8010c2a:	f8c8 2000 	str.w	r2, [r8]
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c3e:	9307      	str	r3, [sp, #28]
 8010c40:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c44:	ee08 0a10 	vmov	s16, r0
 8010c48:	4b9f      	ldr	r3, [pc, #636]	; (8010ec8 <_printf_float+0x2dc>)
 8010c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c52:	f7ef ff8b 	bl	8000b6c <__aeabi_dcmpun>
 8010c56:	bb88      	cbnz	r0, 8010cbc <_printf_float+0xd0>
 8010c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c5c:	4b9a      	ldr	r3, [pc, #616]	; (8010ec8 <_printf_float+0x2dc>)
 8010c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c62:	f7ef ff65 	bl	8000b30 <__aeabi_dcmple>
 8010c66:	bb48      	cbnz	r0, 8010cbc <_printf_float+0xd0>
 8010c68:	2200      	movs	r2, #0
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	4649      	mov	r1, r9
 8010c70:	f7ef ff54 	bl	8000b1c <__aeabi_dcmplt>
 8010c74:	b110      	cbz	r0, 8010c7c <_printf_float+0x90>
 8010c76:	232d      	movs	r3, #45	; 0x2d
 8010c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c7c:	4b93      	ldr	r3, [pc, #588]	; (8010ecc <_printf_float+0x2e0>)
 8010c7e:	4894      	ldr	r0, [pc, #592]	; (8010ed0 <_printf_float+0x2e4>)
 8010c80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c84:	bf94      	ite	ls
 8010c86:	4698      	movls	r8, r3
 8010c88:	4680      	movhi	r8, r0
 8010c8a:	2303      	movs	r3, #3
 8010c8c:	6123      	str	r3, [r4, #16]
 8010c8e:	9b05      	ldr	r3, [sp, #20]
 8010c90:	f023 0204 	bic.w	r2, r3, #4
 8010c94:	6022      	str	r2, [r4, #0]
 8010c96:	f04f 0900 	mov.w	r9, #0
 8010c9a:	9700      	str	r7, [sp, #0]
 8010c9c:	4633      	mov	r3, r6
 8010c9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f000 f9d8 	bl	8011058 <_printf_common>
 8010ca8:	3001      	adds	r0, #1
 8010caa:	f040 8090 	bne.w	8010dce <_printf_float+0x1e2>
 8010cae:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb2:	b00d      	add	sp, #52	; 0x34
 8010cb4:	ecbd 8b02 	vpop	{d8}
 8010cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cbc:	4642      	mov	r2, r8
 8010cbe:	464b      	mov	r3, r9
 8010cc0:	4640      	mov	r0, r8
 8010cc2:	4649      	mov	r1, r9
 8010cc4:	f7ef ff52 	bl	8000b6c <__aeabi_dcmpun>
 8010cc8:	b140      	cbz	r0, 8010cdc <_printf_float+0xf0>
 8010cca:	464b      	mov	r3, r9
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	bfbc      	itt	lt
 8010cd0:	232d      	movlt	r3, #45	; 0x2d
 8010cd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cd6:	487f      	ldr	r0, [pc, #508]	; (8010ed4 <_printf_float+0x2e8>)
 8010cd8:	4b7f      	ldr	r3, [pc, #508]	; (8010ed8 <_printf_float+0x2ec>)
 8010cda:	e7d1      	b.n	8010c80 <_printf_float+0x94>
 8010cdc:	6863      	ldr	r3, [r4, #4]
 8010cde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ce2:	9206      	str	r2, [sp, #24]
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	d13f      	bne.n	8010d68 <_printf_float+0x17c>
 8010ce8:	2306      	movs	r3, #6
 8010cea:	6063      	str	r3, [r4, #4]
 8010cec:	9b05      	ldr	r3, [sp, #20]
 8010cee:	6861      	ldr	r1, [r4, #4]
 8010cf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	9303      	str	r3, [sp, #12]
 8010cf8:	ab0a      	add	r3, sp, #40	; 0x28
 8010cfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010cfe:	ab09      	add	r3, sp, #36	; 0x24
 8010d00:	ec49 8b10 	vmov	d0, r8, r9
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	6022      	str	r2, [r4, #0]
 8010d08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f7ff fecd 	bl	8010aac <__cvt>
 8010d12:	9b06      	ldr	r3, [sp, #24]
 8010d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d16:	2b47      	cmp	r3, #71	; 0x47
 8010d18:	4680      	mov	r8, r0
 8010d1a:	d108      	bne.n	8010d2e <_printf_float+0x142>
 8010d1c:	1cc8      	adds	r0, r1, #3
 8010d1e:	db02      	blt.n	8010d26 <_printf_float+0x13a>
 8010d20:	6863      	ldr	r3, [r4, #4]
 8010d22:	4299      	cmp	r1, r3
 8010d24:	dd41      	ble.n	8010daa <_printf_float+0x1be>
 8010d26:	f1ab 0b02 	sub.w	fp, fp, #2
 8010d2a:	fa5f fb8b 	uxtb.w	fp, fp
 8010d2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d32:	d820      	bhi.n	8010d76 <_printf_float+0x18a>
 8010d34:	3901      	subs	r1, #1
 8010d36:	465a      	mov	r2, fp
 8010d38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8010d3e:	f7ff ff17 	bl	8010b70 <__exponent>
 8010d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d44:	1813      	adds	r3, r2, r0
 8010d46:	2a01      	cmp	r2, #1
 8010d48:	4681      	mov	r9, r0
 8010d4a:	6123      	str	r3, [r4, #16]
 8010d4c:	dc02      	bgt.n	8010d54 <_printf_float+0x168>
 8010d4e:	6822      	ldr	r2, [r4, #0]
 8010d50:	07d2      	lsls	r2, r2, #31
 8010d52:	d501      	bpl.n	8010d58 <_printf_float+0x16c>
 8010d54:	3301      	adds	r3, #1
 8010d56:	6123      	str	r3, [r4, #16]
 8010d58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d09c      	beq.n	8010c9a <_printf_float+0xae>
 8010d60:	232d      	movs	r3, #45	; 0x2d
 8010d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d66:	e798      	b.n	8010c9a <_printf_float+0xae>
 8010d68:	9a06      	ldr	r2, [sp, #24]
 8010d6a:	2a47      	cmp	r2, #71	; 0x47
 8010d6c:	d1be      	bne.n	8010cec <_printf_float+0x100>
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1bc      	bne.n	8010cec <_printf_float+0x100>
 8010d72:	2301      	movs	r3, #1
 8010d74:	e7b9      	b.n	8010cea <_printf_float+0xfe>
 8010d76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d7a:	d118      	bne.n	8010dae <_printf_float+0x1c2>
 8010d7c:	2900      	cmp	r1, #0
 8010d7e:	6863      	ldr	r3, [r4, #4]
 8010d80:	dd0b      	ble.n	8010d9a <_printf_float+0x1ae>
 8010d82:	6121      	str	r1, [r4, #16]
 8010d84:	b913      	cbnz	r3, 8010d8c <_printf_float+0x1a0>
 8010d86:	6822      	ldr	r2, [r4, #0]
 8010d88:	07d0      	lsls	r0, r2, #31
 8010d8a:	d502      	bpl.n	8010d92 <_printf_float+0x1a6>
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	440b      	add	r3, r1
 8010d90:	6123      	str	r3, [r4, #16]
 8010d92:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d94:	f04f 0900 	mov.w	r9, #0
 8010d98:	e7de      	b.n	8010d58 <_printf_float+0x16c>
 8010d9a:	b913      	cbnz	r3, 8010da2 <_printf_float+0x1b6>
 8010d9c:	6822      	ldr	r2, [r4, #0]
 8010d9e:	07d2      	lsls	r2, r2, #31
 8010da0:	d501      	bpl.n	8010da6 <_printf_float+0x1ba>
 8010da2:	3302      	adds	r3, #2
 8010da4:	e7f4      	b.n	8010d90 <_printf_float+0x1a4>
 8010da6:	2301      	movs	r3, #1
 8010da8:	e7f2      	b.n	8010d90 <_printf_float+0x1a4>
 8010daa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db0:	4299      	cmp	r1, r3
 8010db2:	db05      	blt.n	8010dc0 <_printf_float+0x1d4>
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	6121      	str	r1, [r4, #16]
 8010db8:	07d8      	lsls	r0, r3, #31
 8010dba:	d5ea      	bpl.n	8010d92 <_printf_float+0x1a6>
 8010dbc:	1c4b      	adds	r3, r1, #1
 8010dbe:	e7e7      	b.n	8010d90 <_printf_float+0x1a4>
 8010dc0:	2900      	cmp	r1, #0
 8010dc2:	bfd4      	ite	le
 8010dc4:	f1c1 0202 	rsble	r2, r1, #2
 8010dc8:	2201      	movgt	r2, #1
 8010dca:	4413      	add	r3, r2
 8010dcc:	e7e0      	b.n	8010d90 <_printf_float+0x1a4>
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	055a      	lsls	r2, r3, #21
 8010dd2:	d407      	bmi.n	8010de4 <_printf_float+0x1f8>
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	4642      	mov	r2, r8
 8010dd8:	4631      	mov	r1, r6
 8010dda:	4628      	mov	r0, r5
 8010ddc:	47b8      	blx	r7
 8010dde:	3001      	adds	r0, #1
 8010de0:	d12c      	bne.n	8010e3c <_printf_float+0x250>
 8010de2:	e764      	b.n	8010cae <_printf_float+0xc2>
 8010de4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010de8:	f240 80e0 	bls.w	8010fac <_printf_float+0x3c0>
 8010dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010df0:	2200      	movs	r2, #0
 8010df2:	2300      	movs	r3, #0
 8010df4:	f7ef fe88 	bl	8000b08 <__aeabi_dcmpeq>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d034      	beq.n	8010e66 <_printf_float+0x27a>
 8010dfc:	4a37      	ldr	r2, [pc, #220]	; (8010edc <_printf_float+0x2f0>)
 8010dfe:	2301      	movs	r3, #1
 8010e00:	4631      	mov	r1, r6
 8010e02:	4628      	mov	r0, r5
 8010e04:	47b8      	blx	r7
 8010e06:	3001      	adds	r0, #1
 8010e08:	f43f af51 	beq.w	8010cae <_printf_float+0xc2>
 8010e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e10:	429a      	cmp	r2, r3
 8010e12:	db02      	blt.n	8010e1a <_printf_float+0x22e>
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	07d8      	lsls	r0, r3, #31
 8010e18:	d510      	bpl.n	8010e3c <_printf_float+0x250>
 8010e1a:	ee18 3a10 	vmov	r3, s16
 8010e1e:	4652      	mov	r2, sl
 8010e20:	4631      	mov	r1, r6
 8010e22:	4628      	mov	r0, r5
 8010e24:	47b8      	blx	r7
 8010e26:	3001      	adds	r0, #1
 8010e28:	f43f af41 	beq.w	8010cae <_printf_float+0xc2>
 8010e2c:	f04f 0800 	mov.w	r8, #0
 8010e30:	f104 091a 	add.w	r9, r4, #26
 8010e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e36:	3b01      	subs	r3, #1
 8010e38:	4543      	cmp	r3, r8
 8010e3a:	dc09      	bgt.n	8010e50 <_printf_float+0x264>
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	079b      	lsls	r3, r3, #30
 8010e40:	f100 8105 	bmi.w	801104e <_printf_float+0x462>
 8010e44:	68e0      	ldr	r0, [r4, #12]
 8010e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	bfb8      	it	lt
 8010e4c:	4618      	movlt	r0, r3
 8010e4e:	e730      	b.n	8010cb2 <_printf_float+0xc6>
 8010e50:	2301      	movs	r3, #1
 8010e52:	464a      	mov	r2, r9
 8010e54:	4631      	mov	r1, r6
 8010e56:	4628      	mov	r0, r5
 8010e58:	47b8      	blx	r7
 8010e5a:	3001      	adds	r0, #1
 8010e5c:	f43f af27 	beq.w	8010cae <_printf_float+0xc2>
 8010e60:	f108 0801 	add.w	r8, r8, #1
 8010e64:	e7e6      	b.n	8010e34 <_printf_float+0x248>
 8010e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	dc39      	bgt.n	8010ee0 <_printf_float+0x2f4>
 8010e6c:	4a1b      	ldr	r2, [pc, #108]	; (8010edc <_printf_float+0x2f0>)
 8010e6e:	2301      	movs	r3, #1
 8010e70:	4631      	mov	r1, r6
 8010e72:	4628      	mov	r0, r5
 8010e74:	47b8      	blx	r7
 8010e76:	3001      	adds	r0, #1
 8010e78:	f43f af19 	beq.w	8010cae <_printf_float+0xc2>
 8010e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e80:	4313      	orrs	r3, r2
 8010e82:	d102      	bne.n	8010e8a <_printf_float+0x29e>
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	07d9      	lsls	r1, r3, #31
 8010e88:	d5d8      	bpl.n	8010e3c <_printf_float+0x250>
 8010e8a:	ee18 3a10 	vmov	r3, s16
 8010e8e:	4652      	mov	r2, sl
 8010e90:	4631      	mov	r1, r6
 8010e92:	4628      	mov	r0, r5
 8010e94:	47b8      	blx	r7
 8010e96:	3001      	adds	r0, #1
 8010e98:	f43f af09 	beq.w	8010cae <_printf_float+0xc2>
 8010e9c:	f04f 0900 	mov.w	r9, #0
 8010ea0:	f104 0a1a 	add.w	sl, r4, #26
 8010ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea6:	425b      	negs	r3, r3
 8010ea8:	454b      	cmp	r3, r9
 8010eaa:	dc01      	bgt.n	8010eb0 <_printf_float+0x2c4>
 8010eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eae:	e792      	b.n	8010dd6 <_printf_float+0x1ea>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	4652      	mov	r2, sl
 8010eb4:	4631      	mov	r1, r6
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	47b8      	blx	r7
 8010eba:	3001      	adds	r0, #1
 8010ebc:	f43f aef7 	beq.w	8010cae <_printf_float+0xc2>
 8010ec0:	f109 0901 	add.w	r9, r9, #1
 8010ec4:	e7ee      	b.n	8010ea4 <_printf_float+0x2b8>
 8010ec6:	bf00      	nop
 8010ec8:	7fefffff 	.word	0x7fefffff
 8010ecc:	080181d4 	.word	0x080181d4
 8010ed0:	080181d8 	.word	0x080181d8
 8010ed4:	080181e0 	.word	0x080181e0
 8010ed8:	080181dc 	.word	0x080181dc
 8010edc:	080185d9 	.word	0x080185d9
 8010ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ee2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	bfa8      	it	ge
 8010ee8:	461a      	movge	r2, r3
 8010eea:	2a00      	cmp	r2, #0
 8010eec:	4691      	mov	r9, r2
 8010eee:	dc37      	bgt.n	8010f60 <_printf_float+0x374>
 8010ef0:	f04f 0b00 	mov.w	fp, #0
 8010ef4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ef8:	f104 021a 	add.w	r2, r4, #26
 8010efc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010efe:	9305      	str	r3, [sp, #20]
 8010f00:	eba3 0309 	sub.w	r3, r3, r9
 8010f04:	455b      	cmp	r3, fp
 8010f06:	dc33      	bgt.n	8010f70 <_printf_float+0x384>
 8010f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	db3b      	blt.n	8010f88 <_printf_float+0x39c>
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	07da      	lsls	r2, r3, #31
 8010f14:	d438      	bmi.n	8010f88 <_printf_float+0x39c>
 8010f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f18:	9a05      	ldr	r2, [sp, #20]
 8010f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f1c:	1a9a      	subs	r2, r3, r2
 8010f1e:	eba3 0901 	sub.w	r9, r3, r1
 8010f22:	4591      	cmp	r9, r2
 8010f24:	bfa8      	it	ge
 8010f26:	4691      	movge	r9, r2
 8010f28:	f1b9 0f00 	cmp.w	r9, #0
 8010f2c:	dc35      	bgt.n	8010f9a <_printf_float+0x3ae>
 8010f2e:	f04f 0800 	mov.w	r8, #0
 8010f32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f36:	f104 0a1a 	add.w	sl, r4, #26
 8010f3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f3e:	1a9b      	subs	r3, r3, r2
 8010f40:	eba3 0309 	sub.w	r3, r3, r9
 8010f44:	4543      	cmp	r3, r8
 8010f46:	f77f af79 	ble.w	8010e3c <_printf_float+0x250>
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	4652      	mov	r2, sl
 8010f4e:	4631      	mov	r1, r6
 8010f50:	4628      	mov	r0, r5
 8010f52:	47b8      	blx	r7
 8010f54:	3001      	adds	r0, #1
 8010f56:	f43f aeaa 	beq.w	8010cae <_printf_float+0xc2>
 8010f5a:	f108 0801 	add.w	r8, r8, #1
 8010f5e:	e7ec      	b.n	8010f3a <_printf_float+0x34e>
 8010f60:	4613      	mov	r3, r2
 8010f62:	4631      	mov	r1, r6
 8010f64:	4642      	mov	r2, r8
 8010f66:	4628      	mov	r0, r5
 8010f68:	47b8      	blx	r7
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	d1c0      	bne.n	8010ef0 <_printf_float+0x304>
 8010f6e:	e69e      	b.n	8010cae <_printf_float+0xc2>
 8010f70:	2301      	movs	r3, #1
 8010f72:	4631      	mov	r1, r6
 8010f74:	4628      	mov	r0, r5
 8010f76:	9205      	str	r2, [sp, #20]
 8010f78:	47b8      	blx	r7
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	f43f ae97 	beq.w	8010cae <_printf_float+0xc2>
 8010f80:	9a05      	ldr	r2, [sp, #20]
 8010f82:	f10b 0b01 	add.w	fp, fp, #1
 8010f86:	e7b9      	b.n	8010efc <_printf_float+0x310>
 8010f88:	ee18 3a10 	vmov	r3, s16
 8010f8c:	4652      	mov	r2, sl
 8010f8e:	4631      	mov	r1, r6
 8010f90:	4628      	mov	r0, r5
 8010f92:	47b8      	blx	r7
 8010f94:	3001      	adds	r0, #1
 8010f96:	d1be      	bne.n	8010f16 <_printf_float+0x32a>
 8010f98:	e689      	b.n	8010cae <_printf_float+0xc2>
 8010f9a:	9a05      	ldr	r2, [sp, #20]
 8010f9c:	464b      	mov	r3, r9
 8010f9e:	4442      	add	r2, r8
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	47b8      	blx	r7
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	d1c1      	bne.n	8010f2e <_printf_float+0x342>
 8010faa:	e680      	b.n	8010cae <_printf_float+0xc2>
 8010fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fae:	2a01      	cmp	r2, #1
 8010fb0:	dc01      	bgt.n	8010fb6 <_printf_float+0x3ca>
 8010fb2:	07db      	lsls	r3, r3, #31
 8010fb4:	d538      	bpl.n	8011028 <_printf_float+0x43c>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	4642      	mov	r2, r8
 8010fba:	4631      	mov	r1, r6
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	47b8      	blx	r7
 8010fc0:	3001      	adds	r0, #1
 8010fc2:	f43f ae74 	beq.w	8010cae <_printf_float+0xc2>
 8010fc6:	ee18 3a10 	vmov	r3, s16
 8010fca:	4652      	mov	r2, sl
 8010fcc:	4631      	mov	r1, r6
 8010fce:	4628      	mov	r0, r5
 8010fd0:	47b8      	blx	r7
 8010fd2:	3001      	adds	r0, #1
 8010fd4:	f43f ae6b 	beq.w	8010cae <_printf_float+0xc2>
 8010fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f7ef fd92 	bl	8000b08 <__aeabi_dcmpeq>
 8010fe4:	b9d8      	cbnz	r0, 801101e <_printf_float+0x432>
 8010fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fe8:	f108 0201 	add.w	r2, r8, #1
 8010fec:	3b01      	subs	r3, #1
 8010fee:	4631      	mov	r1, r6
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	47b8      	blx	r7
 8010ff4:	3001      	adds	r0, #1
 8010ff6:	d10e      	bne.n	8011016 <_printf_float+0x42a>
 8010ff8:	e659      	b.n	8010cae <_printf_float+0xc2>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	4652      	mov	r2, sl
 8010ffe:	4631      	mov	r1, r6
 8011000:	4628      	mov	r0, r5
 8011002:	47b8      	blx	r7
 8011004:	3001      	adds	r0, #1
 8011006:	f43f ae52 	beq.w	8010cae <_printf_float+0xc2>
 801100a:	f108 0801 	add.w	r8, r8, #1
 801100e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011010:	3b01      	subs	r3, #1
 8011012:	4543      	cmp	r3, r8
 8011014:	dcf1      	bgt.n	8010ffa <_printf_float+0x40e>
 8011016:	464b      	mov	r3, r9
 8011018:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801101c:	e6dc      	b.n	8010dd8 <_printf_float+0x1ec>
 801101e:	f04f 0800 	mov.w	r8, #0
 8011022:	f104 0a1a 	add.w	sl, r4, #26
 8011026:	e7f2      	b.n	801100e <_printf_float+0x422>
 8011028:	2301      	movs	r3, #1
 801102a:	4642      	mov	r2, r8
 801102c:	e7df      	b.n	8010fee <_printf_float+0x402>
 801102e:	2301      	movs	r3, #1
 8011030:	464a      	mov	r2, r9
 8011032:	4631      	mov	r1, r6
 8011034:	4628      	mov	r0, r5
 8011036:	47b8      	blx	r7
 8011038:	3001      	adds	r0, #1
 801103a:	f43f ae38 	beq.w	8010cae <_printf_float+0xc2>
 801103e:	f108 0801 	add.w	r8, r8, #1
 8011042:	68e3      	ldr	r3, [r4, #12]
 8011044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011046:	1a5b      	subs	r3, r3, r1
 8011048:	4543      	cmp	r3, r8
 801104a:	dcf0      	bgt.n	801102e <_printf_float+0x442>
 801104c:	e6fa      	b.n	8010e44 <_printf_float+0x258>
 801104e:	f04f 0800 	mov.w	r8, #0
 8011052:	f104 0919 	add.w	r9, r4, #25
 8011056:	e7f4      	b.n	8011042 <_printf_float+0x456>

08011058 <_printf_common>:
 8011058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801105c:	4616      	mov	r6, r2
 801105e:	4699      	mov	r9, r3
 8011060:	688a      	ldr	r2, [r1, #8]
 8011062:	690b      	ldr	r3, [r1, #16]
 8011064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011068:	4293      	cmp	r3, r2
 801106a:	bfb8      	it	lt
 801106c:	4613      	movlt	r3, r2
 801106e:	6033      	str	r3, [r6, #0]
 8011070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011074:	4607      	mov	r7, r0
 8011076:	460c      	mov	r4, r1
 8011078:	b10a      	cbz	r2, 801107e <_printf_common+0x26>
 801107a:	3301      	adds	r3, #1
 801107c:	6033      	str	r3, [r6, #0]
 801107e:	6823      	ldr	r3, [r4, #0]
 8011080:	0699      	lsls	r1, r3, #26
 8011082:	bf42      	ittt	mi
 8011084:	6833      	ldrmi	r3, [r6, #0]
 8011086:	3302      	addmi	r3, #2
 8011088:	6033      	strmi	r3, [r6, #0]
 801108a:	6825      	ldr	r5, [r4, #0]
 801108c:	f015 0506 	ands.w	r5, r5, #6
 8011090:	d106      	bne.n	80110a0 <_printf_common+0x48>
 8011092:	f104 0a19 	add.w	sl, r4, #25
 8011096:	68e3      	ldr	r3, [r4, #12]
 8011098:	6832      	ldr	r2, [r6, #0]
 801109a:	1a9b      	subs	r3, r3, r2
 801109c:	42ab      	cmp	r3, r5
 801109e:	dc26      	bgt.n	80110ee <_printf_common+0x96>
 80110a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110a4:	1e13      	subs	r3, r2, #0
 80110a6:	6822      	ldr	r2, [r4, #0]
 80110a8:	bf18      	it	ne
 80110aa:	2301      	movne	r3, #1
 80110ac:	0692      	lsls	r2, r2, #26
 80110ae:	d42b      	bmi.n	8011108 <_printf_common+0xb0>
 80110b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110b4:	4649      	mov	r1, r9
 80110b6:	4638      	mov	r0, r7
 80110b8:	47c0      	blx	r8
 80110ba:	3001      	adds	r0, #1
 80110bc:	d01e      	beq.n	80110fc <_printf_common+0xa4>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	68e5      	ldr	r5, [r4, #12]
 80110c2:	6832      	ldr	r2, [r6, #0]
 80110c4:	f003 0306 	and.w	r3, r3, #6
 80110c8:	2b04      	cmp	r3, #4
 80110ca:	bf08      	it	eq
 80110cc:	1aad      	subeq	r5, r5, r2
 80110ce:	68a3      	ldr	r3, [r4, #8]
 80110d0:	6922      	ldr	r2, [r4, #16]
 80110d2:	bf0c      	ite	eq
 80110d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110d8:	2500      	movne	r5, #0
 80110da:	4293      	cmp	r3, r2
 80110dc:	bfc4      	itt	gt
 80110de:	1a9b      	subgt	r3, r3, r2
 80110e0:	18ed      	addgt	r5, r5, r3
 80110e2:	2600      	movs	r6, #0
 80110e4:	341a      	adds	r4, #26
 80110e6:	42b5      	cmp	r5, r6
 80110e8:	d11a      	bne.n	8011120 <_printf_common+0xc8>
 80110ea:	2000      	movs	r0, #0
 80110ec:	e008      	b.n	8011100 <_printf_common+0xa8>
 80110ee:	2301      	movs	r3, #1
 80110f0:	4652      	mov	r2, sl
 80110f2:	4649      	mov	r1, r9
 80110f4:	4638      	mov	r0, r7
 80110f6:	47c0      	blx	r8
 80110f8:	3001      	adds	r0, #1
 80110fa:	d103      	bne.n	8011104 <_printf_common+0xac>
 80110fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011104:	3501      	adds	r5, #1
 8011106:	e7c6      	b.n	8011096 <_printf_common+0x3e>
 8011108:	18e1      	adds	r1, r4, r3
 801110a:	1c5a      	adds	r2, r3, #1
 801110c:	2030      	movs	r0, #48	; 0x30
 801110e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011112:	4422      	add	r2, r4
 8011114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801111c:	3302      	adds	r3, #2
 801111e:	e7c7      	b.n	80110b0 <_printf_common+0x58>
 8011120:	2301      	movs	r3, #1
 8011122:	4622      	mov	r2, r4
 8011124:	4649      	mov	r1, r9
 8011126:	4638      	mov	r0, r7
 8011128:	47c0      	blx	r8
 801112a:	3001      	adds	r0, #1
 801112c:	d0e6      	beq.n	80110fc <_printf_common+0xa4>
 801112e:	3601      	adds	r6, #1
 8011130:	e7d9      	b.n	80110e6 <_printf_common+0x8e>
	...

08011134 <_printf_i>:
 8011134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011138:	7e0f      	ldrb	r7, [r1, #24]
 801113a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801113c:	2f78      	cmp	r7, #120	; 0x78
 801113e:	4691      	mov	r9, r2
 8011140:	4680      	mov	r8, r0
 8011142:	460c      	mov	r4, r1
 8011144:	469a      	mov	sl, r3
 8011146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801114a:	d807      	bhi.n	801115c <_printf_i+0x28>
 801114c:	2f62      	cmp	r7, #98	; 0x62
 801114e:	d80a      	bhi.n	8011166 <_printf_i+0x32>
 8011150:	2f00      	cmp	r7, #0
 8011152:	f000 80d8 	beq.w	8011306 <_printf_i+0x1d2>
 8011156:	2f58      	cmp	r7, #88	; 0x58
 8011158:	f000 80a3 	beq.w	80112a2 <_printf_i+0x16e>
 801115c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011164:	e03a      	b.n	80111dc <_printf_i+0xa8>
 8011166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801116a:	2b15      	cmp	r3, #21
 801116c:	d8f6      	bhi.n	801115c <_printf_i+0x28>
 801116e:	a101      	add	r1, pc, #4	; (adr r1, 8011174 <_printf_i+0x40>)
 8011170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011174:	080111cd 	.word	0x080111cd
 8011178:	080111e1 	.word	0x080111e1
 801117c:	0801115d 	.word	0x0801115d
 8011180:	0801115d 	.word	0x0801115d
 8011184:	0801115d 	.word	0x0801115d
 8011188:	0801115d 	.word	0x0801115d
 801118c:	080111e1 	.word	0x080111e1
 8011190:	0801115d 	.word	0x0801115d
 8011194:	0801115d 	.word	0x0801115d
 8011198:	0801115d 	.word	0x0801115d
 801119c:	0801115d 	.word	0x0801115d
 80111a0:	080112ed 	.word	0x080112ed
 80111a4:	08011211 	.word	0x08011211
 80111a8:	080112cf 	.word	0x080112cf
 80111ac:	0801115d 	.word	0x0801115d
 80111b0:	0801115d 	.word	0x0801115d
 80111b4:	0801130f 	.word	0x0801130f
 80111b8:	0801115d 	.word	0x0801115d
 80111bc:	08011211 	.word	0x08011211
 80111c0:	0801115d 	.word	0x0801115d
 80111c4:	0801115d 	.word	0x0801115d
 80111c8:	080112d7 	.word	0x080112d7
 80111cc:	682b      	ldr	r3, [r5, #0]
 80111ce:	1d1a      	adds	r2, r3, #4
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	602a      	str	r2, [r5, #0]
 80111d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111dc:	2301      	movs	r3, #1
 80111de:	e0a3      	b.n	8011328 <_printf_i+0x1f4>
 80111e0:	6820      	ldr	r0, [r4, #0]
 80111e2:	6829      	ldr	r1, [r5, #0]
 80111e4:	0606      	lsls	r6, r0, #24
 80111e6:	f101 0304 	add.w	r3, r1, #4
 80111ea:	d50a      	bpl.n	8011202 <_printf_i+0xce>
 80111ec:	680e      	ldr	r6, [r1, #0]
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	2e00      	cmp	r6, #0
 80111f2:	da03      	bge.n	80111fc <_printf_i+0xc8>
 80111f4:	232d      	movs	r3, #45	; 0x2d
 80111f6:	4276      	negs	r6, r6
 80111f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111fc:	485e      	ldr	r0, [pc, #376]	; (8011378 <_printf_i+0x244>)
 80111fe:	230a      	movs	r3, #10
 8011200:	e019      	b.n	8011236 <_printf_i+0x102>
 8011202:	680e      	ldr	r6, [r1, #0]
 8011204:	602b      	str	r3, [r5, #0]
 8011206:	f010 0f40 	tst.w	r0, #64	; 0x40
 801120a:	bf18      	it	ne
 801120c:	b236      	sxthne	r6, r6
 801120e:	e7ef      	b.n	80111f0 <_printf_i+0xbc>
 8011210:	682b      	ldr	r3, [r5, #0]
 8011212:	6820      	ldr	r0, [r4, #0]
 8011214:	1d19      	adds	r1, r3, #4
 8011216:	6029      	str	r1, [r5, #0]
 8011218:	0601      	lsls	r1, r0, #24
 801121a:	d501      	bpl.n	8011220 <_printf_i+0xec>
 801121c:	681e      	ldr	r6, [r3, #0]
 801121e:	e002      	b.n	8011226 <_printf_i+0xf2>
 8011220:	0646      	lsls	r6, r0, #25
 8011222:	d5fb      	bpl.n	801121c <_printf_i+0xe8>
 8011224:	881e      	ldrh	r6, [r3, #0]
 8011226:	4854      	ldr	r0, [pc, #336]	; (8011378 <_printf_i+0x244>)
 8011228:	2f6f      	cmp	r7, #111	; 0x6f
 801122a:	bf0c      	ite	eq
 801122c:	2308      	moveq	r3, #8
 801122e:	230a      	movne	r3, #10
 8011230:	2100      	movs	r1, #0
 8011232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011236:	6865      	ldr	r5, [r4, #4]
 8011238:	60a5      	str	r5, [r4, #8]
 801123a:	2d00      	cmp	r5, #0
 801123c:	bfa2      	ittt	ge
 801123e:	6821      	ldrge	r1, [r4, #0]
 8011240:	f021 0104 	bicge.w	r1, r1, #4
 8011244:	6021      	strge	r1, [r4, #0]
 8011246:	b90e      	cbnz	r6, 801124c <_printf_i+0x118>
 8011248:	2d00      	cmp	r5, #0
 801124a:	d04d      	beq.n	80112e8 <_printf_i+0x1b4>
 801124c:	4615      	mov	r5, r2
 801124e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011252:	fb03 6711 	mls	r7, r3, r1, r6
 8011256:	5dc7      	ldrb	r7, [r0, r7]
 8011258:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801125c:	4637      	mov	r7, r6
 801125e:	42bb      	cmp	r3, r7
 8011260:	460e      	mov	r6, r1
 8011262:	d9f4      	bls.n	801124e <_printf_i+0x11a>
 8011264:	2b08      	cmp	r3, #8
 8011266:	d10b      	bne.n	8011280 <_printf_i+0x14c>
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	07de      	lsls	r6, r3, #31
 801126c:	d508      	bpl.n	8011280 <_printf_i+0x14c>
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	6861      	ldr	r1, [r4, #4]
 8011272:	4299      	cmp	r1, r3
 8011274:	bfde      	ittt	le
 8011276:	2330      	movle	r3, #48	; 0x30
 8011278:	f805 3c01 	strble.w	r3, [r5, #-1]
 801127c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011280:	1b52      	subs	r2, r2, r5
 8011282:	6122      	str	r2, [r4, #16]
 8011284:	f8cd a000 	str.w	sl, [sp]
 8011288:	464b      	mov	r3, r9
 801128a:	aa03      	add	r2, sp, #12
 801128c:	4621      	mov	r1, r4
 801128e:	4640      	mov	r0, r8
 8011290:	f7ff fee2 	bl	8011058 <_printf_common>
 8011294:	3001      	adds	r0, #1
 8011296:	d14c      	bne.n	8011332 <_printf_i+0x1fe>
 8011298:	f04f 30ff 	mov.w	r0, #4294967295
 801129c:	b004      	add	sp, #16
 801129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112a2:	4835      	ldr	r0, [pc, #212]	; (8011378 <_printf_i+0x244>)
 80112a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80112a8:	6829      	ldr	r1, [r5, #0]
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80112b0:	6029      	str	r1, [r5, #0]
 80112b2:	061d      	lsls	r5, r3, #24
 80112b4:	d514      	bpl.n	80112e0 <_printf_i+0x1ac>
 80112b6:	07df      	lsls	r7, r3, #31
 80112b8:	bf44      	itt	mi
 80112ba:	f043 0320 	orrmi.w	r3, r3, #32
 80112be:	6023      	strmi	r3, [r4, #0]
 80112c0:	b91e      	cbnz	r6, 80112ca <_printf_i+0x196>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	f023 0320 	bic.w	r3, r3, #32
 80112c8:	6023      	str	r3, [r4, #0]
 80112ca:	2310      	movs	r3, #16
 80112cc:	e7b0      	b.n	8011230 <_printf_i+0xfc>
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	f043 0320 	orr.w	r3, r3, #32
 80112d4:	6023      	str	r3, [r4, #0]
 80112d6:	2378      	movs	r3, #120	; 0x78
 80112d8:	4828      	ldr	r0, [pc, #160]	; (801137c <_printf_i+0x248>)
 80112da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112de:	e7e3      	b.n	80112a8 <_printf_i+0x174>
 80112e0:	0659      	lsls	r1, r3, #25
 80112e2:	bf48      	it	mi
 80112e4:	b2b6      	uxthmi	r6, r6
 80112e6:	e7e6      	b.n	80112b6 <_printf_i+0x182>
 80112e8:	4615      	mov	r5, r2
 80112ea:	e7bb      	b.n	8011264 <_printf_i+0x130>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	6826      	ldr	r6, [r4, #0]
 80112f0:	6961      	ldr	r1, [r4, #20]
 80112f2:	1d18      	adds	r0, r3, #4
 80112f4:	6028      	str	r0, [r5, #0]
 80112f6:	0635      	lsls	r5, r6, #24
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	d501      	bpl.n	8011300 <_printf_i+0x1cc>
 80112fc:	6019      	str	r1, [r3, #0]
 80112fe:	e002      	b.n	8011306 <_printf_i+0x1d2>
 8011300:	0670      	lsls	r0, r6, #25
 8011302:	d5fb      	bpl.n	80112fc <_printf_i+0x1c8>
 8011304:	8019      	strh	r1, [r3, #0]
 8011306:	2300      	movs	r3, #0
 8011308:	6123      	str	r3, [r4, #16]
 801130a:	4615      	mov	r5, r2
 801130c:	e7ba      	b.n	8011284 <_printf_i+0x150>
 801130e:	682b      	ldr	r3, [r5, #0]
 8011310:	1d1a      	adds	r2, r3, #4
 8011312:	602a      	str	r2, [r5, #0]
 8011314:	681d      	ldr	r5, [r3, #0]
 8011316:	6862      	ldr	r2, [r4, #4]
 8011318:	2100      	movs	r1, #0
 801131a:	4628      	mov	r0, r5
 801131c:	f7ee ff80 	bl	8000220 <memchr>
 8011320:	b108      	cbz	r0, 8011326 <_printf_i+0x1f2>
 8011322:	1b40      	subs	r0, r0, r5
 8011324:	6060      	str	r0, [r4, #4]
 8011326:	6863      	ldr	r3, [r4, #4]
 8011328:	6123      	str	r3, [r4, #16]
 801132a:	2300      	movs	r3, #0
 801132c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011330:	e7a8      	b.n	8011284 <_printf_i+0x150>
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	462a      	mov	r2, r5
 8011336:	4649      	mov	r1, r9
 8011338:	4640      	mov	r0, r8
 801133a:	47d0      	blx	sl
 801133c:	3001      	adds	r0, #1
 801133e:	d0ab      	beq.n	8011298 <_printf_i+0x164>
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	079b      	lsls	r3, r3, #30
 8011344:	d413      	bmi.n	801136e <_printf_i+0x23a>
 8011346:	68e0      	ldr	r0, [r4, #12]
 8011348:	9b03      	ldr	r3, [sp, #12]
 801134a:	4298      	cmp	r0, r3
 801134c:	bfb8      	it	lt
 801134e:	4618      	movlt	r0, r3
 8011350:	e7a4      	b.n	801129c <_printf_i+0x168>
 8011352:	2301      	movs	r3, #1
 8011354:	4632      	mov	r2, r6
 8011356:	4649      	mov	r1, r9
 8011358:	4640      	mov	r0, r8
 801135a:	47d0      	blx	sl
 801135c:	3001      	adds	r0, #1
 801135e:	d09b      	beq.n	8011298 <_printf_i+0x164>
 8011360:	3501      	adds	r5, #1
 8011362:	68e3      	ldr	r3, [r4, #12]
 8011364:	9903      	ldr	r1, [sp, #12]
 8011366:	1a5b      	subs	r3, r3, r1
 8011368:	42ab      	cmp	r3, r5
 801136a:	dcf2      	bgt.n	8011352 <_printf_i+0x21e>
 801136c:	e7eb      	b.n	8011346 <_printf_i+0x212>
 801136e:	2500      	movs	r5, #0
 8011370:	f104 0619 	add.w	r6, r4, #25
 8011374:	e7f5      	b.n	8011362 <_printf_i+0x22e>
 8011376:	bf00      	nop
 8011378:	080181e4 	.word	0x080181e4
 801137c:	080181f5 	.word	0x080181f5

08011380 <_scanf_float>:
 8011380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011384:	b087      	sub	sp, #28
 8011386:	4617      	mov	r7, r2
 8011388:	9303      	str	r3, [sp, #12]
 801138a:	688b      	ldr	r3, [r1, #8]
 801138c:	1e5a      	subs	r2, r3, #1
 801138e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011392:	bf83      	ittte	hi
 8011394:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011398:	195b      	addhi	r3, r3, r5
 801139a:	9302      	strhi	r3, [sp, #8]
 801139c:	2300      	movls	r3, #0
 801139e:	bf86      	itte	hi
 80113a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80113a4:	608b      	strhi	r3, [r1, #8]
 80113a6:	9302      	strls	r3, [sp, #8]
 80113a8:	680b      	ldr	r3, [r1, #0]
 80113aa:	468b      	mov	fp, r1
 80113ac:	2500      	movs	r5, #0
 80113ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80113b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80113b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80113ba:	4680      	mov	r8, r0
 80113bc:	460c      	mov	r4, r1
 80113be:	465e      	mov	r6, fp
 80113c0:	46aa      	mov	sl, r5
 80113c2:	46a9      	mov	r9, r5
 80113c4:	9501      	str	r5, [sp, #4]
 80113c6:	68a2      	ldr	r2, [r4, #8]
 80113c8:	b152      	cbz	r2, 80113e0 <_scanf_float+0x60>
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	2b4e      	cmp	r3, #78	; 0x4e
 80113d0:	d864      	bhi.n	801149c <_scanf_float+0x11c>
 80113d2:	2b40      	cmp	r3, #64	; 0x40
 80113d4:	d83c      	bhi.n	8011450 <_scanf_float+0xd0>
 80113d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80113da:	b2c8      	uxtb	r0, r1
 80113dc:	280e      	cmp	r0, #14
 80113de:	d93a      	bls.n	8011456 <_scanf_float+0xd6>
 80113e0:	f1b9 0f00 	cmp.w	r9, #0
 80113e4:	d003      	beq.n	80113ee <_scanf_float+0x6e>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113f2:	f1ba 0f01 	cmp.w	sl, #1
 80113f6:	f200 8113 	bhi.w	8011620 <_scanf_float+0x2a0>
 80113fa:	455e      	cmp	r6, fp
 80113fc:	f200 8105 	bhi.w	801160a <_scanf_float+0x28a>
 8011400:	2501      	movs	r5, #1
 8011402:	4628      	mov	r0, r5
 8011404:	b007      	add	sp, #28
 8011406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801140e:	2a0d      	cmp	r2, #13
 8011410:	d8e6      	bhi.n	80113e0 <_scanf_float+0x60>
 8011412:	a101      	add	r1, pc, #4	; (adr r1, 8011418 <_scanf_float+0x98>)
 8011414:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011418:	08011557 	.word	0x08011557
 801141c:	080113e1 	.word	0x080113e1
 8011420:	080113e1 	.word	0x080113e1
 8011424:	080113e1 	.word	0x080113e1
 8011428:	080115b7 	.word	0x080115b7
 801142c:	0801158f 	.word	0x0801158f
 8011430:	080113e1 	.word	0x080113e1
 8011434:	080113e1 	.word	0x080113e1
 8011438:	08011565 	.word	0x08011565
 801143c:	080113e1 	.word	0x080113e1
 8011440:	080113e1 	.word	0x080113e1
 8011444:	080113e1 	.word	0x080113e1
 8011448:	080113e1 	.word	0x080113e1
 801144c:	0801151d 	.word	0x0801151d
 8011450:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011454:	e7db      	b.n	801140e <_scanf_float+0x8e>
 8011456:	290e      	cmp	r1, #14
 8011458:	d8c2      	bhi.n	80113e0 <_scanf_float+0x60>
 801145a:	a001      	add	r0, pc, #4	; (adr r0, 8011460 <_scanf_float+0xe0>)
 801145c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011460:	0801150f 	.word	0x0801150f
 8011464:	080113e1 	.word	0x080113e1
 8011468:	0801150f 	.word	0x0801150f
 801146c:	080115a3 	.word	0x080115a3
 8011470:	080113e1 	.word	0x080113e1
 8011474:	080114bd 	.word	0x080114bd
 8011478:	080114f9 	.word	0x080114f9
 801147c:	080114f9 	.word	0x080114f9
 8011480:	080114f9 	.word	0x080114f9
 8011484:	080114f9 	.word	0x080114f9
 8011488:	080114f9 	.word	0x080114f9
 801148c:	080114f9 	.word	0x080114f9
 8011490:	080114f9 	.word	0x080114f9
 8011494:	080114f9 	.word	0x080114f9
 8011498:	080114f9 	.word	0x080114f9
 801149c:	2b6e      	cmp	r3, #110	; 0x6e
 801149e:	d809      	bhi.n	80114b4 <_scanf_float+0x134>
 80114a0:	2b60      	cmp	r3, #96	; 0x60
 80114a2:	d8b2      	bhi.n	801140a <_scanf_float+0x8a>
 80114a4:	2b54      	cmp	r3, #84	; 0x54
 80114a6:	d077      	beq.n	8011598 <_scanf_float+0x218>
 80114a8:	2b59      	cmp	r3, #89	; 0x59
 80114aa:	d199      	bne.n	80113e0 <_scanf_float+0x60>
 80114ac:	2d07      	cmp	r5, #7
 80114ae:	d197      	bne.n	80113e0 <_scanf_float+0x60>
 80114b0:	2508      	movs	r5, #8
 80114b2:	e029      	b.n	8011508 <_scanf_float+0x188>
 80114b4:	2b74      	cmp	r3, #116	; 0x74
 80114b6:	d06f      	beq.n	8011598 <_scanf_float+0x218>
 80114b8:	2b79      	cmp	r3, #121	; 0x79
 80114ba:	e7f6      	b.n	80114aa <_scanf_float+0x12a>
 80114bc:	6821      	ldr	r1, [r4, #0]
 80114be:	05c8      	lsls	r0, r1, #23
 80114c0:	d51a      	bpl.n	80114f8 <_scanf_float+0x178>
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80114c8:	6021      	str	r1, [r4, #0]
 80114ca:	f109 0901 	add.w	r9, r9, #1
 80114ce:	b11b      	cbz	r3, 80114d8 <_scanf_float+0x158>
 80114d0:	3b01      	subs	r3, #1
 80114d2:	3201      	adds	r2, #1
 80114d4:	9302      	str	r3, [sp, #8]
 80114d6:	60a2      	str	r2, [r4, #8]
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	3b01      	subs	r3, #1
 80114dc:	60a3      	str	r3, [r4, #8]
 80114de:	6923      	ldr	r3, [r4, #16]
 80114e0:	3301      	adds	r3, #1
 80114e2:	6123      	str	r3, [r4, #16]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	3b01      	subs	r3, #1
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	607b      	str	r3, [r7, #4]
 80114ec:	f340 8084 	ble.w	80115f8 <_scanf_float+0x278>
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	3301      	adds	r3, #1
 80114f4:	603b      	str	r3, [r7, #0]
 80114f6:	e766      	b.n	80113c6 <_scanf_float+0x46>
 80114f8:	eb1a 0f05 	cmn.w	sl, r5
 80114fc:	f47f af70 	bne.w	80113e0 <_scanf_float+0x60>
 8011500:	6822      	ldr	r2, [r4, #0]
 8011502:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011506:	6022      	str	r2, [r4, #0]
 8011508:	f806 3b01 	strb.w	r3, [r6], #1
 801150c:	e7e4      	b.n	80114d8 <_scanf_float+0x158>
 801150e:	6822      	ldr	r2, [r4, #0]
 8011510:	0610      	lsls	r0, r2, #24
 8011512:	f57f af65 	bpl.w	80113e0 <_scanf_float+0x60>
 8011516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801151a:	e7f4      	b.n	8011506 <_scanf_float+0x186>
 801151c:	f1ba 0f00 	cmp.w	sl, #0
 8011520:	d10e      	bne.n	8011540 <_scanf_float+0x1c0>
 8011522:	f1b9 0f00 	cmp.w	r9, #0
 8011526:	d10e      	bne.n	8011546 <_scanf_float+0x1c6>
 8011528:	6822      	ldr	r2, [r4, #0]
 801152a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801152e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011532:	d108      	bne.n	8011546 <_scanf_float+0x1c6>
 8011534:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011538:	6022      	str	r2, [r4, #0]
 801153a:	f04f 0a01 	mov.w	sl, #1
 801153e:	e7e3      	b.n	8011508 <_scanf_float+0x188>
 8011540:	f1ba 0f02 	cmp.w	sl, #2
 8011544:	d055      	beq.n	80115f2 <_scanf_float+0x272>
 8011546:	2d01      	cmp	r5, #1
 8011548:	d002      	beq.n	8011550 <_scanf_float+0x1d0>
 801154a:	2d04      	cmp	r5, #4
 801154c:	f47f af48 	bne.w	80113e0 <_scanf_float+0x60>
 8011550:	3501      	adds	r5, #1
 8011552:	b2ed      	uxtb	r5, r5
 8011554:	e7d8      	b.n	8011508 <_scanf_float+0x188>
 8011556:	f1ba 0f01 	cmp.w	sl, #1
 801155a:	f47f af41 	bne.w	80113e0 <_scanf_float+0x60>
 801155e:	f04f 0a02 	mov.w	sl, #2
 8011562:	e7d1      	b.n	8011508 <_scanf_float+0x188>
 8011564:	b97d      	cbnz	r5, 8011586 <_scanf_float+0x206>
 8011566:	f1b9 0f00 	cmp.w	r9, #0
 801156a:	f47f af3c 	bne.w	80113e6 <_scanf_float+0x66>
 801156e:	6822      	ldr	r2, [r4, #0]
 8011570:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011574:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011578:	f47f af39 	bne.w	80113ee <_scanf_float+0x6e>
 801157c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011580:	6022      	str	r2, [r4, #0]
 8011582:	2501      	movs	r5, #1
 8011584:	e7c0      	b.n	8011508 <_scanf_float+0x188>
 8011586:	2d03      	cmp	r5, #3
 8011588:	d0e2      	beq.n	8011550 <_scanf_float+0x1d0>
 801158a:	2d05      	cmp	r5, #5
 801158c:	e7de      	b.n	801154c <_scanf_float+0x1cc>
 801158e:	2d02      	cmp	r5, #2
 8011590:	f47f af26 	bne.w	80113e0 <_scanf_float+0x60>
 8011594:	2503      	movs	r5, #3
 8011596:	e7b7      	b.n	8011508 <_scanf_float+0x188>
 8011598:	2d06      	cmp	r5, #6
 801159a:	f47f af21 	bne.w	80113e0 <_scanf_float+0x60>
 801159e:	2507      	movs	r5, #7
 80115a0:	e7b2      	b.n	8011508 <_scanf_float+0x188>
 80115a2:	6822      	ldr	r2, [r4, #0]
 80115a4:	0591      	lsls	r1, r2, #22
 80115a6:	f57f af1b 	bpl.w	80113e0 <_scanf_float+0x60>
 80115aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80115ae:	6022      	str	r2, [r4, #0]
 80115b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80115b4:	e7a8      	b.n	8011508 <_scanf_float+0x188>
 80115b6:	6822      	ldr	r2, [r4, #0]
 80115b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80115bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80115c0:	d006      	beq.n	80115d0 <_scanf_float+0x250>
 80115c2:	0550      	lsls	r0, r2, #21
 80115c4:	f57f af0c 	bpl.w	80113e0 <_scanf_float+0x60>
 80115c8:	f1b9 0f00 	cmp.w	r9, #0
 80115cc:	f43f af0f 	beq.w	80113ee <_scanf_float+0x6e>
 80115d0:	0591      	lsls	r1, r2, #22
 80115d2:	bf58      	it	pl
 80115d4:	9901      	ldrpl	r1, [sp, #4]
 80115d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80115da:	bf58      	it	pl
 80115dc:	eba9 0101 	subpl.w	r1, r9, r1
 80115e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80115e4:	bf58      	it	pl
 80115e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80115ea:	6022      	str	r2, [r4, #0]
 80115ec:	f04f 0900 	mov.w	r9, #0
 80115f0:	e78a      	b.n	8011508 <_scanf_float+0x188>
 80115f2:	f04f 0a03 	mov.w	sl, #3
 80115f6:	e787      	b.n	8011508 <_scanf_float+0x188>
 80115f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80115fc:	4639      	mov	r1, r7
 80115fe:	4640      	mov	r0, r8
 8011600:	4798      	blx	r3
 8011602:	2800      	cmp	r0, #0
 8011604:	f43f aedf 	beq.w	80113c6 <_scanf_float+0x46>
 8011608:	e6ea      	b.n	80113e0 <_scanf_float+0x60>
 801160a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801160e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011612:	463a      	mov	r2, r7
 8011614:	4640      	mov	r0, r8
 8011616:	4798      	blx	r3
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	3b01      	subs	r3, #1
 801161c:	6123      	str	r3, [r4, #16]
 801161e:	e6ec      	b.n	80113fa <_scanf_float+0x7a>
 8011620:	1e6b      	subs	r3, r5, #1
 8011622:	2b06      	cmp	r3, #6
 8011624:	d825      	bhi.n	8011672 <_scanf_float+0x2f2>
 8011626:	2d02      	cmp	r5, #2
 8011628:	d836      	bhi.n	8011698 <_scanf_float+0x318>
 801162a:	455e      	cmp	r6, fp
 801162c:	f67f aee8 	bls.w	8011400 <_scanf_float+0x80>
 8011630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011634:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011638:	463a      	mov	r2, r7
 801163a:	4640      	mov	r0, r8
 801163c:	4798      	blx	r3
 801163e:	6923      	ldr	r3, [r4, #16]
 8011640:	3b01      	subs	r3, #1
 8011642:	6123      	str	r3, [r4, #16]
 8011644:	e7f1      	b.n	801162a <_scanf_float+0x2aa>
 8011646:	9802      	ldr	r0, [sp, #8]
 8011648:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801164c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011650:	9002      	str	r0, [sp, #8]
 8011652:	463a      	mov	r2, r7
 8011654:	4640      	mov	r0, r8
 8011656:	4798      	blx	r3
 8011658:	6923      	ldr	r3, [r4, #16]
 801165a:	3b01      	subs	r3, #1
 801165c:	6123      	str	r3, [r4, #16]
 801165e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011662:	fa5f fa8a 	uxtb.w	sl, sl
 8011666:	f1ba 0f02 	cmp.w	sl, #2
 801166a:	d1ec      	bne.n	8011646 <_scanf_float+0x2c6>
 801166c:	3d03      	subs	r5, #3
 801166e:	b2ed      	uxtb	r5, r5
 8011670:	1b76      	subs	r6, r6, r5
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	05da      	lsls	r2, r3, #23
 8011676:	d52f      	bpl.n	80116d8 <_scanf_float+0x358>
 8011678:	055b      	lsls	r3, r3, #21
 801167a:	d510      	bpl.n	801169e <_scanf_float+0x31e>
 801167c:	455e      	cmp	r6, fp
 801167e:	f67f aebf 	bls.w	8011400 <_scanf_float+0x80>
 8011682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011686:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801168a:	463a      	mov	r2, r7
 801168c:	4640      	mov	r0, r8
 801168e:	4798      	blx	r3
 8011690:	6923      	ldr	r3, [r4, #16]
 8011692:	3b01      	subs	r3, #1
 8011694:	6123      	str	r3, [r4, #16]
 8011696:	e7f1      	b.n	801167c <_scanf_float+0x2fc>
 8011698:	46aa      	mov	sl, r5
 801169a:	9602      	str	r6, [sp, #8]
 801169c:	e7df      	b.n	801165e <_scanf_float+0x2de>
 801169e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80116a2:	6923      	ldr	r3, [r4, #16]
 80116a4:	2965      	cmp	r1, #101	; 0x65
 80116a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80116aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80116ae:	6123      	str	r3, [r4, #16]
 80116b0:	d00c      	beq.n	80116cc <_scanf_float+0x34c>
 80116b2:	2945      	cmp	r1, #69	; 0x45
 80116b4:	d00a      	beq.n	80116cc <_scanf_float+0x34c>
 80116b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116ba:	463a      	mov	r2, r7
 80116bc:	4640      	mov	r0, r8
 80116be:	4798      	blx	r3
 80116c0:	6923      	ldr	r3, [r4, #16]
 80116c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80116c6:	3b01      	subs	r3, #1
 80116c8:	1eb5      	subs	r5, r6, #2
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116d0:	463a      	mov	r2, r7
 80116d2:	4640      	mov	r0, r8
 80116d4:	4798      	blx	r3
 80116d6:	462e      	mov	r6, r5
 80116d8:	6825      	ldr	r5, [r4, #0]
 80116da:	f015 0510 	ands.w	r5, r5, #16
 80116de:	d159      	bne.n	8011794 <_scanf_float+0x414>
 80116e0:	7035      	strb	r5, [r6, #0]
 80116e2:	6823      	ldr	r3, [r4, #0]
 80116e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80116e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116ec:	d11b      	bne.n	8011726 <_scanf_float+0x3a6>
 80116ee:	9b01      	ldr	r3, [sp, #4]
 80116f0:	454b      	cmp	r3, r9
 80116f2:	eba3 0209 	sub.w	r2, r3, r9
 80116f6:	d123      	bne.n	8011740 <_scanf_float+0x3c0>
 80116f8:	2200      	movs	r2, #0
 80116fa:	4659      	mov	r1, fp
 80116fc:	4640      	mov	r0, r8
 80116fe:	f000 ff29 	bl	8012554 <_strtod_r>
 8011702:	6822      	ldr	r2, [r4, #0]
 8011704:	9b03      	ldr	r3, [sp, #12]
 8011706:	f012 0f02 	tst.w	r2, #2
 801170a:	ec57 6b10 	vmov	r6, r7, d0
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	d021      	beq.n	8011756 <_scanf_float+0x3d6>
 8011712:	9903      	ldr	r1, [sp, #12]
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	600a      	str	r2, [r1, #0]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	e9c3 6700 	strd	r6, r7, [r3]
 801171e:	68e3      	ldr	r3, [r4, #12]
 8011720:	3301      	adds	r3, #1
 8011722:	60e3      	str	r3, [r4, #12]
 8011724:	e66d      	b.n	8011402 <_scanf_float+0x82>
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d0e5      	beq.n	80116f8 <_scanf_float+0x378>
 801172c:	9905      	ldr	r1, [sp, #20]
 801172e:	230a      	movs	r3, #10
 8011730:	462a      	mov	r2, r5
 8011732:	3101      	adds	r1, #1
 8011734:	4640      	mov	r0, r8
 8011736:	f000 ff95 	bl	8012664 <_strtol_r>
 801173a:	9b04      	ldr	r3, [sp, #16]
 801173c:	9e05      	ldr	r6, [sp, #20]
 801173e:	1ac2      	subs	r2, r0, r3
 8011740:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011744:	429e      	cmp	r6, r3
 8011746:	bf28      	it	cs
 8011748:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801174c:	4912      	ldr	r1, [pc, #72]	; (8011798 <_scanf_float+0x418>)
 801174e:	4630      	mov	r0, r6
 8011750:	f000 f82c 	bl	80117ac <siprintf>
 8011754:	e7d0      	b.n	80116f8 <_scanf_float+0x378>
 8011756:	9903      	ldr	r1, [sp, #12]
 8011758:	f012 0f04 	tst.w	r2, #4
 801175c:	f103 0204 	add.w	r2, r3, #4
 8011760:	600a      	str	r2, [r1, #0]
 8011762:	d1d9      	bne.n	8011718 <_scanf_float+0x398>
 8011764:	f8d3 8000 	ldr.w	r8, [r3]
 8011768:	ee10 2a10 	vmov	r2, s0
 801176c:	ee10 0a10 	vmov	r0, s0
 8011770:	463b      	mov	r3, r7
 8011772:	4639      	mov	r1, r7
 8011774:	f7ef f9fa 	bl	8000b6c <__aeabi_dcmpun>
 8011778:	b128      	cbz	r0, 8011786 <_scanf_float+0x406>
 801177a:	4808      	ldr	r0, [pc, #32]	; (801179c <_scanf_float+0x41c>)
 801177c:	f000 f810 	bl	80117a0 <nanf>
 8011780:	ed88 0a00 	vstr	s0, [r8]
 8011784:	e7cb      	b.n	801171e <_scanf_float+0x39e>
 8011786:	4630      	mov	r0, r6
 8011788:	4639      	mov	r1, r7
 801178a:	f7ef fa4d 	bl	8000c28 <__aeabi_d2f>
 801178e:	f8c8 0000 	str.w	r0, [r8]
 8011792:	e7c4      	b.n	801171e <_scanf_float+0x39e>
 8011794:	2500      	movs	r5, #0
 8011796:	e634      	b.n	8011402 <_scanf_float+0x82>
 8011798:	08018206 	.word	0x08018206
 801179c:	0801862b 	.word	0x0801862b

080117a0 <nanf>:
 80117a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80117a8 <nanf+0x8>
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	7fc00000 	.word	0x7fc00000

080117ac <siprintf>:
 80117ac:	b40e      	push	{r1, r2, r3}
 80117ae:	b500      	push	{lr}
 80117b0:	b09c      	sub	sp, #112	; 0x70
 80117b2:	ab1d      	add	r3, sp, #116	; 0x74
 80117b4:	9002      	str	r0, [sp, #8]
 80117b6:	9006      	str	r0, [sp, #24]
 80117b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80117bc:	4809      	ldr	r0, [pc, #36]	; (80117e4 <siprintf+0x38>)
 80117be:	9107      	str	r1, [sp, #28]
 80117c0:	9104      	str	r1, [sp, #16]
 80117c2:	4909      	ldr	r1, [pc, #36]	; (80117e8 <siprintf+0x3c>)
 80117c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80117c8:	9105      	str	r1, [sp, #20]
 80117ca:	6800      	ldr	r0, [r0, #0]
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	a902      	add	r1, sp, #8
 80117d0:	f002 ffaa 	bl	8014728 <_svfiprintf_r>
 80117d4:	9b02      	ldr	r3, [sp, #8]
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
 80117da:	b01c      	add	sp, #112	; 0x70
 80117dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80117e0:	b003      	add	sp, #12
 80117e2:	4770      	bx	lr
 80117e4:	2000002c 	.word	0x2000002c
 80117e8:	ffff0208 	.word	0xffff0208

080117ec <siscanf>:
 80117ec:	b40e      	push	{r1, r2, r3}
 80117ee:	b510      	push	{r4, lr}
 80117f0:	b09f      	sub	sp, #124	; 0x7c
 80117f2:	ac21      	add	r4, sp, #132	; 0x84
 80117f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80117f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80117fc:	9201      	str	r2, [sp, #4]
 80117fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011802:	9004      	str	r0, [sp, #16]
 8011804:	9008      	str	r0, [sp, #32]
 8011806:	f7ee fd03 	bl	8000210 <strlen>
 801180a:	4b0c      	ldr	r3, [pc, #48]	; (801183c <siscanf+0x50>)
 801180c:	9005      	str	r0, [sp, #20]
 801180e:	9009      	str	r0, [sp, #36]	; 0x24
 8011810:	930d      	str	r3, [sp, #52]	; 0x34
 8011812:	480b      	ldr	r0, [pc, #44]	; (8011840 <siscanf+0x54>)
 8011814:	9a01      	ldr	r2, [sp, #4]
 8011816:	6800      	ldr	r0, [r0, #0]
 8011818:	9403      	str	r4, [sp, #12]
 801181a:	2300      	movs	r3, #0
 801181c:	9311      	str	r3, [sp, #68]	; 0x44
 801181e:	9316      	str	r3, [sp, #88]	; 0x58
 8011820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011824:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011828:	a904      	add	r1, sp, #16
 801182a:	4623      	mov	r3, r4
 801182c:	f003 f8d6 	bl	80149dc <__ssvfiscanf_r>
 8011830:	b01f      	add	sp, #124	; 0x7c
 8011832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011836:	b003      	add	sp, #12
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	08011867 	.word	0x08011867
 8011840:	2000002c 	.word	0x2000002c

08011844 <__sread>:
 8011844:	b510      	push	{r4, lr}
 8011846:	460c      	mov	r4, r1
 8011848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801184c:	f003 fb90 	bl	8014f70 <_read_r>
 8011850:	2800      	cmp	r0, #0
 8011852:	bfab      	itete	ge
 8011854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011856:	89a3      	ldrhlt	r3, [r4, #12]
 8011858:	181b      	addge	r3, r3, r0
 801185a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801185e:	bfac      	ite	ge
 8011860:	6563      	strge	r3, [r4, #84]	; 0x54
 8011862:	81a3      	strhlt	r3, [r4, #12]
 8011864:	bd10      	pop	{r4, pc}

08011866 <__seofread>:
 8011866:	2000      	movs	r0, #0
 8011868:	4770      	bx	lr

0801186a <__swrite>:
 801186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801186e:	461f      	mov	r7, r3
 8011870:	898b      	ldrh	r3, [r1, #12]
 8011872:	05db      	lsls	r3, r3, #23
 8011874:	4605      	mov	r5, r0
 8011876:	460c      	mov	r4, r1
 8011878:	4616      	mov	r6, r2
 801187a:	d505      	bpl.n	8011888 <__swrite+0x1e>
 801187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011880:	2302      	movs	r3, #2
 8011882:	2200      	movs	r2, #0
 8011884:	f002 f902 	bl	8013a8c <_lseek_r>
 8011888:	89a3      	ldrh	r3, [r4, #12]
 801188a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801188e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011892:	81a3      	strh	r3, [r4, #12]
 8011894:	4632      	mov	r2, r6
 8011896:	463b      	mov	r3, r7
 8011898:	4628      	mov	r0, r5
 801189a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801189e:	f000 bee3 	b.w	8012668 <_write_r>

080118a2 <__sseek>:
 80118a2:	b510      	push	{r4, lr}
 80118a4:	460c      	mov	r4, r1
 80118a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118aa:	f002 f8ef 	bl	8013a8c <_lseek_r>
 80118ae:	1c43      	adds	r3, r0, #1
 80118b0:	89a3      	ldrh	r3, [r4, #12]
 80118b2:	bf15      	itete	ne
 80118b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80118b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118be:	81a3      	strheq	r3, [r4, #12]
 80118c0:	bf18      	it	ne
 80118c2:	81a3      	strhne	r3, [r4, #12]
 80118c4:	bd10      	pop	{r4, pc}

080118c6 <__sclose>:
 80118c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ca:	f000 bedf 	b.w	801268c <_close_r>

080118ce <strcpy>:
 80118ce:	4603      	mov	r3, r0
 80118d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118d4:	f803 2b01 	strb.w	r2, [r3], #1
 80118d8:	2a00      	cmp	r2, #0
 80118da:	d1f9      	bne.n	80118d0 <strcpy+0x2>
 80118dc:	4770      	bx	lr

080118de <strstr>:
 80118de:	780a      	ldrb	r2, [r1, #0]
 80118e0:	b570      	push	{r4, r5, r6, lr}
 80118e2:	b96a      	cbnz	r2, 8011900 <strstr+0x22>
 80118e4:	bd70      	pop	{r4, r5, r6, pc}
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d109      	bne.n	80118fe <strstr+0x20>
 80118ea:	460c      	mov	r4, r1
 80118ec:	4605      	mov	r5, r0
 80118ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0f6      	beq.n	80118e4 <strstr+0x6>
 80118f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80118fa:	429e      	cmp	r6, r3
 80118fc:	d0f7      	beq.n	80118ee <strstr+0x10>
 80118fe:	3001      	adds	r0, #1
 8011900:	7803      	ldrb	r3, [r0, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1ef      	bne.n	80118e6 <strstr+0x8>
 8011906:	4618      	mov	r0, r3
 8011908:	e7ec      	b.n	80118e4 <strstr+0x6>

0801190a <sulp>:
 801190a:	b570      	push	{r4, r5, r6, lr}
 801190c:	4604      	mov	r4, r0
 801190e:	460d      	mov	r5, r1
 8011910:	ec45 4b10 	vmov	d0, r4, r5
 8011914:	4616      	mov	r6, r2
 8011916:	f002 fc65 	bl	80141e4 <__ulp>
 801191a:	ec51 0b10 	vmov	r0, r1, d0
 801191e:	b17e      	cbz	r6, 8011940 <sulp+0x36>
 8011920:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011924:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011928:	2b00      	cmp	r3, #0
 801192a:	dd09      	ble.n	8011940 <sulp+0x36>
 801192c:	051b      	lsls	r3, r3, #20
 801192e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011932:	2400      	movs	r4, #0
 8011934:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011938:	4622      	mov	r2, r4
 801193a:	462b      	mov	r3, r5
 801193c:	f7ee fe7c 	bl	8000638 <__aeabi_dmul>
 8011940:	bd70      	pop	{r4, r5, r6, pc}
 8011942:	0000      	movs	r0, r0
 8011944:	0000      	movs	r0, r0
	...

08011948 <_strtod_l>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	ed2d 8b02 	vpush	{d8}
 8011950:	b09d      	sub	sp, #116	; 0x74
 8011952:	461f      	mov	r7, r3
 8011954:	2300      	movs	r3, #0
 8011956:	9318      	str	r3, [sp, #96]	; 0x60
 8011958:	4ba2      	ldr	r3, [pc, #648]	; (8011be4 <_strtod_l+0x29c>)
 801195a:	9213      	str	r2, [sp, #76]	; 0x4c
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	9305      	str	r3, [sp, #20]
 8011960:	4604      	mov	r4, r0
 8011962:	4618      	mov	r0, r3
 8011964:	4688      	mov	r8, r1
 8011966:	f7ee fc53 	bl	8000210 <strlen>
 801196a:	f04f 0a00 	mov.w	sl, #0
 801196e:	4605      	mov	r5, r0
 8011970:	f04f 0b00 	mov.w	fp, #0
 8011974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801197a:	781a      	ldrb	r2, [r3, #0]
 801197c:	2a2b      	cmp	r2, #43	; 0x2b
 801197e:	d04e      	beq.n	8011a1e <_strtod_l+0xd6>
 8011980:	d83b      	bhi.n	80119fa <_strtod_l+0xb2>
 8011982:	2a0d      	cmp	r2, #13
 8011984:	d834      	bhi.n	80119f0 <_strtod_l+0xa8>
 8011986:	2a08      	cmp	r2, #8
 8011988:	d834      	bhi.n	80119f4 <_strtod_l+0xac>
 801198a:	2a00      	cmp	r2, #0
 801198c:	d03e      	beq.n	8011a0c <_strtod_l+0xc4>
 801198e:	2300      	movs	r3, #0
 8011990:	930a      	str	r3, [sp, #40]	; 0x28
 8011992:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011994:	7833      	ldrb	r3, [r6, #0]
 8011996:	2b30      	cmp	r3, #48	; 0x30
 8011998:	f040 80b0 	bne.w	8011afc <_strtod_l+0x1b4>
 801199c:	7873      	ldrb	r3, [r6, #1]
 801199e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80119a2:	2b58      	cmp	r3, #88	; 0x58
 80119a4:	d168      	bne.n	8011a78 <_strtod_l+0x130>
 80119a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	ab18      	add	r3, sp, #96	; 0x60
 80119ac:	9702      	str	r7, [sp, #8]
 80119ae:	9300      	str	r3, [sp, #0]
 80119b0:	4a8d      	ldr	r2, [pc, #564]	; (8011be8 <_strtod_l+0x2a0>)
 80119b2:	ab19      	add	r3, sp, #100	; 0x64
 80119b4:	a917      	add	r1, sp, #92	; 0x5c
 80119b6:	4620      	mov	r0, r4
 80119b8:	f001 fd5c 	bl	8013474 <__gethex>
 80119bc:	f010 0707 	ands.w	r7, r0, #7
 80119c0:	4605      	mov	r5, r0
 80119c2:	d005      	beq.n	80119d0 <_strtod_l+0x88>
 80119c4:	2f06      	cmp	r7, #6
 80119c6:	d12c      	bne.n	8011a22 <_strtod_l+0xda>
 80119c8:	3601      	adds	r6, #1
 80119ca:	2300      	movs	r3, #0
 80119cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80119ce:	930a      	str	r3, [sp, #40]	; 0x28
 80119d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f040 8590 	bne.w	80124f8 <_strtod_l+0xbb0>
 80119d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119da:	b1eb      	cbz	r3, 8011a18 <_strtod_l+0xd0>
 80119dc:	4652      	mov	r2, sl
 80119de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119e2:	ec43 2b10 	vmov	d0, r2, r3
 80119e6:	b01d      	add	sp, #116	; 0x74
 80119e8:	ecbd 8b02 	vpop	{d8}
 80119ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f0:	2a20      	cmp	r2, #32
 80119f2:	d1cc      	bne.n	801198e <_strtod_l+0x46>
 80119f4:	3301      	adds	r3, #1
 80119f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80119f8:	e7be      	b.n	8011978 <_strtod_l+0x30>
 80119fa:	2a2d      	cmp	r2, #45	; 0x2d
 80119fc:	d1c7      	bne.n	801198e <_strtod_l+0x46>
 80119fe:	2201      	movs	r2, #1
 8011a00:	920a      	str	r2, [sp, #40]	; 0x28
 8011a02:	1c5a      	adds	r2, r3, #1
 8011a04:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a06:	785b      	ldrb	r3, [r3, #1]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1c2      	bne.n	8011992 <_strtod_l+0x4a>
 8011a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f040 856e 	bne.w	80124f4 <_strtod_l+0xbac>
 8011a18:	4652      	mov	r2, sl
 8011a1a:	465b      	mov	r3, fp
 8011a1c:	e7e1      	b.n	80119e2 <_strtod_l+0x9a>
 8011a1e:	2200      	movs	r2, #0
 8011a20:	e7ee      	b.n	8011a00 <_strtod_l+0xb8>
 8011a22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a24:	b13a      	cbz	r2, 8011a36 <_strtod_l+0xee>
 8011a26:	2135      	movs	r1, #53	; 0x35
 8011a28:	a81a      	add	r0, sp, #104	; 0x68
 8011a2a:	f002 fce6 	bl	80143fa <__copybits>
 8011a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a30:	4620      	mov	r0, r4
 8011a32:	f002 f8a5 	bl	8013b80 <_Bfree>
 8011a36:	3f01      	subs	r7, #1
 8011a38:	2f04      	cmp	r7, #4
 8011a3a:	d806      	bhi.n	8011a4a <_strtod_l+0x102>
 8011a3c:	e8df f007 	tbb	[pc, r7]
 8011a40:	1714030a 	.word	0x1714030a
 8011a44:	0a          	.byte	0x0a
 8011a45:	00          	.byte	0x00
 8011a46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011a4a:	0728      	lsls	r0, r5, #28
 8011a4c:	d5c0      	bpl.n	80119d0 <_strtod_l+0x88>
 8011a4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011a52:	e7bd      	b.n	80119d0 <_strtod_l+0x88>
 8011a54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011a58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011a5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011a62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a66:	e7f0      	b.n	8011a4a <_strtod_l+0x102>
 8011a68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011bec <_strtod_l+0x2a4>
 8011a6c:	e7ed      	b.n	8011a4a <_strtod_l+0x102>
 8011a6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011a72:	f04f 3aff 	mov.w	sl, #4294967295
 8011a76:	e7e8      	b.n	8011a4a <_strtod_l+0x102>
 8011a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a7a:	1c5a      	adds	r2, r3, #1
 8011a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a7e:	785b      	ldrb	r3, [r3, #1]
 8011a80:	2b30      	cmp	r3, #48	; 0x30
 8011a82:	d0f9      	beq.n	8011a78 <_strtod_l+0x130>
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d0a3      	beq.n	80119d0 <_strtod_l+0x88>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f04f 0900 	mov.w	r9, #0
 8011a8e:	9304      	str	r3, [sp, #16]
 8011a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a92:	9308      	str	r3, [sp, #32]
 8011a94:	f8cd 901c 	str.w	r9, [sp, #28]
 8011a98:	464f      	mov	r7, r9
 8011a9a:	220a      	movs	r2, #10
 8011a9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011a9e:	7806      	ldrb	r6, [r0, #0]
 8011aa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011aa4:	b2d9      	uxtb	r1, r3
 8011aa6:	2909      	cmp	r1, #9
 8011aa8:	d92a      	bls.n	8011b00 <_strtod_l+0x1b8>
 8011aaa:	9905      	ldr	r1, [sp, #20]
 8011aac:	462a      	mov	r2, r5
 8011aae:	f003 fac3 	bl	8015038 <strncmp>
 8011ab2:	b398      	cbz	r0, 8011b1c <_strtod_l+0x1d4>
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	4632      	mov	r2, r6
 8011ab8:	463d      	mov	r5, r7
 8011aba:	9005      	str	r0, [sp, #20]
 8011abc:	4603      	mov	r3, r0
 8011abe:	2a65      	cmp	r2, #101	; 0x65
 8011ac0:	d001      	beq.n	8011ac6 <_strtod_l+0x17e>
 8011ac2:	2a45      	cmp	r2, #69	; 0x45
 8011ac4:	d118      	bne.n	8011af8 <_strtod_l+0x1b0>
 8011ac6:	b91d      	cbnz	r5, 8011ad0 <_strtod_l+0x188>
 8011ac8:	9a04      	ldr	r2, [sp, #16]
 8011aca:	4302      	orrs	r2, r0
 8011acc:	d09e      	beq.n	8011a0c <_strtod_l+0xc4>
 8011ace:	2500      	movs	r5, #0
 8011ad0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011ad4:	f108 0201 	add.w	r2, r8, #1
 8011ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ada:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011ade:	2a2b      	cmp	r2, #43	; 0x2b
 8011ae0:	d075      	beq.n	8011bce <_strtod_l+0x286>
 8011ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8011ae4:	d07b      	beq.n	8011bde <_strtod_l+0x296>
 8011ae6:	f04f 0c00 	mov.w	ip, #0
 8011aea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011aee:	2909      	cmp	r1, #9
 8011af0:	f240 8082 	bls.w	8011bf8 <_strtod_l+0x2b0>
 8011af4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011af8:	2600      	movs	r6, #0
 8011afa:	e09d      	b.n	8011c38 <_strtod_l+0x2f0>
 8011afc:	2300      	movs	r3, #0
 8011afe:	e7c4      	b.n	8011a8a <_strtod_l+0x142>
 8011b00:	2f08      	cmp	r7, #8
 8011b02:	bfd8      	it	le
 8011b04:	9907      	ldrle	r1, [sp, #28]
 8011b06:	f100 0001 	add.w	r0, r0, #1
 8011b0a:	bfda      	itte	le
 8011b0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b10:	9307      	strle	r3, [sp, #28]
 8011b12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011b16:	3701      	adds	r7, #1
 8011b18:	9017      	str	r0, [sp, #92]	; 0x5c
 8011b1a:	e7bf      	b.n	8011a9c <_strtod_l+0x154>
 8011b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b1e:	195a      	adds	r2, r3, r5
 8011b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8011b22:	5d5a      	ldrb	r2, [r3, r5]
 8011b24:	2f00      	cmp	r7, #0
 8011b26:	d037      	beq.n	8011b98 <_strtod_l+0x250>
 8011b28:	9005      	str	r0, [sp, #20]
 8011b2a:	463d      	mov	r5, r7
 8011b2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011b30:	2b09      	cmp	r3, #9
 8011b32:	d912      	bls.n	8011b5a <_strtod_l+0x212>
 8011b34:	2301      	movs	r3, #1
 8011b36:	e7c2      	b.n	8011abe <_strtod_l+0x176>
 8011b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b3a:	1c5a      	adds	r2, r3, #1
 8011b3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011b3e:	785a      	ldrb	r2, [r3, #1]
 8011b40:	3001      	adds	r0, #1
 8011b42:	2a30      	cmp	r2, #48	; 0x30
 8011b44:	d0f8      	beq.n	8011b38 <_strtod_l+0x1f0>
 8011b46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011b4a:	2b08      	cmp	r3, #8
 8011b4c:	f200 84d9 	bhi.w	8012502 <_strtod_l+0xbba>
 8011b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b52:	9005      	str	r0, [sp, #20]
 8011b54:	2000      	movs	r0, #0
 8011b56:	9308      	str	r3, [sp, #32]
 8011b58:	4605      	mov	r5, r0
 8011b5a:	3a30      	subs	r2, #48	; 0x30
 8011b5c:	f100 0301 	add.w	r3, r0, #1
 8011b60:	d014      	beq.n	8011b8c <_strtod_l+0x244>
 8011b62:	9905      	ldr	r1, [sp, #20]
 8011b64:	4419      	add	r1, r3
 8011b66:	9105      	str	r1, [sp, #20]
 8011b68:	462b      	mov	r3, r5
 8011b6a:	eb00 0e05 	add.w	lr, r0, r5
 8011b6e:	210a      	movs	r1, #10
 8011b70:	4573      	cmp	r3, lr
 8011b72:	d113      	bne.n	8011b9c <_strtod_l+0x254>
 8011b74:	182b      	adds	r3, r5, r0
 8011b76:	2b08      	cmp	r3, #8
 8011b78:	f105 0501 	add.w	r5, r5, #1
 8011b7c:	4405      	add	r5, r0
 8011b7e:	dc1c      	bgt.n	8011bba <_strtod_l+0x272>
 8011b80:	9907      	ldr	r1, [sp, #28]
 8011b82:	230a      	movs	r3, #10
 8011b84:	fb03 2301 	mla	r3, r3, r1, r2
 8011b88:	9307      	str	r3, [sp, #28]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b8e:	1c51      	adds	r1, r2, #1
 8011b90:	9117      	str	r1, [sp, #92]	; 0x5c
 8011b92:	7852      	ldrb	r2, [r2, #1]
 8011b94:	4618      	mov	r0, r3
 8011b96:	e7c9      	b.n	8011b2c <_strtod_l+0x1e4>
 8011b98:	4638      	mov	r0, r7
 8011b9a:	e7d2      	b.n	8011b42 <_strtod_l+0x1fa>
 8011b9c:	2b08      	cmp	r3, #8
 8011b9e:	dc04      	bgt.n	8011baa <_strtod_l+0x262>
 8011ba0:	9e07      	ldr	r6, [sp, #28]
 8011ba2:	434e      	muls	r6, r1
 8011ba4:	9607      	str	r6, [sp, #28]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	e7e2      	b.n	8011b70 <_strtod_l+0x228>
 8011baa:	f103 0c01 	add.w	ip, r3, #1
 8011bae:	f1bc 0f10 	cmp.w	ip, #16
 8011bb2:	bfd8      	it	le
 8011bb4:	fb01 f909 	mulle.w	r9, r1, r9
 8011bb8:	e7f5      	b.n	8011ba6 <_strtod_l+0x25e>
 8011bba:	2d10      	cmp	r5, #16
 8011bbc:	bfdc      	itt	le
 8011bbe:	230a      	movle	r3, #10
 8011bc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8011bc4:	e7e1      	b.n	8011b8a <_strtod_l+0x242>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	9305      	str	r3, [sp, #20]
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e77c      	b.n	8011ac8 <_strtod_l+0x180>
 8011bce:	f04f 0c00 	mov.w	ip, #0
 8011bd2:	f108 0202 	add.w	r2, r8, #2
 8011bd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8011bd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011bdc:	e785      	b.n	8011aea <_strtod_l+0x1a2>
 8011bde:	f04f 0c01 	mov.w	ip, #1
 8011be2:	e7f6      	b.n	8011bd2 <_strtod_l+0x28a>
 8011be4:	08018458 	.word	0x08018458
 8011be8:	0801820c 	.word	0x0801820c
 8011bec:	7ff00000 	.word	0x7ff00000
 8011bf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011bf2:	1c51      	adds	r1, r2, #1
 8011bf4:	9117      	str	r1, [sp, #92]	; 0x5c
 8011bf6:	7852      	ldrb	r2, [r2, #1]
 8011bf8:	2a30      	cmp	r2, #48	; 0x30
 8011bfa:	d0f9      	beq.n	8011bf0 <_strtod_l+0x2a8>
 8011bfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011c00:	2908      	cmp	r1, #8
 8011c02:	f63f af79 	bhi.w	8011af8 <_strtod_l+0x1b0>
 8011c06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011c0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011c0c:	9206      	str	r2, [sp, #24]
 8011c0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011c10:	1c51      	adds	r1, r2, #1
 8011c12:	9117      	str	r1, [sp, #92]	; 0x5c
 8011c14:	7852      	ldrb	r2, [r2, #1]
 8011c16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011c1a:	2e09      	cmp	r6, #9
 8011c1c:	d937      	bls.n	8011c8e <_strtod_l+0x346>
 8011c1e:	9e06      	ldr	r6, [sp, #24]
 8011c20:	1b89      	subs	r1, r1, r6
 8011c22:	2908      	cmp	r1, #8
 8011c24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011c28:	dc02      	bgt.n	8011c30 <_strtod_l+0x2e8>
 8011c2a:	4576      	cmp	r6, lr
 8011c2c:	bfa8      	it	ge
 8011c2e:	4676      	movge	r6, lr
 8011c30:	f1bc 0f00 	cmp.w	ip, #0
 8011c34:	d000      	beq.n	8011c38 <_strtod_l+0x2f0>
 8011c36:	4276      	negs	r6, r6
 8011c38:	2d00      	cmp	r5, #0
 8011c3a:	d14d      	bne.n	8011cd8 <_strtod_l+0x390>
 8011c3c:	9904      	ldr	r1, [sp, #16]
 8011c3e:	4301      	orrs	r1, r0
 8011c40:	f47f aec6 	bne.w	80119d0 <_strtod_l+0x88>
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	f47f aee1 	bne.w	8011a0c <_strtod_l+0xc4>
 8011c4a:	2a69      	cmp	r2, #105	; 0x69
 8011c4c:	d027      	beq.n	8011c9e <_strtod_l+0x356>
 8011c4e:	dc24      	bgt.n	8011c9a <_strtod_l+0x352>
 8011c50:	2a49      	cmp	r2, #73	; 0x49
 8011c52:	d024      	beq.n	8011c9e <_strtod_l+0x356>
 8011c54:	2a4e      	cmp	r2, #78	; 0x4e
 8011c56:	f47f aed9 	bne.w	8011a0c <_strtod_l+0xc4>
 8011c5a:	499f      	ldr	r1, [pc, #636]	; (8011ed8 <_strtod_l+0x590>)
 8011c5c:	a817      	add	r0, sp, #92	; 0x5c
 8011c5e:	f001 fe61 	bl	8013924 <__match>
 8011c62:	2800      	cmp	r0, #0
 8011c64:	f43f aed2 	beq.w	8011a0c <_strtod_l+0xc4>
 8011c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	2b28      	cmp	r3, #40	; 0x28
 8011c6e:	d12d      	bne.n	8011ccc <_strtod_l+0x384>
 8011c70:	499a      	ldr	r1, [pc, #616]	; (8011edc <_strtod_l+0x594>)
 8011c72:	aa1a      	add	r2, sp, #104	; 0x68
 8011c74:	a817      	add	r0, sp, #92	; 0x5c
 8011c76:	f001 fe69 	bl	801394c <__hexnan>
 8011c7a:	2805      	cmp	r0, #5
 8011c7c:	d126      	bne.n	8011ccc <_strtod_l+0x384>
 8011c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011c84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011c88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011c8c:	e6a0      	b.n	80119d0 <_strtod_l+0x88>
 8011c8e:	210a      	movs	r1, #10
 8011c90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011c94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011c98:	e7b9      	b.n	8011c0e <_strtod_l+0x2c6>
 8011c9a:	2a6e      	cmp	r2, #110	; 0x6e
 8011c9c:	e7db      	b.n	8011c56 <_strtod_l+0x30e>
 8011c9e:	4990      	ldr	r1, [pc, #576]	; (8011ee0 <_strtod_l+0x598>)
 8011ca0:	a817      	add	r0, sp, #92	; 0x5c
 8011ca2:	f001 fe3f 	bl	8013924 <__match>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	f43f aeb0 	beq.w	8011a0c <_strtod_l+0xc4>
 8011cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cae:	498d      	ldr	r1, [pc, #564]	; (8011ee4 <_strtod_l+0x59c>)
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	a817      	add	r0, sp, #92	; 0x5c
 8011cb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8011cb6:	f001 fe35 	bl	8013924 <__match>
 8011cba:	b910      	cbnz	r0, 8011cc2 <_strtod_l+0x37a>
 8011cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8011cc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011ef4 <_strtod_l+0x5ac>
 8011cc6:	f04f 0a00 	mov.w	sl, #0
 8011cca:	e681      	b.n	80119d0 <_strtod_l+0x88>
 8011ccc:	4886      	ldr	r0, [pc, #536]	; (8011ee8 <_strtod_l+0x5a0>)
 8011cce:	f003 f963 	bl	8014f98 <nan>
 8011cd2:	ec5b ab10 	vmov	sl, fp, d0
 8011cd6:	e67b      	b.n	80119d0 <_strtod_l+0x88>
 8011cd8:	9b05      	ldr	r3, [sp, #20]
 8011cda:	9807      	ldr	r0, [sp, #28]
 8011cdc:	1af3      	subs	r3, r6, r3
 8011cde:	2f00      	cmp	r7, #0
 8011ce0:	bf08      	it	eq
 8011ce2:	462f      	moveq	r7, r5
 8011ce4:	2d10      	cmp	r5, #16
 8011ce6:	9306      	str	r3, [sp, #24]
 8011ce8:	46a8      	mov	r8, r5
 8011cea:	bfa8      	it	ge
 8011cec:	f04f 0810 	movge.w	r8, #16
 8011cf0:	f7ee fc28 	bl	8000544 <__aeabi_ui2d>
 8011cf4:	2d09      	cmp	r5, #9
 8011cf6:	4682      	mov	sl, r0
 8011cf8:	468b      	mov	fp, r1
 8011cfa:	dd13      	ble.n	8011d24 <_strtod_l+0x3dc>
 8011cfc:	4b7b      	ldr	r3, [pc, #492]	; (8011eec <_strtod_l+0x5a4>)
 8011cfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011d02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011d06:	f7ee fc97 	bl	8000638 <__aeabi_dmul>
 8011d0a:	4682      	mov	sl, r0
 8011d0c:	4648      	mov	r0, r9
 8011d0e:	468b      	mov	fp, r1
 8011d10:	f7ee fc18 	bl	8000544 <__aeabi_ui2d>
 8011d14:	4602      	mov	r2, r0
 8011d16:	460b      	mov	r3, r1
 8011d18:	4650      	mov	r0, sl
 8011d1a:	4659      	mov	r1, fp
 8011d1c:	f7ee fad6 	bl	80002cc <__adddf3>
 8011d20:	4682      	mov	sl, r0
 8011d22:	468b      	mov	fp, r1
 8011d24:	2d0f      	cmp	r5, #15
 8011d26:	dc38      	bgt.n	8011d9a <_strtod_l+0x452>
 8011d28:	9b06      	ldr	r3, [sp, #24]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f43f ae50 	beq.w	80119d0 <_strtod_l+0x88>
 8011d30:	dd24      	ble.n	8011d7c <_strtod_l+0x434>
 8011d32:	2b16      	cmp	r3, #22
 8011d34:	dc0b      	bgt.n	8011d4e <_strtod_l+0x406>
 8011d36:	496d      	ldr	r1, [pc, #436]	; (8011eec <_strtod_l+0x5a4>)
 8011d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d40:	4652      	mov	r2, sl
 8011d42:	465b      	mov	r3, fp
 8011d44:	f7ee fc78 	bl	8000638 <__aeabi_dmul>
 8011d48:	4682      	mov	sl, r0
 8011d4a:	468b      	mov	fp, r1
 8011d4c:	e640      	b.n	80119d0 <_strtod_l+0x88>
 8011d4e:	9a06      	ldr	r2, [sp, #24]
 8011d50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011d54:	4293      	cmp	r3, r2
 8011d56:	db20      	blt.n	8011d9a <_strtod_l+0x452>
 8011d58:	4c64      	ldr	r4, [pc, #400]	; (8011eec <_strtod_l+0x5a4>)
 8011d5a:	f1c5 050f 	rsb	r5, r5, #15
 8011d5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d62:	4652      	mov	r2, sl
 8011d64:	465b      	mov	r3, fp
 8011d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d6a:	f7ee fc65 	bl	8000638 <__aeabi_dmul>
 8011d6e:	9b06      	ldr	r3, [sp, #24]
 8011d70:	1b5d      	subs	r5, r3, r5
 8011d72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d7a:	e7e3      	b.n	8011d44 <_strtod_l+0x3fc>
 8011d7c:	9b06      	ldr	r3, [sp, #24]
 8011d7e:	3316      	adds	r3, #22
 8011d80:	db0b      	blt.n	8011d9a <_strtod_l+0x452>
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	1b9e      	subs	r6, r3, r6
 8011d86:	4b59      	ldr	r3, [pc, #356]	; (8011eec <_strtod_l+0x5a4>)
 8011d88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d90:	4650      	mov	r0, sl
 8011d92:	4659      	mov	r1, fp
 8011d94:	f7ee fd7a 	bl	800088c <__aeabi_ddiv>
 8011d98:	e7d6      	b.n	8011d48 <_strtod_l+0x400>
 8011d9a:	9b06      	ldr	r3, [sp, #24]
 8011d9c:	eba5 0808 	sub.w	r8, r5, r8
 8011da0:	4498      	add	r8, r3
 8011da2:	f1b8 0f00 	cmp.w	r8, #0
 8011da6:	dd74      	ble.n	8011e92 <_strtod_l+0x54a>
 8011da8:	f018 030f 	ands.w	r3, r8, #15
 8011dac:	d00a      	beq.n	8011dc4 <_strtod_l+0x47c>
 8011dae:	494f      	ldr	r1, [pc, #316]	; (8011eec <_strtod_l+0x5a4>)
 8011db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011db4:	4652      	mov	r2, sl
 8011db6:	465b      	mov	r3, fp
 8011db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dbc:	f7ee fc3c 	bl	8000638 <__aeabi_dmul>
 8011dc0:	4682      	mov	sl, r0
 8011dc2:	468b      	mov	fp, r1
 8011dc4:	f038 080f 	bics.w	r8, r8, #15
 8011dc8:	d04f      	beq.n	8011e6a <_strtod_l+0x522>
 8011dca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011dce:	dd22      	ble.n	8011e16 <_strtod_l+0x4ce>
 8011dd0:	2500      	movs	r5, #0
 8011dd2:	462e      	mov	r6, r5
 8011dd4:	9507      	str	r5, [sp, #28]
 8011dd6:	9505      	str	r5, [sp, #20]
 8011dd8:	2322      	movs	r3, #34	; 0x22
 8011dda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011ef4 <_strtod_l+0x5ac>
 8011dde:	6023      	str	r3, [r4, #0]
 8011de0:	f04f 0a00 	mov.w	sl, #0
 8011de4:	9b07      	ldr	r3, [sp, #28]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f43f adf2 	beq.w	80119d0 <_strtod_l+0x88>
 8011dec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011dee:	4620      	mov	r0, r4
 8011df0:	f001 fec6 	bl	8013b80 <_Bfree>
 8011df4:	9905      	ldr	r1, [sp, #20]
 8011df6:	4620      	mov	r0, r4
 8011df8:	f001 fec2 	bl	8013b80 <_Bfree>
 8011dfc:	4631      	mov	r1, r6
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f001 febe 	bl	8013b80 <_Bfree>
 8011e04:	9907      	ldr	r1, [sp, #28]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f001 feba 	bl	8013b80 <_Bfree>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f001 feb6 	bl	8013b80 <_Bfree>
 8011e14:	e5dc      	b.n	80119d0 <_strtod_l+0x88>
 8011e16:	4b36      	ldr	r3, [pc, #216]	; (8011ef0 <_strtod_l+0x5a8>)
 8011e18:	9304      	str	r3, [sp, #16]
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011e20:	4650      	mov	r0, sl
 8011e22:	4659      	mov	r1, fp
 8011e24:	4699      	mov	r9, r3
 8011e26:	f1b8 0f01 	cmp.w	r8, #1
 8011e2a:	dc21      	bgt.n	8011e70 <_strtod_l+0x528>
 8011e2c:	b10b      	cbz	r3, 8011e32 <_strtod_l+0x4ea>
 8011e2e:	4682      	mov	sl, r0
 8011e30:	468b      	mov	fp, r1
 8011e32:	4b2f      	ldr	r3, [pc, #188]	; (8011ef0 <_strtod_l+0x5a8>)
 8011e34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011e38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011e3c:	4652      	mov	r2, sl
 8011e3e:	465b      	mov	r3, fp
 8011e40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011e44:	f7ee fbf8 	bl	8000638 <__aeabi_dmul>
 8011e48:	4b2a      	ldr	r3, [pc, #168]	; (8011ef4 <_strtod_l+0x5ac>)
 8011e4a:	460a      	mov	r2, r1
 8011e4c:	400b      	ands	r3, r1
 8011e4e:	492a      	ldr	r1, [pc, #168]	; (8011ef8 <_strtod_l+0x5b0>)
 8011e50:	428b      	cmp	r3, r1
 8011e52:	4682      	mov	sl, r0
 8011e54:	d8bc      	bhi.n	8011dd0 <_strtod_l+0x488>
 8011e56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011e5a:	428b      	cmp	r3, r1
 8011e5c:	bf86      	itte	hi
 8011e5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011efc <_strtod_l+0x5b4>
 8011e62:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	9304      	str	r3, [sp, #16]
 8011e6e:	e084      	b.n	8011f7a <_strtod_l+0x632>
 8011e70:	f018 0f01 	tst.w	r8, #1
 8011e74:	d005      	beq.n	8011e82 <_strtod_l+0x53a>
 8011e76:	9b04      	ldr	r3, [sp, #16]
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	f7ee fbdc 	bl	8000638 <__aeabi_dmul>
 8011e80:	2301      	movs	r3, #1
 8011e82:	9a04      	ldr	r2, [sp, #16]
 8011e84:	3208      	adds	r2, #8
 8011e86:	f109 0901 	add.w	r9, r9, #1
 8011e8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011e8e:	9204      	str	r2, [sp, #16]
 8011e90:	e7c9      	b.n	8011e26 <_strtod_l+0x4de>
 8011e92:	d0ea      	beq.n	8011e6a <_strtod_l+0x522>
 8011e94:	f1c8 0800 	rsb	r8, r8, #0
 8011e98:	f018 020f 	ands.w	r2, r8, #15
 8011e9c:	d00a      	beq.n	8011eb4 <_strtod_l+0x56c>
 8011e9e:	4b13      	ldr	r3, [pc, #76]	; (8011eec <_strtod_l+0x5a4>)
 8011ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ea4:	4650      	mov	r0, sl
 8011ea6:	4659      	mov	r1, fp
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	f7ee fcee 	bl	800088c <__aeabi_ddiv>
 8011eb0:	4682      	mov	sl, r0
 8011eb2:	468b      	mov	fp, r1
 8011eb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011eb8:	d0d7      	beq.n	8011e6a <_strtod_l+0x522>
 8011eba:	f1b8 0f1f 	cmp.w	r8, #31
 8011ebe:	dd1f      	ble.n	8011f00 <_strtod_l+0x5b8>
 8011ec0:	2500      	movs	r5, #0
 8011ec2:	462e      	mov	r6, r5
 8011ec4:	9507      	str	r5, [sp, #28]
 8011ec6:	9505      	str	r5, [sp, #20]
 8011ec8:	2322      	movs	r3, #34	; 0x22
 8011eca:	f04f 0a00 	mov.w	sl, #0
 8011ece:	f04f 0b00 	mov.w	fp, #0
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	e786      	b.n	8011de4 <_strtod_l+0x49c>
 8011ed6:	bf00      	nop
 8011ed8:	080181e1 	.word	0x080181e1
 8011edc:	08018220 	.word	0x08018220
 8011ee0:	080181d9 	.word	0x080181d9
 8011ee4:	08018364 	.word	0x08018364
 8011ee8:	0801862b 	.word	0x0801862b
 8011eec:	080184f0 	.word	0x080184f0
 8011ef0:	080184c8 	.word	0x080184c8
 8011ef4:	7ff00000 	.word	0x7ff00000
 8011ef8:	7ca00000 	.word	0x7ca00000
 8011efc:	7fefffff 	.word	0x7fefffff
 8011f00:	f018 0310 	ands.w	r3, r8, #16
 8011f04:	bf18      	it	ne
 8011f06:	236a      	movne	r3, #106	; 0x6a
 8011f08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80122b8 <_strtod_l+0x970>
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	4650      	mov	r0, sl
 8011f10:	4659      	mov	r1, fp
 8011f12:	2300      	movs	r3, #0
 8011f14:	f018 0f01 	tst.w	r8, #1
 8011f18:	d004      	beq.n	8011f24 <_strtod_l+0x5dc>
 8011f1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011f1e:	f7ee fb8b 	bl	8000638 <__aeabi_dmul>
 8011f22:	2301      	movs	r3, #1
 8011f24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011f28:	f109 0908 	add.w	r9, r9, #8
 8011f2c:	d1f2      	bne.n	8011f14 <_strtod_l+0x5cc>
 8011f2e:	b10b      	cbz	r3, 8011f34 <_strtod_l+0x5ec>
 8011f30:	4682      	mov	sl, r0
 8011f32:	468b      	mov	fp, r1
 8011f34:	9b04      	ldr	r3, [sp, #16]
 8011f36:	b1c3      	cbz	r3, 8011f6a <_strtod_l+0x622>
 8011f38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011f3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	4659      	mov	r1, fp
 8011f44:	dd11      	ble.n	8011f6a <_strtod_l+0x622>
 8011f46:	2b1f      	cmp	r3, #31
 8011f48:	f340 8124 	ble.w	8012194 <_strtod_l+0x84c>
 8011f4c:	2b34      	cmp	r3, #52	; 0x34
 8011f4e:	bfde      	ittt	le
 8011f50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011f54:	f04f 33ff 	movle.w	r3, #4294967295
 8011f58:	fa03 f202 	lslle.w	r2, r3, r2
 8011f5c:	f04f 0a00 	mov.w	sl, #0
 8011f60:	bfcc      	ite	gt
 8011f62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011f66:	ea02 0b01 	andle.w	fp, r2, r1
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	4650      	mov	r0, sl
 8011f70:	4659      	mov	r1, fp
 8011f72:	f7ee fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 8011f76:	2800      	cmp	r0, #0
 8011f78:	d1a2      	bne.n	8011ec0 <_strtod_l+0x578>
 8011f7a:	9b07      	ldr	r3, [sp, #28]
 8011f7c:	9300      	str	r3, [sp, #0]
 8011f7e:	9908      	ldr	r1, [sp, #32]
 8011f80:	462b      	mov	r3, r5
 8011f82:	463a      	mov	r2, r7
 8011f84:	4620      	mov	r0, r4
 8011f86:	f001 fe63 	bl	8013c50 <__s2b>
 8011f8a:	9007      	str	r0, [sp, #28]
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	f43f af1f 	beq.w	8011dd0 <_strtod_l+0x488>
 8011f92:	9b05      	ldr	r3, [sp, #20]
 8011f94:	1b9e      	subs	r6, r3, r6
 8011f96:	9b06      	ldr	r3, [sp, #24]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	bfb4      	ite	lt
 8011f9c:	4633      	movlt	r3, r6
 8011f9e:	2300      	movge	r3, #0
 8011fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8011fa2:	9b06      	ldr	r3, [sp, #24]
 8011fa4:	2500      	movs	r5, #0
 8011fa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011faa:	9312      	str	r3, [sp, #72]	; 0x48
 8011fac:	462e      	mov	r6, r5
 8011fae:	9b07      	ldr	r3, [sp, #28]
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	6859      	ldr	r1, [r3, #4]
 8011fb4:	f001 fda4 	bl	8013b00 <_Balloc>
 8011fb8:	9005      	str	r0, [sp, #20]
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	f43f af0c 	beq.w	8011dd8 <_strtod_l+0x490>
 8011fc0:	9b07      	ldr	r3, [sp, #28]
 8011fc2:	691a      	ldr	r2, [r3, #16]
 8011fc4:	3202      	adds	r2, #2
 8011fc6:	f103 010c 	add.w	r1, r3, #12
 8011fca:	0092      	lsls	r2, r2, #2
 8011fcc:	300c      	adds	r0, #12
 8011fce:	f001 fd89 	bl	8013ae4 <memcpy>
 8011fd2:	ec4b ab10 	vmov	d0, sl, fp
 8011fd6:	aa1a      	add	r2, sp, #104	; 0x68
 8011fd8:	a919      	add	r1, sp, #100	; 0x64
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f002 f97e 	bl	80142dc <__d2b>
 8011fe0:	ec4b ab18 	vmov	d8, sl, fp
 8011fe4:	9018      	str	r0, [sp, #96]	; 0x60
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f43f aef6 	beq.w	8011dd8 <_strtod_l+0x490>
 8011fec:	2101      	movs	r1, #1
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f001 fec8 	bl	8013d84 <__i2b>
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	f43f aeee 	beq.w	8011dd8 <_strtod_l+0x490>
 8011ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ffe:	9904      	ldr	r1, [sp, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	bfab      	itete	ge
 8012004:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012006:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012008:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801200a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801200e:	bfac      	ite	ge
 8012010:	eb03 0902 	addge.w	r9, r3, r2
 8012014:	1ad7      	sublt	r7, r2, r3
 8012016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012018:	eba3 0801 	sub.w	r8, r3, r1
 801201c:	4490      	add	r8, r2
 801201e:	4ba1      	ldr	r3, [pc, #644]	; (80122a4 <_strtod_l+0x95c>)
 8012020:	f108 38ff 	add.w	r8, r8, #4294967295
 8012024:	4598      	cmp	r8, r3
 8012026:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801202a:	f280 80c7 	bge.w	80121bc <_strtod_l+0x874>
 801202e:	eba3 0308 	sub.w	r3, r3, r8
 8012032:	2b1f      	cmp	r3, #31
 8012034:	eba2 0203 	sub.w	r2, r2, r3
 8012038:	f04f 0101 	mov.w	r1, #1
 801203c:	f300 80b1 	bgt.w	80121a2 <_strtod_l+0x85a>
 8012040:	fa01 f303 	lsl.w	r3, r1, r3
 8012044:	930d      	str	r3, [sp, #52]	; 0x34
 8012046:	2300      	movs	r3, #0
 8012048:	9308      	str	r3, [sp, #32]
 801204a:	eb09 0802 	add.w	r8, r9, r2
 801204e:	9b04      	ldr	r3, [sp, #16]
 8012050:	45c1      	cmp	r9, r8
 8012052:	4417      	add	r7, r2
 8012054:	441f      	add	r7, r3
 8012056:	464b      	mov	r3, r9
 8012058:	bfa8      	it	ge
 801205a:	4643      	movge	r3, r8
 801205c:	42bb      	cmp	r3, r7
 801205e:	bfa8      	it	ge
 8012060:	463b      	movge	r3, r7
 8012062:	2b00      	cmp	r3, #0
 8012064:	bfc2      	ittt	gt
 8012066:	eba8 0803 	subgt.w	r8, r8, r3
 801206a:	1aff      	subgt	r7, r7, r3
 801206c:	eba9 0903 	subgt.w	r9, r9, r3
 8012070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012072:	2b00      	cmp	r3, #0
 8012074:	dd17      	ble.n	80120a6 <_strtod_l+0x75e>
 8012076:	4631      	mov	r1, r6
 8012078:	461a      	mov	r2, r3
 801207a:	4620      	mov	r0, r4
 801207c:	f001 ff42 	bl	8013f04 <__pow5mult>
 8012080:	4606      	mov	r6, r0
 8012082:	2800      	cmp	r0, #0
 8012084:	f43f aea8 	beq.w	8011dd8 <_strtod_l+0x490>
 8012088:	4601      	mov	r1, r0
 801208a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801208c:	4620      	mov	r0, r4
 801208e:	f001 fe8f 	bl	8013db0 <__multiply>
 8012092:	900b      	str	r0, [sp, #44]	; 0x2c
 8012094:	2800      	cmp	r0, #0
 8012096:	f43f ae9f 	beq.w	8011dd8 <_strtod_l+0x490>
 801209a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801209c:	4620      	mov	r0, r4
 801209e:	f001 fd6f 	bl	8013b80 <_Bfree>
 80120a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120a4:	9318      	str	r3, [sp, #96]	; 0x60
 80120a6:	f1b8 0f00 	cmp.w	r8, #0
 80120aa:	f300 808c 	bgt.w	80121c6 <_strtod_l+0x87e>
 80120ae:	9b06      	ldr	r3, [sp, #24]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	dd08      	ble.n	80120c6 <_strtod_l+0x77e>
 80120b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120b6:	9905      	ldr	r1, [sp, #20]
 80120b8:	4620      	mov	r0, r4
 80120ba:	f001 ff23 	bl	8013f04 <__pow5mult>
 80120be:	9005      	str	r0, [sp, #20]
 80120c0:	2800      	cmp	r0, #0
 80120c2:	f43f ae89 	beq.w	8011dd8 <_strtod_l+0x490>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	dd08      	ble.n	80120dc <_strtod_l+0x794>
 80120ca:	9905      	ldr	r1, [sp, #20]
 80120cc:	463a      	mov	r2, r7
 80120ce:	4620      	mov	r0, r4
 80120d0:	f001 ff72 	bl	8013fb8 <__lshift>
 80120d4:	9005      	str	r0, [sp, #20]
 80120d6:	2800      	cmp	r0, #0
 80120d8:	f43f ae7e 	beq.w	8011dd8 <_strtod_l+0x490>
 80120dc:	f1b9 0f00 	cmp.w	r9, #0
 80120e0:	dd08      	ble.n	80120f4 <_strtod_l+0x7ac>
 80120e2:	4631      	mov	r1, r6
 80120e4:	464a      	mov	r2, r9
 80120e6:	4620      	mov	r0, r4
 80120e8:	f001 ff66 	bl	8013fb8 <__lshift>
 80120ec:	4606      	mov	r6, r0
 80120ee:	2800      	cmp	r0, #0
 80120f0:	f43f ae72 	beq.w	8011dd8 <_strtod_l+0x490>
 80120f4:	9a05      	ldr	r2, [sp, #20]
 80120f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120f8:	4620      	mov	r0, r4
 80120fa:	f001 ffe9 	bl	80140d0 <__mdiff>
 80120fe:	4605      	mov	r5, r0
 8012100:	2800      	cmp	r0, #0
 8012102:	f43f ae69 	beq.w	8011dd8 <_strtod_l+0x490>
 8012106:	68c3      	ldr	r3, [r0, #12]
 8012108:	930b      	str	r3, [sp, #44]	; 0x2c
 801210a:	2300      	movs	r3, #0
 801210c:	60c3      	str	r3, [r0, #12]
 801210e:	4631      	mov	r1, r6
 8012110:	f001 ffc2 	bl	8014098 <__mcmp>
 8012114:	2800      	cmp	r0, #0
 8012116:	da60      	bge.n	80121da <_strtod_l+0x892>
 8012118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801211a:	ea53 030a 	orrs.w	r3, r3, sl
 801211e:	f040 8082 	bne.w	8012226 <_strtod_l+0x8de>
 8012122:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012126:	2b00      	cmp	r3, #0
 8012128:	d17d      	bne.n	8012226 <_strtod_l+0x8de>
 801212a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801212e:	0d1b      	lsrs	r3, r3, #20
 8012130:	051b      	lsls	r3, r3, #20
 8012132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012136:	d976      	bls.n	8012226 <_strtod_l+0x8de>
 8012138:	696b      	ldr	r3, [r5, #20]
 801213a:	b913      	cbnz	r3, 8012142 <_strtod_l+0x7fa>
 801213c:	692b      	ldr	r3, [r5, #16]
 801213e:	2b01      	cmp	r3, #1
 8012140:	dd71      	ble.n	8012226 <_strtod_l+0x8de>
 8012142:	4629      	mov	r1, r5
 8012144:	2201      	movs	r2, #1
 8012146:	4620      	mov	r0, r4
 8012148:	f001 ff36 	bl	8013fb8 <__lshift>
 801214c:	4631      	mov	r1, r6
 801214e:	4605      	mov	r5, r0
 8012150:	f001 ffa2 	bl	8014098 <__mcmp>
 8012154:	2800      	cmp	r0, #0
 8012156:	dd66      	ble.n	8012226 <_strtod_l+0x8de>
 8012158:	9904      	ldr	r1, [sp, #16]
 801215a:	4a53      	ldr	r2, [pc, #332]	; (80122a8 <_strtod_l+0x960>)
 801215c:	465b      	mov	r3, fp
 801215e:	2900      	cmp	r1, #0
 8012160:	f000 8081 	beq.w	8012266 <_strtod_l+0x91e>
 8012164:	ea02 010b 	and.w	r1, r2, fp
 8012168:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801216c:	dc7b      	bgt.n	8012266 <_strtod_l+0x91e>
 801216e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012172:	f77f aea9 	ble.w	8011ec8 <_strtod_l+0x580>
 8012176:	4b4d      	ldr	r3, [pc, #308]	; (80122ac <_strtod_l+0x964>)
 8012178:	4650      	mov	r0, sl
 801217a:	4659      	mov	r1, fp
 801217c:	2200      	movs	r2, #0
 801217e:	f7ee fa5b 	bl	8000638 <__aeabi_dmul>
 8012182:	460b      	mov	r3, r1
 8012184:	4303      	orrs	r3, r0
 8012186:	bf08      	it	eq
 8012188:	2322      	moveq	r3, #34	; 0x22
 801218a:	4682      	mov	sl, r0
 801218c:	468b      	mov	fp, r1
 801218e:	bf08      	it	eq
 8012190:	6023      	streq	r3, [r4, #0]
 8012192:	e62b      	b.n	8011dec <_strtod_l+0x4a4>
 8012194:	f04f 32ff 	mov.w	r2, #4294967295
 8012198:	fa02 f303 	lsl.w	r3, r2, r3
 801219c:	ea03 0a0a 	and.w	sl, r3, sl
 80121a0:	e6e3      	b.n	8011f6a <_strtod_l+0x622>
 80121a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80121a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80121aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80121ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80121b2:	fa01 f308 	lsl.w	r3, r1, r8
 80121b6:	9308      	str	r3, [sp, #32]
 80121b8:	910d      	str	r1, [sp, #52]	; 0x34
 80121ba:	e746      	b.n	801204a <_strtod_l+0x702>
 80121bc:	2300      	movs	r3, #0
 80121be:	9308      	str	r3, [sp, #32]
 80121c0:	2301      	movs	r3, #1
 80121c2:	930d      	str	r3, [sp, #52]	; 0x34
 80121c4:	e741      	b.n	801204a <_strtod_l+0x702>
 80121c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80121c8:	4642      	mov	r2, r8
 80121ca:	4620      	mov	r0, r4
 80121cc:	f001 fef4 	bl	8013fb8 <__lshift>
 80121d0:	9018      	str	r0, [sp, #96]	; 0x60
 80121d2:	2800      	cmp	r0, #0
 80121d4:	f47f af6b 	bne.w	80120ae <_strtod_l+0x766>
 80121d8:	e5fe      	b.n	8011dd8 <_strtod_l+0x490>
 80121da:	465f      	mov	r7, fp
 80121dc:	d16e      	bne.n	80122bc <_strtod_l+0x974>
 80121de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121e4:	b342      	cbz	r2, 8012238 <_strtod_l+0x8f0>
 80121e6:	4a32      	ldr	r2, [pc, #200]	; (80122b0 <_strtod_l+0x968>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d128      	bne.n	801223e <_strtod_l+0x8f6>
 80121ec:	9b04      	ldr	r3, [sp, #16]
 80121ee:	4651      	mov	r1, sl
 80121f0:	b1eb      	cbz	r3, 801222e <_strtod_l+0x8e6>
 80121f2:	4b2d      	ldr	r3, [pc, #180]	; (80122a8 <_strtod_l+0x960>)
 80121f4:	403b      	ands	r3, r7
 80121f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121fa:	f04f 32ff 	mov.w	r2, #4294967295
 80121fe:	d819      	bhi.n	8012234 <_strtod_l+0x8ec>
 8012200:	0d1b      	lsrs	r3, r3, #20
 8012202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012206:	fa02 f303 	lsl.w	r3, r2, r3
 801220a:	4299      	cmp	r1, r3
 801220c:	d117      	bne.n	801223e <_strtod_l+0x8f6>
 801220e:	4b29      	ldr	r3, [pc, #164]	; (80122b4 <_strtod_l+0x96c>)
 8012210:	429f      	cmp	r7, r3
 8012212:	d102      	bne.n	801221a <_strtod_l+0x8d2>
 8012214:	3101      	adds	r1, #1
 8012216:	f43f addf 	beq.w	8011dd8 <_strtod_l+0x490>
 801221a:	4b23      	ldr	r3, [pc, #140]	; (80122a8 <_strtod_l+0x960>)
 801221c:	403b      	ands	r3, r7
 801221e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012222:	f04f 0a00 	mov.w	sl, #0
 8012226:	9b04      	ldr	r3, [sp, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1a4      	bne.n	8012176 <_strtod_l+0x82e>
 801222c:	e5de      	b.n	8011dec <_strtod_l+0x4a4>
 801222e:	f04f 33ff 	mov.w	r3, #4294967295
 8012232:	e7ea      	b.n	801220a <_strtod_l+0x8c2>
 8012234:	4613      	mov	r3, r2
 8012236:	e7e8      	b.n	801220a <_strtod_l+0x8c2>
 8012238:	ea53 030a 	orrs.w	r3, r3, sl
 801223c:	d08c      	beq.n	8012158 <_strtod_l+0x810>
 801223e:	9b08      	ldr	r3, [sp, #32]
 8012240:	b1db      	cbz	r3, 801227a <_strtod_l+0x932>
 8012242:	423b      	tst	r3, r7
 8012244:	d0ef      	beq.n	8012226 <_strtod_l+0x8de>
 8012246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012248:	9a04      	ldr	r2, [sp, #16]
 801224a:	4650      	mov	r0, sl
 801224c:	4659      	mov	r1, fp
 801224e:	b1c3      	cbz	r3, 8012282 <_strtod_l+0x93a>
 8012250:	f7ff fb5b 	bl	801190a <sulp>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	ec51 0b18 	vmov	r0, r1, d8
 801225c:	f7ee f836 	bl	80002cc <__adddf3>
 8012260:	4682      	mov	sl, r0
 8012262:	468b      	mov	fp, r1
 8012264:	e7df      	b.n	8012226 <_strtod_l+0x8de>
 8012266:	4013      	ands	r3, r2
 8012268:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801226c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012270:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012274:	f04f 3aff 	mov.w	sl, #4294967295
 8012278:	e7d5      	b.n	8012226 <_strtod_l+0x8de>
 801227a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801227c:	ea13 0f0a 	tst.w	r3, sl
 8012280:	e7e0      	b.n	8012244 <_strtod_l+0x8fc>
 8012282:	f7ff fb42 	bl	801190a <sulp>
 8012286:	4602      	mov	r2, r0
 8012288:	460b      	mov	r3, r1
 801228a:	ec51 0b18 	vmov	r0, r1, d8
 801228e:	f7ee f81b 	bl	80002c8 <__aeabi_dsub>
 8012292:	2200      	movs	r2, #0
 8012294:	2300      	movs	r3, #0
 8012296:	4682      	mov	sl, r0
 8012298:	468b      	mov	fp, r1
 801229a:	f7ee fc35 	bl	8000b08 <__aeabi_dcmpeq>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d0c1      	beq.n	8012226 <_strtod_l+0x8de>
 80122a2:	e611      	b.n	8011ec8 <_strtod_l+0x580>
 80122a4:	fffffc02 	.word	0xfffffc02
 80122a8:	7ff00000 	.word	0x7ff00000
 80122ac:	39500000 	.word	0x39500000
 80122b0:	000fffff 	.word	0x000fffff
 80122b4:	7fefffff 	.word	0x7fefffff
 80122b8:	08018238 	.word	0x08018238
 80122bc:	4631      	mov	r1, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	f002 f868 	bl	8014394 <__ratio>
 80122c4:	ec59 8b10 	vmov	r8, r9, d0
 80122c8:	ee10 0a10 	vmov	r0, s0
 80122cc:	2200      	movs	r2, #0
 80122ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122d2:	4649      	mov	r1, r9
 80122d4:	f7ee fc2c 	bl	8000b30 <__aeabi_dcmple>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d07a      	beq.n	80123d2 <_strtod_l+0xa8a>
 80122dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d04a      	beq.n	8012378 <_strtod_l+0xa30>
 80122e2:	4b95      	ldr	r3, [pc, #596]	; (8012538 <_strtod_l+0xbf0>)
 80122e4:	2200      	movs	r2, #0
 80122e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012538 <_strtod_l+0xbf0>
 80122ee:	f04f 0800 	mov.w	r8, #0
 80122f2:	4b92      	ldr	r3, [pc, #584]	; (801253c <_strtod_l+0xbf4>)
 80122f4:	403b      	ands	r3, r7
 80122f6:	930d      	str	r3, [sp, #52]	; 0x34
 80122f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122fa:	4b91      	ldr	r3, [pc, #580]	; (8012540 <_strtod_l+0xbf8>)
 80122fc:	429a      	cmp	r2, r3
 80122fe:	f040 80b0 	bne.w	8012462 <_strtod_l+0xb1a>
 8012302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012306:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801230a:	ec4b ab10 	vmov	d0, sl, fp
 801230e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012312:	f001 ff67 	bl	80141e4 <__ulp>
 8012316:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801231a:	ec53 2b10 	vmov	r2, r3, d0
 801231e:	f7ee f98b 	bl	8000638 <__aeabi_dmul>
 8012322:	4652      	mov	r2, sl
 8012324:	465b      	mov	r3, fp
 8012326:	f7ed ffd1 	bl	80002cc <__adddf3>
 801232a:	460b      	mov	r3, r1
 801232c:	4983      	ldr	r1, [pc, #524]	; (801253c <_strtod_l+0xbf4>)
 801232e:	4a85      	ldr	r2, [pc, #532]	; (8012544 <_strtod_l+0xbfc>)
 8012330:	4019      	ands	r1, r3
 8012332:	4291      	cmp	r1, r2
 8012334:	4682      	mov	sl, r0
 8012336:	d960      	bls.n	80123fa <_strtod_l+0xab2>
 8012338:	ee18 3a90 	vmov	r3, s17
 801233c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012340:	4293      	cmp	r3, r2
 8012342:	d104      	bne.n	801234e <_strtod_l+0xa06>
 8012344:	ee18 3a10 	vmov	r3, s16
 8012348:	3301      	adds	r3, #1
 801234a:	f43f ad45 	beq.w	8011dd8 <_strtod_l+0x490>
 801234e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012550 <_strtod_l+0xc08>
 8012352:	f04f 3aff 	mov.w	sl, #4294967295
 8012356:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012358:	4620      	mov	r0, r4
 801235a:	f001 fc11 	bl	8013b80 <_Bfree>
 801235e:	9905      	ldr	r1, [sp, #20]
 8012360:	4620      	mov	r0, r4
 8012362:	f001 fc0d 	bl	8013b80 <_Bfree>
 8012366:	4631      	mov	r1, r6
 8012368:	4620      	mov	r0, r4
 801236a:	f001 fc09 	bl	8013b80 <_Bfree>
 801236e:	4629      	mov	r1, r5
 8012370:	4620      	mov	r0, r4
 8012372:	f001 fc05 	bl	8013b80 <_Bfree>
 8012376:	e61a      	b.n	8011fae <_strtod_l+0x666>
 8012378:	f1ba 0f00 	cmp.w	sl, #0
 801237c:	d11b      	bne.n	80123b6 <_strtod_l+0xa6e>
 801237e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012382:	b9f3      	cbnz	r3, 80123c2 <_strtod_l+0xa7a>
 8012384:	4b6c      	ldr	r3, [pc, #432]	; (8012538 <_strtod_l+0xbf0>)
 8012386:	2200      	movs	r2, #0
 8012388:	4640      	mov	r0, r8
 801238a:	4649      	mov	r1, r9
 801238c:	f7ee fbc6 	bl	8000b1c <__aeabi_dcmplt>
 8012390:	b9d0      	cbnz	r0, 80123c8 <_strtod_l+0xa80>
 8012392:	4640      	mov	r0, r8
 8012394:	4649      	mov	r1, r9
 8012396:	4b6c      	ldr	r3, [pc, #432]	; (8012548 <_strtod_l+0xc00>)
 8012398:	2200      	movs	r2, #0
 801239a:	f7ee f94d 	bl	8000638 <__aeabi_dmul>
 801239e:	4680      	mov	r8, r0
 80123a0:	4689      	mov	r9, r1
 80123a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80123aa:	9315      	str	r3, [sp, #84]	; 0x54
 80123ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80123b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80123b4:	e79d      	b.n	80122f2 <_strtod_l+0x9aa>
 80123b6:	f1ba 0f01 	cmp.w	sl, #1
 80123ba:	d102      	bne.n	80123c2 <_strtod_l+0xa7a>
 80123bc:	2f00      	cmp	r7, #0
 80123be:	f43f ad83 	beq.w	8011ec8 <_strtod_l+0x580>
 80123c2:	4b62      	ldr	r3, [pc, #392]	; (801254c <_strtod_l+0xc04>)
 80123c4:	2200      	movs	r2, #0
 80123c6:	e78e      	b.n	80122e6 <_strtod_l+0x99e>
 80123c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012548 <_strtod_l+0xc00>
 80123cc:	f04f 0800 	mov.w	r8, #0
 80123d0:	e7e7      	b.n	80123a2 <_strtod_l+0xa5a>
 80123d2:	4b5d      	ldr	r3, [pc, #372]	; (8012548 <_strtod_l+0xc00>)
 80123d4:	4640      	mov	r0, r8
 80123d6:	4649      	mov	r1, r9
 80123d8:	2200      	movs	r2, #0
 80123da:	f7ee f92d 	bl	8000638 <__aeabi_dmul>
 80123de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123e0:	4680      	mov	r8, r0
 80123e2:	4689      	mov	r9, r1
 80123e4:	b933      	cbnz	r3, 80123f4 <_strtod_l+0xaac>
 80123e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ea:	900e      	str	r0, [sp, #56]	; 0x38
 80123ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80123ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80123f2:	e7dd      	b.n	80123b0 <_strtod_l+0xa68>
 80123f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80123f8:	e7f9      	b.n	80123ee <_strtod_l+0xaa6>
 80123fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80123fe:	9b04      	ldr	r3, [sp, #16]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1a8      	bne.n	8012356 <_strtod_l+0xa0e>
 8012404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801240a:	0d1b      	lsrs	r3, r3, #20
 801240c:	051b      	lsls	r3, r3, #20
 801240e:	429a      	cmp	r2, r3
 8012410:	d1a1      	bne.n	8012356 <_strtod_l+0xa0e>
 8012412:	4640      	mov	r0, r8
 8012414:	4649      	mov	r1, r9
 8012416:	f7ee fdcd 	bl	8000fb4 <__aeabi_d2lz>
 801241a:	f7ee f8df 	bl	80005dc <__aeabi_l2d>
 801241e:	4602      	mov	r2, r0
 8012420:	460b      	mov	r3, r1
 8012422:	4640      	mov	r0, r8
 8012424:	4649      	mov	r1, r9
 8012426:	f7ed ff4f 	bl	80002c8 <__aeabi_dsub>
 801242a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801242c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012430:	ea43 030a 	orr.w	r3, r3, sl
 8012434:	4313      	orrs	r3, r2
 8012436:	4680      	mov	r8, r0
 8012438:	4689      	mov	r9, r1
 801243a:	d055      	beq.n	80124e8 <_strtod_l+0xba0>
 801243c:	a336      	add	r3, pc, #216	; (adr r3, 8012518 <_strtod_l+0xbd0>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f7ee fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8012446:	2800      	cmp	r0, #0
 8012448:	f47f acd0 	bne.w	8011dec <_strtod_l+0x4a4>
 801244c:	a334      	add	r3, pc, #208	; (adr r3, 8012520 <_strtod_l+0xbd8>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	4640      	mov	r0, r8
 8012454:	4649      	mov	r1, r9
 8012456:	f7ee fb7f 	bl	8000b58 <__aeabi_dcmpgt>
 801245a:	2800      	cmp	r0, #0
 801245c:	f43f af7b 	beq.w	8012356 <_strtod_l+0xa0e>
 8012460:	e4c4      	b.n	8011dec <_strtod_l+0x4a4>
 8012462:	9b04      	ldr	r3, [sp, #16]
 8012464:	b333      	cbz	r3, 80124b4 <_strtod_l+0xb6c>
 8012466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012468:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801246c:	d822      	bhi.n	80124b4 <_strtod_l+0xb6c>
 801246e:	a32e      	add	r3, pc, #184	; (adr r3, 8012528 <_strtod_l+0xbe0>)
 8012470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012474:	4640      	mov	r0, r8
 8012476:	4649      	mov	r1, r9
 8012478:	f7ee fb5a 	bl	8000b30 <__aeabi_dcmple>
 801247c:	b1a0      	cbz	r0, 80124a8 <_strtod_l+0xb60>
 801247e:	4649      	mov	r1, r9
 8012480:	4640      	mov	r0, r8
 8012482:	f7ee fbb1 	bl	8000be8 <__aeabi_d2uiz>
 8012486:	2801      	cmp	r0, #1
 8012488:	bf38      	it	cc
 801248a:	2001      	movcc	r0, #1
 801248c:	f7ee f85a 	bl	8000544 <__aeabi_ui2d>
 8012490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012492:	4680      	mov	r8, r0
 8012494:	4689      	mov	r9, r1
 8012496:	bb23      	cbnz	r3, 80124e2 <_strtod_l+0xb9a>
 8012498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801249c:	9010      	str	r0, [sp, #64]	; 0x40
 801249e:	9311      	str	r3, [sp, #68]	; 0x44
 80124a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80124a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80124a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80124b0:	1a9b      	subs	r3, r3, r2
 80124b2:	9309      	str	r3, [sp, #36]	; 0x24
 80124b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80124b8:	eeb0 0a48 	vmov.f32	s0, s16
 80124bc:	eef0 0a68 	vmov.f32	s1, s17
 80124c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80124c4:	f001 fe8e 	bl	80141e4 <__ulp>
 80124c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80124cc:	ec53 2b10 	vmov	r2, r3, d0
 80124d0:	f7ee f8b2 	bl	8000638 <__aeabi_dmul>
 80124d4:	ec53 2b18 	vmov	r2, r3, d8
 80124d8:	f7ed fef8 	bl	80002cc <__adddf3>
 80124dc:	4682      	mov	sl, r0
 80124de:	468b      	mov	fp, r1
 80124e0:	e78d      	b.n	80123fe <_strtod_l+0xab6>
 80124e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80124e6:	e7db      	b.n	80124a0 <_strtod_l+0xb58>
 80124e8:	a311      	add	r3, pc, #68	; (adr r3, 8012530 <_strtod_l+0xbe8>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	f7ee fb15 	bl	8000b1c <__aeabi_dcmplt>
 80124f2:	e7b2      	b.n	801245a <_strtod_l+0xb12>
 80124f4:	2300      	movs	r3, #0
 80124f6:	930a      	str	r3, [sp, #40]	; 0x28
 80124f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80124fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	f7ff ba6b 	b.w	80119d8 <_strtod_l+0x90>
 8012502:	2a65      	cmp	r2, #101	; 0x65
 8012504:	f43f ab5f 	beq.w	8011bc6 <_strtod_l+0x27e>
 8012508:	2a45      	cmp	r2, #69	; 0x45
 801250a:	f43f ab5c 	beq.w	8011bc6 <_strtod_l+0x27e>
 801250e:	2301      	movs	r3, #1
 8012510:	f7ff bb94 	b.w	8011c3c <_strtod_l+0x2f4>
 8012514:	f3af 8000 	nop.w
 8012518:	94a03595 	.word	0x94a03595
 801251c:	3fdfffff 	.word	0x3fdfffff
 8012520:	35afe535 	.word	0x35afe535
 8012524:	3fe00000 	.word	0x3fe00000
 8012528:	ffc00000 	.word	0xffc00000
 801252c:	41dfffff 	.word	0x41dfffff
 8012530:	94a03595 	.word	0x94a03595
 8012534:	3fcfffff 	.word	0x3fcfffff
 8012538:	3ff00000 	.word	0x3ff00000
 801253c:	7ff00000 	.word	0x7ff00000
 8012540:	7fe00000 	.word	0x7fe00000
 8012544:	7c9fffff 	.word	0x7c9fffff
 8012548:	3fe00000 	.word	0x3fe00000
 801254c:	bff00000 	.word	0xbff00000
 8012550:	7fefffff 	.word	0x7fefffff

08012554 <_strtod_r>:
 8012554:	4b01      	ldr	r3, [pc, #4]	; (801255c <_strtod_r+0x8>)
 8012556:	f7ff b9f7 	b.w	8011948 <_strtod_l>
 801255a:	bf00      	nop
 801255c:	20000094 	.word	0x20000094

08012560 <_strtol_l.constprop.0>:
 8012560:	2b01      	cmp	r3, #1
 8012562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012566:	d001      	beq.n	801256c <_strtol_l.constprop.0+0xc>
 8012568:	2b24      	cmp	r3, #36	; 0x24
 801256a:	d906      	bls.n	801257a <_strtol_l.constprop.0+0x1a>
 801256c:	f7fe fa6c 	bl	8010a48 <__errno>
 8012570:	2316      	movs	r3, #22
 8012572:	6003      	str	r3, [r0, #0]
 8012574:	2000      	movs	r0, #0
 8012576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801257a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012660 <_strtol_l.constprop.0+0x100>
 801257e:	460d      	mov	r5, r1
 8012580:	462e      	mov	r6, r5
 8012582:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012586:	f814 700c 	ldrb.w	r7, [r4, ip]
 801258a:	f017 0708 	ands.w	r7, r7, #8
 801258e:	d1f7      	bne.n	8012580 <_strtol_l.constprop.0+0x20>
 8012590:	2c2d      	cmp	r4, #45	; 0x2d
 8012592:	d132      	bne.n	80125fa <_strtol_l.constprop.0+0x9a>
 8012594:	782c      	ldrb	r4, [r5, #0]
 8012596:	2701      	movs	r7, #1
 8012598:	1cb5      	adds	r5, r6, #2
 801259a:	2b00      	cmp	r3, #0
 801259c:	d05b      	beq.n	8012656 <_strtol_l.constprop.0+0xf6>
 801259e:	2b10      	cmp	r3, #16
 80125a0:	d109      	bne.n	80125b6 <_strtol_l.constprop.0+0x56>
 80125a2:	2c30      	cmp	r4, #48	; 0x30
 80125a4:	d107      	bne.n	80125b6 <_strtol_l.constprop.0+0x56>
 80125a6:	782c      	ldrb	r4, [r5, #0]
 80125a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80125ac:	2c58      	cmp	r4, #88	; 0x58
 80125ae:	d14d      	bne.n	801264c <_strtol_l.constprop.0+0xec>
 80125b0:	786c      	ldrb	r4, [r5, #1]
 80125b2:	2310      	movs	r3, #16
 80125b4:	3502      	adds	r5, #2
 80125b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80125ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80125be:	f04f 0c00 	mov.w	ip, #0
 80125c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80125c6:	4666      	mov	r6, ip
 80125c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80125cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80125d0:	f1be 0f09 	cmp.w	lr, #9
 80125d4:	d816      	bhi.n	8012604 <_strtol_l.constprop.0+0xa4>
 80125d6:	4674      	mov	r4, lr
 80125d8:	42a3      	cmp	r3, r4
 80125da:	dd24      	ble.n	8012626 <_strtol_l.constprop.0+0xc6>
 80125dc:	f1bc 0f00 	cmp.w	ip, #0
 80125e0:	db1e      	blt.n	8012620 <_strtol_l.constprop.0+0xc0>
 80125e2:	45b1      	cmp	r9, r6
 80125e4:	d31c      	bcc.n	8012620 <_strtol_l.constprop.0+0xc0>
 80125e6:	d101      	bne.n	80125ec <_strtol_l.constprop.0+0x8c>
 80125e8:	45a2      	cmp	sl, r4
 80125ea:	db19      	blt.n	8012620 <_strtol_l.constprop.0+0xc0>
 80125ec:	fb06 4603 	mla	r6, r6, r3, r4
 80125f0:	f04f 0c01 	mov.w	ip, #1
 80125f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125f8:	e7e8      	b.n	80125cc <_strtol_l.constprop.0+0x6c>
 80125fa:	2c2b      	cmp	r4, #43	; 0x2b
 80125fc:	bf04      	itt	eq
 80125fe:	782c      	ldrbeq	r4, [r5, #0]
 8012600:	1cb5      	addeq	r5, r6, #2
 8012602:	e7ca      	b.n	801259a <_strtol_l.constprop.0+0x3a>
 8012604:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012608:	f1be 0f19 	cmp.w	lr, #25
 801260c:	d801      	bhi.n	8012612 <_strtol_l.constprop.0+0xb2>
 801260e:	3c37      	subs	r4, #55	; 0x37
 8012610:	e7e2      	b.n	80125d8 <_strtol_l.constprop.0+0x78>
 8012612:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012616:	f1be 0f19 	cmp.w	lr, #25
 801261a:	d804      	bhi.n	8012626 <_strtol_l.constprop.0+0xc6>
 801261c:	3c57      	subs	r4, #87	; 0x57
 801261e:	e7db      	b.n	80125d8 <_strtol_l.constprop.0+0x78>
 8012620:	f04f 3cff 	mov.w	ip, #4294967295
 8012624:	e7e6      	b.n	80125f4 <_strtol_l.constprop.0+0x94>
 8012626:	f1bc 0f00 	cmp.w	ip, #0
 801262a:	da05      	bge.n	8012638 <_strtol_l.constprop.0+0xd8>
 801262c:	2322      	movs	r3, #34	; 0x22
 801262e:	6003      	str	r3, [r0, #0]
 8012630:	4646      	mov	r6, r8
 8012632:	b942      	cbnz	r2, 8012646 <_strtol_l.constprop.0+0xe6>
 8012634:	4630      	mov	r0, r6
 8012636:	e79e      	b.n	8012576 <_strtol_l.constprop.0+0x16>
 8012638:	b107      	cbz	r7, 801263c <_strtol_l.constprop.0+0xdc>
 801263a:	4276      	negs	r6, r6
 801263c:	2a00      	cmp	r2, #0
 801263e:	d0f9      	beq.n	8012634 <_strtol_l.constprop.0+0xd4>
 8012640:	f1bc 0f00 	cmp.w	ip, #0
 8012644:	d000      	beq.n	8012648 <_strtol_l.constprop.0+0xe8>
 8012646:	1e69      	subs	r1, r5, #1
 8012648:	6011      	str	r1, [r2, #0]
 801264a:	e7f3      	b.n	8012634 <_strtol_l.constprop.0+0xd4>
 801264c:	2430      	movs	r4, #48	; 0x30
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1b1      	bne.n	80125b6 <_strtol_l.constprop.0+0x56>
 8012652:	2308      	movs	r3, #8
 8012654:	e7af      	b.n	80125b6 <_strtol_l.constprop.0+0x56>
 8012656:	2c30      	cmp	r4, #48	; 0x30
 8012658:	d0a5      	beq.n	80125a6 <_strtol_l.constprop.0+0x46>
 801265a:	230a      	movs	r3, #10
 801265c:	e7ab      	b.n	80125b6 <_strtol_l.constprop.0+0x56>
 801265e:	bf00      	nop
 8012660:	08018261 	.word	0x08018261

08012664 <_strtol_r>:
 8012664:	f7ff bf7c 	b.w	8012560 <_strtol_l.constprop.0>

08012668 <_write_r>:
 8012668:	b538      	push	{r3, r4, r5, lr}
 801266a:	4d07      	ldr	r5, [pc, #28]	; (8012688 <_write_r+0x20>)
 801266c:	4604      	mov	r4, r0
 801266e:	4608      	mov	r0, r1
 8012670:	4611      	mov	r1, r2
 8012672:	2200      	movs	r2, #0
 8012674:	602a      	str	r2, [r5, #0]
 8012676:	461a      	mov	r2, r3
 8012678:	f7f4 f945 	bl	8006906 <_write>
 801267c:	1c43      	adds	r3, r0, #1
 801267e:	d102      	bne.n	8012686 <_write_r+0x1e>
 8012680:	682b      	ldr	r3, [r5, #0]
 8012682:	b103      	cbz	r3, 8012686 <_write_r+0x1e>
 8012684:	6023      	str	r3, [r4, #0]
 8012686:	bd38      	pop	{r3, r4, r5, pc}
 8012688:	2000496c 	.word	0x2000496c

0801268c <_close_r>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	4d06      	ldr	r5, [pc, #24]	; (80126a8 <_close_r+0x1c>)
 8012690:	2300      	movs	r3, #0
 8012692:	4604      	mov	r4, r0
 8012694:	4608      	mov	r0, r1
 8012696:	602b      	str	r3, [r5, #0]
 8012698:	f7f4 f951 	bl	800693e <_close>
 801269c:	1c43      	adds	r3, r0, #1
 801269e:	d102      	bne.n	80126a6 <_close_r+0x1a>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	b103      	cbz	r3, 80126a6 <_close_r+0x1a>
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	bd38      	pop	{r3, r4, r5, pc}
 80126a8:	2000496c 	.word	0x2000496c

080126ac <quorem>:
 80126ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	6903      	ldr	r3, [r0, #16]
 80126b2:	690c      	ldr	r4, [r1, #16]
 80126b4:	42a3      	cmp	r3, r4
 80126b6:	4607      	mov	r7, r0
 80126b8:	f2c0 8081 	blt.w	80127be <quorem+0x112>
 80126bc:	3c01      	subs	r4, #1
 80126be:	f101 0814 	add.w	r8, r1, #20
 80126c2:	f100 0514 	add.w	r5, r0, #20
 80126c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126ca:	9301      	str	r3, [sp, #4]
 80126cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80126d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126d4:	3301      	adds	r3, #1
 80126d6:	429a      	cmp	r2, r3
 80126d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80126dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80126e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80126e4:	d331      	bcc.n	801274a <quorem+0x9e>
 80126e6:	f04f 0e00 	mov.w	lr, #0
 80126ea:	4640      	mov	r0, r8
 80126ec:	46ac      	mov	ip, r5
 80126ee:	46f2      	mov	sl, lr
 80126f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80126f4:	b293      	uxth	r3, r2
 80126f6:	fb06 e303 	mla	r3, r6, r3, lr
 80126fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80126fe:	b29b      	uxth	r3, r3
 8012700:	ebaa 0303 	sub.w	r3, sl, r3
 8012704:	f8dc a000 	ldr.w	sl, [ip]
 8012708:	0c12      	lsrs	r2, r2, #16
 801270a:	fa13 f38a 	uxtah	r3, r3, sl
 801270e:	fb06 e202 	mla	r2, r6, r2, lr
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	9b00      	ldr	r3, [sp, #0]
 8012716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801271a:	b292      	uxth	r2, r2
 801271c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012724:	f8bd 3000 	ldrh.w	r3, [sp]
 8012728:	4581      	cmp	r9, r0
 801272a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801272e:	f84c 3b04 	str.w	r3, [ip], #4
 8012732:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012736:	d2db      	bcs.n	80126f0 <quorem+0x44>
 8012738:	f855 300b 	ldr.w	r3, [r5, fp]
 801273c:	b92b      	cbnz	r3, 801274a <quorem+0x9e>
 801273e:	9b01      	ldr	r3, [sp, #4]
 8012740:	3b04      	subs	r3, #4
 8012742:	429d      	cmp	r5, r3
 8012744:	461a      	mov	r2, r3
 8012746:	d32e      	bcc.n	80127a6 <quorem+0xfa>
 8012748:	613c      	str	r4, [r7, #16]
 801274a:	4638      	mov	r0, r7
 801274c:	f001 fca4 	bl	8014098 <__mcmp>
 8012750:	2800      	cmp	r0, #0
 8012752:	db24      	blt.n	801279e <quorem+0xf2>
 8012754:	3601      	adds	r6, #1
 8012756:	4628      	mov	r0, r5
 8012758:	f04f 0c00 	mov.w	ip, #0
 801275c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012760:	f8d0 e000 	ldr.w	lr, [r0]
 8012764:	b293      	uxth	r3, r2
 8012766:	ebac 0303 	sub.w	r3, ip, r3
 801276a:	0c12      	lsrs	r2, r2, #16
 801276c:	fa13 f38e 	uxtah	r3, r3, lr
 8012770:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012778:	b29b      	uxth	r3, r3
 801277a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801277e:	45c1      	cmp	r9, r8
 8012780:	f840 3b04 	str.w	r3, [r0], #4
 8012784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012788:	d2e8      	bcs.n	801275c <quorem+0xb0>
 801278a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801278e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012792:	b922      	cbnz	r2, 801279e <quorem+0xf2>
 8012794:	3b04      	subs	r3, #4
 8012796:	429d      	cmp	r5, r3
 8012798:	461a      	mov	r2, r3
 801279a:	d30a      	bcc.n	80127b2 <quorem+0x106>
 801279c:	613c      	str	r4, [r7, #16]
 801279e:	4630      	mov	r0, r6
 80127a0:	b003      	add	sp, #12
 80127a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a6:	6812      	ldr	r2, [r2, #0]
 80127a8:	3b04      	subs	r3, #4
 80127aa:	2a00      	cmp	r2, #0
 80127ac:	d1cc      	bne.n	8012748 <quorem+0x9c>
 80127ae:	3c01      	subs	r4, #1
 80127b0:	e7c7      	b.n	8012742 <quorem+0x96>
 80127b2:	6812      	ldr	r2, [r2, #0]
 80127b4:	3b04      	subs	r3, #4
 80127b6:	2a00      	cmp	r2, #0
 80127b8:	d1f0      	bne.n	801279c <quorem+0xf0>
 80127ba:	3c01      	subs	r4, #1
 80127bc:	e7eb      	b.n	8012796 <quorem+0xea>
 80127be:	2000      	movs	r0, #0
 80127c0:	e7ee      	b.n	80127a0 <quorem+0xf4>
 80127c2:	0000      	movs	r0, r0
 80127c4:	0000      	movs	r0, r0
	...

080127c8 <_dtoa_r>:
 80127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127cc:	ed2d 8b04 	vpush	{d8-d9}
 80127d0:	ec57 6b10 	vmov	r6, r7, d0
 80127d4:	b093      	sub	sp, #76	; 0x4c
 80127d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80127d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80127dc:	9106      	str	r1, [sp, #24]
 80127de:	ee10 aa10 	vmov	sl, s0
 80127e2:	4604      	mov	r4, r0
 80127e4:	9209      	str	r2, [sp, #36]	; 0x24
 80127e6:	930c      	str	r3, [sp, #48]	; 0x30
 80127e8:	46bb      	mov	fp, r7
 80127ea:	b975      	cbnz	r5, 801280a <_dtoa_r+0x42>
 80127ec:	2010      	movs	r0, #16
 80127ee:	f001 f95f 	bl	8013ab0 <malloc>
 80127f2:	4602      	mov	r2, r0
 80127f4:	6260      	str	r0, [r4, #36]	; 0x24
 80127f6:	b920      	cbnz	r0, 8012802 <_dtoa_r+0x3a>
 80127f8:	4ba7      	ldr	r3, [pc, #668]	; (8012a98 <_dtoa_r+0x2d0>)
 80127fa:	21ea      	movs	r1, #234	; 0xea
 80127fc:	48a7      	ldr	r0, [pc, #668]	; (8012a9c <_dtoa_r+0x2d4>)
 80127fe:	f002 fceb 	bl	80151d8 <__assert_func>
 8012802:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012806:	6005      	str	r5, [r0, #0]
 8012808:	60c5      	str	r5, [r0, #12]
 801280a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801280c:	6819      	ldr	r1, [r3, #0]
 801280e:	b151      	cbz	r1, 8012826 <_dtoa_r+0x5e>
 8012810:	685a      	ldr	r2, [r3, #4]
 8012812:	604a      	str	r2, [r1, #4]
 8012814:	2301      	movs	r3, #1
 8012816:	4093      	lsls	r3, r2
 8012818:	608b      	str	r3, [r1, #8]
 801281a:	4620      	mov	r0, r4
 801281c:	f001 f9b0 	bl	8013b80 <_Bfree>
 8012820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012822:	2200      	movs	r2, #0
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	1e3b      	subs	r3, r7, #0
 8012828:	bfaa      	itet	ge
 801282a:	2300      	movge	r3, #0
 801282c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012830:	f8c8 3000 	strge.w	r3, [r8]
 8012834:	4b9a      	ldr	r3, [pc, #616]	; (8012aa0 <_dtoa_r+0x2d8>)
 8012836:	bfbc      	itt	lt
 8012838:	2201      	movlt	r2, #1
 801283a:	f8c8 2000 	strlt.w	r2, [r8]
 801283e:	ea33 030b 	bics.w	r3, r3, fp
 8012842:	d11b      	bne.n	801287c <_dtoa_r+0xb4>
 8012844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012846:	f242 730f 	movw	r3, #9999	; 0x270f
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012850:	4333      	orrs	r3, r6
 8012852:	f000 8592 	beq.w	801337a <_dtoa_r+0xbb2>
 8012856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012858:	b963      	cbnz	r3, 8012874 <_dtoa_r+0xac>
 801285a:	4b92      	ldr	r3, [pc, #584]	; (8012aa4 <_dtoa_r+0x2dc>)
 801285c:	e022      	b.n	80128a4 <_dtoa_r+0xdc>
 801285e:	4b92      	ldr	r3, [pc, #584]	; (8012aa8 <_dtoa_r+0x2e0>)
 8012860:	9301      	str	r3, [sp, #4]
 8012862:	3308      	adds	r3, #8
 8012864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012866:	6013      	str	r3, [r2, #0]
 8012868:	9801      	ldr	r0, [sp, #4]
 801286a:	b013      	add	sp, #76	; 0x4c
 801286c:	ecbd 8b04 	vpop	{d8-d9}
 8012870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012874:	4b8b      	ldr	r3, [pc, #556]	; (8012aa4 <_dtoa_r+0x2dc>)
 8012876:	9301      	str	r3, [sp, #4]
 8012878:	3303      	adds	r3, #3
 801287a:	e7f3      	b.n	8012864 <_dtoa_r+0x9c>
 801287c:	2200      	movs	r2, #0
 801287e:	2300      	movs	r3, #0
 8012880:	4650      	mov	r0, sl
 8012882:	4659      	mov	r1, fp
 8012884:	f7ee f940 	bl	8000b08 <__aeabi_dcmpeq>
 8012888:	ec4b ab19 	vmov	d9, sl, fp
 801288c:	4680      	mov	r8, r0
 801288e:	b158      	cbz	r0, 80128a8 <_dtoa_r+0xe0>
 8012890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012892:	2301      	movs	r3, #1
 8012894:	6013      	str	r3, [r2, #0]
 8012896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012898:	2b00      	cmp	r3, #0
 801289a:	f000 856b 	beq.w	8013374 <_dtoa_r+0xbac>
 801289e:	4883      	ldr	r0, [pc, #524]	; (8012aac <_dtoa_r+0x2e4>)
 80128a0:	6018      	str	r0, [r3, #0]
 80128a2:	1e43      	subs	r3, r0, #1
 80128a4:	9301      	str	r3, [sp, #4]
 80128a6:	e7df      	b.n	8012868 <_dtoa_r+0xa0>
 80128a8:	ec4b ab10 	vmov	d0, sl, fp
 80128ac:	aa10      	add	r2, sp, #64	; 0x40
 80128ae:	a911      	add	r1, sp, #68	; 0x44
 80128b0:	4620      	mov	r0, r4
 80128b2:	f001 fd13 	bl	80142dc <__d2b>
 80128b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80128ba:	ee08 0a10 	vmov	s16, r0
 80128be:	2d00      	cmp	r5, #0
 80128c0:	f000 8084 	beq.w	80129cc <_dtoa_r+0x204>
 80128c4:	ee19 3a90 	vmov	r3, s19
 80128c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80128d0:	4656      	mov	r6, sl
 80128d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80128d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80128da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80128de:	4b74      	ldr	r3, [pc, #464]	; (8012ab0 <_dtoa_r+0x2e8>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	4630      	mov	r0, r6
 80128e4:	4639      	mov	r1, r7
 80128e6:	f7ed fcef 	bl	80002c8 <__aeabi_dsub>
 80128ea:	a365      	add	r3, pc, #404	; (adr r3, 8012a80 <_dtoa_r+0x2b8>)
 80128ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f0:	f7ed fea2 	bl	8000638 <__aeabi_dmul>
 80128f4:	a364      	add	r3, pc, #400	; (adr r3, 8012a88 <_dtoa_r+0x2c0>)
 80128f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fa:	f7ed fce7 	bl	80002cc <__adddf3>
 80128fe:	4606      	mov	r6, r0
 8012900:	4628      	mov	r0, r5
 8012902:	460f      	mov	r7, r1
 8012904:	f7ed fe2e 	bl	8000564 <__aeabi_i2d>
 8012908:	a361      	add	r3, pc, #388	; (adr r3, 8012a90 <_dtoa_r+0x2c8>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f7ed fe93 	bl	8000638 <__aeabi_dmul>
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	f7ed fcd7 	bl	80002cc <__adddf3>
 801291e:	4606      	mov	r6, r0
 8012920:	460f      	mov	r7, r1
 8012922:	f7ee f939 	bl	8000b98 <__aeabi_d2iz>
 8012926:	2200      	movs	r2, #0
 8012928:	9000      	str	r0, [sp, #0]
 801292a:	2300      	movs	r3, #0
 801292c:	4630      	mov	r0, r6
 801292e:	4639      	mov	r1, r7
 8012930:	f7ee f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8012934:	b150      	cbz	r0, 801294c <_dtoa_r+0x184>
 8012936:	9800      	ldr	r0, [sp, #0]
 8012938:	f7ed fe14 	bl	8000564 <__aeabi_i2d>
 801293c:	4632      	mov	r2, r6
 801293e:	463b      	mov	r3, r7
 8012940:	f7ee f8e2 	bl	8000b08 <__aeabi_dcmpeq>
 8012944:	b910      	cbnz	r0, 801294c <_dtoa_r+0x184>
 8012946:	9b00      	ldr	r3, [sp, #0]
 8012948:	3b01      	subs	r3, #1
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	9b00      	ldr	r3, [sp, #0]
 801294e:	2b16      	cmp	r3, #22
 8012950:	d85a      	bhi.n	8012a08 <_dtoa_r+0x240>
 8012952:	9a00      	ldr	r2, [sp, #0]
 8012954:	4b57      	ldr	r3, [pc, #348]	; (8012ab4 <_dtoa_r+0x2ec>)
 8012956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295e:	ec51 0b19 	vmov	r0, r1, d9
 8012962:	f7ee f8db 	bl	8000b1c <__aeabi_dcmplt>
 8012966:	2800      	cmp	r0, #0
 8012968:	d050      	beq.n	8012a0c <_dtoa_r+0x244>
 801296a:	9b00      	ldr	r3, [sp, #0]
 801296c:	3b01      	subs	r3, #1
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	2300      	movs	r3, #0
 8012972:	930b      	str	r3, [sp, #44]	; 0x2c
 8012974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012976:	1b5d      	subs	r5, r3, r5
 8012978:	1e6b      	subs	r3, r5, #1
 801297a:	9305      	str	r3, [sp, #20]
 801297c:	bf45      	ittet	mi
 801297e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012982:	9304      	strmi	r3, [sp, #16]
 8012984:	2300      	movpl	r3, #0
 8012986:	2300      	movmi	r3, #0
 8012988:	bf4c      	ite	mi
 801298a:	9305      	strmi	r3, [sp, #20]
 801298c:	9304      	strpl	r3, [sp, #16]
 801298e:	9b00      	ldr	r3, [sp, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	db3d      	blt.n	8012a10 <_dtoa_r+0x248>
 8012994:	9b05      	ldr	r3, [sp, #20]
 8012996:	9a00      	ldr	r2, [sp, #0]
 8012998:	920a      	str	r2, [sp, #40]	; 0x28
 801299a:	4413      	add	r3, r2
 801299c:	9305      	str	r3, [sp, #20]
 801299e:	2300      	movs	r3, #0
 80129a0:	9307      	str	r3, [sp, #28]
 80129a2:	9b06      	ldr	r3, [sp, #24]
 80129a4:	2b09      	cmp	r3, #9
 80129a6:	f200 8089 	bhi.w	8012abc <_dtoa_r+0x2f4>
 80129aa:	2b05      	cmp	r3, #5
 80129ac:	bfc4      	itt	gt
 80129ae:	3b04      	subgt	r3, #4
 80129b0:	9306      	strgt	r3, [sp, #24]
 80129b2:	9b06      	ldr	r3, [sp, #24]
 80129b4:	f1a3 0302 	sub.w	r3, r3, #2
 80129b8:	bfcc      	ite	gt
 80129ba:	2500      	movgt	r5, #0
 80129bc:	2501      	movle	r5, #1
 80129be:	2b03      	cmp	r3, #3
 80129c0:	f200 8087 	bhi.w	8012ad2 <_dtoa_r+0x30a>
 80129c4:	e8df f003 	tbb	[pc, r3]
 80129c8:	59383a2d 	.word	0x59383a2d
 80129cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80129d0:	441d      	add	r5, r3
 80129d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80129d6:	2b20      	cmp	r3, #32
 80129d8:	bfc1      	itttt	gt
 80129da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80129de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80129e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80129e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80129ea:	bfda      	itte	le
 80129ec:	f1c3 0320 	rsble	r3, r3, #32
 80129f0:	fa06 f003 	lslle.w	r0, r6, r3
 80129f4:	4318      	orrgt	r0, r3
 80129f6:	f7ed fda5 	bl	8000544 <__aeabi_ui2d>
 80129fa:	2301      	movs	r3, #1
 80129fc:	4606      	mov	r6, r0
 80129fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012a02:	3d01      	subs	r5, #1
 8012a04:	930e      	str	r3, [sp, #56]	; 0x38
 8012a06:	e76a      	b.n	80128de <_dtoa_r+0x116>
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e7b2      	b.n	8012972 <_dtoa_r+0x1aa>
 8012a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a0e:	e7b1      	b.n	8012974 <_dtoa_r+0x1ac>
 8012a10:	9b04      	ldr	r3, [sp, #16]
 8012a12:	9a00      	ldr	r2, [sp, #0]
 8012a14:	1a9b      	subs	r3, r3, r2
 8012a16:	9304      	str	r3, [sp, #16]
 8012a18:	4253      	negs	r3, r2
 8012a1a:	9307      	str	r3, [sp, #28]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8012a20:	e7bf      	b.n	80129a2 <_dtoa_r+0x1da>
 8012a22:	2300      	movs	r3, #0
 8012a24:	9308      	str	r3, [sp, #32]
 8012a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	dc55      	bgt.n	8012ad8 <_dtoa_r+0x310>
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a32:	461a      	mov	r2, r3
 8012a34:	9209      	str	r2, [sp, #36]	; 0x24
 8012a36:	e00c      	b.n	8012a52 <_dtoa_r+0x28a>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	e7f3      	b.n	8012a24 <_dtoa_r+0x25c>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a40:	9308      	str	r3, [sp, #32]
 8012a42:	9b00      	ldr	r3, [sp, #0]
 8012a44:	4413      	add	r3, r2
 8012a46:	9302      	str	r3, [sp, #8]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	9303      	str	r3, [sp, #12]
 8012a4e:	bfb8      	it	lt
 8012a50:	2301      	movlt	r3, #1
 8012a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012a54:	2200      	movs	r2, #0
 8012a56:	6042      	str	r2, [r0, #4]
 8012a58:	2204      	movs	r2, #4
 8012a5a:	f102 0614 	add.w	r6, r2, #20
 8012a5e:	429e      	cmp	r6, r3
 8012a60:	6841      	ldr	r1, [r0, #4]
 8012a62:	d93d      	bls.n	8012ae0 <_dtoa_r+0x318>
 8012a64:	4620      	mov	r0, r4
 8012a66:	f001 f84b 	bl	8013b00 <_Balloc>
 8012a6a:	9001      	str	r0, [sp, #4]
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	d13b      	bne.n	8012ae8 <_dtoa_r+0x320>
 8012a70:	4b11      	ldr	r3, [pc, #68]	; (8012ab8 <_dtoa_r+0x2f0>)
 8012a72:	4602      	mov	r2, r0
 8012a74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012a78:	e6c0      	b.n	80127fc <_dtoa_r+0x34>
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e7df      	b.n	8012a3e <_dtoa_r+0x276>
 8012a7e:	bf00      	nop
 8012a80:	636f4361 	.word	0x636f4361
 8012a84:	3fd287a7 	.word	0x3fd287a7
 8012a88:	8b60c8b3 	.word	0x8b60c8b3
 8012a8c:	3fc68a28 	.word	0x3fc68a28
 8012a90:	509f79fb 	.word	0x509f79fb
 8012a94:	3fd34413 	.word	0x3fd34413
 8012a98:	0801836e 	.word	0x0801836e
 8012a9c:	08018385 	.word	0x08018385
 8012aa0:	7ff00000 	.word	0x7ff00000
 8012aa4:	0801836a 	.word	0x0801836a
 8012aa8:	08018361 	.word	0x08018361
 8012aac:	080185da 	.word	0x080185da
 8012ab0:	3ff80000 	.word	0x3ff80000
 8012ab4:	080184f0 	.word	0x080184f0
 8012ab8:	080183e0 	.word	0x080183e0
 8012abc:	2501      	movs	r5, #1
 8012abe:	2300      	movs	r3, #0
 8012ac0:	9306      	str	r3, [sp, #24]
 8012ac2:	9508      	str	r5, [sp, #32]
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012acc:	2200      	movs	r2, #0
 8012ace:	2312      	movs	r3, #18
 8012ad0:	e7b0      	b.n	8012a34 <_dtoa_r+0x26c>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	9308      	str	r3, [sp, #32]
 8012ad6:	e7f5      	b.n	8012ac4 <_dtoa_r+0x2fc>
 8012ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ada:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012ade:	e7b8      	b.n	8012a52 <_dtoa_r+0x28a>
 8012ae0:	3101      	adds	r1, #1
 8012ae2:	6041      	str	r1, [r0, #4]
 8012ae4:	0052      	lsls	r2, r2, #1
 8012ae6:	e7b8      	b.n	8012a5a <_dtoa_r+0x292>
 8012ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012aea:	9a01      	ldr	r2, [sp, #4]
 8012aec:	601a      	str	r2, [r3, #0]
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	2b0e      	cmp	r3, #14
 8012af2:	f200 809d 	bhi.w	8012c30 <_dtoa_r+0x468>
 8012af6:	2d00      	cmp	r5, #0
 8012af8:	f000 809a 	beq.w	8012c30 <_dtoa_r+0x468>
 8012afc:	9b00      	ldr	r3, [sp, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dd32      	ble.n	8012b68 <_dtoa_r+0x3a0>
 8012b02:	4ab7      	ldr	r2, [pc, #732]	; (8012de0 <_dtoa_r+0x618>)
 8012b04:	f003 030f 	and.w	r3, r3, #15
 8012b08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b10:	9b00      	ldr	r3, [sp, #0]
 8012b12:	05d8      	lsls	r0, r3, #23
 8012b14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012b18:	d516      	bpl.n	8012b48 <_dtoa_r+0x380>
 8012b1a:	4bb2      	ldr	r3, [pc, #712]	; (8012de4 <_dtoa_r+0x61c>)
 8012b1c:	ec51 0b19 	vmov	r0, r1, d9
 8012b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b24:	f7ed feb2 	bl	800088c <__aeabi_ddiv>
 8012b28:	f007 070f 	and.w	r7, r7, #15
 8012b2c:	4682      	mov	sl, r0
 8012b2e:	468b      	mov	fp, r1
 8012b30:	2503      	movs	r5, #3
 8012b32:	4eac      	ldr	r6, [pc, #688]	; (8012de4 <_dtoa_r+0x61c>)
 8012b34:	b957      	cbnz	r7, 8012b4c <_dtoa_r+0x384>
 8012b36:	4642      	mov	r2, r8
 8012b38:	464b      	mov	r3, r9
 8012b3a:	4650      	mov	r0, sl
 8012b3c:	4659      	mov	r1, fp
 8012b3e:	f7ed fea5 	bl	800088c <__aeabi_ddiv>
 8012b42:	4682      	mov	sl, r0
 8012b44:	468b      	mov	fp, r1
 8012b46:	e028      	b.n	8012b9a <_dtoa_r+0x3d2>
 8012b48:	2502      	movs	r5, #2
 8012b4a:	e7f2      	b.n	8012b32 <_dtoa_r+0x36a>
 8012b4c:	07f9      	lsls	r1, r7, #31
 8012b4e:	d508      	bpl.n	8012b62 <_dtoa_r+0x39a>
 8012b50:	4640      	mov	r0, r8
 8012b52:	4649      	mov	r1, r9
 8012b54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b58:	f7ed fd6e 	bl	8000638 <__aeabi_dmul>
 8012b5c:	3501      	adds	r5, #1
 8012b5e:	4680      	mov	r8, r0
 8012b60:	4689      	mov	r9, r1
 8012b62:	107f      	asrs	r7, r7, #1
 8012b64:	3608      	adds	r6, #8
 8012b66:	e7e5      	b.n	8012b34 <_dtoa_r+0x36c>
 8012b68:	f000 809b 	beq.w	8012ca2 <_dtoa_r+0x4da>
 8012b6c:	9b00      	ldr	r3, [sp, #0]
 8012b6e:	4f9d      	ldr	r7, [pc, #628]	; (8012de4 <_dtoa_r+0x61c>)
 8012b70:	425e      	negs	r6, r3
 8012b72:	4b9b      	ldr	r3, [pc, #620]	; (8012de0 <_dtoa_r+0x618>)
 8012b74:	f006 020f 	and.w	r2, r6, #15
 8012b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b80:	ec51 0b19 	vmov	r0, r1, d9
 8012b84:	f7ed fd58 	bl	8000638 <__aeabi_dmul>
 8012b88:	1136      	asrs	r6, r6, #4
 8012b8a:	4682      	mov	sl, r0
 8012b8c:	468b      	mov	fp, r1
 8012b8e:	2300      	movs	r3, #0
 8012b90:	2502      	movs	r5, #2
 8012b92:	2e00      	cmp	r6, #0
 8012b94:	d17a      	bne.n	8012c8c <_dtoa_r+0x4c4>
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1d3      	bne.n	8012b42 <_dtoa_r+0x37a>
 8012b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f000 8082 	beq.w	8012ca6 <_dtoa_r+0x4de>
 8012ba2:	4b91      	ldr	r3, [pc, #580]	; (8012de8 <_dtoa_r+0x620>)
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	4650      	mov	r0, sl
 8012ba8:	4659      	mov	r1, fp
 8012baa:	f7ed ffb7 	bl	8000b1c <__aeabi_dcmplt>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d079      	beq.n	8012ca6 <_dtoa_r+0x4de>
 8012bb2:	9b03      	ldr	r3, [sp, #12]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d076      	beq.n	8012ca6 <_dtoa_r+0x4de>
 8012bb8:	9b02      	ldr	r3, [sp, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	dd36      	ble.n	8012c2c <_dtoa_r+0x464>
 8012bbe:	9b00      	ldr	r3, [sp, #0]
 8012bc0:	4650      	mov	r0, sl
 8012bc2:	4659      	mov	r1, fp
 8012bc4:	1e5f      	subs	r7, r3, #1
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	4b88      	ldr	r3, [pc, #544]	; (8012dec <_dtoa_r+0x624>)
 8012bca:	f7ed fd35 	bl	8000638 <__aeabi_dmul>
 8012bce:	9e02      	ldr	r6, [sp, #8]
 8012bd0:	4682      	mov	sl, r0
 8012bd2:	468b      	mov	fp, r1
 8012bd4:	3501      	adds	r5, #1
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f7ed fcc4 	bl	8000564 <__aeabi_i2d>
 8012bdc:	4652      	mov	r2, sl
 8012bde:	465b      	mov	r3, fp
 8012be0:	f7ed fd2a 	bl	8000638 <__aeabi_dmul>
 8012be4:	4b82      	ldr	r3, [pc, #520]	; (8012df0 <_dtoa_r+0x628>)
 8012be6:	2200      	movs	r2, #0
 8012be8:	f7ed fb70 	bl	80002cc <__adddf3>
 8012bec:	46d0      	mov	r8, sl
 8012bee:	46d9      	mov	r9, fp
 8012bf0:	4682      	mov	sl, r0
 8012bf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012bf6:	2e00      	cmp	r6, #0
 8012bf8:	d158      	bne.n	8012cac <_dtoa_r+0x4e4>
 8012bfa:	4b7e      	ldr	r3, [pc, #504]	; (8012df4 <_dtoa_r+0x62c>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	4640      	mov	r0, r8
 8012c00:	4649      	mov	r1, r9
 8012c02:	f7ed fb61 	bl	80002c8 <__aeabi_dsub>
 8012c06:	4652      	mov	r2, sl
 8012c08:	465b      	mov	r3, fp
 8012c0a:	4680      	mov	r8, r0
 8012c0c:	4689      	mov	r9, r1
 8012c0e:	f7ed ffa3 	bl	8000b58 <__aeabi_dcmpgt>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	f040 8295 	bne.w	8013142 <_dtoa_r+0x97a>
 8012c18:	4652      	mov	r2, sl
 8012c1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012c1e:	4640      	mov	r0, r8
 8012c20:	4649      	mov	r1, r9
 8012c22:	f7ed ff7b 	bl	8000b1c <__aeabi_dcmplt>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	f040 8289 	bne.w	801313e <_dtoa_r+0x976>
 8012c2c:	ec5b ab19 	vmov	sl, fp, d9
 8012c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f2c0 8148 	blt.w	8012ec8 <_dtoa_r+0x700>
 8012c38:	9a00      	ldr	r2, [sp, #0]
 8012c3a:	2a0e      	cmp	r2, #14
 8012c3c:	f300 8144 	bgt.w	8012ec8 <_dtoa_r+0x700>
 8012c40:	4b67      	ldr	r3, [pc, #412]	; (8012de0 <_dtoa_r+0x618>)
 8012c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f280 80d5 	bge.w	8012dfc <_dtoa_r+0x634>
 8012c52:	9b03      	ldr	r3, [sp, #12]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	f300 80d1 	bgt.w	8012dfc <_dtoa_r+0x634>
 8012c5a:	f040 826f 	bne.w	801313c <_dtoa_r+0x974>
 8012c5e:	4b65      	ldr	r3, [pc, #404]	; (8012df4 <_dtoa_r+0x62c>)
 8012c60:	2200      	movs	r2, #0
 8012c62:	4640      	mov	r0, r8
 8012c64:	4649      	mov	r1, r9
 8012c66:	f7ed fce7 	bl	8000638 <__aeabi_dmul>
 8012c6a:	4652      	mov	r2, sl
 8012c6c:	465b      	mov	r3, fp
 8012c6e:	f7ed ff69 	bl	8000b44 <__aeabi_dcmpge>
 8012c72:	9e03      	ldr	r6, [sp, #12]
 8012c74:	4637      	mov	r7, r6
 8012c76:	2800      	cmp	r0, #0
 8012c78:	f040 8245 	bne.w	8013106 <_dtoa_r+0x93e>
 8012c7c:	9d01      	ldr	r5, [sp, #4]
 8012c7e:	2331      	movs	r3, #49	; 0x31
 8012c80:	f805 3b01 	strb.w	r3, [r5], #1
 8012c84:	9b00      	ldr	r3, [sp, #0]
 8012c86:	3301      	adds	r3, #1
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	e240      	b.n	801310e <_dtoa_r+0x946>
 8012c8c:	07f2      	lsls	r2, r6, #31
 8012c8e:	d505      	bpl.n	8012c9c <_dtoa_r+0x4d4>
 8012c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c94:	f7ed fcd0 	bl	8000638 <__aeabi_dmul>
 8012c98:	3501      	adds	r5, #1
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	1076      	asrs	r6, r6, #1
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	e777      	b.n	8012b92 <_dtoa_r+0x3ca>
 8012ca2:	2502      	movs	r5, #2
 8012ca4:	e779      	b.n	8012b9a <_dtoa_r+0x3d2>
 8012ca6:	9f00      	ldr	r7, [sp, #0]
 8012ca8:	9e03      	ldr	r6, [sp, #12]
 8012caa:	e794      	b.n	8012bd6 <_dtoa_r+0x40e>
 8012cac:	9901      	ldr	r1, [sp, #4]
 8012cae:	4b4c      	ldr	r3, [pc, #304]	; (8012de0 <_dtoa_r+0x618>)
 8012cb0:	4431      	add	r1, r6
 8012cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8012cb4:	9908      	ldr	r1, [sp, #32]
 8012cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012cbe:	2900      	cmp	r1, #0
 8012cc0:	d043      	beq.n	8012d4a <_dtoa_r+0x582>
 8012cc2:	494d      	ldr	r1, [pc, #308]	; (8012df8 <_dtoa_r+0x630>)
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	f7ed fde1 	bl	800088c <__aeabi_ddiv>
 8012cca:	4652      	mov	r2, sl
 8012ccc:	465b      	mov	r3, fp
 8012cce:	f7ed fafb 	bl	80002c8 <__aeabi_dsub>
 8012cd2:	9d01      	ldr	r5, [sp, #4]
 8012cd4:	4682      	mov	sl, r0
 8012cd6:	468b      	mov	fp, r1
 8012cd8:	4649      	mov	r1, r9
 8012cda:	4640      	mov	r0, r8
 8012cdc:	f7ed ff5c 	bl	8000b98 <__aeabi_d2iz>
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	f7ed fc3f 	bl	8000564 <__aeabi_i2d>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	4640      	mov	r0, r8
 8012cec:	4649      	mov	r1, r9
 8012cee:	f7ed faeb 	bl	80002c8 <__aeabi_dsub>
 8012cf2:	3630      	adds	r6, #48	; 0x30
 8012cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8012cf8:	4652      	mov	r2, sl
 8012cfa:	465b      	mov	r3, fp
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	4689      	mov	r9, r1
 8012d00:	f7ed ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d163      	bne.n	8012dd0 <_dtoa_r+0x608>
 8012d08:	4642      	mov	r2, r8
 8012d0a:	464b      	mov	r3, r9
 8012d0c:	4936      	ldr	r1, [pc, #216]	; (8012de8 <_dtoa_r+0x620>)
 8012d0e:	2000      	movs	r0, #0
 8012d10:	f7ed fada 	bl	80002c8 <__aeabi_dsub>
 8012d14:	4652      	mov	r2, sl
 8012d16:	465b      	mov	r3, fp
 8012d18:	f7ed ff00 	bl	8000b1c <__aeabi_dcmplt>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	f040 80b5 	bne.w	8012e8c <_dtoa_r+0x6c4>
 8012d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d24:	429d      	cmp	r5, r3
 8012d26:	d081      	beq.n	8012c2c <_dtoa_r+0x464>
 8012d28:	4b30      	ldr	r3, [pc, #192]	; (8012dec <_dtoa_r+0x624>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	4650      	mov	r0, sl
 8012d2e:	4659      	mov	r1, fp
 8012d30:	f7ed fc82 	bl	8000638 <__aeabi_dmul>
 8012d34:	4b2d      	ldr	r3, [pc, #180]	; (8012dec <_dtoa_r+0x624>)
 8012d36:	4682      	mov	sl, r0
 8012d38:	468b      	mov	fp, r1
 8012d3a:	4640      	mov	r0, r8
 8012d3c:	4649      	mov	r1, r9
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f7ed fc7a 	bl	8000638 <__aeabi_dmul>
 8012d44:	4680      	mov	r8, r0
 8012d46:	4689      	mov	r9, r1
 8012d48:	e7c6      	b.n	8012cd8 <_dtoa_r+0x510>
 8012d4a:	4650      	mov	r0, sl
 8012d4c:	4659      	mov	r1, fp
 8012d4e:	f7ed fc73 	bl	8000638 <__aeabi_dmul>
 8012d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d54:	9d01      	ldr	r5, [sp, #4]
 8012d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d58:	4682      	mov	sl, r0
 8012d5a:	468b      	mov	fp, r1
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	4640      	mov	r0, r8
 8012d60:	f7ed ff1a 	bl	8000b98 <__aeabi_d2iz>
 8012d64:	4606      	mov	r6, r0
 8012d66:	f7ed fbfd 	bl	8000564 <__aeabi_i2d>
 8012d6a:	3630      	adds	r6, #48	; 0x30
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	460b      	mov	r3, r1
 8012d70:	4640      	mov	r0, r8
 8012d72:	4649      	mov	r1, r9
 8012d74:	f7ed faa8 	bl	80002c8 <__aeabi_dsub>
 8012d78:	f805 6b01 	strb.w	r6, [r5], #1
 8012d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d7e:	429d      	cmp	r5, r3
 8012d80:	4680      	mov	r8, r0
 8012d82:	4689      	mov	r9, r1
 8012d84:	f04f 0200 	mov.w	r2, #0
 8012d88:	d124      	bne.n	8012dd4 <_dtoa_r+0x60c>
 8012d8a:	4b1b      	ldr	r3, [pc, #108]	; (8012df8 <_dtoa_r+0x630>)
 8012d8c:	4650      	mov	r0, sl
 8012d8e:	4659      	mov	r1, fp
 8012d90:	f7ed fa9c 	bl	80002cc <__adddf3>
 8012d94:	4602      	mov	r2, r0
 8012d96:	460b      	mov	r3, r1
 8012d98:	4640      	mov	r0, r8
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	f7ed fedc 	bl	8000b58 <__aeabi_dcmpgt>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d173      	bne.n	8012e8c <_dtoa_r+0x6c4>
 8012da4:	4652      	mov	r2, sl
 8012da6:	465b      	mov	r3, fp
 8012da8:	4913      	ldr	r1, [pc, #76]	; (8012df8 <_dtoa_r+0x630>)
 8012daa:	2000      	movs	r0, #0
 8012dac:	f7ed fa8c 	bl	80002c8 <__aeabi_dsub>
 8012db0:	4602      	mov	r2, r0
 8012db2:	460b      	mov	r3, r1
 8012db4:	4640      	mov	r0, r8
 8012db6:	4649      	mov	r1, r9
 8012db8:	f7ed feb0 	bl	8000b1c <__aeabi_dcmplt>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	f43f af35 	beq.w	8012c2c <_dtoa_r+0x464>
 8012dc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012dc4:	1e6b      	subs	r3, r5, #1
 8012dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012dcc:	2b30      	cmp	r3, #48	; 0x30
 8012dce:	d0f8      	beq.n	8012dc2 <_dtoa_r+0x5fa>
 8012dd0:	9700      	str	r7, [sp, #0]
 8012dd2:	e049      	b.n	8012e68 <_dtoa_r+0x6a0>
 8012dd4:	4b05      	ldr	r3, [pc, #20]	; (8012dec <_dtoa_r+0x624>)
 8012dd6:	f7ed fc2f 	bl	8000638 <__aeabi_dmul>
 8012dda:	4680      	mov	r8, r0
 8012ddc:	4689      	mov	r9, r1
 8012dde:	e7bd      	b.n	8012d5c <_dtoa_r+0x594>
 8012de0:	080184f0 	.word	0x080184f0
 8012de4:	080184c8 	.word	0x080184c8
 8012de8:	3ff00000 	.word	0x3ff00000
 8012dec:	40240000 	.word	0x40240000
 8012df0:	401c0000 	.word	0x401c0000
 8012df4:	40140000 	.word	0x40140000
 8012df8:	3fe00000 	.word	0x3fe00000
 8012dfc:	9d01      	ldr	r5, [sp, #4]
 8012dfe:	4656      	mov	r6, sl
 8012e00:	465f      	mov	r7, fp
 8012e02:	4642      	mov	r2, r8
 8012e04:	464b      	mov	r3, r9
 8012e06:	4630      	mov	r0, r6
 8012e08:	4639      	mov	r1, r7
 8012e0a:	f7ed fd3f 	bl	800088c <__aeabi_ddiv>
 8012e0e:	f7ed fec3 	bl	8000b98 <__aeabi_d2iz>
 8012e12:	4682      	mov	sl, r0
 8012e14:	f7ed fba6 	bl	8000564 <__aeabi_i2d>
 8012e18:	4642      	mov	r2, r8
 8012e1a:	464b      	mov	r3, r9
 8012e1c:	f7ed fc0c 	bl	8000638 <__aeabi_dmul>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	4630      	mov	r0, r6
 8012e26:	4639      	mov	r1, r7
 8012e28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012e2c:	f7ed fa4c 	bl	80002c8 <__aeabi_dsub>
 8012e30:	f805 6b01 	strb.w	r6, [r5], #1
 8012e34:	9e01      	ldr	r6, [sp, #4]
 8012e36:	9f03      	ldr	r7, [sp, #12]
 8012e38:	1bae      	subs	r6, r5, r6
 8012e3a:	42b7      	cmp	r7, r6
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	d135      	bne.n	8012eae <_dtoa_r+0x6e6>
 8012e42:	f7ed fa43 	bl	80002cc <__adddf3>
 8012e46:	4642      	mov	r2, r8
 8012e48:	464b      	mov	r3, r9
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	f7ed fe83 	bl	8000b58 <__aeabi_dcmpgt>
 8012e52:	b9d0      	cbnz	r0, 8012e8a <_dtoa_r+0x6c2>
 8012e54:	4642      	mov	r2, r8
 8012e56:	464b      	mov	r3, r9
 8012e58:	4630      	mov	r0, r6
 8012e5a:	4639      	mov	r1, r7
 8012e5c:	f7ed fe54 	bl	8000b08 <__aeabi_dcmpeq>
 8012e60:	b110      	cbz	r0, 8012e68 <_dtoa_r+0x6a0>
 8012e62:	f01a 0f01 	tst.w	sl, #1
 8012e66:	d110      	bne.n	8012e8a <_dtoa_r+0x6c2>
 8012e68:	4620      	mov	r0, r4
 8012e6a:	ee18 1a10 	vmov	r1, s16
 8012e6e:	f000 fe87 	bl	8013b80 <_Bfree>
 8012e72:	2300      	movs	r3, #0
 8012e74:	9800      	ldr	r0, [sp, #0]
 8012e76:	702b      	strb	r3, [r5, #0]
 8012e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	6018      	str	r0, [r3, #0]
 8012e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f43f acf1 	beq.w	8012868 <_dtoa_r+0xa0>
 8012e86:	601d      	str	r5, [r3, #0]
 8012e88:	e4ee      	b.n	8012868 <_dtoa_r+0xa0>
 8012e8a:	9f00      	ldr	r7, [sp, #0]
 8012e8c:	462b      	mov	r3, r5
 8012e8e:	461d      	mov	r5, r3
 8012e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e94:	2a39      	cmp	r2, #57	; 0x39
 8012e96:	d106      	bne.n	8012ea6 <_dtoa_r+0x6de>
 8012e98:	9a01      	ldr	r2, [sp, #4]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d1f7      	bne.n	8012e8e <_dtoa_r+0x6c6>
 8012e9e:	9901      	ldr	r1, [sp, #4]
 8012ea0:	2230      	movs	r2, #48	; 0x30
 8012ea2:	3701      	adds	r7, #1
 8012ea4:	700a      	strb	r2, [r1, #0]
 8012ea6:	781a      	ldrb	r2, [r3, #0]
 8012ea8:	3201      	adds	r2, #1
 8012eaa:	701a      	strb	r2, [r3, #0]
 8012eac:	e790      	b.n	8012dd0 <_dtoa_r+0x608>
 8012eae:	4ba6      	ldr	r3, [pc, #664]	; (8013148 <_dtoa_r+0x980>)
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	f7ed fbc1 	bl	8000638 <__aeabi_dmul>
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	2300      	movs	r3, #0
 8012eba:	4606      	mov	r6, r0
 8012ebc:	460f      	mov	r7, r1
 8012ebe:	f7ed fe23 	bl	8000b08 <__aeabi_dcmpeq>
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d09d      	beq.n	8012e02 <_dtoa_r+0x63a>
 8012ec6:	e7cf      	b.n	8012e68 <_dtoa_r+0x6a0>
 8012ec8:	9a08      	ldr	r2, [sp, #32]
 8012eca:	2a00      	cmp	r2, #0
 8012ecc:	f000 80d7 	beq.w	801307e <_dtoa_r+0x8b6>
 8012ed0:	9a06      	ldr	r2, [sp, #24]
 8012ed2:	2a01      	cmp	r2, #1
 8012ed4:	f300 80ba 	bgt.w	801304c <_dtoa_r+0x884>
 8012ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012eda:	2a00      	cmp	r2, #0
 8012edc:	f000 80b2 	beq.w	8013044 <_dtoa_r+0x87c>
 8012ee0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ee4:	9e07      	ldr	r6, [sp, #28]
 8012ee6:	9d04      	ldr	r5, [sp, #16]
 8012ee8:	9a04      	ldr	r2, [sp, #16]
 8012eea:	441a      	add	r2, r3
 8012eec:	9204      	str	r2, [sp, #16]
 8012eee:	9a05      	ldr	r2, [sp, #20]
 8012ef0:	2101      	movs	r1, #1
 8012ef2:	441a      	add	r2, r3
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	9205      	str	r2, [sp, #20]
 8012ef8:	f000 ff44 	bl	8013d84 <__i2b>
 8012efc:	4607      	mov	r7, r0
 8012efe:	2d00      	cmp	r5, #0
 8012f00:	dd0c      	ble.n	8012f1c <_dtoa_r+0x754>
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	dd09      	ble.n	8012f1c <_dtoa_r+0x754>
 8012f08:	42ab      	cmp	r3, r5
 8012f0a:	9a04      	ldr	r2, [sp, #16]
 8012f0c:	bfa8      	it	ge
 8012f0e:	462b      	movge	r3, r5
 8012f10:	1ad2      	subs	r2, r2, r3
 8012f12:	9204      	str	r2, [sp, #16]
 8012f14:	9a05      	ldr	r2, [sp, #20]
 8012f16:	1aed      	subs	r5, r5, r3
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	9305      	str	r3, [sp, #20]
 8012f1c:	9b07      	ldr	r3, [sp, #28]
 8012f1e:	b31b      	cbz	r3, 8012f68 <_dtoa_r+0x7a0>
 8012f20:	9b08      	ldr	r3, [sp, #32]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f000 80af 	beq.w	8013086 <_dtoa_r+0x8be>
 8012f28:	2e00      	cmp	r6, #0
 8012f2a:	dd13      	ble.n	8012f54 <_dtoa_r+0x78c>
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	4632      	mov	r2, r6
 8012f30:	4620      	mov	r0, r4
 8012f32:	f000 ffe7 	bl	8013f04 <__pow5mult>
 8012f36:	ee18 2a10 	vmov	r2, s16
 8012f3a:	4601      	mov	r1, r0
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 ff36 	bl	8013db0 <__multiply>
 8012f44:	ee18 1a10 	vmov	r1, s16
 8012f48:	4680      	mov	r8, r0
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f000 fe18 	bl	8013b80 <_Bfree>
 8012f50:	ee08 8a10 	vmov	s16, r8
 8012f54:	9b07      	ldr	r3, [sp, #28]
 8012f56:	1b9a      	subs	r2, r3, r6
 8012f58:	d006      	beq.n	8012f68 <_dtoa_r+0x7a0>
 8012f5a:	ee18 1a10 	vmov	r1, s16
 8012f5e:	4620      	mov	r0, r4
 8012f60:	f000 ffd0 	bl	8013f04 <__pow5mult>
 8012f64:	ee08 0a10 	vmov	s16, r0
 8012f68:	2101      	movs	r1, #1
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 ff0a 	bl	8013d84 <__i2b>
 8012f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	4606      	mov	r6, r0
 8012f76:	f340 8088 	ble.w	801308a <_dtoa_r+0x8c2>
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	4601      	mov	r1, r0
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f000 ffc0 	bl	8013f04 <__pow5mult>
 8012f84:	9b06      	ldr	r3, [sp, #24]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	4606      	mov	r6, r0
 8012f8a:	f340 8081 	ble.w	8013090 <_dtoa_r+0x8c8>
 8012f8e:	f04f 0800 	mov.w	r8, #0
 8012f92:	6933      	ldr	r3, [r6, #16]
 8012f94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f98:	6918      	ldr	r0, [r3, #16]
 8012f9a:	f000 fea3 	bl	8013ce4 <__hi0bits>
 8012f9e:	f1c0 0020 	rsb	r0, r0, #32
 8012fa2:	9b05      	ldr	r3, [sp, #20]
 8012fa4:	4418      	add	r0, r3
 8012fa6:	f010 001f 	ands.w	r0, r0, #31
 8012faa:	f000 8092 	beq.w	80130d2 <_dtoa_r+0x90a>
 8012fae:	f1c0 0320 	rsb	r3, r0, #32
 8012fb2:	2b04      	cmp	r3, #4
 8012fb4:	f340 808a 	ble.w	80130cc <_dtoa_r+0x904>
 8012fb8:	f1c0 001c 	rsb	r0, r0, #28
 8012fbc:	9b04      	ldr	r3, [sp, #16]
 8012fbe:	4403      	add	r3, r0
 8012fc0:	9304      	str	r3, [sp, #16]
 8012fc2:	9b05      	ldr	r3, [sp, #20]
 8012fc4:	4403      	add	r3, r0
 8012fc6:	4405      	add	r5, r0
 8012fc8:	9305      	str	r3, [sp, #20]
 8012fca:	9b04      	ldr	r3, [sp, #16]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dd07      	ble.n	8012fe0 <_dtoa_r+0x818>
 8012fd0:	ee18 1a10 	vmov	r1, s16
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f000 ffee 	bl	8013fb8 <__lshift>
 8012fdc:	ee08 0a10 	vmov	s16, r0
 8012fe0:	9b05      	ldr	r3, [sp, #20]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	dd05      	ble.n	8012ff2 <_dtoa_r+0x82a>
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	461a      	mov	r2, r3
 8012fea:	4620      	mov	r0, r4
 8012fec:	f000 ffe4 	bl	8013fb8 <__lshift>
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d06e      	beq.n	80130d6 <_dtoa_r+0x90e>
 8012ff8:	ee18 0a10 	vmov	r0, s16
 8012ffc:	4631      	mov	r1, r6
 8012ffe:	f001 f84b 	bl	8014098 <__mcmp>
 8013002:	2800      	cmp	r0, #0
 8013004:	da67      	bge.n	80130d6 <_dtoa_r+0x90e>
 8013006:	9b00      	ldr	r3, [sp, #0]
 8013008:	3b01      	subs	r3, #1
 801300a:	ee18 1a10 	vmov	r1, s16
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	220a      	movs	r2, #10
 8013012:	2300      	movs	r3, #0
 8013014:	4620      	mov	r0, r4
 8013016:	f000 fdd5 	bl	8013bc4 <__multadd>
 801301a:	9b08      	ldr	r3, [sp, #32]
 801301c:	ee08 0a10 	vmov	s16, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	f000 81b1 	beq.w	8013388 <_dtoa_r+0xbc0>
 8013026:	2300      	movs	r3, #0
 8013028:	4639      	mov	r1, r7
 801302a:	220a      	movs	r2, #10
 801302c:	4620      	mov	r0, r4
 801302e:	f000 fdc9 	bl	8013bc4 <__multadd>
 8013032:	9b02      	ldr	r3, [sp, #8]
 8013034:	2b00      	cmp	r3, #0
 8013036:	4607      	mov	r7, r0
 8013038:	f300 808e 	bgt.w	8013158 <_dtoa_r+0x990>
 801303c:	9b06      	ldr	r3, [sp, #24]
 801303e:	2b02      	cmp	r3, #2
 8013040:	dc51      	bgt.n	80130e6 <_dtoa_r+0x91e>
 8013042:	e089      	b.n	8013158 <_dtoa_r+0x990>
 8013044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801304a:	e74b      	b.n	8012ee4 <_dtoa_r+0x71c>
 801304c:	9b03      	ldr	r3, [sp, #12]
 801304e:	1e5e      	subs	r6, r3, #1
 8013050:	9b07      	ldr	r3, [sp, #28]
 8013052:	42b3      	cmp	r3, r6
 8013054:	bfbf      	itttt	lt
 8013056:	9b07      	ldrlt	r3, [sp, #28]
 8013058:	9607      	strlt	r6, [sp, #28]
 801305a:	1af2      	sublt	r2, r6, r3
 801305c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801305e:	bfb6      	itet	lt
 8013060:	189b      	addlt	r3, r3, r2
 8013062:	1b9e      	subge	r6, r3, r6
 8013064:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013066:	9b03      	ldr	r3, [sp, #12]
 8013068:	bfb8      	it	lt
 801306a:	2600      	movlt	r6, #0
 801306c:	2b00      	cmp	r3, #0
 801306e:	bfb7      	itett	lt
 8013070:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013074:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013078:	1a9d      	sublt	r5, r3, r2
 801307a:	2300      	movlt	r3, #0
 801307c:	e734      	b.n	8012ee8 <_dtoa_r+0x720>
 801307e:	9e07      	ldr	r6, [sp, #28]
 8013080:	9d04      	ldr	r5, [sp, #16]
 8013082:	9f08      	ldr	r7, [sp, #32]
 8013084:	e73b      	b.n	8012efe <_dtoa_r+0x736>
 8013086:	9a07      	ldr	r2, [sp, #28]
 8013088:	e767      	b.n	8012f5a <_dtoa_r+0x792>
 801308a:	9b06      	ldr	r3, [sp, #24]
 801308c:	2b01      	cmp	r3, #1
 801308e:	dc18      	bgt.n	80130c2 <_dtoa_r+0x8fa>
 8013090:	f1ba 0f00 	cmp.w	sl, #0
 8013094:	d115      	bne.n	80130c2 <_dtoa_r+0x8fa>
 8013096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801309a:	b993      	cbnz	r3, 80130c2 <_dtoa_r+0x8fa>
 801309c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80130a0:	0d1b      	lsrs	r3, r3, #20
 80130a2:	051b      	lsls	r3, r3, #20
 80130a4:	b183      	cbz	r3, 80130c8 <_dtoa_r+0x900>
 80130a6:	9b04      	ldr	r3, [sp, #16]
 80130a8:	3301      	adds	r3, #1
 80130aa:	9304      	str	r3, [sp, #16]
 80130ac:	9b05      	ldr	r3, [sp, #20]
 80130ae:	3301      	adds	r3, #1
 80130b0:	9305      	str	r3, [sp, #20]
 80130b2:	f04f 0801 	mov.w	r8, #1
 80130b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f47f af6a 	bne.w	8012f92 <_dtoa_r+0x7ca>
 80130be:	2001      	movs	r0, #1
 80130c0:	e76f      	b.n	8012fa2 <_dtoa_r+0x7da>
 80130c2:	f04f 0800 	mov.w	r8, #0
 80130c6:	e7f6      	b.n	80130b6 <_dtoa_r+0x8ee>
 80130c8:	4698      	mov	r8, r3
 80130ca:	e7f4      	b.n	80130b6 <_dtoa_r+0x8ee>
 80130cc:	f43f af7d 	beq.w	8012fca <_dtoa_r+0x802>
 80130d0:	4618      	mov	r0, r3
 80130d2:	301c      	adds	r0, #28
 80130d4:	e772      	b.n	8012fbc <_dtoa_r+0x7f4>
 80130d6:	9b03      	ldr	r3, [sp, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	dc37      	bgt.n	801314c <_dtoa_r+0x984>
 80130dc:	9b06      	ldr	r3, [sp, #24]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	dd34      	ble.n	801314c <_dtoa_r+0x984>
 80130e2:	9b03      	ldr	r3, [sp, #12]
 80130e4:	9302      	str	r3, [sp, #8]
 80130e6:	9b02      	ldr	r3, [sp, #8]
 80130e8:	b96b      	cbnz	r3, 8013106 <_dtoa_r+0x93e>
 80130ea:	4631      	mov	r1, r6
 80130ec:	2205      	movs	r2, #5
 80130ee:	4620      	mov	r0, r4
 80130f0:	f000 fd68 	bl	8013bc4 <__multadd>
 80130f4:	4601      	mov	r1, r0
 80130f6:	4606      	mov	r6, r0
 80130f8:	ee18 0a10 	vmov	r0, s16
 80130fc:	f000 ffcc 	bl	8014098 <__mcmp>
 8013100:	2800      	cmp	r0, #0
 8013102:	f73f adbb 	bgt.w	8012c7c <_dtoa_r+0x4b4>
 8013106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013108:	9d01      	ldr	r5, [sp, #4]
 801310a:	43db      	mvns	r3, r3
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	f04f 0800 	mov.w	r8, #0
 8013112:	4631      	mov	r1, r6
 8013114:	4620      	mov	r0, r4
 8013116:	f000 fd33 	bl	8013b80 <_Bfree>
 801311a:	2f00      	cmp	r7, #0
 801311c:	f43f aea4 	beq.w	8012e68 <_dtoa_r+0x6a0>
 8013120:	f1b8 0f00 	cmp.w	r8, #0
 8013124:	d005      	beq.n	8013132 <_dtoa_r+0x96a>
 8013126:	45b8      	cmp	r8, r7
 8013128:	d003      	beq.n	8013132 <_dtoa_r+0x96a>
 801312a:	4641      	mov	r1, r8
 801312c:	4620      	mov	r0, r4
 801312e:	f000 fd27 	bl	8013b80 <_Bfree>
 8013132:	4639      	mov	r1, r7
 8013134:	4620      	mov	r0, r4
 8013136:	f000 fd23 	bl	8013b80 <_Bfree>
 801313a:	e695      	b.n	8012e68 <_dtoa_r+0x6a0>
 801313c:	2600      	movs	r6, #0
 801313e:	4637      	mov	r7, r6
 8013140:	e7e1      	b.n	8013106 <_dtoa_r+0x93e>
 8013142:	9700      	str	r7, [sp, #0]
 8013144:	4637      	mov	r7, r6
 8013146:	e599      	b.n	8012c7c <_dtoa_r+0x4b4>
 8013148:	40240000 	.word	0x40240000
 801314c:	9b08      	ldr	r3, [sp, #32]
 801314e:	2b00      	cmp	r3, #0
 8013150:	f000 80ca 	beq.w	80132e8 <_dtoa_r+0xb20>
 8013154:	9b03      	ldr	r3, [sp, #12]
 8013156:	9302      	str	r3, [sp, #8]
 8013158:	2d00      	cmp	r5, #0
 801315a:	dd05      	ble.n	8013168 <_dtoa_r+0x9a0>
 801315c:	4639      	mov	r1, r7
 801315e:	462a      	mov	r2, r5
 8013160:	4620      	mov	r0, r4
 8013162:	f000 ff29 	bl	8013fb8 <__lshift>
 8013166:	4607      	mov	r7, r0
 8013168:	f1b8 0f00 	cmp.w	r8, #0
 801316c:	d05b      	beq.n	8013226 <_dtoa_r+0xa5e>
 801316e:	6879      	ldr	r1, [r7, #4]
 8013170:	4620      	mov	r0, r4
 8013172:	f000 fcc5 	bl	8013b00 <_Balloc>
 8013176:	4605      	mov	r5, r0
 8013178:	b928      	cbnz	r0, 8013186 <_dtoa_r+0x9be>
 801317a:	4b87      	ldr	r3, [pc, #540]	; (8013398 <_dtoa_r+0xbd0>)
 801317c:	4602      	mov	r2, r0
 801317e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013182:	f7ff bb3b 	b.w	80127fc <_dtoa_r+0x34>
 8013186:	693a      	ldr	r2, [r7, #16]
 8013188:	3202      	adds	r2, #2
 801318a:	0092      	lsls	r2, r2, #2
 801318c:	f107 010c 	add.w	r1, r7, #12
 8013190:	300c      	adds	r0, #12
 8013192:	f000 fca7 	bl	8013ae4 <memcpy>
 8013196:	2201      	movs	r2, #1
 8013198:	4629      	mov	r1, r5
 801319a:	4620      	mov	r0, r4
 801319c:	f000 ff0c 	bl	8013fb8 <__lshift>
 80131a0:	9b01      	ldr	r3, [sp, #4]
 80131a2:	f103 0901 	add.w	r9, r3, #1
 80131a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80131aa:	4413      	add	r3, r2
 80131ac:	9305      	str	r3, [sp, #20]
 80131ae:	f00a 0301 	and.w	r3, sl, #1
 80131b2:	46b8      	mov	r8, r7
 80131b4:	9304      	str	r3, [sp, #16]
 80131b6:	4607      	mov	r7, r0
 80131b8:	4631      	mov	r1, r6
 80131ba:	ee18 0a10 	vmov	r0, s16
 80131be:	f7ff fa75 	bl	80126ac <quorem>
 80131c2:	4641      	mov	r1, r8
 80131c4:	9002      	str	r0, [sp, #8]
 80131c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80131ca:	ee18 0a10 	vmov	r0, s16
 80131ce:	f000 ff63 	bl	8014098 <__mcmp>
 80131d2:	463a      	mov	r2, r7
 80131d4:	9003      	str	r0, [sp, #12]
 80131d6:	4631      	mov	r1, r6
 80131d8:	4620      	mov	r0, r4
 80131da:	f000 ff79 	bl	80140d0 <__mdiff>
 80131de:	68c2      	ldr	r2, [r0, #12]
 80131e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80131e4:	4605      	mov	r5, r0
 80131e6:	bb02      	cbnz	r2, 801322a <_dtoa_r+0xa62>
 80131e8:	4601      	mov	r1, r0
 80131ea:	ee18 0a10 	vmov	r0, s16
 80131ee:	f000 ff53 	bl	8014098 <__mcmp>
 80131f2:	4602      	mov	r2, r0
 80131f4:	4629      	mov	r1, r5
 80131f6:	4620      	mov	r0, r4
 80131f8:	9207      	str	r2, [sp, #28]
 80131fa:	f000 fcc1 	bl	8013b80 <_Bfree>
 80131fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013202:	ea43 0102 	orr.w	r1, r3, r2
 8013206:	9b04      	ldr	r3, [sp, #16]
 8013208:	430b      	orrs	r3, r1
 801320a:	464d      	mov	r5, r9
 801320c:	d10f      	bne.n	801322e <_dtoa_r+0xa66>
 801320e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013212:	d02a      	beq.n	801326a <_dtoa_r+0xaa2>
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	dd02      	ble.n	8013220 <_dtoa_r+0xa58>
 801321a:	9b02      	ldr	r3, [sp, #8]
 801321c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013220:	f88b a000 	strb.w	sl, [fp]
 8013224:	e775      	b.n	8013112 <_dtoa_r+0x94a>
 8013226:	4638      	mov	r0, r7
 8013228:	e7ba      	b.n	80131a0 <_dtoa_r+0x9d8>
 801322a:	2201      	movs	r2, #1
 801322c:	e7e2      	b.n	80131f4 <_dtoa_r+0xa2c>
 801322e:	9b03      	ldr	r3, [sp, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	db04      	blt.n	801323e <_dtoa_r+0xa76>
 8013234:	9906      	ldr	r1, [sp, #24]
 8013236:	430b      	orrs	r3, r1
 8013238:	9904      	ldr	r1, [sp, #16]
 801323a:	430b      	orrs	r3, r1
 801323c:	d122      	bne.n	8013284 <_dtoa_r+0xabc>
 801323e:	2a00      	cmp	r2, #0
 8013240:	ddee      	ble.n	8013220 <_dtoa_r+0xa58>
 8013242:	ee18 1a10 	vmov	r1, s16
 8013246:	2201      	movs	r2, #1
 8013248:	4620      	mov	r0, r4
 801324a:	f000 feb5 	bl	8013fb8 <__lshift>
 801324e:	4631      	mov	r1, r6
 8013250:	ee08 0a10 	vmov	s16, r0
 8013254:	f000 ff20 	bl	8014098 <__mcmp>
 8013258:	2800      	cmp	r0, #0
 801325a:	dc03      	bgt.n	8013264 <_dtoa_r+0xa9c>
 801325c:	d1e0      	bne.n	8013220 <_dtoa_r+0xa58>
 801325e:	f01a 0f01 	tst.w	sl, #1
 8013262:	d0dd      	beq.n	8013220 <_dtoa_r+0xa58>
 8013264:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013268:	d1d7      	bne.n	801321a <_dtoa_r+0xa52>
 801326a:	2339      	movs	r3, #57	; 0x39
 801326c:	f88b 3000 	strb.w	r3, [fp]
 8013270:	462b      	mov	r3, r5
 8013272:	461d      	mov	r5, r3
 8013274:	3b01      	subs	r3, #1
 8013276:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801327a:	2a39      	cmp	r2, #57	; 0x39
 801327c:	d071      	beq.n	8013362 <_dtoa_r+0xb9a>
 801327e:	3201      	adds	r2, #1
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	e746      	b.n	8013112 <_dtoa_r+0x94a>
 8013284:	2a00      	cmp	r2, #0
 8013286:	dd07      	ble.n	8013298 <_dtoa_r+0xad0>
 8013288:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801328c:	d0ed      	beq.n	801326a <_dtoa_r+0xaa2>
 801328e:	f10a 0301 	add.w	r3, sl, #1
 8013292:	f88b 3000 	strb.w	r3, [fp]
 8013296:	e73c      	b.n	8013112 <_dtoa_r+0x94a>
 8013298:	9b05      	ldr	r3, [sp, #20]
 801329a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801329e:	4599      	cmp	r9, r3
 80132a0:	d047      	beq.n	8013332 <_dtoa_r+0xb6a>
 80132a2:	ee18 1a10 	vmov	r1, s16
 80132a6:	2300      	movs	r3, #0
 80132a8:	220a      	movs	r2, #10
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 fc8a 	bl	8013bc4 <__multadd>
 80132b0:	45b8      	cmp	r8, r7
 80132b2:	ee08 0a10 	vmov	s16, r0
 80132b6:	f04f 0300 	mov.w	r3, #0
 80132ba:	f04f 020a 	mov.w	r2, #10
 80132be:	4641      	mov	r1, r8
 80132c0:	4620      	mov	r0, r4
 80132c2:	d106      	bne.n	80132d2 <_dtoa_r+0xb0a>
 80132c4:	f000 fc7e 	bl	8013bc4 <__multadd>
 80132c8:	4680      	mov	r8, r0
 80132ca:	4607      	mov	r7, r0
 80132cc:	f109 0901 	add.w	r9, r9, #1
 80132d0:	e772      	b.n	80131b8 <_dtoa_r+0x9f0>
 80132d2:	f000 fc77 	bl	8013bc4 <__multadd>
 80132d6:	4639      	mov	r1, r7
 80132d8:	4680      	mov	r8, r0
 80132da:	2300      	movs	r3, #0
 80132dc:	220a      	movs	r2, #10
 80132de:	4620      	mov	r0, r4
 80132e0:	f000 fc70 	bl	8013bc4 <__multadd>
 80132e4:	4607      	mov	r7, r0
 80132e6:	e7f1      	b.n	80132cc <_dtoa_r+0xb04>
 80132e8:	9b03      	ldr	r3, [sp, #12]
 80132ea:	9302      	str	r3, [sp, #8]
 80132ec:	9d01      	ldr	r5, [sp, #4]
 80132ee:	ee18 0a10 	vmov	r0, s16
 80132f2:	4631      	mov	r1, r6
 80132f4:	f7ff f9da 	bl	80126ac <quorem>
 80132f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80132fc:	9b01      	ldr	r3, [sp, #4]
 80132fe:	f805 ab01 	strb.w	sl, [r5], #1
 8013302:	1aea      	subs	r2, r5, r3
 8013304:	9b02      	ldr	r3, [sp, #8]
 8013306:	4293      	cmp	r3, r2
 8013308:	dd09      	ble.n	801331e <_dtoa_r+0xb56>
 801330a:	ee18 1a10 	vmov	r1, s16
 801330e:	2300      	movs	r3, #0
 8013310:	220a      	movs	r2, #10
 8013312:	4620      	mov	r0, r4
 8013314:	f000 fc56 	bl	8013bc4 <__multadd>
 8013318:	ee08 0a10 	vmov	s16, r0
 801331c:	e7e7      	b.n	80132ee <_dtoa_r+0xb26>
 801331e:	9b02      	ldr	r3, [sp, #8]
 8013320:	2b00      	cmp	r3, #0
 8013322:	bfc8      	it	gt
 8013324:	461d      	movgt	r5, r3
 8013326:	9b01      	ldr	r3, [sp, #4]
 8013328:	bfd8      	it	le
 801332a:	2501      	movle	r5, #1
 801332c:	441d      	add	r5, r3
 801332e:	f04f 0800 	mov.w	r8, #0
 8013332:	ee18 1a10 	vmov	r1, s16
 8013336:	2201      	movs	r2, #1
 8013338:	4620      	mov	r0, r4
 801333a:	f000 fe3d 	bl	8013fb8 <__lshift>
 801333e:	4631      	mov	r1, r6
 8013340:	ee08 0a10 	vmov	s16, r0
 8013344:	f000 fea8 	bl	8014098 <__mcmp>
 8013348:	2800      	cmp	r0, #0
 801334a:	dc91      	bgt.n	8013270 <_dtoa_r+0xaa8>
 801334c:	d102      	bne.n	8013354 <_dtoa_r+0xb8c>
 801334e:	f01a 0f01 	tst.w	sl, #1
 8013352:	d18d      	bne.n	8013270 <_dtoa_r+0xaa8>
 8013354:	462b      	mov	r3, r5
 8013356:	461d      	mov	r5, r3
 8013358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801335c:	2a30      	cmp	r2, #48	; 0x30
 801335e:	d0fa      	beq.n	8013356 <_dtoa_r+0xb8e>
 8013360:	e6d7      	b.n	8013112 <_dtoa_r+0x94a>
 8013362:	9a01      	ldr	r2, [sp, #4]
 8013364:	429a      	cmp	r2, r3
 8013366:	d184      	bne.n	8013272 <_dtoa_r+0xaaa>
 8013368:	9b00      	ldr	r3, [sp, #0]
 801336a:	3301      	adds	r3, #1
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	2331      	movs	r3, #49	; 0x31
 8013370:	7013      	strb	r3, [r2, #0]
 8013372:	e6ce      	b.n	8013112 <_dtoa_r+0x94a>
 8013374:	4b09      	ldr	r3, [pc, #36]	; (801339c <_dtoa_r+0xbd4>)
 8013376:	f7ff ba95 	b.w	80128a4 <_dtoa_r+0xdc>
 801337a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801337c:	2b00      	cmp	r3, #0
 801337e:	f47f aa6e 	bne.w	801285e <_dtoa_r+0x96>
 8013382:	4b07      	ldr	r3, [pc, #28]	; (80133a0 <_dtoa_r+0xbd8>)
 8013384:	f7ff ba8e 	b.w	80128a4 <_dtoa_r+0xdc>
 8013388:	9b02      	ldr	r3, [sp, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	dcae      	bgt.n	80132ec <_dtoa_r+0xb24>
 801338e:	9b06      	ldr	r3, [sp, #24]
 8013390:	2b02      	cmp	r3, #2
 8013392:	f73f aea8 	bgt.w	80130e6 <_dtoa_r+0x91e>
 8013396:	e7a9      	b.n	80132ec <_dtoa_r+0xb24>
 8013398:	080183e0 	.word	0x080183e0
 801339c:	080185d9 	.word	0x080185d9
 80133a0:	08018361 	.word	0x08018361

080133a4 <rshift>:
 80133a4:	6903      	ldr	r3, [r0, #16]
 80133a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80133aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80133b2:	f100 0414 	add.w	r4, r0, #20
 80133b6:	dd45      	ble.n	8013444 <rshift+0xa0>
 80133b8:	f011 011f 	ands.w	r1, r1, #31
 80133bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80133c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80133c4:	d10c      	bne.n	80133e0 <rshift+0x3c>
 80133c6:	f100 0710 	add.w	r7, r0, #16
 80133ca:	4629      	mov	r1, r5
 80133cc:	42b1      	cmp	r1, r6
 80133ce:	d334      	bcc.n	801343a <rshift+0x96>
 80133d0:	1a9b      	subs	r3, r3, r2
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	1eea      	subs	r2, r5, #3
 80133d6:	4296      	cmp	r6, r2
 80133d8:	bf38      	it	cc
 80133da:	2300      	movcc	r3, #0
 80133dc:	4423      	add	r3, r4
 80133de:	e015      	b.n	801340c <rshift+0x68>
 80133e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80133e4:	f1c1 0820 	rsb	r8, r1, #32
 80133e8:	40cf      	lsrs	r7, r1
 80133ea:	f105 0e04 	add.w	lr, r5, #4
 80133ee:	46a1      	mov	r9, r4
 80133f0:	4576      	cmp	r6, lr
 80133f2:	46f4      	mov	ip, lr
 80133f4:	d815      	bhi.n	8013422 <rshift+0x7e>
 80133f6:	1a9a      	subs	r2, r3, r2
 80133f8:	0092      	lsls	r2, r2, #2
 80133fa:	3a04      	subs	r2, #4
 80133fc:	3501      	adds	r5, #1
 80133fe:	42ae      	cmp	r6, r5
 8013400:	bf38      	it	cc
 8013402:	2200      	movcc	r2, #0
 8013404:	18a3      	adds	r3, r4, r2
 8013406:	50a7      	str	r7, [r4, r2]
 8013408:	b107      	cbz	r7, 801340c <rshift+0x68>
 801340a:	3304      	adds	r3, #4
 801340c:	1b1a      	subs	r2, r3, r4
 801340e:	42a3      	cmp	r3, r4
 8013410:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013414:	bf08      	it	eq
 8013416:	2300      	moveq	r3, #0
 8013418:	6102      	str	r2, [r0, #16]
 801341a:	bf08      	it	eq
 801341c:	6143      	streq	r3, [r0, #20]
 801341e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013422:	f8dc c000 	ldr.w	ip, [ip]
 8013426:	fa0c fc08 	lsl.w	ip, ip, r8
 801342a:	ea4c 0707 	orr.w	r7, ip, r7
 801342e:	f849 7b04 	str.w	r7, [r9], #4
 8013432:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013436:	40cf      	lsrs	r7, r1
 8013438:	e7da      	b.n	80133f0 <rshift+0x4c>
 801343a:	f851 cb04 	ldr.w	ip, [r1], #4
 801343e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013442:	e7c3      	b.n	80133cc <rshift+0x28>
 8013444:	4623      	mov	r3, r4
 8013446:	e7e1      	b.n	801340c <rshift+0x68>

08013448 <__hexdig_fun>:
 8013448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801344c:	2b09      	cmp	r3, #9
 801344e:	d802      	bhi.n	8013456 <__hexdig_fun+0xe>
 8013450:	3820      	subs	r0, #32
 8013452:	b2c0      	uxtb	r0, r0
 8013454:	4770      	bx	lr
 8013456:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801345a:	2b05      	cmp	r3, #5
 801345c:	d801      	bhi.n	8013462 <__hexdig_fun+0x1a>
 801345e:	3847      	subs	r0, #71	; 0x47
 8013460:	e7f7      	b.n	8013452 <__hexdig_fun+0xa>
 8013462:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013466:	2b05      	cmp	r3, #5
 8013468:	d801      	bhi.n	801346e <__hexdig_fun+0x26>
 801346a:	3827      	subs	r0, #39	; 0x27
 801346c:	e7f1      	b.n	8013452 <__hexdig_fun+0xa>
 801346e:	2000      	movs	r0, #0
 8013470:	4770      	bx	lr
	...

08013474 <__gethex>:
 8013474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013478:	ed2d 8b02 	vpush	{d8}
 801347c:	b089      	sub	sp, #36	; 0x24
 801347e:	ee08 0a10 	vmov	s16, r0
 8013482:	9304      	str	r3, [sp, #16]
 8013484:	4bb4      	ldr	r3, [pc, #720]	; (8013758 <__gethex+0x2e4>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	4618      	mov	r0, r3
 801348c:	468b      	mov	fp, r1
 801348e:	4690      	mov	r8, r2
 8013490:	f7ec febe 	bl	8000210 <strlen>
 8013494:	9b01      	ldr	r3, [sp, #4]
 8013496:	f8db 2000 	ldr.w	r2, [fp]
 801349a:	4403      	add	r3, r0
 801349c:	4682      	mov	sl, r0
 801349e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80134a2:	9305      	str	r3, [sp, #20]
 80134a4:	1c93      	adds	r3, r2, #2
 80134a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80134aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80134ae:	32fe      	adds	r2, #254	; 0xfe
 80134b0:	18d1      	adds	r1, r2, r3
 80134b2:	461f      	mov	r7, r3
 80134b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80134b8:	9100      	str	r1, [sp, #0]
 80134ba:	2830      	cmp	r0, #48	; 0x30
 80134bc:	d0f8      	beq.n	80134b0 <__gethex+0x3c>
 80134be:	f7ff ffc3 	bl	8013448 <__hexdig_fun>
 80134c2:	4604      	mov	r4, r0
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d13a      	bne.n	801353e <__gethex+0xca>
 80134c8:	9901      	ldr	r1, [sp, #4]
 80134ca:	4652      	mov	r2, sl
 80134cc:	4638      	mov	r0, r7
 80134ce:	f001 fdb3 	bl	8015038 <strncmp>
 80134d2:	4605      	mov	r5, r0
 80134d4:	2800      	cmp	r0, #0
 80134d6:	d168      	bne.n	80135aa <__gethex+0x136>
 80134d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80134dc:	eb07 060a 	add.w	r6, r7, sl
 80134e0:	f7ff ffb2 	bl	8013448 <__hexdig_fun>
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d062      	beq.n	80135ae <__gethex+0x13a>
 80134e8:	4633      	mov	r3, r6
 80134ea:	7818      	ldrb	r0, [r3, #0]
 80134ec:	2830      	cmp	r0, #48	; 0x30
 80134ee:	461f      	mov	r7, r3
 80134f0:	f103 0301 	add.w	r3, r3, #1
 80134f4:	d0f9      	beq.n	80134ea <__gethex+0x76>
 80134f6:	f7ff ffa7 	bl	8013448 <__hexdig_fun>
 80134fa:	2301      	movs	r3, #1
 80134fc:	fab0 f480 	clz	r4, r0
 8013500:	0964      	lsrs	r4, r4, #5
 8013502:	4635      	mov	r5, r6
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	463a      	mov	r2, r7
 8013508:	4616      	mov	r6, r2
 801350a:	3201      	adds	r2, #1
 801350c:	7830      	ldrb	r0, [r6, #0]
 801350e:	f7ff ff9b 	bl	8013448 <__hexdig_fun>
 8013512:	2800      	cmp	r0, #0
 8013514:	d1f8      	bne.n	8013508 <__gethex+0x94>
 8013516:	9901      	ldr	r1, [sp, #4]
 8013518:	4652      	mov	r2, sl
 801351a:	4630      	mov	r0, r6
 801351c:	f001 fd8c 	bl	8015038 <strncmp>
 8013520:	b980      	cbnz	r0, 8013544 <__gethex+0xd0>
 8013522:	b94d      	cbnz	r5, 8013538 <__gethex+0xc4>
 8013524:	eb06 050a 	add.w	r5, r6, sl
 8013528:	462a      	mov	r2, r5
 801352a:	4616      	mov	r6, r2
 801352c:	3201      	adds	r2, #1
 801352e:	7830      	ldrb	r0, [r6, #0]
 8013530:	f7ff ff8a 	bl	8013448 <__hexdig_fun>
 8013534:	2800      	cmp	r0, #0
 8013536:	d1f8      	bne.n	801352a <__gethex+0xb6>
 8013538:	1bad      	subs	r5, r5, r6
 801353a:	00ad      	lsls	r5, r5, #2
 801353c:	e004      	b.n	8013548 <__gethex+0xd4>
 801353e:	2400      	movs	r4, #0
 8013540:	4625      	mov	r5, r4
 8013542:	e7e0      	b.n	8013506 <__gethex+0x92>
 8013544:	2d00      	cmp	r5, #0
 8013546:	d1f7      	bne.n	8013538 <__gethex+0xc4>
 8013548:	7833      	ldrb	r3, [r6, #0]
 801354a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801354e:	2b50      	cmp	r3, #80	; 0x50
 8013550:	d13b      	bne.n	80135ca <__gethex+0x156>
 8013552:	7873      	ldrb	r3, [r6, #1]
 8013554:	2b2b      	cmp	r3, #43	; 0x2b
 8013556:	d02c      	beq.n	80135b2 <__gethex+0x13e>
 8013558:	2b2d      	cmp	r3, #45	; 0x2d
 801355a:	d02e      	beq.n	80135ba <__gethex+0x146>
 801355c:	1c71      	adds	r1, r6, #1
 801355e:	f04f 0900 	mov.w	r9, #0
 8013562:	7808      	ldrb	r0, [r1, #0]
 8013564:	f7ff ff70 	bl	8013448 <__hexdig_fun>
 8013568:	1e43      	subs	r3, r0, #1
 801356a:	b2db      	uxtb	r3, r3
 801356c:	2b18      	cmp	r3, #24
 801356e:	d82c      	bhi.n	80135ca <__gethex+0x156>
 8013570:	f1a0 0210 	sub.w	r2, r0, #16
 8013574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013578:	f7ff ff66 	bl	8013448 <__hexdig_fun>
 801357c:	1e43      	subs	r3, r0, #1
 801357e:	b2db      	uxtb	r3, r3
 8013580:	2b18      	cmp	r3, #24
 8013582:	d91d      	bls.n	80135c0 <__gethex+0x14c>
 8013584:	f1b9 0f00 	cmp.w	r9, #0
 8013588:	d000      	beq.n	801358c <__gethex+0x118>
 801358a:	4252      	negs	r2, r2
 801358c:	4415      	add	r5, r2
 801358e:	f8cb 1000 	str.w	r1, [fp]
 8013592:	b1e4      	cbz	r4, 80135ce <__gethex+0x15a>
 8013594:	9b00      	ldr	r3, [sp, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	bf14      	ite	ne
 801359a:	2700      	movne	r7, #0
 801359c:	2706      	moveq	r7, #6
 801359e:	4638      	mov	r0, r7
 80135a0:	b009      	add	sp, #36	; 0x24
 80135a2:	ecbd 8b02 	vpop	{d8}
 80135a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135aa:	463e      	mov	r6, r7
 80135ac:	4625      	mov	r5, r4
 80135ae:	2401      	movs	r4, #1
 80135b0:	e7ca      	b.n	8013548 <__gethex+0xd4>
 80135b2:	f04f 0900 	mov.w	r9, #0
 80135b6:	1cb1      	adds	r1, r6, #2
 80135b8:	e7d3      	b.n	8013562 <__gethex+0xee>
 80135ba:	f04f 0901 	mov.w	r9, #1
 80135be:	e7fa      	b.n	80135b6 <__gethex+0x142>
 80135c0:	230a      	movs	r3, #10
 80135c2:	fb03 0202 	mla	r2, r3, r2, r0
 80135c6:	3a10      	subs	r2, #16
 80135c8:	e7d4      	b.n	8013574 <__gethex+0x100>
 80135ca:	4631      	mov	r1, r6
 80135cc:	e7df      	b.n	801358e <__gethex+0x11a>
 80135ce:	1bf3      	subs	r3, r6, r7
 80135d0:	3b01      	subs	r3, #1
 80135d2:	4621      	mov	r1, r4
 80135d4:	2b07      	cmp	r3, #7
 80135d6:	dc0b      	bgt.n	80135f0 <__gethex+0x17c>
 80135d8:	ee18 0a10 	vmov	r0, s16
 80135dc:	f000 fa90 	bl	8013b00 <_Balloc>
 80135e0:	4604      	mov	r4, r0
 80135e2:	b940      	cbnz	r0, 80135f6 <__gethex+0x182>
 80135e4:	4b5d      	ldr	r3, [pc, #372]	; (801375c <__gethex+0x2e8>)
 80135e6:	4602      	mov	r2, r0
 80135e8:	21de      	movs	r1, #222	; 0xde
 80135ea:	485d      	ldr	r0, [pc, #372]	; (8013760 <__gethex+0x2ec>)
 80135ec:	f001 fdf4 	bl	80151d8 <__assert_func>
 80135f0:	3101      	adds	r1, #1
 80135f2:	105b      	asrs	r3, r3, #1
 80135f4:	e7ee      	b.n	80135d4 <__gethex+0x160>
 80135f6:	f100 0914 	add.w	r9, r0, #20
 80135fa:	f04f 0b00 	mov.w	fp, #0
 80135fe:	f1ca 0301 	rsb	r3, sl, #1
 8013602:	f8cd 9008 	str.w	r9, [sp, #8]
 8013606:	f8cd b000 	str.w	fp, [sp]
 801360a:	9306      	str	r3, [sp, #24]
 801360c:	42b7      	cmp	r7, r6
 801360e:	d340      	bcc.n	8013692 <__gethex+0x21e>
 8013610:	9802      	ldr	r0, [sp, #8]
 8013612:	9b00      	ldr	r3, [sp, #0]
 8013614:	f840 3b04 	str.w	r3, [r0], #4
 8013618:	eba0 0009 	sub.w	r0, r0, r9
 801361c:	1080      	asrs	r0, r0, #2
 801361e:	0146      	lsls	r6, r0, #5
 8013620:	6120      	str	r0, [r4, #16]
 8013622:	4618      	mov	r0, r3
 8013624:	f000 fb5e 	bl	8013ce4 <__hi0bits>
 8013628:	1a30      	subs	r0, r6, r0
 801362a:	f8d8 6000 	ldr.w	r6, [r8]
 801362e:	42b0      	cmp	r0, r6
 8013630:	dd63      	ble.n	80136fa <__gethex+0x286>
 8013632:	1b87      	subs	r7, r0, r6
 8013634:	4639      	mov	r1, r7
 8013636:	4620      	mov	r0, r4
 8013638:	f000 ff02 	bl	8014440 <__any_on>
 801363c:	4682      	mov	sl, r0
 801363e:	b1a8      	cbz	r0, 801366c <__gethex+0x1f8>
 8013640:	1e7b      	subs	r3, r7, #1
 8013642:	1159      	asrs	r1, r3, #5
 8013644:	f003 021f 	and.w	r2, r3, #31
 8013648:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801364c:	f04f 0a01 	mov.w	sl, #1
 8013650:	fa0a f202 	lsl.w	r2, sl, r2
 8013654:	420a      	tst	r2, r1
 8013656:	d009      	beq.n	801366c <__gethex+0x1f8>
 8013658:	4553      	cmp	r3, sl
 801365a:	dd05      	ble.n	8013668 <__gethex+0x1f4>
 801365c:	1eb9      	subs	r1, r7, #2
 801365e:	4620      	mov	r0, r4
 8013660:	f000 feee 	bl	8014440 <__any_on>
 8013664:	2800      	cmp	r0, #0
 8013666:	d145      	bne.n	80136f4 <__gethex+0x280>
 8013668:	f04f 0a02 	mov.w	sl, #2
 801366c:	4639      	mov	r1, r7
 801366e:	4620      	mov	r0, r4
 8013670:	f7ff fe98 	bl	80133a4 <rshift>
 8013674:	443d      	add	r5, r7
 8013676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801367a:	42ab      	cmp	r3, r5
 801367c:	da4c      	bge.n	8013718 <__gethex+0x2a4>
 801367e:	ee18 0a10 	vmov	r0, s16
 8013682:	4621      	mov	r1, r4
 8013684:	f000 fa7c 	bl	8013b80 <_Bfree>
 8013688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801368a:	2300      	movs	r3, #0
 801368c:	6013      	str	r3, [r2, #0]
 801368e:	27a3      	movs	r7, #163	; 0xa3
 8013690:	e785      	b.n	801359e <__gethex+0x12a>
 8013692:	1e73      	subs	r3, r6, #1
 8013694:	9a05      	ldr	r2, [sp, #20]
 8013696:	9303      	str	r3, [sp, #12]
 8013698:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801369c:	4293      	cmp	r3, r2
 801369e:	d019      	beq.n	80136d4 <__gethex+0x260>
 80136a0:	f1bb 0f20 	cmp.w	fp, #32
 80136a4:	d107      	bne.n	80136b6 <__gethex+0x242>
 80136a6:	9b02      	ldr	r3, [sp, #8]
 80136a8:	9a00      	ldr	r2, [sp, #0]
 80136aa:	f843 2b04 	str.w	r2, [r3], #4
 80136ae:	9302      	str	r3, [sp, #8]
 80136b0:	2300      	movs	r3, #0
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	469b      	mov	fp, r3
 80136b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80136ba:	f7ff fec5 	bl	8013448 <__hexdig_fun>
 80136be:	9b00      	ldr	r3, [sp, #0]
 80136c0:	f000 000f 	and.w	r0, r0, #15
 80136c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80136c8:	4303      	orrs	r3, r0
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	f10b 0b04 	add.w	fp, fp, #4
 80136d0:	9b03      	ldr	r3, [sp, #12]
 80136d2:	e00d      	b.n	80136f0 <__gethex+0x27c>
 80136d4:	9b03      	ldr	r3, [sp, #12]
 80136d6:	9a06      	ldr	r2, [sp, #24]
 80136d8:	4413      	add	r3, r2
 80136da:	42bb      	cmp	r3, r7
 80136dc:	d3e0      	bcc.n	80136a0 <__gethex+0x22c>
 80136de:	4618      	mov	r0, r3
 80136e0:	9901      	ldr	r1, [sp, #4]
 80136e2:	9307      	str	r3, [sp, #28]
 80136e4:	4652      	mov	r2, sl
 80136e6:	f001 fca7 	bl	8015038 <strncmp>
 80136ea:	9b07      	ldr	r3, [sp, #28]
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d1d7      	bne.n	80136a0 <__gethex+0x22c>
 80136f0:	461e      	mov	r6, r3
 80136f2:	e78b      	b.n	801360c <__gethex+0x198>
 80136f4:	f04f 0a03 	mov.w	sl, #3
 80136f8:	e7b8      	b.n	801366c <__gethex+0x1f8>
 80136fa:	da0a      	bge.n	8013712 <__gethex+0x29e>
 80136fc:	1a37      	subs	r7, r6, r0
 80136fe:	4621      	mov	r1, r4
 8013700:	ee18 0a10 	vmov	r0, s16
 8013704:	463a      	mov	r2, r7
 8013706:	f000 fc57 	bl	8013fb8 <__lshift>
 801370a:	1bed      	subs	r5, r5, r7
 801370c:	4604      	mov	r4, r0
 801370e:	f100 0914 	add.w	r9, r0, #20
 8013712:	f04f 0a00 	mov.w	sl, #0
 8013716:	e7ae      	b.n	8013676 <__gethex+0x202>
 8013718:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801371c:	42a8      	cmp	r0, r5
 801371e:	dd72      	ble.n	8013806 <__gethex+0x392>
 8013720:	1b45      	subs	r5, r0, r5
 8013722:	42ae      	cmp	r6, r5
 8013724:	dc36      	bgt.n	8013794 <__gethex+0x320>
 8013726:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801372a:	2b02      	cmp	r3, #2
 801372c:	d02a      	beq.n	8013784 <__gethex+0x310>
 801372e:	2b03      	cmp	r3, #3
 8013730:	d02c      	beq.n	801378c <__gethex+0x318>
 8013732:	2b01      	cmp	r3, #1
 8013734:	d11c      	bne.n	8013770 <__gethex+0x2fc>
 8013736:	42ae      	cmp	r6, r5
 8013738:	d11a      	bne.n	8013770 <__gethex+0x2fc>
 801373a:	2e01      	cmp	r6, #1
 801373c:	d112      	bne.n	8013764 <__gethex+0x2f0>
 801373e:	9a04      	ldr	r2, [sp, #16]
 8013740:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013744:	6013      	str	r3, [r2, #0]
 8013746:	2301      	movs	r3, #1
 8013748:	6123      	str	r3, [r4, #16]
 801374a:	f8c9 3000 	str.w	r3, [r9]
 801374e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013750:	2762      	movs	r7, #98	; 0x62
 8013752:	601c      	str	r4, [r3, #0]
 8013754:	e723      	b.n	801359e <__gethex+0x12a>
 8013756:	bf00      	nop
 8013758:	08018458 	.word	0x08018458
 801375c:	080183e0 	.word	0x080183e0
 8013760:	080183f1 	.word	0x080183f1
 8013764:	1e71      	subs	r1, r6, #1
 8013766:	4620      	mov	r0, r4
 8013768:	f000 fe6a 	bl	8014440 <__any_on>
 801376c:	2800      	cmp	r0, #0
 801376e:	d1e6      	bne.n	801373e <__gethex+0x2ca>
 8013770:	ee18 0a10 	vmov	r0, s16
 8013774:	4621      	mov	r1, r4
 8013776:	f000 fa03 	bl	8013b80 <_Bfree>
 801377a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801377c:	2300      	movs	r3, #0
 801377e:	6013      	str	r3, [r2, #0]
 8013780:	2750      	movs	r7, #80	; 0x50
 8013782:	e70c      	b.n	801359e <__gethex+0x12a>
 8013784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013786:	2b00      	cmp	r3, #0
 8013788:	d1f2      	bne.n	8013770 <__gethex+0x2fc>
 801378a:	e7d8      	b.n	801373e <__gethex+0x2ca>
 801378c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1d5      	bne.n	801373e <__gethex+0x2ca>
 8013792:	e7ed      	b.n	8013770 <__gethex+0x2fc>
 8013794:	1e6f      	subs	r7, r5, #1
 8013796:	f1ba 0f00 	cmp.w	sl, #0
 801379a:	d131      	bne.n	8013800 <__gethex+0x38c>
 801379c:	b127      	cbz	r7, 80137a8 <__gethex+0x334>
 801379e:	4639      	mov	r1, r7
 80137a0:	4620      	mov	r0, r4
 80137a2:	f000 fe4d 	bl	8014440 <__any_on>
 80137a6:	4682      	mov	sl, r0
 80137a8:	117b      	asrs	r3, r7, #5
 80137aa:	2101      	movs	r1, #1
 80137ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80137b0:	f007 071f 	and.w	r7, r7, #31
 80137b4:	fa01 f707 	lsl.w	r7, r1, r7
 80137b8:	421f      	tst	r7, r3
 80137ba:	4629      	mov	r1, r5
 80137bc:	4620      	mov	r0, r4
 80137be:	bf18      	it	ne
 80137c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80137c4:	1b76      	subs	r6, r6, r5
 80137c6:	f7ff fded 	bl	80133a4 <rshift>
 80137ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80137ce:	2702      	movs	r7, #2
 80137d0:	f1ba 0f00 	cmp.w	sl, #0
 80137d4:	d048      	beq.n	8013868 <__gethex+0x3f4>
 80137d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137da:	2b02      	cmp	r3, #2
 80137dc:	d015      	beq.n	801380a <__gethex+0x396>
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d017      	beq.n	8013812 <__gethex+0x39e>
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d109      	bne.n	80137fa <__gethex+0x386>
 80137e6:	f01a 0f02 	tst.w	sl, #2
 80137ea:	d006      	beq.n	80137fa <__gethex+0x386>
 80137ec:	f8d9 0000 	ldr.w	r0, [r9]
 80137f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80137f4:	f01a 0f01 	tst.w	sl, #1
 80137f8:	d10e      	bne.n	8013818 <__gethex+0x3a4>
 80137fa:	f047 0710 	orr.w	r7, r7, #16
 80137fe:	e033      	b.n	8013868 <__gethex+0x3f4>
 8013800:	f04f 0a01 	mov.w	sl, #1
 8013804:	e7d0      	b.n	80137a8 <__gethex+0x334>
 8013806:	2701      	movs	r7, #1
 8013808:	e7e2      	b.n	80137d0 <__gethex+0x35c>
 801380a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801380c:	f1c3 0301 	rsb	r3, r3, #1
 8013810:	9315      	str	r3, [sp, #84]	; 0x54
 8013812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013814:	2b00      	cmp	r3, #0
 8013816:	d0f0      	beq.n	80137fa <__gethex+0x386>
 8013818:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801381c:	f104 0314 	add.w	r3, r4, #20
 8013820:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013824:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013828:	f04f 0c00 	mov.w	ip, #0
 801382c:	4618      	mov	r0, r3
 801382e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013832:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013836:	d01c      	beq.n	8013872 <__gethex+0x3fe>
 8013838:	3201      	adds	r2, #1
 801383a:	6002      	str	r2, [r0, #0]
 801383c:	2f02      	cmp	r7, #2
 801383e:	f104 0314 	add.w	r3, r4, #20
 8013842:	d13f      	bne.n	80138c4 <__gethex+0x450>
 8013844:	f8d8 2000 	ldr.w	r2, [r8]
 8013848:	3a01      	subs	r2, #1
 801384a:	42b2      	cmp	r2, r6
 801384c:	d10a      	bne.n	8013864 <__gethex+0x3f0>
 801384e:	1171      	asrs	r1, r6, #5
 8013850:	2201      	movs	r2, #1
 8013852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013856:	f006 061f 	and.w	r6, r6, #31
 801385a:	fa02 f606 	lsl.w	r6, r2, r6
 801385e:	421e      	tst	r6, r3
 8013860:	bf18      	it	ne
 8013862:	4617      	movne	r7, r2
 8013864:	f047 0720 	orr.w	r7, r7, #32
 8013868:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801386a:	601c      	str	r4, [r3, #0]
 801386c:	9b04      	ldr	r3, [sp, #16]
 801386e:	601d      	str	r5, [r3, #0]
 8013870:	e695      	b.n	801359e <__gethex+0x12a>
 8013872:	4299      	cmp	r1, r3
 8013874:	f843 cc04 	str.w	ip, [r3, #-4]
 8013878:	d8d8      	bhi.n	801382c <__gethex+0x3b8>
 801387a:	68a3      	ldr	r3, [r4, #8]
 801387c:	459b      	cmp	fp, r3
 801387e:	db19      	blt.n	80138b4 <__gethex+0x440>
 8013880:	6861      	ldr	r1, [r4, #4]
 8013882:	ee18 0a10 	vmov	r0, s16
 8013886:	3101      	adds	r1, #1
 8013888:	f000 f93a 	bl	8013b00 <_Balloc>
 801388c:	4681      	mov	r9, r0
 801388e:	b918      	cbnz	r0, 8013898 <__gethex+0x424>
 8013890:	4b1a      	ldr	r3, [pc, #104]	; (80138fc <__gethex+0x488>)
 8013892:	4602      	mov	r2, r0
 8013894:	2184      	movs	r1, #132	; 0x84
 8013896:	e6a8      	b.n	80135ea <__gethex+0x176>
 8013898:	6922      	ldr	r2, [r4, #16]
 801389a:	3202      	adds	r2, #2
 801389c:	f104 010c 	add.w	r1, r4, #12
 80138a0:	0092      	lsls	r2, r2, #2
 80138a2:	300c      	adds	r0, #12
 80138a4:	f000 f91e 	bl	8013ae4 <memcpy>
 80138a8:	4621      	mov	r1, r4
 80138aa:	ee18 0a10 	vmov	r0, s16
 80138ae:	f000 f967 	bl	8013b80 <_Bfree>
 80138b2:	464c      	mov	r4, r9
 80138b4:	6923      	ldr	r3, [r4, #16]
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80138bc:	6122      	str	r2, [r4, #16]
 80138be:	2201      	movs	r2, #1
 80138c0:	615a      	str	r2, [r3, #20]
 80138c2:	e7bb      	b.n	801383c <__gethex+0x3c8>
 80138c4:	6922      	ldr	r2, [r4, #16]
 80138c6:	455a      	cmp	r2, fp
 80138c8:	dd0b      	ble.n	80138e2 <__gethex+0x46e>
 80138ca:	2101      	movs	r1, #1
 80138cc:	4620      	mov	r0, r4
 80138ce:	f7ff fd69 	bl	80133a4 <rshift>
 80138d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138d6:	3501      	adds	r5, #1
 80138d8:	42ab      	cmp	r3, r5
 80138da:	f6ff aed0 	blt.w	801367e <__gethex+0x20a>
 80138de:	2701      	movs	r7, #1
 80138e0:	e7c0      	b.n	8013864 <__gethex+0x3f0>
 80138e2:	f016 061f 	ands.w	r6, r6, #31
 80138e6:	d0fa      	beq.n	80138de <__gethex+0x46a>
 80138e8:	4453      	add	r3, sl
 80138ea:	f1c6 0620 	rsb	r6, r6, #32
 80138ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80138f2:	f000 f9f7 	bl	8013ce4 <__hi0bits>
 80138f6:	42b0      	cmp	r0, r6
 80138f8:	dbe7      	blt.n	80138ca <__gethex+0x456>
 80138fa:	e7f0      	b.n	80138de <__gethex+0x46a>
 80138fc:	080183e0 	.word	0x080183e0

08013900 <L_shift>:
 8013900:	f1c2 0208 	rsb	r2, r2, #8
 8013904:	0092      	lsls	r2, r2, #2
 8013906:	b570      	push	{r4, r5, r6, lr}
 8013908:	f1c2 0620 	rsb	r6, r2, #32
 801390c:	6843      	ldr	r3, [r0, #4]
 801390e:	6804      	ldr	r4, [r0, #0]
 8013910:	fa03 f506 	lsl.w	r5, r3, r6
 8013914:	432c      	orrs	r4, r5
 8013916:	40d3      	lsrs	r3, r2
 8013918:	6004      	str	r4, [r0, #0]
 801391a:	f840 3f04 	str.w	r3, [r0, #4]!
 801391e:	4288      	cmp	r0, r1
 8013920:	d3f4      	bcc.n	801390c <L_shift+0xc>
 8013922:	bd70      	pop	{r4, r5, r6, pc}

08013924 <__match>:
 8013924:	b530      	push	{r4, r5, lr}
 8013926:	6803      	ldr	r3, [r0, #0]
 8013928:	3301      	adds	r3, #1
 801392a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801392e:	b914      	cbnz	r4, 8013936 <__match+0x12>
 8013930:	6003      	str	r3, [r0, #0]
 8013932:	2001      	movs	r0, #1
 8013934:	bd30      	pop	{r4, r5, pc}
 8013936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801393a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801393e:	2d19      	cmp	r5, #25
 8013940:	bf98      	it	ls
 8013942:	3220      	addls	r2, #32
 8013944:	42a2      	cmp	r2, r4
 8013946:	d0f0      	beq.n	801392a <__match+0x6>
 8013948:	2000      	movs	r0, #0
 801394a:	e7f3      	b.n	8013934 <__match+0x10>

0801394c <__hexnan>:
 801394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013950:	680b      	ldr	r3, [r1, #0]
 8013952:	115e      	asrs	r6, r3, #5
 8013954:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013958:	f013 031f 	ands.w	r3, r3, #31
 801395c:	b087      	sub	sp, #28
 801395e:	bf18      	it	ne
 8013960:	3604      	addne	r6, #4
 8013962:	2500      	movs	r5, #0
 8013964:	1f37      	subs	r7, r6, #4
 8013966:	4690      	mov	r8, r2
 8013968:	6802      	ldr	r2, [r0, #0]
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	4682      	mov	sl, r0
 801396e:	f846 5c04 	str.w	r5, [r6, #-4]
 8013972:	46b9      	mov	r9, r7
 8013974:	463c      	mov	r4, r7
 8013976:	9502      	str	r5, [sp, #8]
 8013978:	46ab      	mov	fp, r5
 801397a:	7851      	ldrb	r1, [r2, #1]
 801397c:	1c53      	adds	r3, r2, #1
 801397e:	9303      	str	r3, [sp, #12]
 8013980:	b341      	cbz	r1, 80139d4 <__hexnan+0x88>
 8013982:	4608      	mov	r0, r1
 8013984:	9205      	str	r2, [sp, #20]
 8013986:	9104      	str	r1, [sp, #16]
 8013988:	f7ff fd5e 	bl	8013448 <__hexdig_fun>
 801398c:	2800      	cmp	r0, #0
 801398e:	d14f      	bne.n	8013a30 <__hexnan+0xe4>
 8013990:	9904      	ldr	r1, [sp, #16]
 8013992:	9a05      	ldr	r2, [sp, #20]
 8013994:	2920      	cmp	r1, #32
 8013996:	d818      	bhi.n	80139ca <__hexnan+0x7e>
 8013998:	9b02      	ldr	r3, [sp, #8]
 801399a:	459b      	cmp	fp, r3
 801399c:	dd13      	ble.n	80139c6 <__hexnan+0x7a>
 801399e:	454c      	cmp	r4, r9
 80139a0:	d206      	bcs.n	80139b0 <__hexnan+0x64>
 80139a2:	2d07      	cmp	r5, #7
 80139a4:	dc04      	bgt.n	80139b0 <__hexnan+0x64>
 80139a6:	462a      	mov	r2, r5
 80139a8:	4649      	mov	r1, r9
 80139aa:	4620      	mov	r0, r4
 80139ac:	f7ff ffa8 	bl	8013900 <L_shift>
 80139b0:	4544      	cmp	r4, r8
 80139b2:	d950      	bls.n	8013a56 <__hexnan+0x10a>
 80139b4:	2300      	movs	r3, #0
 80139b6:	f1a4 0904 	sub.w	r9, r4, #4
 80139ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80139be:	f8cd b008 	str.w	fp, [sp, #8]
 80139c2:	464c      	mov	r4, r9
 80139c4:	461d      	mov	r5, r3
 80139c6:	9a03      	ldr	r2, [sp, #12]
 80139c8:	e7d7      	b.n	801397a <__hexnan+0x2e>
 80139ca:	2929      	cmp	r1, #41	; 0x29
 80139cc:	d156      	bne.n	8013a7c <__hexnan+0x130>
 80139ce:	3202      	adds	r2, #2
 80139d0:	f8ca 2000 	str.w	r2, [sl]
 80139d4:	f1bb 0f00 	cmp.w	fp, #0
 80139d8:	d050      	beq.n	8013a7c <__hexnan+0x130>
 80139da:	454c      	cmp	r4, r9
 80139dc:	d206      	bcs.n	80139ec <__hexnan+0xa0>
 80139de:	2d07      	cmp	r5, #7
 80139e0:	dc04      	bgt.n	80139ec <__hexnan+0xa0>
 80139e2:	462a      	mov	r2, r5
 80139e4:	4649      	mov	r1, r9
 80139e6:	4620      	mov	r0, r4
 80139e8:	f7ff ff8a 	bl	8013900 <L_shift>
 80139ec:	4544      	cmp	r4, r8
 80139ee:	d934      	bls.n	8013a5a <__hexnan+0x10e>
 80139f0:	f1a8 0204 	sub.w	r2, r8, #4
 80139f4:	4623      	mov	r3, r4
 80139f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80139fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80139fe:	429f      	cmp	r7, r3
 8013a00:	d2f9      	bcs.n	80139f6 <__hexnan+0xaa>
 8013a02:	1b3b      	subs	r3, r7, r4
 8013a04:	f023 0303 	bic.w	r3, r3, #3
 8013a08:	3304      	adds	r3, #4
 8013a0a:	3401      	adds	r4, #1
 8013a0c:	3e03      	subs	r6, #3
 8013a0e:	42b4      	cmp	r4, r6
 8013a10:	bf88      	it	hi
 8013a12:	2304      	movhi	r3, #4
 8013a14:	4443      	add	r3, r8
 8013a16:	2200      	movs	r2, #0
 8013a18:	f843 2b04 	str.w	r2, [r3], #4
 8013a1c:	429f      	cmp	r7, r3
 8013a1e:	d2fb      	bcs.n	8013a18 <__hexnan+0xcc>
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	b91b      	cbnz	r3, 8013a2c <__hexnan+0xe0>
 8013a24:	4547      	cmp	r7, r8
 8013a26:	d127      	bne.n	8013a78 <__hexnan+0x12c>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	603b      	str	r3, [r7, #0]
 8013a2c:	2005      	movs	r0, #5
 8013a2e:	e026      	b.n	8013a7e <__hexnan+0x132>
 8013a30:	3501      	adds	r5, #1
 8013a32:	2d08      	cmp	r5, #8
 8013a34:	f10b 0b01 	add.w	fp, fp, #1
 8013a38:	dd06      	ble.n	8013a48 <__hexnan+0xfc>
 8013a3a:	4544      	cmp	r4, r8
 8013a3c:	d9c3      	bls.n	80139c6 <__hexnan+0x7a>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a44:	2501      	movs	r5, #1
 8013a46:	3c04      	subs	r4, #4
 8013a48:	6822      	ldr	r2, [r4, #0]
 8013a4a:	f000 000f 	and.w	r0, r0, #15
 8013a4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013a52:	6022      	str	r2, [r4, #0]
 8013a54:	e7b7      	b.n	80139c6 <__hexnan+0x7a>
 8013a56:	2508      	movs	r5, #8
 8013a58:	e7b5      	b.n	80139c6 <__hexnan+0x7a>
 8013a5a:	9b01      	ldr	r3, [sp, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d0df      	beq.n	8013a20 <__hexnan+0xd4>
 8013a60:	f04f 32ff 	mov.w	r2, #4294967295
 8013a64:	f1c3 0320 	rsb	r3, r3, #32
 8013a68:	fa22 f303 	lsr.w	r3, r2, r3
 8013a6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013a70:	401a      	ands	r2, r3
 8013a72:	f846 2c04 	str.w	r2, [r6, #-4]
 8013a76:	e7d3      	b.n	8013a20 <__hexnan+0xd4>
 8013a78:	3f04      	subs	r7, #4
 8013a7a:	e7d1      	b.n	8013a20 <__hexnan+0xd4>
 8013a7c:	2004      	movs	r0, #4
 8013a7e:	b007      	add	sp, #28
 8013a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a84 <_localeconv_r>:
 8013a84:	4800      	ldr	r0, [pc, #0]	; (8013a88 <_localeconv_r+0x4>)
 8013a86:	4770      	bx	lr
 8013a88:	20000184 	.word	0x20000184

08013a8c <_lseek_r>:
 8013a8c:	b538      	push	{r3, r4, r5, lr}
 8013a8e:	4d07      	ldr	r5, [pc, #28]	; (8013aac <_lseek_r+0x20>)
 8013a90:	4604      	mov	r4, r0
 8013a92:	4608      	mov	r0, r1
 8013a94:	4611      	mov	r1, r2
 8013a96:	2200      	movs	r2, #0
 8013a98:	602a      	str	r2, [r5, #0]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	f7f2 ff76 	bl	800698c <_lseek>
 8013aa0:	1c43      	adds	r3, r0, #1
 8013aa2:	d102      	bne.n	8013aaa <_lseek_r+0x1e>
 8013aa4:	682b      	ldr	r3, [r5, #0]
 8013aa6:	b103      	cbz	r3, 8013aaa <_lseek_r+0x1e>
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	2000496c 	.word	0x2000496c

08013ab0 <malloc>:
 8013ab0:	4b02      	ldr	r3, [pc, #8]	; (8013abc <malloc+0xc>)
 8013ab2:	4601      	mov	r1, r0
 8013ab4:	6818      	ldr	r0, [r3, #0]
 8013ab6:	f000 bd67 	b.w	8014588 <_malloc_r>
 8013aba:	bf00      	nop
 8013abc:	2000002c 	.word	0x2000002c

08013ac0 <__ascii_mbtowc>:
 8013ac0:	b082      	sub	sp, #8
 8013ac2:	b901      	cbnz	r1, 8013ac6 <__ascii_mbtowc+0x6>
 8013ac4:	a901      	add	r1, sp, #4
 8013ac6:	b142      	cbz	r2, 8013ada <__ascii_mbtowc+0x1a>
 8013ac8:	b14b      	cbz	r3, 8013ade <__ascii_mbtowc+0x1e>
 8013aca:	7813      	ldrb	r3, [r2, #0]
 8013acc:	600b      	str	r3, [r1, #0]
 8013ace:	7812      	ldrb	r2, [r2, #0]
 8013ad0:	1e10      	subs	r0, r2, #0
 8013ad2:	bf18      	it	ne
 8013ad4:	2001      	movne	r0, #1
 8013ad6:	b002      	add	sp, #8
 8013ad8:	4770      	bx	lr
 8013ada:	4610      	mov	r0, r2
 8013adc:	e7fb      	b.n	8013ad6 <__ascii_mbtowc+0x16>
 8013ade:	f06f 0001 	mvn.w	r0, #1
 8013ae2:	e7f8      	b.n	8013ad6 <__ascii_mbtowc+0x16>

08013ae4 <memcpy>:
 8013ae4:	440a      	add	r2, r1
 8013ae6:	4291      	cmp	r1, r2
 8013ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013aec:	d100      	bne.n	8013af0 <memcpy+0xc>
 8013aee:	4770      	bx	lr
 8013af0:	b510      	push	{r4, lr}
 8013af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013afa:	4291      	cmp	r1, r2
 8013afc:	d1f9      	bne.n	8013af2 <memcpy+0xe>
 8013afe:	bd10      	pop	{r4, pc}

08013b00 <_Balloc>:
 8013b00:	b570      	push	{r4, r5, r6, lr}
 8013b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b04:	4604      	mov	r4, r0
 8013b06:	460d      	mov	r5, r1
 8013b08:	b976      	cbnz	r6, 8013b28 <_Balloc+0x28>
 8013b0a:	2010      	movs	r0, #16
 8013b0c:	f7ff ffd0 	bl	8013ab0 <malloc>
 8013b10:	4602      	mov	r2, r0
 8013b12:	6260      	str	r0, [r4, #36]	; 0x24
 8013b14:	b920      	cbnz	r0, 8013b20 <_Balloc+0x20>
 8013b16:	4b18      	ldr	r3, [pc, #96]	; (8013b78 <_Balloc+0x78>)
 8013b18:	4818      	ldr	r0, [pc, #96]	; (8013b7c <_Balloc+0x7c>)
 8013b1a:	2166      	movs	r1, #102	; 0x66
 8013b1c:	f001 fb5c 	bl	80151d8 <__assert_func>
 8013b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b24:	6006      	str	r6, [r0, #0]
 8013b26:	60c6      	str	r6, [r0, #12]
 8013b28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013b2a:	68f3      	ldr	r3, [r6, #12]
 8013b2c:	b183      	cbz	r3, 8013b50 <_Balloc+0x50>
 8013b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b36:	b9b8      	cbnz	r0, 8013b68 <_Balloc+0x68>
 8013b38:	2101      	movs	r1, #1
 8013b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8013b3e:	1d72      	adds	r2, r6, #5
 8013b40:	0092      	lsls	r2, r2, #2
 8013b42:	4620      	mov	r0, r4
 8013b44:	f000 fc9d 	bl	8014482 <_calloc_r>
 8013b48:	b160      	cbz	r0, 8013b64 <_Balloc+0x64>
 8013b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b4e:	e00e      	b.n	8013b6e <_Balloc+0x6e>
 8013b50:	2221      	movs	r2, #33	; 0x21
 8013b52:	2104      	movs	r1, #4
 8013b54:	4620      	mov	r0, r4
 8013b56:	f000 fc94 	bl	8014482 <_calloc_r>
 8013b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b5c:	60f0      	str	r0, [r6, #12]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1e4      	bne.n	8013b2e <_Balloc+0x2e>
 8013b64:	2000      	movs	r0, #0
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	6802      	ldr	r2, [r0, #0]
 8013b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b74:	e7f7      	b.n	8013b66 <_Balloc+0x66>
 8013b76:	bf00      	nop
 8013b78:	0801836e 	.word	0x0801836e
 8013b7c:	0801846c 	.word	0x0801846c

08013b80 <_Bfree>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b84:	4605      	mov	r5, r0
 8013b86:	460c      	mov	r4, r1
 8013b88:	b976      	cbnz	r6, 8013ba8 <_Bfree+0x28>
 8013b8a:	2010      	movs	r0, #16
 8013b8c:	f7ff ff90 	bl	8013ab0 <malloc>
 8013b90:	4602      	mov	r2, r0
 8013b92:	6268      	str	r0, [r5, #36]	; 0x24
 8013b94:	b920      	cbnz	r0, 8013ba0 <_Bfree+0x20>
 8013b96:	4b09      	ldr	r3, [pc, #36]	; (8013bbc <_Bfree+0x3c>)
 8013b98:	4809      	ldr	r0, [pc, #36]	; (8013bc0 <_Bfree+0x40>)
 8013b9a:	218a      	movs	r1, #138	; 0x8a
 8013b9c:	f001 fb1c 	bl	80151d8 <__assert_func>
 8013ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ba4:	6006      	str	r6, [r0, #0]
 8013ba6:	60c6      	str	r6, [r0, #12]
 8013ba8:	b13c      	cbz	r4, 8013bba <_Bfree+0x3a>
 8013baa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013bac:	6862      	ldr	r2, [r4, #4]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013bb4:	6021      	str	r1, [r4, #0]
 8013bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
 8013bbc:	0801836e 	.word	0x0801836e
 8013bc0:	0801846c 	.word	0x0801846c

08013bc4 <__multadd>:
 8013bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc8:	690d      	ldr	r5, [r1, #16]
 8013bca:	4607      	mov	r7, r0
 8013bcc:	460c      	mov	r4, r1
 8013bce:	461e      	mov	r6, r3
 8013bd0:	f101 0c14 	add.w	ip, r1, #20
 8013bd4:	2000      	movs	r0, #0
 8013bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bda:	b299      	uxth	r1, r3
 8013bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8013be0:	0c1e      	lsrs	r6, r3, #16
 8013be2:	0c0b      	lsrs	r3, r1, #16
 8013be4:	fb02 3306 	mla	r3, r2, r6, r3
 8013be8:	b289      	uxth	r1, r1
 8013bea:	3001      	adds	r0, #1
 8013bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013bf0:	4285      	cmp	r5, r0
 8013bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8013bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bfa:	dcec      	bgt.n	8013bd6 <__multadd+0x12>
 8013bfc:	b30e      	cbz	r6, 8013c42 <__multadd+0x7e>
 8013bfe:	68a3      	ldr	r3, [r4, #8]
 8013c00:	42ab      	cmp	r3, r5
 8013c02:	dc19      	bgt.n	8013c38 <__multadd+0x74>
 8013c04:	6861      	ldr	r1, [r4, #4]
 8013c06:	4638      	mov	r0, r7
 8013c08:	3101      	adds	r1, #1
 8013c0a:	f7ff ff79 	bl	8013b00 <_Balloc>
 8013c0e:	4680      	mov	r8, r0
 8013c10:	b928      	cbnz	r0, 8013c1e <__multadd+0x5a>
 8013c12:	4602      	mov	r2, r0
 8013c14:	4b0c      	ldr	r3, [pc, #48]	; (8013c48 <__multadd+0x84>)
 8013c16:	480d      	ldr	r0, [pc, #52]	; (8013c4c <__multadd+0x88>)
 8013c18:	21b5      	movs	r1, #181	; 0xb5
 8013c1a:	f001 fadd 	bl	80151d8 <__assert_func>
 8013c1e:	6922      	ldr	r2, [r4, #16]
 8013c20:	3202      	adds	r2, #2
 8013c22:	f104 010c 	add.w	r1, r4, #12
 8013c26:	0092      	lsls	r2, r2, #2
 8013c28:	300c      	adds	r0, #12
 8013c2a:	f7ff ff5b 	bl	8013ae4 <memcpy>
 8013c2e:	4621      	mov	r1, r4
 8013c30:	4638      	mov	r0, r7
 8013c32:	f7ff ffa5 	bl	8013b80 <_Bfree>
 8013c36:	4644      	mov	r4, r8
 8013c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c3c:	3501      	adds	r5, #1
 8013c3e:	615e      	str	r6, [r3, #20]
 8013c40:	6125      	str	r5, [r4, #16]
 8013c42:	4620      	mov	r0, r4
 8013c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c48:	080183e0 	.word	0x080183e0
 8013c4c:	0801846c 	.word	0x0801846c

08013c50 <__s2b>:
 8013c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c54:	460c      	mov	r4, r1
 8013c56:	4615      	mov	r5, r2
 8013c58:	461f      	mov	r7, r3
 8013c5a:	2209      	movs	r2, #9
 8013c5c:	3308      	adds	r3, #8
 8013c5e:	4606      	mov	r6, r0
 8013c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c64:	2100      	movs	r1, #0
 8013c66:	2201      	movs	r2, #1
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	db09      	blt.n	8013c80 <__s2b+0x30>
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7ff ff47 	bl	8013b00 <_Balloc>
 8013c72:	b940      	cbnz	r0, 8013c86 <__s2b+0x36>
 8013c74:	4602      	mov	r2, r0
 8013c76:	4b19      	ldr	r3, [pc, #100]	; (8013cdc <__s2b+0x8c>)
 8013c78:	4819      	ldr	r0, [pc, #100]	; (8013ce0 <__s2b+0x90>)
 8013c7a:	21ce      	movs	r1, #206	; 0xce
 8013c7c:	f001 faac 	bl	80151d8 <__assert_func>
 8013c80:	0052      	lsls	r2, r2, #1
 8013c82:	3101      	adds	r1, #1
 8013c84:	e7f0      	b.n	8013c68 <__s2b+0x18>
 8013c86:	9b08      	ldr	r3, [sp, #32]
 8013c88:	6143      	str	r3, [r0, #20]
 8013c8a:	2d09      	cmp	r5, #9
 8013c8c:	f04f 0301 	mov.w	r3, #1
 8013c90:	6103      	str	r3, [r0, #16]
 8013c92:	dd16      	ble.n	8013cc2 <__s2b+0x72>
 8013c94:	f104 0909 	add.w	r9, r4, #9
 8013c98:	46c8      	mov	r8, r9
 8013c9a:	442c      	add	r4, r5
 8013c9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013ca0:	4601      	mov	r1, r0
 8013ca2:	3b30      	subs	r3, #48	; 0x30
 8013ca4:	220a      	movs	r2, #10
 8013ca6:	4630      	mov	r0, r6
 8013ca8:	f7ff ff8c 	bl	8013bc4 <__multadd>
 8013cac:	45a0      	cmp	r8, r4
 8013cae:	d1f5      	bne.n	8013c9c <__s2b+0x4c>
 8013cb0:	f1a5 0408 	sub.w	r4, r5, #8
 8013cb4:	444c      	add	r4, r9
 8013cb6:	1b2d      	subs	r5, r5, r4
 8013cb8:	1963      	adds	r3, r4, r5
 8013cba:	42bb      	cmp	r3, r7
 8013cbc:	db04      	blt.n	8013cc8 <__s2b+0x78>
 8013cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cc2:	340a      	adds	r4, #10
 8013cc4:	2509      	movs	r5, #9
 8013cc6:	e7f6      	b.n	8013cb6 <__s2b+0x66>
 8013cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ccc:	4601      	mov	r1, r0
 8013cce:	3b30      	subs	r3, #48	; 0x30
 8013cd0:	220a      	movs	r2, #10
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f7ff ff76 	bl	8013bc4 <__multadd>
 8013cd8:	e7ee      	b.n	8013cb8 <__s2b+0x68>
 8013cda:	bf00      	nop
 8013cdc:	080183e0 	.word	0x080183e0
 8013ce0:	0801846c 	.word	0x0801846c

08013ce4 <__hi0bits>:
 8013ce4:	0c03      	lsrs	r3, r0, #16
 8013ce6:	041b      	lsls	r3, r3, #16
 8013ce8:	b9d3      	cbnz	r3, 8013d20 <__hi0bits+0x3c>
 8013cea:	0400      	lsls	r0, r0, #16
 8013cec:	2310      	movs	r3, #16
 8013cee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013cf2:	bf04      	itt	eq
 8013cf4:	0200      	lsleq	r0, r0, #8
 8013cf6:	3308      	addeq	r3, #8
 8013cf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013cfc:	bf04      	itt	eq
 8013cfe:	0100      	lsleq	r0, r0, #4
 8013d00:	3304      	addeq	r3, #4
 8013d02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013d06:	bf04      	itt	eq
 8013d08:	0080      	lsleq	r0, r0, #2
 8013d0a:	3302      	addeq	r3, #2
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	db05      	blt.n	8013d1c <__hi0bits+0x38>
 8013d10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013d14:	f103 0301 	add.w	r3, r3, #1
 8013d18:	bf08      	it	eq
 8013d1a:	2320      	moveq	r3, #32
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	4770      	bx	lr
 8013d20:	2300      	movs	r3, #0
 8013d22:	e7e4      	b.n	8013cee <__hi0bits+0xa>

08013d24 <__lo0bits>:
 8013d24:	6803      	ldr	r3, [r0, #0]
 8013d26:	f013 0207 	ands.w	r2, r3, #7
 8013d2a:	4601      	mov	r1, r0
 8013d2c:	d00b      	beq.n	8013d46 <__lo0bits+0x22>
 8013d2e:	07da      	lsls	r2, r3, #31
 8013d30:	d423      	bmi.n	8013d7a <__lo0bits+0x56>
 8013d32:	0798      	lsls	r0, r3, #30
 8013d34:	bf49      	itett	mi
 8013d36:	085b      	lsrmi	r3, r3, #1
 8013d38:	089b      	lsrpl	r3, r3, #2
 8013d3a:	2001      	movmi	r0, #1
 8013d3c:	600b      	strmi	r3, [r1, #0]
 8013d3e:	bf5c      	itt	pl
 8013d40:	600b      	strpl	r3, [r1, #0]
 8013d42:	2002      	movpl	r0, #2
 8013d44:	4770      	bx	lr
 8013d46:	b298      	uxth	r0, r3
 8013d48:	b9a8      	cbnz	r0, 8013d76 <__lo0bits+0x52>
 8013d4a:	0c1b      	lsrs	r3, r3, #16
 8013d4c:	2010      	movs	r0, #16
 8013d4e:	b2da      	uxtb	r2, r3
 8013d50:	b90a      	cbnz	r2, 8013d56 <__lo0bits+0x32>
 8013d52:	3008      	adds	r0, #8
 8013d54:	0a1b      	lsrs	r3, r3, #8
 8013d56:	071a      	lsls	r2, r3, #28
 8013d58:	bf04      	itt	eq
 8013d5a:	091b      	lsreq	r3, r3, #4
 8013d5c:	3004      	addeq	r0, #4
 8013d5e:	079a      	lsls	r2, r3, #30
 8013d60:	bf04      	itt	eq
 8013d62:	089b      	lsreq	r3, r3, #2
 8013d64:	3002      	addeq	r0, #2
 8013d66:	07da      	lsls	r2, r3, #31
 8013d68:	d403      	bmi.n	8013d72 <__lo0bits+0x4e>
 8013d6a:	085b      	lsrs	r3, r3, #1
 8013d6c:	f100 0001 	add.w	r0, r0, #1
 8013d70:	d005      	beq.n	8013d7e <__lo0bits+0x5a>
 8013d72:	600b      	str	r3, [r1, #0]
 8013d74:	4770      	bx	lr
 8013d76:	4610      	mov	r0, r2
 8013d78:	e7e9      	b.n	8013d4e <__lo0bits+0x2a>
 8013d7a:	2000      	movs	r0, #0
 8013d7c:	4770      	bx	lr
 8013d7e:	2020      	movs	r0, #32
 8013d80:	4770      	bx	lr
	...

08013d84 <__i2b>:
 8013d84:	b510      	push	{r4, lr}
 8013d86:	460c      	mov	r4, r1
 8013d88:	2101      	movs	r1, #1
 8013d8a:	f7ff feb9 	bl	8013b00 <_Balloc>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	b928      	cbnz	r0, 8013d9e <__i2b+0x1a>
 8013d92:	4b05      	ldr	r3, [pc, #20]	; (8013da8 <__i2b+0x24>)
 8013d94:	4805      	ldr	r0, [pc, #20]	; (8013dac <__i2b+0x28>)
 8013d96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013d9a:	f001 fa1d 	bl	80151d8 <__assert_func>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	6144      	str	r4, [r0, #20]
 8013da2:	6103      	str	r3, [r0, #16]
 8013da4:	bd10      	pop	{r4, pc}
 8013da6:	bf00      	nop
 8013da8:	080183e0 	.word	0x080183e0
 8013dac:	0801846c 	.word	0x0801846c

08013db0 <__multiply>:
 8013db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db4:	4691      	mov	r9, r2
 8013db6:	690a      	ldr	r2, [r1, #16]
 8013db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	bfb8      	it	lt
 8013dc0:	460b      	movlt	r3, r1
 8013dc2:	460c      	mov	r4, r1
 8013dc4:	bfbc      	itt	lt
 8013dc6:	464c      	movlt	r4, r9
 8013dc8:	4699      	movlt	r9, r3
 8013dca:	6927      	ldr	r7, [r4, #16]
 8013dcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013dd0:	68a3      	ldr	r3, [r4, #8]
 8013dd2:	6861      	ldr	r1, [r4, #4]
 8013dd4:	eb07 060a 	add.w	r6, r7, sl
 8013dd8:	42b3      	cmp	r3, r6
 8013dda:	b085      	sub	sp, #20
 8013ddc:	bfb8      	it	lt
 8013dde:	3101      	addlt	r1, #1
 8013de0:	f7ff fe8e 	bl	8013b00 <_Balloc>
 8013de4:	b930      	cbnz	r0, 8013df4 <__multiply+0x44>
 8013de6:	4602      	mov	r2, r0
 8013de8:	4b44      	ldr	r3, [pc, #272]	; (8013efc <__multiply+0x14c>)
 8013dea:	4845      	ldr	r0, [pc, #276]	; (8013f00 <__multiply+0x150>)
 8013dec:	f240 115d 	movw	r1, #349	; 0x15d
 8013df0:	f001 f9f2 	bl	80151d8 <__assert_func>
 8013df4:	f100 0514 	add.w	r5, r0, #20
 8013df8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013dfc:	462b      	mov	r3, r5
 8013dfe:	2200      	movs	r2, #0
 8013e00:	4543      	cmp	r3, r8
 8013e02:	d321      	bcc.n	8013e48 <__multiply+0x98>
 8013e04:	f104 0314 	add.w	r3, r4, #20
 8013e08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013e0c:	f109 0314 	add.w	r3, r9, #20
 8013e10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013e14:	9202      	str	r2, [sp, #8]
 8013e16:	1b3a      	subs	r2, r7, r4
 8013e18:	3a15      	subs	r2, #21
 8013e1a:	f022 0203 	bic.w	r2, r2, #3
 8013e1e:	3204      	adds	r2, #4
 8013e20:	f104 0115 	add.w	r1, r4, #21
 8013e24:	428f      	cmp	r7, r1
 8013e26:	bf38      	it	cc
 8013e28:	2204      	movcc	r2, #4
 8013e2a:	9201      	str	r2, [sp, #4]
 8013e2c:	9a02      	ldr	r2, [sp, #8]
 8013e2e:	9303      	str	r3, [sp, #12]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d80c      	bhi.n	8013e4e <__multiply+0x9e>
 8013e34:	2e00      	cmp	r6, #0
 8013e36:	dd03      	ble.n	8013e40 <__multiply+0x90>
 8013e38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d05a      	beq.n	8013ef6 <__multiply+0x146>
 8013e40:	6106      	str	r6, [r0, #16]
 8013e42:	b005      	add	sp, #20
 8013e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e48:	f843 2b04 	str.w	r2, [r3], #4
 8013e4c:	e7d8      	b.n	8013e00 <__multiply+0x50>
 8013e4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013e52:	f1ba 0f00 	cmp.w	sl, #0
 8013e56:	d024      	beq.n	8013ea2 <__multiply+0xf2>
 8013e58:	f104 0e14 	add.w	lr, r4, #20
 8013e5c:	46a9      	mov	r9, r5
 8013e5e:	f04f 0c00 	mov.w	ip, #0
 8013e62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013e66:	f8d9 1000 	ldr.w	r1, [r9]
 8013e6a:	fa1f fb82 	uxth.w	fp, r2
 8013e6e:	b289      	uxth	r1, r1
 8013e70:	fb0a 110b 	mla	r1, sl, fp, r1
 8013e74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013e78:	f8d9 2000 	ldr.w	r2, [r9]
 8013e7c:	4461      	add	r1, ip
 8013e7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e82:	fb0a c20b 	mla	r2, sl, fp, ip
 8013e86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e8a:	b289      	uxth	r1, r1
 8013e8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e90:	4577      	cmp	r7, lr
 8013e92:	f849 1b04 	str.w	r1, [r9], #4
 8013e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e9a:	d8e2      	bhi.n	8013e62 <__multiply+0xb2>
 8013e9c:	9a01      	ldr	r2, [sp, #4]
 8013e9e:	f845 c002 	str.w	ip, [r5, r2]
 8013ea2:	9a03      	ldr	r2, [sp, #12]
 8013ea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	f1b9 0f00 	cmp.w	r9, #0
 8013eae:	d020      	beq.n	8013ef2 <__multiply+0x142>
 8013eb0:	6829      	ldr	r1, [r5, #0]
 8013eb2:	f104 0c14 	add.w	ip, r4, #20
 8013eb6:	46ae      	mov	lr, r5
 8013eb8:	f04f 0a00 	mov.w	sl, #0
 8013ebc:	f8bc b000 	ldrh.w	fp, [ip]
 8013ec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013ec4:	fb09 220b 	mla	r2, r9, fp, r2
 8013ec8:	4492      	add	sl, r2
 8013eca:	b289      	uxth	r1, r1
 8013ecc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013ed0:	f84e 1b04 	str.w	r1, [lr], #4
 8013ed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013ed8:	f8be 1000 	ldrh.w	r1, [lr]
 8013edc:	0c12      	lsrs	r2, r2, #16
 8013ede:	fb09 1102 	mla	r1, r9, r2, r1
 8013ee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013ee6:	4567      	cmp	r7, ip
 8013ee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013eec:	d8e6      	bhi.n	8013ebc <__multiply+0x10c>
 8013eee:	9a01      	ldr	r2, [sp, #4]
 8013ef0:	50a9      	str	r1, [r5, r2]
 8013ef2:	3504      	adds	r5, #4
 8013ef4:	e79a      	b.n	8013e2c <__multiply+0x7c>
 8013ef6:	3e01      	subs	r6, #1
 8013ef8:	e79c      	b.n	8013e34 <__multiply+0x84>
 8013efa:	bf00      	nop
 8013efc:	080183e0 	.word	0x080183e0
 8013f00:	0801846c 	.word	0x0801846c

08013f04 <__pow5mult>:
 8013f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f08:	4615      	mov	r5, r2
 8013f0a:	f012 0203 	ands.w	r2, r2, #3
 8013f0e:	4606      	mov	r6, r0
 8013f10:	460f      	mov	r7, r1
 8013f12:	d007      	beq.n	8013f24 <__pow5mult+0x20>
 8013f14:	4c25      	ldr	r4, [pc, #148]	; (8013fac <__pow5mult+0xa8>)
 8013f16:	3a01      	subs	r2, #1
 8013f18:	2300      	movs	r3, #0
 8013f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f1e:	f7ff fe51 	bl	8013bc4 <__multadd>
 8013f22:	4607      	mov	r7, r0
 8013f24:	10ad      	asrs	r5, r5, #2
 8013f26:	d03d      	beq.n	8013fa4 <__pow5mult+0xa0>
 8013f28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013f2a:	b97c      	cbnz	r4, 8013f4c <__pow5mult+0x48>
 8013f2c:	2010      	movs	r0, #16
 8013f2e:	f7ff fdbf 	bl	8013ab0 <malloc>
 8013f32:	4602      	mov	r2, r0
 8013f34:	6270      	str	r0, [r6, #36]	; 0x24
 8013f36:	b928      	cbnz	r0, 8013f44 <__pow5mult+0x40>
 8013f38:	4b1d      	ldr	r3, [pc, #116]	; (8013fb0 <__pow5mult+0xac>)
 8013f3a:	481e      	ldr	r0, [pc, #120]	; (8013fb4 <__pow5mult+0xb0>)
 8013f3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013f40:	f001 f94a 	bl	80151d8 <__assert_func>
 8013f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f48:	6004      	str	r4, [r0, #0]
 8013f4a:	60c4      	str	r4, [r0, #12]
 8013f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f54:	b94c      	cbnz	r4, 8013f6a <__pow5mult+0x66>
 8013f56:	f240 2171 	movw	r1, #625	; 0x271
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f7ff ff12 	bl	8013d84 <__i2b>
 8013f60:	2300      	movs	r3, #0
 8013f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f66:	4604      	mov	r4, r0
 8013f68:	6003      	str	r3, [r0, #0]
 8013f6a:	f04f 0900 	mov.w	r9, #0
 8013f6e:	07eb      	lsls	r3, r5, #31
 8013f70:	d50a      	bpl.n	8013f88 <__pow5mult+0x84>
 8013f72:	4639      	mov	r1, r7
 8013f74:	4622      	mov	r2, r4
 8013f76:	4630      	mov	r0, r6
 8013f78:	f7ff ff1a 	bl	8013db0 <__multiply>
 8013f7c:	4639      	mov	r1, r7
 8013f7e:	4680      	mov	r8, r0
 8013f80:	4630      	mov	r0, r6
 8013f82:	f7ff fdfd 	bl	8013b80 <_Bfree>
 8013f86:	4647      	mov	r7, r8
 8013f88:	106d      	asrs	r5, r5, #1
 8013f8a:	d00b      	beq.n	8013fa4 <__pow5mult+0xa0>
 8013f8c:	6820      	ldr	r0, [r4, #0]
 8013f8e:	b938      	cbnz	r0, 8013fa0 <__pow5mult+0x9c>
 8013f90:	4622      	mov	r2, r4
 8013f92:	4621      	mov	r1, r4
 8013f94:	4630      	mov	r0, r6
 8013f96:	f7ff ff0b 	bl	8013db0 <__multiply>
 8013f9a:	6020      	str	r0, [r4, #0]
 8013f9c:	f8c0 9000 	str.w	r9, [r0]
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	e7e4      	b.n	8013f6e <__pow5mult+0x6a>
 8013fa4:	4638      	mov	r0, r7
 8013fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013faa:	bf00      	nop
 8013fac:	080185b8 	.word	0x080185b8
 8013fb0:	0801836e 	.word	0x0801836e
 8013fb4:	0801846c 	.word	0x0801846c

08013fb8 <__lshift>:
 8013fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	6849      	ldr	r1, [r1, #4]
 8013fc0:	6923      	ldr	r3, [r4, #16]
 8013fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013fc6:	68a3      	ldr	r3, [r4, #8]
 8013fc8:	4607      	mov	r7, r0
 8013fca:	4691      	mov	r9, r2
 8013fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fd0:	f108 0601 	add.w	r6, r8, #1
 8013fd4:	42b3      	cmp	r3, r6
 8013fd6:	db0b      	blt.n	8013ff0 <__lshift+0x38>
 8013fd8:	4638      	mov	r0, r7
 8013fda:	f7ff fd91 	bl	8013b00 <_Balloc>
 8013fde:	4605      	mov	r5, r0
 8013fe0:	b948      	cbnz	r0, 8013ff6 <__lshift+0x3e>
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	4b2a      	ldr	r3, [pc, #168]	; (8014090 <__lshift+0xd8>)
 8013fe6:	482b      	ldr	r0, [pc, #172]	; (8014094 <__lshift+0xdc>)
 8013fe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013fec:	f001 f8f4 	bl	80151d8 <__assert_func>
 8013ff0:	3101      	adds	r1, #1
 8013ff2:	005b      	lsls	r3, r3, #1
 8013ff4:	e7ee      	b.n	8013fd4 <__lshift+0x1c>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	f100 0114 	add.w	r1, r0, #20
 8013ffc:	f100 0210 	add.w	r2, r0, #16
 8014000:	4618      	mov	r0, r3
 8014002:	4553      	cmp	r3, sl
 8014004:	db37      	blt.n	8014076 <__lshift+0xbe>
 8014006:	6920      	ldr	r0, [r4, #16]
 8014008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801400c:	f104 0314 	add.w	r3, r4, #20
 8014010:	f019 091f 	ands.w	r9, r9, #31
 8014014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801401c:	d02f      	beq.n	801407e <__lshift+0xc6>
 801401e:	f1c9 0e20 	rsb	lr, r9, #32
 8014022:	468a      	mov	sl, r1
 8014024:	f04f 0c00 	mov.w	ip, #0
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	fa02 f209 	lsl.w	r2, r2, r9
 801402e:	ea42 020c 	orr.w	r2, r2, ip
 8014032:	f84a 2b04 	str.w	r2, [sl], #4
 8014036:	f853 2b04 	ldr.w	r2, [r3], #4
 801403a:	4298      	cmp	r0, r3
 801403c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014040:	d8f2      	bhi.n	8014028 <__lshift+0x70>
 8014042:	1b03      	subs	r3, r0, r4
 8014044:	3b15      	subs	r3, #21
 8014046:	f023 0303 	bic.w	r3, r3, #3
 801404a:	3304      	adds	r3, #4
 801404c:	f104 0215 	add.w	r2, r4, #21
 8014050:	4290      	cmp	r0, r2
 8014052:	bf38      	it	cc
 8014054:	2304      	movcc	r3, #4
 8014056:	f841 c003 	str.w	ip, [r1, r3]
 801405a:	f1bc 0f00 	cmp.w	ip, #0
 801405e:	d001      	beq.n	8014064 <__lshift+0xac>
 8014060:	f108 0602 	add.w	r6, r8, #2
 8014064:	3e01      	subs	r6, #1
 8014066:	4638      	mov	r0, r7
 8014068:	612e      	str	r6, [r5, #16]
 801406a:	4621      	mov	r1, r4
 801406c:	f7ff fd88 	bl	8013b80 <_Bfree>
 8014070:	4628      	mov	r0, r5
 8014072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014076:	f842 0f04 	str.w	r0, [r2, #4]!
 801407a:	3301      	adds	r3, #1
 801407c:	e7c1      	b.n	8014002 <__lshift+0x4a>
 801407e:	3904      	subs	r1, #4
 8014080:	f853 2b04 	ldr.w	r2, [r3], #4
 8014084:	f841 2f04 	str.w	r2, [r1, #4]!
 8014088:	4298      	cmp	r0, r3
 801408a:	d8f9      	bhi.n	8014080 <__lshift+0xc8>
 801408c:	e7ea      	b.n	8014064 <__lshift+0xac>
 801408e:	bf00      	nop
 8014090:	080183e0 	.word	0x080183e0
 8014094:	0801846c 	.word	0x0801846c

08014098 <__mcmp>:
 8014098:	b530      	push	{r4, r5, lr}
 801409a:	6902      	ldr	r2, [r0, #16]
 801409c:	690c      	ldr	r4, [r1, #16]
 801409e:	1b12      	subs	r2, r2, r4
 80140a0:	d10e      	bne.n	80140c0 <__mcmp+0x28>
 80140a2:	f100 0314 	add.w	r3, r0, #20
 80140a6:	3114      	adds	r1, #20
 80140a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80140ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80140b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80140b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80140b8:	42a5      	cmp	r5, r4
 80140ba:	d003      	beq.n	80140c4 <__mcmp+0x2c>
 80140bc:	d305      	bcc.n	80140ca <__mcmp+0x32>
 80140be:	2201      	movs	r2, #1
 80140c0:	4610      	mov	r0, r2
 80140c2:	bd30      	pop	{r4, r5, pc}
 80140c4:	4283      	cmp	r3, r0
 80140c6:	d3f3      	bcc.n	80140b0 <__mcmp+0x18>
 80140c8:	e7fa      	b.n	80140c0 <__mcmp+0x28>
 80140ca:	f04f 32ff 	mov.w	r2, #4294967295
 80140ce:	e7f7      	b.n	80140c0 <__mcmp+0x28>

080140d0 <__mdiff>:
 80140d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	460c      	mov	r4, r1
 80140d6:	4606      	mov	r6, r0
 80140d8:	4611      	mov	r1, r2
 80140da:	4620      	mov	r0, r4
 80140dc:	4690      	mov	r8, r2
 80140de:	f7ff ffdb 	bl	8014098 <__mcmp>
 80140e2:	1e05      	subs	r5, r0, #0
 80140e4:	d110      	bne.n	8014108 <__mdiff+0x38>
 80140e6:	4629      	mov	r1, r5
 80140e8:	4630      	mov	r0, r6
 80140ea:	f7ff fd09 	bl	8013b00 <_Balloc>
 80140ee:	b930      	cbnz	r0, 80140fe <__mdiff+0x2e>
 80140f0:	4b3a      	ldr	r3, [pc, #232]	; (80141dc <__mdiff+0x10c>)
 80140f2:	4602      	mov	r2, r0
 80140f4:	f240 2132 	movw	r1, #562	; 0x232
 80140f8:	4839      	ldr	r0, [pc, #228]	; (80141e0 <__mdiff+0x110>)
 80140fa:	f001 f86d 	bl	80151d8 <__assert_func>
 80140fe:	2301      	movs	r3, #1
 8014100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014108:	bfa4      	itt	ge
 801410a:	4643      	movge	r3, r8
 801410c:	46a0      	movge	r8, r4
 801410e:	4630      	mov	r0, r6
 8014110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014114:	bfa6      	itte	ge
 8014116:	461c      	movge	r4, r3
 8014118:	2500      	movge	r5, #0
 801411a:	2501      	movlt	r5, #1
 801411c:	f7ff fcf0 	bl	8013b00 <_Balloc>
 8014120:	b920      	cbnz	r0, 801412c <__mdiff+0x5c>
 8014122:	4b2e      	ldr	r3, [pc, #184]	; (80141dc <__mdiff+0x10c>)
 8014124:	4602      	mov	r2, r0
 8014126:	f44f 7110 	mov.w	r1, #576	; 0x240
 801412a:	e7e5      	b.n	80140f8 <__mdiff+0x28>
 801412c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014130:	6926      	ldr	r6, [r4, #16]
 8014132:	60c5      	str	r5, [r0, #12]
 8014134:	f104 0914 	add.w	r9, r4, #20
 8014138:	f108 0514 	add.w	r5, r8, #20
 801413c:	f100 0e14 	add.w	lr, r0, #20
 8014140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014148:	f108 0210 	add.w	r2, r8, #16
 801414c:	46f2      	mov	sl, lr
 801414e:	2100      	movs	r1, #0
 8014150:	f859 3b04 	ldr.w	r3, [r9], #4
 8014154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014158:	fa1f f883 	uxth.w	r8, r3
 801415c:	fa11 f18b 	uxtah	r1, r1, fp
 8014160:	0c1b      	lsrs	r3, r3, #16
 8014162:	eba1 0808 	sub.w	r8, r1, r8
 8014166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801416a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801416e:	fa1f f888 	uxth.w	r8, r8
 8014172:	1419      	asrs	r1, r3, #16
 8014174:	454e      	cmp	r6, r9
 8014176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801417a:	f84a 3b04 	str.w	r3, [sl], #4
 801417e:	d8e7      	bhi.n	8014150 <__mdiff+0x80>
 8014180:	1b33      	subs	r3, r6, r4
 8014182:	3b15      	subs	r3, #21
 8014184:	f023 0303 	bic.w	r3, r3, #3
 8014188:	3304      	adds	r3, #4
 801418a:	3415      	adds	r4, #21
 801418c:	42a6      	cmp	r6, r4
 801418e:	bf38      	it	cc
 8014190:	2304      	movcc	r3, #4
 8014192:	441d      	add	r5, r3
 8014194:	4473      	add	r3, lr
 8014196:	469e      	mov	lr, r3
 8014198:	462e      	mov	r6, r5
 801419a:	4566      	cmp	r6, ip
 801419c:	d30e      	bcc.n	80141bc <__mdiff+0xec>
 801419e:	f10c 0203 	add.w	r2, ip, #3
 80141a2:	1b52      	subs	r2, r2, r5
 80141a4:	f022 0203 	bic.w	r2, r2, #3
 80141a8:	3d03      	subs	r5, #3
 80141aa:	45ac      	cmp	ip, r5
 80141ac:	bf38      	it	cc
 80141ae:	2200      	movcc	r2, #0
 80141b0:	441a      	add	r2, r3
 80141b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80141b6:	b17b      	cbz	r3, 80141d8 <__mdiff+0x108>
 80141b8:	6107      	str	r7, [r0, #16]
 80141ba:	e7a3      	b.n	8014104 <__mdiff+0x34>
 80141bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80141c0:	fa11 f288 	uxtah	r2, r1, r8
 80141c4:	1414      	asrs	r4, r2, #16
 80141c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80141ca:	b292      	uxth	r2, r2
 80141cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80141d0:	f84e 2b04 	str.w	r2, [lr], #4
 80141d4:	1421      	asrs	r1, r4, #16
 80141d6:	e7e0      	b.n	801419a <__mdiff+0xca>
 80141d8:	3f01      	subs	r7, #1
 80141da:	e7ea      	b.n	80141b2 <__mdiff+0xe2>
 80141dc:	080183e0 	.word	0x080183e0
 80141e0:	0801846c 	.word	0x0801846c

080141e4 <__ulp>:
 80141e4:	b082      	sub	sp, #8
 80141e6:	ed8d 0b00 	vstr	d0, [sp]
 80141ea:	9b01      	ldr	r3, [sp, #4]
 80141ec:	4912      	ldr	r1, [pc, #72]	; (8014238 <__ulp+0x54>)
 80141ee:	4019      	ands	r1, r3
 80141f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80141f4:	2900      	cmp	r1, #0
 80141f6:	dd05      	ble.n	8014204 <__ulp+0x20>
 80141f8:	2200      	movs	r2, #0
 80141fa:	460b      	mov	r3, r1
 80141fc:	ec43 2b10 	vmov	d0, r2, r3
 8014200:	b002      	add	sp, #8
 8014202:	4770      	bx	lr
 8014204:	4249      	negs	r1, r1
 8014206:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801420a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801420e:	f04f 0200 	mov.w	r2, #0
 8014212:	f04f 0300 	mov.w	r3, #0
 8014216:	da04      	bge.n	8014222 <__ulp+0x3e>
 8014218:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801421c:	fa41 f300 	asr.w	r3, r1, r0
 8014220:	e7ec      	b.n	80141fc <__ulp+0x18>
 8014222:	f1a0 0114 	sub.w	r1, r0, #20
 8014226:	291e      	cmp	r1, #30
 8014228:	bfda      	itte	le
 801422a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801422e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014232:	2101      	movgt	r1, #1
 8014234:	460a      	mov	r2, r1
 8014236:	e7e1      	b.n	80141fc <__ulp+0x18>
 8014238:	7ff00000 	.word	0x7ff00000

0801423c <__b2d>:
 801423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423e:	6905      	ldr	r5, [r0, #16]
 8014240:	f100 0714 	add.w	r7, r0, #20
 8014244:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014248:	1f2e      	subs	r6, r5, #4
 801424a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801424e:	4620      	mov	r0, r4
 8014250:	f7ff fd48 	bl	8013ce4 <__hi0bits>
 8014254:	f1c0 0320 	rsb	r3, r0, #32
 8014258:	280a      	cmp	r0, #10
 801425a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80142d8 <__b2d+0x9c>
 801425e:	600b      	str	r3, [r1, #0]
 8014260:	dc14      	bgt.n	801428c <__b2d+0x50>
 8014262:	f1c0 0e0b 	rsb	lr, r0, #11
 8014266:	fa24 f10e 	lsr.w	r1, r4, lr
 801426a:	42b7      	cmp	r7, r6
 801426c:	ea41 030c 	orr.w	r3, r1, ip
 8014270:	bf34      	ite	cc
 8014272:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014276:	2100      	movcs	r1, #0
 8014278:	3015      	adds	r0, #21
 801427a:	fa04 f000 	lsl.w	r0, r4, r0
 801427e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014282:	ea40 0201 	orr.w	r2, r0, r1
 8014286:	ec43 2b10 	vmov	d0, r2, r3
 801428a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801428c:	42b7      	cmp	r7, r6
 801428e:	bf3a      	itte	cc
 8014290:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014294:	f1a5 0608 	subcc.w	r6, r5, #8
 8014298:	2100      	movcs	r1, #0
 801429a:	380b      	subs	r0, #11
 801429c:	d017      	beq.n	80142ce <__b2d+0x92>
 801429e:	f1c0 0c20 	rsb	ip, r0, #32
 80142a2:	fa04 f500 	lsl.w	r5, r4, r0
 80142a6:	42be      	cmp	r6, r7
 80142a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80142ac:	ea45 0504 	orr.w	r5, r5, r4
 80142b0:	bf8c      	ite	hi
 80142b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80142b6:	2400      	movls	r4, #0
 80142b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80142bc:	fa01 f000 	lsl.w	r0, r1, r0
 80142c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80142c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80142c8:	ea40 0204 	orr.w	r2, r0, r4
 80142cc:	e7db      	b.n	8014286 <__b2d+0x4a>
 80142ce:	ea44 030c 	orr.w	r3, r4, ip
 80142d2:	460a      	mov	r2, r1
 80142d4:	e7d7      	b.n	8014286 <__b2d+0x4a>
 80142d6:	bf00      	nop
 80142d8:	3ff00000 	.word	0x3ff00000

080142dc <__d2b>:
 80142dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142e0:	4689      	mov	r9, r1
 80142e2:	2101      	movs	r1, #1
 80142e4:	ec57 6b10 	vmov	r6, r7, d0
 80142e8:	4690      	mov	r8, r2
 80142ea:	f7ff fc09 	bl	8013b00 <_Balloc>
 80142ee:	4604      	mov	r4, r0
 80142f0:	b930      	cbnz	r0, 8014300 <__d2b+0x24>
 80142f2:	4602      	mov	r2, r0
 80142f4:	4b25      	ldr	r3, [pc, #148]	; (801438c <__d2b+0xb0>)
 80142f6:	4826      	ldr	r0, [pc, #152]	; (8014390 <__d2b+0xb4>)
 80142f8:	f240 310a 	movw	r1, #778	; 0x30a
 80142fc:	f000 ff6c 	bl	80151d8 <__assert_func>
 8014300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014308:	bb35      	cbnz	r5, 8014358 <__d2b+0x7c>
 801430a:	2e00      	cmp	r6, #0
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	d028      	beq.n	8014362 <__d2b+0x86>
 8014310:	4668      	mov	r0, sp
 8014312:	9600      	str	r6, [sp, #0]
 8014314:	f7ff fd06 	bl	8013d24 <__lo0bits>
 8014318:	9900      	ldr	r1, [sp, #0]
 801431a:	b300      	cbz	r0, 801435e <__d2b+0x82>
 801431c:	9a01      	ldr	r2, [sp, #4]
 801431e:	f1c0 0320 	rsb	r3, r0, #32
 8014322:	fa02 f303 	lsl.w	r3, r2, r3
 8014326:	430b      	orrs	r3, r1
 8014328:	40c2      	lsrs	r2, r0
 801432a:	6163      	str	r3, [r4, #20]
 801432c:	9201      	str	r2, [sp, #4]
 801432e:	9b01      	ldr	r3, [sp, #4]
 8014330:	61a3      	str	r3, [r4, #24]
 8014332:	2b00      	cmp	r3, #0
 8014334:	bf14      	ite	ne
 8014336:	2202      	movne	r2, #2
 8014338:	2201      	moveq	r2, #1
 801433a:	6122      	str	r2, [r4, #16]
 801433c:	b1d5      	cbz	r5, 8014374 <__d2b+0x98>
 801433e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014342:	4405      	add	r5, r0
 8014344:	f8c9 5000 	str.w	r5, [r9]
 8014348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801434c:	f8c8 0000 	str.w	r0, [r8]
 8014350:	4620      	mov	r0, r4
 8014352:	b003      	add	sp, #12
 8014354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801435c:	e7d5      	b.n	801430a <__d2b+0x2e>
 801435e:	6161      	str	r1, [r4, #20]
 8014360:	e7e5      	b.n	801432e <__d2b+0x52>
 8014362:	a801      	add	r0, sp, #4
 8014364:	f7ff fcde 	bl	8013d24 <__lo0bits>
 8014368:	9b01      	ldr	r3, [sp, #4]
 801436a:	6163      	str	r3, [r4, #20]
 801436c:	2201      	movs	r2, #1
 801436e:	6122      	str	r2, [r4, #16]
 8014370:	3020      	adds	r0, #32
 8014372:	e7e3      	b.n	801433c <__d2b+0x60>
 8014374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801437c:	f8c9 0000 	str.w	r0, [r9]
 8014380:	6918      	ldr	r0, [r3, #16]
 8014382:	f7ff fcaf 	bl	8013ce4 <__hi0bits>
 8014386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801438a:	e7df      	b.n	801434c <__d2b+0x70>
 801438c:	080183e0 	.word	0x080183e0
 8014390:	0801846c 	.word	0x0801846c

08014394 <__ratio>:
 8014394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014398:	4688      	mov	r8, r1
 801439a:	4669      	mov	r1, sp
 801439c:	4681      	mov	r9, r0
 801439e:	f7ff ff4d 	bl	801423c <__b2d>
 80143a2:	a901      	add	r1, sp, #4
 80143a4:	4640      	mov	r0, r8
 80143a6:	ec55 4b10 	vmov	r4, r5, d0
 80143aa:	f7ff ff47 	bl	801423c <__b2d>
 80143ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80143b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80143b6:	eba3 0c02 	sub.w	ip, r3, r2
 80143ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80143be:	1a9b      	subs	r3, r3, r2
 80143c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80143c4:	ec51 0b10 	vmov	r0, r1, d0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	bfd6      	itet	le
 80143cc:	460a      	movle	r2, r1
 80143ce:	462a      	movgt	r2, r5
 80143d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80143d4:	468b      	mov	fp, r1
 80143d6:	462f      	mov	r7, r5
 80143d8:	bfd4      	ite	le
 80143da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80143de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80143e2:	4620      	mov	r0, r4
 80143e4:	ee10 2a10 	vmov	r2, s0
 80143e8:	465b      	mov	r3, fp
 80143ea:	4639      	mov	r1, r7
 80143ec:	f7ec fa4e 	bl	800088c <__aeabi_ddiv>
 80143f0:	ec41 0b10 	vmov	d0, r0, r1
 80143f4:	b003      	add	sp, #12
 80143f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143fa <__copybits>:
 80143fa:	3901      	subs	r1, #1
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	1149      	asrs	r1, r1, #5
 8014400:	6914      	ldr	r4, [r2, #16]
 8014402:	3101      	adds	r1, #1
 8014404:	f102 0314 	add.w	r3, r2, #20
 8014408:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801440c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014410:	1f05      	subs	r5, r0, #4
 8014412:	42a3      	cmp	r3, r4
 8014414:	d30c      	bcc.n	8014430 <__copybits+0x36>
 8014416:	1aa3      	subs	r3, r4, r2
 8014418:	3b11      	subs	r3, #17
 801441a:	f023 0303 	bic.w	r3, r3, #3
 801441e:	3211      	adds	r2, #17
 8014420:	42a2      	cmp	r2, r4
 8014422:	bf88      	it	hi
 8014424:	2300      	movhi	r3, #0
 8014426:	4418      	add	r0, r3
 8014428:	2300      	movs	r3, #0
 801442a:	4288      	cmp	r0, r1
 801442c:	d305      	bcc.n	801443a <__copybits+0x40>
 801442e:	bd70      	pop	{r4, r5, r6, pc}
 8014430:	f853 6b04 	ldr.w	r6, [r3], #4
 8014434:	f845 6f04 	str.w	r6, [r5, #4]!
 8014438:	e7eb      	b.n	8014412 <__copybits+0x18>
 801443a:	f840 3b04 	str.w	r3, [r0], #4
 801443e:	e7f4      	b.n	801442a <__copybits+0x30>

08014440 <__any_on>:
 8014440:	f100 0214 	add.w	r2, r0, #20
 8014444:	6900      	ldr	r0, [r0, #16]
 8014446:	114b      	asrs	r3, r1, #5
 8014448:	4298      	cmp	r0, r3
 801444a:	b510      	push	{r4, lr}
 801444c:	db11      	blt.n	8014472 <__any_on+0x32>
 801444e:	dd0a      	ble.n	8014466 <__any_on+0x26>
 8014450:	f011 011f 	ands.w	r1, r1, #31
 8014454:	d007      	beq.n	8014466 <__any_on+0x26>
 8014456:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801445a:	fa24 f001 	lsr.w	r0, r4, r1
 801445e:	fa00 f101 	lsl.w	r1, r0, r1
 8014462:	428c      	cmp	r4, r1
 8014464:	d10b      	bne.n	801447e <__any_on+0x3e>
 8014466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801446a:	4293      	cmp	r3, r2
 801446c:	d803      	bhi.n	8014476 <__any_on+0x36>
 801446e:	2000      	movs	r0, #0
 8014470:	bd10      	pop	{r4, pc}
 8014472:	4603      	mov	r3, r0
 8014474:	e7f7      	b.n	8014466 <__any_on+0x26>
 8014476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801447a:	2900      	cmp	r1, #0
 801447c:	d0f5      	beq.n	801446a <__any_on+0x2a>
 801447e:	2001      	movs	r0, #1
 8014480:	e7f6      	b.n	8014470 <__any_on+0x30>

08014482 <_calloc_r>:
 8014482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014484:	fba1 2402 	umull	r2, r4, r1, r2
 8014488:	b94c      	cbnz	r4, 801449e <_calloc_r+0x1c>
 801448a:	4611      	mov	r1, r2
 801448c:	9201      	str	r2, [sp, #4]
 801448e:	f000 f87b 	bl	8014588 <_malloc_r>
 8014492:	9a01      	ldr	r2, [sp, #4]
 8014494:	4605      	mov	r5, r0
 8014496:	b930      	cbnz	r0, 80144a6 <_calloc_r+0x24>
 8014498:	4628      	mov	r0, r5
 801449a:	b003      	add	sp, #12
 801449c:	bd30      	pop	{r4, r5, pc}
 801449e:	220c      	movs	r2, #12
 80144a0:	6002      	str	r2, [r0, #0]
 80144a2:	2500      	movs	r5, #0
 80144a4:	e7f8      	b.n	8014498 <_calloc_r+0x16>
 80144a6:	4621      	mov	r1, r4
 80144a8:	f7fc faf8 	bl	8010a9c <memset>
 80144ac:	e7f4      	b.n	8014498 <_calloc_r+0x16>
	...

080144b0 <_free_r>:
 80144b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144b2:	2900      	cmp	r1, #0
 80144b4:	d044      	beq.n	8014540 <_free_r+0x90>
 80144b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144ba:	9001      	str	r0, [sp, #4]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f1a1 0404 	sub.w	r4, r1, #4
 80144c2:	bfb8      	it	lt
 80144c4:	18e4      	addlt	r4, r4, r3
 80144c6:	f001 f88b 	bl	80155e0 <__malloc_lock>
 80144ca:	4a1e      	ldr	r2, [pc, #120]	; (8014544 <_free_r+0x94>)
 80144cc:	9801      	ldr	r0, [sp, #4]
 80144ce:	6813      	ldr	r3, [r2, #0]
 80144d0:	b933      	cbnz	r3, 80144e0 <_free_r+0x30>
 80144d2:	6063      	str	r3, [r4, #4]
 80144d4:	6014      	str	r4, [r2, #0]
 80144d6:	b003      	add	sp, #12
 80144d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144dc:	f001 b886 	b.w	80155ec <__malloc_unlock>
 80144e0:	42a3      	cmp	r3, r4
 80144e2:	d908      	bls.n	80144f6 <_free_r+0x46>
 80144e4:	6825      	ldr	r5, [r4, #0]
 80144e6:	1961      	adds	r1, r4, r5
 80144e8:	428b      	cmp	r3, r1
 80144ea:	bf01      	itttt	eq
 80144ec:	6819      	ldreq	r1, [r3, #0]
 80144ee:	685b      	ldreq	r3, [r3, #4]
 80144f0:	1949      	addeq	r1, r1, r5
 80144f2:	6021      	streq	r1, [r4, #0]
 80144f4:	e7ed      	b.n	80144d2 <_free_r+0x22>
 80144f6:	461a      	mov	r2, r3
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	b10b      	cbz	r3, 8014500 <_free_r+0x50>
 80144fc:	42a3      	cmp	r3, r4
 80144fe:	d9fa      	bls.n	80144f6 <_free_r+0x46>
 8014500:	6811      	ldr	r1, [r2, #0]
 8014502:	1855      	adds	r5, r2, r1
 8014504:	42a5      	cmp	r5, r4
 8014506:	d10b      	bne.n	8014520 <_free_r+0x70>
 8014508:	6824      	ldr	r4, [r4, #0]
 801450a:	4421      	add	r1, r4
 801450c:	1854      	adds	r4, r2, r1
 801450e:	42a3      	cmp	r3, r4
 8014510:	6011      	str	r1, [r2, #0]
 8014512:	d1e0      	bne.n	80144d6 <_free_r+0x26>
 8014514:	681c      	ldr	r4, [r3, #0]
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	6053      	str	r3, [r2, #4]
 801451a:	4421      	add	r1, r4
 801451c:	6011      	str	r1, [r2, #0]
 801451e:	e7da      	b.n	80144d6 <_free_r+0x26>
 8014520:	d902      	bls.n	8014528 <_free_r+0x78>
 8014522:	230c      	movs	r3, #12
 8014524:	6003      	str	r3, [r0, #0]
 8014526:	e7d6      	b.n	80144d6 <_free_r+0x26>
 8014528:	6825      	ldr	r5, [r4, #0]
 801452a:	1961      	adds	r1, r4, r5
 801452c:	428b      	cmp	r3, r1
 801452e:	bf04      	itt	eq
 8014530:	6819      	ldreq	r1, [r3, #0]
 8014532:	685b      	ldreq	r3, [r3, #4]
 8014534:	6063      	str	r3, [r4, #4]
 8014536:	bf04      	itt	eq
 8014538:	1949      	addeq	r1, r1, r5
 801453a:	6021      	streq	r1, [r4, #0]
 801453c:	6054      	str	r4, [r2, #4]
 801453e:	e7ca      	b.n	80144d6 <_free_r+0x26>
 8014540:	b003      	add	sp, #12
 8014542:	bd30      	pop	{r4, r5, pc}
 8014544:	20004964 	.word	0x20004964

08014548 <sbrk_aligned>:
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	4e0e      	ldr	r6, [pc, #56]	; (8014584 <sbrk_aligned+0x3c>)
 801454c:	460c      	mov	r4, r1
 801454e:	6831      	ldr	r1, [r6, #0]
 8014550:	4605      	mov	r5, r0
 8014552:	b911      	cbnz	r1, 801455a <sbrk_aligned+0x12>
 8014554:	f000 fd28 	bl	8014fa8 <_sbrk_r>
 8014558:	6030      	str	r0, [r6, #0]
 801455a:	4621      	mov	r1, r4
 801455c:	4628      	mov	r0, r5
 801455e:	f000 fd23 	bl	8014fa8 <_sbrk_r>
 8014562:	1c43      	adds	r3, r0, #1
 8014564:	d00a      	beq.n	801457c <sbrk_aligned+0x34>
 8014566:	1cc4      	adds	r4, r0, #3
 8014568:	f024 0403 	bic.w	r4, r4, #3
 801456c:	42a0      	cmp	r0, r4
 801456e:	d007      	beq.n	8014580 <sbrk_aligned+0x38>
 8014570:	1a21      	subs	r1, r4, r0
 8014572:	4628      	mov	r0, r5
 8014574:	f000 fd18 	bl	8014fa8 <_sbrk_r>
 8014578:	3001      	adds	r0, #1
 801457a:	d101      	bne.n	8014580 <sbrk_aligned+0x38>
 801457c:	f04f 34ff 	mov.w	r4, #4294967295
 8014580:	4620      	mov	r0, r4
 8014582:	bd70      	pop	{r4, r5, r6, pc}
 8014584:	20004968 	.word	0x20004968

08014588 <_malloc_r>:
 8014588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801458c:	1ccd      	adds	r5, r1, #3
 801458e:	f025 0503 	bic.w	r5, r5, #3
 8014592:	3508      	adds	r5, #8
 8014594:	2d0c      	cmp	r5, #12
 8014596:	bf38      	it	cc
 8014598:	250c      	movcc	r5, #12
 801459a:	2d00      	cmp	r5, #0
 801459c:	4607      	mov	r7, r0
 801459e:	db01      	blt.n	80145a4 <_malloc_r+0x1c>
 80145a0:	42a9      	cmp	r1, r5
 80145a2:	d905      	bls.n	80145b0 <_malloc_r+0x28>
 80145a4:	230c      	movs	r3, #12
 80145a6:	603b      	str	r3, [r7, #0]
 80145a8:	2600      	movs	r6, #0
 80145aa:	4630      	mov	r0, r6
 80145ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b0:	4e2e      	ldr	r6, [pc, #184]	; (801466c <_malloc_r+0xe4>)
 80145b2:	f001 f815 	bl	80155e0 <__malloc_lock>
 80145b6:	6833      	ldr	r3, [r6, #0]
 80145b8:	461c      	mov	r4, r3
 80145ba:	bb34      	cbnz	r4, 801460a <_malloc_r+0x82>
 80145bc:	4629      	mov	r1, r5
 80145be:	4638      	mov	r0, r7
 80145c0:	f7ff ffc2 	bl	8014548 <sbrk_aligned>
 80145c4:	1c43      	adds	r3, r0, #1
 80145c6:	4604      	mov	r4, r0
 80145c8:	d14d      	bne.n	8014666 <_malloc_r+0xde>
 80145ca:	6834      	ldr	r4, [r6, #0]
 80145cc:	4626      	mov	r6, r4
 80145ce:	2e00      	cmp	r6, #0
 80145d0:	d140      	bne.n	8014654 <_malloc_r+0xcc>
 80145d2:	6823      	ldr	r3, [r4, #0]
 80145d4:	4631      	mov	r1, r6
 80145d6:	4638      	mov	r0, r7
 80145d8:	eb04 0803 	add.w	r8, r4, r3
 80145dc:	f000 fce4 	bl	8014fa8 <_sbrk_r>
 80145e0:	4580      	cmp	r8, r0
 80145e2:	d13a      	bne.n	801465a <_malloc_r+0xd2>
 80145e4:	6821      	ldr	r1, [r4, #0]
 80145e6:	3503      	adds	r5, #3
 80145e8:	1a6d      	subs	r5, r5, r1
 80145ea:	f025 0503 	bic.w	r5, r5, #3
 80145ee:	3508      	adds	r5, #8
 80145f0:	2d0c      	cmp	r5, #12
 80145f2:	bf38      	it	cc
 80145f4:	250c      	movcc	r5, #12
 80145f6:	4629      	mov	r1, r5
 80145f8:	4638      	mov	r0, r7
 80145fa:	f7ff ffa5 	bl	8014548 <sbrk_aligned>
 80145fe:	3001      	adds	r0, #1
 8014600:	d02b      	beq.n	801465a <_malloc_r+0xd2>
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	442b      	add	r3, r5
 8014606:	6023      	str	r3, [r4, #0]
 8014608:	e00e      	b.n	8014628 <_malloc_r+0xa0>
 801460a:	6822      	ldr	r2, [r4, #0]
 801460c:	1b52      	subs	r2, r2, r5
 801460e:	d41e      	bmi.n	801464e <_malloc_r+0xc6>
 8014610:	2a0b      	cmp	r2, #11
 8014612:	d916      	bls.n	8014642 <_malloc_r+0xba>
 8014614:	1961      	adds	r1, r4, r5
 8014616:	42a3      	cmp	r3, r4
 8014618:	6025      	str	r5, [r4, #0]
 801461a:	bf18      	it	ne
 801461c:	6059      	strne	r1, [r3, #4]
 801461e:	6863      	ldr	r3, [r4, #4]
 8014620:	bf08      	it	eq
 8014622:	6031      	streq	r1, [r6, #0]
 8014624:	5162      	str	r2, [r4, r5]
 8014626:	604b      	str	r3, [r1, #4]
 8014628:	4638      	mov	r0, r7
 801462a:	f104 060b 	add.w	r6, r4, #11
 801462e:	f000 ffdd 	bl	80155ec <__malloc_unlock>
 8014632:	f026 0607 	bic.w	r6, r6, #7
 8014636:	1d23      	adds	r3, r4, #4
 8014638:	1af2      	subs	r2, r6, r3
 801463a:	d0b6      	beq.n	80145aa <_malloc_r+0x22>
 801463c:	1b9b      	subs	r3, r3, r6
 801463e:	50a3      	str	r3, [r4, r2]
 8014640:	e7b3      	b.n	80145aa <_malloc_r+0x22>
 8014642:	6862      	ldr	r2, [r4, #4]
 8014644:	42a3      	cmp	r3, r4
 8014646:	bf0c      	ite	eq
 8014648:	6032      	streq	r2, [r6, #0]
 801464a:	605a      	strne	r2, [r3, #4]
 801464c:	e7ec      	b.n	8014628 <_malloc_r+0xa0>
 801464e:	4623      	mov	r3, r4
 8014650:	6864      	ldr	r4, [r4, #4]
 8014652:	e7b2      	b.n	80145ba <_malloc_r+0x32>
 8014654:	4634      	mov	r4, r6
 8014656:	6876      	ldr	r6, [r6, #4]
 8014658:	e7b9      	b.n	80145ce <_malloc_r+0x46>
 801465a:	230c      	movs	r3, #12
 801465c:	603b      	str	r3, [r7, #0]
 801465e:	4638      	mov	r0, r7
 8014660:	f000 ffc4 	bl	80155ec <__malloc_unlock>
 8014664:	e7a1      	b.n	80145aa <_malloc_r+0x22>
 8014666:	6025      	str	r5, [r4, #0]
 8014668:	e7de      	b.n	8014628 <_malloc_r+0xa0>
 801466a:	bf00      	nop
 801466c:	20004964 	.word	0x20004964

08014670 <__ssputs_r>:
 8014670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014674:	688e      	ldr	r6, [r1, #8]
 8014676:	429e      	cmp	r6, r3
 8014678:	4682      	mov	sl, r0
 801467a:	460c      	mov	r4, r1
 801467c:	4690      	mov	r8, r2
 801467e:	461f      	mov	r7, r3
 8014680:	d838      	bhi.n	80146f4 <__ssputs_r+0x84>
 8014682:	898a      	ldrh	r2, [r1, #12]
 8014684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014688:	d032      	beq.n	80146f0 <__ssputs_r+0x80>
 801468a:	6825      	ldr	r5, [r4, #0]
 801468c:	6909      	ldr	r1, [r1, #16]
 801468e:	eba5 0901 	sub.w	r9, r5, r1
 8014692:	6965      	ldr	r5, [r4, #20]
 8014694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801469c:	3301      	adds	r3, #1
 801469e:	444b      	add	r3, r9
 80146a0:	106d      	asrs	r5, r5, #1
 80146a2:	429d      	cmp	r5, r3
 80146a4:	bf38      	it	cc
 80146a6:	461d      	movcc	r5, r3
 80146a8:	0553      	lsls	r3, r2, #21
 80146aa:	d531      	bpl.n	8014710 <__ssputs_r+0xa0>
 80146ac:	4629      	mov	r1, r5
 80146ae:	f7ff ff6b 	bl	8014588 <_malloc_r>
 80146b2:	4606      	mov	r6, r0
 80146b4:	b950      	cbnz	r0, 80146cc <__ssputs_r+0x5c>
 80146b6:	230c      	movs	r3, #12
 80146b8:	f8ca 3000 	str.w	r3, [sl]
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146c2:	81a3      	strh	r3, [r4, #12]
 80146c4:	f04f 30ff 	mov.w	r0, #4294967295
 80146c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146cc:	6921      	ldr	r1, [r4, #16]
 80146ce:	464a      	mov	r2, r9
 80146d0:	f7ff fa08 	bl	8013ae4 <memcpy>
 80146d4:	89a3      	ldrh	r3, [r4, #12]
 80146d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146de:	81a3      	strh	r3, [r4, #12]
 80146e0:	6126      	str	r6, [r4, #16]
 80146e2:	6165      	str	r5, [r4, #20]
 80146e4:	444e      	add	r6, r9
 80146e6:	eba5 0509 	sub.w	r5, r5, r9
 80146ea:	6026      	str	r6, [r4, #0]
 80146ec:	60a5      	str	r5, [r4, #8]
 80146ee:	463e      	mov	r6, r7
 80146f0:	42be      	cmp	r6, r7
 80146f2:	d900      	bls.n	80146f6 <__ssputs_r+0x86>
 80146f4:	463e      	mov	r6, r7
 80146f6:	6820      	ldr	r0, [r4, #0]
 80146f8:	4632      	mov	r2, r6
 80146fa:	4641      	mov	r1, r8
 80146fc:	f000 ff56 	bl	80155ac <memmove>
 8014700:	68a3      	ldr	r3, [r4, #8]
 8014702:	1b9b      	subs	r3, r3, r6
 8014704:	60a3      	str	r3, [r4, #8]
 8014706:	6823      	ldr	r3, [r4, #0]
 8014708:	4433      	add	r3, r6
 801470a:	6023      	str	r3, [r4, #0]
 801470c:	2000      	movs	r0, #0
 801470e:	e7db      	b.n	80146c8 <__ssputs_r+0x58>
 8014710:	462a      	mov	r2, r5
 8014712:	f000 ff71 	bl	80155f8 <_realloc_r>
 8014716:	4606      	mov	r6, r0
 8014718:	2800      	cmp	r0, #0
 801471a:	d1e1      	bne.n	80146e0 <__ssputs_r+0x70>
 801471c:	6921      	ldr	r1, [r4, #16]
 801471e:	4650      	mov	r0, sl
 8014720:	f7ff fec6 	bl	80144b0 <_free_r>
 8014724:	e7c7      	b.n	80146b6 <__ssputs_r+0x46>
	...

08014728 <_svfiprintf_r>:
 8014728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472c:	4698      	mov	r8, r3
 801472e:	898b      	ldrh	r3, [r1, #12]
 8014730:	061b      	lsls	r3, r3, #24
 8014732:	b09d      	sub	sp, #116	; 0x74
 8014734:	4607      	mov	r7, r0
 8014736:	460d      	mov	r5, r1
 8014738:	4614      	mov	r4, r2
 801473a:	d50e      	bpl.n	801475a <_svfiprintf_r+0x32>
 801473c:	690b      	ldr	r3, [r1, #16]
 801473e:	b963      	cbnz	r3, 801475a <_svfiprintf_r+0x32>
 8014740:	2140      	movs	r1, #64	; 0x40
 8014742:	f7ff ff21 	bl	8014588 <_malloc_r>
 8014746:	6028      	str	r0, [r5, #0]
 8014748:	6128      	str	r0, [r5, #16]
 801474a:	b920      	cbnz	r0, 8014756 <_svfiprintf_r+0x2e>
 801474c:	230c      	movs	r3, #12
 801474e:	603b      	str	r3, [r7, #0]
 8014750:	f04f 30ff 	mov.w	r0, #4294967295
 8014754:	e0d1      	b.n	80148fa <_svfiprintf_r+0x1d2>
 8014756:	2340      	movs	r3, #64	; 0x40
 8014758:	616b      	str	r3, [r5, #20]
 801475a:	2300      	movs	r3, #0
 801475c:	9309      	str	r3, [sp, #36]	; 0x24
 801475e:	2320      	movs	r3, #32
 8014760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014764:	f8cd 800c 	str.w	r8, [sp, #12]
 8014768:	2330      	movs	r3, #48	; 0x30
 801476a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014914 <_svfiprintf_r+0x1ec>
 801476e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014772:	f04f 0901 	mov.w	r9, #1
 8014776:	4623      	mov	r3, r4
 8014778:	469a      	mov	sl, r3
 801477a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801477e:	b10a      	cbz	r2, 8014784 <_svfiprintf_r+0x5c>
 8014780:	2a25      	cmp	r2, #37	; 0x25
 8014782:	d1f9      	bne.n	8014778 <_svfiprintf_r+0x50>
 8014784:	ebba 0b04 	subs.w	fp, sl, r4
 8014788:	d00b      	beq.n	80147a2 <_svfiprintf_r+0x7a>
 801478a:	465b      	mov	r3, fp
 801478c:	4622      	mov	r2, r4
 801478e:	4629      	mov	r1, r5
 8014790:	4638      	mov	r0, r7
 8014792:	f7ff ff6d 	bl	8014670 <__ssputs_r>
 8014796:	3001      	adds	r0, #1
 8014798:	f000 80aa 	beq.w	80148f0 <_svfiprintf_r+0x1c8>
 801479c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801479e:	445a      	add	r2, fp
 80147a0:	9209      	str	r2, [sp, #36]	; 0x24
 80147a2:	f89a 3000 	ldrb.w	r3, [sl]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f000 80a2 	beq.w	80148f0 <_svfiprintf_r+0x1c8>
 80147ac:	2300      	movs	r3, #0
 80147ae:	f04f 32ff 	mov.w	r2, #4294967295
 80147b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147b6:	f10a 0a01 	add.w	sl, sl, #1
 80147ba:	9304      	str	r3, [sp, #16]
 80147bc:	9307      	str	r3, [sp, #28]
 80147be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147c2:	931a      	str	r3, [sp, #104]	; 0x68
 80147c4:	4654      	mov	r4, sl
 80147c6:	2205      	movs	r2, #5
 80147c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147cc:	4851      	ldr	r0, [pc, #324]	; (8014914 <_svfiprintf_r+0x1ec>)
 80147ce:	f7eb fd27 	bl	8000220 <memchr>
 80147d2:	9a04      	ldr	r2, [sp, #16]
 80147d4:	b9d8      	cbnz	r0, 801480e <_svfiprintf_r+0xe6>
 80147d6:	06d0      	lsls	r0, r2, #27
 80147d8:	bf44      	itt	mi
 80147da:	2320      	movmi	r3, #32
 80147dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147e0:	0711      	lsls	r1, r2, #28
 80147e2:	bf44      	itt	mi
 80147e4:	232b      	movmi	r3, #43	; 0x2b
 80147e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147ea:	f89a 3000 	ldrb.w	r3, [sl]
 80147ee:	2b2a      	cmp	r3, #42	; 0x2a
 80147f0:	d015      	beq.n	801481e <_svfiprintf_r+0xf6>
 80147f2:	9a07      	ldr	r2, [sp, #28]
 80147f4:	4654      	mov	r4, sl
 80147f6:	2000      	movs	r0, #0
 80147f8:	f04f 0c0a 	mov.w	ip, #10
 80147fc:	4621      	mov	r1, r4
 80147fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014802:	3b30      	subs	r3, #48	; 0x30
 8014804:	2b09      	cmp	r3, #9
 8014806:	d94e      	bls.n	80148a6 <_svfiprintf_r+0x17e>
 8014808:	b1b0      	cbz	r0, 8014838 <_svfiprintf_r+0x110>
 801480a:	9207      	str	r2, [sp, #28]
 801480c:	e014      	b.n	8014838 <_svfiprintf_r+0x110>
 801480e:	eba0 0308 	sub.w	r3, r0, r8
 8014812:	fa09 f303 	lsl.w	r3, r9, r3
 8014816:	4313      	orrs	r3, r2
 8014818:	9304      	str	r3, [sp, #16]
 801481a:	46a2      	mov	sl, r4
 801481c:	e7d2      	b.n	80147c4 <_svfiprintf_r+0x9c>
 801481e:	9b03      	ldr	r3, [sp, #12]
 8014820:	1d19      	adds	r1, r3, #4
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	9103      	str	r1, [sp, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	bfbb      	ittet	lt
 801482a:	425b      	neglt	r3, r3
 801482c:	f042 0202 	orrlt.w	r2, r2, #2
 8014830:	9307      	strge	r3, [sp, #28]
 8014832:	9307      	strlt	r3, [sp, #28]
 8014834:	bfb8      	it	lt
 8014836:	9204      	strlt	r2, [sp, #16]
 8014838:	7823      	ldrb	r3, [r4, #0]
 801483a:	2b2e      	cmp	r3, #46	; 0x2e
 801483c:	d10c      	bne.n	8014858 <_svfiprintf_r+0x130>
 801483e:	7863      	ldrb	r3, [r4, #1]
 8014840:	2b2a      	cmp	r3, #42	; 0x2a
 8014842:	d135      	bne.n	80148b0 <_svfiprintf_r+0x188>
 8014844:	9b03      	ldr	r3, [sp, #12]
 8014846:	1d1a      	adds	r2, r3, #4
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	9203      	str	r2, [sp, #12]
 801484c:	2b00      	cmp	r3, #0
 801484e:	bfb8      	it	lt
 8014850:	f04f 33ff 	movlt.w	r3, #4294967295
 8014854:	3402      	adds	r4, #2
 8014856:	9305      	str	r3, [sp, #20]
 8014858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014924 <_svfiprintf_r+0x1fc>
 801485c:	7821      	ldrb	r1, [r4, #0]
 801485e:	2203      	movs	r2, #3
 8014860:	4650      	mov	r0, sl
 8014862:	f7eb fcdd 	bl	8000220 <memchr>
 8014866:	b140      	cbz	r0, 801487a <_svfiprintf_r+0x152>
 8014868:	2340      	movs	r3, #64	; 0x40
 801486a:	eba0 000a 	sub.w	r0, r0, sl
 801486e:	fa03 f000 	lsl.w	r0, r3, r0
 8014872:	9b04      	ldr	r3, [sp, #16]
 8014874:	4303      	orrs	r3, r0
 8014876:	3401      	adds	r4, #1
 8014878:	9304      	str	r3, [sp, #16]
 801487a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801487e:	4826      	ldr	r0, [pc, #152]	; (8014918 <_svfiprintf_r+0x1f0>)
 8014880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014884:	2206      	movs	r2, #6
 8014886:	f7eb fccb 	bl	8000220 <memchr>
 801488a:	2800      	cmp	r0, #0
 801488c:	d038      	beq.n	8014900 <_svfiprintf_r+0x1d8>
 801488e:	4b23      	ldr	r3, [pc, #140]	; (801491c <_svfiprintf_r+0x1f4>)
 8014890:	bb1b      	cbnz	r3, 80148da <_svfiprintf_r+0x1b2>
 8014892:	9b03      	ldr	r3, [sp, #12]
 8014894:	3307      	adds	r3, #7
 8014896:	f023 0307 	bic.w	r3, r3, #7
 801489a:	3308      	adds	r3, #8
 801489c:	9303      	str	r3, [sp, #12]
 801489e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a0:	4433      	add	r3, r6
 80148a2:	9309      	str	r3, [sp, #36]	; 0x24
 80148a4:	e767      	b.n	8014776 <_svfiprintf_r+0x4e>
 80148a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80148aa:	460c      	mov	r4, r1
 80148ac:	2001      	movs	r0, #1
 80148ae:	e7a5      	b.n	80147fc <_svfiprintf_r+0xd4>
 80148b0:	2300      	movs	r3, #0
 80148b2:	3401      	adds	r4, #1
 80148b4:	9305      	str	r3, [sp, #20]
 80148b6:	4619      	mov	r1, r3
 80148b8:	f04f 0c0a 	mov.w	ip, #10
 80148bc:	4620      	mov	r0, r4
 80148be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148c2:	3a30      	subs	r2, #48	; 0x30
 80148c4:	2a09      	cmp	r2, #9
 80148c6:	d903      	bls.n	80148d0 <_svfiprintf_r+0x1a8>
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d0c5      	beq.n	8014858 <_svfiprintf_r+0x130>
 80148cc:	9105      	str	r1, [sp, #20]
 80148ce:	e7c3      	b.n	8014858 <_svfiprintf_r+0x130>
 80148d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80148d4:	4604      	mov	r4, r0
 80148d6:	2301      	movs	r3, #1
 80148d8:	e7f0      	b.n	80148bc <_svfiprintf_r+0x194>
 80148da:	ab03      	add	r3, sp, #12
 80148dc:	9300      	str	r3, [sp, #0]
 80148de:	462a      	mov	r2, r5
 80148e0:	4b0f      	ldr	r3, [pc, #60]	; (8014920 <_svfiprintf_r+0x1f8>)
 80148e2:	a904      	add	r1, sp, #16
 80148e4:	4638      	mov	r0, r7
 80148e6:	f7fc f981 	bl	8010bec <_printf_float>
 80148ea:	1c42      	adds	r2, r0, #1
 80148ec:	4606      	mov	r6, r0
 80148ee:	d1d6      	bne.n	801489e <_svfiprintf_r+0x176>
 80148f0:	89ab      	ldrh	r3, [r5, #12]
 80148f2:	065b      	lsls	r3, r3, #25
 80148f4:	f53f af2c 	bmi.w	8014750 <_svfiprintf_r+0x28>
 80148f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148fa:	b01d      	add	sp, #116	; 0x74
 80148fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014900:	ab03      	add	r3, sp, #12
 8014902:	9300      	str	r3, [sp, #0]
 8014904:	462a      	mov	r2, r5
 8014906:	4b06      	ldr	r3, [pc, #24]	; (8014920 <_svfiprintf_r+0x1f8>)
 8014908:	a904      	add	r1, sp, #16
 801490a:	4638      	mov	r0, r7
 801490c:	f7fc fc12 	bl	8011134 <_printf_i>
 8014910:	e7eb      	b.n	80148ea <_svfiprintf_r+0x1c2>
 8014912:	bf00      	nop
 8014914:	080185c4 	.word	0x080185c4
 8014918:	080185ce 	.word	0x080185ce
 801491c:	08010bed 	.word	0x08010bed
 8014920:	08014671 	.word	0x08014671
 8014924:	080185ca 	.word	0x080185ca

08014928 <_sungetc_r>:
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	1c4b      	adds	r3, r1, #1
 801492c:	4614      	mov	r4, r2
 801492e:	d103      	bne.n	8014938 <_sungetc_r+0x10>
 8014930:	f04f 35ff 	mov.w	r5, #4294967295
 8014934:	4628      	mov	r0, r5
 8014936:	bd38      	pop	{r3, r4, r5, pc}
 8014938:	8993      	ldrh	r3, [r2, #12]
 801493a:	f023 0320 	bic.w	r3, r3, #32
 801493e:	8193      	strh	r3, [r2, #12]
 8014940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014942:	6852      	ldr	r2, [r2, #4]
 8014944:	b2cd      	uxtb	r5, r1
 8014946:	b18b      	cbz	r3, 801496c <_sungetc_r+0x44>
 8014948:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801494a:	4293      	cmp	r3, r2
 801494c:	dd08      	ble.n	8014960 <_sungetc_r+0x38>
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	1e5a      	subs	r2, r3, #1
 8014952:	6022      	str	r2, [r4, #0]
 8014954:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014958:	6863      	ldr	r3, [r4, #4]
 801495a:	3301      	adds	r3, #1
 801495c:	6063      	str	r3, [r4, #4]
 801495e:	e7e9      	b.n	8014934 <_sungetc_r+0xc>
 8014960:	4621      	mov	r1, r4
 8014962:	f000 fbf1 	bl	8015148 <__submore>
 8014966:	2800      	cmp	r0, #0
 8014968:	d0f1      	beq.n	801494e <_sungetc_r+0x26>
 801496a:	e7e1      	b.n	8014930 <_sungetc_r+0x8>
 801496c:	6921      	ldr	r1, [r4, #16]
 801496e:	6823      	ldr	r3, [r4, #0]
 8014970:	b151      	cbz	r1, 8014988 <_sungetc_r+0x60>
 8014972:	4299      	cmp	r1, r3
 8014974:	d208      	bcs.n	8014988 <_sungetc_r+0x60>
 8014976:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801497a:	42a9      	cmp	r1, r5
 801497c:	d104      	bne.n	8014988 <_sungetc_r+0x60>
 801497e:	3b01      	subs	r3, #1
 8014980:	3201      	adds	r2, #1
 8014982:	6023      	str	r3, [r4, #0]
 8014984:	6062      	str	r2, [r4, #4]
 8014986:	e7d5      	b.n	8014934 <_sungetc_r+0xc>
 8014988:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801498c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014990:	6363      	str	r3, [r4, #52]	; 0x34
 8014992:	2303      	movs	r3, #3
 8014994:	63a3      	str	r3, [r4, #56]	; 0x38
 8014996:	4623      	mov	r3, r4
 8014998:	f803 5f46 	strb.w	r5, [r3, #70]!
 801499c:	6023      	str	r3, [r4, #0]
 801499e:	2301      	movs	r3, #1
 80149a0:	e7dc      	b.n	801495c <_sungetc_r+0x34>

080149a2 <__ssrefill_r>:
 80149a2:	b510      	push	{r4, lr}
 80149a4:	460c      	mov	r4, r1
 80149a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80149a8:	b169      	cbz	r1, 80149c6 <__ssrefill_r+0x24>
 80149aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149ae:	4299      	cmp	r1, r3
 80149b0:	d001      	beq.n	80149b6 <__ssrefill_r+0x14>
 80149b2:	f7ff fd7d 	bl	80144b0 <_free_r>
 80149b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149b8:	6063      	str	r3, [r4, #4]
 80149ba:	2000      	movs	r0, #0
 80149bc:	6360      	str	r0, [r4, #52]	; 0x34
 80149be:	b113      	cbz	r3, 80149c6 <__ssrefill_r+0x24>
 80149c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	bd10      	pop	{r4, pc}
 80149c6:	6923      	ldr	r3, [r4, #16]
 80149c8:	6023      	str	r3, [r4, #0]
 80149ca:	2300      	movs	r3, #0
 80149cc:	6063      	str	r3, [r4, #4]
 80149ce:	89a3      	ldrh	r3, [r4, #12]
 80149d0:	f043 0320 	orr.w	r3, r3, #32
 80149d4:	81a3      	strh	r3, [r4, #12]
 80149d6:	f04f 30ff 	mov.w	r0, #4294967295
 80149da:	e7f3      	b.n	80149c4 <__ssrefill_r+0x22>

080149dc <__ssvfiscanf_r>:
 80149dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e0:	460c      	mov	r4, r1
 80149e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80149e6:	2100      	movs	r1, #0
 80149e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80149ec:	49a6      	ldr	r1, [pc, #664]	; (8014c88 <__ssvfiscanf_r+0x2ac>)
 80149ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80149f0:	f10d 0804 	add.w	r8, sp, #4
 80149f4:	49a5      	ldr	r1, [pc, #660]	; (8014c8c <__ssvfiscanf_r+0x2b0>)
 80149f6:	4fa6      	ldr	r7, [pc, #664]	; (8014c90 <__ssvfiscanf_r+0x2b4>)
 80149f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014c94 <__ssvfiscanf_r+0x2b8>
 80149fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014a00:	4606      	mov	r6, r0
 8014a02:	91a1      	str	r1, [sp, #644]	; 0x284
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	7813      	ldrb	r3, [r2, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 815a 	beq.w	8014cc2 <__ssvfiscanf_r+0x2e6>
 8014a0e:	5dd9      	ldrb	r1, [r3, r7]
 8014a10:	f011 0108 	ands.w	r1, r1, #8
 8014a14:	f102 0501 	add.w	r5, r2, #1
 8014a18:	d019      	beq.n	8014a4e <__ssvfiscanf_r+0x72>
 8014a1a:	6863      	ldr	r3, [r4, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	dd0f      	ble.n	8014a40 <__ssvfiscanf_r+0x64>
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	781a      	ldrb	r2, [r3, #0]
 8014a24:	5cba      	ldrb	r2, [r7, r2]
 8014a26:	0712      	lsls	r2, r2, #28
 8014a28:	d401      	bmi.n	8014a2e <__ssvfiscanf_r+0x52>
 8014a2a:	462a      	mov	r2, r5
 8014a2c:	e7eb      	b.n	8014a06 <__ssvfiscanf_r+0x2a>
 8014a2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014a30:	3201      	adds	r2, #1
 8014a32:	9245      	str	r2, [sp, #276]	; 0x114
 8014a34:	6862      	ldr	r2, [r4, #4]
 8014a36:	3301      	adds	r3, #1
 8014a38:	3a01      	subs	r2, #1
 8014a3a:	6062      	str	r2, [r4, #4]
 8014a3c:	6023      	str	r3, [r4, #0]
 8014a3e:	e7ec      	b.n	8014a1a <__ssvfiscanf_r+0x3e>
 8014a40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014a42:	4621      	mov	r1, r4
 8014a44:	4630      	mov	r0, r6
 8014a46:	4798      	blx	r3
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d0e9      	beq.n	8014a20 <__ssvfiscanf_r+0x44>
 8014a4c:	e7ed      	b.n	8014a2a <__ssvfiscanf_r+0x4e>
 8014a4e:	2b25      	cmp	r3, #37	; 0x25
 8014a50:	d012      	beq.n	8014a78 <__ssvfiscanf_r+0x9c>
 8014a52:	469a      	mov	sl, r3
 8014a54:	6863      	ldr	r3, [r4, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f340 8091 	ble.w	8014b7e <__ssvfiscanf_r+0x1a2>
 8014a5c:	6822      	ldr	r2, [r4, #0]
 8014a5e:	7813      	ldrb	r3, [r2, #0]
 8014a60:	4553      	cmp	r3, sl
 8014a62:	f040 812e 	bne.w	8014cc2 <__ssvfiscanf_r+0x2e6>
 8014a66:	6863      	ldr	r3, [r4, #4]
 8014a68:	3b01      	subs	r3, #1
 8014a6a:	6063      	str	r3, [r4, #4]
 8014a6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014a6e:	3201      	adds	r2, #1
 8014a70:	3301      	adds	r3, #1
 8014a72:	6022      	str	r2, [r4, #0]
 8014a74:	9345      	str	r3, [sp, #276]	; 0x114
 8014a76:	e7d8      	b.n	8014a2a <__ssvfiscanf_r+0x4e>
 8014a78:	9141      	str	r1, [sp, #260]	; 0x104
 8014a7a:	9143      	str	r1, [sp, #268]	; 0x10c
 8014a7c:	7853      	ldrb	r3, [r2, #1]
 8014a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a80:	bf02      	ittt	eq
 8014a82:	2310      	moveq	r3, #16
 8014a84:	1c95      	addeq	r5, r2, #2
 8014a86:	9341      	streq	r3, [sp, #260]	; 0x104
 8014a88:	220a      	movs	r2, #10
 8014a8a:	46aa      	mov	sl, r5
 8014a8c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014a90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014a94:	2b09      	cmp	r3, #9
 8014a96:	d91d      	bls.n	8014ad4 <__ssvfiscanf_r+0xf8>
 8014a98:	487e      	ldr	r0, [pc, #504]	; (8014c94 <__ssvfiscanf_r+0x2b8>)
 8014a9a:	2203      	movs	r2, #3
 8014a9c:	f7eb fbc0 	bl	8000220 <memchr>
 8014aa0:	b140      	cbz	r0, 8014ab4 <__ssvfiscanf_r+0xd8>
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	eba0 0009 	sub.w	r0, r0, r9
 8014aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8014aac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014aae:	4318      	orrs	r0, r3
 8014ab0:	9041      	str	r0, [sp, #260]	; 0x104
 8014ab2:	4655      	mov	r5, sl
 8014ab4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014ab8:	2b78      	cmp	r3, #120	; 0x78
 8014aba:	d806      	bhi.n	8014aca <__ssvfiscanf_r+0xee>
 8014abc:	2b57      	cmp	r3, #87	; 0x57
 8014abe:	d810      	bhi.n	8014ae2 <__ssvfiscanf_r+0x106>
 8014ac0:	2b25      	cmp	r3, #37	; 0x25
 8014ac2:	d0c6      	beq.n	8014a52 <__ssvfiscanf_r+0x76>
 8014ac4:	d856      	bhi.n	8014b74 <__ssvfiscanf_r+0x198>
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d064      	beq.n	8014b94 <__ssvfiscanf_r+0x1b8>
 8014aca:	2303      	movs	r3, #3
 8014acc:	9347      	str	r3, [sp, #284]	; 0x11c
 8014ace:	230a      	movs	r3, #10
 8014ad0:	9342      	str	r3, [sp, #264]	; 0x108
 8014ad2:	e071      	b.n	8014bb8 <__ssvfiscanf_r+0x1dc>
 8014ad4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014ad6:	fb02 1103 	mla	r1, r2, r3, r1
 8014ada:	3930      	subs	r1, #48	; 0x30
 8014adc:	9143      	str	r1, [sp, #268]	; 0x10c
 8014ade:	4655      	mov	r5, sl
 8014ae0:	e7d3      	b.n	8014a8a <__ssvfiscanf_r+0xae>
 8014ae2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014ae6:	2a20      	cmp	r2, #32
 8014ae8:	d8ef      	bhi.n	8014aca <__ssvfiscanf_r+0xee>
 8014aea:	a101      	add	r1, pc, #4	; (adr r1, 8014af0 <__ssvfiscanf_r+0x114>)
 8014aec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014af0:	08014ba3 	.word	0x08014ba3
 8014af4:	08014acb 	.word	0x08014acb
 8014af8:	08014acb 	.word	0x08014acb
 8014afc:	08014c01 	.word	0x08014c01
 8014b00:	08014acb 	.word	0x08014acb
 8014b04:	08014acb 	.word	0x08014acb
 8014b08:	08014acb 	.word	0x08014acb
 8014b0c:	08014acb 	.word	0x08014acb
 8014b10:	08014acb 	.word	0x08014acb
 8014b14:	08014acb 	.word	0x08014acb
 8014b18:	08014acb 	.word	0x08014acb
 8014b1c:	08014c17 	.word	0x08014c17
 8014b20:	08014bed 	.word	0x08014bed
 8014b24:	08014b7b 	.word	0x08014b7b
 8014b28:	08014b7b 	.word	0x08014b7b
 8014b2c:	08014b7b 	.word	0x08014b7b
 8014b30:	08014acb 	.word	0x08014acb
 8014b34:	08014bf1 	.word	0x08014bf1
 8014b38:	08014acb 	.word	0x08014acb
 8014b3c:	08014acb 	.word	0x08014acb
 8014b40:	08014acb 	.word	0x08014acb
 8014b44:	08014acb 	.word	0x08014acb
 8014b48:	08014c27 	.word	0x08014c27
 8014b4c:	08014bf9 	.word	0x08014bf9
 8014b50:	08014b9b 	.word	0x08014b9b
 8014b54:	08014acb 	.word	0x08014acb
 8014b58:	08014acb 	.word	0x08014acb
 8014b5c:	08014c23 	.word	0x08014c23
 8014b60:	08014acb 	.word	0x08014acb
 8014b64:	08014bed 	.word	0x08014bed
 8014b68:	08014acb 	.word	0x08014acb
 8014b6c:	08014acb 	.word	0x08014acb
 8014b70:	08014ba3 	.word	0x08014ba3
 8014b74:	3b45      	subs	r3, #69	; 0x45
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d8a7      	bhi.n	8014aca <__ssvfiscanf_r+0xee>
 8014b7a:	2305      	movs	r3, #5
 8014b7c:	e01b      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014b7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014b80:	4621      	mov	r1, r4
 8014b82:	4630      	mov	r0, r6
 8014b84:	4798      	blx	r3
 8014b86:	2800      	cmp	r0, #0
 8014b88:	f43f af68 	beq.w	8014a5c <__ssvfiscanf_r+0x80>
 8014b8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	f040 808d 	bne.w	8014cae <__ssvfiscanf_r+0x2d2>
 8014b94:	f04f 30ff 	mov.w	r0, #4294967295
 8014b98:	e08f      	b.n	8014cba <__ssvfiscanf_r+0x2de>
 8014b9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014b9c:	f042 0220 	orr.w	r2, r2, #32
 8014ba0:	9241      	str	r2, [sp, #260]	; 0x104
 8014ba2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ba8:	9241      	str	r2, [sp, #260]	; 0x104
 8014baa:	2210      	movs	r2, #16
 8014bac:	2b6f      	cmp	r3, #111	; 0x6f
 8014bae:	9242      	str	r2, [sp, #264]	; 0x108
 8014bb0:	bf34      	ite	cc
 8014bb2:	2303      	movcc	r3, #3
 8014bb4:	2304      	movcs	r3, #4
 8014bb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8014bb8:	6863      	ldr	r3, [r4, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	dd42      	ble.n	8014c44 <__ssvfiscanf_r+0x268>
 8014bbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014bc0:	0659      	lsls	r1, r3, #25
 8014bc2:	d404      	bmi.n	8014bce <__ssvfiscanf_r+0x1f2>
 8014bc4:	6823      	ldr	r3, [r4, #0]
 8014bc6:	781a      	ldrb	r2, [r3, #0]
 8014bc8:	5cba      	ldrb	r2, [r7, r2]
 8014bca:	0712      	lsls	r2, r2, #28
 8014bcc:	d441      	bmi.n	8014c52 <__ssvfiscanf_r+0x276>
 8014bce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	dc50      	bgt.n	8014c76 <__ssvfiscanf_r+0x29a>
 8014bd4:	466b      	mov	r3, sp
 8014bd6:	4622      	mov	r2, r4
 8014bd8:	a941      	add	r1, sp, #260	; 0x104
 8014bda:	4630      	mov	r0, r6
 8014bdc:	f000 f876 	bl	8014ccc <_scanf_chars>
 8014be0:	2801      	cmp	r0, #1
 8014be2:	d06e      	beq.n	8014cc2 <__ssvfiscanf_r+0x2e6>
 8014be4:	2802      	cmp	r0, #2
 8014be6:	f47f af20 	bne.w	8014a2a <__ssvfiscanf_r+0x4e>
 8014bea:	e7cf      	b.n	8014b8c <__ssvfiscanf_r+0x1b0>
 8014bec:	220a      	movs	r2, #10
 8014bee:	e7dd      	b.n	8014bac <__ssvfiscanf_r+0x1d0>
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	9342      	str	r3, [sp, #264]	; 0x108
 8014bf4:	2303      	movs	r3, #3
 8014bf6:	e7de      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014bf8:	2308      	movs	r3, #8
 8014bfa:	9342      	str	r3, [sp, #264]	; 0x108
 8014bfc:	2304      	movs	r3, #4
 8014bfe:	e7da      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014c00:	4629      	mov	r1, r5
 8014c02:	4640      	mov	r0, r8
 8014c04:	f000 f9e0 	bl	8014fc8 <__sccl>
 8014c08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c0e:	9341      	str	r3, [sp, #260]	; 0x104
 8014c10:	4605      	mov	r5, r0
 8014c12:	2301      	movs	r3, #1
 8014c14:	e7cf      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014c16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c1c:	9341      	str	r3, [sp, #260]	; 0x104
 8014c1e:	2300      	movs	r3, #0
 8014c20:	e7c9      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014c22:	2302      	movs	r3, #2
 8014c24:	e7c7      	b.n	8014bb6 <__ssvfiscanf_r+0x1da>
 8014c26:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014c28:	06c3      	lsls	r3, r0, #27
 8014c2a:	f53f aefe 	bmi.w	8014a2a <__ssvfiscanf_r+0x4e>
 8014c2e:	9b00      	ldr	r3, [sp, #0]
 8014c30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014c32:	1d19      	adds	r1, r3, #4
 8014c34:	9100      	str	r1, [sp, #0]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	f010 0f01 	tst.w	r0, #1
 8014c3c:	bf14      	ite	ne
 8014c3e:	801a      	strhne	r2, [r3, #0]
 8014c40:	601a      	streq	r2, [r3, #0]
 8014c42:	e6f2      	b.n	8014a2a <__ssvfiscanf_r+0x4e>
 8014c44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014c46:	4621      	mov	r1, r4
 8014c48:	4630      	mov	r0, r6
 8014c4a:	4798      	blx	r3
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	d0b6      	beq.n	8014bbe <__ssvfiscanf_r+0x1e2>
 8014c50:	e79c      	b.n	8014b8c <__ssvfiscanf_r+0x1b0>
 8014c52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014c54:	3201      	adds	r2, #1
 8014c56:	9245      	str	r2, [sp, #276]	; 0x114
 8014c58:	6862      	ldr	r2, [r4, #4]
 8014c5a:	3a01      	subs	r2, #1
 8014c5c:	2a00      	cmp	r2, #0
 8014c5e:	6062      	str	r2, [r4, #4]
 8014c60:	dd02      	ble.n	8014c68 <__ssvfiscanf_r+0x28c>
 8014c62:	3301      	adds	r3, #1
 8014c64:	6023      	str	r3, [r4, #0]
 8014c66:	e7ad      	b.n	8014bc4 <__ssvfiscanf_r+0x1e8>
 8014c68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	4630      	mov	r0, r6
 8014c6e:	4798      	blx	r3
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d0a7      	beq.n	8014bc4 <__ssvfiscanf_r+0x1e8>
 8014c74:	e78a      	b.n	8014b8c <__ssvfiscanf_r+0x1b0>
 8014c76:	2b04      	cmp	r3, #4
 8014c78:	dc0e      	bgt.n	8014c98 <__ssvfiscanf_r+0x2bc>
 8014c7a:	466b      	mov	r3, sp
 8014c7c:	4622      	mov	r2, r4
 8014c7e:	a941      	add	r1, sp, #260	; 0x104
 8014c80:	4630      	mov	r0, r6
 8014c82:	f000 f87d 	bl	8014d80 <_scanf_i>
 8014c86:	e7ab      	b.n	8014be0 <__ssvfiscanf_r+0x204>
 8014c88:	08014929 	.word	0x08014929
 8014c8c:	080149a3 	.word	0x080149a3
 8014c90:	08018261 	.word	0x08018261
 8014c94:	080185ca 	.word	0x080185ca
 8014c98:	4b0b      	ldr	r3, [pc, #44]	; (8014cc8 <__ssvfiscanf_r+0x2ec>)
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f43f aec5 	beq.w	8014a2a <__ssvfiscanf_r+0x4e>
 8014ca0:	466b      	mov	r3, sp
 8014ca2:	4622      	mov	r2, r4
 8014ca4:	a941      	add	r1, sp, #260	; 0x104
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	f7fc fb6a 	bl	8011380 <_scanf_float>
 8014cac:	e798      	b.n	8014be0 <__ssvfiscanf_r+0x204>
 8014cae:	89a3      	ldrh	r3, [r4, #12]
 8014cb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014cb4:	bf18      	it	ne
 8014cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8014cba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8014cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014cc4:	e7f9      	b.n	8014cba <__ssvfiscanf_r+0x2de>
 8014cc6:	bf00      	nop
 8014cc8:	08011381 	.word	0x08011381

08014ccc <_scanf_chars>:
 8014ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cd0:	4615      	mov	r5, r2
 8014cd2:	688a      	ldr	r2, [r1, #8]
 8014cd4:	4680      	mov	r8, r0
 8014cd6:	460c      	mov	r4, r1
 8014cd8:	b932      	cbnz	r2, 8014ce8 <_scanf_chars+0x1c>
 8014cda:	698a      	ldr	r2, [r1, #24]
 8014cdc:	2a00      	cmp	r2, #0
 8014cde:	bf0c      	ite	eq
 8014ce0:	2201      	moveq	r2, #1
 8014ce2:	f04f 32ff 	movne.w	r2, #4294967295
 8014ce6:	608a      	str	r2, [r1, #8]
 8014ce8:	6822      	ldr	r2, [r4, #0]
 8014cea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014d7c <_scanf_chars+0xb0>
 8014cee:	06d1      	lsls	r1, r2, #27
 8014cf0:	bf5f      	itttt	pl
 8014cf2:	681a      	ldrpl	r2, [r3, #0]
 8014cf4:	1d11      	addpl	r1, r2, #4
 8014cf6:	6019      	strpl	r1, [r3, #0]
 8014cf8:	6816      	ldrpl	r6, [r2, #0]
 8014cfa:	2700      	movs	r7, #0
 8014cfc:	69a0      	ldr	r0, [r4, #24]
 8014cfe:	b188      	cbz	r0, 8014d24 <_scanf_chars+0x58>
 8014d00:	2801      	cmp	r0, #1
 8014d02:	d107      	bne.n	8014d14 <_scanf_chars+0x48>
 8014d04:	682a      	ldr	r2, [r5, #0]
 8014d06:	7811      	ldrb	r1, [r2, #0]
 8014d08:	6962      	ldr	r2, [r4, #20]
 8014d0a:	5c52      	ldrb	r2, [r2, r1]
 8014d0c:	b952      	cbnz	r2, 8014d24 <_scanf_chars+0x58>
 8014d0e:	2f00      	cmp	r7, #0
 8014d10:	d031      	beq.n	8014d76 <_scanf_chars+0xaa>
 8014d12:	e022      	b.n	8014d5a <_scanf_chars+0x8e>
 8014d14:	2802      	cmp	r0, #2
 8014d16:	d120      	bne.n	8014d5a <_scanf_chars+0x8e>
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014d20:	071b      	lsls	r3, r3, #28
 8014d22:	d41a      	bmi.n	8014d5a <_scanf_chars+0x8e>
 8014d24:	6823      	ldr	r3, [r4, #0]
 8014d26:	06da      	lsls	r2, r3, #27
 8014d28:	bf5e      	ittt	pl
 8014d2a:	682b      	ldrpl	r3, [r5, #0]
 8014d2c:	781b      	ldrbpl	r3, [r3, #0]
 8014d2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014d32:	682a      	ldr	r2, [r5, #0]
 8014d34:	686b      	ldr	r3, [r5, #4]
 8014d36:	3201      	adds	r2, #1
 8014d38:	602a      	str	r2, [r5, #0]
 8014d3a:	68a2      	ldr	r2, [r4, #8]
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	3a01      	subs	r2, #1
 8014d40:	606b      	str	r3, [r5, #4]
 8014d42:	3701      	adds	r7, #1
 8014d44:	60a2      	str	r2, [r4, #8]
 8014d46:	b142      	cbz	r2, 8014d5a <_scanf_chars+0x8e>
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	dcd7      	bgt.n	8014cfc <_scanf_chars+0x30>
 8014d4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014d50:	4629      	mov	r1, r5
 8014d52:	4640      	mov	r0, r8
 8014d54:	4798      	blx	r3
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d0d0      	beq.n	8014cfc <_scanf_chars+0x30>
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	f013 0310 	ands.w	r3, r3, #16
 8014d60:	d105      	bne.n	8014d6e <_scanf_chars+0xa2>
 8014d62:	68e2      	ldr	r2, [r4, #12]
 8014d64:	3201      	adds	r2, #1
 8014d66:	60e2      	str	r2, [r4, #12]
 8014d68:	69a2      	ldr	r2, [r4, #24]
 8014d6a:	b102      	cbz	r2, 8014d6e <_scanf_chars+0xa2>
 8014d6c:	7033      	strb	r3, [r6, #0]
 8014d6e:	6923      	ldr	r3, [r4, #16]
 8014d70:	443b      	add	r3, r7
 8014d72:	6123      	str	r3, [r4, #16]
 8014d74:	2000      	movs	r0, #0
 8014d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d7a:	bf00      	nop
 8014d7c:	08018261 	.word	0x08018261

08014d80 <_scanf_i>:
 8014d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	4698      	mov	r8, r3
 8014d86:	4b76      	ldr	r3, [pc, #472]	; (8014f60 <_scanf_i+0x1e0>)
 8014d88:	460c      	mov	r4, r1
 8014d8a:	4682      	mov	sl, r0
 8014d8c:	4616      	mov	r6, r2
 8014d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014d92:	b087      	sub	sp, #28
 8014d94:	ab03      	add	r3, sp, #12
 8014d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014d9a:	4b72      	ldr	r3, [pc, #456]	; (8014f64 <_scanf_i+0x1e4>)
 8014d9c:	69a1      	ldr	r1, [r4, #24]
 8014d9e:	4a72      	ldr	r2, [pc, #456]	; (8014f68 <_scanf_i+0x1e8>)
 8014da0:	2903      	cmp	r1, #3
 8014da2:	bf18      	it	ne
 8014da4:	461a      	movne	r2, r3
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	9201      	str	r2, [sp, #4]
 8014daa:	1e5a      	subs	r2, r3, #1
 8014dac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014db0:	bf88      	it	hi
 8014db2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014db6:	4627      	mov	r7, r4
 8014db8:	bf82      	ittt	hi
 8014dba:	eb03 0905 	addhi.w	r9, r3, r5
 8014dbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014dc2:	60a3      	strhi	r3, [r4, #8]
 8014dc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014dc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014dcc:	bf98      	it	ls
 8014dce:	f04f 0900 	movls.w	r9, #0
 8014dd2:	6023      	str	r3, [r4, #0]
 8014dd4:	463d      	mov	r5, r7
 8014dd6:	f04f 0b00 	mov.w	fp, #0
 8014dda:	6831      	ldr	r1, [r6, #0]
 8014ddc:	ab03      	add	r3, sp, #12
 8014dde:	7809      	ldrb	r1, [r1, #0]
 8014de0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014de4:	2202      	movs	r2, #2
 8014de6:	f7eb fa1b 	bl	8000220 <memchr>
 8014dea:	b328      	cbz	r0, 8014e38 <_scanf_i+0xb8>
 8014dec:	f1bb 0f01 	cmp.w	fp, #1
 8014df0:	d159      	bne.n	8014ea6 <_scanf_i+0x126>
 8014df2:	6862      	ldr	r2, [r4, #4]
 8014df4:	b92a      	cbnz	r2, 8014e02 <_scanf_i+0x82>
 8014df6:	6822      	ldr	r2, [r4, #0]
 8014df8:	2308      	movs	r3, #8
 8014dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014dfe:	6063      	str	r3, [r4, #4]
 8014e00:	6022      	str	r2, [r4, #0]
 8014e02:	6822      	ldr	r2, [r4, #0]
 8014e04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014e08:	6022      	str	r2, [r4, #0]
 8014e0a:	68a2      	ldr	r2, [r4, #8]
 8014e0c:	1e51      	subs	r1, r2, #1
 8014e0e:	60a1      	str	r1, [r4, #8]
 8014e10:	b192      	cbz	r2, 8014e38 <_scanf_i+0xb8>
 8014e12:	6832      	ldr	r2, [r6, #0]
 8014e14:	1c51      	adds	r1, r2, #1
 8014e16:	6031      	str	r1, [r6, #0]
 8014e18:	7812      	ldrb	r2, [r2, #0]
 8014e1a:	f805 2b01 	strb.w	r2, [r5], #1
 8014e1e:	6872      	ldr	r2, [r6, #4]
 8014e20:	3a01      	subs	r2, #1
 8014e22:	2a00      	cmp	r2, #0
 8014e24:	6072      	str	r2, [r6, #4]
 8014e26:	dc07      	bgt.n	8014e38 <_scanf_i+0xb8>
 8014e28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014e2c:	4631      	mov	r1, r6
 8014e2e:	4650      	mov	r0, sl
 8014e30:	4790      	blx	r2
 8014e32:	2800      	cmp	r0, #0
 8014e34:	f040 8085 	bne.w	8014f42 <_scanf_i+0x1c2>
 8014e38:	f10b 0b01 	add.w	fp, fp, #1
 8014e3c:	f1bb 0f03 	cmp.w	fp, #3
 8014e40:	d1cb      	bne.n	8014dda <_scanf_i+0x5a>
 8014e42:	6863      	ldr	r3, [r4, #4]
 8014e44:	b90b      	cbnz	r3, 8014e4a <_scanf_i+0xca>
 8014e46:	230a      	movs	r3, #10
 8014e48:	6063      	str	r3, [r4, #4]
 8014e4a:	6863      	ldr	r3, [r4, #4]
 8014e4c:	4947      	ldr	r1, [pc, #284]	; (8014f6c <_scanf_i+0x1ec>)
 8014e4e:	6960      	ldr	r0, [r4, #20]
 8014e50:	1ac9      	subs	r1, r1, r3
 8014e52:	f000 f8b9 	bl	8014fc8 <__sccl>
 8014e56:	f04f 0b00 	mov.w	fp, #0
 8014e5a:	68a3      	ldr	r3, [r4, #8]
 8014e5c:	6822      	ldr	r2, [r4, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d03d      	beq.n	8014ede <_scanf_i+0x15e>
 8014e62:	6831      	ldr	r1, [r6, #0]
 8014e64:	6960      	ldr	r0, [r4, #20]
 8014e66:	f891 c000 	ldrb.w	ip, [r1]
 8014e6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d035      	beq.n	8014ede <_scanf_i+0x15e>
 8014e72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014e76:	d124      	bne.n	8014ec2 <_scanf_i+0x142>
 8014e78:	0510      	lsls	r0, r2, #20
 8014e7a:	d522      	bpl.n	8014ec2 <_scanf_i+0x142>
 8014e7c:	f10b 0b01 	add.w	fp, fp, #1
 8014e80:	f1b9 0f00 	cmp.w	r9, #0
 8014e84:	d003      	beq.n	8014e8e <_scanf_i+0x10e>
 8014e86:	3301      	adds	r3, #1
 8014e88:	f109 39ff 	add.w	r9, r9, #4294967295
 8014e8c:	60a3      	str	r3, [r4, #8]
 8014e8e:	6873      	ldr	r3, [r6, #4]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	6073      	str	r3, [r6, #4]
 8014e96:	dd1b      	ble.n	8014ed0 <_scanf_i+0x150>
 8014e98:	6833      	ldr	r3, [r6, #0]
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	6033      	str	r3, [r6, #0]
 8014e9e:	68a3      	ldr	r3, [r4, #8]
 8014ea0:	3b01      	subs	r3, #1
 8014ea2:	60a3      	str	r3, [r4, #8]
 8014ea4:	e7d9      	b.n	8014e5a <_scanf_i+0xda>
 8014ea6:	f1bb 0f02 	cmp.w	fp, #2
 8014eaa:	d1ae      	bne.n	8014e0a <_scanf_i+0x8a>
 8014eac:	6822      	ldr	r2, [r4, #0]
 8014eae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014eb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014eb6:	d1bf      	bne.n	8014e38 <_scanf_i+0xb8>
 8014eb8:	2310      	movs	r3, #16
 8014eba:	6063      	str	r3, [r4, #4]
 8014ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014ec0:	e7a2      	b.n	8014e08 <_scanf_i+0x88>
 8014ec2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014ec6:	6022      	str	r2, [r4, #0]
 8014ec8:	780b      	ldrb	r3, [r1, #0]
 8014eca:	f805 3b01 	strb.w	r3, [r5], #1
 8014ece:	e7de      	b.n	8014e8e <_scanf_i+0x10e>
 8014ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014ed4:	4631      	mov	r1, r6
 8014ed6:	4650      	mov	r0, sl
 8014ed8:	4798      	blx	r3
 8014eda:	2800      	cmp	r0, #0
 8014edc:	d0df      	beq.n	8014e9e <_scanf_i+0x11e>
 8014ede:	6823      	ldr	r3, [r4, #0]
 8014ee0:	05db      	lsls	r3, r3, #23
 8014ee2:	d50d      	bpl.n	8014f00 <_scanf_i+0x180>
 8014ee4:	42bd      	cmp	r5, r7
 8014ee6:	d909      	bls.n	8014efc <_scanf_i+0x17c>
 8014ee8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ef0:	4632      	mov	r2, r6
 8014ef2:	4650      	mov	r0, sl
 8014ef4:	4798      	blx	r3
 8014ef6:	f105 39ff 	add.w	r9, r5, #4294967295
 8014efa:	464d      	mov	r5, r9
 8014efc:	42bd      	cmp	r5, r7
 8014efe:	d02d      	beq.n	8014f5c <_scanf_i+0x1dc>
 8014f00:	6822      	ldr	r2, [r4, #0]
 8014f02:	f012 0210 	ands.w	r2, r2, #16
 8014f06:	d113      	bne.n	8014f30 <_scanf_i+0x1b0>
 8014f08:	702a      	strb	r2, [r5, #0]
 8014f0a:	6863      	ldr	r3, [r4, #4]
 8014f0c:	9e01      	ldr	r6, [sp, #4]
 8014f0e:	4639      	mov	r1, r7
 8014f10:	4650      	mov	r0, sl
 8014f12:	47b0      	blx	r6
 8014f14:	6821      	ldr	r1, [r4, #0]
 8014f16:	f8d8 3000 	ldr.w	r3, [r8]
 8014f1a:	f011 0f20 	tst.w	r1, #32
 8014f1e:	d013      	beq.n	8014f48 <_scanf_i+0x1c8>
 8014f20:	1d1a      	adds	r2, r3, #4
 8014f22:	f8c8 2000 	str.w	r2, [r8]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	6018      	str	r0, [r3, #0]
 8014f2a:	68e3      	ldr	r3, [r4, #12]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	60e3      	str	r3, [r4, #12]
 8014f30:	1bed      	subs	r5, r5, r7
 8014f32:	44ab      	add	fp, r5
 8014f34:	6925      	ldr	r5, [r4, #16]
 8014f36:	445d      	add	r5, fp
 8014f38:	6125      	str	r5, [r4, #16]
 8014f3a:	2000      	movs	r0, #0
 8014f3c:	b007      	add	sp, #28
 8014f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f42:	f04f 0b00 	mov.w	fp, #0
 8014f46:	e7ca      	b.n	8014ede <_scanf_i+0x15e>
 8014f48:	1d1a      	adds	r2, r3, #4
 8014f4a:	f8c8 2000 	str.w	r2, [r8]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f011 0f01 	tst.w	r1, #1
 8014f54:	bf14      	ite	ne
 8014f56:	8018      	strhne	r0, [r3, #0]
 8014f58:	6018      	streq	r0, [r3, #0]
 8014f5a:	e7e6      	b.n	8014f2a <_scanf_i+0x1aa>
 8014f5c:	2001      	movs	r0, #1
 8014f5e:	e7ed      	b.n	8014f3c <_scanf_i+0x1bc>
 8014f60:	08017d64 	.word	0x08017d64
 8014f64:	08015145 	.word	0x08015145
 8014f68:	08012665 	.word	0x08012665
 8014f6c:	080185ee 	.word	0x080185ee

08014f70 <_read_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	4d07      	ldr	r5, [pc, #28]	; (8014f90 <_read_r+0x20>)
 8014f74:	4604      	mov	r4, r0
 8014f76:	4608      	mov	r0, r1
 8014f78:	4611      	mov	r1, r2
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	602a      	str	r2, [r5, #0]
 8014f7e:	461a      	mov	r2, r3
 8014f80:	f7f1 fca4 	bl	80068cc <_read>
 8014f84:	1c43      	adds	r3, r0, #1
 8014f86:	d102      	bne.n	8014f8e <_read_r+0x1e>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	b103      	cbz	r3, 8014f8e <_read_r+0x1e>
 8014f8c:	6023      	str	r3, [r4, #0]
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	2000496c 	.word	0x2000496c
 8014f94:	00000000 	.word	0x00000000

08014f98 <nan>:
 8014f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014fa0 <nan+0x8>
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	00000000 	.word	0x00000000
 8014fa4:	7ff80000 	.word	0x7ff80000

08014fa8 <_sbrk_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d06      	ldr	r5, [pc, #24]	; (8014fc4 <_sbrk_r+0x1c>)
 8014fac:	2300      	movs	r3, #0
 8014fae:	4604      	mov	r4, r0
 8014fb0:	4608      	mov	r0, r1
 8014fb2:	602b      	str	r3, [r5, #0]
 8014fb4:	f7f1 fcf8 	bl	80069a8 <_sbrk>
 8014fb8:	1c43      	adds	r3, r0, #1
 8014fba:	d102      	bne.n	8014fc2 <_sbrk_r+0x1a>
 8014fbc:	682b      	ldr	r3, [r5, #0]
 8014fbe:	b103      	cbz	r3, 8014fc2 <_sbrk_r+0x1a>
 8014fc0:	6023      	str	r3, [r4, #0]
 8014fc2:	bd38      	pop	{r3, r4, r5, pc}
 8014fc4:	2000496c 	.word	0x2000496c

08014fc8 <__sccl>:
 8014fc8:	b570      	push	{r4, r5, r6, lr}
 8014fca:	780b      	ldrb	r3, [r1, #0]
 8014fcc:	4604      	mov	r4, r0
 8014fce:	2b5e      	cmp	r3, #94	; 0x5e
 8014fd0:	bf0b      	itete	eq
 8014fd2:	784b      	ldrbeq	r3, [r1, #1]
 8014fd4:	1c48      	addne	r0, r1, #1
 8014fd6:	1c88      	addeq	r0, r1, #2
 8014fd8:	2200      	movne	r2, #0
 8014fda:	bf08      	it	eq
 8014fdc:	2201      	moveq	r2, #1
 8014fde:	1e61      	subs	r1, r4, #1
 8014fe0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014fe4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014fe8:	42a9      	cmp	r1, r5
 8014fea:	d1fb      	bne.n	8014fe4 <__sccl+0x1c>
 8014fec:	b90b      	cbnz	r3, 8014ff2 <__sccl+0x2a>
 8014fee:	3801      	subs	r0, #1
 8014ff0:	bd70      	pop	{r4, r5, r6, pc}
 8014ff2:	f082 0201 	eor.w	r2, r2, #1
 8014ff6:	54e2      	strb	r2, [r4, r3]
 8014ff8:	4605      	mov	r5, r0
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8015000:	292d      	cmp	r1, #45	; 0x2d
 8015002:	d006      	beq.n	8015012 <__sccl+0x4a>
 8015004:	295d      	cmp	r1, #93	; 0x5d
 8015006:	d0f3      	beq.n	8014ff0 <__sccl+0x28>
 8015008:	b909      	cbnz	r1, 801500e <__sccl+0x46>
 801500a:	4628      	mov	r0, r5
 801500c:	e7f0      	b.n	8014ff0 <__sccl+0x28>
 801500e:	460b      	mov	r3, r1
 8015010:	e7f1      	b.n	8014ff6 <__sccl+0x2e>
 8015012:	786e      	ldrb	r6, [r5, #1]
 8015014:	2e5d      	cmp	r6, #93	; 0x5d
 8015016:	d0fa      	beq.n	801500e <__sccl+0x46>
 8015018:	42b3      	cmp	r3, r6
 801501a:	dcf8      	bgt.n	801500e <__sccl+0x46>
 801501c:	3502      	adds	r5, #2
 801501e:	4619      	mov	r1, r3
 8015020:	3101      	adds	r1, #1
 8015022:	428e      	cmp	r6, r1
 8015024:	5462      	strb	r2, [r4, r1]
 8015026:	dcfb      	bgt.n	8015020 <__sccl+0x58>
 8015028:	1af1      	subs	r1, r6, r3
 801502a:	3901      	subs	r1, #1
 801502c:	1c58      	adds	r0, r3, #1
 801502e:	42b3      	cmp	r3, r6
 8015030:	bfa8      	it	ge
 8015032:	2100      	movge	r1, #0
 8015034:	1843      	adds	r3, r0, r1
 8015036:	e7e0      	b.n	8014ffa <__sccl+0x32>

08015038 <strncmp>:
 8015038:	b510      	push	{r4, lr}
 801503a:	b17a      	cbz	r2, 801505c <strncmp+0x24>
 801503c:	4603      	mov	r3, r0
 801503e:	3901      	subs	r1, #1
 8015040:	1884      	adds	r4, r0, r2
 8015042:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015046:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801504a:	4290      	cmp	r0, r2
 801504c:	d101      	bne.n	8015052 <strncmp+0x1a>
 801504e:	42a3      	cmp	r3, r4
 8015050:	d101      	bne.n	8015056 <strncmp+0x1e>
 8015052:	1a80      	subs	r0, r0, r2
 8015054:	bd10      	pop	{r4, pc}
 8015056:	2800      	cmp	r0, #0
 8015058:	d1f3      	bne.n	8015042 <strncmp+0xa>
 801505a:	e7fa      	b.n	8015052 <strncmp+0x1a>
 801505c:	4610      	mov	r0, r2
 801505e:	e7f9      	b.n	8015054 <strncmp+0x1c>

08015060 <_strtoul_l.constprop.0>:
 8015060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015064:	4f36      	ldr	r7, [pc, #216]	; (8015140 <_strtoul_l.constprop.0+0xe0>)
 8015066:	4686      	mov	lr, r0
 8015068:	460d      	mov	r5, r1
 801506a:	4628      	mov	r0, r5
 801506c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015070:	5de6      	ldrb	r6, [r4, r7]
 8015072:	f016 0608 	ands.w	r6, r6, #8
 8015076:	d1f8      	bne.n	801506a <_strtoul_l.constprop.0+0xa>
 8015078:	2c2d      	cmp	r4, #45	; 0x2d
 801507a:	d12f      	bne.n	80150dc <_strtoul_l.constprop.0+0x7c>
 801507c:	782c      	ldrb	r4, [r5, #0]
 801507e:	2601      	movs	r6, #1
 8015080:	1c85      	adds	r5, r0, #2
 8015082:	2b00      	cmp	r3, #0
 8015084:	d057      	beq.n	8015136 <_strtoul_l.constprop.0+0xd6>
 8015086:	2b10      	cmp	r3, #16
 8015088:	d109      	bne.n	801509e <_strtoul_l.constprop.0+0x3e>
 801508a:	2c30      	cmp	r4, #48	; 0x30
 801508c:	d107      	bne.n	801509e <_strtoul_l.constprop.0+0x3e>
 801508e:	7828      	ldrb	r0, [r5, #0]
 8015090:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015094:	2858      	cmp	r0, #88	; 0x58
 8015096:	d149      	bne.n	801512c <_strtoul_l.constprop.0+0xcc>
 8015098:	786c      	ldrb	r4, [r5, #1]
 801509a:	2310      	movs	r3, #16
 801509c:	3502      	adds	r5, #2
 801509e:	f04f 38ff 	mov.w	r8, #4294967295
 80150a2:	2700      	movs	r7, #0
 80150a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80150a8:	fb03 f908 	mul.w	r9, r3, r8
 80150ac:	ea6f 0909 	mvn.w	r9, r9
 80150b0:	4638      	mov	r0, r7
 80150b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80150b6:	f1bc 0f09 	cmp.w	ip, #9
 80150ba:	d814      	bhi.n	80150e6 <_strtoul_l.constprop.0+0x86>
 80150bc:	4664      	mov	r4, ip
 80150be:	42a3      	cmp	r3, r4
 80150c0:	dd22      	ble.n	8015108 <_strtoul_l.constprop.0+0xa8>
 80150c2:	2f00      	cmp	r7, #0
 80150c4:	db1d      	blt.n	8015102 <_strtoul_l.constprop.0+0xa2>
 80150c6:	4580      	cmp	r8, r0
 80150c8:	d31b      	bcc.n	8015102 <_strtoul_l.constprop.0+0xa2>
 80150ca:	d101      	bne.n	80150d0 <_strtoul_l.constprop.0+0x70>
 80150cc:	45a1      	cmp	r9, r4
 80150ce:	db18      	blt.n	8015102 <_strtoul_l.constprop.0+0xa2>
 80150d0:	fb00 4003 	mla	r0, r0, r3, r4
 80150d4:	2701      	movs	r7, #1
 80150d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150da:	e7ea      	b.n	80150b2 <_strtoul_l.constprop.0+0x52>
 80150dc:	2c2b      	cmp	r4, #43	; 0x2b
 80150de:	bf04      	itt	eq
 80150e0:	782c      	ldrbeq	r4, [r5, #0]
 80150e2:	1c85      	addeq	r5, r0, #2
 80150e4:	e7cd      	b.n	8015082 <_strtoul_l.constprop.0+0x22>
 80150e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80150ea:	f1bc 0f19 	cmp.w	ip, #25
 80150ee:	d801      	bhi.n	80150f4 <_strtoul_l.constprop.0+0x94>
 80150f0:	3c37      	subs	r4, #55	; 0x37
 80150f2:	e7e4      	b.n	80150be <_strtoul_l.constprop.0+0x5e>
 80150f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80150f8:	f1bc 0f19 	cmp.w	ip, #25
 80150fc:	d804      	bhi.n	8015108 <_strtoul_l.constprop.0+0xa8>
 80150fe:	3c57      	subs	r4, #87	; 0x57
 8015100:	e7dd      	b.n	80150be <_strtoul_l.constprop.0+0x5e>
 8015102:	f04f 37ff 	mov.w	r7, #4294967295
 8015106:	e7e6      	b.n	80150d6 <_strtoul_l.constprop.0+0x76>
 8015108:	2f00      	cmp	r7, #0
 801510a:	da07      	bge.n	801511c <_strtoul_l.constprop.0+0xbc>
 801510c:	2322      	movs	r3, #34	; 0x22
 801510e:	f8ce 3000 	str.w	r3, [lr]
 8015112:	f04f 30ff 	mov.w	r0, #4294967295
 8015116:	b932      	cbnz	r2, 8015126 <_strtoul_l.constprop.0+0xc6>
 8015118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801511c:	b106      	cbz	r6, 8015120 <_strtoul_l.constprop.0+0xc0>
 801511e:	4240      	negs	r0, r0
 8015120:	2a00      	cmp	r2, #0
 8015122:	d0f9      	beq.n	8015118 <_strtoul_l.constprop.0+0xb8>
 8015124:	b107      	cbz	r7, 8015128 <_strtoul_l.constprop.0+0xc8>
 8015126:	1e69      	subs	r1, r5, #1
 8015128:	6011      	str	r1, [r2, #0]
 801512a:	e7f5      	b.n	8015118 <_strtoul_l.constprop.0+0xb8>
 801512c:	2430      	movs	r4, #48	; 0x30
 801512e:	2b00      	cmp	r3, #0
 8015130:	d1b5      	bne.n	801509e <_strtoul_l.constprop.0+0x3e>
 8015132:	2308      	movs	r3, #8
 8015134:	e7b3      	b.n	801509e <_strtoul_l.constprop.0+0x3e>
 8015136:	2c30      	cmp	r4, #48	; 0x30
 8015138:	d0a9      	beq.n	801508e <_strtoul_l.constprop.0+0x2e>
 801513a:	230a      	movs	r3, #10
 801513c:	e7af      	b.n	801509e <_strtoul_l.constprop.0+0x3e>
 801513e:	bf00      	nop
 8015140:	08018261 	.word	0x08018261

08015144 <_strtoul_r>:
 8015144:	f7ff bf8c 	b.w	8015060 <_strtoul_l.constprop.0>

08015148 <__submore>:
 8015148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801514c:	460c      	mov	r4, r1
 801514e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015154:	4299      	cmp	r1, r3
 8015156:	d11d      	bne.n	8015194 <__submore+0x4c>
 8015158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801515c:	f7ff fa14 	bl	8014588 <_malloc_r>
 8015160:	b918      	cbnz	r0, 801516a <__submore+0x22>
 8015162:	f04f 30ff 	mov.w	r0, #4294967295
 8015166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801516a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801516e:	63a3      	str	r3, [r4, #56]	; 0x38
 8015170:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015174:	6360      	str	r0, [r4, #52]	; 0x34
 8015176:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801517a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801517e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015182:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015186:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801518a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801518e:	6020      	str	r0, [r4, #0]
 8015190:	2000      	movs	r0, #0
 8015192:	e7e8      	b.n	8015166 <__submore+0x1e>
 8015194:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015196:	0077      	lsls	r7, r6, #1
 8015198:	463a      	mov	r2, r7
 801519a:	f000 fa2d 	bl	80155f8 <_realloc_r>
 801519e:	4605      	mov	r5, r0
 80151a0:	2800      	cmp	r0, #0
 80151a2:	d0de      	beq.n	8015162 <__submore+0x1a>
 80151a4:	eb00 0806 	add.w	r8, r0, r6
 80151a8:	4601      	mov	r1, r0
 80151aa:	4632      	mov	r2, r6
 80151ac:	4640      	mov	r0, r8
 80151ae:	f7fe fc99 	bl	8013ae4 <memcpy>
 80151b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80151b6:	f8c4 8000 	str.w	r8, [r4]
 80151ba:	e7e9      	b.n	8015190 <__submore+0x48>

080151bc <__ascii_wctomb>:
 80151bc:	b149      	cbz	r1, 80151d2 <__ascii_wctomb+0x16>
 80151be:	2aff      	cmp	r2, #255	; 0xff
 80151c0:	bf85      	ittet	hi
 80151c2:	238a      	movhi	r3, #138	; 0x8a
 80151c4:	6003      	strhi	r3, [r0, #0]
 80151c6:	700a      	strbls	r2, [r1, #0]
 80151c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80151cc:	bf98      	it	ls
 80151ce:	2001      	movls	r0, #1
 80151d0:	4770      	bx	lr
 80151d2:	4608      	mov	r0, r1
 80151d4:	4770      	bx	lr
	...

080151d8 <__assert_func>:
 80151d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151da:	4614      	mov	r4, r2
 80151dc:	461a      	mov	r2, r3
 80151de:	4b09      	ldr	r3, [pc, #36]	; (8015204 <__assert_func+0x2c>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4605      	mov	r5, r0
 80151e4:	68d8      	ldr	r0, [r3, #12]
 80151e6:	b14c      	cbz	r4, 80151fc <__assert_func+0x24>
 80151e8:	4b07      	ldr	r3, [pc, #28]	; (8015208 <__assert_func+0x30>)
 80151ea:	9100      	str	r1, [sp, #0]
 80151ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151f0:	4906      	ldr	r1, [pc, #24]	; (801520c <__assert_func+0x34>)
 80151f2:	462b      	mov	r3, r5
 80151f4:	f000 f9a6 	bl	8015544 <fiprintf>
 80151f8:	f000 fc46 	bl	8015a88 <abort>
 80151fc:	4b04      	ldr	r3, [pc, #16]	; (8015210 <__assert_func+0x38>)
 80151fe:	461c      	mov	r4, r3
 8015200:	e7f3      	b.n	80151ea <__assert_func+0x12>
 8015202:	bf00      	nop
 8015204:	2000002c 	.word	0x2000002c
 8015208:	080185f0 	.word	0x080185f0
 801520c:	080185fd 	.word	0x080185fd
 8015210:	0801862b 	.word	0x0801862b

08015214 <__sflush_r>:
 8015214:	898a      	ldrh	r2, [r1, #12]
 8015216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801521a:	4605      	mov	r5, r0
 801521c:	0710      	lsls	r0, r2, #28
 801521e:	460c      	mov	r4, r1
 8015220:	d458      	bmi.n	80152d4 <__sflush_r+0xc0>
 8015222:	684b      	ldr	r3, [r1, #4]
 8015224:	2b00      	cmp	r3, #0
 8015226:	dc05      	bgt.n	8015234 <__sflush_r+0x20>
 8015228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801522a:	2b00      	cmp	r3, #0
 801522c:	dc02      	bgt.n	8015234 <__sflush_r+0x20>
 801522e:	2000      	movs	r0, #0
 8015230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015236:	2e00      	cmp	r6, #0
 8015238:	d0f9      	beq.n	801522e <__sflush_r+0x1a>
 801523a:	2300      	movs	r3, #0
 801523c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015240:	682f      	ldr	r7, [r5, #0]
 8015242:	602b      	str	r3, [r5, #0]
 8015244:	d032      	beq.n	80152ac <__sflush_r+0x98>
 8015246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015248:	89a3      	ldrh	r3, [r4, #12]
 801524a:	075a      	lsls	r2, r3, #29
 801524c:	d505      	bpl.n	801525a <__sflush_r+0x46>
 801524e:	6863      	ldr	r3, [r4, #4]
 8015250:	1ac0      	subs	r0, r0, r3
 8015252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015254:	b10b      	cbz	r3, 801525a <__sflush_r+0x46>
 8015256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015258:	1ac0      	subs	r0, r0, r3
 801525a:	2300      	movs	r3, #0
 801525c:	4602      	mov	r2, r0
 801525e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015260:	6a21      	ldr	r1, [r4, #32]
 8015262:	4628      	mov	r0, r5
 8015264:	47b0      	blx	r6
 8015266:	1c43      	adds	r3, r0, #1
 8015268:	89a3      	ldrh	r3, [r4, #12]
 801526a:	d106      	bne.n	801527a <__sflush_r+0x66>
 801526c:	6829      	ldr	r1, [r5, #0]
 801526e:	291d      	cmp	r1, #29
 8015270:	d82c      	bhi.n	80152cc <__sflush_r+0xb8>
 8015272:	4a2a      	ldr	r2, [pc, #168]	; (801531c <__sflush_r+0x108>)
 8015274:	40ca      	lsrs	r2, r1
 8015276:	07d6      	lsls	r6, r2, #31
 8015278:	d528      	bpl.n	80152cc <__sflush_r+0xb8>
 801527a:	2200      	movs	r2, #0
 801527c:	6062      	str	r2, [r4, #4]
 801527e:	04d9      	lsls	r1, r3, #19
 8015280:	6922      	ldr	r2, [r4, #16]
 8015282:	6022      	str	r2, [r4, #0]
 8015284:	d504      	bpl.n	8015290 <__sflush_r+0x7c>
 8015286:	1c42      	adds	r2, r0, #1
 8015288:	d101      	bne.n	801528e <__sflush_r+0x7a>
 801528a:	682b      	ldr	r3, [r5, #0]
 801528c:	b903      	cbnz	r3, 8015290 <__sflush_r+0x7c>
 801528e:	6560      	str	r0, [r4, #84]	; 0x54
 8015290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015292:	602f      	str	r7, [r5, #0]
 8015294:	2900      	cmp	r1, #0
 8015296:	d0ca      	beq.n	801522e <__sflush_r+0x1a>
 8015298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801529c:	4299      	cmp	r1, r3
 801529e:	d002      	beq.n	80152a6 <__sflush_r+0x92>
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7ff f905 	bl	80144b0 <_free_r>
 80152a6:	2000      	movs	r0, #0
 80152a8:	6360      	str	r0, [r4, #52]	; 0x34
 80152aa:	e7c1      	b.n	8015230 <__sflush_r+0x1c>
 80152ac:	6a21      	ldr	r1, [r4, #32]
 80152ae:	2301      	movs	r3, #1
 80152b0:	4628      	mov	r0, r5
 80152b2:	47b0      	blx	r6
 80152b4:	1c41      	adds	r1, r0, #1
 80152b6:	d1c7      	bne.n	8015248 <__sflush_r+0x34>
 80152b8:	682b      	ldr	r3, [r5, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d0c4      	beq.n	8015248 <__sflush_r+0x34>
 80152be:	2b1d      	cmp	r3, #29
 80152c0:	d001      	beq.n	80152c6 <__sflush_r+0xb2>
 80152c2:	2b16      	cmp	r3, #22
 80152c4:	d101      	bne.n	80152ca <__sflush_r+0xb6>
 80152c6:	602f      	str	r7, [r5, #0]
 80152c8:	e7b1      	b.n	801522e <__sflush_r+0x1a>
 80152ca:	89a3      	ldrh	r3, [r4, #12]
 80152cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152d0:	81a3      	strh	r3, [r4, #12]
 80152d2:	e7ad      	b.n	8015230 <__sflush_r+0x1c>
 80152d4:	690f      	ldr	r7, [r1, #16]
 80152d6:	2f00      	cmp	r7, #0
 80152d8:	d0a9      	beq.n	801522e <__sflush_r+0x1a>
 80152da:	0793      	lsls	r3, r2, #30
 80152dc:	680e      	ldr	r6, [r1, #0]
 80152de:	bf08      	it	eq
 80152e0:	694b      	ldreq	r3, [r1, #20]
 80152e2:	600f      	str	r7, [r1, #0]
 80152e4:	bf18      	it	ne
 80152e6:	2300      	movne	r3, #0
 80152e8:	eba6 0807 	sub.w	r8, r6, r7
 80152ec:	608b      	str	r3, [r1, #8]
 80152ee:	f1b8 0f00 	cmp.w	r8, #0
 80152f2:	dd9c      	ble.n	801522e <__sflush_r+0x1a>
 80152f4:	6a21      	ldr	r1, [r4, #32]
 80152f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152f8:	4643      	mov	r3, r8
 80152fa:	463a      	mov	r2, r7
 80152fc:	4628      	mov	r0, r5
 80152fe:	47b0      	blx	r6
 8015300:	2800      	cmp	r0, #0
 8015302:	dc06      	bgt.n	8015312 <__sflush_r+0xfe>
 8015304:	89a3      	ldrh	r3, [r4, #12]
 8015306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801530a:	81a3      	strh	r3, [r4, #12]
 801530c:	f04f 30ff 	mov.w	r0, #4294967295
 8015310:	e78e      	b.n	8015230 <__sflush_r+0x1c>
 8015312:	4407      	add	r7, r0
 8015314:	eba8 0800 	sub.w	r8, r8, r0
 8015318:	e7e9      	b.n	80152ee <__sflush_r+0xda>
 801531a:	bf00      	nop
 801531c:	20400001 	.word	0x20400001

08015320 <_fflush_r>:
 8015320:	b538      	push	{r3, r4, r5, lr}
 8015322:	690b      	ldr	r3, [r1, #16]
 8015324:	4605      	mov	r5, r0
 8015326:	460c      	mov	r4, r1
 8015328:	b913      	cbnz	r3, 8015330 <_fflush_r+0x10>
 801532a:	2500      	movs	r5, #0
 801532c:	4628      	mov	r0, r5
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	b118      	cbz	r0, 801533a <_fflush_r+0x1a>
 8015332:	6983      	ldr	r3, [r0, #24]
 8015334:	b90b      	cbnz	r3, 801533a <_fflush_r+0x1a>
 8015336:	f000 f887 	bl	8015448 <__sinit>
 801533a:	4b14      	ldr	r3, [pc, #80]	; (801538c <_fflush_r+0x6c>)
 801533c:	429c      	cmp	r4, r3
 801533e:	d11b      	bne.n	8015378 <_fflush_r+0x58>
 8015340:	686c      	ldr	r4, [r5, #4]
 8015342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d0ef      	beq.n	801532a <_fflush_r+0xa>
 801534a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801534c:	07d0      	lsls	r0, r2, #31
 801534e:	d404      	bmi.n	801535a <_fflush_r+0x3a>
 8015350:	0599      	lsls	r1, r3, #22
 8015352:	d402      	bmi.n	801535a <_fflush_r+0x3a>
 8015354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015356:	f000 f927 	bl	80155a8 <__retarget_lock_acquire_recursive>
 801535a:	4628      	mov	r0, r5
 801535c:	4621      	mov	r1, r4
 801535e:	f7ff ff59 	bl	8015214 <__sflush_r>
 8015362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015364:	07da      	lsls	r2, r3, #31
 8015366:	4605      	mov	r5, r0
 8015368:	d4e0      	bmi.n	801532c <_fflush_r+0xc>
 801536a:	89a3      	ldrh	r3, [r4, #12]
 801536c:	059b      	lsls	r3, r3, #22
 801536e:	d4dd      	bmi.n	801532c <_fflush_r+0xc>
 8015370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015372:	f000 f91a 	bl	80155aa <__retarget_lock_release_recursive>
 8015376:	e7d9      	b.n	801532c <_fflush_r+0xc>
 8015378:	4b05      	ldr	r3, [pc, #20]	; (8015390 <_fflush_r+0x70>)
 801537a:	429c      	cmp	r4, r3
 801537c:	d101      	bne.n	8015382 <_fflush_r+0x62>
 801537e:	68ac      	ldr	r4, [r5, #8]
 8015380:	e7df      	b.n	8015342 <_fflush_r+0x22>
 8015382:	4b04      	ldr	r3, [pc, #16]	; (8015394 <_fflush_r+0x74>)
 8015384:	429c      	cmp	r4, r3
 8015386:	bf08      	it	eq
 8015388:	68ec      	ldreq	r4, [r5, #12]
 801538a:	e7da      	b.n	8015342 <_fflush_r+0x22>
 801538c:	0801864c 	.word	0x0801864c
 8015390:	0801866c 	.word	0x0801866c
 8015394:	0801862c 	.word	0x0801862c

08015398 <std>:
 8015398:	2300      	movs	r3, #0
 801539a:	b510      	push	{r4, lr}
 801539c:	4604      	mov	r4, r0
 801539e:	e9c0 3300 	strd	r3, r3, [r0]
 80153a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153a6:	6083      	str	r3, [r0, #8]
 80153a8:	8181      	strh	r1, [r0, #12]
 80153aa:	6643      	str	r3, [r0, #100]	; 0x64
 80153ac:	81c2      	strh	r2, [r0, #14]
 80153ae:	6183      	str	r3, [r0, #24]
 80153b0:	4619      	mov	r1, r3
 80153b2:	2208      	movs	r2, #8
 80153b4:	305c      	adds	r0, #92	; 0x5c
 80153b6:	f7fb fb71 	bl	8010a9c <memset>
 80153ba:	4b05      	ldr	r3, [pc, #20]	; (80153d0 <std+0x38>)
 80153bc:	6263      	str	r3, [r4, #36]	; 0x24
 80153be:	4b05      	ldr	r3, [pc, #20]	; (80153d4 <std+0x3c>)
 80153c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <std+0x40>)
 80153c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80153c6:	4b05      	ldr	r3, [pc, #20]	; (80153dc <std+0x44>)
 80153c8:	6224      	str	r4, [r4, #32]
 80153ca:	6323      	str	r3, [r4, #48]	; 0x30
 80153cc:	bd10      	pop	{r4, pc}
 80153ce:	bf00      	nop
 80153d0:	08011845 	.word	0x08011845
 80153d4:	0801186b 	.word	0x0801186b
 80153d8:	080118a3 	.word	0x080118a3
 80153dc:	080118c7 	.word	0x080118c7

080153e0 <_cleanup_r>:
 80153e0:	4901      	ldr	r1, [pc, #4]	; (80153e8 <_cleanup_r+0x8>)
 80153e2:	f000 b8c1 	b.w	8015568 <_fwalk_reent>
 80153e6:	bf00      	nop
 80153e8:	08015321 	.word	0x08015321

080153ec <__sfmoreglue>:
 80153ec:	b570      	push	{r4, r5, r6, lr}
 80153ee:	2268      	movs	r2, #104	; 0x68
 80153f0:	1e4d      	subs	r5, r1, #1
 80153f2:	4355      	muls	r5, r2
 80153f4:	460e      	mov	r6, r1
 80153f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80153fa:	f7ff f8c5 	bl	8014588 <_malloc_r>
 80153fe:	4604      	mov	r4, r0
 8015400:	b140      	cbz	r0, 8015414 <__sfmoreglue+0x28>
 8015402:	2100      	movs	r1, #0
 8015404:	e9c0 1600 	strd	r1, r6, [r0]
 8015408:	300c      	adds	r0, #12
 801540a:	60a0      	str	r0, [r4, #8]
 801540c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015410:	f7fb fb44 	bl	8010a9c <memset>
 8015414:	4620      	mov	r0, r4
 8015416:	bd70      	pop	{r4, r5, r6, pc}

08015418 <__sfp_lock_acquire>:
 8015418:	4801      	ldr	r0, [pc, #4]	; (8015420 <__sfp_lock_acquire+0x8>)
 801541a:	f000 b8c5 	b.w	80155a8 <__retarget_lock_acquire_recursive>
 801541e:	bf00      	nop
 8015420:	20004971 	.word	0x20004971

08015424 <__sfp_lock_release>:
 8015424:	4801      	ldr	r0, [pc, #4]	; (801542c <__sfp_lock_release+0x8>)
 8015426:	f000 b8c0 	b.w	80155aa <__retarget_lock_release_recursive>
 801542a:	bf00      	nop
 801542c:	20004971 	.word	0x20004971

08015430 <__sinit_lock_acquire>:
 8015430:	4801      	ldr	r0, [pc, #4]	; (8015438 <__sinit_lock_acquire+0x8>)
 8015432:	f000 b8b9 	b.w	80155a8 <__retarget_lock_acquire_recursive>
 8015436:	bf00      	nop
 8015438:	20004972 	.word	0x20004972

0801543c <__sinit_lock_release>:
 801543c:	4801      	ldr	r0, [pc, #4]	; (8015444 <__sinit_lock_release+0x8>)
 801543e:	f000 b8b4 	b.w	80155aa <__retarget_lock_release_recursive>
 8015442:	bf00      	nop
 8015444:	20004972 	.word	0x20004972

08015448 <__sinit>:
 8015448:	b510      	push	{r4, lr}
 801544a:	4604      	mov	r4, r0
 801544c:	f7ff fff0 	bl	8015430 <__sinit_lock_acquire>
 8015450:	69a3      	ldr	r3, [r4, #24]
 8015452:	b11b      	cbz	r3, 801545c <__sinit+0x14>
 8015454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015458:	f7ff bff0 	b.w	801543c <__sinit_lock_release>
 801545c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015460:	6523      	str	r3, [r4, #80]	; 0x50
 8015462:	4b13      	ldr	r3, [pc, #76]	; (80154b0 <__sinit+0x68>)
 8015464:	4a13      	ldr	r2, [pc, #76]	; (80154b4 <__sinit+0x6c>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	62a2      	str	r2, [r4, #40]	; 0x28
 801546a:	42a3      	cmp	r3, r4
 801546c:	bf04      	itt	eq
 801546e:	2301      	moveq	r3, #1
 8015470:	61a3      	streq	r3, [r4, #24]
 8015472:	4620      	mov	r0, r4
 8015474:	f000 f820 	bl	80154b8 <__sfp>
 8015478:	6060      	str	r0, [r4, #4]
 801547a:	4620      	mov	r0, r4
 801547c:	f000 f81c 	bl	80154b8 <__sfp>
 8015480:	60a0      	str	r0, [r4, #8]
 8015482:	4620      	mov	r0, r4
 8015484:	f000 f818 	bl	80154b8 <__sfp>
 8015488:	2200      	movs	r2, #0
 801548a:	60e0      	str	r0, [r4, #12]
 801548c:	2104      	movs	r1, #4
 801548e:	6860      	ldr	r0, [r4, #4]
 8015490:	f7ff ff82 	bl	8015398 <std>
 8015494:	68a0      	ldr	r0, [r4, #8]
 8015496:	2201      	movs	r2, #1
 8015498:	2109      	movs	r1, #9
 801549a:	f7ff ff7d 	bl	8015398 <std>
 801549e:	68e0      	ldr	r0, [r4, #12]
 80154a0:	2202      	movs	r2, #2
 80154a2:	2112      	movs	r1, #18
 80154a4:	f7ff ff78 	bl	8015398 <std>
 80154a8:	2301      	movs	r3, #1
 80154aa:	61a3      	str	r3, [r4, #24]
 80154ac:	e7d2      	b.n	8015454 <__sinit+0xc>
 80154ae:	bf00      	nop
 80154b0:	080181d0 	.word	0x080181d0
 80154b4:	080153e1 	.word	0x080153e1

080154b8 <__sfp>:
 80154b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ba:	4607      	mov	r7, r0
 80154bc:	f7ff ffac 	bl	8015418 <__sfp_lock_acquire>
 80154c0:	4b1e      	ldr	r3, [pc, #120]	; (801553c <__sfp+0x84>)
 80154c2:	681e      	ldr	r6, [r3, #0]
 80154c4:	69b3      	ldr	r3, [r6, #24]
 80154c6:	b913      	cbnz	r3, 80154ce <__sfp+0x16>
 80154c8:	4630      	mov	r0, r6
 80154ca:	f7ff ffbd 	bl	8015448 <__sinit>
 80154ce:	3648      	adds	r6, #72	; 0x48
 80154d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80154d4:	3b01      	subs	r3, #1
 80154d6:	d503      	bpl.n	80154e0 <__sfp+0x28>
 80154d8:	6833      	ldr	r3, [r6, #0]
 80154da:	b30b      	cbz	r3, 8015520 <__sfp+0x68>
 80154dc:	6836      	ldr	r6, [r6, #0]
 80154de:	e7f7      	b.n	80154d0 <__sfp+0x18>
 80154e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80154e4:	b9d5      	cbnz	r5, 801551c <__sfp+0x64>
 80154e6:	4b16      	ldr	r3, [pc, #88]	; (8015540 <__sfp+0x88>)
 80154e8:	60e3      	str	r3, [r4, #12]
 80154ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154ee:	6665      	str	r5, [r4, #100]	; 0x64
 80154f0:	f000 f859 	bl	80155a6 <__retarget_lock_init_recursive>
 80154f4:	f7ff ff96 	bl	8015424 <__sfp_lock_release>
 80154f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80154fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015500:	6025      	str	r5, [r4, #0]
 8015502:	61a5      	str	r5, [r4, #24]
 8015504:	2208      	movs	r2, #8
 8015506:	4629      	mov	r1, r5
 8015508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801550c:	f7fb fac6 	bl	8010a9c <memset>
 8015510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015518:	4620      	mov	r0, r4
 801551a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801551c:	3468      	adds	r4, #104	; 0x68
 801551e:	e7d9      	b.n	80154d4 <__sfp+0x1c>
 8015520:	2104      	movs	r1, #4
 8015522:	4638      	mov	r0, r7
 8015524:	f7ff ff62 	bl	80153ec <__sfmoreglue>
 8015528:	4604      	mov	r4, r0
 801552a:	6030      	str	r0, [r6, #0]
 801552c:	2800      	cmp	r0, #0
 801552e:	d1d5      	bne.n	80154dc <__sfp+0x24>
 8015530:	f7ff ff78 	bl	8015424 <__sfp_lock_release>
 8015534:	230c      	movs	r3, #12
 8015536:	603b      	str	r3, [r7, #0]
 8015538:	e7ee      	b.n	8015518 <__sfp+0x60>
 801553a:	bf00      	nop
 801553c:	080181d0 	.word	0x080181d0
 8015540:	ffff0001 	.word	0xffff0001

08015544 <fiprintf>:
 8015544:	b40e      	push	{r1, r2, r3}
 8015546:	b503      	push	{r0, r1, lr}
 8015548:	4601      	mov	r1, r0
 801554a:	ab03      	add	r3, sp, #12
 801554c:	4805      	ldr	r0, [pc, #20]	; (8015564 <fiprintf+0x20>)
 801554e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015552:	6800      	ldr	r0, [r0, #0]
 8015554:	9301      	str	r3, [sp, #4]
 8015556:	f000 f8a7 	bl	80156a8 <_vfiprintf_r>
 801555a:	b002      	add	sp, #8
 801555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015560:	b003      	add	sp, #12
 8015562:	4770      	bx	lr
 8015564:	2000002c 	.word	0x2000002c

08015568 <_fwalk_reent>:
 8015568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801556c:	4606      	mov	r6, r0
 801556e:	4688      	mov	r8, r1
 8015570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015574:	2700      	movs	r7, #0
 8015576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801557a:	f1b9 0901 	subs.w	r9, r9, #1
 801557e:	d505      	bpl.n	801558c <_fwalk_reent+0x24>
 8015580:	6824      	ldr	r4, [r4, #0]
 8015582:	2c00      	cmp	r4, #0
 8015584:	d1f7      	bne.n	8015576 <_fwalk_reent+0xe>
 8015586:	4638      	mov	r0, r7
 8015588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801558c:	89ab      	ldrh	r3, [r5, #12]
 801558e:	2b01      	cmp	r3, #1
 8015590:	d907      	bls.n	80155a2 <_fwalk_reent+0x3a>
 8015592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015596:	3301      	adds	r3, #1
 8015598:	d003      	beq.n	80155a2 <_fwalk_reent+0x3a>
 801559a:	4629      	mov	r1, r5
 801559c:	4630      	mov	r0, r6
 801559e:	47c0      	blx	r8
 80155a0:	4307      	orrs	r7, r0
 80155a2:	3568      	adds	r5, #104	; 0x68
 80155a4:	e7e9      	b.n	801557a <_fwalk_reent+0x12>

080155a6 <__retarget_lock_init_recursive>:
 80155a6:	4770      	bx	lr

080155a8 <__retarget_lock_acquire_recursive>:
 80155a8:	4770      	bx	lr

080155aa <__retarget_lock_release_recursive>:
 80155aa:	4770      	bx	lr

080155ac <memmove>:
 80155ac:	4288      	cmp	r0, r1
 80155ae:	b510      	push	{r4, lr}
 80155b0:	eb01 0402 	add.w	r4, r1, r2
 80155b4:	d902      	bls.n	80155bc <memmove+0x10>
 80155b6:	4284      	cmp	r4, r0
 80155b8:	4623      	mov	r3, r4
 80155ba:	d807      	bhi.n	80155cc <memmove+0x20>
 80155bc:	1e43      	subs	r3, r0, #1
 80155be:	42a1      	cmp	r1, r4
 80155c0:	d008      	beq.n	80155d4 <memmove+0x28>
 80155c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155ca:	e7f8      	b.n	80155be <memmove+0x12>
 80155cc:	4402      	add	r2, r0
 80155ce:	4601      	mov	r1, r0
 80155d0:	428a      	cmp	r2, r1
 80155d2:	d100      	bne.n	80155d6 <memmove+0x2a>
 80155d4:	bd10      	pop	{r4, pc}
 80155d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80155da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80155de:	e7f7      	b.n	80155d0 <memmove+0x24>

080155e0 <__malloc_lock>:
 80155e0:	4801      	ldr	r0, [pc, #4]	; (80155e8 <__malloc_lock+0x8>)
 80155e2:	f7ff bfe1 	b.w	80155a8 <__retarget_lock_acquire_recursive>
 80155e6:	bf00      	nop
 80155e8:	20004970 	.word	0x20004970

080155ec <__malloc_unlock>:
 80155ec:	4801      	ldr	r0, [pc, #4]	; (80155f4 <__malloc_unlock+0x8>)
 80155ee:	f7ff bfdc 	b.w	80155aa <__retarget_lock_release_recursive>
 80155f2:	bf00      	nop
 80155f4:	20004970 	.word	0x20004970

080155f8 <_realloc_r>:
 80155f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155fc:	4680      	mov	r8, r0
 80155fe:	4614      	mov	r4, r2
 8015600:	460e      	mov	r6, r1
 8015602:	b921      	cbnz	r1, 801560e <_realloc_r+0x16>
 8015604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015608:	4611      	mov	r1, r2
 801560a:	f7fe bfbd 	b.w	8014588 <_malloc_r>
 801560e:	b92a      	cbnz	r2, 801561c <_realloc_r+0x24>
 8015610:	f7fe ff4e 	bl	80144b0 <_free_r>
 8015614:	4625      	mov	r5, r4
 8015616:	4628      	mov	r0, r5
 8015618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561c:	f000 faa0 	bl	8015b60 <_malloc_usable_size_r>
 8015620:	4284      	cmp	r4, r0
 8015622:	4607      	mov	r7, r0
 8015624:	d802      	bhi.n	801562c <_realloc_r+0x34>
 8015626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801562a:	d812      	bhi.n	8015652 <_realloc_r+0x5a>
 801562c:	4621      	mov	r1, r4
 801562e:	4640      	mov	r0, r8
 8015630:	f7fe ffaa 	bl	8014588 <_malloc_r>
 8015634:	4605      	mov	r5, r0
 8015636:	2800      	cmp	r0, #0
 8015638:	d0ed      	beq.n	8015616 <_realloc_r+0x1e>
 801563a:	42bc      	cmp	r4, r7
 801563c:	4622      	mov	r2, r4
 801563e:	4631      	mov	r1, r6
 8015640:	bf28      	it	cs
 8015642:	463a      	movcs	r2, r7
 8015644:	f7fe fa4e 	bl	8013ae4 <memcpy>
 8015648:	4631      	mov	r1, r6
 801564a:	4640      	mov	r0, r8
 801564c:	f7fe ff30 	bl	80144b0 <_free_r>
 8015650:	e7e1      	b.n	8015616 <_realloc_r+0x1e>
 8015652:	4635      	mov	r5, r6
 8015654:	e7df      	b.n	8015616 <_realloc_r+0x1e>

08015656 <__sfputc_r>:
 8015656:	6893      	ldr	r3, [r2, #8]
 8015658:	3b01      	subs	r3, #1
 801565a:	2b00      	cmp	r3, #0
 801565c:	b410      	push	{r4}
 801565e:	6093      	str	r3, [r2, #8]
 8015660:	da08      	bge.n	8015674 <__sfputc_r+0x1e>
 8015662:	6994      	ldr	r4, [r2, #24]
 8015664:	42a3      	cmp	r3, r4
 8015666:	db01      	blt.n	801566c <__sfputc_r+0x16>
 8015668:	290a      	cmp	r1, #10
 801566a:	d103      	bne.n	8015674 <__sfputc_r+0x1e>
 801566c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015670:	f000 b94a 	b.w	8015908 <__swbuf_r>
 8015674:	6813      	ldr	r3, [r2, #0]
 8015676:	1c58      	adds	r0, r3, #1
 8015678:	6010      	str	r0, [r2, #0]
 801567a:	7019      	strb	r1, [r3, #0]
 801567c:	4608      	mov	r0, r1
 801567e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015682:	4770      	bx	lr

08015684 <__sfputs_r>:
 8015684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015686:	4606      	mov	r6, r0
 8015688:	460f      	mov	r7, r1
 801568a:	4614      	mov	r4, r2
 801568c:	18d5      	adds	r5, r2, r3
 801568e:	42ac      	cmp	r4, r5
 8015690:	d101      	bne.n	8015696 <__sfputs_r+0x12>
 8015692:	2000      	movs	r0, #0
 8015694:	e007      	b.n	80156a6 <__sfputs_r+0x22>
 8015696:	f814 1b01 	ldrb.w	r1, [r4], #1
 801569a:	463a      	mov	r2, r7
 801569c:	4630      	mov	r0, r6
 801569e:	f7ff ffda 	bl	8015656 <__sfputc_r>
 80156a2:	1c43      	adds	r3, r0, #1
 80156a4:	d1f3      	bne.n	801568e <__sfputs_r+0xa>
 80156a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156a8 <_vfiprintf_r>:
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	460d      	mov	r5, r1
 80156ae:	b09d      	sub	sp, #116	; 0x74
 80156b0:	4614      	mov	r4, r2
 80156b2:	4698      	mov	r8, r3
 80156b4:	4606      	mov	r6, r0
 80156b6:	b118      	cbz	r0, 80156c0 <_vfiprintf_r+0x18>
 80156b8:	6983      	ldr	r3, [r0, #24]
 80156ba:	b90b      	cbnz	r3, 80156c0 <_vfiprintf_r+0x18>
 80156bc:	f7ff fec4 	bl	8015448 <__sinit>
 80156c0:	4b89      	ldr	r3, [pc, #548]	; (80158e8 <_vfiprintf_r+0x240>)
 80156c2:	429d      	cmp	r5, r3
 80156c4:	d11b      	bne.n	80156fe <_vfiprintf_r+0x56>
 80156c6:	6875      	ldr	r5, [r6, #4]
 80156c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ca:	07d9      	lsls	r1, r3, #31
 80156cc:	d405      	bmi.n	80156da <_vfiprintf_r+0x32>
 80156ce:	89ab      	ldrh	r3, [r5, #12]
 80156d0:	059a      	lsls	r2, r3, #22
 80156d2:	d402      	bmi.n	80156da <_vfiprintf_r+0x32>
 80156d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156d6:	f7ff ff67 	bl	80155a8 <__retarget_lock_acquire_recursive>
 80156da:	89ab      	ldrh	r3, [r5, #12]
 80156dc:	071b      	lsls	r3, r3, #28
 80156de:	d501      	bpl.n	80156e4 <_vfiprintf_r+0x3c>
 80156e0:	692b      	ldr	r3, [r5, #16]
 80156e2:	b9eb      	cbnz	r3, 8015720 <_vfiprintf_r+0x78>
 80156e4:	4629      	mov	r1, r5
 80156e6:	4630      	mov	r0, r6
 80156e8:	f000 f960 	bl	80159ac <__swsetup_r>
 80156ec:	b1c0      	cbz	r0, 8015720 <_vfiprintf_r+0x78>
 80156ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156f0:	07dc      	lsls	r4, r3, #31
 80156f2:	d50e      	bpl.n	8015712 <_vfiprintf_r+0x6a>
 80156f4:	f04f 30ff 	mov.w	r0, #4294967295
 80156f8:	b01d      	add	sp, #116	; 0x74
 80156fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156fe:	4b7b      	ldr	r3, [pc, #492]	; (80158ec <_vfiprintf_r+0x244>)
 8015700:	429d      	cmp	r5, r3
 8015702:	d101      	bne.n	8015708 <_vfiprintf_r+0x60>
 8015704:	68b5      	ldr	r5, [r6, #8]
 8015706:	e7df      	b.n	80156c8 <_vfiprintf_r+0x20>
 8015708:	4b79      	ldr	r3, [pc, #484]	; (80158f0 <_vfiprintf_r+0x248>)
 801570a:	429d      	cmp	r5, r3
 801570c:	bf08      	it	eq
 801570e:	68f5      	ldreq	r5, [r6, #12]
 8015710:	e7da      	b.n	80156c8 <_vfiprintf_r+0x20>
 8015712:	89ab      	ldrh	r3, [r5, #12]
 8015714:	0598      	lsls	r0, r3, #22
 8015716:	d4ed      	bmi.n	80156f4 <_vfiprintf_r+0x4c>
 8015718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801571a:	f7ff ff46 	bl	80155aa <__retarget_lock_release_recursive>
 801571e:	e7e9      	b.n	80156f4 <_vfiprintf_r+0x4c>
 8015720:	2300      	movs	r3, #0
 8015722:	9309      	str	r3, [sp, #36]	; 0x24
 8015724:	2320      	movs	r3, #32
 8015726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801572a:	f8cd 800c 	str.w	r8, [sp, #12]
 801572e:	2330      	movs	r3, #48	; 0x30
 8015730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80158f4 <_vfiprintf_r+0x24c>
 8015734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015738:	f04f 0901 	mov.w	r9, #1
 801573c:	4623      	mov	r3, r4
 801573e:	469a      	mov	sl, r3
 8015740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015744:	b10a      	cbz	r2, 801574a <_vfiprintf_r+0xa2>
 8015746:	2a25      	cmp	r2, #37	; 0x25
 8015748:	d1f9      	bne.n	801573e <_vfiprintf_r+0x96>
 801574a:	ebba 0b04 	subs.w	fp, sl, r4
 801574e:	d00b      	beq.n	8015768 <_vfiprintf_r+0xc0>
 8015750:	465b      	mov	r3, fp
 8015752:	4622      	mov	r2, r4
 8015754:	4629      	mov	r1, r5
 8015756:	4630      	mov	r0, r6
 8015758:	f7ff ff94 	bl	8015684 <__sfputs_r>
 801575c:	3001      	adds	r0, #1
 801575e:	f000 80aa 	beq.w	80158b6 <_vfiprintf_r+0x20e>
 8015762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015764:	445a      	add	r2, fp
 8015766:	9209      	str	r2, [sp, #36]	; 0x24
 8015768:	f89a 3000 	ldrb.w	r3, [sl]
 801576c:	2b00      	cmp	r3, #0
 801576e:	f000 80a2 	beq.w	80158b6 <_vfiprintf_r+0x20e>
 8015772:	2300      	movs	r3, #0
 8015774:	f04f 32ff 	mov.w	r2, #4294967295
 8015778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801577c:	f10a 0a01 	add.w	sl, sl, #1
 8015780:	9304      	str	r3, [sp, #16]
 8015782:	9307      	str	r3, [sp, #28]
 8015784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015788:	931a      	str	r3, [sp, #104]	; 0x68
 801578a:	4654      	mov	r4, sl
 801578c:	2205      	movs	r2, #5
 801578e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015792:	4858      	ldr	r0, [pc, #352]	; (80158f4 <_vfiprintf_r+0x24c>)
 8015794:	f7ea fd44 	bl	8000220 <memchr>
 8015798:	9a04      	ldr	r2, [sp, #16]
 801579a:	b9d8      	cbnz	r0, 80157d4 <_vfiprintf_r+0x12c>
 801579c:	06d1      	lsls	r1, r2, #27
 801579e:	bf44      	itt	mi
 80157a0:	2320      	movmi	r3, #32
 80157a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157a6:	0713      	lsls	r3, r2, #28
 80157a8:	bf44      	itt	mi
 80157aa:	232b      	movmi	r3, #43	; 0x2b
 80157ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157b0:	f89a 3000 	ldrb.w	r3, [sl]
 80157b4:	2b2a      	cmp	r3, #42	; 0x2a
 80157b6:	d015      	beq.n	80157e4 <_vfiprintf_r+0x13c>
 80157b8:	9a07      	ldr	r2, [sp, #28]
 80157ba:	4654      	mov	r4, sl
 80157bc:	2000      	movs	r0, #0
 80157be:	f04f 0c0a 	mov.w	ip, #10
 80157c2:	4621      	mov	r1, r4
 80157c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157c8:	3b30      	subs	r3, #48	; 0x30
 80157ca:	2b09      	cmp	r3, #9
 80157cc:	d94e      	bls.n	801586c <_vfiprintf_r+0x1c4>
 80157ce:	b1b0      	cbz	r0, 80157fe <_vfiprintf_r+0x156>
 80157d0:	9207      	str	r2, [sp, #28]
 80157d2:	e014      	b.n	80157fe <_vfiprintf_r+0x156>
 80157d4:	eba0 0308 	sub.w	r3, r0, r8
 80157d8:	fa09 f303 	lsl.w	r3, r9, r3
 80157dc:	4313      	orrs	r3, r2
 80157de:	9304      	str	r3, [sp, #16]
 80157e0:	46a2      	mov	sl, r4
 80157e2:	e7d2      	b.n	801578a <_vfiprintf_r+0xe2>
 80157e4:	9b03      	ldr	r3, [sp, #12]
 80157e6:	1d19      	adds	r1, r3, #4
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	9103      	str	r1, [sp, #12]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	bfbb      	ittet	lt
 80157f0:	425b      	neglt	r3, r3
 80157f2:	f042 0202 	orrlt.w	r2, r2, #2
 80157f6:	9307      	strge	r3, [sp, #28]
 80157f8:	9307      	strlt	r3, [sp, #28]
 80157fa:	bfb8      	it	lt
 80157fc:	9204      	strlt	r2, [sp, #16]
 80157fe:	7823      	ldrb	r3, [r4, #0]
 8015800:	2b2e      	cmp	r3, #46	; 0x2e
 8015802:	d10c      	bne.n	801581e <_vfiprintf_r+0x176>
 8015804:	7863      	ldrb	r3, [r4, #1]
 8015806:	2b2a      	cmp	r3, #42	; 0x2a
 8015808:	d135      	bne.n	8015876 <_vfiprintf_r+0x1ce>
 801580a:	9b03      	ldr	r3, [sp, #12]
 801580c:	1d1a      	adds	r2, r3, #4
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	9203      	str	r2, [sp, #12]
 8015812:	2b00      	cmp	r3, #0
 8015814:	bfb8      	it	lt
 8015816:	f04f 33ff 	movlt.w	r3, #4294967295
 801581a:	3402      	adds	r4, #2
 801581c:	9305      	str	r3, [sp, #20]
 801581e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015904 <_vfiprintf_r+0x25c>
 8015822:	7821      	ldrb	r1, [r4, #0]
 8015824:	2203      	movs	r2, #3
 8015826:	4650      	mov	r0, sl
 8015828:	f7ea fcfa 	bl	8000220 <memchr>
 801582c:	b140      	cbz	r0, 8015840 <_vfiprintf_r+0x198>
 801582e:	2340      	movs	r3, #64	; 0x40
 8015830:	eba0 000a 	sub.w	r0, r0, sl
 8015834:	fa03 f000 	lsl.w	r0, r3, r0
 8015838:	9b04      	ldr	r3, [sp, #16]
 801583a:	4303      	orrs	r3, r0
 801583c:	3401      	adds	r4, #1
 801583e:	9304      	str	r3, [sp, #16]
 8015840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015844:	482c      	ldr	r0, [pc, #176]	; (80158f8 <_vfiprintf_r+0x250>)
 8015846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801584a:	2206      	movs	r2, #6
 801584c:	f7ea fce8 	bl	8000220 <memchr>
 8015850:	2800      	cmp	r0, #0
 8015852:	d03f      	beq.n	80158d4 <_vfiprintf_r+0x22c>
 8015854:	4b29      	ldr	r3, [pc, #164]	; (80158fc <_vfiprintf_r+0x254>)
 8015856:	bb1b      	cbnz	r3, 80158a0 <_vfiprintf_r+0x1f8>
 8015858:	9b03      	ldr	r3, [sp, #12]
 801585a:	3307      	adds	r3, #7
 801585c:	f023 0307 	bic.w	r3, r3, #7
 8015860:	3308      	adds	r3, #8
 8015862:	9303      	str	r3, [sp, #12]
 8015864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015866:	443b      	add	r3, r7
 8015868:	9309      	str	r3, [sp, #36]	; 0x24
 801586a:	e767      	b.n	801573c <_vfiprintf_r+0x94>
 801586c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015870:	460c      	mov	r4, r1
 8015872:	2001      	movs	r0, #1
 8015874:	e7a5      	b.n	80157c2 <_vfiprintf_r+0x11a>
 8015876:	2300      	movs	r3, #0
 8015878:	3401      	adds	r4, #1
 801587a:	9305      	str	r3, [sp, #20]
 801587c:	4619      	mov	r1, r3
 801587e:	f04f 0c0a 	mov.w	ip, #10
 8015882:	4620      	mov	r0, r4
 8015884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015888:	3a30      	subs	r2, #48	; 0x30
 801588a:	2a09      	cmp	r2, #9
 801588c:	d903      	bls.n	8015896 <_vfiprintf_r+0x1ee>
 801588e:	2b00      	cmp	r3, #0
 8015890:	d0c5      	beq.n	801581e <_vfiprintf_r+0x176>
 8015892:	9105      	str	r1, [sp, #20]
 8015894:	e7c3      	b.n	801581e <_vfiprintf_r+0x176>
 8015896:	fb0c 2101 	mla	r1, ip, r1, r2
 801589a:	4604      	mov	r4, r0
 801589c:	2301      	movs	r3, #1
 801589e:	e7f0      	b.n	8015882 <_vfiprintf_r+0x1da>
 80158a0:	ab03      	add	r3, sp, #12
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	462a      	mov	r2, r5
 80158a6:	4b16      	ldr	r3, [pc, #88]	; (8015900 <_vfiprintf_r+0x258>)
 80158a8:	a904      	add	r1, sp, #16
 80158aa:	4630      	mov	r0, r6
 80158ac:	f7fb f99e 	bl	8010bec <_printf_float>
 80158b0:	4607      	mov	r7, r0
 80158b2:	1c78      	adds	r0, r7, #1
 80158b4:	d1d6      	bne.n	8015864 <_vfiprintf_r+0x1bc>
 80158b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158b8:	07d9      	lsls	r1, r3, #31
 80158ba:	d405      	bmi.n	80158c8 <_vfiprintf_r+0x220>
 80158bc:	89ab      	ldrh	r3, [r5, #12]
 80158be:	059a      	lsls	r2, r3, #22
 80158c0:	d402      	bmi.n	80158c8 <_vfiprintf_r+0x220>
 80158c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158c4:	f7ff fe71 	bl	80155aa <__retarget_lock_release_recursive>
 80158c8:	89ab      	ldrh	r3, [r5, #12]
 80158ca:	065b      	lsls	r3, r3, #25
 80158cc:	f53f af12 	bmi.w	80156f4 <_vfiprintf_r+0x4c>
 80158d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158d2:	e711      	b.n	80156f8 <_vfiprintf_r+0x50>
 80158d4:	ab03      	add	r3, sp, #12
 80158d6:	9300      	str	r3, [sp, #0]
 80158d8:	462a      	mov	r2, r5
 80158da:	4b09      	ldr	r3, [pc, #36]	; (8015900 <_vfiprintf_r+0x258>)
 80158dc:	a904      	add	r1, sp, #16
 80158de:	4630      	mov	r0, r6
 80158e0:	f7fb fc28 	bl	8011134 <_printf_i>
 80158e4:	e7e4      	b.n	80158b0 <_vfiprintf_r+0x208>
 80158e6:	bf00      	nop
 80158e8:	0801864c 	.word	0x0801864c
 80158ec:	0801866c 	.word	0x0801866c
 80158f0:	0801862c 	.word	0x0801862c
 80158f4:	080185c4 	.word	0x080185c4
 80158f8:	080185ce 	.word	0x080185ce
 80158fc:	08010bed 	.word	0x08010bed
 8015900:	08015685 	.word	0x08015685
 8015904:	080185ca 	.word	0x080185ca

08015908 <__swbuf_r>:
 8015908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801590a:	460e      	mov	r6, r1
 801590c:	4614      	mov	r4, r2
 801590e:	4605      	mov	r5, r0
 8015910:	b118      	cbz	r0, 801591a <__swbuf_r+0x12>
 8015912:	6983      	ldr	r3, [r0, #24]
 8015914:	b90b      	cbnz	r3, 801591a <__swbuf_r+0x12>
 8015916:	f7ff fd97 	bl	8015448 <__sinit>
 801591a:	4b21      	ldr	r3, [pc, #132]	; (80159a0 <__swbuf_r+0x98>)
 801591c:	429c      	cmp	r4, r3
 801591e:	d12b      	bne.n	8015978 <__swbuf_r+0x70>
 8015920:	686c      	ldr	r4, [r5, #4]
 8015922:	69a3      	ldr	r3, [r4, #24]
 8015924:	60a3      	str	r3, [r4, #8]
 8015926:	89a3      	ldrh	r3, [r4, #12]
 8015928:	071a      	lsls	r2, r3, #28
 801592a:	d52f      	bpl.n	801598c <__swbuf_r+0x84>
 801592c:	6923      	ldr	r3, [r4, #16]
 801592e:	b36b      	cbz	r3, 801598c <__swbuf_r+0x84>
 8015930:	6923      	ldr	r3, [r4, #16]
 8015932:	6820      	ldr	r0, [r4, #0]
 8015934:	1ac0      	subs	r0, r0, r3
 8015936:	6963      	ldr	r3, [r4, #20]
 8015938:	b2f6      	uxtb	r6, r6
 801593a:	4283      	cmp	r3, r0
 801593c:	4637      	mov	r7, r6
 801593e:	dc04      	bgt.n	801594a <__swbuf_r+0x42>
 8015940:	4621      	mov	r1, r4
 8015942:	4628      	mov	r0, r5
 8015944:	f7ff fcec 	bl	8015320 <_fflush_r>
 8015948:	bb30      	cbnz	r0, 8015998 <__swbuf_r+0x90>
 801594a:	68a3      	ldr	r3, [r4, #8]
 801594c:	3b01      	subs	r3, #1
 801594e:	60a3      	str	r3, [r4, #8]
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	1c5a      	adds	r2, r3, #1
 8015954:	6022      	str	r2, [r4, #0]
 8015956:	701e      	strb	r6, [r3, #0]
 8015958:	6963      	ldr	r3, [r4, #20]
 801595a:	3001      	adds	r0, #1
 801595c:	4283      	cmp	r3, r0
 801595e:	d004      	beq.n	801596a <__swbuf_r+0x62>
 8015960:	89a3      	ldrh	r3, [r4, #12]
 8015962:	07db      	lsls	r3, r3, #31
 8015964:	d506      	bpl.n	8015974 <__swbuf_r+0x6c>
 8015966:	2e0a      	cmp	r6, #10
 8015968:	d104      	bne.n	8015974 <__swbuf_r+0x6c>
 801596a:	4621      	mov	r1, r4
 801596c:	4628      	mov	r0, r5
 801596e:	f7ff fcd7 	bl	8015320 <_fflush_r>
 8015972:	b988      	cbnz	r0, 8015998 <__swbuf_r+0x90>
 8015974:	4638      	mov	r0, r7
 8015976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015978:	4b0a      	ldr	r3, [pc, #40]	; (80159a4 <__swbuf_r+0x9c>)
 801597a:	429c      	cmp	r4, r3
 801597c:	d101      	bne.n	8015982 <__swbuf_r+0x7a>
 801597e:	68ac      	ldr	r4, [r5, #8]
 8015980:	e7cf      	b.n	8015922 <__swbuf_r+0x1a>
 8015982:	4b09      	ldr	r3, [pc, #36]	; (80159a8 <__swbuf_r+0xa0>)
 8015984:	429c      	cmp	r4, r3
 8015986:	bf08      	it	eq
 8015988:	68ec      	ldreq	r4, [r5, #12]
 801598a:	e7ca      	b.n	8015922 <__swbuf_r+0x1a>
 801598c:	4621      	mov	r1, r4
 801598e:	4628      	mov	r0, r5
 8015990:	f000 f80c 	bl	80159ac <__swsetup_r>
 8015994:	2800      	cmp	r0, #0
 8015996:	d0cb      	beq.n	8015930 <__swbuf_r+0x28>
 8015998:	f04f 37ff 	mov.w	r7, #4294967295
 801599c:	e7ea      	b.n	8015974 <__swbuf_r+0x6c>
 801599e:	bf00      	nop
 80159a0:	0801864c 	.word	0x0801864c
 80159a4:	0801866c 	.word	0x0801866c
 80159a8:	0801862c 	.word	0x0801862c

080159ac <__swsetup_r>:
 80159ac:	4b32      	ldr	r3, [pc, #200]	; (8015a78 <__swsetup_r+0xcc>)
 80159ae:	b570      	push	{r4, r5, r6, lr}
 80159b0:	681d      	ldr	r5, [r3, #0]
 80159b2:	4606      	mov	r6, r0
 80159b4:	460c      	mov	r4, r1
 80159b6:	b125      	cbz	r5, 80159c2 <__swsetup_r+0x16>
 80159b8:	69ab      	ldr	r3, [r5, #24]
 80159ba:	b913      	cbnz	r3, 80159c2 <__swsetup_r+0x16>
 80159bc:	4628      	mov	r0, r5
 80159be:	f7ff fd43 	bl	8015448 <__sinit>
 80159c2:	4b2e      	ldr	r3, [pc, #184]	; (8015a7c <__swsetup_r+0xd0>)
 80159c4:	429c      	cmp	r4, r3
 80159c6:	d10f      	bne.n	80159e8 <__swsetup_r+0x3c>
 80159c8:	686c      	ldr	r4, [r5, #4]
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159d0:	0719      	lsls	r1, r3, #28
 80159d2:	d42c      	bmi.n	8015a2e <__swsetup_r+0x82>
 80159d4:	06dd      	lsls	r5, r3, #27
 80159d6:	d411      	bmi.n	80159fc <__swsetup_r+0x50>
 80159d8:	2309      	movs	r3, #9
 80159da:	6033      	str	r3, [r6, #0]
 80159dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159e0:	81a3      	strh	r3, [r4, #12]
 80159e2:	f04f 30ff 	mov.w	r0, #4294967295
 80159e6:	e03e      	b.n	8015a66 <__swsetup_r+0xba>
 80159e8:	4b25      	ldr	r3, [pc, #148]	; (8015a80 <__swsetup_r+0xd4>)
 80159ea:	429c      	cmp	r4, r3
 80159ec:	d101      	bne.n	80159f2 <__swsetup_r+0x46>
 80159ee:	68ac      	ldr	r4, [r5, #8]
 80159f0:	e7eb      	b.n	80159ca <__swsetup_r+0x1e>
 80159f2:	4b24      	ldr	r3, [pc, #144]	; (8015a84 <__swsetup_r+0xd8>)
 80159f4:	429c      	cmp	r4, r3
 80159f6:	bf08      	it	eq
 80159f8:	68ec      	ldreq	r4, [r5, #12]
 80159fa:	e7e6      	b.n	80159ca <__swsetup_r+0x1e>
 80159fc:	0758      	lsls	r0, r3, #29
 80159fe:	d512      	bpl.n	8015a26 <__swsetup_r+0x7a>
 8015a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a02:	b141      	cbz	r1, 8015a16 <__swsetup_r+0x6a>
 8015a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a08:	4299      	cmp	r1, r3
 8015a0a:	d002      	beq.n	8015a12 <__swsetup_r+0x66>
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f7fe fd4f 	bl	80144b0 <_free_r>
 8015a12:	2300      	movs	r3, #0
 8015a14:	6363      	str	r3, [r4, #52]	; 0x34
 8015a16:	89a3      	ldrh	r3, [r4, #12]
 8015a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a1c:	81a3      	strh	r3, [r4, #12]
 8015a1e:	2300      	movs	r3, #0
 8015a20:	6063      	str	r3, [r4, #4]
 8015a22:	6923      	ldr	r3, [r4, #16]
 8015a24:	6023      	str	r3, [r4, #0]
 8015a26:	89a3      	ldrh	r3, [r4, #12]
 8015a28:	f043 0308 	orr.w	r3, r3, #8
 8015a2c:	81a3      	strh	r3, [r4, #12]
 8015a2e:	6923      	ldr	r3, [r4, #16]
 8015a30:	b94b      	cbnz	r3, 8015a46 <__swsetup_r+0x9a>
 8015a32:	89a3      	ldrh	r3, [r4, #12]
 8015a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a3c:	d003      	beq.n	8015a46 <__swsetup_r+0x9a>
 8015a3e:	4621      	mov	r1, r4
 8015a40:	4630      	mov	r0, r6
 8015a42:	f000 f84d 	bl	8015ae0 <__smakebuf_r>
 8015a46:	89a0      	ldrh	r0, [r4, #12]
 8015a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a4c:	f010 0301 	ands.w	r3, r0, #1
 8015a50:	d00a      	beq.n	8015a68 <__swsetup_r+0xbc>
 8015a52:	2300      	movs	r3, #0
 8015a54:	60a3      	str	r3, [r4, #8]
 8015a56:	6963      	ldr	r3, [r4, #20]
 8015a58:	425b      	negs	r3, r3
 8015a5a:	61a3      	str	r3, [r4, #24]
 8015a5c:	6923      	ldr	r3, [r4, #16]
 8015a5e:	b943      	cbnz	r3, 8015a72 <__swsetup_r+0xc6>
 8015a60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a64:	d1ba      	bne.n	80159dc <__swsetup_r+0x30>
 8015a66:	bd70      	pop	{r4, r5, r6, pc}
 8015a68:	0781      	lsls	r1, r0, #30
 8015a6a:	bf58      	it	pl
 8015a6c:	6963      	ldrpl	r3, [r4, #20]
 8015a6e:	60a3      	str	r3, [r4, #8]
 8015a70:	e7f4      	b.n	8015a5c <__swsetup_r+0xb0>
 8015a72:	2000      	movs	r0, #0
 8015a74:	e7f7      	b.n	8015a66 <__swsetup_r+0xba>
 8015a76:	bf00      	nop
 8015a78:	2000002c 	.word	0x2000002c
 8015a7c:	0801864c 	.word	0x0801864c
 8015a80:	0801866c 	.word	0x0801866c
 8015a84:	0801862c 	.word	0x0801862c

08015a88 <abort>:
 8015a88:	b508      	push	{r3, lr}
 8015a8a:	2006      	movs	r0, #6
 8015a8c:	f000 f898 	bl	8015bc0 <raise>
 8015a90:	2001      	movs	r0, #1
 8015a92:	f7f0 ff11 	bl	80068b8 <_exit>

08015a96 <__swhatbuf_r>:
 8015a96:	b570      	push	{r4, r5, r6, lr}
 8015a98:	460e      	mov	r6, r1
 8015a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a9e:	2900      	cmp	r1, #0
 8015aa0:	b096      	sub	sp, #88	; 0x58
 8015aa2:	4614      	mov	r4, r2
 8015aa4:	461d      	mov	r5, r3
 8015aa6:	da08      	bge.n	8015aba <__swhatbuf_r+0x24>
 8015aa8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015aac:	2200      	movs	r2, #0
 8015aae:	602a      	str	r2, [r5, #0]
 8015ab0:	061a      	lsls	r2, r3, #24
 8015ab2:	d410      	bmi.n	8015ad6 <__swhatbuf_r+0x40>
 8015ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ab8:	e00e      	b.n	8015ad8 <__swhatbuf_r+0x42>
 8015aba:	466a      	mov	r2, sp
 8015abc:	f000 f89c 	bl	8015bf8 <_fstat_r>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	dbf1      	blt.n	8015aa8 <__swhatbuf_r+0x12>
 8015ac4:	9a01      	ldr	r2, [sp, #4]
 8015ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ace:	425a      	negs	r2, r3
 8015ad0:	415a      	adcs	r2, r3
 8015ad2:	602a      	str	r2, [r5, #0]
 8015ad4:	e7ee      	b.n	8015ab4 <__swhatbuf_r+0x1e>
 8015ad6:	2340      	movs	r3, #64	; 0x40
 8015ad8:	2000      	movs	r0, #0
 8015ada:	6023      	str	r3, [r4, #0]
 8015adc:	b016      	add	sp, #88	; 0x58
 8015ade:	bd70      	pop	{r4, r5, r6, pc}

08015ae0 <__smakebuf_r>:
 8015ae0:	898b      	ldrh	r3, [r1, #12]
 8015ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ae4:	079d      	lsls	r5, r3, #30
 8015ae6:	4606      	mov	r6, r0
 8015ae8:	460c      	mov	r4, r1
 8015aea:	d507      	bpl.n	8015afc <__smakebuf_r+0x1c>
 8015aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015af0:	6023      	str	r3, [r4, #0]
 8015af2:	6123      	str	r3, [r4, #16]
 8015af4:	2301      	movs	r3, #1
 8015af6:	6163      	str	r3, [r4, #20]
 8015af8:	b002      	add	sp, #8
 8015afa:	bd70      	pop	{r4, r5, r6, pc}
 8015afc:	ab01      	add	r3, sp, #4
 8015afe:	466a      	mov	r2, sp
 8015b00:	f7ff ffc9 	bl	8015a96 <__swhatbuf_r>
 8015b04:	9900      	ldr	r1, [sp, #0]
 8015b06:	4605      	mov	r5, r0
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f7fe fd3d 	bl	8014588 <_malloc_r>
 8015b0e:	b948      	cbnz	r0, 8015b24 <__smakebuf_r+0x44>
 8015b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b14:	059a      	lsls	r2, r3, #22
 8015b16:	d4ef      	bmi.n	8015af8 <__smakebuf_r+0x18>
 8015b18:	f023 0303 	bic.w	r3, r3, #3
 8015b1c:	f043 0302 	orr.w	r3, r3, #2
 8015b20:	81a3      	strh	r3, [r4, #12]
 8015b22:	e7e3      	b.n	8015aec <__smakebuf_r+0xc>
 8015b24:	4b0d      	ldr	r3, [pc, #52]	; (8015b5c <__smakebuf_r+0x7c>)
 8015b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b28:	89a3      	ldrh	r3, [r4, #12]
 8015b2a:	6020      	str	r0, [r4, #0]
 8015b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b30:	81a3      	strh	r3, [r4, #12]
 8015b32:	9b00      	ldr	r3, [sp, #0]
 8015b34:	6163      	str	r3, [r4, #20]
 8015b36:	9b01      	ldr	r3, [sp, #4]
 8015b38:	6120      	str	r0, [r4, #16]
 8015b3a:	b15b      	cbz	r3, 8015b54 <__smakebuf_r+0x74>
 8015b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b40:	4630      	mov	r0, r6
 8015b42:	f000 f86b 	bl	8015c1c <_isatty_r>
 8015b46:	b128      	cbz	r0, 8015b54 <__smakebuf_r+0x74>
 8015b48:	89a3      	ldrh	r3, [r4, #12]
 8015b4a:	f023 0303 	bic.w	r3, r3, #3
 8015b4e:	f043 0301 	orr.w	r3, r3, #1
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	89a0      	ldrh	r0, [r4, #12]
 8015b56:	4305      	orrs	r5, r0
 8015b58:	81a5      	strh	r5, [r4, #12]
 8015b5a:	e7cd      	b.n	8015af8 <__smakebuf_r+0x18>
 8015b5c:	080153e1 	.word	0x080153e1

08015b60 <_malloc_usable_size_r>:
 8015b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b64:	1f18      	subs	r0, r3, #4
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	bfbc      	itt	lt
 8015b6a:	580b      	ldrlt	r3, [r1, r0]
 8015b6c:	18c0      	addlt	r0, r0, r3
 8015b6e:	4770      	bx	lr

08015b70 <_raise_r>:
 8015b70:	291f      	cmp	r1, #31
 8015b72:	b538      	push	{r3, r4, r5, lr}
 8015b74:	4604      	mov	r4, r0
 8015b76:	460d      	mov	r5, r1
 8015b78:	d904      	bls.n	8015b84 <_raise_r+0x14>
 8015b7a:	2316      	movs	r3, #22
 8015b7c:	6003      	str	r3, [r0, #0]
 8015b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8015b82:	bd38      	pop	{r3, r4, r5, pc}
 8015b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b86:	b112      	cbz	r2, 8015b8e <_raise_r+0x1e>
 8015b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b8c:	b94b      	cbnz	r3, 8015ba2 <_raise_r+0x32>
 8015b8e:	4620      	mov	r0, r4
 8015b90:	f000 f830 	bl	8015bf4 <_getpid_r>
 8015b94:	462a      	mov	r2, r5
 8015b96:	4601      	mov	r1, r0
 8015b98:	4620      	mov	r0, r4
 8015b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b9e:	f000 b817 	b.w	8015bd0 <_kill_r>
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d00a      	beq.n	8015bbc <_raise_r+0x4c>
 8015ba6:	1c59      	adds	r1, r3, #1
 8015ba8:	d103      	bne.n	8015bb2 <_raise_r+0x42>
 8015baa:	2316      	movs	r3, #22
 8015bac:	6003      	str	r3, [r0, #0]
 8015bae:	2001      	movs	r0, #1
 8015bb0:	e7e7      	b.n	8015b82 <_raise_r+0x12>
 8015bb2:	2400      	movs	r4, #0
 8015bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015bb8:	4628      	mov	r0, r5
 8015bba:	4798      	blx	r3
 8015bbc:	2000      	movs	r0, #0
 8015bbe:	e7e0      	b.n	8015b82 <_raise_r+0x12>

08015bc0 <raise>:
 8015bc0:	4b02      	ldr	r3, [pc, #8]	; (8015bcc <raise+0xc>)
 8015bc2:	4601      	mov	r1, r0
 8015bc4:	6818      	ldr	r0, [r3, #0]
 8015bc6:	f7ff bfd3 	b.w	8015b70 <_raise_r>
 8015bca:	bf00      	nop
 8015bcc:	2000002c 	.word	0x2000002c

08015bd0 <_kill_r>:
 8015bd0:	b538      	push	{r3, r4, r5, lr}
 8015bd2:	4d07      	ldr	r5, [pc, #28]	; (8015bf0 <_kill_r+0x20>)
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	4608      	mov	r0, r1
 8015bda:	4611      	mov	r1, r2
 8015bdc:	602b      	str	r3, [r5, #0]
 8015bde:	f7f0 fe5b 	bl	8006898 <_kill>
 8015be2:	1c43      	adds	r3, r0, #1
 8015be4:	d102      	bne.n	8015bec <_kill_r+0x1c>
 8015be6:	682b      	ldr	r3, [r5, #0]
 8015be8:	b103      	cbz	r3, 8015bec <_kill_r+0x1c>
 8015bea:	6023      	str	r3, [r4, #0]
 8015bec:	bd38      	pop	{r3, r4, r5, pc}
 8015bee:	bf00      	nop
 8015bf0:	2000496c 	.word	0x2000496c

08015bf4 <_getpid_r>:
 8015bf4:	f7f0 be48 	b.w	8006888 <_getpid>

08015bf8 <_fstat_r>:
 8015bf8:	b538      	push	{r3, r4, r5, lr}
 8015bfa:	4d07      	ldr	r5, [pc, #28]	; (8015c18 <_fstat_r+0x20>)
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	4604      	mov	r4, r0
 8015c00:	4608      	mov	r0, r1
 8015c02:	4611      	mov	r1, r2
 8015c04:	602b      	str	r3, [r5, #0]
 8015c06:	f7f0 fea6 	bl	8006956 <_fstat>
 8015c0a:	1c43      	adds	r3, r0, #1
 8015c0c:	d102      	bne.n	8015c14 <_fstat_r+0x1c>
 8015c0e:	682b      	ldr	r3, [r5, #0]
 8015c10:	b103      	cbz	r3, 8015c14 <_fstat_r+0x1c>
 8015c12:	6023      	str	r3, [r4, #0]
 8015c14:	bd38      	pop	{r3, r4, r5, pc}
 8015c16:	bf00      	nop
 8015c18:	2000496c 	.word	0x2000496c

08015c1c <_isatty_r>:
 8015c1c:	b538      	push	{r3, r4, r5, lr}
 8015c1e:	4d06      	ldr	r5, [pc, #24]	; (8015c38 <_isatty_r+0x1c>)
 8015c20:	2300      	movs	r3, #0
 8015c22:	4604      	mov	r4, r0
 8015c24:	4608      	mov	r0, r1
 8015c26:	602b      	str	r3, [r5, #0]
 8015c28:	f7f0 fea5 	bl	8006976 <_isatty>
 8015c2c:	1c43      	adds	r3, r0, #1
 8015c2e:	d102      	bne.n	8015c36 <_isatty_r+0x1a>
 8015c30:	682b      	ldr	r3, [r5, #0]
 8015c32:	b103      	cbz	r3, 8015c36 <_isatty_r+0x1a>
 8015c34:	6023      	str	r3, [r4, #0]
 8015c36:	bd38      	pop	{r3, r4, r5, pc}
 8015c38:	2000496c 	.word	0x2000496c

08015c3c <acos>:
 8015c3c:	b538      	push	{r3, r4, r5, lr}
 8015c3e:	ed2d 8b02 	vpush	{d8}
 8015c42:	ec55 4b10 	vmov	r4, r5, d0
 8015c46:	f000 f91f 	bl	8015e88 <__ieee754_acos>
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	462b      	mov	r3, r5
 8015c4e:	4620      	mov	r0, r4
 8015c50:	4629      	mov	r1, r5
 8015c52:	eeb0 8a40 	vmov.f32	s16, s0
 8015c56:	eef0 8a60 	vmov.f32	s17, s1
 8015c5a:	f7ea ff87 	bl	8000b6c <__aeabi_dcmpun>
 8015c5e:	b9a8      	cbnz	r0, 8015c8c <acos+0x50>
 8015c60:	ec45 4b10 	vmov	d0, r4, r5
 8015c64:	f001 fe04 	bl	8017870 <fabs>
 8015c68:	4b0c      	ldr	r3, [pc, #48]	; (8015c9c <acos+0x60>)
 8015c6a:	ec51 0b10 	vmov	r0, r1, d0
 8015c6e:	2200      	movs	r2, #0
 8015c70:	f7ea ff72 	bl	8000b58 <__aeabi_dcmpgt>
 8015c74:	b150      	cbz	r0, 8015c8c <acos+0x50>
 8015c76:	f7fa fee7 	bl	8010a48 <__errno>
 8015c7a:	ecbd 8b02 	vpop	{d8}
 8015c7e:	2321      	movs	r3, #33	; 0x21
 8015c80:	6003      	str	r3, [r0, #0]
 8015c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c86:	4806      	ldr	r0, [pc, #24]	; (8015ca0 <acos+0x64>)
 8015c88:	f7ff b986 	b.w	8014f98 <nan>
 8015c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8015c90:	eef0 0a68 	vmov.f32	s1, s17
 8015c94:	ecbd 8b02 	vpop	{d8}
 8015c98:	bd38      	pop	{r3, r4, r5, pc}
 8015c9a:	bf00      	nop
 8015c9c:	3ff00000 	.word	0x3ff00000
 8015ca0:	0801862b 	.word	0x0801862b

08015ca4 <asin>:
 8015ca4:	b538      	push	{r3, r4, r5, lr}
 8015ca6:	ed2d 8b02 	vpush	{d8}
 8015caa:	ec55 4b10 	vmov	r4, r5, d0
 8015cae:	f000 fb4b 	bl	8016348 <__ieee754_asin>
 8015cb2:	4622      	mov	r2, r4
 8015cb4:	462b      	mov	r3, r5
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	4629      	mov	r1, r5
 8015cba:	eeb0 8a40 	vmov.f32	s16, s0
 8015cbe:	eef0 8a60 	vmov.f32	s17, s1
 8015cc2:	f7ea ff53 	bl	8000b6c <__aeabi_dcmpun>
 8015cc6:	b9a8      	cbnz	r0, 8015cf4 <asin+0x50>
 8015cc8:	ec45 4b10 	vmov	d0, r4, r5
 8015ccc:	f001 fdd0 	bl	8017870 <fabs>
 8015cd0:	4b0c      	ldr	r3, [pc, #48]	; (8015d04 <asin+0x60>)
 8015cd2:	ec51 0b10 	vmov	r0, r1, d0
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f7ea ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 8015cdc:	b150      	cbz	r0, 8015cf4 <asin+0x50>
 8015cde:	f7fa feb3 	bl	8010a48 <__errno>
 8015ce2:	ecbd 8b02 	vpop	{d8}
 8015ce6:	2321      	movs	r3, #33	; 0x21
 8015ce8:	6003      	str	r3, [r0, #0]
 8015cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cee:	4806      	ldr	r0, [pc, #24]	; (8015d08 <asin+0x64>)
 8015cf0:	f7ff b952 	b.w	8014f98 <nan>
 8015cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8015cf8:	eef0 0a68 	vmov.f32	s1, s17
 8015cfc:	ecbd 8b02 	vpop	{d8}
 8015d00:	bd38      	pop	{r3, r4, r5, pc}
 8015d02:	bf00      	nop
 8015d04:	3ff00000 	.word	0x3ff00000
 8015d08:	0801862b 	.word	0x0801862b

08015d0c <atan2>:
 8015d0c:	f000 bd30 	b.w	8016770 <__ieee754_atan2>

08015d10 <pow>:
 8015d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d12:	ed2d 8b02 	vpush	{d8}
 8015d16:	eeb0 8a40 	vmov.f32	s16, s0
 8015d1a:	eef0 8a60 	vmov.f32	s17, s1
 8015d1e:	ec55 4b11 	vmov	r4, r5, d1
 8015d22:	f000 fdf1 	bl	8016908 <__ieee754_pow>
 8015d26:	4622      	mov	r2, r4
 8015d28:	462b      	mov	r3, r5
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	ec57 6b10 	vmov	r6, r7, d0
 8015d32:	f7ea ff1b 	bl	8000b6c <__aeabi_dcmpun>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d13b      	bne.n	8015db2 <pow+0xa2>
 8015d3a:	ec51 0b18 	vmov	r0, r1, d8
 8015d3e:	2200      	movs	r2, #0
 8015d40:	2300      	movs	r3, #0
 8015d42:	f7ea fee1 	bl	8000b08 <__aeabi_dcmpeq>
 8015d46:	b1b8      	cbz	r0, 8015d78 <pow+0x68>
 8015d48:	2200      	movs	r2, #0
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	4629      	mov	r1, r5
 8015d50:	f7ea feda 	bl	8000b08 <__aeabi_dcmpeq>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d146      	bne.n	8015de6 <pow+0xd6>
 8015d58:	ec45 4b10 	vmov	d0, r4, r5
 8015d5c:	f001 fd91 	bl	8017882 <finite>
 8015d60:	b338      	cbz	r0, 8015db2 <pow+0xa2>
 8015d62:	2200      	movs	r2, #0
 8015d64:	2300      	movs	r3, #0
 8015d66:	4620      	mov	r0, r4
 8015d68:	4629      	mov	r1, r5
 8015d6a:	f7ea fed7 	bl	8000b1c <__aeabi_dcmplt>
 8015d6e:	b300      	cbz	r0, 8015db2 <pow+0xa2>
 8015d70:	f7fa fe6a 	bl	8010a48 <__errno>
 8015d74:	2322      	movs	r3, #34	; 0x22
 8015d76:	e01b      	b.n	8015db0 <pow+0xa0>
 8015d78:	ec47 6b10 	vmov	d0, r6, r7
 8015d7c:	f001 fd81 	bl	8017882 <finite>
 8015d80:	b9e0      	cbnz	r0, 8015dbc <pow+0xac>
 8015d82:	eeb0 0a48 	vmov.f32	s0, s16
 8015d86:	eef0 0a68 	vmov.f32	s1, s17
 8015d8a:	f001 fd7a 	bl	8017882 <finite>
 8015d8e:	b1a8      	cbz	r0, 8015dbc <pow+0xac>
 8015d90:	ec45 4b10 	vmov	d0, r4, r5
 8015d94:	f001 fd75 	bl	8017882 <finite>
 8015d98:	b180      	cbz	r0, 8015dbc <pow+0xac>
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	463b      	mov	r3, r7
 8015d9e:	4630      	mov	r0, r6
 8015da0:	4639      	mov	r1, r7
 8015da2:	f7ea fee3 	bl	8000b6c <__aeabi_dcmpun>
 8015da6:	2800      	cmp	r0, #0
 8015da8:	d0e2      	beq.n	8015d70 <pow+0x60>
 8015daa:	f7fa fe4d 	bl	8010a48 <__errno>
 8015dae:	2321      	movs	r3, #33	; 0x21
 8015db0:	6003      	str	r3, [r0, #0]
 8015db2:	ecbd 8b02 	vpop	{d8}
 8015db6:	ec47 6b10 	vmov	d0, r6, r7
 8015dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	4639      	mov	r1, r7
 8015dc4:	f7ea fea0 	bl	8000b08 <__aeabi_dcmpeq>
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	d0f2      	beq.n	8015db2 <pow+0xa2>
 8015dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8015dd0:	eef0 0a68 	vmov.f32	s1, s17
 8015dd4:	f001 fd55 	bl	8017882 <finite>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d0ea      	beq.n	8015db2 <pow+0xa2>
 8015ddc:	ec45 4b10 	vmov	d0, r4, r5
 8015de0:	f001 fd4f 	bl	8017882 <finite>
 8015de4:	e7c3      	b.n	8015d6e <pow+0x5e>
 8015de6:	4f01      	ldr	r7, [pc, #4]	; (8015dec <pow+0xdc>)
 8015de8:	2600      	movs	r6, #0
 8015dea:	e7e2      	b.n	8015db2 <pow+0xa2>
 8015dec:	3ff00000 	.word	0x3ff00000

08015df0 <sqrt>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	ed2d 8b02 	vpush	{d8}
 8015df6:	ec55 4b10 	vmov	r4, r5, d0
 8015dfa:	f001 fab3 	bl	8017364 <__ieee754_sqrt>
 8015dfe:	4622      	mov	r2, r4
 8015e00:	462b      	mov	r3, r5
 8015e02:	4620      	mov	r0, r4
 8015e04:	4629      	mov	r1, r5
 8015e06:	eeb0 8a40 	vmov.f32	s16, s0
 8015e0a:	eef0 8a60 	vmov.f32	s17, s1
 8015e0e:	f7ea fead 	bl	8000b6c <__aeabi_dcmpun>
 8015e12:	b990      	cbnz	r0, 8015e3a <sqrt+0x4a>
 8015e14:	2200      	movs	r2, #0
 8015e16:	2300      	movs	r3, #0
 8015e18:	4620      	mov	r0, r4
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	f7ea fe7e 	bl	8000b1c <__aeabi_dcmplt>
 8015e20:	b158      	cbz	r0, 8015e3a <sqrt+0x4a>
 8015e22:	f7fa fe11 	bl	8010a48 <__errno>
 8015e26:	2321      	movs	r3, #33	; 0x21
 8015e28:	6003      	str	r3, [r0, #0]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	4610      	mov	r0, r2
 8015e30:	4619      	mov	r1, r3
 8015e32:	f7ea fd2b 	bl	800088c <__aeabi_ddiv>
 8015e36:	ec41 0b18 	vmov	d8, r0, r1
 8015e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e3e:	eef0 0a68 	vmov.f32	s1, s17
 8015e42:	ecbd 8b02 	vpop	{d8}
 8015e46:	bd38      	pop	{r3, r4, r5, pc}

08015e48 <sqrtf>:
 8015e48:	b508      	push	{r3, lr}
 8015e4a:	ed2d 8b02 	vpush	{d8}
 8015e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8015e52:	f001 fb39 	bl	80174c8 <__ieee754_sqrtf>
 8015e56:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5e:	d60c      	bvs.n	8015e7a <sqrtf+0x32>
 8015e60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8015e80 <sqrtf+0x38>
 8015e64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e6c:	d505      	bpl.n	8015e7a <sqrtf+0x32>
 8015e6e:	f7fa fdeb 	bl	8010a48 <__errno>
 8015e72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015e76:	2321      	movs	r3, #33	; 0x21
 8015e78:	6003      	str	r3, [r0, #0]
 8015e7a:	ecbd 8b02 	vpop	{d8}
 8015e7e:	bd08      	pop	{r3, pc}
	...

08015e88 <__ieee754_acos>:
 8015e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e8c:	ec55 4b10 	vmov	r4, r5, d0
 8015e90:	49b7      	ldr	r1, [pc, #732]	; (8016170 <__ieee754_acos+0x2e8>)
 8015e92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015e96:	428b      	cmp	r3, r1
 8015e98:	dd1b      	ble.n	8015ed2 <__ieee754_acos+0x4a>
 8015e9a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8015e9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015ea2:	4323      	orrs	r3, r4
 8015ea4:	d106      	bne.n	8015eb4 <__ieee754_acos+0x2c>
 8015ea6:	2d00      	cmp	r5, #0
 8015ea8:	f300 8211 	bgt.w	80162ce <__ieee754_acos+0x446>
 8015eac:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8016108 <__ieee754_acos+0x280>
 8015eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eb4:	ee10 2a10 	vmov	r2, s0
 8015eb8:	462b      	mov	r3, r5
 8015eba:	ee10 0a10 	vmov	r0, s0
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	f7ea fa02 	bl	80002c8 <__aeabi_dsub>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	460b      	mov	r3, r1
 8015ec8:	f7ea fce0 	bl	800088c <__aeabi_ddiv>
 8015ecc:	ec41 0b10 	vmov	d0, r0, r1
 8015ed0:	e7ee      	b.n	8015eb0 <__ieee754_acos+0x28>
 8015ed2:	49a8      	ldr	r1, [pc, #672]	; (8016174 <__ieee754_acos+0x2ec>)
 8015ed4:	428b      	cmp	r3, r1
 8015ed6:	f300 8087 	bgt.w	8015fe8 <__ieee754_acos+0x160>
 8015eda:	4aa7      	ldr	r2, [pc, #668]	; (8016178 <__ieee754_acos+0x2f0>)
 8015edc:	4293      	cmp	r3, r2
 8015ede:	f340 81f9 	ble.w	80162d4 <__ieee754_acos+0x44c>
 8015ee2:	ee10 2a10 	vmov	r2, s0
 8015ee6:	ee10 0a10 	vmov	r0, s0
 8015eea:	462b      	mov	r3, r5
 8015eec:	4629      	mov	r1, r5
 8015eee:	f7ea fba3 	bl	8000638 <__aeabi_dmul>
 8015ef2:	a387      	add	r3, pc, #540	; (adr r3, 8016110 <__ieee754_acos+0x288>)
 8015ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ef8:	4606      	mov	r6, r0
 8015efa:	460f      	mov	r7, r1
 8015efc:	f7ea fb9c 	bl	8000638 <__aeabi_dmul>
 8015f00:	a385      	add	r3, pc, #532	; (adr r3, 8016118 <__ieee754_acos+0x290>)
 8015f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f06:	f7ea f9e1 	bl	80002cc <__adddf3>
 8015f0a:	4632      	mov	r2, r6
 8015f0c:	463b      	mov	r3, r7
 8015f0e:	f7ea fb93 	bl	8000638 <__aeabi_dmul>
 8015f12:	a383      	add	r3, pc, #524	; (adr r3, 8016120 <__ieee754_acos+0x298>)
 8015f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f18:	f7ea f9d6 	bl	80002c8 <__aeabi_dsub>
 8015f1c:	4632      	mov	r2, r6
 8015f1e:	463b      	mov	r3, r7
 8015f20:	f7ea fb8a 	bl	8000638 <__aeabi_dmul>
 8015f24:	a380      	add	r3, pc, #512	; (adr r3, 8016128 <__ieee754_acos+0x2a0>)
 8015f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2a:	f7ea f9cf 	bl	80002cc <__adddf3>
 8015f2e:	4632      	mov	r2, r6
 8015f30:	463b      	mov	r3, r7
 8015f32:	f7ea fb81 	bl	8000638 <__aeabi_dmul>
 8015f36:	a37e      	add	r3, pc, #504	; (adr r3, 8016130 <__ieee754_acos+0x2a8>)
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	f7ea f9c4 	bl	80002c8 <__aeabi_dsub>
 8015f40:	4632      	mov	r2, r6
 8015f42:	463b      	mov	r3, r7
 8015f44:	f7ea fb78 	bl	8000638 <__aeabi_dmul>
 8015f48:	a37b      	add	r3, pc, #492	; (adr r3, 8016138 <__ieee754_acos+0x2b0>)
 8015f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4e:	f7ea f9bd 	bl	80002cc <__adddf3>
 8015f52:	4632      	mov	r2, r6
 8015f54:	463b      	mov	r3, r7
 8015f56:	f7ea fb6f 	bl	8000638 <__aeabi_dmul>
 8015f5a:	a379      	add	r3, pc, #484	; (adr r3, 8016140 <__ieee754_acos+0x2b8>)
 8015f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f60:	4680      	mov	r8, r0
 8015f62:	4689      	mov	r9, r1
 8015f64:	4630      	mov	r0, r6
 8015f66:	4639      	mov	r1, r7
 8015f68:	f7ea fb66 	bl	8000638 <__aeabi_dmul>
 8015f6c:	a376      	add	r3, pc, #472	; (adr r3, 8016148 <__ieee754_acos+0x2c0>)
 8015f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f72:	f7ea f9a9 	bl	80002c8 <__aeabi_dsub>
 8015f76:	4632      	mov	r2, r6
 8015f78:	463b      	mov	r3, r7
 8015f7a:	f7ea fb5d 	bl	8000638 <__aeabi_dmul>
 8015f7e:	a374      	add	r3, pc, #464	; (adr r3, 8016150 <__ieee754_acos+0x2c8>)
 8015f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f84:	f7ea f9a2 	bl	80002cc <__adddf3>
 8015f88:	4632      	mov	r2, r6
 8015f8a:	463b      	mov	r3, r7
 8015f8c:	f7ea fb54 	bl	8000638 <__aeabi_dmul>
 8015f90:	a371      	add	r3, pc, #452	; (adr r3, 8016158 <__ieee754_acos+0x2d0>)
 8015f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f96:	f7ea f997 	bl	80002c8 <__aeabi_dsub>
 8015f9a:	4632      	mov	r2, r6
 8015f9c:	463b      	mov	r3, r7
 8015f9e:	f7ea fb4b 	bl	8000638 <__aeabi_dmul>
 8015fa2:	4b76      	ldr	r3, [pc, #472]	; (801617c <__ieee754_acos+0x2f4>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	f7ea f991 	bl	80002cc <__adddf3>
 8015faa:	4602      	mov	r2, r0
 8015fac:	460b      	mov	r3, r1
 8015fae:	4640      	mov	r0, r8
 8015fb0:	4649      	mov	r1, r9
 8015fb2:	f7ea fc6b 	bl	800088c <__aeabi_ddiv>
 8015fb6:	4622      	mov	r2, r4
 8015fb8:	462b      	mov	r3, r5
 8015fba:	f7ea fb3d 	bl	8000638 <__aeabi_dmul>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	a167      	add	r1, pc, #412	; (adr r1, 8016160 <__ieee754_acos+0x2d8>)
 8015fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fc8:	f7ea f97e 	bl	80002c8 <__aeabi_dsub>
 8015fcc:	4602      	mov	r2, r0
 8015fce:	460b      	mov	r3, r1
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	f7ea f978 	bl	80002c8 <__aeabi_dsub>
 8015fd8:	4602      	mov	r2, r0
 8015fda:	460b      	mov	r3, r1
 8015fdc:	a162      	add	r1, pc, #392	; (adr r1, 8016168 <__ieee754_acos+0x2e0>)
 8015fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fe2:	f7ea f971 	bl	80002c8 <__aeabi_dsub>
 8015fe6:	e771      	b.n	8015ecc <__ieee754_acos+0x44>
 8015fe8:	2d00      	cmp	r5, #0
 8015fea:	f280 80cb 	bge.w	8016184 <__ieee754_acos+0x2fc>
 8015fee:	ee10 0a10 	vmov	r0, s0
 8015ff2:	4b62      	ldr	r3, [pc, #392]	; (801617c <__ieee754_acos+0x2f4>)
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	f7ea f968 	bl	80002cc <__adddf3>
 8015ffc:	4b60      	ldr	r3, [pc, #384]	; (8016180 <__ieee754_acos+0x2f8>)
 8015ffe:	2200      	movs	r2, #0
 8016000:	f7ea fb1a 	bl	8000638 <__aeabi_dmul>
 8016004:	a342      	add	r3, pc, #264	; (adr r3, 8016110 <__ieee754_acos+0x288>)
 8016006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600a:	4604      	mov	r4, r0
 801600c:	460d      	mov	r5, r1
 801600e:	f7ea fb13 	bl	8000638 <__aeabi_dmul>
 8016012:	a341      	add	r3, pc, #260	; (adr r3, 8016118 <__ieee754_acos+0x290>)
 8016014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016018:	f7ea f958 	bl	80002cc <__adddf3>
 801601c:	4622      	mov	r2, r4
 801601e:	462b      	mov	r3, r5
 8016020:	f7ea fb0a 	bl	8000638 <__aeabi_dmul>
 8016024:	a33e      	add	r3, pc, #248	; (adr r3, 8016120 <__ieee754_acos+0x298>)
 8016026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602a:	f7ea f94d 	bl	80002c8 <__aeabi_dsub>
 801602e:	4622      	mov	r2, r4
 8016030:	462b      	mov	r3, r5
 8016032:	f7ea fb01 	bl	8000638 <__aeabi_dmul>
 8016036:	a33c      	add	r3, pc, #240	; (adr r3, 8016128 <__ieee754_acos+0x2a0>)
 8016038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603c:	f7ea f946 	bl	80002cc <__adddf3>
 8016040:	4622      	mov	r2, r4
 8016042:	462b      	mov	r3, r5
 8016044:	f7ea faf8 	bl	8000638 <__aeabi_dmul>
 8016048:	a339      	add	r3, pc, #228	; (adr r3, 8016130 <__ieee754_acos+0x2a8>)
 801604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604e:	f7ea f93b 	bl	80002c8 <__aeabi_dsub>
 8016052:	4622      	mov	r2, r4
 8016054:	462b      	mov	r3, r5
 8016056:	f7ea faef 	bl	8000638 <__aeabi_dmul>
 801605a:	a337      	add	r3, pc, #220	; (adr r3, 8016138 <__ieee754_acos+0x2b0>)
 801605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016060:	f7ea f934 	bl	80002cc <__adddf3>
 8016064:	4622      	mov	r2, r4
 8016066:	462b      	mov	r3, r5
 8016068:	f7ea fae6 	bl	8000638 <__aeabi_dmul>
 801606c:	ec45 4b10 	vmov	d0, r4, r5
 8016070:	4680      	mov	r8, r0
 8016072:	4689      	mov	r9, r1
 8016074:	f001 f976 	bl	8017364 <__ieee754_sqrt>
 8016078:	a331      	add	r3, pc, #196	; (adr r3, 8016140 <__ieee754_acos+0x2b8>)
 801607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801607e:	4620      	mov	r0, r4
 8016080:	4629      	mov	r1, r5
 8016082:	ec57 6b10 	vmov	r6, r7, d0
 8016086:	f7ea fad7 	bl	8000638 <__aeabi_dmul>
 801608a:	a32f      	add	r3, pc, #188	; (adr r3, 8016148 <__ieee754_acos+0x2c0>)
 801608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016090:	f7ea f91a 	bl	80002c8 <__aeabi_dsub>
 8016094:	4622      	mov	r2, r4
 8016096:	462b      	mov	r3, r5
 8016098:	f7ea face 	bl	8000638 <__aeabi_dmul>
 801609c:	a32c      	add	r3, pc, #176	; (adr r3, 8016150 <__ieee754_acos+0x2c8>)
 801609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a2:	f7ea f913 	bl	80002cc <__adddf3>
 80160a6:	4622      	mov	r2, r4
 80160a8:	462b      	mov	r3, r5
 80160aa:	f7ea fac5 	bl	8000638 <__aeabi_dmul>
 80160ae:	a32a      	add	r3, pc, #168	; (adr r3, 8016158 <__ieee754_acos+0x2d0>)
 80160b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b4:	f7ea f908 	bl	80002c8 <__aeabi_dsub>
 80160b8:	4622      	mov	r2, r4
 80160ba:	462b      	mov	r3, r5
 80160bc:	f7ea fabc 	bl	8000638 <__aeabi_dmul>
 80160c0:	4b2e      	ldr	r3, [pc, #184]	; (801617c <__ieee754_acos+0x2f4>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	f7ea f902 	bl	80002cc <__adddf3>
 80160c8:	4602      	mov	r2, r0
 80160ca:	460b      	mov	r3, r1
 80160cc:	4640      	mov	r0, r8
 80160ce:	4649      	mov	r1, r9
 80160d0:	f7ea fbdc 	bl	800088c <__aeabi_ddiv>
 80160d4:	4632      	mov	r2, r6
 80160d6:	463b      	mov	r3, r7
 80160d8:	f7ea faae 	bl	8000638 <__aeabi_dmul>
 80160dc:	a320      	add	r3, pc, #128	; (adr r3, 8016160 <__ieee754_acos+0x2d8>)
 80160de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e2:	f7ea f8f1 	bl	80002c8 <__aeabi_dsub>
 80160e6:	4632      	mov	r2, r6
 80160e8:	463b      	mov	r3, r7
 80160ea:	f7ea f8ef 	bl	80002cc <__adddf3>
 80160ee:	4602      	mov	r2, r0
 80160f0:	460b      	mov	r3, r1
 80160f2:	f7ea f8eb 	bl	80002cc <__adddf3>
 80160f6:	4602      	mov	r2, r0
 80160f8:	460b      	mov	r3, r1
 80160fa:	a103      	add	r1, pc, #12	; (adr r1, 8016108 <__ieee754_acos+0x280>)
 80160fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016100:	e76f      	b.n	8015fe2 <__ieee754_acos+0x15a>
 8016102:	bf00      	nop
 8016104:	f3af 8000 	nop.w
 8016108:	54442d18 	.word	0x54442d18
 801610c:	400921fb 	.word	0x400921fb
 8016110:	0dfdf709 	.word	0x0dfdf709
 8016114:	3f023de1 	.word	0x3f023de1
 8016118:	7501b288 	.word	0x7501b288
 801611c:	3f49efe0 	.word	0x3f49efe0
 8016120:	b5688f3b 	.word	0xb5688f3b
 8016124:	3fa48228 	.word	0x3fa48228
 8016128:	0e884455 	.word	0x0e884455
 801612c:	3fc9c155 	.word	0x3fc9c155
 8016130:	03eb6f7d 	.word	0x03eb6f7d
 8016134:	3fd4d612 	.word	0x3fd4d612
 8016138:	55555555 	.word	0x55555555
 801613c:	3fc55555 	.word	0x3fc55555
 8016140:	b12e9282 	.word	0xb12e9282
 8016144:	3fb3b8c5 	.word	0x3fb3b8c5
 8016148:	1b8d0159 	.word	0x1b8d0159
 801614c:	3fe6066c 	.word	0x3fe6066c
 8016150:	9c598ac8 	.word	0x9c598ac8
 8016154:	40002ae5 	.word	0x40002ae5
 8016158:	1c8a2d4b 	.word	0x1c8a2d4b
 801615c:	40033a27 	.word	0x40033a27
 8016160:	33145c07 	.word	0x33145c07
 8016164:	3c91a626 	.word	0x3c91a626
 8016168:	54442d18 	.word	0x54442d18
 801616c:	3ff921fb 	.word	0x3ff921fb
 8016170:	3fefffff 	.word	0x3fefffff
 8016174:	3fdfffff 	.word	0x3fdfffff
 8016178:	3c600000 	.word	0x3c600000
 801617c:	3ff00000 	.word	0x3ff00000
 8016180:	3fe00000 	.word	0x3fe00000
 8016184:	ee10 2a10 	vmov	r2, s0
 8016188:	462b      	mov	r3, r5
 801618a:	496d      	ldr	r1, [pc, #436]	; (8016340 <__ieee754_acos+0x4b8>)
 801618c:	2000      	movs	r0, #0
 801618e:	f7ea f89b 	bl	80002c8 <__aeabi_dsub>
 8016192:	4b6c      	ldr	r3, [pc, #432]	; (8016344 <__ieee754_acos+0x4bc>)
 8016194:	2200      	movs	r2, #0
 8016196:	f7ea fa4f 	bl	8000638 <__aeabi_dmul>
 801619a:	4604      	mov	r4, r0
 801619c:	460d      	mov	r5, r1
 801619e:	ec45 4b10 	vmov	d0, r4, r5
 80161a2:	f001 f8df 	bl	8017364 <__ieee754_sqrt>
 80161a6:	a34e      	add	r3, pc, #312	; (adr r3, 80162e0 <__ieee754_acos+0x458>)
 80161a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ac:	4620      	mov	r0, r4
 80161ae:	4629      	mov	r1, r5
 80161b0:	ec59 8b10 	vmov	r8, r9, d0
 80161b4:	f7ea fa40 	bl	8000638 <__aeabi_dmul>
 80161b8:	a34b      	add	r3, pc, #300	; (adr r3, 80162e8 <__ieee754_acos+0x460>)
 80161ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161be:	f7ea f885 	bl	80002cc <__adddf3>
 80161c2:	4622      	mov	r2, r4
 80161c4:	462b      	mov	r3, r5
 80161c6:	f7ea fa37 	bl	8000638 <__aeabi_dmul>
 80161ca:	a349      	add	r3, pc, #292	; (adr r3, 80162f0 <__ieee754_acos+0x468>)
 80161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d0:	f7ea f87a 	bl	80002c8 <__aeabi_dsub>
 80161d4:	4622      	mov	r2, r4
 80161d6:	462b      	mov	r3, r5
 80161d8:	f7ea fa2e 	bl	8000638 <__aeabi_dmul>
 80161dc:	a346      	add	r3, pc, #280	; (adr r3, 80162f8 <__ieee754_acos+0x470>)
 80161de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e2:	f7ea f873 	bl	80002cc <__adddf3>
 80161e6:	4622      	mov	r2, r4
 80161e8:	462b      	mov	r3, r5
 80161ea:	f7ea fa25 	bl	8000638 <__aeabi_dmul>
 80161ee:	a344      	add	r3, pc, #272	; (adr r3, 8016300 <__ieee754_acos+0x478>)
 80161f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f4:	f7ea f868 	bl	80002c8 <__aeabi_dsub>
 80161f8:	4622      	mov	r2, r4
 80161fa:	462b      	mov	r3, r5
 80161fc:	f7ea fa1c 	bl	8000638 <__aeabi_dmul>
 8016200:	a341      	add	r3, pc, #260	; (adr r3, 8016308 <__ieee754_acos+0x480>)
 8016202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016206:	f7ea f861 	bl	80002cc <__adddf3>
 801620a:	4622      	mov	r2, r4
 801620c:	462b      	mov	r3, r5
 801620e:	f7ea fa13 	bl	8000638 <__aeabi_dmul>
 8016212:	a33f      	add	r3, pc, #252	; (adr r3, 8016310 <__ieee754_acos+0x488>)
 8016214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016218:	4682      	mov	sl, r0
 801621a:	468b      	mov	fp, r1
 801621c:	4620      	mov	r0, r4
 801621e:	4629      	mov	r1, r5
 8016220:	f7ea fa0a 	bl	8000638 <__aeabi_dmul>
 8016224:	a33c      	add	r3, pc, #240	; (adr r3, 8016318 <__ieee754_acos+0x490>)
 8016226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801622a:	f7ea f84d 	bl	80002c8 <__aeabi_dsub>
 801622e:	4622      	mov	r2, r4
 8016230:	462b      	mov	r3, r5
 8016232:	f7ea fa01 	bl	8000638 <__aeabi_dmul>
 8016236:	a33a      	add	r3, pc, #232	; (adr r3, 8016320 <__ieee754_acos+0x498>)
 8016238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623c:	f7ea f846 	bl	80002cc <__adddf3>
 8016240:	4622      	mov	r2, r4
 8016242:	462b      	mov	r3, r5
 8016244:	f7ea f9f8 	bl	8000638 <__aeabi_dmul>
 8016248:	a337      	add	r3, pc, #220	; (adr r3, 8016328 <__ieee754_acos+0x4a0>)
 801624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624e:	f7ea f83b 	bl	80002c8 <__aeabi_dsub>
 8016252:	4622      	mov	r2, r4
 8016254:	462b      	mov	r3, r5
 8016256:	f7ea f9ef 	bl	8000638 <__aeabi_dmul>
 801625a:	4b39      	ldr	r3, [pc, #228]	; (8016340 <__ieee754_acos+0x4b8>)
 801625c:	2200      	movs	r2, #0
 801625e:	f7ea f835 	bl	80002cc <__adddf3>
 8016262:	4602      	mov	r2, r0
 8016264:	460b      	mov	r3, r1
 8016266:	4650      	mov	r0, sl
 8016268:	4659      	mov	r1, fp
 801626a:	f7ea fb0f 	bl	800088c <__aeabi_ddiv>
 801626e:	4642      	mov	r2, r8
 8016270:	464b      	mov	r3, r9
 8016272:	f7ea f9e1 	bl	8000638 <__aeabi_dmul>
 8016276:	2600      	movs	r6, #0
 8016278:	4682      	mov	sl, r0
 801627a:	468b      	mov	fp, r1
 801627c:	4632      	mov	r2, r6
 801627e:	464b      	mov	r3, r9
 8016280:	4630      	mov	r0, r6
 8016282:	4649      	mov	r1, r9
 8016284:	f7ea f9d8 	bl	8000638 <__aeabi_dmul>
 8016288:	4602      	mov	r2, r0
 801628a:	460b      	mov	r3, r1
 801628c:	4620      	mov	r0, r4
 801628e:	4629      	mov	r1, r5
 8016290:	f7ea f81a 	bl	80002c8 <__aeabi_dsub>
 8016294:	4632      	mov	r2, r6
 8016296:	4604      	mov	r4, r0
 8016298:	460d      	mov	r5, r1
 801629a:	464b      	mov	r3, r9
 801629c:	4640      	mov	r0, r8
 801629e:	4649      	mov	r1, r9
 80162a0:	f7ea f814 	bl	80002cc <__adddf3>
 80162a4:	4602      	mov	r2, r0
 80162a6:	460b      	mov	r3, r1
 80162a8:	4620      	mov	r0, r4
 80162aa:	4629      	mov	r1, r5
 80162ac:	f7ea faee 	bl	800088c <__aeabi_ddiv>
 80162b0:	4602      	mov	r2, r0
 80162b2:	460b      	mov	r3, r1
 80162b4:	4650      	mov	r0, sl
 80162b6:	4659      	mov	r1, fp
 80162b8:	f7ea f808 	bl	80002cc <__adddf3>
 80162bc:	4632      	mov	r2, r6
 80162be:	464b      	mov	r3, r9
 80162c0:	f7ea f804 	bl	80002cc <__adddf3>
 80162c4:	4602      	mov	r2, r0
 80162c6:	460b      	mov	r3, r1
 80162c8:	f7ea f800 	bl	80002cc <__adddf3>
 80162cc:	e5fe      	b.n	8015ecc <__ieee754_acos+0x44>
 80162ce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016330 <__ieee754_acos+0x4a8>
 80162d2:	e5ed      	b.n	8015eb0 <__ieee754_acos+0x28>
 80162d4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016338 <__ieee754_acos+0x4b0>
 80162d8:	e5ea      	b.n	8015eb0 <__ieee754_acos+0x28>
 80162da:	bf00      	nop
 80162dc:	f3af 8000 	nop.w
 80162e0:	0dfdf709 	.word	0x0dfdf709
 80162e4:	3f023de1 	.word	0x3f023de1
 80162e8:	7501b288 	.word	0x7501b288
 80162ec:	3f49efe0 	.word	0x3f49efe0
 80162f0:	b5688f3b 	.word	0xb5688f3b
 80162f4:	3fa48228 	.word	0x3fa48228
 80162f8:	0e884455 	.word	0x0e884455
 80162fc:	3fc9c155 	.word	0x3fc9c155
 8016300:	03eb6f7d 	.word	0x03eb6f7d
 8016304:	3fd4d612 	.word	0x3fd4d612
 8016308:	55555555 	.word	0x55555555
 801630c:	3fc55555 	.word	0x3fc55555
 8016310:	b12e9282 	.word	0xb12e9282
 8016314:	3fb3b8c5 	.word	0x3fb3b8c5
 8016318:	1b8d0159 	.word	0x1b8d0159
 801631c:	3fe6066c 	.word	0x3fe6066c
 8016320:	9c598ac8 	.word	0x9c598ac8
 8016324:	40002ae5 	.word	0x40002ae5
 8016328:	1c8a2d4b 	.word	0x1c8a2d4b
 801632c:	40033a27 	.word	0x40033a27
	...
 8016338:	54442d18 	.word	0x54442d18
 801633c:	3ff921fb 	.word	0x3ff921fb
 8016340:	3ff00000 	.word	0x3ff00000
 8016344:	3fe00000 	.word	0x3fe00000

08016348 <__ieee754_asin>:
 8016348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	ed2d 8b04 	vpush	{d8-d9}
 8016350:	ec55 4b10 	vmov	r4, r5, d0
 8016354:	4bcc      	ldr	r3, [pc, #816]	; (8016688 <__ieee754_asin+0x340>)
 8016356:	b083      	sub	sp, #12
 8016358:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801635c:	4598      	cmp	r8, r3
 801635e:	9501      	str	r5, [sp, #4]
 8016360:	dd35      	ble.n	80163ce <__ieee754_asin+0x86>
 8016362:	ee10 3a10 	vmov	r3, s0
 8016366:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801636a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801636e:	ea58 0303 	orrs.w	r3, r8, r3
 8016372:	d117      	bne.n	80163a4 <__ieee754_asin+0x5c>
 8016374:	a3aa      	add	r3, pc, #680	; (adr r3, 8016620 <__ieee754_asin+0x2d8>)
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	ee10 0a10 	vmov	r0, s0
 801637e:	4629      	mov	r1, r5
 8016380:	f7ea f95a 	bl	8000638 <__aeabi_dmul>
 8016384:	a3a8      	add	r3, pc, #672	; (adr r3, 8016628 <__ieee754_asin+0x2e0>)
 8016386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638a:	4606      	mov	r6, r0
 801638c:	460f      	mov	r7, r1
 801638e:	4620      	mov	r0, r4
 8016390:	4629      	mov	r1, r5
 8016392:	f7ea f951 	bl	8000638 <__aeabi_dmul>
 8016396:	4602      	mov	r2, r0
 8016398:	460b      	mov	r3, r1
 801639a:	4630      	mov	r0, r6
 801639c:	4639      	mov	r1, r7
 801639e:	f7e9 ff95 	bl	80002cc <__adddf3>
 80163a2:	e00b      	b.n	80163bc <__ieee754_asin+0x74>
 80163a4:	ee10 2a10 	vmov	r2, s0
 80163a8:	462b      	mov	r3, r5
 80163aa:	ee10 0a10 	vmov	r0, s0
 80163ae:	4629      	mov	r1, r5
 80163b0:	f7e9 ff8a 	bl	80002c8 <__aeabi_dsub>
 80163b4:	4602      	mov	r2, r0
 80163b6:	460b      	mov	r3, r1
 80163b8:	f7ea fa68 	bl	800088c <__aeabi_ddiv>
 80163bc:	4604      	mov	r4, r0
 80163be:	460d      	mov	r5, r1
 80163c0:	ec45 4b10 	vmov	d0, r4, r5
 80163c4:	b003      	add	sp, #12
 80163c6:	ecbd 8b04 	vpop	{d8-d9}
 80163ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ce:	4baf      	ldr	r3, [pc, #700]	; (801668c <__ieee754_asin+0x344>)
 80163d0:	4598      	cmp	r8, r3
 80163d2:	dc11      	bgt.n	80163f8 <__ieee754_asin+0xb0>
 80163d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80163d8:	f280 80ae 	bge.w	8016538 <__ieee754_asin+0x1f0>
 80163dc:	a394      	add	r3, pc, #592	; (adr r3, 8016630 <__ieee754_asin+0x2e8>)
 80163de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e2:	ee10 0a10 	vmov	r0, s0
 80163e6:	4629      	mov	r1, r5
 80163e8:	f7e9 ff70 	bl	80002cc <__adddf3>
 80163ec:	4ba8      	ldr	r3, [pc, #672]	; (8016690 <__ieee754_asin+0x348>)
 80163ee:	2200      	movs	r2, #0
 80163f0:	f7ea fbb2 	bl	8000b58 <__aeabi_dcmpgt>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d1e3      	bne.n	80163c0 <__ieee754_asin+0x78>
 80163f8:	ec45 4b10 	vmov	d0, r4, r5
 80163fc:	f001 fa38 	bl	8017870 <fabs>
 8016400:	49a3      	ldr	r1, [pc, #652]	; (8016690 <__ieee754_asin+0x348>)
 8016402:	ec53 2b10 	vmov	r2, r3, d0
 8016406:	2000      	movs	r0, #0
 8016408:	f7e9 ff5e 	bl	80002c8 <__aeabi_dsub>
 801640c:	4ba1      	ldr	r3, [pc, #644]	; (8016694 <__ieee754_asin+0x34c>)
 801640e:	2200      	movs	r2, #0
 8016410:	f7ea f912 	bl	8000638 <__aeabi_dmul>
 8016414:	a388      	add	r3, pc, #544	; (adr r3, 8016638 <__ieee754_asin+0x2f0>)
 8016416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801641a:	4604      	mov	r4, r0
 801641c:	460d      	mov	r5, r1
 801641e:	f7ea f90b 	bl	8000638 <__aeabi_dmul>
 8016422:	a387      	add	r3, pc, #540	; (adr r3, 8016640 <__ieee754_asin+0x2f8>)
 8016424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016428:	f7e9 ff50 	bl	80002cc <__adddf3>
 801642c:	4622      	mov	r2, r4
 801642e:	462b      	mov	r3, r5
 8016430:	f7ea f902 	bl	8000638 <__aeabi_dmul>
 8016434:	a384      	add	r3, pc, #528	; (adr r3, 8016648 <__ieee754_asin+0x300>)
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f7e9 ff45 	bl	80002c8 <__aeabi_dsub>
 801643e:	4622      	mov	r2, r4
 8016440:	462b      	mov	r3, r5
 8016442:	f7ea f8f9 	bl	8000638 <__aeabi_dmul>
 8016446:	a382      	add	r3, pc, #520	; (adr r3, 8016650 <__ieee754_asin+0x308>)
 8016448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644c:	f7e9 ff3e 	bl	80002cc <__adddf3>
 8016450:	4622      	mov	r2, r4
 8016452:	462b      	mov	r3, r5
 8016454:	f7ea f8f0 	bl	8000638 <__aeabi_dmul>
 8016458:	a37f      	add	r3, pc, #508	; (adr r3, 8016658 <__ieee754_asin+0x310>)
 801645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801645e:	f7e9 ff33 	bl	80002c8 <__aeabi_dsub>
 8016462:	4622      	mov	r2, r4
 8016464:	462b      	mov	r3, r5
 8016466:	f7ea f8e7 	bl	8000638 <__aeabi_dmul>
 801646a:	a37d      	add	r3, pc, #500	; (adr r3, 8016660 <__ieee754_asin+0x318>)
 801646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016470:	f7e9 ff2c 	bl	80002cc <__adddf3>
 8016474:	4622      	mov	r2, r4
 8016476:	462b      	mov	r3, r5
 8016478:	f7ea f8de 	bl	8000638 <__aeabi_dmul>
 801647c:	a37a      	add	r3, pc, #488	; (adr r3, 8016668 <__ieee754_asin+0x320>)
 801647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016482:	ec41 0b18 	vmov	d8, r0, r1
 8016486:	4620      	mov	r0, r4
 8016488:	4629      	mov	r1, r5
 801648a:	f7ea f8d5 	bl	8000638 <__aeabi_dmul>
 801648e:	a378      	add	r3, pc, #480	; (adr r3, 8016670 <__ieee754_asin+0x328>)
 8016490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016494:	f7e9 ff18 	bl	80002c8 <__aeabi_dsub>
 8016498:	4622      	mov	r2, r4
 801649a:	462b      	mov	r3, r5
 801649c:	f7ea f8cc 	bl	8000638 <__aeabi_dmul>
 80164a0:	a375      	add	r3, pc, #468	; (adr r3, 8016678 <__ieee754_asin+0x330>)
 80164a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a6:	f7e9 ff11 	bl	80002cc <__adddf3>
 80164aa:	4622      	mov	r2, r4
 80164ac:	462b      	mov	r3, r5
 80164ae:	f7ea f8c3 	bl	8000638 <__aeabi_dmul>
 80164b2:	a373      	add	r3, pc, #460	; (adr r3, 8016680 <__ieee754_asin+0x338>)
 80164b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b8:	f7e9 ff06 	bl	80002c8 <__aeabi_dsub>
 80164bc:	4622      	mov	r2, r4
 80164be:	462b      	mov	r3, r5
 80164c0:	f7ea f8ba 	bl	8000638 <__aeabi_dmul>
 80164c4:	4b72      	ldr	r3, [pc, #456]	; (8016690 <__ieee754_asin+0x348>)
 80164c6:	2200      	movs	r2, #0
 80164c8:	f7e9 ff00 	bl	80002cc <__adddf3>
 80164cc:	ec45 4b10 	vmov	d0, r4, r5
 80164d0:	4606      	mov	r6, r0
 80164d2:	460f      	mov	r7, r1
 80164d4:	f000 ff46 	bl	8017364 <__ieee754_sqrt>
 80164d8:	4b6f      	ldr	r3, [pc, #444]	; (8016698 <__ieee754_asin+0x350>)
 80164da:	4598      	cmp	r8, r3
 80164dc:	ec5b ab10 	vmov	sl, fp, d0
 80164e0:	f340 80dc 	ble.w	801669c <__ieee754_asin+0x354>
 80164e4:	4632      	mov	r2, r6
 80164e6:	463b      	mov	r3, r7
 80164e8:	ec51 0b18 	vmov	r0, r1, d8
 80164ec:	f7ea f9ce 	bl	800088c <__aeabi_ddiv>
 80164f0:	4652      	mov	r2, sl
 80164f2:	465b      	mov	r3, fp
 80164f4:	f7ea f8a0 	bl	8000638 <__aeabi_dmul>
 80164f8:	4652      	mov	r2, sl
 80164fa:	465b      	mov	r3, fp
 80164fc:	f7e9 fee6 	bl	80002cc <__adddf3>
 8016500:	4602      	mov	r2, r0
 8016502:	460b      	mov	r3, r1
 8016504:	f7e9 fee2 	bl	80002cc <__adddf3>
 8016508:	a347      	add	r3, pc, #284	; (adr r3, 8016628 <__ieee754_asin+0x2e0>)
 801650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650e:	f7e9 fedb 	bl	80002c8 <__aeabi_dsub>
 8016512:	4602      	mov	r2, r0
 8016514:	460b      	mov	r3, r1
 8016516:	a142      	add	r1, pc, #264	; (adr r1, 8016620 <__ieee754_asin+0x2d8>)
 8016518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801651c:	f7e9 fed4 	bl	80002c8 <__aeabi_dsub>
 8016520:	9b01      	ldr	r3, [sp, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	bfdc      	itt	le
 8016526:	4602      	movle	r2, r0
 8016528:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801652c:	4604      	mov	r4, r0
 801652e:	460d      	mov	r5, r1
 8016530:	bfdc      	itt	le
 8016532:	4614      	movle	r4, r2
 8016534:	461d      	movle	r5, r3
 8016536:	e743      	b.n	80163c0 <__ieee754_asin+0x78>
 8016538:	ee10 2a10 	vmov	r2, s0
 801653c:	ee10 0a10 	vmov	r0, s0
 8016540:	462b      	mov	r3, r5
 8016542:	4629      	mov	r1, r5
 8016544:	f7ea f878 	bl	8000638 <__aeabi_dmul>
 8016548:	a33b      	add	r3, pc, #236	; (adr r3, 8016638 <__ieee754_asin+0x2f0>)
 801654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654e:	4606      	mov	r6, r0
 8016550:	460f      	mov	r7, r1
 8016552:	f7ea f871 	bl	8000638 <__aeabi_dmul>
 8016556:	a33a      	add	r3, pc, #232	; (adr r3, 8016640 <__ieee754_asin+0x2f8>)
 8016558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655c:	f7e9 feb6 	bl	80002cc <__adddf3>
 8016560:	4632      	mov	r2, r6
 8016562:	463b      	mov	r3, r7
 8016564:	f7ea f868 	bl	8000638 <__aeabi_dmul>
 8016568:	a337      	add	r3, pc, #220	; (adr r3, 8016648 <__ieee754_asin+0x300>)
 801656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656e:	f7e9 feab 	bl	80002c8 <__aeabi_dsub>
 8016572:	4632      	mov	r2, r6
 8016574:	463b      	mov	r3, r7
 8016576:	f7ea f85f 	bl	8000638 <__aeabi_dmul>
 801657a:	a335      	add	r3, pc, #212	; (adr r3, 8016650 <__ieee754_asin+0x308>)
 801657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016580:	f7e9 fea4 	bl	80002cc <__adddf3>
 8016584:	4632      	mov	r2, r6
 8016586:	463b      	mov	r3, r7
 8016588:	f7ea f856 	bl	8000638 <__aeabi_dmul>
 801658c:	a332      	add	r3, pc, #200	; (adr r3, 8016658 <__ieee754_asin+0x310>)
 801658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016592:	f7e9 fe99 	bl	80002c8 <__aeabi_dsub>
 8016596:	4632      	mov	r2, r6
 8016598:	463b      	mov	r3, r7
 801659a:	f7ea f84d 	bl	8000638 <__aeabi_dmul>
 801659e:	a330      	add	r3, pc, #192	; (adr r3, 8016660 <__ieee754_asin+0x318>)
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	f7e9 fe92 	bl	80002cc <__adddf3>
 80165a8:	4632      	mov	r2, r6
 80165aa:	463b      	mov	r3, r7
 80165ac:	f7ea f844 	bl	8000638 <__aeabi_dmul>
 80165b0:	a32d      	add	r3, pc, #180	; (adr r3, 8016668 <__ieee754_asin+0x320>)
 80165b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b6:	4680      	mov	r8, r0
 80165b8:	4689      	mov	r9, r1
 80165ba:	4630      	mov	r0, r6
 80165bc:	4639      	mov	r1, r7
 80165be:	f7ea f83b 	bl	8000638 <__aeabi_dmul>
 80165c2:	a32b      	add	r3, pc, #172	; (adr r3, 8016670 <__ieee754_asin+0x328>)
 80165c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c8:	f7e9 fe7e 	bl	80002c8 <__aeabi_dsub>
 80165cc:	4632      	mov	r2, r6
 80165ce:	463b      	mov	r3, r7
 80165d0:	f7ea f832 	bl	8000638 <__aeabi_dmul>
 80165d4:	a328      	add	r3, pc, #160	; (adr r3, 8016678 <__ieee754_asin+0x330>)
 80165d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165da:	f7e9 fe77 	bl	80002cc <__adddf3>
 80165de:	4632      	mov	r2, r6
 80165e0:	463b      	mov	r3, r7
 80165e2:	f7ea f829 	bl	8000638 <__aeabi_dmul>
 80165e6:	a326      	add	r3, pc, #152	; (adr r3, 8016680 <__ieee754_asin+0x338>)
 80165e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ec:	f7e9 fe6c 	bl	80002c8 <__aeabi_dsub>
 80165f0:	4632      	mov	r2, r6
 80165f2:	463b      	mov	r3, r7
 80165f4:	f7ea f820 	bl	8000638 <__aeabi_dmul>
 80165f8:	4b25      	ldr	r3, [pc, #148]	; (8016690 <__ieee754_asin+0x348>)
 80165fa:	2200      	movs	r2, #0
 80165fc:	f7e9 fe66 	bl	80002cc <__adddf3>
 8016600:	4602      	mov	r2, r0
 8016602:	460b      	mov	r3, r1
 8016604:	4640      	mov	r0, r8
 8016606:	4649      	mov	r1, r9
 8016608:	f7ea f940 	bl	800088c <__aeabi_ddiv>
 801660c:	4622      	mov	r2, r4
 801660e:	462b      	mov	r3, r5
 8016610:	f7ea f812 	bl	8000638 <__aeabi_dmul>
 8016614:	4602      	mov	r2, r0
 8016616:	460b      	mov	r3, r1
 8016618:	4620      	mov	r0, r4
 801661a:	4629      	mov	r1, r5
 801661c:	e6bf      	b.n	801639e <__ieee754_asin+0x56>
 801661e:	bf00      	nop
 8016620:	54442d18 	.word	0x54442d18
 8016624:	3ff921fb 	.word	0x3ff921fb
 8016628:	33145c07 	.word	0x33145c07
 801662c:	3c91a626 	.word	0x3c91a626
 8016630:	8800759c 	.word	0x8800759c
 8016634:	7e37e43c 	.word	0x7e37e43c
 8016638:	0dfdf709 	.word	0x0dfdf709
 801663c:	3f023de1 	.word	0x3f023de1
 8016640:	7501b288 	.word	0x7501b288
 8016644:	3f49efe0 	.word	0x3f49efe0
 8016648:	b5688f3b 	.word	0xb5688f3b
 801664c:	3fa48228 	.word	0x3fa48228
 8016650:	0e884455 	.word	0x0e884455
 8016654:	3fc9c155 	.word	0x3fc9c155
 8016658:	03eb6f7d 	.word	0x03eb6f7d
 801665c:	3fd4d612 	.word	0x3fd4d612
 8016660:	55555555 	.word	0x55555555
 8016664:	3fc55555 	.word	0x3fc55555
 8016668:	b12e9282 	.word	0xb12e9282
 801666c:	3fb3b8c5 	.word	0x3fb3b8c5
 8016670:	1b8d0159 	.word	0x1b8d0159
 8016674:	3fe6066c 	.word	0x3fe6066c
 8016678:	9c598ac8 	.word	0x9c598ac8
 801667c:	40002ae5 	.word	0x40002ae5
 8016680:	1c8a2d4b 	.word	0x1c8a2d4b
 8016684:	40033a27 	.word	0x40033a27
 8016688:	3fefffff 	.word	0x3fefffff
 801668c:	3fdfffff 	.word	0x3fdfffff
 8016690:	3ff00000 	.word	0x3ff00000
 8016694:	3fe00000 	.word	0x3fe00000
 8016698:	3fef3332 	.word	0x3fef3332
 801669c:	ee10 2a10 	vmov	r2, s0
 80166a0:	ee10 0a10 	vmov	r0, s0
 80166a4:	465b      	mov	r3, fp
 80166a6:	4659      	mov	r1, fp
 80166a8:	f7e9 fe10 	bl	80002cc <__adddf3>
 80166ac:	4632      	mov	r2, r6
 80166ae:	463b      	mov	r3, r7
 80166b0:	ec41 0b19 	vmov	d9, r0, r1
 80166b4:	ec51 0b18 	vmov	r0, r1, d8
 80166b8:	f7ea f8e8 	bl	800088c <__aeabi_ddiv>
 80166bc:	4602      	mov	r2, r0
 80166be:	460b      	mov	r3, r1
 80166c0:	ec51 0b19 	vmov	r0, r1, d9
 80166c4:	f7e9 ffb8 	bl	8000638 <__aeabi_dmul>
 80166c8:	f04f 0800 	mov.w	r8, #0
 80166cc:	4606      	mov	r6, r0
 80166ce:	460f      	mov	r7, r1
 80166d0:	4642      	mov	r2, r8
 80166d2:	465b      	mov	r3, fp
 80166d4:	4640      	mov	r0, r8
 80166d6:	4659      	mov	r1, fp
 80166d8:	f7e9 ffae 	bl	8000638 <__aeabi_dmul>
 80166dc:	4602      	mov	r2, r0
 80166de:	460b      	mov	r3, r1
 80166e0:	4620      	mov	r0, r4
 80166e2:	4629      	mov	r1, r5
 80166e4:	f7e9 fdf0 	bl	80002c8 <__aeabi_dsub>
 80166e8:	4642      	mov	r2, r8
 80166ea:	4604      	mov	r4, r0
 80166ec:	460d      	mov	r5, r1
 80166ee:	465b      	mov	r3, fp
 80166f0:	4650      	mov	r0, sl
 80166f2:	4659      	mov	r1, fp
 80166f4:	f7e9 fdea 	bl	80002cc <__adddf3>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	4620      	mov	r0, r4
 80166fe:	4629      	mov	r1, r5
 8016700:	f7ea f8c4 	bl	800088c <__aeabi_ddiv>
 8016704:	4602      	mov	r2, r0
 8016706:	460b      	mov	r3, r1
 8016708:	f7e9 fde0 	bl	80002cc <__adddf3>
 801670c:	4602      	mov	r2, r0
 801670e:	460b      	mov	r3, r1
 8016710:	a113      	add	r1, pc, #76	; (adr r1, 8016760 <__ieee754_asin+0x418>)
 8016712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016716:	f7e9 fdd7 	bl	80002c8 <__aeabi_dsub>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	4630      	mov	r0, r6
 8016720:	4639      	mov	r1, r7
 8016722:	f7e9 fdd1 	bl	80002c8 <__aeabi_dsub>
 8016726:	4642      	mov	r2, r8
 8016728:	4604      	mov	r4, r0
 801672a:	460d      	mov	r5, r1
 801672c:	465b      	mov	r3, fp
 801672e:	4640      	mov	r0, r8
 8016730:	4659      	mov	r1, fp
 8016732:	f7e9 fdcb 	bl	80002cc <__adddf3>
 8016736:	4602      	mov	r2, r0
 8016738:	460b      	mov	r3, r1
 801673a:	a10b      	add	r1, pc, #44	; (adr r1, 8016768 <__ieee754_asin+0x420>)
 801673c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016740:	f7e9 fdc2 	bl	80002c8 <__aeabi_dsub>
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	4620      	mov	r0, r4
 801674a:	4629      	mov	r1, r5
 801674c:	f7e9 fdbc 	bl	80002c8 <__aeabi_dsub>
 8016750:	4602      	mov	r2, r0
 8016752:	460b      	mov	r3, r1
 8016754:	a104      	add	r1, pc, #16	; (adr r1, 8016768 <__ieee754_asin+0x420>)
 8016756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801675a:	e6df      	b.n	801651c <__ieee754_asin+0x1d4>
 801675c:	f3af 8000 	nop.w
 8016760:	33145c07 	.word	0x33145c07
 8016764:	3c91a626 	.word	0x3c91a626
 8016768:	54442d18 	.word	0x54442d18
 801676c:	3fe921fb 	.word	0x3fe921fb

08016770 <__ieee754_atan2>:
 8016770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016774:	ec57 6b11 	vmov	r6, r7, d1
 8016778:	4273      	negs	r3, r6
 801677a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016900 <__ieee754_atan2+0x190>
 801677e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016782:	4333      	orrs	r3, r6
 8016784:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016788:	4573      	cmp	r3, lr
 801678a:	ec51 0b10 	vmov	r0, r1, d0
 801678e:	ee11 8a10 	vmov	r8, s2
 8016792:	d80a      	bhi.n	80167aa <__ieee754_atan2+0x3a>
 8016794:	4244      	negs	r4, r0
 8016796:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801679a:	4304      	orrs	r4, r0
 801679c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80167a0:	4574      	cmp	r4, lr
 80167a2:	ee10 9a10 	vmov	r9, s0
 80167a6:	468c      	mov	ip, r1
 80167a8:	d907      	bls.n	80167ba <__ieee754_atan2+0x4a>
 80167aa:	4632      	mov	r2, r6
 80167ac:	463b      	mov	r3, r7
 80167ae:	f7e9 fd8d 	bl	80002cc <__adddf3>
 80167b2:	ec41 0b10 	vmov	d0, r0, r1
 80167b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80167be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167c2:	4334      	orrs	r4, r6
 80167c4:	d103      	bne.n	80167ce <__ieee754_atan2+0x5e>
 80167c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167ca:	f000 beb1 	b.w	8017530 <atan>
 80167ce:	17bc      	asrs	r4, r7, #30
 80167d0:	f004 0402 	and.w	r4, r4, #2
 80167d4:	ea53 0909 	orrs.w	r9, r3, r9
 80167d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80167dc:	d107      	bne.n	80167ee <__ieee754_atan2+0x7e>
 80167de:	2c02      	cmp	r4, #2
 80167e0:	d060      	beq.n	80168a4 <__ieee754_atan2+0x134>
 80167e2:	2c03      	cmp	r4, #3
 80167e4:	d1e5      	bne.n	80167b2 <__ieee754_atan2+0x42>
 80167e6:	a142      	add	r1, pc, #264	; (adr r1, 80168f0 <__ieee754_atan2+0x180>)
 80167e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ec:	e7e1      	b.n	80167b2 <__ieee754_atan2+0x42>
 80167ee:	ea52 0808 	orrs.w	r8, r2, r8
 80167f2:	d106      	bne.n	8016802 <__ieee754_atan2+0x92>
 80167f4:	f1bc 0f00 	cmp.w	ip, #0
 80167f8:	da5f      	bge.n	80168ba <__ieee754_atan2+0x14a>
 80167fa:	a13f      	add	r1, pc, #252	; (adr r1, 80168f8 <__ieee754_atan2+0x188>)
 80167fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016800:	e7d7      	b.n	80167b2 <__ieee754_atan2+0x42>
 8016802:	4572      	cmp	r2, lr
 8016804:	d10f      	bne.n	8016826 <__ieee754_atan2+0xb6>
 8016806:	4293      	cmp	r3, r2
 8016808:	f104 34ff 	add.w	r4, r4, #4294967295
 801680c:	d107      	bne.n	801681e <__ieee754_atan2+0xae>
 801680e:	2c02      	cmp	r4, #2
 8016810:	d84c      	bhi.n	80168ac <__ieee754_atan2+0x13c>
 8016812:	4b35      	ldr	r3, [pc, #212]	; (80168e8 <__ieee754_atan2+0x178>)
 8016814:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016818:	e9d4 0100 	ldrd	r0, r1, [r4]
 801681c:	e7c9      	b.n	80167b2 <__ieee754_atan2+0x42>
 801681e:	2c02      	cmp	r4, #2
 8016820:	d848      	bhi.n	80168b4 <__ieee754_atan2+0x144>
 8016822:	4b32      	ldr	r3, [pc, #200]	; (80168ec <__ieee754_atan2+0x17c>)
 8016824:	e7f6      	b.n	8016814 <__ieee754_atan2+0xa4>
 8016826:	4573      	cmp	r3, lr
 8016828:	d0e4      	beq.n	80167f4 <__ieee754_atan2+0x84>
 801682a:	1a9b      	subs	r3, r3, r2
 801682c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016830:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016834:	da1e      	bge.n	8016874 <__ieee754_atan2+0x104>
 8016836:	2f00      	cmp	r7, #0
 8016838:	da01      	bge.n	801683e <__ieee754_atan2+0xce>
 801683a:	323c      	adds	r2, #60	; 0x3c
 801683c:	db1e      	blt.n	801687c <__ieee754_atan2+0x10c>
 801683e:	4632      	mov	r2, r6
 8016840:	463b      	mov	r3, r7
 8016842:	f7ea f823 	bl	800088c <__aeabi_ddiv>
 8016846:	ec41 0b10 	vmov	d0, r0, r1
 801684a:	f001 f811 	bl	8017870 <fabs>
 801684e:	f000 fe6f 	bl	8017530 <atan>
 8016852:	ec51 0b10 	vmov	r0, r1, d0
 8016856:	2c01      	cmp	r4, #1
 8016858:	d013      	beq.n	8016882 <__ieee754_atan2+0x112>
 801685a:	2c02      	cmp	r4, #2
 801685c:	d015      	beq.n	801688a <__ieee754_atan2+0x11a>
 801685e:	2c00      	cmp	r4, #0
 8016860:	d0a7      	beq.n	80167b2 <__ieee754_atan2+0x42>
 8016862:	a319      	add	r3, pc, #100	; (adr r3, 80168c8 <__ieee754_atan2+0x158>)
 8016864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016868:	f7e9 fd2e 	bl	80002c8 <__aeabi_dsub>
 801686c:	a318      	add	r3, pc, #96	; (adr r3, 80168d0 <__ieee754_atan2+0x160>)
 801686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016872:	e014      	b.n	801689e <__ieee754_atan2+0x12e>
 8016874:	a118      	add	r1, pc, #96	; (adr r1, 80168d8 <__ieee754_atan2+0x168>)
 8016876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801687a:	e7ec      	b.n	8016856 <__ieee754_atan2+0xe6>
 801687c:	2000      	movs	r0, #0
 801687e:	2100      	movs	r1, #0
 8016880:	e7e9      	b.n	8016856 <__ieee754_atan2+0xe6>
 8016882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016886:	4619      	mov	r1, r3
 8016888:	e793      	b.n	80167b2 <__ieee754_atan2+0x42>
 801688a:	a30f      	add	r3, pc, #60	; (adr r3, 80168c8 <__ieee754_atan2+0x158>)
 801688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016890:	f7e9 fd1a 	bl	80002c8 <__aeabi_dsub>
 8016894:	4602      	mov	r2, r0
 8016896:	460b      	mov	r3, r1
 8016898:	a10d      	add	r1, pc, #52	; (adr r1, 80168d0 <__ieee754_atan2+0x160>)
 801689a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801689e:	f7e9 fd13 	bl	80002c8 <__aeabi_dsub>
 80168a2:	e786      	b.n	80167b2 <__ieee754_atan2+0x42>
 80168a4:	a10a      	add	r1, pc, #40	; (adr r1, 80168d0 <__ieee754_atan2+0x160>)
 80168a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168aa:	e782      	b.n	80167b2 <__ieee754_atan2+0x42>
 80168ac:	a10c      	add	r1, pc, #48	; (adr r1, 80168e0 <__ieee754_atan2+0x170>)
 80168ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168b2:	e77e      	b.n	80167b2 <__ieee754_atan2+0x42>
 80168b4:	2000      	movs	r0, #0
 80168b6:	2100      	movs	r1, #0
 80168b8:	e77b      	b.n	80167b2 <__ieee754_atan2+0x42>
 80168ba:	a107      	add	r1, pc, #28	; (adr r1, 80168d8 <__ieee754_atan2+0x168>)
 80168bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168c0:	e777      	b.n	80167b2 <__ieee754_atan2+0x42>
 80168c2:	bf00      	nop
 80168c4:	f3af 8000 	nop.w
 80168c8:	33145c07 	.word	0x33145c07
 80168cc:	3ca1a626 	.word	0x3ca1a626
 80168d0:	54442d18 	.word	0x54442d18
 80168d4:	400921fb 	.word	0x400921fb
 80168d8:	54442d18 	.word	0x54442d18
 80168dc:	3ff921fb 	.word	0x3ff921fb
 80168e0:	54442d18 	.word	0x54442d18
 80168e4:	3fe921fb 	.word	0x3fe921fb
 80168e8:	08018690 	.word	0x08018690
 80168ec:	080186a8 	.word	0x080186a8
 80168f0:	54442d18 	.word	0x54442d18
 80168f4:	c00921fb 	.word	0xc00921fb
 80168f8:	54442d18 	.word	0x54442d18
 80168fc:	bff921fb 	.word	0xbff921fb
 8016900:	7ff00000 	.word	0x7ff00000
 8016904:	00000000 	.word	0x00000000

08016908 <__ieee754_pow>:
 8016908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801690c:	ed2d 8b06 	vpush	{d8-d10}
 8016910:	b089      	sub	sp, #36	; 0x24
 8016912:	ed8d 1b00 	vstr	d1, [sp]
 8016916:	e9dd 2900 	ldrd	r2, r9, [sp]
 801691a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801691e:	ea58 0102 	orrs.w	r1, r8, r2
 8016922:	ec57 6b10 	vmov	r6, r7, d0
 8016926:	d115      	bne.n	8016954 <__ieee754_pow+0x4c>
 8016928:	19b3      	adds	r3, r6, r6
 801692a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801692e:	4152      	adcs	r2, r2
 8016930:	4299      	cmp	r1, r3
 8016932:	4b89      	ldr	r3, [pc, #548]	; (8016b58 <__ieee754_pow+0x250>)
 8016934:	4193      	sbcs	r3, r2
 8016936:	f080 84d2 	bcs.w	80172de <__ieee754_pow+0x9d6>
 801693a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801693e:	4630      	mov	r0, r6
 8016940:	4639      	mov	r1, r7
 8016942:	f7e9 fcc3 	bl	80002cc <__adddf3>
 8016946:	ec41 0b10 	vmov	d0, r0, r1
 801694a:	b009      	add	sp, #36	; 0x24
 801694c:	ecbd 8b06 	vpop	{d8-d10}
 8016950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016954:	4b81      	ldr	r3, [pc, #516]	; (8016b5c <__ieee754_pow+0x254>)
 8016956:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801695a:	429c      	cmp	r4, r3
 801695c:	ee10 aa10 	vmov	sl, s0
 8016960:	463d      	mov	r5, r7
 8016962:	dc06      	bgt.n	8016972 <__ieee754_pow+0x6a>
 8016964:	d101      	bne.n	801696a <__ieee754_pow+0x62>
 8016966:	2e00      	cmp	r6, #0
 8016968:	d1e7      	bne.n	801693a <__ieee754_pow+0x32>
 801696a:	4598      	cmp	r8, r3
 801696c:	dc01      	bgt.n	8016972 <__ieee754_pow+0x6a>
 801696e:	d10f      	bne.n	8016990 <__ieee754_pow+0x88>
 8016970:	b172      	cbz	r2, 8016990 <__ieee754_pow+0x88>
 8016972:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016976:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801697a:	ea55 050a 	orrs.w	r5, r5, sl
 801697e:	d1dc      	bne.n	801693a <__ieee754_pow+0x32>
 8016980:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016984:	18db      	adds	r3, r3, r3
 8016986:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801698a:	4152      	adcs	r2, r2
 801698c:	429d      	cmp	r5, r3
 801698e:	e7d0      	b.n	8016932 <__ieee754_pow+0x2a>
 8016990:	2d00      	cmp	r5, #0
 8016992:	da3b      	bge.n	8016a0c <__ieee754_pow+0x104>
 8016994:	4b72      	ldr	r3, [pc, #456]	; (8016b60 <__ieee754_pow+0x258>)
 8016996:	4598      	cmp	r8, r3
 8016998:	dc51      	bgt.n	8016a3e <__ieee754_pow+0x136>
 801699a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801699e:	4598      	cmp	r8, r3
 80169a0:	f340 84ac 	ble.w	80172fc <__ieee754_pow+0x9f4>
 80169a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80169a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80169ac:	2b14      	cmp	r3, #20
 80169ae:	dd0f      	ble.n	80169d0 <__ieee754_pow+0xc8>
 80169b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80169b4:	fa22 f103 	lsr.w	r1, r2, r3
 80169b8:	fa01 f303 	lsl.w	r3, r1, r3
 80169bc:	4293      	cmp	r3, r2
 80169be:	f040 849d 	bne.w	80172fc <__ieee754_pow+0x9f4>
 80169c2:	f001 0101 	and.w	r1, r1, #1
 80169c6:	f1c1 0302 	rsb	r3, r1, #2
 80169ca:	9304      	str	r3, [sp, #16]
 80169cc:	b182      	cbz	r2, 80169f0 <__ieee754_pow+0xe8>
 80169ce:	e05f      	b.n	8016a90 <__ieee754_pow+0x188>
 80169d0:	2a00      	cmp	r2, #0
 80169d2:	d15b      	bne.n	8016a8c <__ieee754_pow+0x184>
 80169d4:	f1c3 0314 	rsb	r3, r3, #20
 80169d8:	fa48 f103 	asr.w	r1, r8, r3
 80169dc:	fa01 f303 	lsl.w	r3, r1, r3
 80169e0:	4543      	cmp	r3, r8
 80169e2:	f040 8488 	bne.w	80172f6 <__ieee754_pow+0x9ee>
 80169e6:	f001 0101 	and.w	r1, r1, #1
 80169ea:	f1c1 0302 	rsb	r3, r1, #2
 80169ee:	9304      	str	r3, [sp, #16]
 80169f0:	4b5c      	ldr	r3, [pc, #368]	; (8016b64 <__ieee754_pow+0x25c>)
 80169f2:	4598      	cmp	r8, r3
 80169f4:	d132      	bne.n	8016a5c <__ieee754_pow+0x154>
 80169f6:	f1b9 0f00 	cmp.w	r9, #0
 80169fa:	f280 8478 	bge.w	80172ee <__ieee754_pow+0x9e6>
 80169fe:	4959      	ldr	r1, [pc, #356]	; (8016b64 <__ieee754_pow+0x25c>)
 8016a00:	4632      	mov	r2, r6
 8016a02:	463b      	mov	r3, r7
 8016a04:	2000      	movs	r0, #0
 8016a06:	f7e9 ff41 	bl	800088c <__aeabi_ddiv>
 8016a0a:	e79c      	b.n	8016946 <__ieee754_pow+0x3e>
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	9304      	str	r3, [sp, #16]
 8016a10:	2a00      	cmp	r2, #0
 8016a12:	d13d      	bne.n	8016a90 <__ieee754_pow+0x188>
 8016a14:	4b51      	ldr	r3, [pc, #324]	; (8016b5c <__ieee754_pow+0x254>)
 8016a16:	4598      	cmp	r8, r3
 8016a18:	d1ea      	bne.n	80169f0 <__ieee754_pow+0xe8>
 8016a1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016a1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016a22:	ea53 030a 	orrs.w	r3, r3, sl
 8016a26:	f000 845a 	beq.w	80172de <__ieee754_pow+0x9d6>
 8016a2a:	4b4f      	ldr	r3, [pc, #316]	; (8016b68 <__ieee754_pow+0x260>)
 8016a2c:	429c      	cmp	r4, r3
 8016a2e:	dd08      	ble.n	8016a42 <__ieee754_pow+0x13a>
 8016a30:	f1b9 0f00 	cmp.w	r9, #0
 8016a34:	f2c0 8457 	blt.w	80172e6 <__ieee754_pow+0x9de>
 8016a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a3c:	e783      	b.n	8016946 <__ieee754_pow+0x3e>
 8016a3e:	2302      	movs	r3, #2
 8016a40:	e7e5      	b.n	8016a0e <__ieee754_pow+0x106>
 8016a42:	f1b9 0f00 	cmp.w	r9, #0
 8016a46:	f04f 0000 	mov.w	r0, #0
 8016a4a:	f04f 0100 	mov.w	r1, #0
 8016a4e:	f6bf af7a 	bge.w	8016946 <__ieee754_pow+0x3e>
 8016a52:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016a56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016a5a:	e774      	b.n	8016946 <__ieee754_pow+0x3e>
 8016a5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016a60:	d106      	bne.n	8016a70 <__ieee754_pow+0x168>
 8016a62:	4632      	mov	r2, r6
 8016a64:	463b      	mov	r3, r7
 8016a66:	4630      	mov	r0, r6
 8016a68:	4639      	mov	r1, r7
 8016a6a:	f7e9 fde5 	bl	8000638 <__aeabi_dmul>
 8016a6e:	e76a      	b.n	8016946 <__ieee754_pow+0x3e>
 8016a70:	4b3e      	ldr	r3, [pc, #248]	; (8016b6c <__ieee754_pow+0x264>)
 8016a72:	4599      	cmp	r9, r3
 8016a74:	d10c      	bne.n	8016a90 <__ieee754_pow+0x188>
 8016a76:	2d00      	cmp	r5, #0
 8016a78:	db0a      	blt.n	8016a90 <__ieee754_pow+0x188>
 8016a7a:	ec47 6b10 	vmov	d0, r6, r7
 8016a7e:	b009      	add	sp, #36	; 0x24
 8016a80:	ecbd 8b06 	vpop	{d8-d10}
 8016a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a88:	f000 bc6c 	b.w	8017364 <__ieee754_sqrt>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	9304      	str	r3, [sp, #16]
 8016a90:	ec47 6b10 	vmov	d0, r6, r7
 8016a94:	f000 feec 	bl	8017870 <fabs>
 8016a98:	ec51 0b10 	vmov	r0, r1, d0
 8016a9c:	f1ba 0f00 	cmp.w	sl, #0
 8016aa0:	d129      	bne.n	8016af6 <__ieee754_pow+0x1ee>
 8016aa2:	b124      	cbz	r4, 8016aae <__ieee754_pow+0x1a6>
 8016aa4:	4b2f      	ldr	r3, [pc, #188]	; (8016b64 <__ieee754_pow+0x25c>)
 8016aa6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d123      	bne.n	8016af6 <__ieee754_pow+0x1ee>
 8016aae:	f1b9 0f00 	cmp.w	r9, #0
 8016ab2:	da05      	bge.n	8016ac0 <__ieee754_pow+0x1b8>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	460b      	mov	r3, r1
 8016ab8:	2000      	movs	r0, #0
 8016aba:	492a      	ldr	r1, [pc, #168]	; (8016b64 <__ieee754_pow+0x25c>)
 8016abc:	f7e9 fee6 	bl	800088c <__aeabi_ddiv>
 8016ac0:	2d00      	cmp	r5, #0
 8016ac2:	f6bf af40 	bge.w	8016946 <__ieee754_pow+0x3e>
 8016ac6:	9b04      	ldr	r3, [sp, #16]
 8016ac8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016acc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016ad0:	4323      	orrs	r3, r4
 8016ad2:	d108      	bne.n	8016ae6 <__ieee754_pow+0x1de>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	4610      	mov	r0, r2
 8016ada:	4619      	mov	r1, r3
 8016adc:	f7e9 fbf4 	bl	80002c8 <__aeabi_dsub>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	460b      	mov	r3, r1
 8016ae4:	e78f      	b.n	8016a06 <__ieee754_pow+0xfe>
 8016ae6:	9b04      	ldr	r3, [sp, #16]
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	f47f af2c 	bne.w	8016946 <__ieee754_pow+0x3e>
 8016aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016af2:	4619      	mov	r1, r3
 8016af4:	e727      	b.n	8016946 <__ieee754_pow+0x3e>
 8016af6:	0feb      	lsrs	r3, r5, #31
 8016af8:	3b01      	subs	r3, #1
 8016afa:	9306      	str	r3, [sp, #24]
 8016afc:	9a06      	ldr	r2, [sp, #24]
 8016afe:	9b04      	ldr	r3, [sp, #16]
 8016b00:	4313      	orrs	r3, r2
 8016b02:	d102      	bne.n	8016b0a <__ieee754_pow+0x202>
 8016b04:	4632      	mov	r2, r6
 8016b06:	463b      	mov	r3, r7
 8016b08:	e7e6      	b.n	8016ad8 <__ieee754_pow+0x1d0>
 8016b0a:	4b19      	ldr	r3, [pc, #100]	; (8016b70 <__ieee754_pow+0x268>)
 8016b0c:	4598      	cmp	r8, r3
 8016b0e:	f340 80fb 	ble.w	8016d08 <__ieee754_pow+0x400>
 8016b12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016b16:	4598      	cmp	r8, r3
 8016b18:	4b13      	ldr	r3, [pc, #76]	; (8016b68 <__ieee754_pow+0x260>)
 8016b1a:	dd0c      	ble.n	8016b36 <__ieee754_pow+0x22e>
 8016b1c:	429c      	cmp	r4, r3
 8016b1e:	dc0f      	bgt.n	8016b40 <__ieee754_pow+0x238>
 8016b20:	f1b9 0f00 	cmp.w	r9, #0
 8016b24:	da0f      	bge.n	8016b46 <__ieee754_pow+0x23e>
 8016b26:	2000      	movs	r0, #0
 8016b28:	b009      	add	sp, #36	; 0x24
 8016b2a:	ecbd 8b06 	vpop	{d8-d10}
 8016b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b32:	f000 bcf3 	b.w	801751c <__math_oflow>
 8016b36:	429c      	cmp	r4, r3
 8016b38:	dbf2      	blt.n	8016b20 <__ieee754_pow+0x218>
 8016b3a:	4b0a      	ldr	r3, [pc, #40]	; (8016b64 <__ieee754_pow+0x25c>)
 8016b3c:	429c      	cmp	r4, r3
 8016b3e:	dd19      	ble.n	8016b74 <__ieee754_pow+0x26c>
 8016b40:	f1b9 0f00 	cmp.w	r9, #0
 8016b44:	dcef      	bgt.n	8016b26 <__ieee754_pow+0x21e>
 8016b46:	2000      	movs	r0, #0
 8016b48:	b009      	add	sp, #36	; 0x24
 8016b4a:	ecbd 8b06 	vpop	{d8-d10}
 8016b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b52:	f000 bcda 	b.w	801750a <__math_uflow>
 8016b56:	bf00      	nop
 8016b58:	fff00000 	.word	0xfff00000
 8016b5c:	7ff00000 	.word	0x7ff00000
 8016b60:	433fffff 	.word	0x433fffff
 8016b64:	3ff00000 	.word	0x3ff00000
 8016b68:	3fefffff 	.word	0x3fefffff
 8016b6c:	3fe00000 	.word	0x3fe00000
 8016b70:	41e00000 	.word	0x41e00000
 8016b74:	4b60      	ldr	r3, [pc, #384]	; (8016cf8 <__ieee754_pow+0x3f0>)
 8016b76:	2200      	movs	r2, #0
 8016b78:	f7e9 fba6 	bl	80002c8 <__aeabi_dsub>
 8016b7c:	a354      	add	r3, pc, #336	; (adr r3, 8016cd0 <__ieee754_pow+0x3c8>)
 8016b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b82:	4604      	mov	r4, r0
 8016b84:	460d      	mov	r5, r1
 8016b86:	f7e9 fd57 	bl	8000638 <__aeabi_dmul>
 8016b8a:	a353      	add	r3, pc, #332	; (adr r3, 8016cd8 <__ieee754_pow+0x3d0>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	4606      	mov	r6, r0
 8016b92:	460f      	mov	r7, r1
 8016b94:	4620      	mov	r0, r4
 8016b96:	4629      	mov	r1, r5
 8016b98:	f7e9 fd4e 	bl	8000638 <__aeabi_dmul>
 8016b9c:	4b57      	ldr	r3, [pc, #348]	; (8016cfc <__ieee754_pow+0x3f4>)
 8016b9e:	4682      	mov	sl, r0
 8016ba0:	468b      	mov	fp, r1
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	f7e9 fd46 	bl	8000638 <__aeabi_dmul>
 8016bac:	4602      	mov	r2, r0
 8016bae:	460b      	mov	r3, r1
 8016bb0:	a14b      	add	r1, pc, #300	; (adr r1, 8016ce0 <__ieee754_pow+0x3d8>)
 8016bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bb6:	f7e9 fb87 	bl	80002c8 <__aeabi_dsub>
 8016bba:	4622      	mov	r2, r4
 8016bbc:	462b      	mov	r3, r5
 8016bbe:	f7e9 fd3b 	bl	8000638 <__aeabi_dmul>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	494d      	ldr	r1, [pc, #308]	; (8016d00 <__ieee754_pow+0x3f8>)
 8016bca:	f7e9 fb7d 	bl	80002c8 <__aeabi_dsub>
 8016bce:	4622      	mov	r2, r4
 8016bd0:	4680      	mov	r8, r0
 8016bd2:	4689      	mov	r9, r1
 8016bd4:	462b      	mov	r3, r5
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	4629      	mov	r1, r5
 8016bda:	f7e9 fd2d 	bl	8000638 <__aeabi_dmul>
 8016bde:	4602      	mov	r2, r0
 8016be0:	460b      	mov	r3, r1
 8016be2:	4640      	mov	r0, r8
 8016be4:	4649      	mov	r1, r9
 8016be6:	f7e9 fd27 	bl	8000638 <__aeabi_dmul>
 8016bea:	a33f      	add	r3, pc, #252	; (adr r3, 8016ce8 <__ieee754_pow+0x3e0>)
 8016bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf0:	f7e9 fd22 	bl	8000638 <__aeabi_dmul>
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	4650      	mov	r0, sl
 8016bfa:	4659      	mov	r1, fp
 8016bfc:	f7e9 fb64 	bl	80002c8 <__aeabi_dsub>
 8016c00:	4602      	mov	r2, r0
 8016c02:	460b      	mov	r3, r1
 8016c04:	4680      	mov	r8, r0
 8016c06:	4689      	mov	r9, r1
 8016c08:	4630      	mov	r0, r6
 8016c0a:	4639      	mov	r1, r7
 8016c0c:	f7e9 fb5e 	bl	80002cc <__adddf3>
 8016c10:	2000      	movs	r0, #0
 8016c12:	4632      	mov	r2, r6
 8016c14:	463b      	mov	r3, r7
 8016c16:	4604      	mov	r4, r0
 8016c18:	460d      	mov	r5, r1
 8016c1a:	f7e9 fb55 	bl	80002c8 <__aeabi_dsub>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	460b      	mov	r3, r1
 8016c22:	4640      	mov	r0, r8
 8016c24:	4649      	mov	r1, r9
 8016c26:	f7e9 fb4f 	bl	80002c8 <__aeabi_dsub>
 8016c2a:	9b04      	ldr	r3, [sp, #16]
 8016c2c:	9a06      	ldr	r2, [sp, #24]
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	4313      	orrs	r3, r2
 8016c32:	4682      	mov	sl, r0
 8016c34:	468b      	mov	fp, r1
 8016c36:	f040 81e7 	bne.w	8017008 <__ieee754_pow+0x700>
 8016c3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016cf0 <__ieee754_pow+0x3e8>
 8016c3e:	eeb0 8a47 	vmov.f32	s16, s14
 8016c42:	eef0 8a67 	vmov.f32	s17, s15
 8016c46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016c4a:	2600      	movs	r6, #0
 8016c4c:	4632      	mov	r2, r6
 8016c4e:	463b      	mov	r3, r7
 8016c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c54:	f7e9 fb38 	bl	80002c8 <__aeabi_dsub>
 8016c58:	4622      	mov	r2, r4
 8016c5a:	462b      	mov	r3, r5
 8016c5c:	f7e9 fcec 	bl	8000638 <__aeabi_dmul>
 8016c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c64:	4680      	mov	r8, r0
 8016c66:	4689      	mov	r9, r1
 8016c68:	4650      	mov	r0, sl
 8016c6a:	4659      	mov	r1, fp
 8016c6c:	f7e9 fce4 	bl	8000638 <__aeabi_dmul>
 8016c70:	4602      	mov	r2, r0
 8016c72:	460b      	mov	r3, r1
 8016c74:	4640      	mov	r0, r8
 8016c76:	4649      	mov	r1, r9
 8016c78:	f7e9 fb28 	bl	80002cc <__adddf3>
 8016c7c:	4632      	mov	r2, r6
 8016c7e:	463b      	mov	r3, r7
 8016c80:	4680      	mov	r8, r0
 8016c82:	4689      	mov	r9, r1
 8016c84:	4620      	mov	r0, r4
 8016c86:	4629      	mov	r1, r5
 8016c88:	f7e9 fcd6 	bl	8000638 <__aeabi_dmul>
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	4604      	mov	r4, r0
 8016c90:	460d      	mov	r5, r1
 8016c92:	4602      	mov	r2, r0
 8016c94:	4649      	mov	r1, r9
 8016c96:	4640      	mov	r0, r8
 8016c98:	f7e9 fb18 	bl	80002cc <__adddf3>
 8016c9c:	4b19      	ldr	r3, [pc, #100]	; (8016d04 <__ieee754_pow+0x3fc>)
 8016c9e:	4299      	cmp	r1, r3
 8016ca0:	ec45 4b19 	vmov	d9, r4, r5
 8016ca4:	4606      	mov	r6, r0
 8016ca6:	460f      	mov	r7, r1
 8016ca8:	468b      	mov	fp, r1
 8016caa:	f340 82f1 	ble.w	8017290 <__ieee754_pow+0x988>
 8016cae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016cb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016cb6:	4303      	orrs	r3, r0
 8016cb8:	f000 81e4 	beq.w	8017084 <__ieee754_pow+0x77c>
 8016cbc:	ec51 0b18 	vmov	r0, r1, d8
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	f7e9 ff2a 	bl	8000b1c <__aeabi_dcmplt>
 8016cc8:	3800      	subs	r0, #0
 8016cca:	bf18      	it	ne
 8016ccc:	2001      	movne	r0, #1
 8016cce:	e72b      	b.n	8016b28 <__ieee754_pow+0x220>
 8016cd0:	60000000 	.word	0x60000000
 8016cd4:	3ff71547 	.word	0x3ff71547
 8016cd8:	f85ddf44 	.word	0xf85ddf44
 8016cdc:	3e54ae0b 	.word	0x3e54ae0b
 8016ce0:	55555555 	.word	0x55555555
 8016ce4:	3fd55555 	.word	0x3fd55555
 8016ce8:	652b82fe 	.word	0x652b82fe
 8016cec:	3ff71547 	.word	0x3ff71547
 8016cf0:	00000000 	.word	0x00000000
 8016cf4:	bff00000 	.word	0xbff00000
 8016cf8:	3ff00000 	.word	0x3ff00000
 8016cfc:	3fd00000 	.word	0x3fd00000
 8016d00:	3fe00000 	.word	0x3fe00000
 8016d04:	408fffff 	.word	0x408fffff
 8016d08:	4bd5      	ldr	r3, [pc, #852]	; (8017060 <__ieee754_pow+0x758>)
 8016d0a:	402b      	ands	r3, r5
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	b92b      	cbnz	r3, 8016d1c <__ieee754_pow+0x414>
 8016d10:	4bd4      	ldr	r3, [pc, #848]	; (8017064 <__ieee754_pow+0x75c>)
 8016d12:	f7e9 fc91 	bl	8000638 <__aeabi_dmul>
 8016d16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016d1a:	460c      	mov	r4, r1
 8016d1c:	1523      	asrs	r3, r4, #20
 8016d1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d22:	4413      	add	r3, r2
 8016d24:	9305      	str	r3, [sp, #20]
 8016d26:	4bd0      	ldr	r3, [pc, #832]	; (8017068 <__ieee754_pow+0x760>)
 8016d28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016d2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016d30:	429c      	cmp	r4, r3
 8016d32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016d36:	dd08      	ble.n	8016d4a <__ieee754_pow+0x442>
 8016d38:	4bcc      	ldr	r3, [pc, #816]	; (801706c <__ieee754_pow+0x764>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	f340 8162 	ble.w	8017004 <__ieee754_pow+0x6fc>
 8016d40:	9b05      	ldr	r3, [sp, #20]
 8016d42:	3301      	adds	r3, #1
 8016d44:	9305      	str	r3, [sp, #20]
 8016d46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016d4a:	2400      	movs	r4, #0
 8016d4c:	00e3      	lsls	r3, r4, #3
 8016d4e:	9307      	str	r3, [sp, #28]
 8016d50:	4bc7      	ldr	r3, [pc, #796]	; (8017070 <__ieee754_pow+0x768>)
 8016d52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016d56:	ed93 7b00 	vldr	d7, [r3]
 8016d5a:	4629      	mov	r1, r5
 8016d5c:	ec53 2b17 	vmov	r2, r3, d7
 8016d60:	eeb0 9a47 	vmov.f32	s18, s14
 8016d64:	eef0 9a67 	vmov.f32	s19, s15
 8016d68:	4682      	mov	sl, r0
 8016d6a:	f7e9 faad 	bl	80002c8 <__aeabi_dsub>
 8016d6e:	4652      	mov	r2, sl
 8016d70:	4606      	mov	r6, r0
 8016d72:	460f      	mov	r7, r1
 8016d74:	462b      	mov	r3, r5
 8016d76:	ec51 0b19 	vmov	r0, r1, d9
 8016d7a:	f7e9 faa7 	bl	80002cc <__adddf3>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	460b      	mov	r3, r1
 8016d82:	2000      	movs	r0, #0
 8016d84:	49bb      	ldr	r1, [pc, #748]	; (8017074 <__ieee754_pow+0x76c>)
 8016d86:	f7e9 fd81 	bl	800088c <__aeabi_ddiv>
 8016d8a:	ec41 0b1a 	vmov	d10, r0, r1
 8016d8e:	4602      	mov	r2, r0
 8016d90:	460b      	mov	r3, r1
 8016d92:	4630      	mov	r0, r6
 8016d94:	4639      	mov	r1, r7
 8016d96:	f7e9 fc4f 	bl	8000638 <__aeabi_dmul>
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016da0:	9302      	str	r3, [sp, #8]
 8016da2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016da6:	46ab      	mov	fp, r5
 8016da8:	106d      	asrs	r5, r5, #1
 8016daa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016dae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016db2:	ec41 0b18 	vmov	d8, r0, r1
 8016db6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016dba:	2200      	movs	r2, #0
 8016dbc:	4640      	mov	r0, r8
 8016dbe:	4649      	mov	r1, r9
 8016dc0:	4614      	mov	r4, r2
 8016dc2:	461d      	mov	r5, r3
 8016dc4:	f7e9 fc38 	bl	8000638 <__aeabi_dmul>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	460b      	mov	r3, r1
 8016dcc:	4630      	mov	r0, r6
 8016dce:	4639      	mov	r1, r7
 8016dd0:	f7e9 fa7a 	bl	80002c8 <__aeabi_dsub>
 8016dd4:	ec53 2b19 	vmov	r2, r3, d9
 8016dd8:	4606      	mov	r6, r0
 8016dda:	460f      	mov	r7, r1
 8016ddc:	4620      	mov	r0, r4
 8016dde:	4629      	mov	r1, r5
 8016de0:	f7e9 fa72 	bl	80002c8 <__aeabi_dsub>
 8016de4:	4602      	mov	r2, r0
 8016de6:	460b      	mov	r3, r1
 8016de8:	4650      	mov	r0, sl
 8016dea:	4659      	mov	r1, fp
 8016dec:	f7e9 fa6c 	bl	80002c8 <__aeabi_dsub>
 8016df0:	4642      	mov	r2, r8
 8016df2:	464b      	mov	r3, r9
 8016df4:	f7e9 fc20 	bl	8000638 <__aeabi_dmul>
 8016df8:	4602      	mov	r2, r0
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	4639      	mov	r1, r7
 8016e00:	f7e9 fa62 	bl	80002c8 <__aeabi_dsub>
 8016e04:	ec53 2b1a 	vmov	r2, r3, d10
 8016e08:	f7e9 fc16 	bl	8000638 <__aeabi_dmul>
 8016e0c:	ec53 2b18 	vmov	r2, r3, d8
 8016e10:	ec41 0b19 	vmov	d9, r0, r1
 8016e14:	ec51 0b18 	vmov	r0, r1, d8
 8016e18:	f7e9 fc0e 	bl	8000638 <__aeabi_dmul>
 8016e1c:	a37c      	add	r3, pc, #496	; (adr r3, 8017010 <__ieee754_pow+0x708>)
 8016e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e22:	4604      	mov	r4, r0
 8016e24:	460d      	mov	r5, r1
 8016e26:	f7e9 fc07 	bl	8000638 <__aeabi_dmul>
 8016e2a:	a37b      	add	r3, pc, #492	; (adr r3, 8017018 <__ieee754_pow+0x710>)
 8016e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e30:	f7e9 fa4c 	bl	80002cc <__adddf3>
 8016e34:	4622      	mov	r2, r4
 8016e36:	462b      	mov	r3, r5
 8016e38:	f7e9 fbfe 	bl	8000638 <__aeabi_dmul>
 8016e3c:	a378      	add	r3, pc, #480	; (adr r3, 8017020 <__ieee754_pow+0x718>)
 8016e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e42:	f7e9 fa43 	bl	80002cc <__adddf3>
 8016e46:	4622      	mov	r2, r4
 8016e48:	462b      	mov	r3, r5
 8016e4a:	f7e9 fbf5 	bl	8000638 <__aeabi_dmul>
 8016e4e:	a376      	add	r3, pc, #472	; (adr r3, 8017028 <__ieee754_pow+0x720>)
 8016e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e54:	f7e9 fa3a 	bl	80002cc <__adddf3>
 8016e58:	4622      	mov	r2, r4
 8016e5a:	462b      	mov	r3, r5
 8016e5c:	f7e9 fbec 	bl	8000638 <__aeabi_dmul>
 8016e60:	a373      	add	r3, pc, #460	; (adr r3, 8017030 <__ieee754_pow+0x728>)
 8016e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e66:	f7e9 fa31 	bl	80002cc <__adddf3>
 8016e6a:	4622      	mov	r2, r4
 8016e6c:	462b      	mov	r3, r5
 8016e6e:	f7e9 fbe3 	bl	8000638 <__aeabi_dmul>
 8016e72:	a371      	add	r3, pc, #452	; (adr r3, 8017038 <__ieee754_pow+0x730>)
 8016e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e78:	f7e9 fa28 	bl	80002cc <__adddf3>
 8016e7c:	4622      	mov	r2, r4
 8016e7e:	4606      	mov	r6, r0
 8016e80:	460f      	mov	r7, r1
 8016e82:	462b      	mov	r3, r5
 8016e84:	4620      	mov	r0, r4
 8016e86:	4629      	mov	r1, r5
 8016e88:	f7e9 fbd6 	bl	8000638 <__aeabi_dmul>
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	460b      	mov	r3, r1
 8016e90:	4630      	mov	r0, r6
 8016e92:	4639      	mov	r1, r7
 8016e94:	f7e9 fbd0 	bl	8000638 <__aeabi_dmul>
 8016e98:	4642      	mov	r2, r8
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	460d      	mov	r5, r1
 8016e9e:	464b      	mov	r3, r9
 8016ea0:	ec51 0b18 	vmov	r0, r1, d8
 8016ea4:	f7e9 fa12 	bl	80002cc <__adddf3>
 8016ea8:	ec53 2b19 	vmov	r2, r3, d9
 8016eac:	f7e9 fbc4 	bl	8000638 <__aeabi_dmul>
 8016eb0:	4622      	mov	r2, r4
 8016eb2:	462b      	mov	r3, r5
 8016eb4:	f7e9 fa0a 	bl	80002cc <__adddf3>
 8016eb8:	4642      	mov	r2, r8
 8016eba:	4682      	mov	sl, r0
 8016ebc:	468b      	mov	fp, r1
 8016ebe:	464b      	mov	r3, r9
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	4649      	mov	r1, r9
 8016ec4:	f7e9 fbb8 	bl	8000638 <__aeabi_dmul>
 8016ec8:	4b6b      	ldr	r3, [pc, #428]	; (8017078 <__ieee754_pow+0x770>)
 8016eca:	2200      	movs	r2, #0
 8016ecc:	4606      	mov	r6, r0
 8016ece:	460f      	mov	r7, r1
 8016ed0:	f7e9 f9fc 	bl	80002cc <__adddf3>
 8016ed4:	4652      	mov	r2, sl
 8016ed6:	465b      	mov	r3, fp
 8016ed8:	f7e9 f9f8 	bl	80002cc <__adddf3>
 8016edc:	2000      	movs	r0, #0
 8016ede:	4604      	mov	r4, r0
 8016ee0:	460d      	mov	r5, r1
 8016ee2:	4602      	mov	r2, r0
 8016ee4:	460b      	mov	r3, r1
 8016ee6:	4640      	mov	r0, r8
 8016ee8:	4649      	mov	r1, r9
 8016eea:	f7e9 fba5 	bl	8000638 <__aeabi_dmul>
 8016eee:	4b62      	ldr	r3, [pc, #392]	; (8017078 <__ieee754_pow+0x770>)
 8016ef0:	4680      	mov	r8, r0
 8016ef2:	4689      	mov	r9, r1
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	4629      	mov	r1, r5
 8016efa:	f7e9 f9e5 	bl	80002c8 <__aeabi_dsub>
 8016efe:	4632      	mov	r2, r6
 8016f00:	463b      	mov	r3, r7
 8016f02:	f7e9 f9e1 	bl	80002c8 <__aeabi_dsub>
 8016f06:	4602      	mov	r2, r0
 8016f08:	460b      	mov	r3, r1
 8016f0a:	4650      	mov	r0, sl
 8016f0c:	4659      	mov	r1, fp
 8016f0e:	f7e9 f9db 	bl	80002c8 <__aeabi_dsub>
 8016f12:	ec53 2b18 	vmov	r2, r3, d8
 8016f16:	f7e9 fb8f 	bl	8000638 <__aeabi_dmul>
 8016f1a:	4622      	mov	r2, r4
 8016f1c:	4606      	mov	r6, r0
 8016f1e:	460f      	mov	r7, r1
 8016f20:	462b      	mov	r3, r5
 8016f22:	ec51 0b19 	vmov	r0, r1, d9
 8016f26:	f7e9 fb87 	bl	8000638 <__aeabi_dmul>
 8016f2a:	4602      	mov	r2, r0
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	4630      	mov	r0, r6
 8016f30:	4639      	mov	r1, r7
 8016f32:	f7e9 f9cb 	bl	80002cc <__adddf3>
 8016f36:	4606      	mov	r6, r0
 8016f38:	460f      	mov	r7, r1
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	4640      	mov	r0, r8
 8016f40:	4649      	mov	r1, r9
 8016f42:	f7e9 f9c3 	bl	80002cc <__adddf3>
 8016f46:	a33e      	add	r3, pc, #248	; (adr r3, 8017040 <__ieee754_pow+0x738>)
 8016f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	4604      	mov	r4, r0
 8016f50:	460d      	mov	r5, r1
 8016f52:	f7e9 fb71 	bl	8000638 <__aeabi_dmul>
 8016f56:	4642      	mov	r2, r8
 8016f58:	ec41 0b18 	vmov	d8, r0, r1
 8016f5c:	464b      	mov	r3, r9
 8016f5e:	4620      	mov	r0, r4
 8016f60:	4629      	mov	r1, r5
 8016f62:	f7e9 f9b1 	bl	80002c8 <__aeabi_dsub>
 8016f66:	4602      	mov	r2, r0
 8016f68:	460b      	mov	r3, r1
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	f7e9 f9ab 	bl	80002c8 <__aeabi_dsub>
 8016f72:	a335      	add	r3, pc, #212	; (adr r3, 8017048 <__ieee754_pow+0x740>)
 8016f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f78:	f7e9 fb5e 	bl	8000638 <__aeabi_dmul>
 8016f7c:	a334      	add	r3, pc, #208	; (adr r3, 8017050 <__ieee754_pow+0x748>)
 8016f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f82:	4606      	mov	r6, r0
 8016f84:	460f      	mov	r7, r1
 8016f86:	4620      	mov	r0, r4
 8016f88:	4629      	mov	r1, r5
 8016f8a:	f7e9 fb55 	bl	8000638 <__aeabi_dmul>
 8016f8e:	4602      	mov	r2, r0
 8016f90:	460b      	mov	r3, r1
 8016f92:	4630      	mov	r0, r6
 8016f94:	4639      	mov	r1, r7
 8016f96:	f7e9 f999 	bl	80002cc <__adddf3>
 8016f9a:	9a07      	ldr	r2, [sp, #28]
 8016f9c:	4b37      	ldr	r3, [pc, #220]	; (801707c <__ieee754_pow+0x774>)
 8016f9e:	4413      	add	r3, r2
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	f7e9 f992 	bl	80002cc <__adddf3>
 8016fa8:	4682      	mov	sl, r0
 8016faa:	9805      	ldr	r0, [sp, #20]
 8016fac:	468b      	mov	fp, r1
 8016fae:	f7e9 fad9 	bl	8000564 <__aeabi_i2d>
 8016fb2:	9a07      	ldr	r2, [sp, #28]
 8016fb4:	4b32      	ldr	r3, [pc, #200]	; (8017080 <__ieee754_pow+0x778>)
 8016fb6:	4413      	add	r3, r2
 8016fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016fbc:	4606      	mov	r6, r0
 8016fbe:	460f      	mov	r7, r1
 8016fc0:	4652      	mov	r2, sl
 8016fc2:	465b      	mov	r3, fp
 8016fc4:	ec51 0b18 	vmov	r0, r1, d8
 8016fc8:	f7e9 f980 	bl	80002cc <__adddf3>
 8016fcc:	4642      	mov	r2, r8
 8016fce:	464b      	mov	r3, r9
 8016fd0:	f7e9 f97c 	bl	80002cc <__adddf3>
 8016fd4:	4632      	mov	r2, r6
 8016fd6:	463b      	mov	r3, r7
 8016fd8:	f7e9 f978 	bl	80002cc <__adddf3>
 8016fdc:	2000      	movs	r0, #0
 8016fde:	4632      	mov	r2, r6
 8016fe0:	463b      	mov	r3, r7
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	f7e9 f96f 	bl	80002c8 <__aeabi_dsub>
 8016fea:	4642      	mov	r2, r8
 8016fec:	464b      	mov	r3, r9
 8016fee:	f7e9 f96b 	bl	80002c8 <__aeabi_dsub>
 8016ff2:	ec53 2b18 	vmov	r2, r3, d8
 8016ff6:	f7e9 f967 	bl	80002c8 <__aeabi_dsub>
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	4650      	mov	r0, sl
 8017000:	4659      	mov	r1, fp
 8017002:	e610      	b.n	8016c26 <__ieee754_pow+0x31e>
 8017004:	2401      	movs	r4, #1
 8017006:	e6a1      	b.n	8016d4c <__ieee754_pow+0x444>
 8017008:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017058 <__ieee754_pow+0x750>
 801700c:	e617      	b.n	8016c3e <__ieee754_pow+0x336>
 801700e:	bf00      	nop
 8017010:	4a454eef 	.word	0x4a454eef
 8017014:	3fca7e28 	.word	0x3fca7e28
 8017018:	93c9db65 	.word	0x93c9db65
 801701c:	3fcd864a 	.word	0x3fcd864a
 8017020:	a91d4101 	.word	0xa91d4101
 8017024:	3fd17460 	.word	0x3fd17460
 8017028:	518f264d 	.word	0x518f264d
 801702c:	3fd55555 	.word	0x3fd55555
 8017030:	db6fabff 	.word	0xdb6fabff
 8017034:	3fdb6db6 	.word	0x3fdb6db6
 8017038:	33333303 	.word	0x33333303
 801703c:	3fe33333 	.word	0x3fe33333
 8017040:	e0000000 	.word	0xe0000000
 8017044:	3feec709 	.word	0x3feec709
 8017048:	dc3a03fd 	.word	0xdc3a03fd
 801704c:	3feec709 	.word	0x3feec709
 8017050:	145b01f5 	.word	0x145b01f5
 8017054:	be3e2fe0 	.word	0xbe3e2fe0
 8017058:	00000000 	.word	0x00000000
 801705c:	3ff00000 	.word	0x3ff00000
 8017060:	7ff00000 	.word	0x7ff00000
 8017064:	43400000 	.word	0x43400000
 8017068:	0003988e 	.word	0x0003988e
 801706c:	000bb679 	.word	0x000bb679
 8017070:	080186c0 	.word	0x080186c0
 8017074:	3ff00000 	.word	0x3ff00000
 8017078:	40080000 	.word	0x40080000
 801707c:	080186e0 	.word	0x080186e0
 8017080:	080186d0 	.word	0x080186d0
 8017084:	a3b5      	add	r3, pc, #724	; (adr r3, 801735c <__ieee754_pow+0xa54>)
 8017086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708a:	4640      	mov	r0, r8
 801708c:	4649      	mov	r1, r9
 801708e:	f7e9 f91d 	bl	80002cc <__adddf3>
 8017092:	4622      	mov	r2, r4
 8017094:	ec41 0b1a 	vmov	d10, r0, r1
 8017098:	462b      	mov	r3, r5
 801709a:	4630      	mov	r0, r6
 801709c:	4639      	mov	r1, r7
 801709e:	f7e9 f913 	bl	80002c8 <__aeabi_dsub>
 80170a2:	4602      	mov	r2, r0
 80170a4:	460b      	mov	r3, r1
 80170a6:	ec51 0b1a 	vmov	r0, r1, d10
 80170aa:	f7e9 fd55 	bl	8000b58 <__aeabi_dcmpgt>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	f47f ae04 	bne.w	8016cbc <__ieee754_pow+0x3b4>
 80170b4:	4aa4      	ldr	r2, [pc, #656]	; (8017348 <__ieee754_pow+0xa40>)
 80170b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170ba:	4293      	cmp	r3, r2
 80170bc:	f340 8108 	ble.w	80172d0 <__ieee754_pow+0x9c8>
 80170c0:	151b      	asrs	r3, r3, #20
 80170c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80170c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80170ca:	fa4a f303 	asr.w	r3, sl, r3
 80170ce:	445b      	add	r3, fp
 80170d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80170d4:	4e9d      	ldr	r6, [pc, #628]	; (801734c <__ieee754_pow+0xa44>)
 80170d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80170da:	4116      	asrs	r6, r2
 80170dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80170e0:	2000      	movs	r0, #0
 80170e2:	ea23 0106 	bic.w	r1, r3, r6
 80170e6:	f1c2 0214 	rsb	r2, r2, #20
 80170ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80170ee:	fa4a fa02 	asr.w	sl, sl, r2
 80170f2:	f1bb 0f00 	cmp.w	fp, #0
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	4620      	mov	r0, r4
 80170fc:	4629      	mov	r1, r5
 80170fe:	bfb8      	it	lt
 8017100:	f1ca 0a00 	rsblt	sl, sl, #0
 8017104:	f7e9 f8e0 	bl	80002c8 <__aeabi_dsub>
 8017108:	ec41 0b19 	vmov	d9, r0, r1
 801710c:	4642      	mov	r2, r8
 801710e:	464b      	mov	r3, r9
 8017110:	ec51 0b19 	vmov	r0, r1, d9
 8017114:	f7e9 f8da 	bl	80002cc <__adddf3>
 8017118:	a37b      	add	r3, pc, #492	; (adr r3, 8017308 <__ieee754_pow+0xa00>)
 801711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711e:	2000      	movs	r0, #0
 8017120:	4604      	mov	r4, r0
 8017122:	460d      	mov	r5, r1
 8017124:	f7e9 fa88 	bl	8000638 <__aeabi_dmul>
 8017128:	ec53 2b19 	vmov	r2, r3, d9
 801712c:	4606      	mov	r6, r0
 801712e:	460f      	mov	r7, r1
 8017130:	4620      	mov	r0, r4
 8017132:	4629      	mov	r1, r5
 8017134:	f7e9 f8c8 	bl	80002c8 <__aeabi_dsub>
 8017138:	4602      	mov	r2, r0
 801713a:	460b      	mov	r3, r1
 801713c:	4640      	mov	r0, r8
 801713e:	4649      	mov	r1, r9
 8017140:	f7e9 f8c2 	bl	80002c8 <__aeabi_dsub>
 8017144:	a372      	add	r3, pc, #456	; (adr r3, 8017310 <__ieee754_pow+0xa08>)
 8017146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714a:	f7e9 fa75 	bl	8000638 <__aeabi_dmul>
 801714e:	a372      	add	r3, pc, #456	; (adr r3, 8017318 <__ieee754_pow+0xa10>)
 8017150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017154:	4680      	mov	r8, r0
 8017156:	4689      	mov	r9, r1
 8017158:	4620      	mov	r0, r4
 801715a:	4629      	mov	r1, r5
 801715c:	f7e9 fa6c 	bl	8000638 <__aeabi_dmul>
 8017160:	4602      	mov	r2, r0
 8017162:	460b      	mov	r3, r1
 8017164:	4640      	mov	r0, r8
 8017166:	4649      	mov	r1, r9
 8017168:	f7e9 f8b0 	bl	80002cc <__adddf3>
 801716c:	4604      	mov	r4, r0
 801716e:	460d      	mov	r5, r1
 8017170:	4602      	mov	r2, r0
 8017172:	460b      	mov	r3, r1
 8017174:	4630      	mov	r0, r6
 8017176:	4639      	mov	r1, r7
 8017178:	f7e9 f8a8 	bl	80002cc <__adddf3>
 801717c:	4632      	mov	r2, r6
 801717e:	463b      	mov	r3, r7
 8017180:	4680      	mov	r8, r0
 8017182:	4689      	mov	r9, r1
 8017184:	f7e9 f8a0 	bl	80002c8 <__aeabi_dsub>
 8017188:	4602      	mov	r2, r0
 801718a:	460b      	mov	r3, r1
 801718c:	4620      	mov	r0, r4
 801718e:	4629      	mov	r1, r5
 8017190:	f7e9 f89a 	bl	80002c8 <__aeabi_dsub>
 8017194:	4642      	mov	r2, r8
 8017196:	4606      	mov	r6, r0
 8017198:	460f      	mov	r7, r1
 801719a:	464b      	mov	r3, r9
 801719c:	4640      	mov	r0, r8
 801719e:	4649      	mov	r1, r9
 80171a0:	f7e9 fa4a 	bl	8000638 <__aeabi_dmul>
 80171a4:	a35e      	add	r3, pc, #376	; (adr r3, 8017320 <__ieee754_pow+0xa18>)
 80171a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171aa:	4604      	mov	r4, r0
 80171ac:	460d      	mov	r5, r1
 80171ae:	f7e9 fa43 	bl	8000638 <__aeabi_dmul>
 80171b2:	a35d      	add	r3, pc, #372	; (adr r3, 8017328 <__ieee754_pow+0xa20>)
 80171b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b8:	f7e9 f886 	bl	80002c8 <__aeabi_dsub>
 80171bc:	4622      	mov	r2, r4
 80171be:	462b      	mov	r3, r5
 80171c0:	f7e9 fa3a 	bl	8000638 <__aeabi_dmul>
 80171c4:	a35a      	add	r3, pc, #360	; (adr r3, 8017330 <__ieee754_pow+0xa28>)
 80171c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ca:	f7e9 f87f 	bl	80002cc <__adddf3>
 80171ce:	4622      	mov	r2, r4
 80171d0:	462b      	mov	r3, r5
 80171d2:	f7e9 fa31 	bl	8000638 <__aeabi_dmul>
 80171d6:	a358      	add	r3, pc, #352	; (adr r3, 8017338 <__ieee754_pow+0xa30>)
 80171d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171dc:	f7e9 f874 	bl	80002c8 <__aeabi_dsub>
 80171e0:	4622      	mov	r2, r4
 80171e2:	462b      	mov	r3, r5
 80171e4:	f7e9 fa28 	bl	8000638 <__aeabi_dmul>
 80171e8:	a355      	add	r3, pc, #340	; (adr r3, 8017340 <__ieee754_pow+0xa38>)
 80171ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ee:	f7e9 f86d 	bl	80002cc <__adddf3>
 80171f2:	4622      	mov	r2, r4
 80171f4:	462b      	mov	r3, r5
 80171f6:	f7e9 fa1f 	bl	8000638 <__aeabi_dmul>
 80171fa:	4602      	mov	r2, r0
 80171fc:	460b      	mov	r3, r1
 80171fe:	4640      	mov	r0, r8
 8017200:	4649      	mov	r1, r9
 8017202:	f7e9 f861 	bl	80002c8 <__aeabi_dsub>
 8017206:	4604      	mov	r4, r0
 8017208:	460d      	mov	r5, r1
 801720a:	4602      	mov	r2, r0
 801720c:	460b      	mov	r3, r1
 801720e:	4640      	mov	r0, r8
 8017210:	4649      	mov	r1, r9
 8017212:	f7e9 fa11 	bl	8000638 <__aeabi_dmul>
 8017216:	2200      	movs	r2, #0
 8017218:	ec41 0b19 	vmov	d9, r0, r1
 801721c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017220:	4620      	mov	r0, r4
 8017222:	4629      	mov	r1, r5
 8017224:	f7e9 f850 	bl	80002c8 <__aeabi_dsub>
 8017228:	4602      	mov	r2, r0
 801722a:	460b      	mov	r3, r1
 801722c:	ec51 0b19 	vmov	r0, r1, d9
 8017230:	f7e9 fb2c 	bl	800088c <__aeabi_ddiv>
 8017234:	4632      	mov	r2, r6
 8017236:	4604      	mov	r4, r0
 8017238:	460d      	mov	r5, r1
 801723a:	463b      	mov	r3, r7
 801723c:	4640      	mov	r0, r8
 801723e:	4649      	mov	r1, r9
 8017240:	f7e9 f9fa 	bl	8000638 <__aeabi_dmul>
 8017244:	4632      	mov	r2, r6
 8017246:	463b      	mov	r3, r7
 8017248:	f7e9 f840 	bl	80002cc <__adddf3>
 801724c:	4602      	mov	r2, r0
 801724e:	460b      	mov	r3, r1
 8017250:	4620      	mov	r0, r4
 8017252:	4629      	mov	r1, r5
 8017254:	f7e9 f838 	bl	80002c8 <__aeabi_dsub>
 8017258:	4642      	mov	r2, r8
 801725a:	464b      	mov	r3, r9
 801725c:	f7e9 f834 	bl	80002c8 <__aeabi_dsub>
 8017260:	460b      	mov	r3, r1
 8017262:	4602      	mov	r2, r0
 8017264:	493a      	ldr	r1, [pc, #232]	; (8017350 <__ieee754_pow+0xa48>)
 8017266:	2000      	movs	r0, #0
 8017268:	f7e9 f82e 	bl	80002c8 <__aeabi_dsub>
 801726c:	ec41 0b10 	vmov	d0, r0, r1
 8017270:	ee10 3a90 	vmov	r3, s1
 8017274:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801727c:	da2b      	bge.n	80172d6 <__ieee754_pow+0x9ce>
 801727e:	4650      	mov	r0, sl
 8017280:	f000 fb0a 	bl	8017898 <scalbn>
 8017284:	ec51 0b10 	vmov	r0, r1, d0
 8017288:	ec53 2b18 	vmov	r2, r3, d8
 801728c:	f7ff bbed 	b.w	8016a6a <__ieee754_pow+0x162>
 8017290:	4b30      	ldr	r3, [pc, #192]	; (8017354 <__ieee754_pow+0xa4c>)
 8017292:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017296:	429e      	cmp	r6, r3
 8017298:	f77f af0c 	ble.w	80170b4 <__ieee754_pow+0x7ac>
 801729c:	4b2e      	ldr	r3, [pc, #184]	; (8017358 <__ieee754_pow+0xa50>)
 801729e:	440b      	add	r3, r1
 80172a0:	4303      	orrs	r3, r0
 80172a2:	d009      	beq.n	80172b8 <__ieee754_pow+0x9b0>
 80172a4:	ec51 0b18 	vmov	r0, r1, d8
 80172a8:	2200      	movs	r2, #0
 80172aa:	2300      	movs	r3, #0
 80172ac:	f7e9 fc36 	bl	8000b1c <__aeabi_dcmplt>
 80172b0:	3800      	subs	r0, #0
 80172b2:	bf18      	it	ne
 80172b4:	2001      	movne	r0, #1
 80172b6:	e447      	b.n	8016b48 <__ieee754_pow+0x240>
 80172b8:	4622      	mov	r2, r4
 80172ba:	462b      	mov	r3, r5
 80172bc:	f7e9 f804 	bl	80002c8 <__aeabi_dsub>
 80172c0:	4642      	mov	r2, r8
 80172c2:	464b      	mov	r3, r9
 80172c4:	f7e9 fc3e 	bl	8000b44 <__aeabi_dcmpge>
 80172c8:	2800      	cmp	r0, #0
 80172ca:	f43f aef3 	beq.w	80170b4 <__ieee754_pow+0x7ac>
 80172ce:	e7e9      	b.n	80172a4 <__ieee754_pow+0x99c>
 80172d0:	f04f 0a00 	mov.w	sl, #0
 80172d4:	e71a      	b.n	801710c <__ieee754_pow+0x804>
 80172d6:	ec51 0b10 	vmov	r0, r1, d0
 80172da:	4619      	mov	r1, r3
 80172dc:	e7d4      	b.n	8017288 <__ieee754_pow+0x980>
 80172de:	491c      	ldr	r1, [pc, #112]	; (8017350 <__ieee754_pow+0xa48>)
 80172e0:	2000      	movs	r0, #0
 80172e2:	f7ff bb30 	b.w	8016946 <__ieee754_pow+0x3e>
 80172e6:	2000      	movs	r0, #0
 80172e8:	2100      	movs	r1, #0
 80172ea:	f7ff bb2c 	b.w	8016946 <__ieee754_pow+0x3e>
 80172ee:	4630      	mov	r0, r6
 80172f0:	4639      	mov	r1, r7
 80172f2:	f7ff bb28 	b.w	8016946 <__ieee754_pow+0x3e>
 80172f6:	9204      	str	r2, [sp, #16]
 80172f8:	f7ff bb7a 	b.w	80169f0 <__ieee754_pow+0xe8>
 80172fc:	2300      	movs	r3, #0
 80172fe:	f7ff bb64 	b.w	80169ca <__ieee754_pow+0xc2>
 8017302:	bf00      	nop
 8017304:	f3af 8000 	nop.w
 8017308:	00000000 	.word	0x00000000
 801730c:	3fe62e43 	.word	0x3fe62e43
 8017310:	fefa39ef 	.word	0xfefa39ef
 8017314:	3fe62e42 	.word	0x3fe62e42
 8017318:	0ca86c39 	.word	0x0ca86c39
 801731c:	be205c61 	.word	0xbe205c61
 8017320:	72bea4d0 	.word	0x72bea4d0
 8017324:	3e663769 	.word	0x3e663769
 8017328:	c5d26bf1 	.word	0xc5d26bf1
 801732c:	3ebbbd41 	.word	0x3ebbbd41
 8017330:	af25de2c 	.word	0xaf25de2c
 8017334:	3f11566a 	.word	0x3f11566a
 8017338:	16bebd93 	.word	0x16bebd93
 801733c:	3f66c16c 	.word	0x3f66c16c
 8017340:	5555553e 	.word	0x5555553e
 8017344:	3fc55555 	.word	0x3fc55555
 8017348:	3fe00000 	.word	0x3fe00000
 801734c:	000fffff 	.word	0x000fffff
 8017350:	3ff00000 	.word	0x3ff00000
 8017354:	4090cbff 	.word	0x4090cbff
 8017358:	3f6f3400 	.word	0x3f6f3400
 801735c:	652b82fe 	.word	0x652b82fe
 8017360:	3c971547 	.word	0x3c971547

08017364 <__ieee754_sqrt>:
 8017364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017368:	ec55 4b10 	vmov	r4, r5, d0
 801736c:	4e55      	ldr	r6, [pc, #340]	; (80174c4 <__ieee754_sqrt+0x160>)
 801736e:	43ae      	bics	r6, r5
 8017370:	ee10 0a10 	vmov	r0, s0
 8017374:	ee10 3a10 	vmov	r3, s0
 8017378:	462a      	mov	r2, r5
 801737a:	4629      	mov	r1, r5
 801737c:	d110      	bne.n	80173a0 <__ieee754_sqrt+0x3c>
 801737e:	ee10 2a10 	vmov	r2, s0
 8017382:	462b      	mov	r3, r5
 8017384:	f7e9 f958 	bl	8000638 <__aeabi_dmul>
 8017388:	4602      	mov	r2, r0
 801738a:	460b      	mov	r3, r1
 801738c:	4620      	mov	r0, r4
 801738e:	4629      	mov	r1, r5
 8017390:	f7e8 ff9c 	bl	80002cc <__adddf3>
 8017394:	4604      	mov	r4, r0
 8017396:	460d      	mov	r5, r1
 8017398:	ec45 4b10 	vmov	d0, r4, r5
 801739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173a0:	2d00      	cmp	r5, #0
 80173a2:	dc10      	bgt.n	80173c6 <__ieee754_sqrt+0x62>
 80173a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80173a8:	4330      	orrs	r0, r6
 80173aa:	d0f5      	beq.n	8017398 <__ieee754_sqrt+0x34>
 80173ac:	b15d      	cbz	r5, 80173c6 <__ieee754_sqrt+0x62>
 80173ae:	ee10 2a10 	vmov	r2, s0
 80173b2:	462b      	mov	r3, r5
 80173b4:	ee10 0a10 	vmov	r0, s0
 80173b8:	f7e8 ff86 	bl	80002c8 <__aeabi_dsub>
 80173bc:	4602      	mov	r2, r0
 80173be:	460b      	mov	r3, r1
 80173c0:	f7e9 fa64 	bl	800088c <__aeabi_ddiv>
 80173c4:	e7e6      	b.n	8017394 <__ieee754_sqrt+0x30>
 80173c6:	1512      	asrs	r2, r2, #20
 80173c8:	d074      	beq.n	80174b4 <__ieee754_sqrt+0x150>
 80173ca:	07d4      	lsls	r4, r2, #31
 80173cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80173d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80173d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80173d8:	bf5e      	ittt	pl
 80173da:	0fda      	lsrpl	r2, r3, #31
 80173dc:	005b      	lslpl	r3, r3, #1
 80173de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80173e2:	2400      	movs	r4, #0
 80173e4:	0fda      	lsrs	r2, r3, #31
 80173e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80173ea:	107f      	asrs	r7, r7, #1
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	2516      	movs	r5, #22
 80173f0:	4620      	mov	r0, r4
 80173f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80173f6:	1886      	adds	r6, r0, r2
 80173f8:	428e      	cmp	r6, r1
 80173fa:	bfde      	ittt	le
 80173fc:	1b89      	suble	r1, r1, r6
 80173fe:	18b0      	addle	r0, r6, r2
 8017400:	18a4      	addle	r4, r4, r2
 8017402:	0049      	lsls	r1, r1, #1
 8017404:	3d01      	subs	r5, #1
 8017406:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801740a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801740e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017412:	d1f0      	bne.n	80173f6 <__ieee754_sqrt+0x92>
 8017414:	462a      	mov	r2, r5
 8017416:	f04f 0e20 	mov.w	lr, #32
 801741a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801741e:	4281      	cmp	r1, r0
 8017420:	eb06 0c05 	add.w	ip, r6, r5
 8017424:	dc02      	bgt.n	801742c <__ieee754_sqrt+0xc8>
 8017426:	d113      	bne.n	8017450 <__ieee754_sqrt+0xec>
 8017428:	459c      	cmp	ip, r3
 801742a:	d811      	bhi.n	8017450 <__ieee754_sqrt+0xec>
 801742c:	f1bc 0f00 	cmp.w	ip, #0
 8017430:	eb0c 0506 	add.w	r5, ip, r6
 8017434:	da43      	bge.n	80174be <__ieee754_sqrt+0x15a>
 8017436:	2d00      	cmp	r5, #0
 8017438:	db41      	blt.n	80174be <__ieee754_sqrt+0x15a>
 801743a:	f100 0801 	add.w	r8, r0, #1
 801743e:	1a09      	subs	r1, r1, r0
 8017440:	459c      	cmp	ip, r3
 8017442:	bf88      	it	hi
 8017444:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8017448:	eba3 030c 	sub.w	r3, r3, ip
 801744c:	4432      	add	r2, r6
 801744e:	4640      	mov	r0, r8
 8017450:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8017454:	f1be 0e01 	subs.w	lr, lr, #1
 8017458:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801745c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017460:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017464:	d1db      	bne.n	801741e <__ieee754_sqrt+0xba>
 8017466:	430b      	orrs	r3, r1
 8017468:	d006      	beq.n	8017478 <__ieee754_sqrt+0x114>
 801746a:	1c50      	adds	r0, r2, #1
 801746c:	bf13      	iteet	ne
 801746e:	3201      	addne	r2, #1
 8017470:	3401      	addeq	r4, #1
 8017472:	4672      	moveq	r2, lr
 8017474:	f022 0201 	bicne.w	r2, r2, #1
 8017478:	1063      	asrs	r3, r4, #1
 801747a:	0852      	lsrs	r2, r2, #1
 801747c:	07e1      	lsls	r1, r4, #31
 801747e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8017482:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8017486:	bf48      	it	mi
 8017488:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801748c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8017490:	4614      	mov	r4, r2
 8017492:	e781      	b.n	8017398 <__ieee754_sqrt+0x34>
 8017494:	0ad9      	lsrs	r1, r3, #11
 8017496:	3815      	subs	r0, #21
 8017498:	055b      	lsls	r3, r3, #21
 801749a:	2900      	cmp	r1, #0
 801749c:	d0fa      	beq.n	8017494 <__ieee754_sqrt+0x130>
 801749e:	02cd      	lsls	r5, r1, #11
 80174a0:	d50a      	bpl.n	80174b8 <__ieee754_sqrt+0x154>
 80174a2:	f1c2 0420 	rsb	r4, r2, #32
 80174a6:	fa23 f404 	lsr.w	r4, r3, r4
 80174aa:	1e55      	subs	r5, r2, #1
 80174ac:	4093      	lsls	r3, r2
 80174ae:	4321      	orrs	r1, r4
 80174b0:	1b42      	subs	r2, r0, r5
 80174b2:	e78a      	b.n	80173ca <__ieee754_sqrt+0x66>
 80174b4:	4610      	mov	r0, r2
 80174b6:	e7f0      	b.n	801749a <__ieee754_sqrt+0x136>
 80174b8:	0049      	lsls	r1, r1, #1
 80174ba:	3201      	adds	r2, #1
 80174bc:	e7ef      	b.n	801749e <__ieee754_sqrt+0x13a>
 80174be:	4680      	mov	r8, r0
 80174c0:	e7bd      	b.n	801743e <__ieee754_sqrt+0xda>
 80174c2:	bf00      	nop
 80174c4:	7ff00000 	.word	0x7ff00000

080174c8 <__ieee754_sqrtf>:
 80174c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80174cc:	4770      	bx	lr

080174ce <with_errno>:
 80174ce:	b570      	push	{r4, r5, r6, lr}
 80174d0:	4604      	mov	r4, r0
 80174d2:	460d      	mov	r5, r1
 80174d4:	4616      	mov	r6, r2
 80174d6:	f7f9 fab7 	bl	8010a48 <__errno>
 80174da:	4629      	mov	r1, r5
 80174dc:	6006      	str	r6, [r0, #0]
 80174de:	4620      	mov	r0, r4
 80174e0:	bd70      	pop	{r4, r5, r6, pc}

080174e2 <xflow>:
 80174e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174e4:	4614      	mov	r4, r2
 80174e6:	461d      	mov	r5, r3
 80174e8:	b108      	cbz	r0, 80174ee <xflow+0xc>
 80174ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80174ee:	e9cd 2300 	strd	r2, r3, [sp]
 80174f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174f6:	4620      	mov	r0, r4
 80174f8:	4629      	mov	r1, r5
 80174fa:	f7e9 f89d 	bl	8000638 <__aeabi_dmul>
 80174fe:	2222      	movs	r2, #34	; 0x22
 8017500:	b003      	add	sp, #12
 8017502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017506:	f7ff bfe2 	b.w	80174ce <with_errno>

0801750a <__math_uflow>:
 801750a:	b508      	push	{r3, lr}
 801750c:	2200      	movs	r2, #0
 801750e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017512:	f7ff ffe6 	bl	80174e2 <xflow>
 8017516:	ec41 0b10 	vmov	d0, r0, r1
 801751a:	bd08      	pop	{r3, pc}

0801751c <__math_oflow>:
 801751c:	b508      	push	{r3, lr}
 801751e:	2200      	movs	r2, #0
 8017520:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017524:	f7ff ffdd 	bl	80174e2 <xflow>
 8017528:	ec41 0b10 	vmov	d0, r0, r1
 801752c:	bd08      	pop	{r3, pc}
	...

08017530 <atan>:
 8017530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017534:	ec55 4b10 	vmov	r4, r5, d0
 8017538:	4bc3      	ldr	r3, [pc, #780]	; (8017848 <atan+0x318>)
 801753a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801753e:	429e      	cmp	r6, r3
 8017540:	46ab      	mov	fp, r5
 8017542:	dd18      	ble.n	8017576 <atan+0x46>
 8017544:	4bc1      	ldr	r3, [pc, #772]	; (801784c <atan+0x31c>)
 8017546:	429e      	cmp	r6, r3
 8017548:	dc01      	bgt.n	801754e <atan+0x1e>
 801754a:	d109      	bne.n	8017560 <atan+0x30>
 801754c:	b144      	cbz	r4, 8017560 <atan+0x30>
 801754e:	4622      	mov	r2, r4
 8017550:	462b      	mov	r3, r5
 8017552:	4620      	mov	r0, r4
 8017554:	4629      	mov	r1, r5
 8017556:	f7e8 feb9 	bl	80002cc <__adddf3>
 801755a:	4604      	mov	r4, r0
 801755c:	460d      	mov	r5, r1
 801755e:	e006      	b.n	801756e <atan+0x3e>
 8017560:	f1bb 0f00 	cmp.w	fp, #0
 8017564:	f300 8131 	bgt.w	80177ca <atan+0x29a>
 8017568:	a59b      	add	r5, pc, #620	; (adr r5, 80177d8 <atan+0x2a8>)
 801756a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801756e:	ec45 4b10 	vmov	d0, r4, r5
 8017572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017576:	4bb6      	ldr	r3, [pc, #728]	; (8017850 <atan+0x320>)
 8017578:	429e      	cmp	r6, r3
 801757a:	dc14      	bgt.n	80175a6 <atan+0x76>
 801757c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017580:	429e      	cmp	r6, r3
 8017582:	dc0d      	bgt.n	80175a0 <atan+0x70>
 8017584:	a396      	add	r3, pc, #600	; (adr r3, 80177e0 <atan+0x2b0>)
 8017586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758a:	ee10 0a10 	vmov	r0, s0
 801758e:	4629      	mov	r1, r5
 8017590:	f7e8 fe9c 	bl	80002cc <__adddf3>
 8017594:	4baf      	ldr	r3, [pc, #700]	; (8017854 <atan+0x324>)
 8017596:	2200      	movs	r2, #0
 8017598:	f7e9 fade 	bl	8000b58 <__aeabi_dcmpgt>
 801759c:	2800      	cmp	r0, #0
 801759e:	d1e6      	bne.n	801756e <atan+0x3e>
 80175a0:	f04f 3aff 	mov.w	sl, #4294967295
 80175a4:	e02b      	b.n	80175fe <atan+0xce>
 80175a6:	f000 f963 	bl	8017870 <fabs>
 80175aa:	4bab      	ldr	r3, [pc, #684]	; (8017858 <atan+0x328>)
 80175ac:	429e      	cmp	r6, r3
 80175ae:	ec55 4b10 	vmov	r4, r5, d0
 80175b2:	f300 80bf 	bgt.w	8017734 <atan+0x204>
 80175b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80175ba:	429e      	cmp	r6, r3
 80175bc:	f300 80a0 	bgt.w	8017700 <atan+0x1d0>
 80175c0:	ee10 2a10 	vmov	r2, s0
 80175c4:	ee10 0a10 	vmov	r0, s0
 80175c8:	462b      	mov	r3, r5
 80175ca:	4629      	mov	r1, r5
 80175cc:	f7e8 fe7e 	bl	80002cc <__adddf3>
 80175d0:	4ba0      	ldr	r3, [pc, #640]	; (8017854 <atan+0x324>)
 80175d2:	2200      	movs	r2, #0
 80175d4:	f7e8 fe78 	bl	80002c8 <__aeabi_dsub>
 80175d8:	2200      	movs	r2, #0
 80175da:	4606      	mov	r6, r0
 80175dc:	460f      	mov	r7, r1
 80175de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175e2:	4620      	mov	r0, r4
 80175e4:	4629      	mov	r1, r5
 80175e6:	f7e8 fe71 	bl	80002cc <__adddf3>
 80175ea:	4602      	mov	r2, r0
 80175ec:	460b      	mov	r3, r1
 80175ee:	4630      	mov	r0, r6
 80175f0:	4639      	mov	r1, r7
 80175f2:	f7e9 f94b 	bl	800088c <__aeabi_ddiv>
 80175f6:	f04f 0a00 	mov.w	sl, #0
 80175fa:	4604      	mov	r4, r0
 80175fc:	460d      	mov	r5, r1
 80175fe:	4622      	mov	r2, r4
 8017600:	462b      	mov	r3, r5
 8017602:	4620      	mov	r0, r4
 8017604:	4629      	mov	r1, r5
 8017606:	f7e9 f817 	bl	8000638 <__aeabi_dmul>
 801760a:	4602      	mov	r2, r0
 801760c:	460b      	mov	r3, r1
 801760e:	4680      	mov	r8, r0
 8017610:	4689      	mov	r9, r1
 8017612:	f7e9 f811 	bl	8000638 <__aeabi_dmul>
 8017616:	a374      	add	r3, pc, #464	; (adr r3, 80177e8 <atan+0x2b8>)
 8017618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801761c:	4606      	mov	r6, r0
 801761e:	460f      	mov	r7, r1
 8017620:	f7e9 f80a 	bl	8000638 <__aeabi_dmul>
 8017624:	a372      	add	r3, pc, #456	; (adr r3, 80177f0 <atan+0x2c0>)
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	f7e8 fe4f 	bl	80002cc <__adddf3>
 801762e:	4632      	mov	r2, r6
 8017630:	463b      	mov	r3, r7
 8017632:	f7e9 f801 	bl	8000638 <__aeabi_dmul>
 8017636:	a370      	add	r3, pc, #448	; (adr r3, 80177f8 <atan+0x2c8>)
 8017638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763c:	f7e8 fe46 	bl	80002cc <__adddf3>
 8017640:	4632      	mov	r2, r6
 8017642:	463b      	mov	r3, r7
 8017644:	f7e8 fff8 	bl	8000638 <__aeabi_dmul>
 8017648:	a36d      	add	r3, pc, #436	; (adr r3, 8017800 <atan+0x2d0>)
 801764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764e:	f7e8 fe3d 	bl	80002cc <__adddf3>
 8017652:	4632      	mov	r2, r6
 8017654:	463b      	mov	r3, r7
 8017656:	f7e8 ffef 	bl	8000638 <__aeabi_dmul>
 801765a:	a36b      	add	r3, pc, #428	; (adr r3, 8017808 <atan+0x2d8>)
 801765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017660:	f7e8 fe34 	bl	80002cc <__adddf3>
 8017664:	4632      	mov	r2, r6
 8017666:	463b      	mov	r3, r7
 8017668:	f7e8 ffe6 	bl	8000638 <__aeabi_dmul>
 801766c:	a368      	add	r3, pc, #416	; (adr r3, 8017810 <atan+0x2e0>)
 801766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017672:	f7e8 fe2b 	bl	80002cc <__adddf3>
 8017676:	4642      	mov	r2, r8
 8017678:	464b      	mov	r3, r9
 801767a:	f7e8 ffdd 	bl	8000638 <__aeabi_dmul>
 801767e:	a366      	add	r3, pc, #408	; (adr r3, 8017818 <atan+0x2e8>)
 8017680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017684:	4680      	mov	r8, r0
 8017686:	4689      	mov	r9, r1
 8017688:	4630      	mov	r0, r6
 801768a:	4639      	mov	r1, r7
 801768c:	f7e8 ffd4 	bl	8000638 <__aeabi_dmul>
 8017690:	a363      	add	r3, pc, #396	; (adr r3, 8017820 <atan+0x2f0>)
 8017692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017696:	f7e8 fe17 	bl	80002c8 <__aeabi_dsub>
 801769a:	4632      	mov	r2, r6
 801769c:	463b      	mov	r3, r7
 801769e:	f7e8 ffcb 	bl	8000638 <__aeabi_dmul>
 80176a2:	a361      	add	r3, pc, #388	; (adr r3, 8017828 <atan+0x2f8>)
 80176a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a8:	f7e8 fe0e 	bl	80002c8 <__aeabi_dsub>
 80176ac:	4632      	mov	r2, r6
 80176ae:	463b      	mov	r3, r7
 80176b0:	f7e8 ffc2 	bl	8000638 <__aeabi_dmul>
 80176b4:	a35e      	add	r3, pc, #376	; (adr r3, 8017830 <atan+0x300>)
 80176b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ba:	f7e8 fe05 	bl	80002c8 <__aeabi_dsub>
 80176be:	4632      	mov	r2, r6
 80176c0:	463b      	mov	r3, r7
 80176c2:	f7e8 ffb9 	bl	8000638 <__aeabi_dmul>
 80176c6:	a35c      	add	r3, pc, #368	; (adr r3, 8017838 <atan+0x308>)
 80176c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176cc:	f7e8 fdfc 	bl	80002c8 <__aeabi_dsub>
 80176d0:	4632      	mov	r2, r6
 80176d2:	463b      	mov	r3, r7
 80176d4:	f7e8 ffb0 	bl	8000638 <__aeabi_dmul>
 80176d8:	4602      	mov	r2, r0
 80176da:	460b      	mov	r3, r1
 80176dc:	4640      	mov	r0, r8
 80176de:	4649      	mov	r1, r9
 80176e0:	f7e8 fdf4 	bl	80002cc <__adddf3>
 80176e4:	4622      	mov	r2, r4
 80176e6:	462b      	mov	r3, r5
 80176e8:	f7e8 ffa6 	bl	8000638 <__aeabi_dmul>
 80176ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80176f0:	4602      	mov	r2, r0
 80176f2:	460b      	mov	r3, r1
 80176f4:	d14b      	bne.n	801778e <atan+0x25e>
 80176f6:	4620      	mov	r0, r4
 80176f8:	4629      	mov	r1, r5
 80176fa:	f7e8 fde5 	bl	80002c8 <__aeabi_dsub>
 80176fe:	e72c      	b.n	801755a <atan+0x2a>
 8017700:	ee10 0a10 	vmov	r0, s0
 8017704:	4b53      	ldr	r3, [pc, #332]	; (8017854 <atan+0x324>)
 8017706:	2200      	movs	r2, #0
 8017708:	4629      	mov	r1, r5
 801770a:	f7e8 fddd 	bl	80002c8 <__aeabi_dsub>
 801770e:	4b51      	ldr	r3, [pc, #324]	; (8017854 <atan+0x324>)
 8017710:	4606      	mov	r6, r0
 8017712:	460f      	mov	r7, r1
 8017714:	2200      	movs	r2, #0
 8017716:	4620      	mov	r0, r4
 8017718:	4629      	mov	r1, r5
 801771a:	f7e8 fdd7 	bl	80002cc <__adddf3>
 801771e:	4602      	mov	r2, r0
 8017720:	460b      	mov	r3, r1
 8017722:	4630      	mov	r0, r6
 8017724:	4639      	mov	r1, r7
 8017726:	f7e9 f8b1 	bl	800088c <__aeabi_ddiv>
 801772a:	f04f 0a01 	mov.w	sl, #1
 801772e:	4604      	mov	r4, r0
 8017730:	460d      	mov	r5, r1
 8017732:	e764      	b.n	80175fe <atan+0xce>
 8017734:	4b49      	ldr	r3, [pc, #292]	; (801785c <atan+0x32c>)
 8017736:	429e      	cmp	r6, r3
 8017738:	da1d      	bge.n	8017776 <atan+0x246>
 801773a:	ee10 0a10 	vmov	r0, s0
 801773e:	4b48      	ldr	r3, [pc, #288]	; (8017860 <atan+0x330>)
 8017740:	2200      	movs	r2, #0
 8017742:	4629      	mov	r1, r5
 8017744:	f7e8 fdc0 	bl	80002c8 <__aeabi_dsub>
 8017748:	4b45      	ldr	r3, [pc, #276]	; (8017860 <atan+0x330>)
 801774a:	4606      	mov	r6, r0
 801774c:	460f      	mov	r7, r1
 801774e:	2200      	movs	r2, #0
 8017750:	4620      	mov	r0, r4
 8017752:	4629      	mov	r1, r5
 8017754:	f7e8 ff70 	bl	8000638 <__aeabi_dmul>
 8017758:	4b3e      	ldr	r3, [pc, #248]	; (8017854 <atan+0x324>)
 801775a:	2200      	movs	r2, #0
 801775c:	f7e8 fdb6 	bl	80002cc <__adddf3>
 8017760:	4602      	mov	r2, r0
 8017762:	460b      	mov	r3, r1
 8017764:	4630      	mov	r0, r6
 8017766:	4639      	mov	r1, r7
 8017768:	f7e9 f890 	bl	800088c <__aeabi_ddiv>
 801776c:	f04f 0a02 	mov.w	sl, #2
 8017770:	4604      	mov	r4, r0
 8017772:	460d      	mov	r5, r1
 8017774:	e743      	b.n	80175fe <atan+0xce>
 8017776:	462b      	mov	r3, r5
 8017778:	ee10 2a10 	vmov	r2, s0
 801777c:	4939      	ldr	r1, [pc, #228]	; (8017864 <atan+0x334>)
 801777e:	2000      	movs	r0, #0
 8017780:	f7e9 f884 	bl	800088c <__aeabi_ddiv>
 8017784:	f04f 0a03 	mov.w	sl, #3
 8017788:	4604      	mov	r4, r0
 801778a:	460d      	mov	r5, r1
 801778c:	e737      	b.n	80175fe <atan+0xce>
 801778e:	4b36      	ldr	r3, [pc, #216]	; (8017868 <atan+0x338>)
 8017790:	4e36      	ldr	r6, [pc, #216]	; (801786c <atan+0x33c>)
 8017792:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017796:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801779a:	e9da 2300 	ldrd	r2, r3, [sl]
 801779e:	f7e8 fd93 	bl	80002c8 <__aeabi_dsub>
 80177a2:	4622      	mov	r2, r4
 80177a4:	462b      	mov	r3, r5
 80177a6:	f7e8 fd8f 	bl	80002c8 <__aeabi_dsub>
 80177aa:	4602      	mov	r2, r0
 80177ac:	460b      	mov	r3, r1
 80177ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80177b2:	f7e8 fd89 	bl	80002c8 <__aeabi_dsub>
 80177b6:	f1bb 0f00 	cmp.w	fp, #0
 80177ba:	4604      	mov	r4, r0
 80177bc:	460d      	mov	r5, r1
 80177be:	f6bf aed6 	bge.w	801756e <atan+0x3e>
 80177c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177c6:	461d      	mov	r5, r3
 80177c8:	e6d1      	b.n	801756e <atan+0x3e>
 80177ca:	a51d      	add	r5, pc, #116	; (adr r5, 8017840 <atan+0x310>)
 80177cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80177d0:	e6cd      	b.n	801756e <atan+0x3e>
 80177d2:	bf00      	nop
 80177d4:	f3af 8000 	nop.w
 80177d8:	54442d18 	.word	0x54442d18
 80177dc:	bff921fb 	.word	0xbff921fb
 80177e0:	8800759c 	.word	0x8800759c
 80177e4:	7e37e43c 	.word	0x7e37e43c
 80177e8:	e322da11 	.word	0xe322da11
 80177ec:	3f90ad3a 	.word	0x3f90ad3a
 80177f0:	24760deb 	.word	0x24760deb
 80177f4:	3fa97b4b 	.word	0x3fa97b4b
 80177f8:	a0d03d51 	.word	0xa0d03d51
 80177fc:	3fb10d66 	.word	0x3fb10d66
 8017800:	c54c206e 	.word	0xc54c206e
 8017804:	3fb745cd 	.word	0x3fb745cd
 8017808:	920083ff 	.word	0x920083ff
 801780c:	3fc24924 	.word	0x3fc24924
 8017810:	5555550d 	.word	0x5555550d
 8017814:	3fd55555 	.word	0x3fd55555
 8017818:	2c6a6c2f 	.word	0x2c6a6c2f
 801781c:	bfa2b444 	.word	0xbfa2b444
 8017820:	52defd9a 	.word	0x52defd9a
 8017824:	3fadde2d 	.word	0x3fadde2d
 8017828:	af749a6d 	.word	0xaf749a6d
 801782c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017830:	fe231671 	.word	0xfe231671
 8017834:	3fbc71c6 	.word	0x3fbc71c6
 8017838:	9998ebc4 	.word	0x9998ebc4
 801783c:	3fc99999 	.word	0x3fc99999
 8017840:	54442d18 	.word	0x54442d18
 8017844:	3ff921fb 	.word	0x3ff921fb
 8017848:	440fffff 	.word	0x440fffff
 801784c:	7ff00000 	.word	0x7ff00000
 8017850:	3fdbffff 	.word	0x3fdbffff
 8017854:	3ff00000 	.word	0x3ff00000
 8017858:	3ff2ffff 	.word	0x3ff2ffff
 801785c:	40038000 	.word	0x40038000
 8017860:	3ff80000 	.word	0x3ff80000
 8017864:	bff00000 	.word	0xbff00000
 8017868:	08018710 	.word	0x08018710
 801786c:	080186f0 	.word	0x080186f0

08017870 <fabs>:
 8017870:	ec51 0b10 	vmov	r0, r1, d0
 8017874:	ee10 2a10 	vmov	r2, s0
 8017878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801787c:	ec43 2b10 	vmov	d0, r2, r3
 8017880:	4770      	bx	lr

08017882 <finite>:
 8017882:	b082      	sub	sp, #8
 8017884:	ed8d 0b00 	vstr	d0, [sp]
 8017888:	9801      	ldr	r0, [sp, #4]
 801788a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801788e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017892:	0fc0      	lsrs	r0, r0, #31
 8017894:	b002      	add	sp, #8
 8017896:	4770      	bx	lr

08017898 <scalbn>:
 8017898:	b570      	push	{r4, r5, r6, lr}
 801789a:	ec55 4b10 	vmov	r4, r5, d0
 801789e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80178a2:	4606      	mov	r6, r0
 80178a4:	462b      	mov	r3, r5
 80178a6:	b99a      	cbnz	r2, 80178d0 <scalbn+0x38>
 80178a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80178ac:	4323      	orrs	r3, r4
 80178ae:	d036      	beq.n	801791e <scalbn+0x86>
 80178b0:	4b39      	ldr	r3, [pc, #228]	; (8017998 <scalbn+0x100>)
 80178b2:	4629      	mov	r1, r5
 80178b4:	ee10 0a10 	vmov	r0, s0
 80178b8:	2200      	movs	r2, #0
 80178ba:	f7e8 febd 	bl	8000638 <__aeabi_dmul>
 80178be:	4b37      	ldr	r3, [pc, #220]	; (801799c <scalbn+0x104>)
 80178c0:	429e      	cmp	r6, r3
 80178c2:	4604      	mov	r4, r0
 80178c4:	460d      	mov	r5, r1
 80178c6:	da10      	bge.n	80178ea <scalbn+0x52>
 80178c8:	a32b      	add	r3, pc, #172	; (adr r3, 8017978 <scalbn+0xe0>)
 80178ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ce:	e03a      	b.n	8017946 <scalbn+0xae>
 80178d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80178d4:	428a      	cmp	r2, r1
 80178d6:	d10c      	bne.n	80178f2 <scalbn+0x5a>
 80178d8:	ee10 2a10 	vmov	r2, s0
 80178dc:	4620      	mov	r0, r4
 80178de:	4629      	mov	r1, r5
 80178e0:	f7e8 fcf4 	bl	80002cc <__adddf3>
 80178e4:	4604      	mov	r4, r0
 80178e6:	460d      	mov	r5, r1
 80178e8:	e019      	b.n	801791e <scalbn+0x86>
 80178ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80178ee:	460b      	mov	r3, r1
 80178f0:	3a36      	subs	r2, #54	; 0x36
 80178f2:	4432      	add	r2, r6
 80178f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80178f8:	428a      	cmp	r2, r1
 80178fa:	dd08      	ble.n	801790e <scalbn+0x76>
 80178fc:	2d00      	cmp	r5, #0
 80178fe:	a120      	add	r1, pc, #128	; (adr r1, 8017980 <scalbn+0xe8>)
 8017900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017904:	da1c      	bge.n	8017940 <scalbn+0xa8>
 8017906:	a120      	add	r1, pc, #128	; (adr r1, 8017988 <scalbn+0xf0>)
 8017908:	e9d1 0100 	ldrd	r0, r1, [r1]
 801790c:	e018      	b.n	8017940 <scalbn+0xa8>
 801790e:	2a00      	cmp	r2, #0
 8017910:	dd08      	ble.n	8017924 <scalbn+0x8c>
 8017912:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801791a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801791e:	ec45 4b10 	vmov	d0, r4, r5
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017928:	da19      	bge.n	801795e <scalbn+0xc6>
 801792a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801792e:	429e      	cmp	r6, r3
 8017930:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017934:	dd0a      	ble.n	801794c <scalbn+0xb4>
 8017936:	a112      	add	r1, pc, #72	; (adr r1, 8017980 <scalbn+0xe8>)
 8017938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d1e2      	bne.n	8017906 <scalbn+0x6e>
 8017940:	a30f      	add	r3, pc, #60	; (adr r3, 8017980 <scalbn+0xe8>)
 8017942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017946:	f7e8 fe77 	bl	8000638 <__aeabi_dmul>
 801794a:	e7cb      	b.n	80178e4 <scalbn+0x4c>
 801794c:	a10a      	add	r1, pc, #40	; (adr r1, 8017978 <scalbn+0xe0>)
 801794e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d0b8      	beq.n	80178c8 <scalbn+0x30>
 8017956:	a10e      	add	r1, pc, #56	; (adr r1, 8017990 <scalbn+0xf8>)
 8017958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801795c:	e7b4      	b.n	80178c8 <scalbn+0x30>
 801795e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017962:	3236      	adds	r2, #54	; 0x36
 8017964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017968:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801796c:	4620      	mov	r0, r4
 801796e:	4b0c      	ldr	r3, [pc, #48]	; (80179a0 <scalbn+0x108>)
 8017970:	2200      	movs	r2, #0
 8017972:	e7e8      	b.n	8017946 <scalbn+0xae>
 8017974:	f3af 8000 	nop.w
 8017978:	c2f8f359 	.word	0xc2f8f359
 801797c:	01a56e1f 	.word	0x01a56e1f
 8017980:	8800759c 	.word	0x8800759c
 8017984:	7e37e43c 	.word	0x7e37e43c
 8017988:	8800759c 	.word	0x8800759c
 801798c:	fe37e43c 	.word	0xfe37e43c
 8017990:	c2f8f359 	.word	0xc2f8f359
 8017994:	81a56e1f 	.word	0x81a56e1f
 8017998:	43500000 	.word	0x43500000
 801799c:	ffff3cb0 	.word	0xffff3cb0
 80179a0:	3c900000 	.word	0x3c900000

080179a4 <_init>:
 80179a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a6:	bf00      	nop
 80179a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179aa:	bc08      	pop	{r3}
 80179ac:	469e      	mov	lr, r3
 80179ae:	4770      	bx	lr

080179b0 <_fini>:
 80179b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179b2:	bf00      	nop
 80179b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179b6:	bc08      	pop	{r3}
 80179b8:	469e      	mov	lr, r3
 80179ba:	4770      	bx	lr
