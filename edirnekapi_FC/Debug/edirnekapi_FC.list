
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08011148  08011148  00021148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011770  08011770  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011770  08011770  00021770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011778  08011778  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011778  08011778  00021778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801177c  0801177c  0002177c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  200001e8  08011968  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  08011968  0003117c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014587  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f7  00000000  00000000  0004479f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00047898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  000486d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026147  00000000  00000000  000493d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fa2  00000000  00000000  0006f51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba33  00000000  00000000  000854c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160ef4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00160f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801112c 	.word	0x0801112c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801112c 	.word	0x0801112c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0000      	movs	r0, r0
	...

080012f8 <sqr>:
uint8_t is_secondP_OK = 0;

uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001302:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001328 <sqr+0x30>
 8001306:	ed97 0b00 	vldr	d0, [r7]
 800130a:	f00e f8c5 	bl	800f498 <pow>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
}
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000

08001330 <algorithm_2_update>:
	  }
  }
}

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f7ff ffd1 	bl	80012f8 <sqr>
 8001356:	ec55 4b10 	vmov	r4, r5, d0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	ec43 2b10 	vmov	d0, r2, r3
 800136e:	f7ff ffc3 	bl	80012f8 <sqr>
 8001372:	ec53 2b10 	vmov	r2, r3, d0
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7fe ffa7 	bl	80002cc <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4614      	mov	r4, r2
 8001384:	461d      	mov	r5, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8fb 	bl	8000588 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	ec43 2b10 	vmov	d0, r2, r3
 800139a:	f7ff ffad 	bl	80012f8 <sqr>
 800139e:	ec53 2b10 	vmov	r2, r3, d0
 80013a2:	4620      	mov	r0, r4
 80013a4:	4629      	mov	r1, r5
 80013a6:	f7fe ff91 	bl	80002cc <__adddf3>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc39 	bl	8000c28 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	ee00 3a10 	vmov	s0, r3
 80013bc:	f00e f908 	bl	800f5d0 <sqrtf>
 80013c0:	eef0 7a40 	vmov.f32	s15, s0
 80013c4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800160c <algorithm_2_update+0x2dc>
 80013c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd2f      	ble.n	8001432 <algorithm_2_update+0x102>
 80013d2:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <algorithm_2_update+0x2e0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d12b      	bne.n	8001432 <algorithm_2_update+0x102>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013e0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001614 <algorithm_2_update+0x2e4>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d514      	bpl.n	8001418 <algorithm_2_update+0xe8>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013f4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001618 <algorithm_2_update+0x2e8>
 80013f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	dd0a      	ble.n	8001418 <algorithm_2_update+0xe8>
			BME->baseAltitude = BME->altitude + BME->baseAltitude;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		}

		isRising_2 = 1;
 8001418:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <algorithm_2_update+0x2e0>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : rocketStatus;
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <algorithm_2_update+0x2ec>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	bf38      	it	cc
 8001426:	2302      	movcc	r3, #2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <algorithm_2_update+0x2ec>)
 800142c:	701a      	strb	r2, [r3, #0]
		buzz();
 800142e:	f002 fd8d 	bl	8003f4c <buzz>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y > BURNOUT_THRESHOLD && isRising_2 == 1 && rocketStatus < STAT_MOTOR_BURNOUT)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd0c      	ble.n	800145c <algorithm_2_update+0x12c>
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <algorithm_2_update+0x2e0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <algorithm_2_update+0x12c>
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <algorithm_2_update+0x2ec>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d804      	bhi.n	800145c <algorithm_2_update+0x12c>
	{
		burnout_counter++;
 8001452:	4b73      	ldr	r3, [pc, #460]	; (8001620 <algorithm_2_update+0x2f0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a71      	ldr	r2, [pc, #452]	; (8001620 <algorithm_2_update+0x2f0>)
 800145a:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 100)
 800145c:	4b70      	ldr	r3, [pc, #448]	; (8001620 <algorithm_2_update+0x2f0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d10e      	bne.n	8001482 <algorithm_2_update+0x152>
	{
		burnout_counter++;
 8001464:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <algorithm_2_update+0x2f0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <algorithm_2_update+0x2f0>)
 800146c:	6013      	str	r3, [r2, #0]
		rocketStatus = rocketStatus < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : rocketStatus;
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <algorithm_2_update+0x2ec>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	bf38      	it	cc
 8001476:	2303      	movcc	r3, #3
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <algorithm_2_update+0x2ec>)
 800147c:	701a      	strb	r2, [r3, #0]
		buzz();
 800147e:	f002 fd65 	bl	8003f4c <buzz>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE)
 8001482:	edd7 7a01 	vldr	s15, [r7, #4]
 8001486:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001624 <algorithm_2_update+0x2f4>
 800148a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	dd1e      	ble.n	80014d2 <algorithm_2_update+0x1a2>
 8001494:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <algorithm_2_update+0x2e0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d11a      	bne.n	80014d2 <algorithm_2_update+0x1a2>
 800149c:	4b62      	ldr	r3, [pc, #392]	; (8001628 <algorithm_2_update+0x2f8>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d116      	bne.n	80014d2 <algorithm_2_update+0x1a2>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014aa:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	dd0c      	ble.n	80014d2 <algorithm_2_update+0x1a2>
	{
		isFalling_2 = 1;
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <algorithm_2_update+0x2f8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : rocketStatus;
 80014be:	4b57      	ldr	r3, [pc, #348]	; (800161c <algorithm_2_update+0x2ec>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf38      	it	cc
 80014c6:	2304      	movcc	r3, #4
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <algorithm_2_update+0x2ec>)
 80014cc:	701a      	strb	r2, [r3, #0]
		buzz();
 80014ce:	f002 fd3d 	bl	8003f4c <buzz>
	}

	//Second Parachute
	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0 && secondP_counter < 501 && rocketStatus < STAT_P1_OK_P2_OK)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	d516      	bpl.n	8001510 <algorithm_2_update+0x1e0>
 80014e2:	4b51      	ldr	r3, [pc, #324]	; (8001628 <algorithm_2_update+0x2f8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d112      	bne.n	8001510 <algorithm_2_update+0x1e0>
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <algorithm_2_update+0x2fc>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10e      	bne.n	8001510 <algorithm_2_update+0x1e0>
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <algorithm_2_update+0x300>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014fa:	dc09      	bgt.n	8001510 <algorithm_2_update+0x1e0>
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <algorithm_2_update+0x2ec>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d805      	bhi.n	8001510 <algorithm_2_update+0x1e0>
	{
		secondP_counter++;
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <algorithm_2_update+0x300>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a49      	ldr	r2, [pc, #292]	; (8001630 <algorithm_2_update+0x300>)
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e002      	b.n	8001516 <algorithm_2_update+0x1e6>
	}
	else{
		secondP_counter = 0;
 8001510:	4b47      	ldr	r3, [pc, #284]	; (8001630 <algorithm_2_update+0x300>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
	}
	if(secondP_counter == 500)
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <algorithm_2_update+0x300>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800151e:	d10c      	bne.n	800153a <algorithm_2_update+0x20a>
	{
		rocketStatus = rocketStatus < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : rocketStatus;
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <algorithm_2_update+0x2ec>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b05      	cmp	r3, #5
 8001526:	bf38      	it	cc
 8001528:	2305      	movcc	r3, #5
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <algorithm_2_update+0x2ec>)
 800152e:	701a      	strb	r2, [r3, #0]
		is_secondP_OK = 1;
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <algorithm_2_update+0x2fc>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
		buzz();
 8001536:	f002 fd09 	bl	8003f4c <buzz>
	}

	//Touchdown Detection
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && rocketStatus < STAT_TOUCH_DOWN)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8001540:	eeb0 0a47 	vmov.f32	s0, s14
 8001544:	eef0 0a67 	vmov.f32	s1, s15
 8001548:	f7ff fed6 	bl	80012f8 <sqr>
 800154c:	ec55 4b10 	vmov	r4, r5, d0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001556:	eeb0 0a47 	vmov.f32	s0, s14
 800155a:	eef0 0a67 	vmov.f32	s1, s15
 800155e:	f7ff fecb 	bl	80012f8 <sqr>
 8001562:	ec53 2b10 	vmov	r2, r3, d0
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7fe feaf 	bl	80002cc <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800157c:	eeb0 0a47 	vmov.f32	s0, s14
 8001580:	eef0 0a67 	vmov.f32	s1, s15
 8001584:	f7ff feb8 	bl	80012f8 <sqr>
 8001588:	ec53 2b10 	vmov	r2, r3, d0
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe9c 	bl	80002cc <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ec43 2b17 	vmov	d7, r2, r3
 800159c:	eeb0 0a47 	vmov.f32	s0, s14
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	f00d ffe8 	bl	800f578 <sqrt>
 80015a8:	ec51 0b10 	vmov	r0, r1, d0
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <algorithm_2_update+0x304>)
 80015b2:	f7ff fab3 	bl	8000b1c <__aeabi_dcmplt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d011      	beq.n	80015e0 <algorithm_2_update+0x2b0>
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <algorithm_2_update+0x2f8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10d      	bne.n	80015e0 <algorithm_2_update+0x2b0>
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <algorithm_2_update+0x2fc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d109      	bne.n	80015e0 <algorithm_2_update+0x2b0>
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <algorithm_2_update+0x2ec>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d805      	bhi.n	80015e0 <algorithm_2_update+0x2b0>
	{
			TD_counter++;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <algorithm_2_update+0x308>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <algorithm_2_update+0x308>)
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e002      	b.n	80015e6 <algorithm_2_update+0x2b6>
	}
	else{
		TD_counter = 0;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <algorithm_2_update+0x308>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <algorithm_2_update+0x308>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ee:	dd09      	ble.n	8001604 <algorithm_2_update+0x2d4>
	{
		rocketStatus = rocketStatus < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : rocketStatus;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <algorithm_2_update+0x2ec>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	bf38      	it	cc
 80015f8:	2306      	movcc	r3, #6
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <algorithm_2_update+0x2ec>)
 80015fe:	701a      	strb	r2, [r3, #0]
			buzz();
 8001600:	f002 fca4 	bl	8003f4c <buzz>
	}
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bdb0      	pop	{r4, r5, r7, pc}
 800160c:	453b8000 	.word	0x453b8000
 8001610:	2000020d 	.word	0x2000020d
 8001614:	43480000 	.word	0x43480000
 8001618:	c3480000 	.word	0xc3480000
 800161c:	20000004 	.word	0x20000004
 8001620:	20000210 	.word	0x20000210
 8001624:	42a00000 	.word	0x42a00000
 8001628:	2000020c 	.word	0x2000020c
 800162c:	2000020e 	.word	0x2000020e
 8001630:	20000208 	.word	0x20000208
 8001634:	40240000 	.word	0x40240000
 8001638:	20000204 	.word	0x20000204

0800163c <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <bme280_getVals+0xa8>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	22f3      	movs	r2, #243	; 0xf3
 8001656:	21ec      	movs	r1, #236	; 0xec
 8001658:	f005 feee 	bl	8007438 <HAL_I2C_Mem_Read>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <bme280_getVals+0xac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d032      	beq.n	80016da <bme280_getVals+0x9e>
	{
		BME->isUpdated = 1;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <bme280_getVals+0xac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 200);
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <bme280_getVals+0xa8>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	23c8      	movs	r3, #200	; 0xc8
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2308      	movs	r3, #8
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	22f7      	movs	r2, #247	; 0xf7
 8001692:	21ec      	movs	r1, #236	; 0xec
 8001694:	f005 fed0 	bl	8007438 <HAL_I2C_Mem_Read>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
		BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	031a      	lsls	r2, r3, #12
 80016a0:	7a3b      	ldrb	r3, [r7, #8]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7a7a      	ldrb	r2, [r7, #9]
 80016a8:	0912      	lsrs	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <bme280_getVals+0xac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
		BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 80016b4:	793b      	ldrb	r3, [r7, #4]
 80016b6:	031a      	lsls	r2, r3, #12
 80016b8:	797b      	ldrb	r3, [r7, #5]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4313      	orrs	r3, r2
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	0912      	lsrs	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <bme280_getVals+0xac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
		BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	7afa      	ldrb	r2, [r7, #11]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <bme280_getVals+0xac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	UNUSED(retVal);
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000214 	.word	0x20000214
 80016e8:	20000218 	.word	0x20000218
 80016ec:	00000000 	.word	0x00000000

080016f0 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <bme280_get_altitude+0xc0>)
 80016f8:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <bme280_get_altitude+0xc4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001702:	edd7 7a01 	vldr	s15, [r7, #4]
 8001706:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800170a:	ee16 0a90 	vmov	r0, s13
 800170e:	f7fe ff3b 	bl	8000588 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80017a0 <bme280_get_altitude+0xb0>
 800171a:	ec43 2b10 	vmov	d0, r2, r3
 800171e:	f00d febb 	bl	800f498 <pow>
 8001722:	ec53 2b10 	vmov	r2, r3, d0
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	4923      	ldr	r1, [pc, #140]	; (80017b8 <bme280_get_altitude+0xc8>)
 800172c:	f7fe fdcc 	bl	80002c8 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a31b      	add	r3, pc, #108	; (adr r3, 80017a8 <bme280_get_altitude+0xb8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa6d 	bl	8000c28 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - BME->baseAltitude;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <bme280_get_altitude+0xc4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <bme280_get_altitude+0xc4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	ed97 7a00 	vldr	s14, [r7]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	if(BME->altitude > BME->maxAltitude)
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <bme280_get_altitude+0xc4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <bme280_get_altitude+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800177a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dc00      	bgt.n	8001786 <bme280_get_altitude+0x96>
	{
		BME->maxAltitude = BME->altitude;
	}
}
 8001784:	e005      	b.n	8001792 <bme280_get_altitude+0xa2>
		BME->maxAltitude = BME->altitude;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <bme280_get_altitude+0xc4>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <bme280_get_altitude+0xc4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	ccd9456c 	.word	0xccd9456c
 80017a4:	3fc85b95 	.word	0x3fc85b95
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40e5a540 	.word	0x40e5a540
 80017b0:	447d5000 	.word	0x447d5000
 80017b4:	20000218 	.word	0x20000218
 80017b8:	3ff00000 	.word	0x3ff00000

080017bc <bme280_init>:

HAL_StatusTypeDef bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme, uint8_t mode, uint8_t OS, uint8_t filter){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b092      	sub	sp, #72	; 0x48
 80017c0:	af04      	add	r7, sp, #16
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	460b      	mov	r3, r1
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	4613      	mov	r3, r2
 80017d0:	71bb      	strb	r3, [r7, #6]
	BME = BME_sensor;
 80017d2:	4aab      	ldr	r2, [pc, #684]	; (8001a80 <bme280_init+0x2c4>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 80017d8:	4aaa      	ldr	r2, [pc, #680]	; (8001a84 <bme280_init+0x2c8>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6013      	str	r3, [r2, #0]
	BME->baseAltitude = 0.0;
 80017de:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <bme280_init+0x2c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	649a      	str	r2, [r3, #72]	; 0x48

	uint8_t params[25];

	HAL_StatusTypeDef retVal;

	uint8_t resetData = BME280_SOFT_RESET;
 80017e8:	23b6      	movs	r3, #182	; 0xb6
 80017ea:	74fb      	strb	r3, [r7, #19]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
 80017ec:	2332      	movs	r3, #50	; 0x32
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2301      	movs	r3, #1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	f107 0313 	add.w	r3, r7, #19
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	22e0      	movs	r2, #224	; 0xe0
 80017fe:	21ec      	movs	r1, #236	; 0xec
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f005 fd1f 	bl	8007244 <HAL_I2C_Mem_Write>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(50);
 800180c:	2032      	movs	r0, #50	; 0x32
 800180e:	f003 feeb 	bl	80055e8 <HAL_Delay>
	HAL_I2C_DeInit(I2C_bme);
 8001812:	68b8      	ldr	r0, [r7, #8]
 8001814:	f005 fce6 	bl	80071e4 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001818:	2005      	movs	r0, #5
 800181a:	f003 fee5 	bl	80055e8 <HAL_Delay>
	HAL_I2C_Init(I2C_bme);
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f005 fb9c 	bl	8006f5c <HAL_I2C_Init>
	HAL_Delay(5);
 8001824:	2005      	movs	r0, #5
 8001826:	f003 fedf 	bl	80055e8 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800182a:	23c8      	movs	r3, #200	; 0xc8
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2319      	movs	r3, #25
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	2288      	movs	r2, #136	; 0x88
 800183c:	21ec      	movs	r1, #236	; 0xec
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f005 fdfa 	bl	8007438 <HAL_I2C_Mem_Read>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	b299      	uxth	r1, r3
 800184e:	7d7b      	ldrb	r3, [r7, #21]
 8001850:	b29b      	uxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b8a      	ldr	r3, [pc, #552]	; (8001a80 <bme280_init+0x2c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	b292      	uxth	r2, r2
 800185e:	801a      	strh	r2, [r3, #0]
	BME->parameters.dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	b219      	sxth	r1, r3
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <bme280_init+0x2c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	b212      	sxth	r2, r2
 8001872:	805a      	strh	r2, [r3, #2]
	BME->parameters.dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001874:	7e3b      	ldrb	r3, [r7, #24]
 8001876:	b219      	sxth	r1, r3
 8001878:	7e7b      	ldrb	r3, [r7, #25]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <bme280_init+0x2c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	b212      	sxth	r2, r2
 8001886:	809a      	strh	r2, [r3, #4]
	BME->parameters.dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001888:	7ebb      	ldrb	r3, [r7, #26]
 800188a:	b21a      	sxth	r2, r3
 800188c:	7efb      	ldrb	r3, [r7, #27]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21a      	sxth	r2, r3
 8001896:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <bme280_init+0x2c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b292      	uxth	r2, r2
 800189c:	80da      	strh	r2, [r3, #6]
	BME->parameters.dig_P2 = params[8] | ((int16_t)params[9] << 8);
 800189e:	7f3b      	ldrb	r3, [r7, #28]
 80018a0:	b219      	sxth	r1, r3
 80018a2:	7f7b      	ldrb	r3, [r7, #29]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <bme280_init+0x2c4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	b212      	sxth	r2, r2
 80018b0:	811a      	strh	r2, [r3, #8]
	BME->parameters.dig_P3 = params[10] | ((int16_t)params[11] << 8);
 80018b2:	7fbb      	ldrb	r3, [r7, #30]
 80018b4:	b219      	sxth	r1, r3
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <bme280_init+0x2c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	b212      	sxth	r2, r2
 80018c4:	815a      	strh	r2, [r3, #10]
	BME->parameters.dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	b219      	sxth	r1, r3
 80018cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <bme280_init+0x2c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	b212      	sxth	r2, r2
 80018dc:	819a      	strh	r2, [r3, #12]
	BME->parameters.dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80018de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018e2:	b219      	sxth	r1, r3
 80018e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <bme280_init+0x2c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	b212      	sxth	r2, r2
 80018f4:	81da      	strh	r2, [r3, #14]
	BME->parameters.dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80018f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018fa:	b219      	sxth	r1, r3
 80018fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <bme280_init+0x2c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	b212      	sxth	r2, r2
 800190c:	821a      	strh	r2, [r3, #16]
	BME->parameters.dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800190e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001912:	b219      	sxth	r1, r3
 8001914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <bme280_init+0x2c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	b212      	sxth	r2, r2
 8001924:	825a      	strh	r2, [r3, #18]
	BME->parameters.dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800192a:	b219      	sxth	r1, r3
 800192c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <bme280_init+0x2c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	b212      	sxth	r2, r2
 800193c:	829a      	strh	r2, [r3, #20]
	BME->parameters.dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800193e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001942:	b219      	sxth	r1, r3
 8001944:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <bme280_init+0x2c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	b212      	sxth	r2, r2
 8001954:	82da      	strh	r2, [r3, #22]
	BME->parameters.dig_H1 = params[24];
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <bme280_init+0x2c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800195e:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001960:	2332      	movs	r3, #50	; 0x32
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2307      	movs	r3, #7
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	22e1      	movs	r2, #225	; 0xe1
 8001972:	21ec      	movs	r1, #236	; 0xec
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f005 fd5f 	bl	8007438 <HAL_I2C_Mem_Read>
 800197a:	4603      	mov	r3, r0
 800197c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001980:	7d3b      	ldrb	r3, [r7, #20]
 8001982:	b219      	sxth	r1, r3
 8001984:	7d7b      	ldrb	r3, [r7, #21]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <bme280_init+0x2c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	b212      	sxth	r2, r2
 8001992:	835a      	strh	r2, [r3, #26]
	BME->parameters.dig_H3	= params[2];
 8001994:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <bme280_init+0x2c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	7dba      	ldrb	r2, [r7, #22]
 800199a:	771a      	strb	r2, [r3, #28]
	BME->parameters.dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800199c:	7e3b      	ldrb	r3, [r7, #24]
 800199e:	b21b      	sxth	r3, r3
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	b219      	sxth	r1, r3
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <bme280_init+0x2c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	b212      	sxth	r2, r2
 80019b4:	83da      	strh	r2, [r3, #30]
	BME->parameters.dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 80019b6:	7e3b      	ldrb	r3, [r7, #24]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	b219      	sxth	r1, r3
 80019be:	7e7b      	ldrb	r3, [r7, #25]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <bme280_init+0x2c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	b212      	sxth	r2, r2
 80019cc:	841a      	strh	r2, [r3, #32]
	BME->parameters.dig_H6 = params[6];
 80019ce:	7eba      	ldrb	r2, [r7, #26]
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <bme280_init+0x2c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b252      	sxtb	r2, r2
 80019d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	74bb      	strb	r3, [r7, #18]
	data_ctrl = OS;
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 80019e2:	2332      	movs	r3, #50	; 0x32
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	f107 0312 	add.w	r3, r7, #18
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	22f2      	movs	r2, #242	; 0xf2
 80019f4:	21ec      	movs	r1, #236	; 0xec
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f005 fc24 	bl	8007244 <HAL_I2C_Mem_Write>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	74bb      	strb	r3, [r7, #18]
	data_ctrl = mode | (OS << 2) | (OS << 5);																		//Mode has been chosed.
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001a22:	2332      	movs	r3, #50	; 0x32
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2301      	movs	r3, #1
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f107 0312 	add.w	r3, r7, #18
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	22f4      	movs	r2, #244	; 0xf4
 8001a34:	21ec      	movs	r1, #236	; 0xec
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f005 fc04 	bl	8007244 <HAL_I2C_Mem_Write>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	74bb      	strb	r3, [r7, #18]
	data_ctrl = (filter << 2);
 8001a46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001a50:	2332      	movs	r3, #50	; 0x32
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	f107 0312 	add.w	r3, r7, #18
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	22f5      	movs	r2, #245	; 0xf5
 8001a62:	21ec      	movs	r1, #236	; 0xec
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f005 fbed 	bl	8007244 <HAL_I2C_Mem_Write>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//uint8_t buf[50];

	float base = 0.0;
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_Delay(200);
 8001a76:	20c8      	movs	r0, #200	; 0xc8
 8001a78:	f003 fdb6 	bl	80055e8 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e003      	b.n	8001a88 <bme280_init+0x2cc>
 8001a80:	20000218 	.word	0x20000218
 8001a84:	20000214 	.word	0x20000214
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8a:	e011      	b.n	8001ab0 <bme280_init+0x2f4>
	{
	  bme280_update();
 8001a8c:	f000 f828 	bl	8001ae0 <bme280_update>
	  base +=  BME->altitude;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <bme280_init+0x31c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a98:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  HAL_Delay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f003 fd9f 	bl	80055e8 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	3301      	adds	r3, #1
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	2b31      	cmp	r3, #49	; 0x31
 8001ab4:	ddea      	ble.n	8001a8c <bme280_init+0x2d0>
	}
	BME->baseAltitude = (base / 50.0);
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <bme280_init+0x31c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001abe:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001adc <bme280_init+0x320>
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	return retVal;
 8001aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	; 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000218 	.word	0x20000218
 8001adc:	42480000 	.word	0x42480000

08001ae0 <bme280_update>:


void bme280_update(){
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b0d2      	sub	sp, #328	; 0x148
 8001ae6:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001ae8:	f7ff fda8 	bl	800163c <bme280_getVals>

	if(BME->isUpdated == 1)
 8001aec:	4bd9      	ldr	r3, [pc, #868]	; (8001e54 <bme280_update+0x374>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f040 83a7 	bne.w	8002248 <bme280_update+0x768>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001afa:	4bd6      	ldr	r3, [pc, #856]	; (8001e54 <bme280_update+0x374>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters.dig_T1 << 1))) * ((int32_t)BME->parameters.dig_T2)) >> 11;
 8001b04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b08:	10da      	asrs	r2, r3, #3
 8001b0a:	4bd2      	ldr	r3, [pc, #840]	; (8001e54 <bme280_update+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	4bcf      	ldr	r3, [pc, #828]	; (8001e54 <bme280_update+0x374>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	12db      	asrs	r3, r3, #11
 8001b24:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1))) >> 12) * ((int32_t)BME->parameters.dig_T3)) >> 14;
 8001b28:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b2c:	111a      	asrs	r2, r3, #4
 8001b2e:	4bc9      	ldr	r3, [pc, #804]	; (8001e54 <bme280_update+0x374>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad1      	subs	r1, r2, r3
 8001b38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b3c:	111a      	asrs	r2, r3, #4
 8001b3e:	4bc5      	ldr	r3, [pc, #788]	; (8001e54 <bme280_update+0x374>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	131a      	asrs	r2, r3, #12
 8001b4e:	4bc1      	ldr	r3, [pc, #772]	; (8001e54 <bme280_update+0x374>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	139b      	asrs	r3, r3, #14
 8001b5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001b60:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001b64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b68:	4413      	add	r3, r2
 8001b6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001b6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3380      	adds	r3, #128	; 0x80
 8001b7a:	121b      	asrs	r3, r3, #8
 8001b7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	4bb1      	ldr	r3, [pc, #708]	; (8001e54 <bme280_update+0x374>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001e58 <bme280_update+0x378>
 8001b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b98:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001b9c:	4bad      	ldr	r3, [pc, #692]	; (8001e54 <bme280_update+0x374>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ba6:	657a      	str	r2, [r7, #84]	; 0x54
 8001ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bac:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bb4:	17da      	asrs	r2, r3, #31
 8001bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bca:	4613      	mov	r3, r2
 8001bcc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bd6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters.dig_P6;
 8001bda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001be2:	fb03 f102 	mul.w	r1, r3, r2
 8001be6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	18ca      	adds	r2, r1, r3
 8001bf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bf8:	fba3 4503 	umull	r4, r5, r3, r3
 8001bfc:	1953      	adds	r3, r2, r5
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4b94      	ldr	r3, [pc, #592]	; (8001e54 <bme280_update+0x374>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	8a1b      	ldrh	r3, [r3, #16]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	17da      	asrs	r2, r3, #31
 8001c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c14:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	fb03 f205 	mul.w	r2, r3, r5
 8001c1e:	460b      	mov	r3, r1
 8001c20:	fb04 f303 	mul.w	r3, r4, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	4602      	mov	r2, r0
 8001c28:	fba4 ab02 	umull	sl, fp, r4, r2
 8001c2c:	445b      	add	r3, fp
 8001c2e:	469b      	mov	fp, r3
 8001c30:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001c34:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters.dig_P5) <<17);
 8001c38:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <bme280_update+0x374>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	89db      	ldrh	r3, [r3, #14]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	17da      	asrs	r2, r3, #31
 8001c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c50:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c54:	462a      	mov	r2, r5
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c5e:	4621      	mov	r1, r4
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	441a      	add	r2, r3
 8001c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	fba3 8901 	umull	r8, r9, r3, r1
 8001c70:	eb02 0309 	add.w	r3, r2, r9
 8001c74:	4699      	mov	r9, r3
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001c82:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001c86:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001c8a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001c8e:	1814      	adds	r4, r2, r0
 8001c90:	643c      	str	r4, [r7, #64]	; 0x40
 8001c92:	414b      	adcs	r3, r1
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
 8001c96:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001c9a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters.dig_P4) << 35);
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <bme280_update+0x374>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	899b      	ldrh	r3, [r3, #12]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	17da      	asrs	r2, r3, #31
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cae:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cbe:	00d9      	lsls	r1, r3, #3
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001cc6:	1814      	adds	r4, r2, r0
 8001cc8:	63bc      	str	r4, [r7, #56]	; 0x38
 8001cca:	414b      	adcs	r3, r1
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cd2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters.dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters.dig_P2) << 12);
 8001cd6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cde:	fb03 f102 	mul.w	r1, r3, r2
 8001ce2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ce6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	18ca      	adds	r2, r1, r3
 8001cf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cf4:	fba3 1303 	umull	r1, r3, r3, r3
 8001cf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d06:	18d3      	adds	r3, r2, r3
 8001d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d0c:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <bme280_update+0x374>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	895b      	ldrh	r3, [r3, #10]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d20:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001d24:	462b      	mov	r3, r5
 8001d26:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001d2a:	4642      	mov	r2, r8
 8001d2c:	fb02 f203 	mul.w	r2, r2, r3
 8001d30:	464b      	mov	r3, r9
 8001d32:	4621      	mov	r1, r4
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d42:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001d46:	460a      	mov	r2, r1
 8001d48:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001d4c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001d50:	4413      	add	r3, r2
 8001d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001d62:	4623      	mov	r3, r4
 8001d64:	0a18      	lsrs	r0, r3, #8
 8001d66:	462b      	mov	r3, r5
 8001d68:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d6c:	462b      	mov	r3, r5
 8001d6e:	1219      	asrs	r1, r3, #8
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <bme280_update+0x374>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	891b      	ldrh	r3, [r3, #8]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	17da      	asrs	r2, r3, #31
 8001d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d88:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	fb02 f203 	mul.w	r2, r2, r3
 8001d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d96:	4644      	mov	r4, r8
 8001d98:	fb04 f303 	mul.w	r3, r4, r3
 8001d9c:	441a      	add	r2, r3
 8001d9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001da2:	4644      	mov	r4, r8
 8001da4:	fba3 4304 	umull	r4, r3, r3, r4
 8001da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dac:	4623      	mov	r3, r4
 8001dae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001dc8:	464c      	mov	r4, r9
 8001dca:	0323      	lsls	r3, r4, #12
 8001dcc:	4644      	mov	r4, r8
 8001dce:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001dd2:	4644      	mov	r4, r8
 8001dd4:	0322      	lsls	r2, r4, #12
 8001dd6:	1884      	adds	r4, r0, r2
 8001dd8:	633c      	str	r4, [r7, #48]	; 0x30
 8001dda:	eb41 0303 	adc.w	r3, r1, r3
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
 8001de0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001de4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters.dig_P1) >> 33;
 8001de8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001dec:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001df0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001df4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <bme280_update+0x374>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2200      	movs	r2, #0
 8001e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e08:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e0c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001e10:	462b      	mov	r3, r5
 8001e12:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001e16:	4642      	mov	r2, r8
 8001e18:	fb02 f203 	mul.w	r2, r2, r3
 8001e1c:	464b      	mov	r3, r9
 8001e1e:	4621      	mov	r1, r4
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	4622      	mov	r2, r4
 8001e28:	4641      	mov	r1, r8
 8001e2a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e32:	460a      	mov	r2, r1
 8001e34:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001e38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e4e:	4629      	mov	r1, r5
 8001e50:	104a      	asrs	r2, r1, #1
 8001e52:	e003      	b.n	8001e5c <bme280_update+0x37c>
 8001e54:	20000218 	.word	0x20000218
 8001e58:	42c80000 	.word	0x42c80000
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	17cb      	asrs	r3, r1, #31
 8001e60:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8001e64:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	d106      	bne.n	8001e7a <bme280_update+0x39a>
		{
			P = 0;
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8001e78:	e148      	b.n	800210c <bme280_update+0x62c>
		}else
		{
		P = 1048576 - adc_P;
 8001e7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 8001e84:	62b8      	str	r0, [r7, #40]	; 0x28
 8001e86:	eb61 0303 	sbc.w	r3, r1, r3
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e90:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001e94:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	07d9      	lsls	r1, r3, #31
 8001ea2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001ea6:	07d0      	lsls	r0, r2, #31
 8001ea8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001eac:	1a84      	subs	r4, r0, r2
 8001eae:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001eb2:	eb61 0303 	sbc.w	r3, r1, r3
 8001eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eba:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	1891      	adds	r1, r2, r2
 8001ec4:	6239      	str	r1, [r7, #32]
 8001ec6:	415b      	adcs	r3, r3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ece:	4621      	mov	r1, r4
 8001ed0:	1851      	adds	r1, r2, r1
 8001ed2:	61b9      	str	r1, [r7, #24]
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	414b      	adcs	r3, r1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	018b      	lsls	r3, r1, #6
 8001eea:	4641      	mov	r1, r8
 8001eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	018a      	lsls	r2, r1, #6
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	1889      	adds	r1, r1, r2
 8001ef8:	6139      	str	r1, [r7, #16]
 8001efa:	4649      	mov	r1, r9
 8001efc:	eb43 0101 	adc.w	r1, r3, r1
 8001f00:	6179      	str	r1, [r7, #20]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f0e:	4649      	mov	r1, r9
 8001f10:	008b      	lsls	r3, r1, #2
 8001f12:	4641      	mov	r1, r8
 8001f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f18:	4641      	mov	r1, r8
 8001f1a:	008a      	lsls	r2, r1, #2
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4603      	mov	r3, r0
 8001f22:	4622      	mov	r2, r4
 8001f24:	189b      	adds	r3, r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	eb42 0303 	adc.w	r3, r2, r3
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f3e:	4649      	mov	r1, r9
 8001f40:	008b      	lsls	r3, r1, #2
 8001f42:	4641      	mov	r1, r8
 8001f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f48:	4641      	mov	r1, r8
 8001f4a:	008a      	lsls	r2, r1, #2
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	4622      	mov	r2, r4
 8001f54:	189b      	adds	r3, r3, r2
 8001f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	eb42 0303 	adc.w	r3, r2, r3
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f66:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f6e:	f7fe ffb9 	bl	8000ee4 <__aeabi_ldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters.dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001f7a:	4bb6      	ldr	r3, [pc, #728]	; (8002254 <bme280_update+0x774>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	8adb      	ldrh	r3, [r3, #22]
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	17da      	asrs	r2, r3, #31
 8001f86:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f88:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f8a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001f8e:	f04f 0000 	mov.w	r0, #0
 8001f92:	f04f 0100 	mov.w	r1, #0
 8001f96:	0b50      	lsrs	r0, r2, #13
 8001f98:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f9c:	1359      	asrs	r1, r3, #13
 8001f9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	fb00 f203 	mul.w	r2, r0, r3
 8001fa8:	4623      	mov	r3, r4
 8001faa:	fb03 f301 	mul.w	r3, r3, r1
 8001fae:	4413      	add	r3, r2
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	fba2 1200 	umull	r1, r2, r2, r0
 8001fb6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001fba:	460a      	mov	r2, r1
 8001fbc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001fc0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fca:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0b50      	lsrs	r0, r2, #13
 8001fd8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fdc:	1359      	asrs	r1, r3, #13
 8001fde:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	fb00 f203 	mul.w	r2, r0, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	fb03 f301 	mul.w	r3, r3, r1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002004:	4413      	add	r3, r2
 8002006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002016:	4621      	mov	r1, r4
 8002018:	0e4a      	lsrs	r2, r1, #25
 800201a:	4629      	mov	r1, r5
 800201c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002020:	4629      	mov	r1, r5
 8002022:	164b      	asrs	r3, r1, #25
 8002024:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters.dig_P8) * P) >> 19;
 8002028:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <bme280_update+0x774>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8a9b      	ldrh	r3, [r3, #20]
 800202e:	b21b      	sxth	r3, r3
 8002030:	b21b      	sxth	r3, r3
 8002032:	17da      	asrs	r2, r3, #31
 8002034:	673b      	str	r3, [r7, #112]	; 0x70
 8002036:	677a      	str	r2, [r7, #116]	; 0x74
 8002038:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800203c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002040:	462a      	mov	r2, r5
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800204a:	4621      	mov	r1, r4
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002056:	4621      	mov	r1, r4
 8002058:	fba2 1201 	umull	r1, r2, r2, r1
 800205c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002060:	460a      	mov	r2, r1
 8002062:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002066:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800206a:	4413      	add	r3, r2
 800206c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800207c:	4621      	mov	r1, r4
 800207e:	0cca      	lsrs	r2, r1, #19
 8002080:	4629      	mov	r1, r5
 8002082:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002086:	4629      	mov	r1, r5
 8002088:	14cb      	asrs	r3, r1, #19
 800208a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters.dig_P7) << 4);
 800208e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002092:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002096:	1884      	adds	r4, r0, r2
 8002098:	66bc      	str	r4, [r7, #104]	; 0x68
 800209a:	eb41 0303 	adc.w	r3, r1, r3
 800209e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020a0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020a4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80020a8:	4621      	mov	r1, r4
 80020aa:	1889      	adds	r1, r1, r2
 80020ac:	6639      	str	r1, [r7, #96]	; 0x60
 80020ae:	4629      	mov	r1, r5
 80020b0:	eb43 0101 	adc.w	r1, r3, r1
 80020b4:	6679      	str	r1, [r7, #100]	; 0x64
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020c2:	4623      	mov	r3, r4
 80020c4:	0a18      	lsrs	r0, r3, #8
 80020c6:	462b      	mov	r3, r5
 80020c8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020cc:	462b      	mov	r3, r5
 80020ce:	1219      	asrs	r1, r3, #8
 80020d0:	4b60      	ldr	r3, [pc, #384]	; (8002254 <bme280_update+0x774>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	8a5b      	ldrh	r3, [r3, #18]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b21b      	sxth	r3, r3
 80020da:	17da      	asrs	r2, r3, #31
 80020dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80020de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80020ec:	464c      	mov	r4, r9
 80020ee:	0123      	lsls	r3, r4, #4
 80020f0:	4644      	mov	r4, r8
 80020f2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020f6:	4644      	mov	r4, r8
 80020f8:	0122      	lsls	r2, r4, #4
 80020fa:	1884      	adds	r4, r0, r2
 80020fc:	603c      	str	r4, [r7, #0]
 80020fe:	eb41 0303 	adc.w	r3, r1, r3
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002108:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 800210c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002110:	f7fe feaa 	bl	8000e68 <__aeabi_l2f>
 8002114:	4603      	mov	r3, r0
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa36 	bl	8000588 <__aeabi_f2d>
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <bme280_update+0x778>)
 8002122:	f7fe fbb3 	bl	800088c <__aeabi_ddiv>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <bme280_update+0x77c>)
 8002134:	f7fe fbaa 	bl	800088c <__aeabi_ddiv>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4945      	ldr	r1, [pc, #276]	; (8002254 <bme280_update+0x774>)
 800213e:	680c      	ldr	r4, [r1, #0]
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe fd70 	bl	8000c28 <__aeabi_d2f>
 8002148:	4603      	mov	r3, r0
 800214a:	6363      	str	r3, [r4, #52]	; 0x34

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <bme280_update+0x774>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 8002156:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800215a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800215e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters.dig_H4) << 20) - (((int32_t)BME->parameters.dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters.dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters.dig_H2) + 8192) >> 14));
 8002162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002166:	039b      	lsls	r3, r3, #14
 8002168:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <bme280_update+0x774>)
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	8bd2      	ldrh	r2, [r2, #30]
 800216e:	b212      	sxth	r2, r2
 8002170:	0512      	lsls	r2, r2, #20
 8002172:	1a9a      	subs	r2, r3, r2
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <bme280_update+0x774>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	8c1b      	ldrh	r3, [r3, #32]
 800217a:	b21b      	sxth	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800218c:	0bdb      	lsrs	r3, r3, #15
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <bme280_update+0x774>)
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8002196:	b252      	sxtb	r2, r2
 8002198:	4611      	mov	r1, r2
 800219a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800219e:	fb01 f202 	mul.w	r2, r1, r2
 80021a2:	0a92      	lsrs	r2, r2, #10
 80021a4:	492b      	ldr	r1, [pc, #172]	; (8002254 <bme280_update+0x774>)
 80021a6:	6809      	ldr	r1, [r1, #0]
 80021a8:	7f09      	ldrb	r1, [r1, #28]
 80021aa:	b2c9      	uxtb	r1, r1
 80021ac:	4608      	mov	r0, r1
 80021ae:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80021b2:	fb00 f101 	mul.w	r1, r0, r1
 80021b6:	0ac9      	lsrs	r1, r1, #11
 80021b8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80021bc:	fb01 f202 	mul.w	r2, r1, r2
 80021c0:	0a92      	lsrs	r2, r2, #10
 80021c2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80021c6:	4923      	ldr	r1, [pc, #140]	; (8002254 <bme280_update+0x774>)
 80021c8:	6809      	ldr	r1, [r1, #0]
 80021ca:	8b49      	ldrh	r1, [r1, #26]
 80021cc:	b209      	sxth	r1, r1
 80021ce:	fb01 f202 	mul.w	r2, r1, r2
 80021d2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80021d6:	0b92      	lsrs	r2, r2, #14
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters.dig_H1)) >> 4));
 80021e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021e4:	0bdb      	lsrs	r3, r3, #15
 80021e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80021ea:	0bd2      	lsrs	r2, r2, #15
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	09db      	lsrs	r3, r3, #7
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <bme280_update+0x774>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	7e12      	ldrb	r2, [r2, #24]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800220a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800220e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002212:	bf28      	it	cs
 8002214:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 8002218:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800221c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002220:	0b1b      	lsrs	r3, r3, #12
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <bme280_update+0x774>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002260 <bme280_update+0x780>
 8002232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002236:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		//get altitude
		bme280_get_altitude();
 800223a:	f7ff fa59 	bl	80016f0 <bme280_get_altitude>
		BME->isUpdated = 0;
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <bme280_update+0x774>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

}
 8002248:	bf00      	nop
 800224a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800224e:	46bd      	mov	sp, r7
 8002250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002254:	20000218 	.word	0x20000218
 8002258:	40700000 	.word	0x40700000
 800225c:	40590000 	.word	0x40590000
 8002260:	44800000 	.word	0x44800000

08002264 <bmi088_init>:
	if(retVal != HAL_OK)
		Error_Handler();
}

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af04      	add	r7, sp, #16
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	HAL_StatusTypeDef retVal = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
	bmi_I2C = I2C_;
 8002272:	4aba      	ldr	r2, [pc, #744]	; (800255c <bmi088_init+0x2f8>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002278:	4ab9      	ldr	r2, [pc, #740]	; (8002560 <bmi088_init+0x2fc>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800227e:	4bb8      	ldr	r3, [pc, #736]	; (8002560 <bmi088_init+0x2fc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 8002286:	4bb6      	ldr	r3, [pc, #728]	; (8002560 <bmi088_init+0x2fc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	749a      	strb	r2, [r3, #18]
	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 50);
	while(1);
#endif
	uint8_t buf[1];

	HAL_Delay(10);
 800228e:	200a      	movs	r0, #10
 8002290:	f003 f9aa 	bl	80055e8 <HAL_Delay>

	buf[0] = 0x01;
 8002294:	2301      	movs	r3, #1
 8002296:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002298:	4bb0      	ldr	r3, [pc, #704]	; (800255c <bmi088_init+0x2f8>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	227c      	movs	r2, #124	; 0x7c
 80022ae:	2130      	movs	r1, #48	; 0x30
 80022b0:	f004 ffc8 	bl	8007244 <HAL_I2C_Mem_Write>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80022c2:	4ba6      	ldr	r3, [pc, #664]	; (800255c <bmi088_init+0x2f8>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	2364      	movs	r3, #100	; 0x64
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2301      	movs	r3, #1
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	227d      	movs	r2, #125	; 0x7d
 80022d8:	2130      	movs	r1, #48	; 0x30
 80022da:	f004 ffb3 	bl	8007244 <HAL_I2C_Mem_Write>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80022e8:	2014      	movs	r0, #20
 80022ea:	f003 f97d 	bl	80055e8 <HAL_Delay>

	buf[0] = ACC_RESET;
 80022ee:	23b6      	movs	r3, #182	; 0xb6
 80022f0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80022f2:	4b9a      	ldr	r3, [pc, #616]	; (800255c <bmi088_init+0x2f8>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	2364      	movs	r3, #100	; 0x64
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	227e      	movs	r2, #126	; 0x7e
 8002308:	2130      	movs	r1, #48	; 0x30
 800230a:	f004 ff9b 	bl	8007244 <HAL_I2C_Mem_Write>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4313      	orrs	r3, r2
 8002316:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <bmi088_init+0xc0>
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <bmi088_init+0x300>)
 8002320:	2277      	movs	r2, #119	; 0x77
 8002322:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002324:	2028      	movs	r0, #40	; 0x28
 8002326:	f003 f95f 	bl	80055e8 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800232a:	23b0      	movs	r3, #176	; 0xb0
 800232c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800232e:	4b8b      	ldr	r3, [pc, #556]	; (800255c <bmi088_init+0x2f8>)
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2301      	movs	r3, #1
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	227e      	movs	r2, #126	; 0x7e
 8002344:	2130      	movs	r1, #48	; 0x30
 8002346:	f004 ff7d 	bl	8007244 <HAL_I2C_Mem_Write>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	4313      	orrs	r3, r2
 8002352:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <bmi088_init+0xfc>
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <bmi088_init+0x300>)
 800235c:	227c      	movs	r2, #124	; 0x7c
 800235e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002360:	2028      	movs	r0, #40	; 0x28
 8002362:	f003 f941 	bl	80055e8 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002366:	23b6      	movs	r3, #182	; 0xb6
 8002368:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800236a:	4b7c      	ldr	r3, [pc, #496]	; (800255c <bmi088_init+0x2f8>)
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	2364      	movs	r3, #100	; 0x64
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2301      	movs	r3, #1
 800237e:	2214      	movs	r2, #20
 8002380:	21d0      	movs	r1, #208	; 0xd0
 8002382:	f004 ff5f 	bl	8007244 <HAL_I2C_Mem_Write>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	4313      	orrs	r3, r2
 800238e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <bmi088_init+0x138>
 8002396:	4b73      	ldr	r3, [pc, #460]	; (8002564 <bmi088_init+0x300>)
 8002398:	2281      	movs	r2, #129	; 0x81
 800239a:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 800239c:	2028      	movs	r0, #40	; 0x28
 800239e:	f003 f923 	bl	80055e8 <HAL_Delay>

	HAL_I2C_DeInit(bmi_I2C);  // I2C arayüzünü de-initialize edin
 80023a2:	4b6e      	ldr	r3, [pc, #440]	; (800255c <bmi088_init+0x2f8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 ff1c 	bl	80071e4 <HAL_I2C_DeInit>
	HAL_Delay(5);
 80023ac:	2005      	movs	r0, #5
 80023ae:	f003 f91b 	bl	80055e8 <HAL_Delay>
	HAL_I2C_Init(bmi_I2C);    // I2C arayüzünü yeniden initialize edin
 80023b2:	4b6a      	ldr	r3, [pc, #424]	; (800255c <bmi088_init+0x2f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 fdd0 	bl	8006f5c <HAL_I2C_Init>
	HAL_Delay(5);
 80023bc:	2005      	movs	r0, #5
 80023be:	f003 f913 	bl	80055e8 <HAL_Delay>
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
	HAL_Delay(40);
*/

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <bmi088_init+0x2fc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	7e5b      	ldrb	r3, [r3, #25]
 80023c8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80023ca:	4b64      	ldr	r3, [pc, #400]	; (800255c <bmi088_init+0x2f8>)
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	220f      	movs	r2, #15
 80023e0:	21d0      	movs	r1, #208	; 0xd0
 80023e2:	f004 ff2f 	bl	8007244 <HAL_I2C_Mem_Write>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <bmi088_init+0x198>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <bmi088_init+0x300>)
 80023f8:	2297      	movs	r2, #151	; 0x97
 80023fa:	601a      	str	r2, [r3, #0]


	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <bmi088_init+0x2fc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	7e1b      	ldrb	r3, [r3, #24]
 8002402:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002404:	4b55      	ldr	r3, [pc, #340]	; (800255c <bmi088_init+0x2f8>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	2314      	movs	r3, #20
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	2301      	movs	r3, #1
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2210      	movs	r2, #16
 800241a:	21d0      	movs	r1, #208	; 0xd0
 800241c:	f004 ff12 	bl	8007244 <HAL_I2C_Mem_Write>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	4313      	orrs	r3, r2
 8002428:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <bmi088_init+0x1d2>
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <bmi088_init+0x300>)
 8002432:	229c      	movs	r2, #156	; 0x9c
 8002434:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002436:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <bmi088_init+0x2fc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	7ddb      	ldrb	r3, [r3, #23]
 800243c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <bmi088_init+0x2f8>)
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	2314      	movs	r3, #20
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	2301      	movs	r3, #1
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	2211      	movs	r2, #17
 8002454:	21d0      	movs	r1, #208	; 0xd0
 8002456:	f004 fef5 	bl	8007244 <HAL_I2C_Mem_Write>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	4313      	orrs	r3, r2
 8002462:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <bmi088_init+0x20c>
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <bmi088_init+0x300>)
 800246c:	22a0      	movs	r2, #160	; 0xa0
 800246e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002470:	2028      	movs	r0, #40	; 0x28
 8002472:	f003 f8b9 	bl	80055e8 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <bmi088_init+0x2f8>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	2314      	movs	r3, #20
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	2301      	movs	r3, #1
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2301      	movs	r3, #1
 800248e:	2215      	movs	r2, #21
 8002490:	21d0      	movs	r1, #208	; 0xd0
 8002492:	f004 fed7 	bl	8007244 <HAL_I2C_Mem_Write>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4313      	orrs	r3, r2
 800249e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <bmi088_init+0x248>
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <bmi088_init+0x300>)
 80024a8:	22a6      	movs	r2, #166	; 0xa6
 80024aa:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80024ac:	2301      	movs	r3, #1
 80024ae:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <bmi088_init+0x2f8>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	2314      	movs	r3, #20
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2301      	movs	r3, #1
 80024c4:	2216      	movs	r2, #22
 80024c6:	21d0      	movs	r1, #208	; 0xd0
 80024c8:	f004 febc 	bl	8007244 <HAL_I2C_Mem_Write>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <bmi088_init+0x27e>
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <bmi088_init+0x300>)
 80024de:	22aa      	movs	r2, #170	; 0xaa
 80024e0:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80024e2:	2301      	movs	r3, #1
 80024e4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <bmi088_init+0x2f8>)
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	2314      	movs	r3, #20
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2301      	movs	r3, #1
 80024fa:	2218      	movs	r2, #24
 80024fc:	21d0      	movs	r1, #208	; 0xd0
 80024fe:	f004 fea1 	bl	8007244 <HAL_I2C_Mem_Write>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	4313      	orrs	r3, r2
 800250a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <bmi088_init+0x2b4>
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <bmi088_init+0x300>)
 8002514:	22ae      	movs	r2, #174	; 0xae
 8002516:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002518:	2304      	movs	r3, #4
 800251a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <bmi088_init+0x2f8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	2314      	movs	r3, #20
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	2301      	movs	r3, #1
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	227d      	movs	r2, #125	; 0x7d
 8002532:	2130      	movs	r1, #48	; 0x30
 8002534:	f004 fe86 	bl	8007244 <HAL_I2C_Mem_Write>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	4313      	orrs	r3, r2
 8002540:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <bmi088_init+0x2ea>
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <bmi088_init+0x300>)
 800254a:	22b3      	movs	r2, #179	; 0xb3
 800254c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800254e:	2008      	movs	r0, #8
 8002550:	f003 f84a 	bl	80055e8 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <bmi088_init+0x2fc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	7cdb      	ldrb	r3, [r3, #19]
 800255a:	e005      	b.n	8002568 <bmi088_init+0x304>
 800255c:	2000021c 	.word	0x2000021c
 8002560:	20000220 	.word	0x20000220
 8002564:	20000228 	.word	0x20000228
 8002568:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <bmi088_init+0x42c>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	2314      	movs	r3, #20
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	2301      	movs	r3, #1
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	227c      	movs	r2, #124	; 0x7c
 8002580:	2130      	movs	r1, #48	; 0x30
 8002582:	f004 fe5f 	bl	8007244 <HAL_I2C_Mem_Write>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4313      	orrs	r3, r2
 800258e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <bmi088_init+0x338>
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <bmi088_init+0x430>)
 8002598:	22b8      	movs	r2, #184	; 0xb8
 800259a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800259c:	2008      	movs	r0, #8
 800259e:	f003 f823 	bl	80055e8 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <bmi088_init+0x434>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	7d5b      	ldrb	r3, [r3, #21]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	b25a      	sxtb	r2, r3
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <bmi088_init+0x434>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	7d9b      	ldrb	r3, [r3, #22]
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <bmi088_init+0x42c>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	2314      	movs	r3, #20
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	2301      	movs	r3, #1
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2301      	movs	r3, #1
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	2130      	movs	r1, #48	; 0x30
 80025d4:	f004 fe36 	bl	8007244 <HAL_I2C_Mem_Write>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	4313      	orrs	r3, r2
 80025e0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <bmi088_init+0x38a>
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <bmi088_init+0x430>)
 80025ea:	22bd      	movs	r2, #189	; 0xbd
 80025ec:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <bmi088_init+0x434>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	7d1b      	ldrb	r3, [r3, #20]
 80025f4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <bmi088_init+0x42c>)
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	2314      	movs	r3, #20
 80025fc:	9302      	str	r3, [sp, #8]
 80025fe:	2301      	movs	r3, #1
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2301      	movs	r3, #1
 800260a:	2241      	movs	r2, #65	; 0x41
 800260c:	2130      	movs	r1, #48	; 0x30
 800260e:	f004 fe19 	bl	8007244 <HAL_I2C_Mem_Write>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	4313      	orrs	r3, r2
 800261a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <bmi088_init+0x3c4>
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <bmi088_init+0x430>)
 8002624:	22c1      	movs	r2, #193	; 0xc1
 8002626:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002628:	230a      	movs	r3, #10
 800262a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <bmi088_init+0x42c>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	2314      	movs	r3, #20
 8002632:	9302      	str	r3, [sp, #8]
 8002634:	2301      	movs	r3, #1
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2301      	movs	r3, #1
 8002640:	2253      	movs	r2, #83	; 0x53
 8002642:	2130      	movs	r1, #48	; 0x30
 8002644:	f004 fdfe 	bl	8007244 <HAL_I2C_Mem_Write>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	4313      	orrs	r3, r2
 8002650:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002652:	2304      	movs	r3, #4
 8002654:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <bmi088_init+0x42c>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	2314      	movs	r3, #20
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	2301      	movs	r3, #1
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	2258      	movs	r2, #88	; 0x58
 800266c:	2130      	movs	r1, #48	; 0x30
 800266e:	f004 fde9 	bl	8007244 <HAL_I2C_Mem_Write>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	4313      	orrs	r3, r2
 800267a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800267c:	2009      	movs	r0, #9
 800267e:	f003 fd02 	bl	8006086 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002682:	200a      	movs	r0, #10
 8002684:	f003 fcff 	bl	8006086 <HAL_NVIC_EnableIRQ>
	//if(retVal != HAL_OK)

		//Error_Handler();

}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000021c 	.word	0x2000021c
 8002694:	20000228 	.word	0x20000228
 8002698:	20000220 	.word	0x20000220
 800269c:	00000000 	.word	0x00000000

080026a0 <bmi088_update>:
void bmi088_update()
{
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a4:	b08d      	sub	sp, #52	; 0x34
 80026a6:	af04      	add	r7, sp, #16

	if(BMI->rawDatas.isAccelUpdated)
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <bmi088_update+0x88>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	7c9b      	ldrb	r3, [r3, #18]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 81fb 	beq.w	8002aaa <bmi088_update+0x40a>
	{
		HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <bmi088_update+0x8c>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <bmi088_update+0x88>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	2314      	movs	r3, #20
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2309      	movs	r3, #9
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	9200      	str	r2, [sp, #0]
 80026c8:	2301      	movs	r3, #1
 80026ca:	2212      	movs	r2, #18
 80026cc:	2130      	movs	r1, #48	; 0x30
 80026ce:	f004 feb3 	bl	8007438 <HAL_I2C_Mem_Read>
 80026d2:	4603      	mov	r3, r0
 80026d4:	77fb      	strb	r3, [r7, #31]
		HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <bmi088_update+0x8c>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <bmi088_update+0x88>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3309      	adds	r3, #9
 80026e0:	2214      	movs	r2, #20
 80026e2:	9202      	str	r2, [sp, #8]
 80026e4:	2202      	movs	r2, #2
 80026e6:	9201      	str	r2, [sp, #4]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2301      	movs	r3, #1
 80026ec:	2222      	movs	r2, #34	; 0x22
 80026ee:	2130      	movs	r1, #48	; 0x30
 80026f0:	f004 fea2 	bl	8007438 <HAL_I2C_Mem_Read>

		uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <bmi088_update+0x88>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	7a5b      	ldrb	r3, [r3, #9]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <bmi088_update+0x88>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	7a9b      	ldrb	r3, [r3, #10]
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b2db      	uxtb	r3, r3
 8002708:	b21b      	sxth	r3, r3
 800270a:	4313      	orrs	r3, r2
 800270c:	b21b      	sxth	r3, r3
 800270e:	83bb      	strh	r3, [r7, #28]
		int16_t Temp_int11 = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	837b      	strh	r3, [r7, #26]
		if (Temp_uint11 > 1023){
 8002714:	8bbb      	ldrh	r3, [r7, #28]
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d309      	bcc.n	8002730 <bmi088_update+0x90>
			Temp_int11 = Temp_uint11 - 2048;
 800271c:	8bbb      	ldrh	r3, [r7, #28]
 800271e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002722:	b29b      	uxth	r3, r3
 8002724:	837b      	strh	r3, [r7, #26]
 8002726:	e029      	b.n	800277c <bmi088_update+0xdc>
 8002728:	20000220 	.word	0x20000220
 800272c:	2000021c 	.word	0x2000021c
		}
		else{
			Temp_int11 = Temp_uint11;
 8002730:	8bbb      	ldrh	r3, [r7, #28]
 8002732:	837b      	strh	r3, [r7, #26]
			BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002734:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002740:	ee17 0a90 	vmov	r0, s15
 8002744:	f7fd ff20 	bl	8000588 <__aeabi_f2d>
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002750:	f7fd ff72 	bl	8000638 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4bbb      	ldr	r3, [pc, #748]	; (8002a50 <bmi088_update+0x3b0>)
 8002762:	f7fd fdb3 	bl	80002cc <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	49ba      	ldr	r1, [pc, #744]	; (8002a54 <bmi088_update+0x3b4>)
 800276c:	680e      	ldr	r6, [r1, #0]
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe fa59 	bl	8000c28 <__aeabi_d2f>
 8002776:	4603      	mov	r3, r0
 8002778:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
		}
		uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 800277c:	4bb5      	ldr	r3, [pc, #724]	; (8002a54 <bmi088_update+0x3b4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	7a1b      	ldrb	r3, [r3, #8]
 8002782:	041a      	lsls	r2, r3, #16
 8002784:	4bb3      	ldr	r3, [pc, #716]	; (8002a54 <bmi088_update+0x3b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	79db      	ldrb	r3, [r3, #7]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4313      	orrs	r3, r2
 800278e:	4ab1      	ldr	r2, [pc, #708]	; (8002a54 <bmi088_update+0x3b4>)
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	7992      	ldrb	r2, [r2, #6]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

		BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	ee17 0a90 	vmov	r0, s15
 80027a6:	f7fd feef 	bl	8000588 <__aeabi_f2d>
 80027aa:	a3a3      	add	r3, pc, #652	; (adr r3, 8002a38 <bmi088_update+0x398>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd ff42 	bl	8000638 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a40 <bmi088_update+0x3a0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fe f863 	bl	800088c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	49a2      	ldr	r1, [pc, #648]	; (8002a54 <bmi088_update+0x3b4>)
 80027cc:	680e      	ldr	r6, [r1, #0]
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe fa29 	bl	8000c28 <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

		int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 80027dc:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <bmi088_update+0x3b4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	795b      	ldrb	r3, [r3, #5]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	4b9b      	ldr	r3, [pc, #620]	; (8002a54 <bmi088_update+0x3b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	827b      	strh	r3, [r7, #18]
		int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <bmi088_update+0x3b4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	78db      	ldrb	r3, [r3, #3]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	4b95      	ldr	r3, [pc, #596]	; (8002a54 <bmi088_update+0x3b4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	b21b      	sxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	823b      	strh	r3, [r7, #16]
		int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002808:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <bmi088_update+0x3b4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b21a      	sxth	r2, r3
 8002812:	4b90      	ldr	r3, [pc, #576]	; (8002a54 <bmi088_update+0x3b4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	81fb      	strh	r3, [r7, #14]

		BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 800281e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282a:	ee17 0a90 	vmov	r0, s15
 800282e:	f7fd feab 	bl	8000588 <__aeabi_f2d>
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <bmi088_update+0x3b8>)
 8002838:	f7fe f828 	bl	800088c <__aeabi_ddiv>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <bmi088_update+0x3bc>)
 800284a:	f7fd fef5 	bl	8000638 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <bmi088_update+0x3c0>)
 800285c:	f7fd feec 	bl	8000638 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4692      	mov	sl, r2
 8002866:	469b      	mov	fp, r3
 8002868:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <bmi088_update+0x3b4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	7d1b      	ldrb	r3, [r3, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	ee17 0a90 	vmov	r0, s15
 800287c:	f7fd fe84 	bl	8000588 <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	ec43 2b11 	vmov	d1, r2, r3
 8002888:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8002a48 <bmi088_update+0x3a8>
 800288c:	f00c fe04 	bl	800f498 <pow>
 8002890:	ec53 2b10 	vmov	r2, r3, d0
 8002894:	4650      	mov	r0, sl
 8002896:	4659      	mov	r1, fp
 8002898:	f7fd fece 	bl	8000638 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <bmi088_update+0x3c4>)
 80028aa:	f7fd fd0d 	bl	80002c8 <__aeabi_dsub>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4968      	ldr	r1, [pc, #416]	; (8002a54 <bmi088_update+0x3b4>)
 80028b4:	680e      	ldr	r6, [r1, #0]
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f9b5 	bl	8000c28 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
		BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 80028c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	ee17 0a90 	vmov	r0, s15
 80028d4:	f7fd fe58 	bl	8000588 <__aeabi_f2d>
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <bmi088_update+0x3b8>)
 80028de:	f7fd ffd5 	bl	800088c <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <bmi088_update+0x3bc>)
 80028f0:	f7fd fea2 	bl	8000638 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <bmi088_update+0x3c0>)
 8002902:	f7fd fe99 	bl	8000638 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4692      	mov	sl, r2
 800290c:	469b      	mov	fp, r3
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <bmi088_update+0x3b4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	7d1b      	ldrb	r3, [r3, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	ee17 0a90 	vmov	r0, s15
 8002922:	f7fd fe31 	bl	8000588 <__aeabi_f2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	ec43 2b11 	vmov	d1, r2, r3
 800292e:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002a48 <bmi088_update+0x3a8>
 8002932:	f00c fdb1 	bl	800f498 <pow>
 8002936:	ec53 2b10 	vmov	r2, r3, d0
 800293a:	4650      	mov	r0, sl
 800293c:	4659      	mov	r1, fp
 800293e:	f7fd fe7b 	bl	8000638 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <bmi088_update+0x3c8>)
 8002950:	f7fd fcbc 	bl	80002cc <__adddf3>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	493e      	ldr	r1, [pc, #248]	; (8002a54 <bmi088_update+0x3b4>)
 800295a:	680e      	ldr	r6, [r1, #0]
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f962 	bl	8000c28 <__aeabi_d2f>
 8002964:	4603      	mov	r3, r0
 8002966:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
		BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 800296a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002976:	ee17 0a90 	vmov	r0, s15
 800297a:	f7fd fe05 	bl	8000588 <__aeabi_f2d>
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <bmi088_update+0x3b8>)
 8002984:	f7fd ff82 	bl	800088c <__aeabi_ddiv>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <bmi088_update+0x3bc>)
 8002996:	f7fd fe4f 	bl	8000638 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <bmi088_update+0x3c0>)
 80029a8:	f7fd fe46 	bl	8000638 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4692      	mov	sl, r2
 80029b2:	469b      	mov	fp, r3
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <bmi088_update+0x3b4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	7d1b      	ldrb	r3, [r3, #20]
 80029ba:	3301      	adds	r3, #1
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c4:	ee17 0a90 	vmov	r0, s15
 80029c8:	f7fd fdde 	bl	8000588 <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	ec43 2b11 	vmov	d1, r2, r3
 80029d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a48 <bmi088_update+0x3a8>
 80029d8:	f00c fd5e 	bl	800f498 <pow>
 80029dc:	ec53 2b10 	vmov	r2, r3, d0
 80029e0:	4650      	mov	r0, sl
 80029e2:	4659      	mov	r1, fp
 80029e4:	f7fd fe28 	bl	8000638 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <bmi088_update+0x3c4>)
 80029f6:	f7fd fc69 	bl	80002cc <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4915      	ldr	r1, [pc, #84]	; (8002a54 <bmi088_update+0x3b4>)
 8002a00:	680e      	ldr	r6, [r1, #0]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f90f 	bl	8000c28 <__aeabi_d2f>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

		//BMI->vel_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET - 1000.0) * BMI->deltaTime;
		//BMI->vel_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET) * BMI->deltaTime;
		//BMI->vel_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET) * BMI->deltaTime;

		BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <bmi088_update+0x3b4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <bmi088_update+0x3b4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	d520      	bpl.n	8002a70 <bmi088_update+0x3d0>
 8002a2e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002a6c <bmi088_update+0x3cc>
 8002a32:	e027      	b.n	8002a84 <bmi088_update+0x3e4>
 8002a34:	f3af 8000 	nop.w
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	40438800 	.word	0x40438800
 8002a40:	00000000 	.word	0x00000000
 8002a44:	412e8480 	.word	0x412e8480
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	40000000 	.word	0x40000000
 8002a50:	40370000 	.word	0x40370000
 8002a54:	20000220 	.word	0x20000220
 8002a58:	40e00000 	.word	0x40e00000
 8002a5c:	408f4000 	.word	0x408f4000
 8002a60:	3ff80000 	.word	0x3ff80000
 8002a64:	40100000 	.word	0x40100000
 8002a68:	402e0000 	.word	0x402e0000
 8002a6c:	00000000 	.word	0x00000000
 8002a70:	4bb5      	ldr	r3, [pc, #724]	; (8002d48 <bmi088_update+0x6a8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a78:	4bb3      	ldr	r3, [pc, #716]	; (8002d48 <bmi088_update+0x6a8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a84:	4bb0      	ldr	r3, [pc, #704]	; (8002d48 <bmi088_update+0x6a8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		BMI->lastTime = BMI->currentTime;
 8002a8c:	4bae      	ldr	r3, [pc, #696]	; (8002d48 <bmi088_update+0x6a8>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4bad      	ldr	r3, [pc, #692]	; (8002d48 <bmi088_update+0x6a8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002a98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		BMI->rawDatas.isAccelUpdated = 0;
 8002a9c:	4baa      	ldr	r3, [pc, #680]	; (8002d48 <bmi088_update+0x6a8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	749a      	strb	r2, [r3, #18]
		isTimeUpdated = 1;
 8002aa4:	4ba9      	ldr	r3, [pc, #676]	; (8002d4c <bmi088_update+0x6ac>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
		UNUSED(retVal);
	}

	if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002aaa:	4ba7      	ldr	r3, [pc, #668]	; (8002d48 <bmi088_update+0x6a8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	7c5b      	ldrb	r3, [r3, #17]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 81cc 	beq.w	8002e4e <bmi088_update+0x7ae>
 8002ab6:	4ba5      	ldr	r3, [pc, #660]	; (8002d4c <bmi088_update+0x6ac>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 81c7 	beq.w	8002e4e <bmi088_update+0x7ae>
	{
		if(isStarded){
 8002ac0:	4ba3      	ldr	r3, [pc, #652]	; (8002d50 <bmi088_update+0x6b0>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 81b7 	beq.w	8002e38 <bmi088_update+0x798>
			HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 20);
 8002aca:	4ba2      	ldr	r3, [pc, #648]	; (8002d54 <bmi088_update+0x6b4>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	4b9e      	ldr	r3, [pc, #632]	; (8002d48 <bmi088_update+0x6a8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330b      	adds	r3, #11
 8002ad4:	2214      	movs	r2, #20
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	2206      	movs	r2, #6
 8002ada:	9201      	str	r2, [sp, #4]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	21d0      	movs	r1, #208	; 0xd0
 8002ae4:	f004 fca8 	bl	8007438 <HAL_I2C_Mem_Read>
			int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002ae8:	4b97      	ldr	r3, [pc, #604]	; (8002d48 <bmi088_update+0x6a8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	7c1b      	ldrb	r3, [r3, #16]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	4b95      	ldr	r3, [pc, #596]	; (8002d48 <bmi088_update+0x6a8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	7bdb      	ldrb	r3, [r3, #15]
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	81bb      	strh	r3, [r7, #12]
			int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002afe:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <bmi088_update+0x6a8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	7b9b      	ldrb	r3, [r3, #14]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b21a      	sxth	r2, r3
 8002b08:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <bmi088_update+0x6a8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	7b5b      	ldrb	r3, [r3, #13]
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	817b      	strh	r3, [r7, #10]
			int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002b14:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <bmi088_update+0x6a8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	7b1b      	ldrb	r3, [r3, #12]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	4b8a      	ldr	r3, [pc, #552]	; (8002d48 <bmi088_update+0x6a8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	7adb      	ldrb	r3, [r3, #11]
 8002b24:	b21b      	sxth	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	813b      	strh	r3, [r7, #8]
			/*
			BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
			 */
			BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[0]);
 8002b2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd18 	bl	8000564 <__aeabi_i2d>
 8002b34:	a382      	add	r3, pc, #520	; (adr r3, 8002d40 <bmi088_update+0x6a0>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fea7 	bl	800088c <__aeabi_ddiv>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4692      	mov	sl, r2
 8002b44:	469b      	mov	fp, r3
 8002b46:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <bmi088_update+0x6a8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	7e5b      	ldrb	r3, [r3, #25]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b52:	4113      	asrs	r3, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fd05 	bl	8000564 <__aeabi_i2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4650      	mov	r0, sl
 8002b60:	4659      	mov	r1, fp
 8002b62:	f7fd fd69 	bl	8000638 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <bmi088_update+0x6b8>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	4e74      	ldr	r6, [pc, #464]	; (8002d48 <bmi088_update+0x6a8>)
 8002b76:	6836      	ldr	r6, [r6, #0]
 8002b78:	f7fd fba6 	bl	80002c8 <__aeabi_dsub>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
			BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[1]);
 8002b84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fceb 	bl	8000564 <__aeabi_i2d>
 8002b8e:	a36c      	add	r3, pc, #432	; (adr r3, 8002d40 <bmi088_update+0x6a0>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fe7a 	bl	800088c <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4692      	mov	sl, r2
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4b69      	ldr	r3, [pc, #420]	; (8002d48 <bmi088_update+0x6a8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	7e5b      	ldrb	r3, [r3, #25]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bac:	4113      	asrs	r3, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcd8 	bl	8000564 <__aeabi_i2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4650      	mov	r0, sl
 8002bba:	4659      	mov	r1, fp
 8002bbc:	f7fd fd3c 	bl	8000638 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <bmi088_update+0x6b8>)
 8002bca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bce:	4e5e      	ldr	r6, [pc, #376]	; (8002d48 <bmi088_update+0x6a8>)
 8002bd0:	6836      	ldr	r6, [r6, #0]
 8002bd2:	f7fd fb79 	bl	80002c8 <__aeabi_dsub>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
			BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[2]);
 8002bde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fcbe 	bl	8000564 <__aeabi_i2d>
 8002be8:	a355      	add	r3, pc, #340	; (adr r3, 8002d40 <bmi088_update+0x6a0>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fe4d 	bl	800088c <__aeabi_ddiv>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4692      	mov	sl, r2
 8002bf8:	469b      	mov	fp, r3
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <bmi088_update+0x6a8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	7e5b      	ldrb	r3, [r3, #25]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c06:	4113      	asrs	r3, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fcab 	bl	8000564 <__aeabi_i2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4650      	mov	r0, sl
 8002c14:	4659      	mov	r1, fp
 8002c16:	f7fd fd0f 	bl	8000638 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <bmi088_update+0x6b8>)
 8002c24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c28:	4e47      	ldr	r6, [pc, #284]	; (8002d48 <bmi088_update+0x6a8>)
 8002c2a:	6836      	ldr	r6, [r6, #0]
 8002c2c:	f7fd fb4c 	bl	80002c8 <__aeabi_dsub>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

			BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <bmi088_update+0x6a8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fca1 	bl	8000588 <__aeabi_f2d>
 8002c46:	e9c7 0100 	strd	r0, r1, [r7]
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <bmi088_update+0x6a8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <bmi088_update+0x6a8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc94 	bl	8000588 <__aeabi_f2d>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4650      	mov	r0, sl
 8002c66:	4659      	mov	r1, fp
 8002c68:	f7fd fce6 	bl	8000638 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c74:	f7fd fb2a 	bl	80002cc <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4932      	ldr	r1, [pc, #200]	; (8002d48 <bmi088_update+0x6a8>)
 8002c7e:	680e      	ldr	r6, [r1, #0]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ffd0 	bl	8000c28 <__aeabi_d2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
			BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <bmi088_update+0x6a8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc76 	bl	8000588 <__aeabi_f2d>
 8002c9c:	e9c7 0100 	strd	r0, r1, [r7]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <bmi088_update+0x6a8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <bmi088_update+0x6a8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc69 	bl	8000588 <__aeabi_f2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4650      	mov	r0, sl
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	f7fd fcbb 	bl	8000638 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cca:	f7fd faff 	bl	80002cc <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	491d      	ldr	r1, [pc, #116]	; (8002d48 <bmi088_update+0x6a8>)
 8002cd4:	680e      	ldr	r6, [r1, #0]
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ffa5 	bl	8000c28 <__aeabi_d2f>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
			BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <bmi088_update+0x6a8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc4b 	bl	8000588 <__aeabi_f2d>
 8002cf2:	e9c7 0100 	strd	r0, r1, [r7]
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <bmi088_update+0x6a8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <bmi088_update+0x6a8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4650      	mov	r0, sl
 8002d12:	4659      	mov	r1, fp
 8002d14:	f7fd fc90 	bl	8000638 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d20:	f7fd fad4 	bl	80002cc <__adddf3>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <bmi088_update+0x6a8>)
 8002d2a:	680e      	ldr	r6, [r1, #0]
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fd ff7a 	bl	8000c28 <__aeabi_d2f>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98


			//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
			//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

			updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8002d3a:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <bmi088_update+0x6a8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e00d      	b.n	8002d5c <bmi088_update+0x6bc>
 8002d40:	00000000 	.word	0x00000000
 8002d44:	40dfffc0 	.word	0x40dfffc0
 8002d48:	20000220 	.word	0x20000220
 8002d4c:	20000224 	.word	0x20000224
 8002d50:	20000225 	.word	0x20000225
 8002d54:	2000021c 	.word	0x2000021c
 8002d58:	20000260 	.word	0x20000260
 8002d5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d60:	4690      	mov	r8, r2
 8002d62:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002d66:	a33c      	add	r3, pc, #240	; (adr r3, 8002e58 <bmi088_update+0x7b8>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	4640      	mov	r0, r8
 8002d6e:	4649      	mov	r1, r9
 8002d70:	f7fd fc62 	bl	8000638 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <bmi088_update+0x7c0>)
 8002d82:	f7fd fd83 	bl	800088c <__aeabi_ddiv>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd ff4b 	bl	8000c28 <__aeabi_d2f>
 8002d92:	4606      	mov	r6, r0
 8002d94:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <bmi088_update+0x7c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8002d9c:	a32e      	add	r3, pc, #184	; (adr r3, 8002e58 <bmi088_update+0x7b8>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc49 	bl	8000638 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <bmi088_update+0x7c0>)
 8002db4:	f7fd fd6a 	bl	800088c <__aeabi_ddiv>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f7fd ff32 	bl	8000c28 <__aeabi_d2f>
 8002dc4:	4680      	mov	r8, r0
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <bmi088_update+0x7c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002dce:	4614      	mov	r4, r2
 8002dd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002dd4:	a320      	add	r3, pc, #128	; (adr r3, 8002e58 <bmi088_update+0x7b8>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fc2b 	bl	8000638 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <bmi088_update+0x7c0>)
 8002df0:	f7fd fd4c 	bl	800088c <__aeabi_ddiv>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd ff14 	bl	8000c28 <__aeabi_d2f>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <bmi088_update+0x7c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002e0a:	eef0 1a67 	vmov.f32	s3, s15
 8002e0e:	ee01 2a10 	vmov	s2, r2
 8002e12:	ee00 8a90 	vmov	s1, r8
 8002e16:	ee00 6a10 	vmov	s0, r6
 8002e1a:	f001 f8f1 	bl	8004000 <updateQuaternion>
			quaternionToEuler();
 8002e1e:	f001 fa17 	bl	8004250 <quaternionToEuler>

			BMI->rawDatas.isGyroUpdated = 0;
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <bmi088_update+0x7c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <bmi088_update+0x7c8>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			is_gyro_offset = 1;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <bmi088_update+0x7cc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		{
			BMI->lastTime = BMI->currentTime;
			isStarded = 1;
		}
	}
}
 8002e36:	e00a      	b.n	8002e4e <bmi088_update+0x7ae>
			BMI->lastTime = BMI->currentTime;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <bmi088_update+0x7c4>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <bmi088_update+0x7c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e44:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			isStarded = 1;
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <bmi088_update+0x7d0>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e58:	54442d18 	.word	0x54442d18
 8002e5c:	400921fb 	.word	0x400921fb
 8002e60:	40668000 	.word	0x40668000
 8002e64:	20000220 	.word	0x20000220
 8002e68:	20000224 	.word	0x20000224
 8002e6c:	20000226 	.word	0x20000226
 8002e70:	20000225 	.word	0x20000225

08002e74 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <bmi088_getAccelDatas_INT+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	749a      	strb	r2, [r3, #18]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000220 	.word	0x20000220

08002e90 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <bmi088_getGyroDatas_INT+0x18>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	745a      	strb	r2, [r3, #17]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000220 	.word	0x20000220

08002eac <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eae:	b0c5      	sub	sp, #276	; 0x114
 8002eb0:	af04      	add	r7, sp, #16
	uint8_t buffer[250];
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002eb2:	f7ff fbf5 	bl	80026a0 <bmi088_update>
		if(is_gyro_offset == 1)
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <getOffset+0x144>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d1f9      	bne.n	8002eb2 <getOffset+0x6>
		{
			if(offsetCounter < 1000){
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <getOffset+0x148>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec6:	da32      	bge.n	8002f2e <getOffset+0x82>
					 g[0][0] += BMI->gyro_x;
 8002ec8:	4b4b      	ldr	r3, [pc, #300]	; (8002ff8 <getOffset+0x14c>)
 8002eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ece:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <getOffset+0x150>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ed6:	f7fd f9f9 	bl	80002cc <__adddf3>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4946      	ldr	r1, [pc, #280]	; (8002ff8 <getOffset+0x14c>)
 8002ee0:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002ee4:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <getOffset+0x14c>)
 8002ee6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <getOffset+0x150>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002ef2:	f7fd f9eb 	bl	80002cc <__adddf3>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	493f      	ldr	r1, [pc, #252]	; (8002ff8 <getOffset+0x14c>)
 8002efc:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002f00:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <getOffset+0x14c>)
 8002f02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f06:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <getOffset+0x150>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f0e:	f7fd f9dd 	bl	80002cc <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4938      	ldr	r1, [pc, #224]	; (8002ff8 <getOffset+0x14c>)
 8002f18:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002f1c:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <getOffset+0x148>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <getOffset+0x148>)
 8002f24:	6013      	str	r3, [r2, #0]
					 HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 250);
					 quaternionSet_zero();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <getOffset+0x144>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e7c1      	b.n	8002eb2 <getOffset+0x6>
					 g[0][0] /= 1000.0;
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <getOffset+0x14c>)
 8002f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	4b31      	ldr	r3, [pc, #196]	; (8003000 <getOffset+0x154>)
 8002f3a:	f7fd fca7 	bl	800088c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <getOffset+0x14c>)
 8002f44:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <getOffset+0x14c>)
 8002f4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <getOffset+0x154>)
 8002f54:	f7fd fc9a 	bl	800088c <__aeabi_ddiv>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4926      	ldr	r1, [pc, #152]	; (8002ff8 <getOffset+0x14c>)
 8002f5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <getOffset+0x14c>)
 8002f64:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <getOffset+0x154>)
 8002f6e:	f7fd fc8d 	bl	800088c <__aeabi_ddiv>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4920      	ldr	r1, [pc, #128]	; (8002ff8 <getOffset+0x14c>)
 8002f78:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offset_vals_d[0] = g[0][0];
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <getOffset+0x14c>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	4920      	ldr	r1, [pc, #128]	; (8003004 <getOffset+0x158>)
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
					 offset_vals_d[1] = g[0][1];
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <getOffset+0x14c>)
 8002f8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f8e:	491d      	ldr	r1, [pc, #116]	; (8003004 <getOffset+0x158>)
 8002f90:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 offset_vals_d[2] = g[0][2];
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <getOffset+0x14c>)
 8002f96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f9a:	491a      	ldr	r1, [pc, #104]	; (8003004 <getOffset+0x158>)
 8002f9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 sprintf((char*)buffer, "\n\n\rg_x:%f \t g_y:%f \t g_z:%f\n\n\r", g[0][0], g[0][1], g[0][2]);
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <getOffset+0x14c>)
 8002fa2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <getOffset+0x14c>)
 8002fa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fac:	4912      	ldr	r1, [pc, #72]	; (8002ff8 <getOffset+0x14c>)
 8002fae:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002fb2:	1d3e      	adds	r6, r7, #4
 8002fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	4911      	ldr	r1, [pc, #68]	; (8003008 <getOffset+0x15c>)
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f007 ffb8 	bl	800af38 <siprintf>
					 HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 250);
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd f920 	bl	8000210 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	1d39      	adds	r1, r7, #4
 8002fd6:	23fa      	movs	r3, #250	; 0xfa
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <getOffset+0x160>)
 8002fda:	f005 fe63 	bl	8008ca4 <HAL_UART_Transmit>
					 quaternionSet_zero();
 8002fde:	f001 fbfd 	bl	80047dc <quaternionSet_zero>
					 break;
 8002fe2:	bf00      	nop
		}

	}
}
 8002fe4:	bf00      	nop
 8002fe6:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000226 	.word	0x20000226
 8002ff4:	20000278 	.word	0x20000278
 8002ff8:	20000230 	.word	0x20000230
 8002ffc:	20000220 	.word	0x20000220
 8003000:	408f4000 	.word	0x408f4000
 8003004:	20000260 	.word	0x20000260
 8003008:	08011148 	.word	0x08011148
 800300c:	200003f0 	.word	0x200003f0

08003010 <calculateCRC>:
#include "queternion.h"

union DataPack veriler;

static uint8_t calculateCRC()
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
	int check_sum = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800301a:	2301      	movs	r3, #1
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	e00a      	b.n	8003036 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003020:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <calculateCRC+0x48>)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b3c      	cmp	r3, #60	; 0x3c
 800303a:	d9f1      	bls.n	8003020 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	425a      	negs	r2, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	bf58      	it	pl
 8003046:	4253      	negpl	r3, r2
 8003048:	b2db      	uxtb	r3, r3
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000027c 	.word	0x2000027c

0800305c <sendRF>:

static void sendRF()
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 8003060:	4806      	ldr	r0, [pc, #24]	; (800307c <sendRF+0x20>)
 8003062:	f003 fbb9 	bl	80067d8 <HAL_DMA_GetState>
 8003066:	4603      	mov	r3, r0
 8003068:	2b02      	cmp	r3, #2
 800306a:	d004      	beq.n	8003076 <sendRF+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <sendRF+0x24>)
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <sendRF+0x28>)
 8003072:	f005 fea9 	bl	8008dc8 <HAL_UART_Transmit_DMA>
	}
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000478 	.word	0x20000478
 8003080:	2000027c 	.word	0x2000027c
 8003084:	200003ac 	.word	0x200003ac

08003088 <sendPC>:

static void sendPC()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <sendPC+0x20>)
 800308e:	f003 fba3 	bl	80067d8 <HAL_DMA_GetState>
 8003092:	4603      	mov	r3, r0
 8003094:	2b02      	cmp	r3, #2
 8003096:	d004      	beq.n	80030a2 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <sendPC+0x24>)
 800309c:	4804      	ldr	r0, [pc, #16]	; (80030b0 <sendPC+0x28>)
 800309e:	f005 fe93 	bl	8008dc8 <HAL_UART_Transmit_DMA>
	}
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200004d8 	.word	0x200004d8
 80030ac:	2000027c 	.word	0x2000027c
 80030b0:	200003f0 	.word	0x200003f0

080030b4 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6178      	str	r0, [r7, #20]
 80030bc:	6139      	str	r1, [r7, #16]
 80030be:	60fa      	str	r2, [r7, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 80030c2:	4bb1      	ldr	r3, [pc, #708]	; (8003388 <packDatas+0x2d4>)
 80030c4:	22ff      	movs	r2, #255	; 0xff
 80030c6:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80030d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030da:	ee17 3a90 	vmov	r3, s15
 80030de:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4aaa      	ldr	r2, [pc, #680]	; (800338c <packDatas+0x2d8>)
 80030e4:	fb82 1203 	smull	r1, r2, r2, r3
 80030e8:	1151      	asrs	r1, r2, #5
 80030ea:	17da      	asrs	r2, r3, #31
 80030ec:	1a8a      	subs	r2, r1, r2
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f202 	mul.w	r2, r1, r2
 80030f4:	1a9a      	subs	r2, r3, r2
 80030f6:	4613      	mov	r3, r2
 80030f8:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4aa3      	ldr	r2, [pc, #652]	; (800338c <packDatas+0x2d8>)
 80030fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003102:	1152      	asrs	r2, r2, #5
 8003104:	17db      	asrs	r3, r3, #31
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4a9f      	ldr	r2, [pc, #636]	; (800338c <packDatas+0x2d8>)
 800310e:	fb82 1203 	smull	r1, r2, r2, r3
 8003112:	1151      	asrs	r1, r2, #5
 8003114:	17da      	asrs	r2, r3, #31
 8003116:	1a8a      	subs	r2, r1, r2
 8003118:	2164      	movs	r1, #100	; 0x64
 800311a:	fb01 f202 	mul.w	r2, r1, r2
 800311e:	1a9a      	subs	r2, r3, r2
 8003120:	4613      	mov	r3, r2
 8003122:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	b25a      	sxtb	r2, r3
 800312a:	7fbb      	ldrb	r3, [r7, #30]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	b2db      	uxtb	r3, r3
 8003130:	b25b      	sxtb	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	b25b      	sxtb	r3, r3
 8003136:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 8003138:	7fbb      	ldrb	r3, [r7, #30]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	b25a      	sxtb	r2, r3
 800313e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003142:	4313      	orrs	r3, r2
 8003144:	b25b      	sxtb	r3, r3
 8003146:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 8003148:	4a8f      	ldr	r2, [pc, #572]	; (8003388 <packDatas+0x2d4>)
 800314a:	7ffb      	ldrb	r3, [r7, #31]
 800314c:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 800314e:	4a8e      	ldr	r2, [pc, #568]	; (8003388 <packDatas+0x2d4>)
 8003150:	7fbb      	ldrb	r3, [r7, #30]
 8003152:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003390 <packDatas+0x2dc>
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003166:	ee17 3a90 	vmov	r3, s15
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b86      	ldr	r3, [pc, #536]	; (8003388 <packDatas+0x2d4>)
 800316e:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	edd3 7a03 	vldr	s15, [r3, #12]
 8003176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317a:	ee17 3a90 	vmov	r3, s15
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b81      	ldr	r3, [pc, #516]	; (8003388 <packDatas+0x2d4>)
 8003182:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800318a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800318e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003192:	edc7 7a01 	vstr	s15, [r7, #4]
 8003196:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800319a:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <packDatas+0x2d4>)
 800319c:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80031a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80031ac:	793a      	ldrb	r2, [r7, #4]
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <packDatas+0x2d4>)
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	4a73      	ldr	r2, [pc, #460]	; (8003388 <packDatas+0x2d4>)
 80031ba:	6093      	str	r3, [r2, #8]
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->maxAltitude;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c6:	ee17 3a90 	vmov	r3, s15
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <packDatas+0x2d4>)
 80031ce:	875a      	strh	r2, [r3, #58]	; 0x3a
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	4a6c      	ldr	r2, [pc, #432]	; (8003388 <packDatas+0x2d4>)
 80031d6:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <packDatas+0x2d4>)
 80031de:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a68      	ldr	r2, [pc, #416]	; (8003388 <packDatas+0x2d4>)
 80031e6:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = bmi->gyro_x;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fd19 	bl	8000c28 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a63      	ldr	r2, [pc, #396]	; (8003388 <packDatas+0x2d4>)
 80031fa:	6193      	str	r3, [r2, #24]
	veriler.dataYapi.gyroY = bmi->gyro_y;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7fd fd0f 	bl	8000c28 <__aeabi_d2f>
 800320a:	4603      	mov	r3, r0
 800320c:	4a5e      	ldr	r2, [pc, #376]	; (8003388 <packDatas+0x2d4>)
 800320e:	61d3      	str	r3, [r2, #28]
	veriler.dataYapi.gyroZ = bmi->gyro_z;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	f7fd fd05 	bl	8000c28 <__aeabi_d2f>
 800321e:	4603      	mov	r3, r0
 8003220:	4a59      	ldr	r2, [pc, #356]	; (8003388 <packDatas+0x2d4>)
 8003222:	6213      	str	r3, [r2, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800322a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8003394 <packDatas+0x2e0>
 800322e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <packDatas+0x2d4>)
 8003234:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_y / 1000;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800323e:	eddf 6a55 	vldr	s13, [pc, #340]	; 8003394 <packDatas+0x2e0>
 8003242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <packDatas+0x2d4>)
 8003248:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = bmi->acc_z / 1000;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8003252:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003394 <packDatas+0x2e0>
 8003256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <packDatas+0x2d4>)
 800325c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	b25a      	sxtb	r2, r3
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <packDatas+0x2e4>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003274:	ee17 3a90 	vmov	r3, s15
 8003278:	135b      	asrs	r3, r3, #13
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	b25b      	sxtb	r3, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	b25a      	sxtb	r2, r3
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <packDatas+0x2e4>)
 8003288:	edd3 7a01 	vldr	s15, [r3, #4]
 800328c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003290:	ee17 3a90 	vmov	r3, s15
 8003294:	139b      	asrs	r3, r3, #14
 8003296:	b25b      	sxtb	r3, r3
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	b25b      	sxtb	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b25a      	sxtb	r2, r3
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <packDatas+0x2e4>)
 80032a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ac:	ee17 3a90 	vmov	r3, s15
 80032b0:	13db      	asrs	r3, r3, #15
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <packDatas+0x2d4>)
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (uint16_t)(int)(bme->velocity * 10);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80032cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d8:	ee17 3a90 	vmov	r3, s15
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <packDatas+0x2d4>)
 80032e0:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80032e2:	f001 f88d 	bl	8004400 <quaternionToTheta>
 80032e6:	eef0 7a40 	vmov.f32	s15, s0
 80032ea:	4b27      	ldr	r3, [pc, #156]	; (8003388 <packDatas+0x2d4>)
 80032ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <packDatas+0x2e4>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bfb8      	it	lt
 8003302:	425b      	neglt	r3, r3
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <packDatas+0x2d4>)
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <packDatas+0x2e4>)
 800330e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003316:	ee17 3a90 	vmov	r3, s15
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	425b      	neglt	r3, r3
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <packDatas+0x2d4>)
 8003324:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <packDatas+0x2e4>)
 800332a:	edd3 7a02 	vldr	s15, [r3, #8]
 800332e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003332:	ee17 3a90 	vmov	r3, s15
 8003336:	2b00      	cmp	r3, #0
 8003338:	bfb8      	it	lt
 800333a:	425b      	neglt	r3, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <packDatas+0x2d4>)
 8003340:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003344:	f7ff fe64 	bl	8003010 <calculateCRC>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <packDatas+0x2d4>)
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <packDatas+0x2d4>)
 8003354:	220d      	movs	r2, #13
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <packDatas+0x2d4>)
 800335c:	220a      	movs	r2, #10
 800335e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef ACTIVATE_RF
	if(guc->voltaj > 8.0){
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800336c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd01      	ble.n	800337a <packDatas+0x2c6>
		sendRF();
 8003376:	f7ff fe71 	bl	800305c <sendRF>
	}
#endif
	sendPC();
 800337a:	f7ff fe85 	bl	8003088 <sendPC>
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000027c 	.word	0x2000027c
 800338c:	51eb851f 	.word	0x51eb851f
 8003390:	42c80000 	.word	0x42c80000
 8003394:	447a0000 	.word	0x447a0000
 8003398:	20000848 	.word	0x20000848

0800339c <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
 80033a8:	460b      	mov	r3, r1
 80033aa:	71bb      	strb	r3, [r7, #6]
 80033ac:	4613      	mov	r3, r2
 80033ae:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80033b4:	79bb      	ldrb	r3, [r7, #6]
 80033b6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80033b8:	797b      	ldrb	r3, [r7, #5]
 80033ba:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e00c      	b.n	80033dc <send_command+0x40>
        command[3 + i] = data[i];
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	441a      	add	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3303      	adds	r3, #3
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	3318      	adds	r3, #24
 80033d0:	443b      	add	r3, r7
 80033d2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3301      	adds	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	ddef      	ble.n	80033c2 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 80033e2:	f107 0108 	add.w	r1, r7, #8
 80033e6:	2364      	movs	r3, #100	; 0x64
 80033e8:	220c      	movs	r2, #12
 80033ea:	4803      	ldr	r0, [pc, #12]	; (80033f8 <send_command+0x5c>)
 80033ec:	f005 fc5a 	bl	8008ca4 <HAL_UART_Transmit>
}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200003ac 	.word	0x200003ac

080033fc <lora_configure>:

void lora_configure(lorastruct *config)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2207      	movs	r2, #7
 8003438:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[0];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	799b      	ldrb	r3, [r3, #6]
 800343e:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[1];
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	79db      	ldrb	r3, [r3, #7]
 8003444:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7a5b      	ldrb	r3, [r3, #9]
 800344a:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7c5b      	ldrb	r3, [r3, #17]
 8003454:	4313      	orrs	r3, r2
 8003456:	b2da      	uxtb	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	4313      	orrs	r3, r2
 800345e:	b2db      	uxtb	r3, r3
 8003460:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	789a      	ldrb	r2, [r3, #2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7a9b      	ldrb	r3, [r3, #10]
 800346a:	4313      	orrs	r3, r2
 800346c:	b2da      	uxtb	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	78db      	ldrb	r3, [r3, #3]
 8003472:	4313      	orrs	r3, r2
 8003474:	b2db      	uxtb	r3, r3
 8003476:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7a1b      	ldrb	r3, [r3, #8]
 800347c:	2b53      	cmp	r3, #83	; 0x53
 800347e:	d902      	bls.n	8003486 <lora_configure+0x8a>
    	config->channel = 83;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2253      	movs	r2, #83	; 0x53
 8003484:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7a1b      	ldrb	r3, [r3, #8]
 800348a:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7ada      	ldrb	r2, [r3, #11]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7b1b      	ldrb	r3, [r3, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7b5b      	ldrb	r3, [r3, #13]
 800349c:	4313      	orrs	r3, r2
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7b9b      	ldrb	r3, [r3, #14]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7bdb      	ldrb	r3, [r3, #15]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7c1b      	ldrb	r3, [r3, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[0];
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	791b      	ldrb	r3, [r3, #4]
 80034be:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[1];
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	795b      	ldrb	r3, [r3, #5]
 80034c4:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	2209      	movs	r2, #9
 80034cc:	2100      	movs	r1, #0
 80034ce:	20c0      	movs	r0, #192	; 0xc0
 80034d0:	f7ff ff64 	bl	800339c <send_command>
}
 80034d4:	bf00      	nop
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	0000      	movs	r0, r0
	...

080034e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e0:	b5b0      	push	{r4, r5, r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034e6:	f002 f80d 	bl	8005504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ea:	f000 f961 	bl	80037b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ee:	f000 fb49 	bl	8003b84 <MX_GPIO_Init>
  MX_I2C1_Init();
 80034f2:	f000 fa2f 	bl	8003954 <MX_I2C1_Init>
  MX_I2C3_Init();
 80034f6:	f000 fa5b 	bl	80039b0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80034fa:	f000 fab1 	bl	8003a60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80034fe:	f000 fad9 	bl	8003ab4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8003502:	f000 fb01 	bl	8003b08 <MX_DMA_Init>
  MX_ADC1_Init();
 8003506:	f000 f9c5 	bl	8003894 <MX_ADC1_Init>
  MX_UART4_Init();
 800350a:	f000 fa7f 	bl	8003a0c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800350e:	2009      	movs	r0, #9
 8003510:	f002 fdc7 	bl	80060a2 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8003514:	200a      	movs	r0, #10
 8003516:	f002 fdc4 	bl	80060a2 <HAL_NVIC_DisableIRQ>

  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800351a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800351e:	488e      	ldr	r0, [pc, #568]	; (8003758 <main+0x278>)
 8003520:	f003 fce9 	bl	8006ef6 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8003524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003528:	f002 f85e 	bl	80055e8 <HAL_Delay>
  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800352c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003530:	4889      	ldr	r0, [pc, #548]	; (8003758 <main+0x278>)
 8003532:	f003 fce0 	bl	8006ef6 <HAL_GPIO_TogglePin>
  bmiBegin();
 8003536:	f000 fbc7 	bl	8003cc8 <bmiBegin>
  bme280_init(&BME280_sensor, &hi2c1, BME280_MODE_NORMAL, BME280_OS_8, BME280_FILTER_8);
 800353a:	2303      	movs	r3, #3
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2304      	movs	r3, #4
 8003540:	2203      	movs	r2, #3
 8003542:	4986      	ldr	r1, [pc, #536]	; (800375c <main+0x27c>)
 8003544:	4886      	ldr	r0, [pc, #536]	; (8003760 <main+0x280>)
 8003546:	f7fe f939 	bl	80017bc <bme280_init>
  loraBegin();
 800354a:	f000 fbdf 	bl	8003d0c <loraBegin>
  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 800354e:	2364      	movs	r3, #100	; 0x64
 8003550:	2213      	movs	r2, #19
 8003552:	4984      	ldr	r1, [pc, #528]	; (8003764 <main+0x284>)
 8003554:	4884      	ldr	r0, [pc, #528]	; (8003768 <main+0x288>)
 8003556:	f005 fba5 	bl	8008ca4 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
  HAL_UART_DeInit(&huart4);
 800355a:	4884      	ldr	r0, [pc, #528]	; (800376c <main+0x28c>)
 800355c:	f005 fb73 	bl	8008c46 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003560:	4881      	ldr	r0, [pc, #516]	; (8003768 <main+0x288>)
 8003562:	f005 fb70 	bl	8008c46 <HAL_UART_DeInit>
  HAL_Delay(10);
 8003566:	200a      	movs	r0, #10
 8003568:	f002 f83e 	bl	80055e8 <HAL_Delay>
  huart4.Init.BaudRate = 115200;
 800356c:	4b7f      	ldr	r3, [pc, #508]	; (800376c <main+0x28c>)
 800356e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003572:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <main+0x288>)
 8003576:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800357a:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//telemetri
 800357c:	487b      	ldr	r0, [pc, #492]	; (800376c <main+0x28c>)
 800357e:	f005 fb15 	bl	8008bac <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8003582:	4879      	ldr	r0, [pc, #484]	; (8003768 <main+0x288>)
 8003584:	f005 fb12 	bl	8008bac <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8003588:	4879      	ldr	r0, [pc, #484]	; (8003770 <main+0x290>)
 800358a:	f002 fda5 	bl	80060d8 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 800358e:	4879      	ldr	r0, [pc, #484]	; (8003774 <main+0x294>)
 8003590:	f002 fda2 	bl	80060d8 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8003594:	4878      	ldr	r0, [pc, #480]	; (8003778 <main+0x298>)
 8003596:	f002 fd9f 	bl	80060d8 <HAL_DMA_Init>
   // Timer'ı başlat

  //Bu makro gps verisini gözlemlemek içindir.
  //VIEW_GPS()

  getOffset();
 800359a:	f7ff fc87 	bl	8002eac <getOffset>

  UsrGpsL86Init(&huart2);
 800359e:	4872      	ldr	r0, [pc, #456]	; (8003768 <main+0x288>)
 80035a0:	f001 fd84 	bl	80050ac <UsrGpsL86Init>
  HAL_Delay(200);
 80035a4:	20c8      	movs	r0, #200	; 0xc8
 80035a6:	f002 f81f 	bl	80055e8 <HAL_Delay>
  rocketStatus = STAT_ROCKET_READY;
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <main+0x29c>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 5 ; i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	e00a      	b.n	80035cc <main+0xec>
  {
	  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80035b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ba:	4867      	ldr	r0, [pc, #412]	; (8003758 <main+0x278>)
 80035bc:	f003 fc9b 	bl	8006ef6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80035c0:	20c8      	movs	r0, #200	; 0xc8
 80035c2:	f002 f811 	bl	80055e8 <HAL_Delay>
  for(int i = 0; i < 5 ; i++)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3301      	adds	r3, #1
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	ddf1      	ble.n	80035b6 <main+0xd6>
  }
  HAL_Delay(900);
 80035d2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80035d6:	f002 f807 	bl	80055e8 <HAL_Delay>
  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80035da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035de:	485e      	ldr	r0, [pc, #376]	; (8003758 <main+0x278>)
 80035e0:	f003 fc89 	bl	8006ef6 <HAL_GPIO_TogglePin>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buzzUpdate();
 80035e4:	f000 fcbe 	bl	8003f64 <buzzUpdate>
	  bmi088_update();
 80035e8:	f7ff f85a 	bl	80026a0 <bmi088_update>
	  bme280_update();
 80035ec:	f7fe fa78 	bl	8001ae0 <bme280_update>
	  measurePower(&guc);
 80035f0:	4863      	ldr	r0, [pc, #396]	; (8003780 <main+0x2a0>)
 80035f2:	f000 fbc9 	bl	8003d88 <measurePower>

#if defined(ALGORITHM_1)
	  algorithm_1_update(&BME280_sensor, algorithm_1_stat);
#endif
#if defined(ALGORITHM_2)
	  float teta = quaternionToTheta();
 80035f6:	f000 ff03 	bl	8004400 <quaternionToTheta>
 80035fa:	ed87 0a00 	vstr	s0, [r7]
	  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 80035fe:	ed97 0a00 	vldr	s0, [r7]
 8003602:	4960      	ldr	r1, [pc, #384]	; (8003784 <main+0x2a4>)
 8003604:	4856      	ldr	r0, [pc, #344]	; (8003760 <main+0x280>)
 8003606:	f7fd fe93 	bl	8001330 <algorithm_2_update>
		 HAL_UART_Transmit(&huart1, (uint8_t *) dat, 1, 100);
		 HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
	 }
*/

	  if(rocketStatus == STAT_FLIGHT_STARTED)
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <main+0x29c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d102      	bne.n	8003618 <main+0x138>
		  lora_hz = 5;
 8003612:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <main+0x2a8>)
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <main+0x2ac>)
 8003616:	601a      	str	r2, [r3, #0]

	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003618:	f001 ffda 	bl	80055d0 <HAL_GetTick>
 800361c:	ee07 0a90 	vmov	s15, r0
 8003620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003624:	ee17 0a90 	vmov	r0, s15
 8003628:	f7fc ffae 	bl	8000588 <__aeabi_f2d>
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <main+0x2b0>)
 8003632:	f7fd f92b 	bl	800088c <__aeabi_ddiv>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd faf3 	bl	8000c28 <__aeabi_d2f>
 8003642:	4603      	mov	r3, r0
 8003644:	4a53      	ldr	r2, [pc, #332]	; (8003794 <main+0x2b4>)
 8003646:	6013      	str	r3, [r2, #0]

		 if(fabs(currentTime - lastTime) > 0.2)
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <main+0x2b4>)
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	4b52      	ldr	r3, [pc, #328]	; (8003798 <main+0x2b8>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003658:	eef0 7ae7 	vabs.f32	s15, s15
 800365c:	ee17 0a90 	vmov	r0, s15
 8003660:	f7fc ff92 	bl	8000588 <__aeabi_f2d>
 8003664:	a33a      	add	r3, pc, #232	; (adr r3, 8003750 <main+0x270>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fd fa75 	bl	8000b58 <__aeabi_dcmpgt>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <main+0x19c>


			 //sprintf((char*)buf, "teta = %f", teta);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);

			 lastTime = currentTime;
 8003674:	4b47      	ldr	r3, [pc, #284]	; (8003794 <main+0x2b4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a47      	ldr	r2, [pc, #284]	; (8003798 <main+0x2b8>)
 800367a:	6013      	str	r3, [r2, #0]
		 }




		 if(fabs(currentTime - lastTime2) > 5)
 800367c:	4b45      	ldr	r3, [pc, #276]	; (8003794 <main+0x2b4>)
 800367e:	ed93 7a00 	vldr	s14, [r3]
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <main+0x2bc>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	eef0 7ae7 	vabs.f32	s15, s15
 8003690:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	dd03      	ble.n	80036a6 <main+0x1c6>

			 //sprintf((char*)buf, "acc counter: %d  dt:%f\r\n", counterAcc, BMI_sensor.deltaTime);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 //counterAcc = 0;

			 lastTime2 = currentTime;
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <main+0x2b4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3e      	ldr	r2, [pc, #248]	; (800379c <main+0x2bc>)
 80036a4:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <main+0x2c0>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <main+0x1d4>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 80036ae:	483d      	ldr	r0, [pc, #244]	; (80037a4 <main+0x2c4>)
 80036b0:	f001 fd0c 	bl	80050cc <Usr_GpsL86GetValues>
			 //printDatas();
		 }


		 //Lora timer;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 80036b4:	f001 ff8c 	bl	80055d0 <HAL_GetTick>
 80036b8:	ee07 0a90 	vmov	s15, r0
 80036bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c0:	ee17 0a90 	vmov	r0, s15
 80036c4:	f7fc ff60 	bl	8000588 <__aeabi_f2d>
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <main+0x2b0>)
 80036ce:	f7fd f8dd 	bl	800088c <__aeabi_ddiv>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd faa5 	bl	8000c28 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <main+0x2b4>)
 80036e2:	6013      	str	r3, [r2, #0]

		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <main+0x2b4>)
 80036e6:	ed93 7a00 	vldr	s14, [r3]
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <main+0x2c8>)
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f4:	eef0 7ae7 	vabs.f32	s15, s15
 80036f8:	ee17 0a90 	vmov	r0, s15
 80036fc:	f7fc ff44 	bl	8000588 <__aeabi_f2d>
 8003700:	4604      	mov	r4, r0
 8003702:	460d      	mov	r5, r1
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <main+0x2a8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff3d 	bl	8000588 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	4925      	ldr	r1, [pc, #148]	; (80037ac <main+0x2cc>)
 8003718:	f7fd f8b8 	bl	800088c <__aeabi_ddiv>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fd fa18 	bl	8000b58 <__aeabi_dcmpgt>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <main+0x26c>
		 {
			 getWatt();
 800372e:	f000 fbbf 	bl	8003eb0 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, rocketStatus);
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <main+0x29c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <main+0x2a0>)
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <main+0x2c4>)
 800373c:	4908      	ldr	r1, [pc, #32]	; (8003760 <main+0x280>)
 800373e:	4811      	ldr	r0, [pc, #68]	; (8003784 <main+0x2a4>)
 8003740:	f7ff fcb8 	bl	80030b4 <packDatas>
			 //printDatas();
			 loraLastTime = currentTime;
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <main+0x2b4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <main+0x2c8>)
 800374a:	6013      	str	r3, [r2, #0]
  {
 800374c:	e74a      	b.n	80035e4 <main+0x104>
 800374e:	bf00      	nop
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fc99999 	.word	0x3fc99999
 8003758:	40020400 	.word	0x40020400
 800375c:	20000304 	.word	0x20000304
 8003760:	20000598 	.word	0x20000598
 8003764:	08011168 	.word	0x08011168
 8003768:	20000434 	.word	0x20000434
 800376c:	200003ac 	.word	0x200003ac
 8003770:	200004d8 	.word	0x200004d8
 8003774:	20000538 	.word	0x20000538
 8003778:	20000478 	.word	0x20000478
 800377c:	20000004 	.word	0x20000004
 8003780:	2000070c 	.word	0x2000070c
 8003784:	200005f0 	.word	0x200005f0
 8003788:	20000000 	.word	0x20000000
 800378c:	40a00000 	.word	0x40a00000
 8003790:	408f4000 	.word	0x408f4000
 8003794:	2000071c 	.word	0x2000071c
 8003798:	20000720 	.word	0x20000720
 800379c:	20000724 	.word	0x20000724
 80037a0:	20000858 	.word	0x20000858
 80037a4:	200006dc 	.word	0x200006dc
 80037a8:	2000072c 	.word	0x2000072c
 80037ac:	3ff00000 	.word	0x3ff00000

080037b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b094      	sub	sp, #80	; 0x50
 80037b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	2234      	movs	r2, #52	; 0x34
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f006 fd32 	bl	800a228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <SystemClock_Config+0xdc>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a2b      	ldr	r2, [pc, #172]	; (800388c <SystemClock_Config+0xdc>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
 80037e4:	4b29      	ldr	r3, [pc, #164]	; (800388c <SystemClock_Config+0xdc>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f0:	2300      	movs	r3, #0
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <SystemClock_Config+0xe0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <SystemClock_Config+0xe0>)
 80037fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <SystemClock_Config+0xe0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800380c:	2301      	movs	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003816:	2302      	movs	r3, #2
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800381a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003820:	2304      	movs	r3, #4
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003824:	23b4      	movs	r3, #180	; 0xb4
 8003826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003828:	2302      	movs	r3, #2
 800382a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800382c:	2302      	movs	r3, #2
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003830:	2302      	movs	r3, #2
 8003832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4618      	mov	r0, r3
 800383a:	f004 ff19 	bl	8008670 <HAL_RCC_OscConfig>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003844:	f000 fbac 	bl	8003fa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003848:	f004 fb78 	bl	8007f3c <HAL_PWREx_EnableOverDrive>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003852:	f000 fba5 	bl	8003fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003856:	230f      	movs	r3, #15
 8003858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385a:	2302      	movs	r3, #2
 800385c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003862:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	2105      	movs	r1, #5
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fbb1 	bl	8007fdc <HAL_RCC_ClockConfig>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003880:	f000 fb8e 	bl	8003fa0 <Error_Handler>
  }
}
 8003884:	bf00      	nop
 8003886:	3750      	adds	r7, #80	; 0x50
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000

08003894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800389a:	463b      	mov	r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038a6:	4b28      	ldr	r3, [pc, #160]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038a8:	4a28      	ldr	r2, [pc, #160]	; (800394c <MX_ADC1_Init+0xb8>)
 80038aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038bc:	2201      	movs	r2, #1
 80038be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <MX_ADC1_Init+0xbc>)
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038da:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038e2:	2202      	movs	r2, #2
 80038e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038f4:	4814      	ldr	r0, [pc, #80]	; (8003948 <MX_ADC1_Init+0xb4>)
 80038f6:	f001 fe9b 	bl	8005630 <HAL_ADC_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003900:	f000 fb4e 	bl	8003fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003904:	230c      	movs	r3, #12
 8003906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003908:	2301      	movs	r3, #1
 800390a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800390c:	2304      	movs	r3, #4
 800390e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003910:	463b      	mov	r3, r7
 8003912:	4619      	mov	r1, r3
 8003914:	480c      	ldr	r0, [pc, #48]	; (8003948 <MX_ADC1_Init+0xb4>)
 8003916:	f002 f86d 	bl	80059f4 <HAL_ADC_ConfigChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003920:	f000 fb3e 	bl	8003fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003924:	230b      	movs	r3, #11
 8003926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003928:	2302      	movs	r3, #2
 800392a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800392c:	463b      	mov	r3, r7
 800392e:	4619      	mov	r1, r3
 8003930:	4805      	ldr	r0, [pc, #20]	; (8003948 <MX_ADC1_Init+0xb4>)
 8003932:	f002 f85f 	bl	80059f4 <HAL_ADC_ConfigChannel>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800393c:	f000 fb30 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200002bc 	.word	0x200002bc
 800394c:	40012000 	.word	0x40012000
 8003950:	0f000001 	.word	0x0f000001

08003954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <MX_I2C1_Init+0x50>)
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <MX_I2C1_Init+0x54>)
 800395c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003960:	4a12      	ldr	r2, [pc, #72]	; (80039ac <MX_I2C1_Init+0x58>)
 8003962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_I2C1_Init+0x50>)
 800396c:	2200      	movs	r2, #0
 800396e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <MX_I2C1_Init+0x50>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <MX_I2C1_Init+0x50>)
 800398c:	2200      	movs	r2, #0
 800398e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <MX_I2C1_Init+0x50>)
 8003992:	f003 fae3 	bl	8006f5c <HAL_I2C_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800399c:	f000 fb00 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000304 	.word	0x20000304
 80039a8:	40005400 	.word	0x40005400
 80039ac:	000186a0 	.word	0x000186a0

080039b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <MX_I2C3_Init+0x54>)
 80039b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <MX_I2C3_Init+0x58>)
 80039be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80039ec:	4804      	ldr	r0, [pc, #16]	; (8003a00 <MX_I2C3_Init+0x50>)
 80039ee:	f003 fab5 	bl	8006f5c <HAL_I2C_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80039f8:	f000 fad2 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000358 	.word	0x20000358
 8003a04:	40005c00 	.word	0x40005c00
 8003a08:	000186a0 	.word	0x000186a0

08003a0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <MX_UART4_Init+0x50>)
 8003a14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a32:	220c      	movs	r2, #12
 8003a34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <MX_UART4_Init+0x4c>)
 8003a44:	f005 f8b2 	bl	8008bac <HAL_UART_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003a4e:	f000 faa7 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200003ac 	.word	0x200003ac
 8003a5c:	40004c00 	.word	0x40004c00

08003a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <MX_USART1_UART_Init+0x50>)
 8003a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a86:	220c      	movs	r2, #12
 8003a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a96:	4805      	ldr	r0, [pc, #20]	; (8003aac <MX_USART1_UART_Init+0x4c>)
 8003a98:	f005 f888 	bl	8008bac <HAL_UART_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003aa2:	f000 fa7d 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200003f0 	.word	0x200003f0
 8003ab0:	40011000 	.word	0x40011000

08003ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <MX_USART2_UART_Init+0x50>)
 8003abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ada:	220c      	movs	r2, #12
 8003adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aea:	4805      	ldr	r0, [pc, #20]	; (8003b00 <MX_USART2_UART_Init+0x4c>)
 8003aec:	f005 f85e 	bl	8008bac <HAL_UART_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003af6:	f000 fa53 	bl	8003fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000434 	.word	0x20000434
 8003b04:	40004400 	.word	0x40004400

08003b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_DMA_Init+0x78>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	200f      	movs	r0, #15
 8003b4c:	f002 fa7f 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b50:	200f      	movs	r0, #15
 8003b52:	f002 fa98 	bl	8006086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2010      	movs	r0, #16
 8003b5c:	f002 fa77 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b60:	2010      	movs	r0, #16
 8003b62:	f002 fa90 	bl	8006086 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2046      	movs	r0, #70	; 0x46
 8003b6c:	f002 fa6f 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003b70:	2046      	movs	r0, #70	; 0x46
 8003b72:	f002 fa88 	bl	8006086 <HAL_NVIC_EnableIRQ>

}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a46      	ldr	r2, [pc, #280]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a38      	ldr	r2, [pc, #224]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a31      	ldr	r2, [pc, #196]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <MX_GPIO_Init+0x138>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|Led_Pin, GPIO_PIN_RESET);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c10:	482b      	ldr	r0, [pc, #172]	; (8003cc0 <MX_GPIO_Init+0x13c>)
 8003c12:	f003 f957 	bl	8006ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003c1c:	4829      	ldr	r0, [pc, #164]	; (8003cc4 <MX_GPIO_Init+0x140>)
 8003c1e:	f003 f951 	bl	8006ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin Led_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|Led_Pin;
 8003c22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4821      	ldr	r0, [pc, #132]	; (8003cc0 <MX_GPIO_Init+0x13c>)
 8003c3c:	f002 feba 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin;
 8003c40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <MX_GPIO_Init+0x140>)
 8003c5a:	f002 feab 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8003c5e:	2318      	movs	r3, #24
 8003c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4813      	ldr	r0, [pc, #76]	; (8003cc0 <MX_GPIO_Init+0x13c>)
 8003c74:	f002 fe9e 	bl	80069b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480c      	ldr	r0, [pc, #48]	; (8003cc0 <MX_GPIO_Init+0x13c>)
 8003c8e:	f002 fe91 	bl	80069b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2102      	movs	r1, #2
 8003c96:	2009      	movs	r0, #9
 8003c98:	f002 f9d9 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003c9c:	2009      	movs	r0, #9
 8003c9e:	f002 f9f2 	bl	8006086 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	200a      	movs	r0, #10
 8003ca8:	f002 f9d1 	bl	800604e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003cac:	200a      	movs	r0, #10
 8003cae:	f002 f9ea 	bl	8006086 <HAL_NVIC_EnableIRQ>

}
 8003cb2:	bf00      	nop
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800

08003cc8 <bmiBegin>:

/* USER CODE BEGIN 4 */
void bmiBegin()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <bmiBegin+0x3c>)
 8003cce:	2208      	movs	r2, #8
 8003cd0:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <bmiBegin+0x3c>)
 8003cd4:	2209      	movs	r2, #9
 8003cd6:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <bmiBegin+0x3c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <bmiBegin+0x3c>)
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <bmiBegin+0x3c>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <bmiBegin+0x3c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <bmiBegin+0x3c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8003cf6:	4904      	ldr	r1, [pc, #16]	; (8003d08 <bmiBegin+0x40>)
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <bmiBegin+0x3c>)
 8003cfa:	f7fe fab3 	bl	8002264 <bmi088_init>
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200005f0 	.word	0x200005f0
 8003d08:	20000358 	.word	0x20000358

08003d0c <loraBegin>:


void loraBegin()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d16:	481a      	ldr	r0, [pc, #104]	; (8003d80 <loraBegin+0x74>)
 8003d18:	f003 f8d4 	bl	8006ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d22:	4817      	ldr	r0, [pc, #92]	; (8003d80 <loraBegin+0x74>)
 8003d24:	f003 f8ce 	bl	8006ec4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	f001 fc5d 	bl	80055e8 <HAL_Delay>
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <loraBegin+0x78>)
 8003d30:	22e0      	movs	r2, #224	; 0xe0
 8003d32:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <loraBegin+0x78>)
 8003d36:	2206      	movs	r2, #6
 8003d38:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <loraBegin+0x78>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <loraBegin+0x78>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <loraBegin+0x78>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <loraBegin+0x78>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	809a      	strh	r2, [r3, #4]
    e22_lora.channel = 25;
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <loraBegin+0x78>)
 8003d54:	2219      	movs	r2, #25
 8003d56:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 8003d58:	480a      	ldr	r0, [pc, #40]	; (8003d84 <loraBegin+0x78>)
 8003d5a:	f7ff fb4f 	bl	80033fc <lora_configure>
   		 HAL_UART_Transmit(&huart1, (uint8_t *) dat, 1, 100);
   		 HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
   	 }
    }
    */
    HAL_Delay(100);
 8003d5e:	2064      	movs	r0, #100	; 0x64
 8003d60:	f001 fc42 	bl	80055e8 <HAL_Delay>

	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d6a:	4805      	ldr	r0, [pc, #20]	; (8003d80 <loraBegin+0x74>)
 8003d6c:	f003 f8aa 	bl	8006ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d76:	4802      	ldr	r0, [pc, #8]	; (8003d80 <loraBegin+0x74>)
 8003d78:	f003 f8a4 	bl	8006ec4 <HAL_GPIO_WritePin>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40020800 	.word	0x40020800
 8003d84:	200006c8 	.word	0x200006c8

08003d88 <measurePower>:


void measurePower(power *guc_)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	ed2d 8b02 	vpush	{d8}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8003d94:	4840      	ldr	r0, [pc, #256]	; (8003e98 <measurePower+0x110>)
 8003d96:	f001 fc8f 	bl	80056b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003d9a:	210a      	movs	r1, #10
 8003d9c:	483e      	ldr	r0, [pc, #248]	; (8003e98 <measurePower+0x110>)
 8003d9e:	f001 fd90 	bl	80058c2 <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 8003da2:	483d      	ldr	r0, [pc, #244]	; (8003e98 <measurePower+0x110>)
 8003da4:	f001 fe18 	bl	80059d8 <HAL_ADC_GetValue>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003dac:	210a      	movs	r1, #10
 8003dae:	483a      	ldr	r0, [pc, #232]	; (8003e98 <measurePower+0x110>)
 8003db0:	f001 fd87 	bl	80058c2 <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 8003db4:	4838      	ldr	r0, [pc, #224]	; (8003e98 <measurePower+0x110>)
 8003db6:	f001 fe0f 	bl	80059d8 <HAL_ADC_GetValue>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 8003dbe:	4836      	ldr	r0, [pc, #216]	; (8003e98 <measurePower+0x110>)
 8003dc0:	f001 fd4c 	bl	800585c <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003e9c <measurePower+0x114>
 8003dd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dd6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003ea0 <measurePower+0x118>
 8003dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dee:	ee17 0a90 	vmov	r0, s15
 8003df2:	f7fc fbc9 	bl	8000588 <__aeabi_f2d>
 8003df6:	a326      	add	r3, pc, #152	; (adr r3, 8003e90 <measurePower+0x108>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fc1c 	bl	8000638 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <measurePower+0x11c>)
 8003e0e:	f7fc fd3d 	bl	800088c <__aeabi_ddiv>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7fc ff05 	bl	8000c28 <__aeabi_d2f>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003e34:	f001 fbcc 	bl	80055d0 <HAL_GetTick>
 8003e38:	ee07 0a90 	vmov	s15, r0
 8003e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e40:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003ea8 <measurePower+0x120>
 8003e44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <measurePower+0x124>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e52:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8003e66:	f001 fbb3 	bl	80055d0 <HAL_GetTick>
 8003e6a:	ee07 0a90 	vmov	s15, r0
 8003e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e72:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003ea8 <measurePower+0x120>
 8003e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <measurePower+0x124>)
 8003e7c:	edc3 7a00 	vstr	s15, [r3]
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	ecbd 8b02 	vpop	{d8}
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	f3af 8000 	nop.w
 8003e90:	66666666 	.word	0x66666666
 8003e94:	402a6666 	.word	0x402a6666
 8003e98:	200002bc 	.word	0x200002bc
 8003e9c:	454e4000 	.word	0x454e4000
 8003ea0:	45800000 	.word	0x45800000
 8003ea4:	40b00000 	.word	0x40b00000
 8003ea8:	447a0000 	.word	0x447a0000
 8003eac:	20000728 	.word	0x20000728

08003eb0 <getWatt>:

void getWatt()
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 8003eb6:	f001 fb8b 	bl	80055d0 <HAL_GetTick>
 8003eba:	ee07 0a90 	vmov	s15, r0
 8003ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ec2:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003f0c <getWatt+0x5c>
 8003ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eca:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <getWatt+0x60>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003edc:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <getWatt+0x60>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <getWatt+0x64>)
 8003ee8:	edd3 6a02 	vldr	s13, [r3, #8]
 8003eec:	ed97 7a00 	vldr	s14, [r7]
 8003ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <getWatt+0x64>)
 8003ef6:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <getWatt+0x64>)
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	447a0000 	.word	0x447a0000
 8003f10:	20000730 	.word	0x20000730
 8003f14:	2000070c 	.word	0x2000070c

08003f18 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d101      	bne.n	8003f2c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8003f28:	f7fe ffb2 	bl	8002e90 <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d106      	bne.n	8003f40 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 8003f32:	f7fe ff9f 	bl	8002e74 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <HAL_GPIO_EXTI_Callback+0x30>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a02      	ldr	r2, [pc, #8]	; (8003f48 <HAL_GPIO_EXTI_Callback+0x30>)
 8003f3e:	6013      	str	r3, [r2, #0]
    }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000734 	.word	0x20000734

08003f4c <buzz>:

void buzz()
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
	buzzLastTime = HAL_GetTick();
 8003f50:	f001 fb3e 	bl	80055d0 <HAL_GetTick>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <buzz+0x14>)
 8003f58:	6013      	str	r3, [r2, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000738 	.word	0x20000738

08003f64 <buzzUpdate>:

void buzzUpdate()
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - buzzLastTime < 100)
 8003f68:	f001 fb32 	bl	80055d0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <buzzUpdate+0x34>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b63      	cmp	r3, #99	; 0x63
 8003f76:	d806      	bhi.n	8003f86 <buzzUpdate+0x22>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f7e:	4807      	ldr	r0, [pc, #28]	; (8003f9c <buzzUpdate+0x38>)
 8003f80:	f002 ffa0 	bl	8006ec4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8003f84:	e005      	b.n	8003f92 <buzzUpdate+0x2e>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003f86:	2200      	movs	r2, #0
 8003f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f8c:	4803      	ldr	r0, [pc, #12]	; (8003f9c <buzzUpdate+0x38>)
 8003f8e:	f002 ff99 	bl	8006ec4 <HAL_GPIO_WritePin>
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000738 	.word	0x20000738
 8003f9c:	40020400 	.word	0x40020400

08003fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <Error_Handler+0x4c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4911      	ldr	r1, [pc, #68]	; (8003ff0 <Error_Handler+0x50>)
 8003fac:	4811      	ldr	r0, [pc, #68]	; (8003ff4 <Error_Handler+0x54>)
 8003fae:	f006 ffc3 	bl	800af38 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 8003fb2:	4810      	ldr	r0, [pc, #64]	; (8003ff4 <Error_Handler+0x54>)
 8003fb4:	f7fc f92c 	bl	8000210 <strlen>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	23fa      	movs	r3, #250	; 0xfa
 8003fbe:	490d      	ldr	r1, [pc, #52]	; (8003ff4 <Error_Handler+0x54>)
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <Error_Handler+0x58>)
 8003fc2:	f004 fe6f 	bl	8008ca4 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fca:	480c      	ldr	r0, [pc, #48]	; (8003ffc <Error_Handler+0x5c>)
 8003fcc:	f002 ff93 	bl	8006ef6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	f001 fb09 	bl	80055e8 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fda:	4808      	ldr	r0, [pc, #32]	; (8003ffc <Error_Handler+0x5c>)
 8003fdc:	f002 ff8b 	bl	8006ef6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003fe0:	2064      	movs	r0, #100	; 0x64
 8003fe2:	f001 fb01 	bl	80055e8 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe6:	b672      	cpsid	i
}
 8003fe8:	bf00      	nop

	__disable_irq();
  while (1)
 8003fea:	e7fe      	b.n	8003fea <Error_Handler+0x4a>
 8003fec:	20000228 	.word	0x20000228
 8003ff0:	0801117c 	.word	0x0801117c
 8003ff4:	2000073c 	.word	0x2000073c
 8003ff8:	200003f0 	.word	0x200003f0
 8003ffc:	40020400 	.word	0x40020400

08004000 <updateQuaternion>:
#include "math.h"

static float q[4];
float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	ed87 0a03 	vstr	s0, [r7, #12]
 800400a:	edc7 0a02 	vstr	s1, [r7, #8]
 800400e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004012:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8004016:	4b8d      	ldr	r3, [pc, #564]	; (800424c <updateQuaternion+0x24c>)
 8004018:	edd3 7a01 	vldr	s15, [r3, #4]
 800401c:	eeb1 7a67 	vneg.f32	s14, s15
 8004020:	edd7 7a03 	vldr	s15, [r7, #12]
 8004024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004028:	4b88      	ldr	r3, [pc, #544]	; (800424c <updateQuaternion+0x24c>)
 800402a:	edd3 6a02 	vldr	s13, [r3, #8]
 800402e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800403a:	4b84      	ldr	r3, [pc, #528]	; (800424c <updateQuaternion+0x24c>)
 800403c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004040:	edd7 7a01 	vldr	s15, [r7, #4]
 8004044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004054:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (q[0] * gx + q[2] * gz - q[3] * gy);
 8004058:	4b7c      	ldr	r3, [pc, #496]	; (800424c <updateQuaternion+0x24c>)
 800405a:	ed93 7a00 	vldr	s14, [r3]
 800405e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004066:	4b79      	ldr	r3, [pc, #484]	; (800424c <updateQuaternion+0x24c>)
 8004068:	edd3 6a02 	vldr	s13, [r3, #8]
 800406c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004078:	4b74      	ldr	r3, [pc, #464]	; (800424c <updateQuaternion+0x24c>)
 800407a:	edd3 6a03 	vldr	s13, [r3, #12]
 800407e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800408e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004092:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (q[0] * gy - q[1] * gz + q[3] * gx);
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <updateQuaternion+0x24c>)
 8004098:	ed93 7a00 	vldr	s14, [r3]
 800409c:	edd7 7a02 	vldr	s15, [r7, #8]
 80040a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <updateQuaternion+0x24c>)
 80040a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80040aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <updateQuaternion+0x24c>)
 80040b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80040bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80040c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040d0:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (q[0] * gz + q[1] * gy - q[2] * gx);
 80040d4:	4b5d      	ldr	r3, [pc, #372]	; (800424c <updateQuaternion+0x24c>)
 80040d6:	ed93 7a00 	vldr	s14, [r3]
 80040da:	edd7 7a01 	vldr	s15, [r7, #4]
 80040de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e2:	4b5a      	ldr	r3, [pc, #360]	; (800424c <updateQuaternion+0x24c>)
 80040e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80040e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040f4:	4b55      	ldr	r3, [pc, #340]	; (800424c <updateQuaternion+0x24c>)
 80040f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80040fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004106:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800410a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410e:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  q[0] += qDot1 * dt;
 8004112:	4b4e      	ldr	r3, [pc, #312]	; (800424c <updateQuaternion+0x24c>)
 8004114:	ed93 7a00 	vldr	s14, [r3]
 8004118:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800411c:	edd7 7a00 	vldr	s15, [r7]
 8004120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004128:	4b48      	ldr	r3, [pc, #288]	; (800424c <updateQuaternion+0x24c>)
 800412a:	edc3 7a00 	vstr	s15, [r3]
  q[1] += qDot2 * dt;
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <updateQuaternion+0x24c>)
 8004130:	ed93 7a01 	vldr	s14, [r3, #4]
 8004134:	edd7 6a08 	vldr	s13, [r7, #32]
 8004138:	edd7 7a00 	vldr	s15, [r7]
 800413c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004144:	4b41      	ldr	r3, [pc, #260]	; (800424c <updateQuaternion+0x24c>)
 8004146:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += qDot3 * dt;
 800414a:	4b40      	ldr	r3, [pc, #256]	; (800424c <updateQuaternion+0x24c>)
 800414c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004150:	edd7 6a07 	vldr	s13, [r7, #28]
 8004154:	edd7 7a00 	vldr	s15, [r7]
 8004158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004160:	4b3a      	ldr	r3, [pc, #232]	; (800424c <updateQuaternion+0x24c>)
 8004162:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += qDot4 * dt;
 8004166:	4b39      	ldr	r3, [pc, #228]	; (800424c <updateQuaternion+0x24c>)
 8004168:	ed93 7a03 	vldr	s14, [r3, #12]
 800416c:	edd7 6a06 	vldr	s13, [r7, #24]
 8004170:	edd7 7a00 	vldr	s15, [r7]
 8004174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <updateQuaternion+0x24c>)
 800417e:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalize quaternion to prevent drift
  float norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004182:	4b32      	ldr	r3, [pc, #200]	; (800424c <updateQuaternion+0x24c>)
 8004184:	ed93 7a00 	vldr	s14, [r3]
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <updateQuaternion+0x24c>)
 800418a:	edd3 7a00 	vldr	s15, [r3]
 800418e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <updateQuaternion+0x24c>)
 8004194:	edd3 6a01 	vldr	s13, [r3, #4]
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <updateQuaternion+0x24c>)
 800419a:	edd3 7a01 	vldr	s15, [r3, #4]
 800419e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a6:	4b29      	ldr	r3, [pc, #164]	; (800424c <updateQuaternion+0x24c>)
 80041a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <updateQuaternion+0x24c>)
 80041ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80041b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <updateQuaternion+0x24c>)
 80041bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <updateQuaternion+0x24c>)
 80041c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80041c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	ee17 0a90 	vmov	r0, s15
 80041d2:	f7fc f9d9 	bl	8000588 <__aeabi_f2d>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	ec43 2b10 	vmov	d0, r2, r3
 80041de:	f00b f9cb 	bl	800f578 <sqrt>
 80041e2:	ec53 2b10 	vmov	r2, r3, d0
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	f7fc fd1d 	bl	8000c28 <__aeabi_d2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	617b      	str	r3, [r7, #20]
  q[0] /= norm;
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <updateQuaternion+0x24c>)
 80041f4:	edd3 6a00 	vldr	s13, [r3]
 80041f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80041fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <updateQuaternion+0x24c>)
 8004202:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <updateQuaternion+0x24c>)
 8004208:	edd3 6a01 	vldr	s13, [r3, #4]
 800420c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <updateQuaternion+0x24c>)
 8004216:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <updateQuaternion+0x24c>)
 800421c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004220:	ed97 7a05 	vldr	s14, [r7, #20]
 8004224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <updateQuaternion+0x24c>)
 800422a:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <updateQuaternion+0x24c>)
 8004230:	edd3 6a03 	vldr	s13, [r3, #12]
 8004234:	ed97 7a05 	vldr	s14, [r7, #20]
 8004238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <updateQuaternion+0x24c>)
 800423e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000838 	.word	0x20000838

08004250 <quaternionToEuler>:

void quaternionToEuler(void) {
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), 1.0f - 2.0f * (q[1] * q[1] + q[2] * q[2])) * (180.0 / M_PI);
 8004254:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004256:	ed93 7a00 	vldr	s14, [r3]
 800425a:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <quaternionToEuler+0x1a8>)
 800425c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004264:	4b64      	ldr	r3, [pc, #400]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004266:	edd3 6a02 	vldr	s13, [r3, #8]
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <quaternionToEuler+0x1a8>)
 800426c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004278:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800427c:	ee17 0a90 	vmov	r0, s15
 8004280:	f7fc f982 	bl	8000588 <__aeabi_f2d>
 8004284:	4604      	mov	r4, r0
 8004286:	460d      	mov	r5, r1
 8004288:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <quaternionToEuler+0x1a8>)
 800428a:	ed93 7a01 	vldr	s14, [r3, #4]
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004290:	edd3 7a01 	vldr	s15, [r3, #4]
 8004294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004298:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <quaternionToEuler+0x1a8>)
 800429a:	edd3 6a02 	vldr	s13, [r3, #8]
 800429e:	4b56      	ldr	r3, [pc, #344]	; (80043f8 <quaternionToEuler+0x1a8>)
 80042a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80042a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042b8:	ee17 0a90 	vmov	r0, s15
 80042bc:	f7fc f964 	bl	8000588 <__aeabi_f2d>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	ec43 2b11 	vmov	d1, r2, r3
 80042c8:	ec45 4b10 	vmov	d0, r4, r5
 80042cc:	f00b f8e2 	bl	800f494 <atan2>
 80042d0:	ec51 0b10 	vmov	r0, r1, d0
 80042d4:	a346      	add	r3, pc, #280	; (adr r3, 80043f0 <quaternionToEuler+0x1a0>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc f9ad 	bl	8000638 <__aeabi_dmul>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f7fc fc9f 	bl	8000c28 <__aeabi_d2f>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a43      	ldr	r2, [pc, #268]	; (80043fc <quaternionToEuler+0x1ac>)
 80042ee:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (q[0] * q[2] - q[3] * q[1])) * (180.0 / M_PI);
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <quaternionToEuler+0x1a8>)
 80042f2:	ed93 7a00 	vldr	s14, [r3]
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <quaternionToEuler+0x1a8>)
 80042f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80042fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004300:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004302:	edd3 6a03 	vldr	s13, [r3, #12]
 8004306:	4b3c      	ldr	r3, [pc, #240]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004308:	edd3 7a01 	vldr	s15, [r3, #4]
 800430c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004318:	ee17 0a90 	vmov	r0, s15
 800431c:	f7fc f934 	bl	8000588 <__aeabi_f2d>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	ec43 2b10 	vmov	d0, r2, r3
 8004328:	f00b f880 	bl	800f42c <asin>
 800432c:	ec51 0b10 	vmov	r0, r1, d0
 8004330:	a32f      	add	r3, pc, #188	; (adr r3, 80043f0 <quaternionToEuler+0x1a0>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc f97f 	bl	8000638 <__aeabi_dmul>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fc71 	bl	8000c28 <__aeabi_d2f>
 8004346:	4603      	mov	r3, r0
 8004348:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <quaternionToEuler+0x1ac>)
 800434a:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (q[0] * q[3] + q[1] * q[2]), 1.0f - 2.0f * (q[2] * q[2] + q[3] * q[3])) * (180.0 / M_PI);
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <quaternionToEuler+0x1a8>)
 800434e:	ed93 7a00 	vldr	s14, [r3]
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004354:	edd3 7a03 	vldr	s15, [r3, #12]
 8004358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800435c:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <quaternionToEuler+0x1a8>)
 800435e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004364:	edd3 7a02 	vldr	s15, [r3, #8]
 8004368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800436c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004370:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004374:	ee17 0a90 	vmov	r0, s15
 8004378:	f7fc f906 	bl	8000588 <__aeabi_f2d>
 800437c:	4604      	mov	r4, r0
 800437e:	460d      	mov	r5, r1
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004382:	ed93 7a02 	vldr	s14, [r3, #8]
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004388:	edd3 7a02 	vldr	s15, [r3, #8]
 800438c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004392:	edd3 6a03 	vldr	s13, [r3, #12]
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <quaternionToEuler+0x1a8>)
 8004398:	edd3 7a03 	vldr	s15, [r3, #12]
 800439c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b0:	ee17 0a90 	vmov	r0, s15
 80043b4:	f7fc f8e8 	bl	8000588 <__aeabi_f2d>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	ec43 2b11 	vmov	d1, r2, r3
 80043c0:	ec45 4b10 	vmov	d0, r4, r5
 80043c4:	f00b f866 	bl	800f494 <atan2>
 80043c8:	ec51 0b10 	vmov	r0, r1, d0
 80043cc:	a308      	add	r3, pc, #32	; (adr r3, 80043f0 <quaternionToEuler+0x1a0>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc f931 	bl	8000638 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f7fc fc23 	bl	8000c28 <__aeabi_d2f>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4a05      	ldr	r2, [pc, #20]	; (80043fc <quaternionToEuler+0x1ac>)
 80043e6:	6093      	str	r3, [r2, #8]
}
 80043e8:	bf00      	nop
 80043ea:	bdb0      	pop	{r4, r5, r7, pc}
 80043ec:	f3af 8000 	nop.w
 80043f0:	1a63c1f8 	.word	0x1a63c1f8
 80043f4:	404ca5dc 	.word	0x404ca5dc
 80043f8:	20000838 	.word	0x20000838
 80043fc:	20000848 	.word	0x20000848

08004400 <quaternionToTheta>:


float quaternionToTheta(){
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 800440c:	4b54      	ldr	r3, [pc, #336]	; (8004560 <quaternionToTheta+0x160>)
 800440e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004412:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004416:	4b52      	ldr	r3, [pc, #328]	; (8004560 <quaternionToTheta+0x160>)
 8004418:	edd3 7a03 	vldr	s15, [r3, #12]
 800441c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004420:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <quaternionToTheta+0x160>)
 8004422:	edd3 7a02 	vldr	s15, [r3, #8]
 8004426:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800442a:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <quaternionToTheta+0x160>)
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800443c:	4b48      	ldr	r3, [pc, #288]	; (8004560 <quaternionToTheta+0x160>)
 800443e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004442:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004446:	4b46      	ldr	r3, [pc, #280]	; (8004560 <quaternionToTheta+0x160>)
 8004448:	edd3 7a03 	vldr	s15, [r3, #12]
 800444c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <quaternionToTheta+0x160>)
 8004452:	edd3 7a01 	vldr	s15, [r3, #4]
 8004456:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <quaternionToTheta+0x160>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004468:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800446c:	4b3c      	ldr	r3, [pc, #240]	; (8004560 <quaternionToTheta+0x160>)
 800446e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004472:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004476:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <quaternionToTheta+0x160>)
 8004478:	edd3 7a01 	vldr	s15, [r3, #4]
 800447c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <quaternionToTheta+0x160>)
 800448a:	edd3 7a02 	vldr	s15, [r3, #8]
 800448e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <quaternionToTheta+0x160>)
 8004494:	edd3 7a02 	vldr	s15, [r3, #8]
 8004498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a0:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 80044b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80044c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d4:	ee17 0a90 	vmov	r0, s15
 80044d8:	f7fc f856 	bl	8000588 <__aeabi_f2d>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	ec43 2b10 	vmov	d0, r2, r3
 80044e4:	f00b f848 	bl	800f578 <sqrt>
 80044e8:	ec53 2b10 	vmov	r2, r3, d0
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb9a 	bl	8000c28 <__aeabi_d2f>
 80044f4:	4603      	mov	r3, r0
 80044f6:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 80044f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80044fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004500:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004504:	ee16 0a90 	vmov	r0, s13
 8004508:	f7fc f83e 	bl	8000588 <__aeabi_f2d>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	ec43 2b10 	vmov	d0, r2, r3
 8004514:	f00a ff56 	bl	800f3c4 <acos>
 8004518:	ec51 0b10 	vmov	r0, r1, d0
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <quaternionToTheta+0x164>)
 8004522:	f7fc f889 	bl	8000638 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	a30a      	add	r3, pc, #40	; (adr r3, 8004558 <quaternionToTheta+0x158>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc f9aa 	bl	800088c <__aeabi_ddiv>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	f7fc fb72 	bl	8000c28 <__aeabi_d2f>
 8004544:	4603      	mov	r3, r0
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	ee07 3a90 	vmov	s15, r3
}
 800454e:	eeb0 0a67 	vmov.f32	s0, s15
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	51eb851f 	.word	0x51eb851f
 800455c:	40091eb8 	.word	0x40091eb8
 8004560:	20000838 	.word	0x20000838
 8004564:	40668000 	.word	0x40668000

08004568 <getInitialQuaternion>:



// İvmeölçerden başlangıç quaternioni hesaplama
static void getInitialQuaternion() {
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b092      	sub	sp, #72	; 0x48
 800456c:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 800456e:	4b97      	ldr	r3, [pc, #604]	; (80047cc <getInitialQuaternion+0x264>)
 8004570:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8004574:	4b95      	ldr	r3, [pc, #596]	; (80047cc <getInitialQuaternion+0x264>)
 8004576:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800457a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800457e:	4b93      	ldr	r3, [pc, #588]	; (80047cc <getInitialQuaternion+0x264>)
 8004580:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8004584:	4b91      	ldr	r3, [pc, #580]	; (80047cc <getInitialQuaternion+0x264>)
 8004586:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800458a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800458e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004592:	4b8e      	ldr	r3, [pc, #568]	; (80047cc <getInitialQuaternion+0x264>)
 8004594:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004598:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <getInitialQuaternion+0x264>)
 800459a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800459e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a6:	ee17 0a90 	vmov	r0, s15
 80045aa:	f7fb ffed 	bl	8000588 <__aeabi_f2d>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	ec43 2b10 	vmov	d0, r2, r3
 80045b6:	f00a ffdf 	bl	800f578 <sqrt>
 80045ba:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 80045be:	4b83      	ldr	r3, [pc, #524]	; (80047cc <getInitialQuaternion+0x264>)
 80045c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb ffdf 	bl	8000588 <__aeabi_f2d>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 80045d2:	4b7e      	ldr	r3, [pc, #504]	; (80047cc <getInitialQuaternion+0x264>)
 80045d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb ffd5 	bl	8000588 <__aeabi_f2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 80045e6:	4b79      	ldr	r3, [pc, #484]	; (80047cc <getInitialQuaternion+0x264>)
 80045e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ffcb 	bl	8000588 <__aeabi_f2d>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 80045fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004602:	f7fc f943 	bl	800088c <__aeabi_ddiv>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800460e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004616:	f7fc f939 	bl	800088c <__aeabi_ddiv>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 8004622:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800462a:	f7fc f92f 	bl	800088c <__aeabi_ddiv>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8004636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	4964      	ldr	r1, [pc, #400]	; (80047d0 <getInitialQuaternion+0x268>)
 8004640:	f7fb fe42 	bl	80002c8 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	ec43 2b17 	vmov	d7, r2, r3
 800464c:	eeb0 0a47 	vmov.f32	s0, s14
 8004650:	eef0 0a67 	vmov.f32	s1, s15
 8004654:	f00a ff90 	bl	800f578 <sqrt>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	4b5c      	ldr	r3, [pc, #368]	; (80047d4 <getInitialQuaternion+0x26c>)
 8004662:	f7fb ffe9 	bl	8000638 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800466e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	4957      	ldr	r1, [pc, #348]	; (80047d4 <getInitialQuaternion+0x26c>)
 8004678:	f7fc f908 	bl	800088c <__aeabi_ddiv>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8004684:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800468c:	f7fb ffd4 	bl	8000638 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	4b4d      	ldr	r3, [pc, #308]	; (80047d4 <getInitialQuaternion+0x26c>)
 800469e:	f7fb ffcb 	bl	8000638 <__aeabi_dmul>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80046aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b2:	f7fb ffc1 	bl	8000638 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	4b44      	ldr	r3, [pc, #272]	; (80047d4 <getInitialQuaternion+0x26c>)
 80046c4:	f7fb ffb8 	bl	8000638 <__aeabi_dmul>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80046dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e4:	f7fb ffa8 	bl	8000638 <__aeabi_dmul>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f8:	f7fb ff9e 	bl	8000638 <__aeabi_dmul>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	f7fb fde2 	bl	80002cc <__adddf3>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004714:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004718:	f7fb ff8e 	bl	8000638 <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4620      	mov	r0, r4
 8004722:	4629      	mov	r1, r5
 8004724:	f7fb fdd2 	bl	80002cc <__adddf3>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4614      	mov	r4, r2
 800472e:	461d      	mov	r5, r3
 8004730:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004738:	f7fb ff7e 	bl	8000638 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fdc2 	bl	80002cc <__adddf3>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	ec43 2b17 	vmov	d7, r2, r3
 8004750:	eeb0 0a47 	vmov.f32	s0, s14
 8004754:	eef0 0a67 	vmov.f32	s1, s15
 8004758:	f00a ff0e 	bl	800f578 <sqrt>
 800475c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    q[0] = q_temp[0] / norm;
 8004760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004768:	f7fc f890 	bl	800088c <__aeabi_ddiv>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f7fc fa58 	bl	8000c28 <__aeabi_d2f>
 8004778:	4603      	mov	r3, r0
 800477a:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <getInitialQuaternion+0x270>)
 800477c:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 800477e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004786:	f7fc f881 	bl	800088c <__aeabi_ddiv>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	f7fc fa49 	bl	8000c28 <__aeabi_d2f>
 8004796:	4603      	mov	r3, r0
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <getInitialQuaternion+0x270>)
 800479a:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 800479c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a4:	f7fc f872 	bl	800088c <__aeabi_ddiv>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fc fa3a 	bl	8000c28 <__aeabi_d2f>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <getInitialQuaternion+0x270>)
 80047b8:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <getInitialQuaternion+0x270>)
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	60da      	str	r2, [r3, #12]
}
 80047c2:	bf00      	nop
 80047c4:	3748      	adds	r7, #72	; 0x48
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200005f0 	.word	0x200005f0
 80047d0:	3ff00000 	.word	0x3ff00000
 80047d4:	3fe00000 	.word	0x3fe00000
 80047d8:	20000838 	.word	0x20000838

080047dc <quaternionSet_zero>:



void quaternionSet_zero(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	getInitialQuaternion();
 80047e0:	f7ff fec2 	bl	8004568 <getInitialQuaternion>
}
 80047e4:	bf00      	nop
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_MspInit+0x4c>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <HAL_MspInit+0x4c>)
 80047f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_MspInit+0x4c>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_MspInit+0x4c>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_MspInit+0x4c>)
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_MspInit+0x4c>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_ADC_MspInit+0x7c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d127      	bne.n	80048aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_ADC_MspInit+0x80>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8004892:	2306      	movs	r3, #6
 8004894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004896:	2303      	movs	r3, #3
 8004898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	4805      	ldr	r0, [pc, #20]	; (80048bc <HAL_ADC_MspInit+0x84>)
 80048a6:	f002 f885 	bl	80069b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048aa:	bf00      	nop
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40012000 	.word	0x40012000
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020800 	.word	0x40020800

080048c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a42      	ldr	r2, [pc, #264]	; (80049e8 <HAL_I2C_MspInit+0x128>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12c      	bne.n	800493c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a40      	ldr	r2, [pc, #256]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048fe:	23c0      	movs	r3, #192	; 0xc0
 8004900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004902:	2312      	movs	r3, #18
 8004904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800490e:	2304      	movs	r3, #4
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004912:	f107 031c 	add.w	r3, r7, #28
 8004916:	4619      	mov	r1, r3
 8004918:	4835      	ldr	r0, [pc, #212]	; (80049f0 <HAL_I2C_MspInit+0x130>)
 800491a:	f002 f84b 	bl	80069b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a31      	ldr	r2, [pc, #196]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800493a:	e050      	b.n	80049de <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <HAL_I2C_MspInit+0x134>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d14b      	bne.n	80049de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	6313      	str	r3, [r2, #48]	; 0x30
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6313      	str	r3, [r2, #48]	; 0x30
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800497e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004984:	2312      	movs	r3, #18
 8004986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498c:	2303      	movs	r3, #3
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004990:	2304      	movs	r3, #4
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004994:	f107 031c 	add.w	r3, r7, #28
 8004998:	4619      	mov	r1, r3
 800499a:	4817      	ldr	r0, [pc, #92]	; (80049f8 <HAL_I2C_MspInit+0x138>)
 800499c:	f002 f80a 	bl	80069b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a6:	2312      	movs	r3, #18
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ae:	2303      	movs	r3, #3
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80049b2:	2304      	movs	r3, #4
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b6:	f107 031c 	add.w	r3, r7, #28
 80049ba:	4619      	mov	r1, r3
 80049bc:	480f      	ldr	r0, [pc, #60]	; (80049fc <HAL_I2C_MspInit+0x13c>)
 80049be:	f001 fff9 	bl	80069b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80049cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_I2C_MspInit+0x12c>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
}
 80049de:	bf00      	nop
 80049e0:	3730      	adds	r7, #48	; 0x30
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40005400 	.word	0x40005400
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020400 	.word	0x40020400
 80049f4:	40005c00 	.word	0x40005c00
 80049f8:	40020800 	.word	0x40020800
 80049fc:	40020000 	.word	0x40020000

08004a00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <HAL_I2C_MspDeInit+0x64>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10e      	bne.n	8004a30 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_I2C_MspDeInit+0x68>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <HAL_I2C_MspDeInit+0x68>)
 8004a18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	4812      	ldr	r0, [pc, #72]	; (8004a6c <HAL_I2C_MspDeInit+0x6c>)
 8004a22:	f002 f95b 	bl	8006cdc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	4810      	ldr	r0, [pc, #64]	; (8004a6c <HAL_I2C_MspDeInit+0x6c>)
 8004a2a:	f002 f957 	bl	8006cdc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004a2e:	e014      	b.n	8004a5a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_I2C_MspDeInit+0x70>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10f      	bne.n	8004a5a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_I2C_MspDeInit+0x68>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <HAL_I2C_MspDeInit+0x68>)
 8004a40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8004a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a4a:	480a      	ldr	r0, [pc, #40]	; (8004a74 <HAL_I2C_MspDeInit+0x74>)
 8004a4c:	f002 f946 	bl	8006cdc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a54:	4808      	ldr	r0, [pc, #32]	; (8004a78 <HAL_I2C_MspDeInit+0x78>)
 8004a56:	f002 f941 	bl	8006cdc <HAL_GPIO_DeInit>
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40005400 	.word	0x40005400
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40020400 	.word	0x40020400
 8004a70:	40005c00 	.word	0x40005c00
 8004a74:	40020800 	.word	0x40020800
 8004a78:	40020000 	.word	0x40020000

08004a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08e      	sub	sp, #56	; 0x38
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a9c      	ldr	r2, [pc, #624]	; (8004d0c <HAL_UART_MspInit+0x290>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d162      	bne.n	8004b64 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	4a9a      	ldr	r2, [pc, #616]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
 8004aae:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	4b94      	ldr	r3, [pc, #592]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a93      	ldr	r2, [pc, #588]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b91      	ldr	r3, [pc, #580]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ada:	2302      	movs	r3, #2
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aee:	4619      	mov	r1, r3
 8004af0:	4888      	ldr	r0, [pc, #544]	; (8004d14 <HAL_UART_MspInit+0x298>)
 8004af2:	f001 ff5f 	bl	80069b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004af8:	4a88      	ldr	r2, [pc, #544]	; (8004d1c <HAL_UART_MspInit+0x2a0>)
 8004afa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004afc:	4b86      	ldr	r3, [pc, #536]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b02:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b04:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b06:	2240      	movs	r2, #64	; 0x40
 8004b08:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0a:	4b83      	ldr	r3, [pc, #524]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b10:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b16:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b18:	4b7f      	ldr	r3, [pc, #508]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b1e:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004b24:	4b7c      	ldr	r3, [pc, #496]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b2a:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b30:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004b36:	4878      	ldr	r0, [pc, #480]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b38:	f001 face 	bl	80060d8 <HAL_DMA_Init>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004b42:	f7ff fa2d 	bl	8003fa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a73      	ldr	r2, [pc, #460]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b4c:	4a72      	ldr	r2, [pc, #456]	; (8004d18 <HAL_UART_MspInit+0x29c>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b52:	2200      	movs	r2, #0
 8004b54:	2100      	movs	r1, #0
 8004b56:	2034      	movs	r0, #52	; 0x34
 8004b58:	f001 fa79 	bl	800604e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b5c:	2034      	movs	r0, #52	; 0x34
 8004b5e:	f001 fa92 	bl	8006086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b62:	e0cf      	b.n	8004d04 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a6d      	ldr	r2, [pc, #436]	; (8004d20 <HAL_UART_MspInit+0x2a4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d163      	bne.n	8004c36 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	4a66      	ldr	r2, [pc, #408]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b7e:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a5f      	ldr	r2, [pc, #380]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ba6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bac:	2302      	movs	r3, #2
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bb8:	2307      	movs	r3, #7
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4854      	ldr	r0, [pc, #336]	; (8004d14 <HAL_UART_MspInit+0x298>)
 8004bc4:	f001 fef6 	bl	80069b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004bc8:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bca:	4a57      	ldr	r2, [pc, #348]	; (8004d28 <HAL_UART_MspInit+0x2ac>)
 8004bcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004bce:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bd6:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bd8:	2240      	movs	r2, #64	; 0x40
 8004bda:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bdc:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004be2:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bea:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bf0:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c02:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c08:	4846      	ldr	r0, [pc, #280]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004c0a:	f001 fa65 	bl	80060d8 <HAL_DMA_Init>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004c14:	f7ff f9c4 	bl	8003fa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a42      	ldr	r2, [pc, #264]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c1e:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <HAL_UART_MspInit+0x2a8>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	2025      	movs	r0, #37	; 0x25
 8004c2a:	f001 fa10 	bl	800604e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c2e:	2025      	movs	r0, #37	; 0x25
 8004c30:	f001 fa29 	bl	8006086 <HAL_NVIC_EnableIRQ>
}
 8004c34:	e066      	b.n	8004d04 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <HAL_UART_MspInit+0x2b0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d161      	bne.n	8004d04 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	4a31      	ldr	r2, [pc, #196]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c50:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <HAL_UART_MspInit+0x294>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c78:	230c      	movs	r3, #12
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c88:	2307      	movs	r3, #7
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c90:	4619      	mov	r1, r3
 8004c92:	4820      	ldr	r0, [pc, #128]	; (8004d14 <HAL_UART_MspInit+0x298>)
 8004c94:	f001 fe8e 	bl	80069b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004c9a:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <HAL_UART_MspInit+0x2b8>)
 8004c9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ca4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca6:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cac:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cd2:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cd8:	4815      	ldr	r0, [pc, #84]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cda:	f001 f9fd 	bl	80060d8 <HAL_DMA_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8004ce4:	f7ff f95c 	bl	8003fa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a11      	ldr	r2, [pc, #68]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <HAL_UART_MspInit+0x2b4>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	2026      	movs	r0, #38	; 0x26
 8004cfa:	f001 f9a8 	bl	800604e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cfe:	2026      	movs	r0, #38	; 0x26
 8004d00:	f001 f9c1 	bl	8006086 <HAL_NVIC_EnableIRQ>
}
 8004d04:	bf00      	nop
 8004d06:	3738      	adds	r7, #56	; 0x38
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40020000 	.word	0x40020000
 8004d18:	20000478 	.word	0x20000478
 8004d1c:	40026070 	.word	0x40026070
 8004d20:	40011000 	.word	0x40011000
 8004d24:	200004d8 	.word	0x200004d8
 8004d28:	400264b8 	.word	0x400264b8
 8004d2c:	40004400 	.word	0x40004400
 8004d30:	20000538 	.word	0x20000538
 8004d34:	40026088 	.word	0x40026088

08004d38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <HAL_UART_MspDeInit+0xa0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d112      	bne.n	8004d70 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004d50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004d56:	2103      	movs	r1, #3
 8004d58:	4821      	ldr	r0, [pc, #132]	; (8004de0 <HAL_UART_MspDeInit+0xa8>)
 8004d5a:	f001 ffbf 	bl	8006cdc <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fa66 	bl	8006234 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004d68:	2034      	movs	r0, #52	; 0x34
 8004d6a:	f001 f99a 	bl	80060a2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004d6e:	e02f      	b.n	8004dd0 <HAL_UART_MspDeInit+0x98>
  else if(huart->Instance==USART1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <HAL_UART_MspDeInit+0xac>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004d7a:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004d86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d8a:	4815      	ldr	r0, [pc, #84]	; (8004de0 <HAL_UART_MspDeInit+0xa8>)
 8004d8c:	f001 ffa6 	bl	8006cdc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fa4d 	bl	8006234 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004d9a:	2025      	movs	r0, #37	; 0x25
 8004d9c:	f001 f981 	bl	80060a2 <HAL_NVIC_DisableIRQ>
}
 8004da0:	e016      	b.n	8004dd0 <HAL_UART_MspDeInit+0x98>
  else if(huart->Instance==USART2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_UART_MspDeInit+0xb0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d111      	bne.n	8004dd0 <HAL_UART_MspDeInit+0x98>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_UART_MspDeInit+0xa4>)
 8004db2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004db6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004db8:	210c      	movs	r1, #12
 8004dba:	4809      	ldr	r0, [pc, #36]	; (8004de0 <HAL_UART_MspDeInit+0xa8>)
 8004dbc:	f001 ff8e 	bl	8006cdc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fa35 	bl	8006234 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004dca:	2026      	movs	r0, #38	; 0x26
 8004dcc:	f001 f969 	bl	80060a2 <HAL_NVIC_DisableIRQ>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40004c00 	.word	0x40004c00
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40020000 	.word	0x40020000
 8004de4:	40011000 	.word	0x40011000
 8004de8:	40004400 	.word	0x40004400

08004dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <NMI_Handler+0x4>

08004df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df6:	e7fe      	b.n	8004df6 <HardFault_Handler+0x4>

08004df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <MemManage_Handler+0x4>

08004dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e02:	e7fe      	b.n	8004e02 <BusFault_Handler+0x4>

08004e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <UsageFault_Handler+0x4>

08004e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e38:	f000 fbb6 	bl	80055a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8004e44:	2008      	movs	r0, #8
 8004e46:	f002 f871 	bl	8006f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8004e52:	2010      	movs	r0, #16
 8004e54:	f002 f86a 	bl	8006f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004e58:	bf00      	nop
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <DMA1_Stream4_IRQHandler+0x10>)
 8004e62:	f001 fb2f 	bl	80064c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000478 	.word	0x20000478

08004e70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <DMA1_Stream5_IRQHandler+0x10>)
 8004e76:	f001 fb25 	bl	80064c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000538 	.word	0x20000538

08004e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e88:	4802      	ldr	r0, [pc, #8]	; (8004e94 <USART1_IRQHandler+0x10>)
 8004e8a:	f004 f84b 	bl	8008f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200003f0 	.word	0x200003f0

08004e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e9c:	4802      	ldr	r0, [pc, #8]	; (8004ea8 <USART2_IRQHandler+0x10>)
 8004e9e:	f004 f841 	bl	8008f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000434 	.word	0x20000434

08004eac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <UART4_IRQHandler+0x10>)
 8004eb2:	f004 f837 	bl	8008f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200003ac 	.word	0x200003ac

08004ec0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ec4:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <DMA2_Stream7_IRQHandler+0x10>)
 8004ec6:	f001 fafd 	bl	80064c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200004d8 	.word	0x200004d8

08004ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
	return 1;
 8004ed8:	2301      	movs	r3, #1
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_kill>:

int _kill(int pid, int sig)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004eee:	f005 f971 	bl	800a1d4 <__errno>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2216      	movs	r2, #22
 8004ef6:	601a      	str	r2, [r3, #0]
	return -1;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_exit>:

void _exit (int status)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ffe7 	bl	8004ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f16:	e7fe      	b.n	8004f16 <_exit+0x12>

08004f18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e00a      	b.n	8004f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f2a:	f3af 8000 	nop.w
 8004f2e:	4601      	mov	r1, r0
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	60ba      	str	r2, [r7, #8]
 8004f36:	b2ca      	uxtb	r2, r1
 8004f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dbf0      	blt.n	8004f2a <_read+0x12>
	}

return len;
 8004f48:	687b      	ldr	r3, [r7, #4]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e009      	b.n	8004f78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	60ba      	str	r2, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dbf1      	blt.n	8004f64 <_write+0x12>
	}
	return len;
 8004f80:	687b      	ldr	r3, [r7, #4]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_close>:

int _close(int file)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
	return -1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <_isatty>:

int _isatty(int file)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8004fca:	2301      	movs	r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <_sbrk+0x5c>)
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <_sbrk+0x60>)
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <_sbrk+0x64>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <_sbrk+0x64>)
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <_sbrk+0x68>)
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <_sbrk+0x64>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	d207      	bcs.n	8005034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005024:	f005 f8d6 	bl	800a1d4 <__errno>
 8005028:	4603      	mov	r3, r0
 800502a:	220c      	movs	r2, #12
 800502c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	e009      	b.n	8005048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <_sbrk+0x64>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <_sbrk+0x64>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	4a05      	ldr	r2, [pc, #20]	; (8005058 <_sbrk+0x64>)
 8005044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20020000 	.word	0x20020000
 8005054:	00000400 	.word	0x00000400
 8005058:	20000854 	.word	0x20000854
 800505c:	20001180 	.word	0x20001180

08005060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <SystemInit+0x20>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	4a05      	ldr	r2, [pc, #20]	; (8005080 <SystemInit+0x20>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	g_GnssRx_Flag = true;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_UART_RxCpltCallback+0x20>)
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]
	g_openFixedDataTransmition = true;
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_UART_RxCpltCallback+0x24>)
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000858 	.word	0x20000858
 80050a8:	20000859 	.word	0x20000859

080050ac <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 80050b4:	f240 228a 	movw	r2, #650	; 0x28a
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <UsrGpsL86Init+0x1c>)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f003 ff02 	bl	8008ec4 <HAL_UART_Receive_DMA>
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000930 	.word	0x20000930

080050cc <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
    getRmc();
 80050d4:	f000 f83a 	bl	800514c <getRmc>
    getGGA();
 80050d8:	f000 f95c 	bl	8005394 <getGGA>
    if (rmcValidFlag)
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <Usr_GpsL86GetValues+0x74>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 80050e6:	4b16      	ldr	r3, [pc, #88]	; (8005140 <Usr_GpsL86GetValues+0x74>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 80050ec:	f000 f8e4 	bl	80052b8 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 80050f0:	4b14      	ldr	r3, [pc, #80]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8005100:	4b10      	ldr	r3, [pc, #64]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 8005102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <Usr_GpsL86GetValues+0x78>)
 800512a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8005130:	4805      	ldr	r0, [pc, #20]	; (8005148 <Usr_GpsL86GetValues+0x7c>)
 8005132:	f7ff ffbb 	bl	80050ac <UsrGpsL86Init>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2000085a 	.word	0x2000085a
 8005144:	20001138 	.word	0x20001138
 8005148:	20000434 	.word	0x20000434

0800514c <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 8005152:	4b4a      	ldr	r3, [pc, #296]	; (800527c <getRmc+0x130>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 808a 	beq.w	8005272 <getRmc+0x126>
	    {
	        MsgIndex = 0;
 800515e:	4b48      	ldr	r3, [pc, #288]	; (8005280 <getRmc+0x134>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005164:	4947      	ldr	r1, [pc, #284]	; (8005284 <getRmc+0x138>)
 8005166:	4848      	ldr	r0, [pc, #288]	; (8005288 <getRmc+0x13c>)
 8005168:	f005 ff77 	bl	800b05a <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 800516c:	4947      	ldr	r1, [pc, #284]	; (800528c <getRmc+0x140>)
 800516e:	4846      	ldr	r0, [pc, #280]	; (8005288 <getRmc+0x13c>)
 8005170:	f005 ff7b 	bl	800b06a <strstr>
 8005174:	4603      	mov	r3, r0
 8005176:	4a46      	ldr	r2, [pc, #280]	; (8005290 <getRmc+0x144>)
 8005178:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 800517a:	4b45      	ldr	r3, [pc, #276]	; (8005290 <getRmc+0x144>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b47      	cmp	r3, #71	; 0x47
 8005182:	d173      	bne.n	800526c <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8005184:	4b42      	ldr	r3, [pc, #264]	; (8005290 <getRmc+0x144>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <getRmc+0x134>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	7811      	ldrb	r1, [r2, #0]
 800518e:	4a41      	ldr	r2, [pc, #260]	; (8005294 <getRmc+0x148>)
 8005190:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8005192:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <getRmc+0x134>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a39      	ldr	r2, [pc, #228]	; (8005280 <getRmc+0x134>)
 800519a:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 800519c:	4b3c      	ldr	r3, [pc, #240]	; (8005290 <getRmc+0x144>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a37      	ldr	r2, [pc, #220]	; (8005280 <getRmc+0x134>)
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	441a      	add	r2, r3
 80051a6:	4b3a      	ldr	r3, [pc, #232]	; (8005290 <getRmc+0x144>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <getRmc+0x144>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b0a      	cmp	r3, #10
 80051b6:	d003      	beq.n	80051c0 <getRmc+0x74>
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <getRmc+0x134>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b5a      	cmp	r3, #90	; 0x5a
 80051be:	dde1      	ble.n	8005184 <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <getRmc+0x134>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80051c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ca:	2100      	movs	r1, #0
 80051cc:	482e      	ldr	r0, [pc, #184]	; (8005288 <getRmc+0x13c>)
 80051ce:	f005 f82b 	bl	800a228 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 80051d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d6:	2100      	movs	r1, #0
 80051d8:	482a      	ldr	r0, [pc, #168]	; (8005284 <getRmc+0x138>)
 80051da:	f005 f825 	bl	800a228 <memset>

	                    for (int i = 0; i < 100; i++)
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	e014      	b.n	800520e <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 80051e4:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <getRmc+0x148>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b4e      	cmp	r3, #78	; 0x4e
 80051ee:	d102      	bne.n	80051f6 <getRmc+0xaa>
	                            f_northFlag = true;
 80051f0:	4b29      	ldr	r3, [pc, #164]	; (8005298 <getRmc+0x14c>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 80051f6:	4a27      	ldr	r2, [pc, #156]	; (8005294 <getRmc+0x148>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b45      	cmp	r3, #69	; 0x45
 8005200:	d102      	bne.n	8005208 <getRmc+0xbc>
	                            f_eastFlag = true;
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <getRmc+0x150>)
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b63      	cmp	r3, #99	; 0x63
 8005212:	dde7      	ble.n	80051e4 <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8005214:	481f      	ldr	r0, [pc, #124]	; (8005294 <getRmc+0x148>)
 8005216:	f7fa fffb 	bl	8000210 <strlen>
 800521a:	4603      	mov	r3, r0
 800521c:	2b0a      	cmp	r3, #10
 800521e:	d91f      	bls.n	8005260 <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8005220:	4b1e      	ldr	r3, [pc, #120]	; (800529c <getRmc+0x150>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01f      	beq.n	800526a <getRmc+0x11e>
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <getRmc+0x14c>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 8005234:	4b18      	ldr	r3, [pc, #96]	; (8005298 <getRmc+0x14c>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <getRmc+0x150>)
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <getRmc+0x154>)
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <getRmc+0x158>)
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <getRmc+0x15c>)
 800524a:	4a18      	ldr	r2, [pc, #96]	; (80052ac <getRmc+0x160>)
 800524c:	4918      	ldr	r1, [pc, #96]	; (80052b0 <getRmc+0x164>)
 800524e:	4811      	ldr	r0, [pc, #68]	; (8005294 <getRmc+0x148>)
 8005250:	f005 fe92 	bl	800af78 <siscanf>
	                            rmcValidFlag = true;
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <getRmc+0x168>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 800525a:	f000 f82d 	bl	80052b8 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 800525e:	e004      	b.n	800526a <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005260:	2264      	movs	r2, #100	; 0x64
 8005262:	2100      	movs	r1, #0
 8005264:	480b      	ldr	r0, [pc, #44]	; (8005294 <getRmc+0x148>)
 8005266:	f004 ffdf 	bl	800a228 <memset>
	                    break;
 800526a:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <getRmc+0x130>)
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]

	    }

}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000858 	.word	0x20000858
 8005280:	20000860 	.word	0x20000860
 8005284:	20000930 	.word	0x20000930
 8005288:	20000d30 	.word	0x20000d30
 800528c:	08011190 	.word	0x08011190
 8005290:	20000864 	.word	0x20000864
 8005294:	20000868 	.word	0x20000868
 8005298:	2000085b 	.word	0x2000085b
 800529c:	2000085c 	.word	0x2000085c
 80052a0:	20001140 	.word	0x20001140
 80052a4:	20001134 	.word	0x20001134
 80052a8:	20001130 	.word	0x20001130
 80052ac:	20001144 	.word	0x20001144
 80052b0:	08011198 	.word	0x08011198
 80052b4:	2000085a 	.word	0x2000085a

080052b8 <formatLatLong>:

_io void formatLatLong(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <formatLatLong+0xc8>)
 80052c0:	edd3 7a00 	vldr	s15, [r3]
 80052c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c8:	ee17 1a90 	vmov	r1, s15
 80052cc:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <formatLatLong+0xcc>)
 80052ce:	fb83 2301 	smull	r2, r3, r3, r1
 80052d2:	115a      	asrs	r2, r3, #5
 80052d4:	17cb      	asrs	r3, r1, #31
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <formatLatLong+0xc8>)
 80052dc:	ed93 7a00 	vldr	s14, [r3]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2264      	movs	r2, #100	; 0x64
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f4:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005302:	edd7 6a00 	vldr	s13, [r7]
 8005306:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8005388 <formatLatLong+0xd0>
 800530a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800530e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005312:	4b1e      	ldr	r3, [pc, #120]	; (800538c <formatLatLong+0xd4>)
 8005314:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <formatLatLong+0xd8>)
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005322:	ee17 1a90 	vmov	r1, s15
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <formatLatLong+0xcc>)
 8005328:	fb83 2301 	smull	r2, r3, r3, r1
 800532c:	115a      	asrs	r2, r3, #5
 800532e:	17cb      	asrs	r3, r1, #31
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8005334:	4b16      	ldr	r3, [pc, #88]	; (8005390 <formatLatLong+0xd8>)
 8005336:	ed93 7a00 	vldr	s14, [r3]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2264      	movs	r2, #100	; 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800534a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800534e:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800535c:	edd7 6a00 	vldr	s13, [r7]
 8005360:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8005388 <formatLatLong+0xd0>
 8005364:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <formatLatLong+0xd4>)
 800536e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20001130 	.word	0x20001130
 8005384:	51eb851f 	.word	0x51eb851f
 8005388:	42700000 	.word	0x42700000
 800538c:	20001138 	.word	0x20001138
 8005390:	20001134 	.word	0x20001134

08005394 <getGGA>:

_io void getGGA(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 800539a:	4b34      	ldr	r3, [pc, #208]	; (800546c <getGGA+0xd8>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d060      	beq.n	8005466 <getGGA+0xd2>
    {
        MsgIndex = 0;
 80053a4:	4b32      	ldr	r3, [pc, #200]	; (8005470 <getGGA+0xdc>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 80053aa:	4932      	ldr	r1, [pc, #200]	; (8005474 <getGGA+0xe0>)
 80053ac:	4832      	ldr	r0, [pc, #200]	; (8005478 <getGGA+0xe4>)
 80053ae:	f005 fe54 	bl	800b05a <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80053b2:	4932      	ldr	r1, [pc, #200]	; (800547c <getGGA+0xe8>)
 80053b4:	4830      	ldr	r0, [pc, #192]	; (8005478 <getGGA+0xe4>)
 80053b6:	f005 fe58 	bl	800b06a <strstr>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a30      	ldr	r2, [pc, #192]	; (8005480 <getGGA+0xec>)
 80053be:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 80053c0:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <getGGA+0xec>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b47      	cmp	r3, #71	; 0x47
 80053c8:	d14a      	bne.n	8005460 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 80053ca:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <getGGA+0xec>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <getGGA+0xdc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	7811      	ldrb	r1, [r2, #0]
 80053d4:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <getGGA+0xf0>)
 80053d6:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <getGGA+0xdc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a24      	ldr	r2, [pc, #144]	; (8005470 <getGGA+0xdc>)
 80053e0:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80053e2:	4b27      	ldr	r3, [pc, #156]	; (8005480 <getGGA+0xec>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <getGGA+0xdc>)
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	441a      	add	r2, r3
 80053ec:	4b24      	ldr	r3, [pc, #144]	; (8005480 <getGGA+0xec>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80053f4:	4b22      	ldr	r3, [pc, #136]	; (8005480 <getGGA+0xec>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b0a      	cmp	r3, #10
 80053fc:	d003      	beq.n	8005406 <getGGA+0x72>
 80053fe:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <getGGA+0xdc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b5a      	cmp	r3, #90	; 0x5a
 8005404:	dde1      	ble.n	80053ca <getGGA+0x36>
                {
                    MsgIndex = 0;
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <getGGA+0xdc>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800540c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005410:	2100      	movs	r1, #0
 8005412:	4819      	ldr	r0, [pc, #100]	; (8005478 <getGGA+0xe4>)
 8005414:	f004 ff08 	bl	800a228 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8005418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800541c:	2100      	movs	r1, #0
 800541e:	4815      	ldr	r0, [pc, #84]	; (8005474 <getGGA+0xe0>)
 8005420:	f004 ff02 	bl	800a228 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8005424:	4817      	ldr	r0, [pc, #92]	; (8005484 <getGGA+0xf0>)
 8005426:	f7fa fef3 	bl	8000210 <strlen>
 800542a:	4603      	mov	r3, r0
 800542c:	2b0a      	cmp	r3, #10
 800542e:	d912      	bls.n	8005456 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8005430:	4b15      	ldr	r3, [pc, #84]	; (8005488 <getGGA+0xf4>)
 8005432:	9305      	str	r3, [sp, #20]
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <getGGA+0xf8>)
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <getGGA+0xfc>)
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <getGGA+0x100>)
 800543e:	9302      	str	r3, [sp, #8]
 8005440:	4b15      	ldr	r3, [pc, #84]	; (8005498 <getGGA+0x104>)
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <getGGA+0x108>)
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <getGGA+0x10c>)
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <getGGA+0x110>)
 800544c:	4916      	ldr	r1, [pc, #88]	; (80054a8 <getGGA+0x114>)
 800544e:	480d      	ldr	r0, [pc, #52]	; (8005484 <getGGA+0xf0>)
 8005450:	f005 fd92 	bl	800af78 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8005454:	e004      	b.n	8005460 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005456:	2264      	movs	r2, #100	; 0x64
 8005458:	2100      	movs	r1, #0
 800545a:	4814      	ldr	r0, [pc, #80]	; (80054ac <getGGA+0x118>)
 800545c:	f004 fee4 	bl	800a228 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <getGGA+0xd8>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000859 	.word	0x20000859
 8005470:	20000860 	.word	0x20000860
 8005474:	20000930 	.word	0x20000930
 8005478:	20000d30 	.word	0x20000d30
 800547c:	080111b4 	.word	0x080111b4
 8005480:	20000864 	.word	0x20000864
 8005484:	200008cc 	.word	0x200008cc
 8005488:	20001164 	.word	0x20001164
 800548c:	20001160 	.word	0x20001160
 8005490:	2000115c 	.word	0x2000115c
 8005494:	20001158 	.word	0x20001158
 8005498:	20001154 	.word	0x20001154
 800549c:	20001150 	.word	0x20001150
 80054a0:	2000114c 	.word	0x2000114c
 80054a4:	20001148 	.word	0x20001148
 80054a8:	080111bc 	.word	0x080111bc
 80054ac:	20000868 	.word	0x20000868

080054b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054b4:	480d      	ldr	r0, [pc, #52]	; (80054ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054b6:	490e      	ldr	r1, [pc, #56]	; (80054f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054b8:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054bc:	e002      	b.n	80054c4 <LoopCopyDataInit>

080054be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054c2:	3304      	adds	r3, #4

080054c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054c8:	d3f9      	bcc.n	80054be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054ca:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054cc:	4c0b      	ldr	r4, [pc, #44]	; (80054fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80054ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054d0:	e001      	b.n	80054d6 <LoopFillZerobss>

080054d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054d4:	3204      	adds	r2, #4

080054d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054d8:	d3fb      	bcc.n	80054d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054da:	f7ff fdc1 	bl	8005060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054de:	f004 fe7f 	bl	800a1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054e2:	f7fd fffd 	bl	80034e0 <main>
  bx  lr    
 80054e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054f0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80054f4:	08011780 	.word	0x08011780
  ldr r2, =_sbss
 80054f8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80054fc:	2000117c 	.word	0x2000117c

08005500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005500:	e7fe      	b.n	8005500 <ADC_IRQHandler>
	...

08005504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005508:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <HAL_Init+0x40>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <HAL_Init+0x40>)
 800550e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_Init+0x40>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <HAL_Init+0x40>)
 800551a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800551e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_Init+0x40>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_Init+0x40>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800552c:	2003      	movs	r0, #3
 800552e:	f000 fd83 	bl	8006038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005532:	200f      	movs	r0, #15
 8005534:	f000 f808 	bl	8005548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005538:	f7ff f956 	bl	80047e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40023c00 	.word	0x40023c00

08005548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_InitTick+0x54>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_InitTick+0x58>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800555e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fda9 	bl	80060be <HAL_SYSTICK_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e00e      	b.n	8005594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b0f      	cmp	r3, #15
 800557a:	d80a      	bhi.n	8005592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800557c:	2200      	movs	r2, #0
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	f000 fd63 	bl	800604e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <HAL_InitTick+0x5c>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000008 	.word	0x20000008
 80055a0:	20000010 	.word	0x20000010
 80055a4:	2000000c 	.word	0x2000000c

080055a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <HAL_IncTick+0x20>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_IncTick+0x24>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <HAL_IncTick+0x24>)
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000010 	.word	0x20000010
 80055cc:	20001168 	.word	0x20001168

080055d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return uwTick;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <HAL_GetTick+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20001168 	.word	0x20001168

080055e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055f0:	f7ff ffee 	bl	80055d0 <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d005      	beq.n	800560e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_Delay+0x44>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800560e:	bf00      	nop
 8005610:	f7ff ffde 	bl	80055d0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d8f7      	bhi.n	8005610 <HAL_Delay+0x28>
  {
  }
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010

08005630 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e033      	b.n	80056ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff f8f2 	bl	8004838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005676:	f023 0302 	bic.w	r3, r3, #2
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fae8 	bl	8005c58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
 800569e:	e001      	b.n	80056a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_ADC_Start+0x1a>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e0b2      	b.n	8005838 <HAL_ADC_Start+0x180>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d018      	beq.n	800571a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056f8:	4b52      	ldr	r3, [pc, #328]	; (8005844 <HAL_ADC_Start+0x18c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_ADC_Start+0x190>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0c9a      	lsrs	r2, r3, #18
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800570c:	e002      	b.n	8005714 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3b01      	subs	r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f9      	bne.n	800570e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d17a      	bne.n	800581e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005752:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	d106      	bne.n	8005776 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f023 0206 	bic.w	r2, r3, #6
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
 8005774:	e002      	b.n	800577c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005784:	4b31      	ldr	r3, [pc, #196]	; (800584c <HAL_ADC_Start+0x194>)
 8005786:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005790:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2b00      	cmp	r3, #0
 800579c:	d12a      	bne.n	80057f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <HAL_ADC_Start+0x198>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d015      	beq.n	80057d4 <HAL_ADC_Start+0x11c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a29      	ldr	r2, [pc, #164]	; (8005854 <HAL_ADC_Start+0x19c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d105      	bne.n	80057be <HAL_ADC_Start+0x106>
 80057b2:	4b26      	ldr	r3, [pc, #152]	; (800584c <HAL_ADC_Start+0x194>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a25      	ldr	r2, [pc, #148]	; (8005858 <HAL_ADC_Start+0x1a0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d136      	bne.n	8005836 <HAL_ADC_Start+0x17e>
 80057c8:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_ADC_Start+0x194>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d130      	bne.n	8005836 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d129      	bne.n	8005836 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057f0:	609a      	str	r2, [r3, #8]
 80057f2:	e020      	b.n	8005836 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <HAL_ADC_Start+0x198>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d11b      	bne.n	8005836 <HAL_ADC_Start+0x17e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d114      	bne.n	8005836 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	e00b      	b.n	8005836 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0210 	orr.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f043 0201 	orr.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	20000008 	.word	0x20000008
 8005848:	431bde83 	.word	0x431bde83
 800584c:	40012300 	.word	0x40012300
 8005850:	40012000 	.word	0x40012000
 8005854:	40012100 	.word	0x40012100
 8005858:	40012200 	.word	0x40012200

0800585c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_ADC_Stop+0x16>
 800586e:	2302      	movs	r3, #2
 8005870:	e021      	b.n	80058b6 <HAL_ADC_Stop+0x5a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058de:	d113      	bne.n	8005908 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ee:	d10b      	bne.n	8005908 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e063      	b.n	80059d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005908:	f7ff fe62 	bl	80055d0 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800590e:	e021      	b.n	8005954 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d01d      	beq.n	8005954 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_ADC_PollForConversion+0x6c>
 800591e:	f7ff fe57 	bl	80055d0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d212      	bcs.n	8005954 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d00b      	beq.n	8005954 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0204 	orr.w	r2, r3, #4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e03d      	b.n	80059d0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d1d6      	bne.n	8005910 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0212 	mvn.w	r2, #18
 800596a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d123      	bne.n	80059ce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800598a:	2b00      	cmp	r3, #0
 800598c:	d11f      	bne.n	80059ce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d111      	bne.n	80059ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f043 0201 	orr.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x1c>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e113      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x244>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b09      	cmp	r3, #9
 8005a1e:	d925      	bls.n	8005a6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68d9      	ldr	r1, [r3, #12]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	3b1e      	subs	r3, #30
 8005a36:	2207      	movs	r2, #7
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	43da      	mvns	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	400a      	ands	r2, r1
 8005a44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68d9      	ldr	r1, [r3, #12]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4618      	mov	r0, r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4403      	add	r3, r0
 8005a5e:	3b1e      	subs	r3, #30
 8005a60:	409a      	lsls	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	e022      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	2207      	movs	r2, #7
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43da      	mvns	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6919      	ldr	r1, [r3, #16]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4403      	add	r3, r0
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d824      	bhi.n	8005b04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	3b05      	subs	r3, #5
 8005acc:	221f      	movs	r2, #31
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	400a      	ands	r2, r1
 8005ada:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4618      	mov	r0, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	3b05      	subs	r3, #5
 8005af6:	fa00 f203 	lsl.w	r2, r0, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	635a      	str	r2, [r3, #52]	; 0x34
 8005b02:	e04c      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d824      	bhi.n	8005b56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3b23      	subs	r3, #35	; 0x23
 8005b1e:	221f      	movs	r2, #31
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43da      	mvns	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	3b23      	subs	r3, #35	; 0x23
 8005b48:	fa00 f203 	lsl.w	r2, r0, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
 8005b54:	e023      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	3b41      	subs	r3, #65	; 0x41
 8005b68:	221f      	movs	r2, #31
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43da      	mvns	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	400a      	ands	r2, r1
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4618      	mov	r0, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	3b41      	subs	r3, #65	; 0x41
 8005b92:	fa00 f203 	lsl.w	r2, r0, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <HAL_ADC_ConfigChannel+0x250>)
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <HAL_ADC_ConfigChannel+0x254>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10f      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x1d8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b12      	cmp	r3, #18
 8005bb2:	d10b      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_ADC_ConfigChannel+0x254>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d12b      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x23a>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <HAL_ADC_ConfigChannel+0x258>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <HAL_ADC_ConfigChannel+0x1f4>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b11      	cmp	r3, #17
 8005be6:	d122      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <HAL_ADC_ConfigChannel+0x258>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d111      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_ADC_ConfigChannel+0x25c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <HAL_ADC_ConfigChannel+0x260>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	0c9a      	lsrs	r2, r3, #18
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c20:	e002      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f9      	bne.n	8005c22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40012300 	.word	0x40012300
 8005c48:	40012000 	.word	0x40012000
 8005c4c:	10000012 	.word	0x10000012
 8005c50:	20000008 	.word	0x20000008
 8005c54:	431bde83 	.word	0x431bde83

08005c58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c60:	4b79      	ldr	r3, [pc, #484]	; (8005e48 <ADC_Init+0x1f0>)
 8005c62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	021a      	lsls	r2, r3, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6899      	ldr	r1, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <ADC_Init+0x1f4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6899      	ldr	r1, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	e00f      	b.n	8005d56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0202 	bic.w	r2, r2, #2
 8005d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7e1b      	ldrb	r3, [r3, #24]
 8005d70:	005a      	lsls	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01b      	beq.n	8005dbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005da2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	3b01      	subs	r3, #1
 8005db0:	035a      	lsls	r2, r3, #13
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e007      	b.n	8005dcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	051a      	lsls	r2, r3, #20
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e0e:	025a      	lsls	r2, r3, #9
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	029a      	lsls	r2, r3, #10
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40012300 	.word	0x40012300
 8005e4c:	0f000001 	.word	0x0f000001

08005e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	60d3      	str	r3, [r2, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0307 	and.w	r3, r3, #7
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db0b      	blt.n	8005ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	4907      	ldr	r1, [pc, #28]	; (8005eec <__NVIC_EnableIRQ+0x38>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	db12      	blt.n	8005f28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	f003 021f 	and.w	r2, r3, #31
 8005f08:	490a      	ldr	r1, [pc, #40]	; (8005f34 <__NVIC_DisableIRQ+0x44>)
 8005f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2001      	movs	r0, #1
 8005f12:	fa00 f202 	lsl.w	r2, r0, r2
 8005f16:	3320      	adds	r3, #32
 8005f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f1c:	f3bf 8f4f 	dsb	sy
}
 8005f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f22:	f3bf 8f6f 	isb	sy
}
 8005f26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000e100 	.word	0xe000e100

08005f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db0a      	blt.n	8005f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	490c      	ldr	r1, [pc, #48]	; (8005f84 <__NVIC_SetPriority+0x4c>)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	0112      	lsls	r2, r2, #4
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f60:	e00a      	b.n	8005f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4908      	ldr	r1, [pc, #32]	; (8005f88 <__NVIC_SetPriority+0x50>)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	0112      	lsls	r2, r2, #4
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	440b      	add	r3, r1
 8005f76:	761a      	strb	r2, [r3, #24]
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	e000e100 	.word	0xe000e100
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f1c3 0307 	rsb	r3, r3, #7
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	bf28      	it	cs
 8005faa:	2304      	movcs	r3, #4
 8005fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d902      	bls.n	8005fbc <NVIC_EncodePriority+0x30>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3b03      	subs	r3, #3
 8005fba:	e000      	b.n	8005fbe <NVIC_EncodePriority+0x32>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43da      	mvns	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	401a      	ands	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	fa01 f303 	lsl.w	r3, r1, r3
 8005fde:	43d9      	mvns	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe4:	4313      	orrs	r3, r2
         );
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3724      	adds	r7, #36	; 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006004:	d301      	bcc.n	800600a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006006:	2301      	movs	r3, #1
 8006008:	e00f      	b.n	800602a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <SysTick_Config+0x40>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006012:	210f      	movs	r1, #15
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	f7ff ff8e 	bl	8005f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <SysTick_Config+0x40>)
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <SysTick_Config+0x40>)
 8006024:	2207      	movs	r2, #7
 8006026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	e000e010 	.word	0xe000e010

08006038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff ff05 	bl	8005e50 <__NVIC_SetPriorityGrouping>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	4603      	mov	r3, r0
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006060:	f7ff ff1a 	bl	8005e98 <__NVIC_GetPriorityGrouping>
 8006064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f7ff ff8e 	bl	8005f8c <NVIC_EncodePriority>
 8006070:	4602      	mov	r2, r0
 8006072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff5d 	bl	8005f38 <__NVIC_SetPriority>
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	4603      	mov	r3, r0
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ff0d 	bl	8005eb4 <__NVIC_EnableIRQ>
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	4603      	mov	r3, r0
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80060ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff1d 	bl	8005ef0 <__NVIC_DisableIRQ>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ff94 	bl	8005ff4 <SysTick_Config>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060e4:	f7ff fa74 	bl	80055d0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e099      	b.n	8006228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006114:	e00f      	b.n	8006136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006116:	f7ff fa5b 	bl	80055d0 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b05      	cmp	r3, #5
 8006122:	d908      	bls.n	8006136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2203      	movs	r2, #3
 800612e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e078      	b.n	8006228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e8      	bne.n	8006116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <HAL_DMA_Init+0x158>)
 8006150:	4013      	ands	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b04      	cmp	r3, #4
 800618e:	d107      	bne.n	80061a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	4313      	orrs	r3, r2
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 0307 	bic.w	r3, r3, #7
 80061b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d117      	bne.n	80061fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fb6d 	bl	80068bc <DMA_CheckFifoParam>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061f6:	2301      	movs	r3, #1
 80061f8:	e016      	b.n	8006228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb24 	bl	8006850 <DMA_CalcBaseAndBitshift>
 8006208:	4603      	mov	r3, r0
 800620a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	223f      	movs	r2, #63	; 0x3f
 8006212:	409a      	lsls	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	f010803f 	.word	0xf010803f

08006234 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e050      	b.n	80062e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d101      	bne.n	8006256 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	e048      	b.n	80062e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2221      	movs	r2, #33	; 0x21
 8006294:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fada 	bl	8006850 <DMA_CalcBaseAndBitshift>
 800629c:	4603      	mov	r3, r0
 800629e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	223f      	movs	r2, #63	; 0x3f
 80062ca:	409a      	lsls	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_DMA_Start_IT+0x26>
 8006312:	2302      	movs	r3, #2
 8006314:	e040      	b.n	8006398 <HAL_DMA_Start_IT+0xa8>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	d12f      	bne.n	800638a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2202      	movs	r2, #2
 800632e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fa58 	bl	80067f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006348:	223f      	movs	r2, #63	; 0x3f
 800634a:	409a      	lsls	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0216 	orr.w	r2, r2, #22
 800635e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0208 	orr.w	r2, r2, #8
 8006376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e005      	b.n	8006396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006392:	2302      	movs	r3, #2
 8006394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063ae:	f7ff f90f 	bl	80055d0 <HAL_GetTick>
 80063b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d008      	beq.n	80063d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e052      	b.n	8006478 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0216 	bic.w	r2, r2, #22
 80063e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <HAL_DMA_Abort+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0208 	bic.w	r2, r2, #8
 8006410:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006422:	e013      	b.n	800644c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006424:	f7ff f8d4 	bl	80055d0 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b05      	cmp	r3, #5
 8006430:	d90c      	bls.n	800644c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2203      	movs	r2, #3
 800643c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e015      	b.n	8006478 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e4      	bne.n	8006424 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	223f      	movs	r2, #63	; 0x3f
 8006460:	409a      	lsls	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d004      	beq.n	800649e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e00c      	b.n	80064b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2205      	movs	r2, #5
 80064a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064d0:	4b8e      	ldr	r3, [pc, #568]	; (800670c <HAL_DMA_IRQHandler+0x248>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a8e      	ldr	r2, [pc, #568]	; (8006710 <HAL_DMA_IRQHandler+0x24c>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	2208      	movs	r2, #8
 80064f0:	409a      	lsls	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d013      	beq.n	8006530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0204 	bic.w	r2, r2, #4
 8006516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	2208      	movs	r2, #8
 800651e:	409a      	lsls	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	2201      	movs	r2, #1
 8006554:	409a      	lsls	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f043 0202 	orr.w	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656a:	2204      	movs	r2, #4
 800656c:	409a      	lsls	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d012      	beq.n	800659c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006588:	2204      	movs	r2, #4
 800658a:	409a      	lsls	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0204 	orr.w	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	2210      	movs	r2, #16
 80065a2:	409a      	lsls	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d043      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d03c      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	2210      	movs	r2, #16
 80065c0:	409a      	lsls	r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d018      	beq.n	8006606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d024      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	e01f      	b.n	8006634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	e016      	b.n	8006634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0208 	bic.w	r2, r2, #8
 8006622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006638:	2220      	movs	r2, #32
 800663a:	409a      	lsls	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808f 	beq.w	8006764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8087 	beq.w	8006764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	2220      	movs	r2, #32
 800665c:	409a      	lsls	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b05      	cmp	r3, #5
 800666c:	d136      	bne.n	80066dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0216 	bic.w	r2, r2, #22
 800667c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_DMA_IRQHandler+0x1da>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0208 	bic.w	r2, r2, #8
 80066ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	223f      	movs	r2, #63	; 0x3f
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d07e      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
        }
        return;
 80066da:	e079      	b.n	80067d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01d      	beq.n	8006726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10d      	bne.n	8006714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d031      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	e02c      	b.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
 800670a:	bf00      	nop
 800670c:	20000008 	.word	0x20000008
 8006710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d023      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
 8006724:	e01e      	b.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0210 	bic.w	r2, r2, #16
 8006742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b00      	cmp	r3, #0
 800676a:	d032      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2205      	movs	r2, #5
 800677c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3301      	adds	r3, #1
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	429a      	cmp	r2, r3
 800679a:	d307      	bcc.n	80067ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f2      	bne.n	8006790 <HAL_DMA_IRQHandler+0x2cc>
 80067aa:	e000      	b.n	80067ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80067ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	e000      	b.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80067d0:	bf00      	nop
    }
  }
}
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067e6:	b2db      	uxtb	r3, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d108      	bne.n	8006834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006832:	e007      	b.n	8006844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	60da      	str	r2, [r3, #12]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	3b10      	subs	r3, #16
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800686a:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <DMA_CalcBaseAndBitshift+0x68>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d909      	bls.n	8006892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	659a      	str	r2, [r3, #88]	; 0x58
 8006890:	e007      	b.n	80068a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	aaaaaaab 	.word	0xaaaaaaab
 80068b8:	08011208 	.word	0x08011208

080068bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11f      	bne.n	8006916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d856      	bhi.n	800698a <DMA_CheckFifoParam+0xce>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <DMA_CheckFifoParam+0x28>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006907 	.word	0x08006907
 80068ec:	080068f5 	.word	0x080068f5
 80068f0:	0800698b 	.word	0x0800698b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d046      	beq.n	800698e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006904:	e043      	b.n	800698e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800690e:	d140      	bne.n	8006992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006914:	e03d      	b.n	8006992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691e:	d121      	bne.n	8006964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d837      	bhi.n	8006996 <DMA_CheckFifoParam+0xda>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <DMA_CheckFifoParam+0x70>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800693d 	.word	0x0800693d
 8006930:	08006943 	.word	0x08006943
 8006934:	0800693d 	.word	0x0800693d
 8006938:	08006955 	.word	0x08006955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e030      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d025      	beq.n	800699a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006952:	e022      	b.n	800699a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800695c:	d11f      	bne.n	800699e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006962:	e01c      	b.n	800699e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d903      	bls.n	8006972 <DMA_CheckFifoParam+0xb6>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d003      	beq.n	8006978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006970:	e018      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	73fb      	strb	r3, [r7, #15]
      break;
 8006976:	e015      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
      break;
 8006988:	e00b      	b.n	80069a2 <DMA_CheckFifoParam+0xe6>
      break;
 800698a:	bf00      	nop
 800698c:	e00a      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 800698e:	bf00      	nop
 8006990:	e008      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006992:	bf00      	nop
 8006994:	e006      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006996:	bf00      	nop
 8006998:	e004      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 80069a2:	bf00      	nop
    }
  } 
  
  return status; 
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop

080069b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e165      	b.n	8006c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069d0:	2201      	movs	r2, #1
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	f040 8154 	bne.w	8006c96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d005      	beq.n	8006a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d130      	bne.n	8006a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	2203      	movs	r2, #3
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43db      	mvns	r3, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	f003 0201 	and.w	r2, r3, #1
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d017      	beq.n	8006aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	2203      	movs	r2, #3
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d123      	bne.n	8006af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	08da      	lsrs	r2, r3, #3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3208      	adds	r2, #8
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	08da      	lsrs	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3208      	adds	r2, #8
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	2203      	movs	r2, #3
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0203 	and.w	r2, r3, #3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80ae 	beq.w	8006c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b5d      	ldr	r3, [pc, #372]	; (8006cb4 <HAL_GPIO_Init+0x300>)
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	4a5c      	ldr	r2, [pc, #368]	; (8006cb4 <HAL_GPIO_Init+0x300>)
 8006b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b48:	6453      	str	r3, [r2, #68]	; 0x44
 8006b4a:	4b5a      	ldr	r3, [pc, #360]	; (8006cb4 <HAL_GPIO_Init+0x300>)
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b56:	4a58      	ldr	r2, [pc, #352]	; (8006cb8 <HAL_GPIO_Init+0x304>)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a4f      	ldr	r2, [pc, #316]	; (8006cbc <HAL_GPIO_Init+0x308>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d025      	beq.n	8006bce <HAL_GPIO_Init+0x21a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4e      	ldr	r2, [pc, #312]	; (8006cc0 <HAL_GPIO_Init+0x30c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <HAL_GPIO_Init+0x216>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a4d      	ldr	r2, [pc, #308]	; (8006cc4 <HAL_GPIO_Init+0x310>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d019      	beq.n	8006bc6 <HAL_GPIO_Init+0x212>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4c      	ldr	r2, [pc, #304]	; (8006cc8 <HAL_GPIO_Init+0x314>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_GPIO_Init+0x20e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a4b      	ldr	r2, [pc, #300]	; (8006ccc <HAL_GPIO_Init+0x318>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00d      	beq.n	8006bbe <HAL_GPIO_Init+0x20a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4a      	ldr	r2, [pc, #296]	; (8006cd0 <HAL_GPIO_Init+0x31c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <HAL_GPIO_Init+0x206>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a49      	ldr	r2, [pc, #292]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_GPIO_Init+0x202>
 8006bb2:	2306      	movs	r3, #6
 8006bb4:	e00c      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bb6:	2307      	movs	r3, #7
 8006bb8:	e00a      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bba:	2305      	movs	r3, #5
 8006bbc:	e008      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	e006      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e004      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e002      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_GPIO_Init+0x21c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	f002 0203 	and.w	r2, r2, #3
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	4093      	lsls	r3, r2
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be0:	4935      	ldr	r1, [pc, #212]	; (8006cb8 <HAL_GPIO_Init+0x304>)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	3302      	adds	r3, #2
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bee:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c12:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c18:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4013      	ands	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c3c:	4a26      	ldr	r2, [pc, #152]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c90:	4a11      	ldr	r2, [pc, #68]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	f67f ae96 	bls.w	80069d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	3724      	adds	r7, #36	; 0x24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40020000 	.word	0x40020000
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40020800 	.word	0x40020800
 8006cc8:	40020c00 	.word	0x40020c00
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	40021400 	.word	0x40021400
 8006cd4:	40021800 	.word	0x40021800
 8006cd8:	40013c00 	.word	0x40013c00

08006cdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e0c7      	b.n	8006e88 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	f040 80b7 	bne.w	8006e82 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006d14:	4a62      	ldr	r2, [pc, #392]	; (8006ea0 <HAL_GPIO_DeInit+0x1c4>)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	089b      	lsrs	r3, r3, #2
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	220f      	movs	r2, #15
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a5a      	ldr	r2, [pc, #360]	; (8006ea4 <HAL_GPIO_DeInit+0x1c8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d025      	beq.n	8006d8a <HAL_GPIO_DeInit+0xae>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a59      	ldr	r2, [pc, #356]	; (8006ea8 <HAL_GPIO_DeInit+0x1cc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <HAL_GPIO_DeInit+0xaa>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a58      	ldr	r2, [pc, #352]	; (8006eac <HAL_GPIO_DeInit+0x1d0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d019      	beq.n	8006d82 <HAL_GPIO_DeInit+0xa6>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a57      	ldr	r2, [pc, #348]	; (8006eb0 <HAL_GPIO_DeInit+0x1d4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_GPIO_DeInit+0xa2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a56      	ldr	r2, [pc, #344]	; (8006eb4 <HAL_GPIO_DeInit+0x1d8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00d      	beq.n	8006d7a <HAL_GPIO_DeInit+0x9e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a55      	ldr	r2, [pc, #340]	; (8006eb8 <HAL_GPIO_DeInit+0x1dc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <HAL_GPIO_DeInit+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a54      	ldr	r2, [pc, #336]	; (8006ebc <HAL_GPIO_DeInit+0x1e0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_GPIO_DeInit+0x96>
 8006d6e:	2306      	movs	r3, #6
 8006d70:	e00c      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d72:	2307      	movs	r3, #7
 8006d74:	e00a      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d76:	2305      	movs	r3, #5
 8006d78:	e008      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d7a:	2304      	movs	r3, #4
 8006d7c:	e006      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e004      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e002      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_GPIO_DeInit+0xb0>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	f002 0203 	and.w	r2, r2, #3
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	4093      	lsls	r3, r2
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d132      	bne.n	8006e02 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d9c:	4b48      	ldr	r3, [pc, #288]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	4946      	ldr	r1, [pc, #280]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006daa:	4b45      	ldr	r3, [pc, #276]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	4943      	ldr	r1, [pc, #268]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006db8:	4b41      	ldr	r3, [pc, #260]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	493f      	ldr	r1, [pc, #252]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	493c      	ldr	r1, [pc, #240]	; (8006ec0 <HAL_GPIO_DeInit+0x1e4>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	220f      	movs	r2, #15
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006de4:	4a2e      	ldr	r2, [pc, #184]	; (8006ea0 <HAL_GPIO_DeInit+0x1c4>)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	089b      	lsrs	r3, r3, #2
 8006dea:	3302      	adds	r3, #2
 8006dec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	43da      	mvns	r2, r3
 8006df4:	482a      	ldr	r0, [pc, #168]	; (8006ea0 <HAL_GPIO_DeInit+0x1c4>)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	400a      	ands	r2, r1
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2103      	movs	r1, #3
 8006e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	401a      	ands	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	08da      	lsrs	r2, r3, #3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3208      	adds	r2, #8
 8006e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	220f      	movs	r2, #15
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	08d2      	lsrs	r2, r2, #3
 8006e38:	4019      	ands	r1, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3208      	adds	r2, #8
 8006e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	2103      	movs	r1, #3
 8006e76:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	3301      	adds	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b0f      	cmp	r3, #15
 8006e8c:	f67f af34 	bls.w	8006cf8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40013800 	.word	0x40013800
 8006ea4:	40020000 	.word	0x40020000
 8006ea8:	40020400 	.word	0x40020400
 8006eac:	40020800 	.word	0x40020800
 8006eb0:	40020c00 	.word	0x40020c00
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40021400 	.word	0x40021400
 8006ebc:	40021800 	.word	0x40021800
 8006ec0:	40013c00 	.word	0x40013c00

08006ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	807b      	strh	r3, [r7, #2]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ed4:	787b      	ldrb	r3, [r7, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006eda:	887a      	ldrh	r2, [r7, #2]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ee0:	e003      	b.n	8006eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ee2:	887b      	ldrh	r3, [r7, #2]
 8006ee4:	041a      	lsls	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	619a      	str	r2, [r3, #24]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f08:	887a      	ldrh	r2, [r7, #2]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	041a      	lsls	r2, r3, #16
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	43d9      	mvns	r1, r3
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	400b      	ands	r3, r1
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	619a      	str	r2, [r3, #24]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f38:	695a      	ldr	r2, [r3, #20]
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f42:	4a05      	ldr	r2, [pc, #20]	; (8006f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fc ffe4 	bl	8003f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40013c00 	.word	0x40013c00

08006f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e12b      	b.n	80071c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fd fc9c 	bl	80048c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f001 f8fe 	bl	80081c0 <HAL_RCC_GetPCLK1Freq>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4a81      	ldr	r2, [pc, #516]	; (80071d0 <HAL_I2C_Init+0x274>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d807      	bhi.n	8006fe0 <HAL_I2C_Init+0x84>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a80      	ldr	r2, [pc, #512]	; (80071d4 <HAL_I2C_Init+0x278>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bf94      	ite	ls
 8006fd8:	2301      	movls	r3, #1
 8006fda:	2300      	movhi	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e006      	b.n	8006fee <HAL_I2C_Init+0x92>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a7d      	ldr	r2, [pc, #500]	; (80071d8 <HAL_I2C_Init+0x27c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bf94      	ite	ls
 8006fe8:	2301      	movls	r3, #1
 8006fea:	2300      	movhi	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e0e7      	b.n	80071c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a78      	ldr	r2, [pc, #480]	; (80071dc <HAL_I2C_Init+0x280>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	0c9b      	lsrs	r3, r3, #18
 8007000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4a6a      	ldr	r2, [pc, #424]	; (80071d0 <HAL_I2C_Init+0x274>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d802      	bhi.n	8007030 <HAL_I2C_Init+0xd4>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	3301      	adds	r3, #1
 800702e:	e009      	b.n	8007044 <HAL_I2C_Init+0xe8>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	4a69      	ldr	r2, [pc, #420]	; (80071e0 <HAL_I2C_Init+0x284>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	3301      	adds	r3, #1
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	430b      	orrs	r3, r1
 800704a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	495c      	ldr	r1, [pc, #368]	; (80071d0 <HAL_I2C_Init+0x274>)
 8007060:	428b      	cmp	r3, r1
 8007062:	d819      	bhi.n	8007098 <HAL_I2C_Init+0x13c>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1e59      	subs	r1, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007078:	400b      	ands	r3, r1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_I2C_Init+0x138>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1e59      	subs	r1, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	fbb1 f3f3 	udiv	r3, r1, r3
 800708c:	3301      	adds	r3, #1
 800708e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007092:	e051      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007094:	2304      	movs	r3, #4
 8007096:	e04f      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d111      	bne.n	80070c4 <HAL_I2C_Init+0x168>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1e58      	subs	r0, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	440b      	add	r3, r1
 80070ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80070b2:	3301      	adds	r3, #1
 80070b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e012      	b.n	80070ea <HAL_I2C_Init+0x18e>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	1e58      	subs	r0, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	0099      	lsls	r1, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070da:	3301      	adds	r3, #1
 80070dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <HAL_I2C_Init+0x196>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e022      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10e      	bne.n	8007118 <HAL_I2C_Init+0x1bc>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1e58      	subs	r0, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6859      	ldr	r1, [r3, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	440b      	add	r3, r1
 8007108:	fbb0 f3f3 	udiv	r3, r0, r3
 800710c:	3301      	adds	r3, #1
 800710e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	e00f      	b.n	8007138 <HAL_I2C_Init+0x1dc>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1e58      	subs	r0, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6859      	ldr	r1, [r3, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	0099      	lsls	r1, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	fbb0 f3f3 	udiv	r3, r0, r3
 800712e:	3301      	adds	r3, #1
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	6809      	ldr	r1, [r1, #0]
 800713c:	4313      	orrs	r3, r2
 800713e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6911      	ldr	r1, [r2, #16]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68d2      	ldr	r2, [r2, #12]
 8007172:	4311      	orrs	r1, r2
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6812      	ldr	r2, [r2, #0]
 8007178:	430b      	orrs	r3, r1
 800717a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	000186a0 	.word	0x000186a0
 80071d4:	001e847f 	.word	0x001e847f
 80071d8:	003d08ff 	.word	0x003d08ff
 80071dc:	431bde83 	.word	0x431bde83
 80071e0:	10624dd3 	.word	0x10624dd3

080071e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e021      	b.n	800723a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	; 0x24
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fd fbf6 	bl	8004a00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4603      	mov	r3, r0
 8007254:	817b      	strh	r3, [r7, #10]
 8007256:	460b      	mov	r3, r1
 8007258:	813b      	strh	r3, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800725e:	f7fe f9b7 	bl	80055d0 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b20      	cmp	r3, #32
 800726e:	f040 80d9 	bne.w	8007424 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	2319      	movs	r3, #25
 8007278:	2201      	movs	r2, #1
 800727a:	496d      	ldr	r1, [pc, #436]	; (8007430 <HAL_I2C_Mem_Write+0x1ec>)
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fc7f 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
 800728a:	e0cc      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_I2C_Mem_Write+0x56>
 8007296:	2302      	movs	r3, #2
 8007298:	e0c5      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d007      	beq.n	80072c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2221      	movs	r2, #33	; 0x21
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a3a      	ldr	r2, [r7, #32]
 80072ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a4d      	ldr	r2, [pc, #308]	; (8007434 <HAL_I2C_Mem_Write+0x1f0>)
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007302:	88f8      	ldrh	r0, [r7, #6]
 8007304:	893a      	ldrh	r2, [r7, #8]
 8007306:	8979      	ldrh	r1, [r7, #10]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4603      	mov	r3, r0
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fab6 	bl	8007884 <I2C_RequestMemoryWrite>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d052      	beq.n	80073c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e081      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fd00 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00d      	beq.n	800734e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b04      	cmp	r3, #4
 8007338:	d107      	bne.n	800734a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e06b      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d11b      	bne.n	80073c4 <HAL_I2C_Mem_Write+0x180>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d017      	beq.n	80073c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1aa      	bne.n	8007322 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fcec 	bl	8007dae <I2C_WaitOnBTFFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00d      	beq.n	80073f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d107      	bne.n	80073f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e016      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	00100002 	.word	0x00100002
 8007434:	ffff0000 	.word	0xffff0000

08007438 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08c      	sub	sp, #48	; 0x30
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	4603      	mov	r3, r0
 8007448:	817b      	strh	r3, [r7, #10]
 800744a:	460b      	mov	r3, r1
 800744c:	813b      	strh	r3, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007452:	f7fe f8bd 	bl	80055d0 <HAL_GetTick>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b20      	cmp	r3, #32
 8007462:	f040 8208 	bne.w	8007876 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	2319      	movs	r3, #25
 800746c:	2201      	movs	r2, #1
 800746e:	497b      	ldr	r1, [pc, #492]	; (800765c <HAL_I2C_Mem_Read+0x224>)
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fb85 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800747c:	2302      	movs	r3, #2
 800747e:	e1fb      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_I2C_Mem_Read+0x56>
 800748a:	2302      	movs	r3, #2
 800748c:	e1f4      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d007      	beq.n	80074b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2222      	movs	r2, #34	; 0x22
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80074e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a5b      	ldr	r2, [pc, #364]	; (8007660 <HAL_I2C_Mem_Read+0x228>)
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074f6:	88f8      	ldrh	r0, [r7, #6]
 80074f8:	893a      	ldrh	r2, [r7, #8]
 80074fa:	8979      	ldrh	r1, [r7, #10]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fa52 	bl	80079b0 <I2C_RequestMemoryRead>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e1b0      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751a:	2b00      	cmp	r3, #0
 800751c:	d113      	bne.n	8007546 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751e:	2300      	movs	r3, #0
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	623b      	str	r3, [r7, #32]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e184      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	2b01      	cmp	r3, #1
 800754c:	d11b      	bne.n	8007586 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755e:	2300      	movs	r3, #0
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	61fb      	str	r3, [r7, #28]
 8007572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e164      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758a:	2b02      	cmp	r3, #2
 800758c:	d11b      	bne.n	80075c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	e144      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075dc:	e138      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	f200 80f1 	bhi.w	80077ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d123      	bne.n	8007638 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fc1b 	bl	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e139      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007636:	e10b      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763c:	2b02      	cmp	r3, #2
 800763e:	d14e      	bne.n	80076de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	2200      	movs	r2, #0
 8007648:	4906      	ldr	r1, [pc, #24]	; (8007664 <HAL_I2C_Mem_Read+0x22c>)
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fa98 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e10e      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
 800765a:	bf00      	nop
 800765c:	00100002 	.word	0x00100002
 8007660:	ffff0000 	.word	0xffff0000
 8007664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076dc:	e0b8      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	2200      	movs	r2, #0
 80076e6:	4966      	ldr	r1, [pc, #408]	; (8007880 <HAL_I2C_Mem_Read+0x448>)
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa49 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0bf      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2200      	movs	r2, #0
 8007742:	494f      	ldr	r1, [pc, #316]	; (8007880 <HAL_I2C_Mem_Read+0x448>)
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fa1b 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e091      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077c8:	e042      	b.n	8007850 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fb2e 	bl	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e04c      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d118      	bne.n	8007850 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	f47f aec2 	bne.w	80075de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3728      	adds	r7, #40	; 0x28
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	00010004 	.word	0x00010004

08007884 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	460b      	mov	r3, r1
 8007898:	813b      	strh	r3, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f960 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d4:	d103      	bne.n	80078de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e05f      	b.n	80079a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	492d      	ldr	r1, [pc, #180]	; (80079ac <I2C_RequestMemoryWrite+0x128>)
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f998 	bl	8007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e04c      	b.n	80079a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	6a39      	ldr	r1, [r7, #32]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fa02 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	2b04      	cmp	r3, #4
 8007934:	d107      	bne.n	8007946 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007944:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e02b      	b.n	80079a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d105      	bne.n	800795c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007950:	893b      	ldrh	r3, [r7, #8]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	611a      	str	r2, [r3, #16]
 800795a:	e021      	b.n	80079a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800796a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796c:	6a39      	ldr	r1, [r7, #32]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f9dc 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b04      	cmp	r3, #4
 8007980:	d107      	bne.n	8007992 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007990:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e005      	b.n	80079a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	00010002 	.word	0x00010002

080079b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	461a      	mov	r2, r3
 80079be:	4603      	mov	r3, r0
 80079c0:	817b      	strh	r3, [r7, #10]
 80079c2:	460b      	mov	r3, r1
 80079c4:	813b      	strh	r3, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f8c2 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	d103      	bne.n	8007a1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e0aa      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a1e:	897b      	ldrh	r3, [r7, #10]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	6a3a      	ldr	r2, [r7, #32]
 8007a32:	4952      	ldr	r1, [pc, #328]	; (8007b7c <I2C_RequestMemoryRead+0x1cc>)
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f8fa 	bl	8007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e097      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5c:	6a39      	ldr	r1, [r7, #32]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f964 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00d      	beq.n	8007a86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d107      	bne.n	8007a82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e076      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d105      	bne.n	8007a98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a8c:	893b      	ldrh	r3, [r7, #8]
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	611a      	str	r2, [r3, #16]
 8007a96:	e021      	b.n	8007adc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a98:	893b      	ldrh	r3, [r7, #8]
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa8:	6a39      	ldr	r1, [r7, #32]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f93e 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00d      	beq.n	8007ad2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d107      	bne.n	8007ace <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007acc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e050      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ad2:	893b      	ldrh	r3, [r7, #8]
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	6a39      	ldr	r1, [r7, #32]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f923 	bl	8007d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d107      	bne.n	8007b04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e035      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 f82b 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00d      	beq.n	8007b4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3e:	d103      	bne.n	8007b48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e013      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b4c:	897b      	ldrh	r3, [r7, #10]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f043 0301 	orr.w	r3, r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	6a3a      	ldr	r2, [r7, #32]
 8007b60:	4906      	ldr	r1, [pc, #24]	; (8007b7c <I2C_RequestMemoryRead+0x1cc>)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f863 	bl	8007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	00010002 	.word	0x00010002

08007b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b90:	e025      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d021      	beq.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9a:	f7fd fd19 	bl	80055d0 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d302      	bcc.n	8007bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d116      	bne.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e023      	b.n	8007c26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d10d      	bne.n	8007c04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	43da      	mvns	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	e00c      	b.n	8007c1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	43da      	mvns	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d0b6      	beq.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c3c:	e051      	b.n	8007ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4c:	d123      	bne.n	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f043 0204 	orr.w	r2, r3, #4
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e046      	b.n	8007d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d021      	beq.n	8007ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c9e:	f7fd fc97 	bl	80055d0 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d302      	bcc.n	8007cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d116      	bne.n	8007ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	f043 0220 	orr.w	r2, r3, #32
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e020      	b.n	8007d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	0c1b      	lsrs	r3, r3, #16
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d10c      	bne.n	8007d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bf14      	ite	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	2300      	moveq	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e00b      	b.n	8007d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	43da      	mvns	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf14      	ite	ne
 8007d18:	2301      	movne	r3, #1
 8007d1a:	2300      	moveq	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d18d      	bne.n	8007c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d38:	e02d      	b.n	8007d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 f8ce 	bl	8007edc <I2C_IsAcknowledgeFailed>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e02d      	b.n	8007da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d021      	beq.n	8007d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d52:	f7fd fc3d 	bl	80055d0 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d302      	bcc.n	8007d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d116      	bne.n	8007d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	f043 0220 	orr.w	r2, r3, #32
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e007      	b.n	8007da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b80      	cmp	r3, #128	; 0x80
 8007da2:	d1ca      	bne.n	8007d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dba:	e02d      	b.n	8007e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f88d 	bl	8007edc <I2C_IsAcknowledgeFailed>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e02d      	b.n	8007e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d021      	beq.n	8007e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd4:	f7fd fbfc 	bl	80055d0 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d302      	bcc.n	8007dea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d116      	bne.n	8007e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e007      	b.n	8007e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d1ca      	bne.n	8007dbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e3c:	e042      	b.n	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d119      	bne.n	8007e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0210 	mvn.w	r2, #16
 8007e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e029      	b.n	8007ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e80:	f7fd fba6 	bl	80055d0 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d302      	bcc.n	8007e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d116      	bne.n	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	f043 0220 	orr.w	r2, r3, #32
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e007      	b.n	8007ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d1b5      	bne.n	8007e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef2:	d11b      	bne.n	8007f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007f46:	2300      	movs	r3, #0
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	4a1f      	ldr	r2, [pc, #124]	; (8007fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8007f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f54:	6413      	str	r3, [r2, #64]	; 0x40
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007f62:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f68:	f7fd fb32 	bl	80055d0 <HAL_GetTick>
 8007f6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007f6e:	e009      	b.n	8007f84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f70:	f7fd fb2e 	bl	80055d0 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f7e:	d901      	bls.n	8007f84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e01f      	b.n	8007fc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007f84:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f90:	d1ee      	bne.n	8007f70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f98:	f7fd fb1a 	bl	80055d0 <HAL_GetTick>
 8007f9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f9e:	e009      	b.n	8007fb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007fa0:	f7fd fb16 	bl	80055d0 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fae:	d901      	bls.n	8007fb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e007      	b.n	8007fc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc0:	d1ee      	bne.n	8007fa0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	420e0040 	.word	0x420e0040
 8007fd4:	40007000 	.word	0x40007000
 8007fd8:	420e0044 	.word	0x420e0044

08007fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e0cc      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ff0:	4b68      	ldr	r3, [pc, #416]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90c      	bls.n	8008018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffe:	4b65      	ldr	r3, [pc, #404]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b63      	ldr	r3, [pc, #396]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0b8      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008030:	4b59      	ldr	r3, [pc, #356]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	4a58      	ldr	r2, [pc, #352]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800803a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008048:	4b53      	ldr	r3, [pc, #332]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	4a52      	ldr	r2, [pc, #328]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008054:	4b50      	ldr	r3, [pc, #320]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	494d      	ldr	r1, [pc, #308]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d044      	beq.n	80080fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800807a:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d119      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d003      	beq.n	800809a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008096:	2b03      	cmp	r3, #3
 8008098:	d107      	bne.n	80080aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809a:	4b3f      	ldr	r3, [pc, #252]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e06f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080aa:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e067      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ba:	4b37      	ldr	r3, [pc, #220]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f023 0203 	bic.w	r2, r3, #3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4934      	ldr	r1, [pc, #208]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080cc:	f7fd fa80 	bl	80055d0 <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d2:	e00a      	b.n	80080ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d4:	f7fd fa7c 	bl	80055d0 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e04f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 020c 	and.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d1eb      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080fc:	4b25      	ldr	r3, [pc, #148]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d20c      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810a:	4b22      	ldr	r3, [pc, #136]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e032      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4916      	ldr	r1, [pc, #88]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008162:	f000 f855 	bl	8008210 <HAL_RCC_GetSysClockFreq>
 8008166:	4602      	mov	r2, r0
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	490a      	ldr	r1, [pc, #40]	; (800819c <HAL_RCC_ClockConfig+0x1c0>)
 8008174:	5ccb      	ldrb	r3, [r1, r3]
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 800817c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd f9e0 	bl	8005548 <HAL_InitTick>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40023c00 	.word	0x40023c00
 8008198:	40023800 	.word	0x40023800
 800819c:	080111f0 	.word	0x080111f0
 80081a0:	20000008 	.word	0x20000008
 80081a4:	2000000c 	.word	0x2000000c

080081a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081ac:	4b03      	ldr	r3, [pc, #12]	; (80081bc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ae:	681b      	ldr	r3, [r3, #0]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000008 	.word	0x20000008

080081c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081c4:	f7ff fff0 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	0a9b      	lsrs	r3, r3, #10
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	4903      	ldr	r1, [pc, #12]	; (80081e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081d6:	5ccb      	ldrb	r3, [r1, r3]
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40023800 	.word	0x40023800
 80081e4:	08011200 	.word	0x08011200

080081e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081ec:	f7ff ffdc 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80081f0:	4602      	mov	r2, r0
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0b5b      	lsrs	r3, r3, #13
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	4903      	ldr	r1, [pc, #12]	; (800820c <HAL_RCC_GetPCLK2Freq+0x24>)
 80081fe:	5ccb      	ldrb	r3, [r1, r3]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40023800 	.word	0x40023800
 800820c:	08011200 	.word	0x08011200

08008210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008214:	b0ae      	sub	sp, #184	; 0xb8
 8008216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008236:	4bcb      	ldr	r3, [pc, #812]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 030c 	and.w	r3, r3, #12
 800823e:	2b0c      	cmp	r3, #12
 8008240:	f200 8206 	bhi.w	8008650 <HAL_RCC_GetSysClockFreq+0x440>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <HAL_RCC_GetSysClockFreq+0x3c>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	08008281 	.word	0x08008281
 8008250:	08008651 	.word	0x08008651
 8008254:	08008651 	.word	0x08008651
 8008258:	08008651 	.word	0x08008651
 800825c:	08008289 	.word	0x08008289
 8008260:	08008651 	.word	0x08008651
 8008264:	08008651 	.word	0x08008651
 8008268:	08008651 	.word	0x08008651
 800826c:	08008291 	.word	0x08008291
 8008270:	08008651 	.word	0x08008651
 8008274:	08008651 	.word	0x08008651
 8008278:	08008651 	.word	0x08008651
 800827c:	08008481 	.word	0x08008481
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008280:	4bb9      	ldr	r3, [pc, #740]	; (8008568 <HAL_RCC_GetSysClockFreq+0x358>)
 8008282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008286:	e1e7      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008288:	4bb8      	ldr	r3, [pc, #736]	; (800856c <HAL_RCC_GetSysClockFreq+0x35c>)
 800828a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800828e:	e1e3      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008290:	4bb4      	ldr	r3, [pc, #720]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800829c:	4bb1      	ldr	r3, [pc, #708]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d071      	beq.n	800838c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a8:	4bae      	ldr	r3, [pc, #696]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	099b      	lsrs	r3, r3, #6
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80082b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f04f 0100 	mov.w	r1, #0
 80082da:	0159      	lsls	r1, r3, #5
 80082dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082e0:	0150      	lsls	r0, r2, #5
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4621      	mov	r1, r4
 80082e8:	1a51      	subs	r1, r2, r1
 80082ea:	6439      	str	r1, [r7, #64]	; 0x40
 80082ec:	4629      	mov	r1, r5
 80082ee:	eb63 0301 	sbc.w	r3, r3, r1
 80082f2:	647b      	str	r3, [r7, #68]	; 0x44
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008300:	4649      	mov	r1, r9
 8008302:	018b      	lsls	r3, r1, #6
 8008304:	4641      	mov	r1, r8
 8008306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800830a:	4641      	mov	r1, r8
 800830c:	018a      	lsls	r2, r1, #6
 800830e:	4641      	mov	r1, r8
 8008310:	1a51      	subs	r1, r2, r1
 8008312:	63b9      	str	r1, [r7, #56]	; 0x38
 8008314:	4649      	mov	r1, r9
 8008316:	eb63 0301 	sbc.w	r3, r3, r1
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008328:	4649      	mov	r1, r9
 800832a:	00cb      	lsls	r3, r1, #3
 800832c:	4641      	mov	r1, r8
 800832e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008332:	4641      	mov	r1, r8
 8008334:	00ca      	lsls	r2, r1, #3
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	4603      	mov	r3, r0
 800833c:	4622      	mov	r2, r4
 800833e:	189b      	adds	r3, r3, r2
 8008340:	633b      	str	r3, [r7, #48]	; 0x30
 8008342:	462b      	mov	r3, r5
 8008344:	460a      	mov	r2, r1
 8008346:	eb42 0303 	adc.w	r3, r2, r3
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008358:	4629      	mov	r1, r5
 800835a:	024b      	lsls	r3, r1, #9
 800835c:	4621      	mov	r1, r4
 800835e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008362:	4621      	mov	r1, r4
 8008364:	024a      	lsls	r2, r1, #9
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836e:	2200      	movs	r2, #0
 8008370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008378:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800837c:	f7f8 fe02 	bl	8000f84 <__aeabi_uldivmod>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4613      	mov	r3, r2
 8008386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800838a:	e067      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800838c:	4b75      	ldr	r3, [pc, #468]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	099b      	lsrs	r3, r3, #6
 8008392:	2200      	movs	r2, #0
 8008394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008398:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800839c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80083a6:	2300      	movs	r3, #0
 80083a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f04f 0100 	mov.w	r1, #0
 80083ba:	0159      	lsls	r1, r3, #5
 80083bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083c0:	0150      	lsls	r0, r2, #5
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4621      	mov	r1, r4
 80083c8:	1a51      	subs	r1, r2, r1
 80083ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80083cc:	4629      	mov	r1, r5
 80083ce:	eb63 0301 	sbc.w	r3, r3, r1
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80083e0:	4649      	mov	r1, r9
 80083e2:	018b      	lsls	r3, r1, #6
 80083e4:	4641      	mov	r1, r8
 80083e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083ea:	4641      	mov	r1, r8
 80083ec:	018a      	lsls	r2, r1, #6
 80083ee:	4641      	mov	r1, r8
 80083f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80083f4:	4649      	mov	r1, r9
 80083f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008406:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800840a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800840e:	4692      	mov	sl, r2
 8008410:	469b      	mov	fp, r3
 8008412:	4623      	mov	r3, r4
 8008414:	eb1a 0303 	adds.w	r3, sl, r3
 8008418:	623b      	str	r3, [r7, #32]
 800841a:	462b      	mov	r3, r5
 800841c:	eb4b 0303 	adc.w	r3, fp, r3
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800842e:	4629      	mov	r1, r5
 8008430:	028b      	lsls	r3, r1, #10
 8008432:	4621      	mov	r1, r4
 8008434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008438:	4621      	mov	r1, r4
 800843a:	028a      	lsls	r2, r1, #10
 800843c:	4610      	mov	r0, r2
 800843e:	4619      	mov	r1, r3
 8008440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008444:	2200      	movs	r2, #0
 8008446:	673b      	str	r3, [r7, #112]	; 0x70
 8008448:	677a      	str	r2, [r7, #116]	; 0x74
 800844a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800844e:	f7f8 fd99 	bl	8000f84 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4613      	mov	r3, r2
 8008458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800845c:	4b41      	ldr	r3, [pc, #260]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	3301      	adds	r3, #1
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800846e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008476:	fbb2 f3f3 	udiv	r3, r2, r3
 800847a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800847e:	e0eb      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008480:	4b38      	ldr	r3, [pc, #224]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800848c:	4b35      	ldr	r3, [pc, #212]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d06b      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <HAL_RCC_GetSysClockFreq+0x354>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	099b      	lsrs	r3, r3, #6
 800849e:	2200      	movs	r2, #0
 80084a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084aa:	663b      	str	r3, [r7, #96]	; 0x60
 80084ac:	2300      	movs	r3, #0
 80084ae:	667b      	str	r3, [r7, #100]	; 0x64
 80084b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80084b4:	4622      	mov	r2, r4
 80084b6:	462b      	mov	r3, r5
 80084b8:	f04f 0000 	mov.w	r0, #0
 80084bc:	f04f 0100 	mov.w	r1, #0
 80084c0:	0159      	lsls	r1, r3, #5
 80084c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084c6:	0150      	lsls	r0, r2, #5
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4621      	mov	r1, r4
 80084ce:	1a51      	subs	r1, r2, r1
 80084d0:	61b9      	str	r1, [r7, #24]
 80084d2:	4629      	mov	r1, r5
 80084d4:	eb63 0301 	sbc.w	r3, r3, r1
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80084e6:	4659      	mov	r1, fp
 80084e8:	018b      	lsls	r3, r1, #6
 80084ea:	4651      	mov	r1, sl
 80084ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084f0:	4651      	mov	r1, sl
 80084f2:	018a      	lsls	r2, r1, #6
 80084f4:	4651      	mov	r1, sl
 80084f6:	ebb2 0801 	subs.w	r8, r2, r1
 80084fa:	4659      	mov	r1, fp
 80084fc:	eb63 0901 	sbc.w	r9, r3, r1
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800850c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008514:	4690      	mov	r8, r2
 8008516:	4699      	mov	r9, r3
 8008518:	4623      	mov	r3, r4
 800851a:	eb18 0303 	adds.w	r3, r8, r3
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	462b      	mov	r3, r5
 8008522:	eb49 0303 	adc.w	r3, r9, r3
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008534:	4629      	mov	r1, r5
 8008536:	024b      	lsls	r3, r1, #9
 8008538:	4621      	mov	r1, r4
 800853a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800853e:	4621      	mov	r1, r4
 8008540:	024a      	lsls	r2, r1, #9
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800854a:	2200      	movs	r2, #0
 800854c:	65bb      	str	r3, [r7, #88]	; 0x58
 800854e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008550:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008554:	f7f8 fd16 	bl	8000f84 <__aeabi_uldivmod>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4613      	mov	r3, r2
 800855e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008562:	e065      	b.n	8008630 <HAL_RCC_GetSysClockFreq+0x420>
 8008564:	40023800 	.word	0x40023800
 8008568:	00f42400 	.word	0x00f42400
 800856c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008570:	4b3d      	ldr	r3, [pc, #244]	; (8008668 <HAL_RCC_GetSysClockFreq+0x458>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	099b      	lsrs	r3, r3, #6
 8008576:	2200      	movs	r2, #0
 8008578:	4618      	mov	r0, r3
 800857a:	4611      	mov	r1, r2
 800857c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
 8008582:	2300      	movs	r3, #0
 8008584:	657b      	str	r3, [r7, #84]	; 0x54
 8008586:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800858a:	4642      	mov	r2, r8
 800858c:	464b      	mov	r3, r9
 800858e:	f04f 0000 	mov.w	r0, #0
 8008592:	f04f 0100 	mov.w	r1, #0
 8008596:	0159      	lsls	r1, r3, #5
 8008598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800859c:	0150      	lsls	r0, r2, #5
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4641      	mov	r1, r8
 80085a4:	1a51      	subs	r1, r2, r1
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	4649      	mov	r1, r9
 80085aa:	eb63 0301 	sbc.w	r3, r3, r1
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80085bc:	4659      	mov	r1, fp
 80085be:	018b      	lsls	r3, r1, #6
 80085c0:	4651      	mov	r1, sl
 80085c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085c6:	4651      	mov	r1, sl
 80085c8:	018a      	lsls	r2, r1, #6
 80085ca:	4651      	mov	r1, sl
 80085cc:	1a54      	subs	r4, r2, r1
 80085ce:	4659      	mov	r1, fp
 80085d0:	eb63 0501 	sbc.w	r5, r3, r1
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	00eb      	lsls	r3, r5, #3
 80085de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085e2:	00e2      	lsls	r2, r4, #3
 80085e4:	4614      	mov	r4, r2
 80085e6:	461d      	mov	r5, r3
 80085e8:	4643      	mov	r3, r8
 80085ea:	18e3      	adds	r3, r4, r3
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	464b      	mov	r3, r9
 80085f0:	eb45 0303 	adc.w	r3, r5, r3
 80085f4:	607b      	str	r3, [r7, #4]
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008602:	4629      	mov	r1, r5
 8008604:	028b      	lsls	r3, r1, #10
 8008606:	4621      	mov	r1, r4
 8008608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800860c:	4621      	mov	r1, r4
 800860e:	028a      	lsls	r2, r1, #10
 8008610:	4610      	mov	r0, r2
 8008612:	4619      	mov	r1, r3
 8008614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008618:	2200      	movs	r2, #0
 800861a:	64bb      	str	r3, [r7, #72]	; 0x48
 800861c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800861e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008622:	f7f8 fcaf 	bl	8000f84 <__aeabi_uldivmod>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4613      	mov	r3, r2
 800862c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008630:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <HAL_RCC_GetSysClockFreq+0x458>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	0f1b      	lsrs	r3, r3, #28
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800863e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008646:	fbb2 f3f3 	udiv	r3, r2, r3
 800864a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800864e:	e003      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <HAL_RCC_GetSysClockFreq+0x45c>)
 8008652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800865c:	4618      	mov	r0, r3
 800865e:	37b8      	adds	r7, #184	; 0xb8
 8008660:	46bd      	mov	sp, r7
 8008662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008666:	bf00      	nop
 8008668:	40023800 	.word	0x40023800
 800866c:	00f42400 	.word	0x00f42400

08008670 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e28d      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8083 	beq.w	8008796 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008690:	4b94      	ldr	r3, [pc, #592]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 030c 	and.w	r3, r3, #12
 8008698:	2b04      	cmp	r3, #4
 800869a:	d019      	beq.n	80086d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800869c:	4b91      	ldr	r3, [pc, #580]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d106      	bne.n	80086b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80086a8:	4b8e      	ldr	r3, [pc, #568]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b4:	d00c      	beq.n	80086d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086b6:	4b8b      	ldr	r3, [pc, #556]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80086be:	2b0c      	cmp	r3, #12
 80086c0:	d112      	bne.n	80086e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086c2:	4b88      	ldr	r3, [pc, #544]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ce:	d10b      	bne.n	80086e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d0:	4b84      	ldr	r3, [pc, #528]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d05b      	beq.n	8008794 <HAL_RCC_OscConfig+0x124>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d157      	bne.n	8008794 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e25a      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f0:	d106      	bne.n	8008700 <HAL_RCC_OscConfig+0x90>
 80086f2:	4b7c      	ldr	r3, [pc, #496]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a7b      	ldr	r2, [pc, #492]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80086f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	e01d      	b.n	800873c <HAL_RCC_OscConfig+0xcc>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008708:	d10c      	bne.n	8008724 <HAL_RCC_OscConfig+0xb4>
 800870a:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a75      	ldr	r2, [pc, #468]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4b73      	ldr	r3, [pc, #460]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a72      	ldr	r2, [pc, #456]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 800871c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	e00b      	b.n	800873c <HAL_RCC_OscConfig+0xcc>
 8008724:	4b6f      	ldr	r3, [pc, #444]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a6e      	ldr	r2, [pc, #440]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 800872a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a6b      	ldr	r2, [pc, #428]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800873a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d013      	beq.n	800876c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fc ff44 	bl	80055d0 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800874c:	f7fc ff40 	bl	80055d0 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b64      	cmp	r3, #100	; 0x64
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e21f      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800875e:	4b61      	ldr	r3, [pc, #388]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f0      	beq.n	800874c <HAL_RCC_OscConfig+0xdc>
 800876a:	e014      	b.n	8008796 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fc ff30 	bl	80055d0 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008774:	f7fc ff2c 	bl	80055d0 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b64      	cmp	r3, #100	; 0x64
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e20b      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008786:	4b57      	ldr	r3, [pc, #348]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f0      	bne.n	8008774 <HAL_RCC_OscConfig+0x104>
 8008792:	e000      	b.n	8008796 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d06f      	beq.n	8008882 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80087a2:	4b50      	ldr	r3, [pc, #320]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 030c 	and.w	r3, r3, #12
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d017      	beq.n	80087de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80087ae:	4b4d      	ldr	r3, [pc, #308]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d105      	bne.n	80087c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80087ba:	4b4a      	ldr	r3, [pc, #296]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c6:	4b47      	ldr	r3, [pc, #284]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80087ce:	2b0c      	cmp	r3, #12
 80087d0:	d11c      	bne.n	800880c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087d2:	4b44      	ldr	r3, [pc, #272]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d116      	bne.n	800880c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087de:	4b41      	ldr	r3, [pc, #260]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_RCC_OscConfig+0x186>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d001      	beq.n	80087f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e1d3      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f6:	4b3b      	ldr	r3, [pc, #236]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4937      	ldr	r1, [pc, #220]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008806:	4313      	orrs	r3, r2
 8008808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800880a:	e03a      	b.n	8008882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d020      	beq.n	8008856 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008814:	4b34      	ldr	r3, [pc, #208]	; (80088e8 <HAL_RCC_OscConfig+0x278>)
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7fc fed9 	bl	80055d0 <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008822:	f7fc fed5 	bl	80055d0 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e1b4      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008834:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008840:	4b28      	ldr	r3, [pc, #160]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4925      	ldr	r1, [pc, #148]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008850:	4313      	orrs	r3, r2
 8008852:	600b      	str	r3, [r1, #0]
 8008854:	e015      	b.n	8008882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <HAL_RCC_OscConfig+0x278>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885c:	f7fc feb8 	bl	80055d0 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008864:	f7fc feb4 	bl	80055d0 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e193      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008876:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f0      	bne.n	8008864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d036      	beq.n	80088fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <HAL_RCC_OscConfig+0x27c>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889c:	f7fc fe98 	bl	80055d0 <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a4:	f7fc fe94 	bl	80055d0 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e173      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <HAL_RCC_OscConfig+0x274>)
 80088b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <HAL_RCC_OscConfig+0x234>
 80088c2:	e01b      	b.n	80088fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_RCC_OscConfig+0x27c>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ca:	f7fc fe81 	bl	80055d0 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088d0:	e00e      	b.n	80088f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088d2:	f7fc fe7d 	bl	80055d0 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d907      	bls.n	80088f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e15c      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
 80088e4:	40023800 	.word	0x40023800
 80088e8:	42470000 	.word	0x42470000
 80088ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088f0:	4b8a      	ldr	r3, [pc, #552]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80088f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1ea      	bne.n	80088d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8097 	beq.w	8008a38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800890e:	4b83      	ldr	r3, [pc, #524]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10f      	bne.n	800893a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	4b7f      	ldr	r3, [pc, #508]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	4a7e      	ldr	r2, [pc, #504]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6413      	str	r3, [r2, #64]	; 0x40
 800892a:	4b7c      	ldr	r3, [pc, #496]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800893a:	4b79      	ldr	r3, [pc, #484]	; (8008b20 <HAL_RCC_OscConfig+0x4b0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d118      	bne.n	8008978 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008946:	4b76      	ldr	r3, [pc, #472]	; (8008b20 <HAL_RCC_OscConfig+0x4b0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a75      	ldr	r2, [pc, #468]	; (8008b20 <HAL_RCC_OscConfig+0x4b0>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008952:	f7fc fe3d 	bl	80055d0 <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008958:	e008      	b.n	800896c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895a:	f7fc fe39 	bl	80055d0 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e118      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800896c:	4b6c      	ldr	r3, [pc, #432]	; (8008b20 <HAL_RCC_OscConfig+0x4b0>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d106      	bne.n	800898e <HAL_RCC_OscConfig+0x31e>
 8008980:	4b66      	ldr	r3, [pc, #408]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008984:	4a65      	ldr	r2, [pc, #404]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008986:	f043 0301 	orr.w	r3, r3, #1
 800898a:	6713      	str	r3, [r2, #112]	; 0x70
 800898c:	e01c      	b.n	80089c8 <HAL_RCC_OscConfig+0x358>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b05      	cmp	r3, #5
 8008994:	d10c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x340>
 8008996:	4b61      	ldr	r3, [pc, #388]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a60      	ldr	r2, [pc, #384]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	4b5e      	ldr	r3, [pc, #376]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	4a5d      	ldr	r2, [pc, #372]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
 80089ae:	e00b      	b.n	80089c8 <HAL_RCC_OscConfig+0x358>
 80089b0:	4b5a      	ldr	r3, [pc, #360]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b4:	4a59      	ldr	r2, [pc, #356]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089b6:	f023 0301 	bic.w	r3, r3, #1
 80089ba:	6713      	str	r3, [r2, #112]	; 0x70
 80089bc:	4b57      	ldr	r3, [pc, #348]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a56      	ldr	r2, [pc, #344]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089c2:	f023 0304 	bic.w	r3, r3, #4
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d015      	beq.n	80089fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d0:	f7fc fdfe 	bl	80055d0 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d6:	e00a      	b.n	80089ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089d8:	f7fc fdfa 	bl	80055d0 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e0d7      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ee:	4b4b      	ldr	r3, [pc, #300]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ee      	beq.n	80089d8 <HAL_RCC_OscConfig+0x368>
 80089fa:	e014      	b.n	8008a26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fc:	f7fc fde8 	bl	80055d0 <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a02:	e00a      	b.n	8008a1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a04:	f7fc fde4 	bl	80055d0 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e0c1      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a1a:	4b40      	ldr	r3, [pc, #256]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1ee      	bne.n	8008a04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d105      	bne.n	8008a38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2c:	4b3b      	ldr	r3, [pc, #236]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	4a3a      	ldr	r2, [pc, #232]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80ad 	beq.w	8008b9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a42:	4b36      	ldr	r3, [pc, #216]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d060      	beq.n	8008b10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d145      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a56:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <HAL_RCC_OscConfig+0x4b4>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5c:	f7fc fdb8 	bl	80055d0 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a64:	f7fc fdb4 	bl	80055d0 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e093      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a76:	4b29      	ldr	r3, [pc, #164]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	019b      	lsls	r3, r3, #6
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aac:	071b      	lsls	r3, r3, #28
 8008aae:	491b      	ldr	r1, [pc, #108]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <HAL_RCC_OscConfig+0x4b4>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fc fd89 	bl	80055d0 <HAL_GetTick>
 8008abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac2:	f7fc fd85 	bl	80055d0 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e064      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ad4:	4b11      	ldr	r3, [pc, #68]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x452>
 8008ae0:	e05c      	b.n	8008b9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <HAL_RCC_OscConfig+0x4b4>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae8:	f7fc fd72 	bl	80055d0 <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af0:	f7fc fd6e 	bl	80055d0 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e04d      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <HAL_RCC_OscConfig+0x4ac>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f0      	bne.n	8008af0 <HAL_RCC_OscConfig+0x480>
 8008b0e:	e045      	b.n	8008b9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d107      	bne.n	8008b28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e040      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	40007000 	.word	0x40007000
 8008b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b28:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <HAL_RCC_OscConfig+0x538>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d030      	beq.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d129      	bne.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d122      	bne.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b58:	4013      	ands	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d119      	bne.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	3b01      	subs	r3, #1
 8008b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d10f      	bne.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d107      	bne.n	8008b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d001      	beq.n	8008b9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40023800 	.word	0x40023800

08008bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e03f      	b.n	8008c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fb ff52 	bl	8004a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2224      	movs	r2, #36	; 0x24
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f87b 	bl	8009cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e021      	b.n	8008c9c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2224      	movs	r2, #36	; 0x24
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c6e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7fc f861 	bl	8004d38 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	; 0x28
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d17c      	bne.n	8008dbe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <HAL_UART_Transmit+0x2c>
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e075      	b.n	8008dc0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UART_Transmit+0x3e>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e06e      	b.n	8008dc0 <HAL_UART_Transmit+0x11c>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2221      	movs	r2, #33	; 0x21
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cf8:	f7fc fc6a 	bl	80055d0 <HAL_GetTick>
 8008cfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	88fa      	ldrh	r2, [r7, #6]
 8008d08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d108      	bne.n	8008d26 <HAL_UART_Transmit+0x82>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	61bb      	str	r3, [r7, #24]
 8008d24:	e003      	b.n	8008d2e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d36:	e02a      	b.n	8008d8e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2180      	movs	r1, #128	; 0x80
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fd03 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e036      	b.n	8008dc0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	61bb      	str	r3, [r7, #24]
 8008d6e:	e007      	b.n	8008d80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1cf      	bne.n	8008d38 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2140      	movs	r1, #64	; 0x40
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fcd3 	bl	800974e <UART_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e006      	b.n	8008dc0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e000      	b.n	8008dc0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008dbe:	2302      	movs	r3, #2
  }
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3720      	adds	r7, #32
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	; 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d165      	bne.n	8008eae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_UART_Transmit_DMA+0x26>
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e05e      	b.n	8008eb0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_UART_Transmit_DMA+0x38>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e057      	b.n	8008eb0 <HAL_UART_Transmit_DMA+0xe8>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	88fa      	ldrh	r2, [r7, #6]
 8008e18:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2221      	movs	r2, #33	; 0x21
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2c:	4a22      	ldr	r2, [pc, #136]	; (8008eb8 <HAL_UART_Transmit_DMA+0xf0>)
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	4a21      	ldr	r2, [pc, #132]	; (8008ebc <HAL_UART_Transmit_DMA+0xf4>)
 8008e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	4a20      	ldr	r2, [pc, #128]	; (8008ec0 <HAL_UART_Transmit_DMA+0xf8>)
 8008e3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e44:	2200      	movs	r2, #0
 8008e46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008e48:	f107 0308 	add.w	r3, r7, #8
 8008e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	6819      	ldr	r1, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	f7fd fa46 	bl	80062f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3314      	adds	r3, #20
 8008e7c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	617b      	str	r3, [r7, #20]
   return(result);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3314      	adds	r3, #20
 8008e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e96:	627a      	str	r2, [r7, #36]	; 0x24
 8008e98:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6a39      	ldr	r1, [r7, #32]
 8008e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e5      	bne.n	8008e76 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e000      	b.n	8008eb0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008eae:	2302      	movs	r3, #2
  }
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3730      	adds	r7, #48	; 0x30
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	080094a9 	.word	0x080094a9
 8008ebc:	08009543 	.word	0x08009543
 8008ec0:	080096bb 	.word	0x080096bb

08008ec4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	d11d      	bne.n	8008f1a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_UART_Receive_DMA+0x26>
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e016      	b.n	8008f1c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_UART_Receive_DMA+0x38>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e00f      	b.n	8008f1c <HAL_UART_Receive_DMA+0x58>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fc8b 	bl	800982c <UART_Start_Receive_DMA>
 8008f16:	4603      	mov	r3, r0
 8008f18:	e000      	b.n	8008f1c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f1a:	2302      	movs	r3, #2
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b0ba      	sub	sp, #232	; 0xe8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10f      	bne.n	8008f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <HAL_UART_IRQHandler+0x66>
 8008f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fdf7 	bl	8009b76 <UART_Receive_IT>
      return;
 8008f88:	e256      	b.n	8009438 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80de 	beq.w	8009150 <HAL_UART_IRQHandler+0x22c>
 8008f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80d1 	beq.w	8009150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <HAL_UART_IRQHandler+0xae>
 8008fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f043 0201 	orr.w	r2, r3, #1
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <HAL_UART_IRQHandler+0xd2>
 8008fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	f043 0202 	orr.w	r2, r3, #2
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <HAL_UART_IRQHandler+0xf6>
 8009002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	f043 0204 	orr.w	r2, r3, #4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800901a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901e:	f003 0308 	and.w	r3, r3, #8
 8009022:	2b00      	cmp	r3, #0
 8009024:	d011      	beq.n	800904a <HAL_UART_IRQHandler+0x126>
 8009026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d105      	bne.n	800903e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	f043 0208 	orr.w	r2, r3, #8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 81ed 	beq.w	800942e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_UART_IRQHandler+0x14e>
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fd82 	bl	8009b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	bf0c      	ite	eq
 8009080:	2301      	moveq	r3, #1
 8009082:	2300      	movne	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f003 0308 	and.w	r3, r3, #8
 8009092:	2b00      	cmp	r3, #0
 8009094:	d103      	bne.n	800909e <HAL_UART_IRQHandler+0x17a>
 8009096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d04f      	beq.n	800913e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc8a 	bl	80099b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d141      	bne.n	8009136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3314      	adds	r3, #20
 80090da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1d9      	bne.n	80090b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d013      	beq.n	800912e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	4a7d      	ldr	r2, [pc, #500]	; (8009300 <HAL_UART_IRQHandler+0x3dc>)
 800910c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd f9b4 	bl	8006480 <HAL_DMA_Abort_IT>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d016      	beq.n	800914c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	e00e      	b.n	800914c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9a4 	bl	800947c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	e00a      	b.n	800914c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9a0 	bl	800947c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800913c:	e006      	b.n	800914c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f99c 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800914a:	e170      	b.n	800942e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914c:	bf00      	nop
    return;
 800914e:	e16e      	b.n	800942e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	2b01      	cmp	r3, #1
 8009156:	f040 814a 	bne.w	80093ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800915a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915e:	f003 0310 	and.w	r3, r3, #16
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 8143 	beq.w	80093ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 813c 	beq.w	80093ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	f040 80b4 	bne.w	8009304 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8140 	beq.w	8009432 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091ba:	429a      	cmp	r2, r3
 80091bc:	f080 8139 	bcs.w	8009432 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d2:	f000 8088 	beq.w	80092e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	330c      	adds	r3, #12
 80091fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800920e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800921a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1d9      	bne.n	80091d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800924a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800924e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e1      	bne.n	8009222 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3314      	adds	r3, #20
 8009264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800926e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3314      	adds	r3, #20
 800927e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e3      	bne.n	800925e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b6:	f023 0310 	bic.w	r3, r3, #16
 80092ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	330c      	adds	r3, #12
 80092c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80092ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e3      	bne.n	80092a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fd f85d 	bl	80063a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f8ca 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092fc:	e099      	b.n	8009432 <HAL_UART_IRQHandler+0x50e>
 80092fe:	bf00      	nop
 8009300:	08009a7f 	.word	0x08009a7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800930c:	b29b      	uxth	r3, r3
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 808b 	beq.w	8009436 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8086 	beq.w	8009436 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	330c      	adds	r3, #12
 8009330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800934e:	647a      	str	r2, [r7, #68]	; 0x44
 8009350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800935c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e3      	bne.n	800932a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3314      	adds	r3, #20
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	623b      	str	r3, [r7, #32]
   return(result);
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3314      	adds	r3, #20
 8009382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009386:	633a      	str	r2, [r7, #48]	; 0x30
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800938c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e3      	bne.n	8009362 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	330c      	adds	r3, #12
 80093ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	330c      	adds	r3, #12
 80093c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093cc:	61fa      	str	r2, [r7, #28]
 80093ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	69b9      	ldr	r1, [r7, #24]
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	617b      	str	r3, [r7, #20]
   return(result);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e3      	bne.n	80093a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f852 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093ec:	e023      	b.n	8009436 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <HAL_UART_IRQHandler+0x4ea>
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fb4d 	bl	8009aa6 <UART_Transmit_IT>
    return;
 800940c:	e014      	b.n	8009438 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800940e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00e      	beq.n	8009438 <HAL_UART_IRQHandler+0x514>
 800941a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fb8d 	bl	8009b46 <UART_EndTransmit_IT>
    return;
 800942c:	e004      	b.n	8009438 <HAL_UART_IRQHandler+0x514>
    return;
 800942e:	bf00      	nop
 8009430:	e002      	b.n	8009438 <HAL_UART_IRQHandler+0x514>
      return;
 8009432:	bf00      	nop
 8009434:	e000      	b.n	8009438 <HAL_UART_IRQHandler+0x514>
      return;
 8009436:	bf00      	nop
  }
}
 8009438:	37e8      	adds	r7, #232	; 0xe8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop

08009440 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b090      	sub	sp, #64	; 0x40
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d137      	bne.n	8009534 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80094c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c6:	2200      	movs	r2, #0
 80094c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3314      	adds	r3, #20
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	623b      	str	r3, [r7, #32]
   return(result);
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3314      	adds	r3, #20
 80094e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ea:	633a      	str	r2, [r7, #48]	; 0x30
 80094ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e5      	bne.n	80094ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	60fb      	str	r3, [r7, #12]
   return(result);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009514:	637b      	str	r3, [r7, #52]	; 0x34
 8009516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	330c      	adds	r3, #12
 800951c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800951e:	61fa      	str	r2, [r7, #28]
 8009520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	69b9      	ldr	r1, [r7, #24]
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	617b      	str	r3, [r7, #20]
   return(result);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e5      	bne.n	80094fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009532:	e002      	b.n	800953a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009534:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009536:	f7ff ff83 	bl	8009440 <HAL_UART_TxCpltCallback>
}
 800953a:	bf00      	nop
 800953c:	3740      	adds	r7, #64	; 0x40
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff ff7f 	bl	8009454 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b09c      	sub	sp, #112	; 0x70
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009576:	2b00      	cmp	r3, #0
 8009578:	d172      	bne.n	8009660 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800957a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957c:	2200      	movs	r2, #0
 800957e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009596:	66bb      	str	r3, [r7, #104]	; 0x68
 8009598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	330c      	adds	r3, #12
 800959e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80095a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3314      	adds	r3, #20
 80095ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	667b      	str	r3, [r7, #100]	; 0x64
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3314      	adds	r3, #20
 80095d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095d4:	647a      	str	r2, [r7, #68]	; 0x44
 80095d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e5      	bne.n	80095b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3314      	adds	r3, #20
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	623b      	str	r3, [r7, #32]
   return(result);
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009608:	633a      	str	r2, [r7, #48]	; 0x30
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800960e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800961c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961e:	2220      	movs	r2, #32
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	2b01      	cmp	r3, #1
 800962a:	d119      	bne.n	8009660 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	e853 3f00 	ldrex	r3, [r3]
 800963a:	60fb      	str	r3, [r7, #12]
   return(result);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0310 	bic.w	r3, r3, #16
 8009642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	330c      	adds	r3, #12
 800964a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800964c:	61fa      	str	r2, [r7, #28]
 800964e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	69b9      	ldr	r1, [r7, #24]
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	617b      	str	r3, [r7, #20]
   return(result);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e5      	bne.n	800962c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	2b01      	cmp	r3, #1
 8009666:	d106      	bne.n	8009676 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800966c:	4619      	mov	r1, r3
 800966e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009670:	f7ff ff0e 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009674:	e002      	b.n	800967c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009676:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009678:	f7fb fd04 	bl	8005084 <HAL_UART_RxCpltCallback>
}
 800967c:	bf00      	nop
 800967e:	3770      	adds	r7, #112	; 0x70
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	2b01      	cmp	r3, #1
 8009698:	d108      	bne.n	80096ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4619      	mov	r1, r3
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff fef3 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096aa:	e002      	b.n	80096b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff fedb 	bl	8009468 <HAL_UART_RxHalfCpltCallback>
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b21      	cmp	r3, #33	; 0x21
 80096ec:	d108      	bne.n	8009700 <UART_DMAError+0x46>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2200      	movs	r2, #0
 80096f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80096fa:	68b8      	ldr	r0, [r7, #8]
 80096fc:	f000 f934 	bl	8009968 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970a:	2b40      	cmp	r3, #64	; 0x40
 800970c:	bf0c      	ite	eq
 800970e:	2301      	moveq	r3, #1
 8009710:	2300      	movne	r3, #0
 8009712:	b2db      	uxtb	r3, r3
 8009714:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b22      	cmp	r3, #34	; 0x22
 8009720:	d108      	bne.n	8009734 <UART_DMAError+0x7a>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d005      	beq.n	8009734 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2200      	movs	r2, #0
 800972c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800972e:	68b8      	ldr	r0, [r7, #8]
 8009730:	f000 f942 	bl	80099b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009738:	f043 0210 	orr.w	r2, r3, #16
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	f7ff fe9b 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009746:	bf00      	nop
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b090      	sub	sp, #64	; 0x40
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	603b      	str	r3, [r7, #0]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800975e:	e050      	b.n	8009802 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d04c      	beq.n	8009802 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x30>
 800976e:	f7fb ff2f 	bl	80055d0 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800977a:	429a      	cmp	r2, r3
 800977c:	d241      	bcs.n	8009802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	330c      	adds	r3, #12
 8009784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	330c      	adds	r3, #12
 800979c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800979e:	637a      	str	r2, [r7, #52]	; 0x34
 80097a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e5      	bne.n	800977e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3314      	adds	r3, #20
 80097b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	613b      	str	r3, [r7, #16]
   return(result);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f023 0301 	bic.w	r3, r3, #1
 80097c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3314      	adds	r3, #20
 80097d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097d2:	623a      	str	r2, [r7, #32]
 80097d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	69f9      	ldr	r1, [r7, #28]
 80097d8:	6a3a      	ldr	r2, [r7, #32]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	61bb      	str	r3, [r7, #24]
   return(result);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e5      	bne.n	80097b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2220      	movs	r2, #32
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e00f      	b.n	8009822 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4013      	ands	r3, r2
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	429a      	cmp	r2, r3
 8009810:	bf0c      	ite	eq
 8009812:	2301      	moveq	r3, #1
 8009814:	2300      	movne	r3, #0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	461a      	mov	r2, r3
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	429a      	cmp	r2, r3
 800981e:	d09f      	beq.n	8009760 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3740      	adds	r7, #64	; 0x40
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b098      	sub	sp, #96	; 0x60
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4613      	mov	r3, r2
 8009838:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	88fa      	ldrh	r2, [r7, #6]
 8009844:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2222      	movs	r2, #34	; 0x22
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	4a40      	ldr	r2, [pc, #256]	; (800995c <UART_Start_Receive_DMA+0x130>)
 800985a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	4a3f      	ldr	r2, [pc, #252]	; (8009960 <UART_Start_Receive_DMA+0x134>)
 8009862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009868:	4a3e      	ldr	r2, [pc, #248]	; (8009964 <UART_Start_Receive_DMA+0x138>)
 800986a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	2200      	movs	r2, #0
 8009872:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009874:	f107 0308 	add.w	r3, r7, #8
 8009878:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3304      	adds	r3, #4
 8009884:	4619      	mov	r1, r3
 8009886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	88fb      	ldrh	r3, [r7, #6]
 800988c:	f7fc fd30 	bl	80062f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	613b      	str	r3, [r7, #16]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	613b      	str	r3, [r7, #16]
 80098a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d019      	beq.n	80098ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	330c      	adds	r3, #12
 80098bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80098d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80098dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80098e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3314      	adds	r3, #20
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	657b      	str	r3, [r7, #84]	; 0x54
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800990a:	63ba      	str	r2, [r7, #56]	; 0x38
 800990c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3314      	adds	r3, #20
 8009924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	617b      	str	r3, [r7, #20]
   return(result);
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009934:	653b      	str	r3, [r7, #80]	; 0x50
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3314      	adds	r3, #20
 800993c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800993e:	627a      	str	r2, [r7, #36]	; 0x24
 8009940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6a39      	ldr	r1, [r7, #32]
 8009944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	61fb      	str	r3, [r7, #28]
   return(result);
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e5      	bne.n	800991e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3760      	adds	r7, #96	; 0x60
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	0800955f 	.word	0x0800955f
 8009960:	08009685 	.word	0x08009685
 8009964:	080096bb 	.word	0x080096bb

08009968 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b089      	sub	sp, #36	; 0x24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	330c      	adds	r3, #12
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	61ba      	str	r2, [r7, #24]
 8009992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	6979      	ldr	r1, [r7, #20]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	e841 2300 	strex	r3, r2, [r1]
 800999c:	613b      	str	r3, [r7, #16]
   return(result);
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e5      	bne.n	8009970 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099ac:	bf00      	nop
 80099ae:	3724      	adds	r7, #36	; 0x24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b095      	sub	sp, #84	; 0x54
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099e0:	643a      	str	r2, [r7, #64]	; 0x40
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e5      	bne.n	80099c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3314      	adds	r3, #20
 80099fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f023 0301 	bic.w	r3, r3, #1
 8009a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3314      	adds	r3, #20
 8009a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e5      	bne.n	80099f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d119      	bne.n	8009a64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	330c      	adds	r3, #12
 8009a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	e853 3f00 	ldrex	r3, [r3]
 8009a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f023 0310 	bic.w	r3, r3, #16
 8009a46:	647b      	str	r3, [r7, #68]	; 0x44
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a50:	61ba      	str	r2, [r7, #24]
 8009a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6979      	ldr	r1, [r7, #20]
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e5      	bne.n	8009a30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a72:	bf00      	nop
 8009a74:	3754      	adds	r7, #84	; 0x54
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff fcef 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b21      	cmp	r3, #33	; 0x21
 8009ab8:	d13e      	bne.n	8009b38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac2:	d114      	bne.n	8009aee <UART_Transmit_IT+0x48>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d110      	bne.n	8009aee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ae0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	1c9a      	adds	r2, r3, #2
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	621a      	str	r2, [r3, #32]
 8009aec:	e008      	b.n	8009b00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	1c59      	adds	r1, r3, #1
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	6211      	str	r1, [r2, #32]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10f      	bne.n	8009b34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	e000      	b.n	8009b3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b38:	2302      	movs	r3, #2
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff fc6a 	bl	8009440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b08c      	sub	sp, #48	; 0x30
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b22      	cmp	r3, #34	; 0x22
 8009b88:	f040 80ab 	bne.w	8009ce2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b94:	d117      	bne.n	8009bc6 <UART_Receive_IT+0x50>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d113      	bne.n	8009bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbe:	1c9a      	adds	r2, r3, #2
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8009bc4:	e026      	b.n	8009c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd8:	d007      	beq.n	8009bea <UART_Receive_IT+0x74>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <UART_Receive_IT+0x82>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	e008      	b.n	8009c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4619      	mov	r1, r3
 8009c22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d15a      	bne.n	8009cde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 0220 	bic.w	r2, r2, #32
 8009c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	695a      	ldr	r2, [r3, #20]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d135      	bne.n	8009cd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	330c      	adds	r3, #12
 8009c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f023 0310 	bic.w	r3, r3, #16
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8e:	623a      	str	r2, [r7, #32]
 8009c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	69f9      	ldr	r1, [r7, #28]
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e5      	bne.n	8009c6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d10a      	bne.n	8009cc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fbdf 	bl	8009490 <HAL_UARTEx_RxEventCallback>
 8009cd2:	e002      	b.n	8009cda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7fb f9d5 	bl	8005084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e002      	b.n	8009ce4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e000      	b.n	8009ce4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009ce2:	2302      	movs	r3, #2
  }
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3730      	adds	r7, #48	; 0x30
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf0:	b0c0      	sub	sp, #256	; 0x100
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d08:	68d9      	ldr	r1, [r3, #12]
 8009d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	ea40 0301 	orr.w	r3, r0, r1
 8009d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	431a      	orrs	r2, r3
 8009d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d44:	f021 010c 	bic.w	r1, r1, #12
 8009d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d52:	430b      	orrs	r3, r1
 8009d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d66:	6999      	ldr	r1, [r3, #24]
 8009d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	ea40 0301 	orr.w	r3, r0, r1
 8009d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b8f      	ldr	r3, [pc, #572]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d005      	beq.n	8009d8c <UART_SetConfig+0xa0>
 8009d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4b8d      	ldr	r3, [pc, #564]	; (8009fbc <UART_SetConfig+0x2d0>)
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d104      	bne.n	8009d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d8c:	f7fe fa2c 	bl	80081e8 <HAL_RCC_GetPCLK2Freq>
 8009d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d94:	e003      	b.n	8009d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d96:	f7fe fa13 	bl	80081c0 <HAL_RCC_GetPCLK1Freq>
 8009d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da8:	f040 810c 	bne.w	8009fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	1891      	adds	r1, r2, r2
 8009dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009dc6:	415b      	adcs	r3, r3
 8009dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dce:	4621      	mov	r1, r4
 8009dd0:	eb12 0801 	adds.w	r8, r2, r1
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	eb43 0901 	adc.w	r9, r3, r1
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	f04f 0300 	mov.w	r3, #0
 8009de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dee:	4690      	mov	r8, r2
 8009df0:	4699      	mov	r9, r3
 8009df2:	4623      	mov	r3, r4
 8009df4:	eb18 0303 	adds.w	r3, r8, r3
 8009df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	eb49 0303 	adc.w	r3, r9, r3
 8009e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	18db      	adds	r3, r3, r3
 8009e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e20:	4613      	mov	r3, r2
 8009e22:	eb42 0303 	adc.w	r3, r2, r3
 8009e26:	657b      	str	r3, [r7, #84]	; 0x54
 8009e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e30:	f7f7 f8a8 	bl	8000f84 <__aeabi_uldivmod>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4b61      	ldr	r3, [pc, #388]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	011c      	lsls	r4, r3, #4
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e54:	4642      	mov	r2, r8
 8009e56:	464b      	mov	r3, r9
 8009e58:	1891      	adds	r1, r2, r2
 8009e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e5c:	415b      	adcs	r3, r3
 8009e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e64:	4641      	mov	r1, r8
 8009e66:	eb12 0a01 	adds.w	sl, r2, r1
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e84:	4692      	mov	sl, r2
 8009e86:	469b      	mov	fp, r3
 8009e88:	4643      	mov	r3, r8
 8009e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e92:	464b      	mov	r3, r9
 8009e94:	eb4b 0303 	adc.w	r3, fp, r3
 8009e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	18db      	adds	r3, r3, r3
 8009eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	eb42 0303 	adc.w	r3, r2, r3
 8009ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8009ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009ec6:	f7f7 f85d 	bl	8000f84 <__aeabi_uldivmod>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4b3b      	ldr	r3, [pc, #236]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	2264      	movs	r2, #100	; 0x64
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	1acb      	subs	r3, r1, r3
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ee6:	4b36      	ldr	r3, [pc, #216]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ef4:	441c      	add	r4, r3
 8009ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	1891      	adds	r1, r2, r2
 8009f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f10:	415b      	adcs	r3, r3
 8009f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f18:	4641      	mov	r1, r8
 8009f1a:	1851      	adds	r1, r2, r1
 8009f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f1e:	4649      	mov	r1, r9
 8009f20:	414b      	adcs	r3, r1
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f30:	4659      	mov	r1, fp
 8009f32:	00cb      	lsls	r3, r1, #3
 8009f34:	4651      	mov	r1, sl
 8009f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f3a:	4651      	mov	r1, sl
 8009f3c:	00ca      	lsls	r2, r1, #3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	4642      	mov	r2, r8
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	460a      	mov	r2, r1
 8009f50:	eb42 0303 	adc.w	r3, r2, r3
 8009f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	18db      	adds	r3, r3, r3
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f72:	4613      	mov	r3, r2
 8009f74:	eb42 0303 	adc.w	r3, r2, r3
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f82:	f7f6 ffff 	bl	8000f84 <__aeabi_uldivmod>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4b0d      	ldr	r3, [pc, #52]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	2164      	movs	r1, #100	; 0x64
 8009f94:	fb01 f303 	mul.w	r3, r1, r3
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	3332      	adds	r3, #50	; 0x32
 8009f9e:	4a08      	ldr	r2, [pc, #32]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	f003 0207 	and.w	r2, r3, #7
 8009faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4422      	add	r2, r4
 8009fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fb4:	e105      	b.n	800a1c2 <UART_SetConfig+0x4d6>
 8009fb6:	bf00      	nop
 8009fb8:	40011000 	.word	0x40011000
 8009fbc:	40011400 	.word	0x40011400
 8009fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	464b      	mov	r3, r9
 8009fda:	1891      	adds	r1, r2, r2
 8009fdc:	6239      	str	r1, [r7, #32]
 8009fde:	415b      	adcs	r3, r3
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	1854      	adds	r4, r2, r1
 8009fea:	4649      	mov	r1, r9
 8009fec:	eb43 0501 	adc.w	r5, r3, r1
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	00eb      	lsls	r3, r5, #3
 8009ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ffe:	00e2      	lsls	r2, r4, #3
 800a000:	4614      	mov	r4, r2
 800a002:	461d      	mov	r5, r3
 800a004:	4643      	mov	r3, r8
 800a006:	18e3      	adds	r3, r4, r3
 800a008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a00c:	464b      	mov	r3, r9
 800a00e:	eb45 0303 	adc.w	r3, r5, r3
 800a012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a032:	4629      	mov	r1, r5
 800a034:	008b      	lsls	r3, r1, #2
 800a036:	4621      	mov	r1, r4
 800a038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a03c:	4621      	mov	r1, r4
 800a03e:	008a      	lsls	r2, r1, #2
 800a040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a044:	f7f6 ff9e 	bl	8000f84 <__aeabi_uldivmod>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4b60      	ldr	r3, [pc, #384]	; (800a1d0 <UART_SetConfig+0x4e4>)
 800a04e:	fba3 2302 	umull	r2, r3, r3, r2
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	011c      	lsls	r4, r3, #4
 800a056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	1891      	adds	r1, r2, r2
 800a06e:	61b9      	str	r1, [r7, #24]
 800a070:	415b      	adcs	r3, r3
 800a072:	61fb      	str	r3, [r7, #28]
 800a074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a078:	4641      	mov	r1, r8
 800a07a:	1851      	adds	r1, r2, r1
 800a07c:	6139      	str	r1, [r7, #16]
 800a07e:	4649      	mov	r1, r9
 800a080:	414b      	adcs	r3, r1
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a090:	4659      	mov	r1, fp
 800a092:	00cb      	lsls	r3, r1, #3
 800a094:	4651      	mov	r1, sl
 800a096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a09a:	4651      	mov	r1, sl
 800a09c:	00ca      	lsls	r2, r1, #3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	189b      	adds	r3, r3, r2
 800a0a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	460a      	mov	r2, r1
 800a0b0:	eb42 0303 	adc.w	r3, r2, r3
 800a0b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a0c4:	f04f 0200 	mov.w	r2, #0
 800a0c8:	f04f 0300 	mov.w	r3, #0
 800a0cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	008b      	lsls	r3, r1, #2
 800a0d4:	4641      	mov	r1, r8
 800a0d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0da:	4641      	mov	r1, r8
 800a0dc:	008a      	lsls	r2, r1, #2
 800a0de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a0e2:	f7f6 ff4f 	bl	8000f84 <__aeabi_uldivmod>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <UART_SetConfig+0x4e4>)
 800a0ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a0f0:	095b      	lsrs	r3, r3, #5
 800a0f2:	2164      	movs	r1, #100	; 0x64
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	3332      	adds	r3, #50	; 0x32
 800a0fe:	4a34      	ldr	r2, [pc, #208]	; (800a1d0 <UART_SetConfig+0x4e4>)
 800a100:	fba2 2303 	umull	r2, r3, r2, r3
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a10a:	441c      	add	r4, r3
 800a10c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a110:	2200      	movs	r2, #0
 800a112:	673b      	str	r3, [r7, #112]	; 0x70
 800a114:	677a      	str	r2, [r7, #116]	; 0x74
 800a116:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a11a:	4642      	mov	r2, r8
 800a11c:	464b      	mov	r3, r9
 800a11e:	1891      	adds	r1, r2, r2
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	415b      	adcs	r3, r3
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a12a:	4641      	mov	r1, r8
 800a12c:	1851      	adds	r1, r2, r1
 800a12e:	6039      	str	r1, [r7, #0]
 800a130:	4649      	mov	r1, r9
 800a132:	414b      	adcs	r3, r1
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a142:	4659      	mov	r1, fp
 800a144:	00cb      	lsls	r3, r1, #3
 800a146:	4651      	mov	r1, sl
 800a148:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a14c:	4651      	mov	r1, sl
 800a14e:	00ca      	lsls	r2, r1, #3
 800a150:	4610      	mov	r0, r2
 800a152:	4619      	mov	r1, r3
 800a154:	4603      	mov	r3, r0
 800a156:	4642      	mov	r2, r8
 800a158:	189b      	adds	r3, r3, r2
 800a15a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a15c:	464b      	mov	r3, r9
 800a15e:	460a      	mov	r2, r1
 800a160:	eb42 0303 	adc.w	r3, r2, r3
 800a164:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	663b      	str	r3, [r7, #96]	; 0x60
 800a170:	667a      	str	r2, [r7, #100]	; 0x64
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a17e:	4649      	mov	r1, r9
 800a180:	008b      	lsls	r3, r1, #2
 800a182:	4641      	mov	r1, r8
 800a184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a188:	4641      	mov	r1, r8
 800a18a:	008a      	lsls	r2, r1, #2
 800a18c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a190:	f7f6 fef8 	bl	8000f84 <__aeabi_uldivmod>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <UART_SetConfig+0x4e4>)
 800a19a:	fba3 1302 	umull	r1, r3, r3, r2
 800a19e:	095b      	lsrs	r3, r3, #5
 800a1a0:	2164      	movs	r1, #100	; 0x64
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	011b      	lsls	r3, r3, #4
 800a1aa:	3332      	adds	r3, #50	; 0x32
 800a1ac:	4a08      	ldr	r2, [pc, #32]	; (800a1d0 <UART_SetConfig+0x4e4>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	095b      	lsrs	r3, r3, #5
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4422      	add	r2, r4
 800a1c0:	609a      	str	r2, [r3, #8]
}
 800a1c2:	bf00      	nop
 800a1c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1ce:	bf00      	nop
 800a1d0:	51eb851f 	.word	0x51eb851f

0800a1d4 <__errno>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <__errno+0x8>)
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000014 	.word	0x20000014

0800a1e0 <__libc_init_array>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4d0d      	ldr	r5, [pc, #52]	; (800a218 <__libc_init_array+0x38>)
 800a1e4:	4c0d      	ldr	r4, [pc, #52]	; (800a21c <__libc_init_array+0x3c>)
 800a1e6:	1b64      	subs	r4, r4, r5
 800a1e8:	10a4      	asrs	r4, r4, #2
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	42a6      	cmp	r6, r4
 800a1ee:	d109      	bne.n	800a204 <__libc_init_array+0x24>
 800a1f0:	4d0b      	ldr	r5, [pc, #44]	; (800a220 <__libc_init_array+0x40>)
 800a1f2:	4c0c      	ldr	r4, [pc, #48]	; (800a224 <__libc_init_array+0x44>)
 800a1f4:	f006 ff9a 	bl	801112c <_init>
 800a1f8:	1b64      	subs	r4, r4, r5
 800a1fa:	10a4      	asrs	r4, r4, #2
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	42a6      	cmp	r6, r4
 800a200:	d105      	bne.n	800a20e <__libc_init_array+0x2e>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	f855 3b04 	ldr.w	r3, [r5], #4
 800a208:	4798      	blx	r3
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7ee      	b.n	800a1ec <__libc_init_array+0xc>
 800a20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a212:	4798      	blx	r3
 800a214:	3601      	adds	r6, #1
 800a216:	e7f2      	b.n	800a1fe <__libc_init_array+0x1e>
 800a218:	08011778 	.word	0x08011778
 800a21c:	08011778 	.word	0x08011778
 800a220:	08011778 	.word	0x08011778
 800a224:	0801177c 	.word	0x0801177c

0800a228 <memset>:
 800a228:	4402      	add	r2, r0
 800a22a:	4603      	mov	r3, r0
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d100      	bne.n	800a232 <memset+0xa>
 800a230:	4770      	bx	lr
 800a232:	f803 1b01 	strb.w	r1, [r3], #1
 800a236:	e7f9      	b.n	800a22c <memset+0x4>

0800a238 <__cvt>:
 800a238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	ec55 4b10 	vmov	r4, r5, d0
 800a240:	2d00      	cmp	r5, #0
 800a242:	460e      	mov	r6, r1
 800a244:	4619      	mov	r1, r3
 800a246:	462b      	mov	r3, r5
 800a248:	bfbb      	ittet	lt
 800a24a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a24e:	461d      	movlt	r5, r3
 800a250:	2300      	movge	r3, #0
 800a252:	232d      	movlt	r3, #45	; 0x2d
 800a254:	700b      	strb	r3, [r1, #0]
 800a256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a258:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a25c:	4691      	mov	r9, r2
 800a25e:	f023 0820 	bic.w	r8, r3, #32
 800a262:	bfbc      	itt	lt
 800a264:	4622      	movlt	r2, r4
 800a266:	4614      	movlt	r4, r2
 800a268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a26c:	d005      	beq.n	800a27a <__cvt+0x42>
 800a26e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a272:	d100      	bne.n	800a276 <__cvt+0x3e>
 800a274:	3601      	adds	r6, #1
 800a276:	2102      	movs	r1, #2
 800a278:	e000      	b.n	800a27c <__cvt+0x44>
 800a27a:	2103      	movs	r1, #3
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	ab02      	add	r3, sp, #8
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	ec45 4b10 	vmov	d0, r4, r5
 800a288:	4653      	mov	r3, sl
 800a28a:	4632      	mov	r2, r6
 800a28c:	f001 fe60 	bl	800bf50 <_dtoa_r>
 800a290:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a294:	4607      	mov	r7, r0
 800a296:	d102      	bne.n	800a29e <__cvt+0x66>
 800a298:	f019 0f01 	tst.w	r9, #1
 800a29c:	d022      	beq.n	800a2e4 <__cvt+0xac>
 800a29e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2a2:	eb07 0906 	add.w	r9, r7, r6
 800a2a6:	d110      	bne.n	800a2ca <__cvt+0x92>
 800a2a8:	783b      	ldrb	r3, [r7, #0]
 800a2aa:	2b30      	cmp	r3, #48	; 0x30
 800a2ac:	d10a      	bne.n	800a2c4 <__cvt+0x8c>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	f7f6 fc27 	bl	8000b08 <__aeabi_dcmpeq>
 800a2ba:	b918      	cbnz	r0, 800a2c4 <__cvt+0x8c>
 800a2bc:	f1c6 0601 	rsb	r6, r6, #1
 800a2c0:	f8ca 6000 	str.w	r6, [sl]
 800a2c4:	f8da 3000 	ldr.w	r3, [sl]
 800a2c8:	4499      	add	r9, r3
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f6 fc19 	bl	8000b08 <__aeabi_dcmpeq>
 800a2d6:	b108      	cbz	r0, 800a2dc <__cvt+0xa4>
 800a2d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2dc:	2230      	movs	r2, #48	; 0x30
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	454b      	cmp	r3, r9
 800a2e2:	d307      	bcc.n	800a2f4 <__cvt+0xbc>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2e8:	1bdb      	subs	r3, r3, r7
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	b004      	add	sp, #16
 800a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f4:	1c59      	adds	r1, r3, #1
 800a2f6:	9103      	str	r1, [sp, #12]
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	e7f0      	b.n	800a2de <__cvt+0xa6>

0800a2fc <__exponent>:
 800a2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2fe:	4603      	mov	r3, r0
 800a300:	2900      	cmp	r1, #0
 800a302:	bfb8      	it	lt
 800a304:	4249      	neglt	r1, r1
 800a306:	f803 2b02 	strb.w	r2, [r3], #2
 800a30a:	bfb4      	ite	lt
 800a30c:	222d      	movlt	r2, #45	; 0x2d
 800a30e:	222b      	movge	r2, #43	; 0x2b
 800a310:	2909      	cmp	r1, #9
 800a312:	7042      	strb	r2, [r0, #1]
 800a314:	dd2a      	ble.n	800a36c <__exponent+0x70>
 800a316:	f10d 0407 	add.w	r4, sp, #7
 800a31a:	46a4      	mov	ip, r4
 800a31c:	270a      	movs	r7, #10
 800a31e:	46a6      	mov	lr, r4
 800a320:	460a      	mov	r2, r1
 800a322:	fb91 f6f7 	sdiv	r6, r1, r7
 800a326:	fb07 1516 	mls	r5, r7, r6, r1
 800a32a:	3530      	adds	r5, #48	; 0x30
 800a32c:	2a63      	cmp	r2, #99	; 0x63
 800a32e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a332:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a336:	4631      	mov	r1, r6
 800a338:	dcf1      	bgt.n	800a31e <__exponent+0x22>
 800a33a:	3130      	adds	r1, #48	; 0x30
 800a33c:	f1ae 0502 	sub.w	r5, lr, #2
 800a340:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a344:	1c44      	adds	r4, r0, #1
 800a346:	4629      	mov	r1, r5
 800a348:	4561      	cmp	r1, ip
 800a34a:	d30a      	bcc.n	800a362 <__exponent+0x66>
 800a34c:	f10d 0209 	add.w	r2, sp, #9
 800a350:	eba2 020e 	sub.w	r2, r2, lr
 800a354:	4565      	cmp	r5, ip
 800a356:	bf88      	it	hi
 800a358:	2200      	movhi	r2, #0
 800a35a:	4413      	add	r3, r2
 800a35c:	1a18      	subs	r0, r3, r0
 800a35e:	b003      	add	sp, #12
 800a360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a366:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a36a:	e7ed      	b.n	800a348 <__exponent+0x4c>
 800a36c:	2330      	movs	r3, #48	; 0x30
 800a36e:	3130      	adds	r1, #48	; 0x30
 800a370:	7083      	strb	r3, [r0, #2]
 800a372:	70c1      	strb	r1, [r0, #3]
 800a374:	1d03      	adds	r3, r0, #4
 800a376:	e7f1      	b.n	800a35c <__exponent+0x60>

0800a378 <_printf_float>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	ed2d 8b02 	vpush	{d8}
 800a380:	b08d      	sub	sp, #52	; 0x34
 800a382:	460c      	mov	r4, r1
 800a384:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a388:	4616      	mov	r6, r2
 800a38a:	461f      	mov	r7, r3
 800a38c:	4605      	mov	r5, r0
 800a38e:	f002 ff3d 	bl	800d20c <_localeconv_r>
 800a392:	f8d0 a000 	ldr.w	sl, [r0]
 800a396:	4650      	mov	r0, sl
 800a398:	f7f5 ff3a 	bl	8000210 <strlen>
 800a39c:	2300      	movs	r3, #0
 800a39e:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	9305      	str	r3, [sp, #20]
 800a3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	f103 0208 	add.w	r2, r3, #8
 800a3b6:	f8c8 2000 	str.w	r2, [r8]
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a3c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3d0:	ee08 0a10 	vmov	s16, r0
 800a3d4:	4b9f      	ldr	r3, [pc, #636]	; (800a654 <_printf_float+0x2dc>)
 800a3d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	f7f6 fbc5 	bl	8000b6c <__aeabi_dcmpun>
 800a3e2:	bb88      	cbnz	r0, 800a448 <_printf_float+0xd0>
 800a3e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3e8:	4b9a      	ldr	r3, [pc, #616]	; (800a654 <_printf_float+0x2dc>)
 800a3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ee:	f7f6 fb9f 	bl	8000b30 <__aeabi_dcmple>
 800a3f2:	bb48      	cbnz	r0, 800a448 <_printf_float+0xd0>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	f7f6 fb8e 	bl	8000b1c <__aeabi_dcmplt>
 800a400:	b110      	cbz	r0, 800a408 <_printf_float+0x90>
 800a402:	232d      	movs	r3, #45	; 0x2d
 800a404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a408:	4b93      	ldr	r3, [pc, #588]	; (800a658 <_printf_float+0x2e0>)
 800a40a:	4894      	ldr	r0, [pc, #592]	; (800a65c <_printf_float+0x2e4>)
 800a40c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a410:	bf94      	ite	ls
 800a412:	4698      	movls	r8, r3
 800a414:	4680      	movhi	r8, r0
 800a416:	2303      	movs	r3, #3
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	f023 0204 	bic.w	r2, r3, #4
 800a420:	6022      	str	r2, [r4, #0]
 800a422:	f04f 0900 	mov.w	r9, #0
 800a426:	9700      	str	r7, [sp, #0]
 800a428:	4633      	mov	r3, r6
 800a42a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a42c:	4621      	mov	r1, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f9d8 	bl	800a7e4 <_printf_common>
 800a434:	3001      	adds	r0, #1
 800a436:	f040 8090 	bne.w	800a55a <_printf_float+0x1e2>
 800a43a:	f04f 30ff 	mov.w	r0, #4294967295
 800a43e:	b00d      	add	sp, #52	; 0x34
 800a440:	ecbd 8b02 	vpop	{d8}
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a448:	4642      	mov	r2, r8
 800a44a:	464b      	mov	r3, r9
 800a44c:	4640      	mov	r0, r8
 800a44e:	4649      	mov	r1, r9
 800a450:	f7f6 fb8c 	bl	8000b6c <__aeabi_dcmpun>
 800a454:	b140      	cbz	r0, 800a468 <_printf_float+0xf0>
 800a456:	464b      	mov	r3, r9
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfbc      	itt	lt
 800a45c:	232d      	movlt	r3, #45	; 0x2d
 800a45e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a462:	487f      	ldr	r0, [pc, #508]	; (800a660 <_printf_float+0x2e8>)
 800a464:	4b7f      	ldr	r3, [pc, #508]	; (800a664 <_printf_float+0x2ec>)
 800a466:	e7d1      	b.n	800a40c <_printf_float+0x94>
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a46e:	9206      	str	r2, [sp, #24]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	d13f      	bne.n	800a4f4 <_printf_float+0x17c>
 800a474:	2306      	movs	r3, #6
 800a476:	6063      	str	r3, [r4, #4]
 800a478:	9b05      	ldr	r3, [sp, #20]
 800a47a:	6861      	ldr	r1, [r4, #4]
 800a47c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a480:	2300      	movs	r3, #0
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	ab0a      	add	r3, sp, #40	; 0x28
 800a486:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a48a:	ab09      	add	r3, sp, #36	; 0x24
 800a48c:	ec49 8b10 	vmov	d0, r8, r9
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a498:	4628      	mov	r0, r5
 800a49a:	f7ff fecd 	bl	800a238 <__cvt>
 800a49e:	9b06      	ldr	r3, [sp, #24]
 800a4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4a2:	2b47      	cmp	r3, #71	; 0x47
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	d108      	bne.n	800a4ba <_printf_float+0x142>
 800a4a8:	1cc8      	adds	r0, r1, #3
 800a4aa:	db02      	blt.n	800a4b2 <_printf_float+0x13a>
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	dd41      	ble.n	800a536 <_printf_float+0x1be>
 800a4b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a4b6:	fa5f fb8b 	uxtb.w	fp, fp
 800a4ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4be:	d820      	bhi.n	800a502 <_printf_float+0x18a>
 800a4c0:	3901      	subs	r1, #1
 800a4c2:	465a      	mov	r2, fp
 800a4c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a4ca:	f7ff ff17 	bl	800a2fc <__exponent>
 800a4ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4d0:	1813      	adds	r3, r2, r0
 800a4d2:	2a01      	cmp	r2, #1
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	6123      	str	r3, [r4, #16]
 800a4d8:	dc02      	bgt.n	800a4e0 <_printf_float+0x168>
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	07d2      	lsls	r2, r2, #31
 800a4de:	d501      	bpl.n	800a4e4 <_printf_float+0x16c>
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d09c      	beq.n	800a426 <_printf_float+0xae>
 800a4ec:	232d      	movs	r3, #45	; 0x2d
 800a4ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f2:	e798      	b.n	800a426 <_printf_float+0xae>
 800a4f4:	9a06      	ldr	r2, [sp, #24]
 800a4f6:	2a47      	cmp	r2, #71	; 0x47
 800a4f8:	d1be      	bne.n	800a478 <_printf_float+0x100>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1bc      	bne.n	800a478 <_printf_float+0x100>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7b9      	b.n	800a476 <_printf_float+0xfe>
 800a502:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a506:	d118      	bne.n	800a53a <_printf_float+0x1c2>
 800a508:	2900      	cmp	r1, #0
 800a50a:	6863      	ldr	r3, [r4, #4]
 800a50c:	dd0b      	ble.n	800a526 <_printf_float+0x1ae>
 800a50e:	6121      	str	r1, [r4, #16]
 800a510:	b913      	cbnz	r3, 800a518 <_printf_float+0x1a0>
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	07d0      	lsls	r0, r2, #31
 800a516:	d502      	bpl.n	800a51e <_printf_float+0x1a6>
 800a518:	3301      	adds	r3, #1
 800a51a:	440b      	add	r3, r1
 800a51c:	6123      	str	r3, [r4, #16]
 800a51e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a520:	f04f 0900 	mov.w	r9, #0
 800a524:	e7de      	b.n	800a4e4 <_printf_float+0x16c>
 800a526:	b913      	cbnz	r3, 800a52e <_printf_float+0x1b6>
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	07d2      	lsls	r2, r2, #31
 800a52c:	d501      	bpl.n	800a532 <_printf_float+0x1ba>
 800a52e:	3302      	adds	r3, #2
 800a530:	e7f4      	b.n	800a51c <_printf_float+0x1a4>
 800a532:	2301      	movs	r3, #1
 800a534:	e7f2      	b.n	800a51c <_printf_float+0x1a4>
 800a536:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53c:	4299      	cmp	r1, r3
 800a53e:	db05      	blt.n	800a54c <_printf_float+0x1d4>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	6121      	str	r1, [r4, #16]
 800a544:	07d8      	lsls	r0, r3, #31
 800a546:	d5ea      	bpl.n	800a51e <_printf_float+0x1a6>
 800a548:	1c4b      	adds	r3, r1, #1
 800a54a:	e7e7      	b.n	800a51c <_printf_float+0x1a4>
 800a54c:	2900      	cmp	r1, #0
 800a54e:	bfd4      	ite	le
 800a550:	f1c1 0202 	rsble	r2, r1, #2
 800a554:	2201      	movgt	r2, #1
 800a556:	4413      	add	r3, r2
 800a558:	e7e0      	b.n	800a51c <_printf_float+0x1a4>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	055a      	lsls	r2, r3, #21
 800a55e:	d407      	bmi.n	800a570 <_printf_float+0x1f8>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	4642      	mov	r2, r8
 800a564:	4631      	mov	r1, r6
 800a566:	4628      	mov	r0, r5
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	d12c      	bne.n	800a5c8 <_printf_float+0x250>
 800a56e:	e764      	b.n	800a43a <_printf_float+0xc2>
 800a570:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a574:	f240 80e0 	bls.w	800a738 <_printf_float+0x3c0>
 800a578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a57c:	2200      	movs	r2, #0
 800a57e:	2300      	movs	r3, #0
 800a580:	f7f6 fac2 	bl	8000b08 <__aeabi_dcmpeq>
 800a584:	2800      	cmp	r0, #0
 800a586:	d034      	beq.n	800a5f2 <_printf_float+0x27a>
 800a588:	4a37      	ldr	r2, [pc, #220]	; (800a668 <_printf_float+0x2f0>)
 800a58a:	2301      	movs	r3, #1
 800a58c:	4631      	mov	r1, r6
 800a58e:	4628      	mov	r0, r5
 800a590:	47b8      	blx	r7
 800a592:	3001      	adds	r0, #1
 800a594:	f43f af51 	beq.w	800a43a <_printf_float+0xc2>
 800a598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59c:	429a      	cmp	r2, r3
 800a59e:	db02      	blt.n	800a5a6 <_printf_float+0x22e>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	07d8      	lsls	r0, r3, #31
 800a5a4:	d510      	bpl.n	800a5c8 <_printf_float+0x250>
 800a5a6:	ee18 3a10 	vmov	r3, s16
 800a5aa:	4652      	mov	r2, sl
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	47b8      	blx	r7
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	f43f af41 	beq.w	800a43a <_printf_float+0xc2>
 800a5b8:	f04f 0800 	mov.w	r8, #0
 800a5bc:	f104 091a 	add.w	r9, r4, #26
 800a5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	4543      	cmp	r3, r8
 800a5c6:	dc09      	bgt.n	800a5dc <_printf_float+0x264>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	079b      	lsls	r3, r3, #30
 800a5cc:	f100 8105 	bmi.w	800a7da <_printf_float+0x462>
 800a5d0:	68e0      	ldr	r0, [r4, #12]
 800a5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d4:	4298      	cmp	r0, r3
 800a5d6:	bfb8      	it	lt
 800a5d8:	4618      	movlt	r0, r3
 800a5da:	e730      	b.n	800a43e <_printf_float+0xc6>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	464a      	mov	r2, r9
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f af27 	beq.w	800a43a <_printf_float+0xc2>
 800a5ec:	f108 0801 	add.w	r8, r8, #1
 800a5f0:	e7e6      	b.n	800a5c0 <_printf_float+0x248>
 800a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dc39      	bgt.n	800a66c <_printf_float+0x2f4>
 800a5f8:	4a1b      	ldr	r2, [pc, #108]	; (800a668 <_printf_float+0x2f0>)
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	f43f af19 	beq.w	800a43a <_printf_float+0xc2>
 800a608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a60c:	4313      	orrs	r3, r2
 800a60e:	d102      	bne.n	800a616 <_printf_float+0x29e>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	d5d8      	bpl.n	800a5c8 <_printf_float+0x250>
 800a616:	ee18 3a10 	vmov	r3, s16
 800a61a:	4652      	mov	r2, sl
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	47b8      	blx	r7
 800a622:	3001      	adds	r0, #1
 800a624:	f43f af09 	beq.w	800a43a <_printf_float+0xc2>
 800a628:	f04f 0900 	mov.w	r9, #0
 800a62c:	f104 0a1a 	add.w	sl, r4, #26
 800a630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a632:	425b      	negs	r3, r3
 800a634:	454b      	cmp	r3, r9
 800a636:	dc01      	bgt.n	800a63c <_printf_float+0x2c4>
 800a638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63a:	e792      	b.n	800a562 <_printf_float+0x1ea>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4652      	mov	r2, sl
 800a640:	4631      	mov	r1, r6
 800a642:	4628      	mov	r0, r5
 800a644:	47b8      	blx	r7
 800a646:	3001      	adds	r0, #1
 800a648:	f43f aef7 	beq.w	800a43a <_printf_float+0xc2>
 800a64c:	f109 0901 	add.w	r9, r9, #1
 800a650:	e7ee      	b.n	800a630 <_printf_float+0x2b8>
 800a652:	bf00      	nop
 800a654:	7fefffff 	.word	0x7fefffff
 800a658:	08011214 	.word	0x08011214
 800a65c:	08011218 	.word	0x08011218
 800a660:	08011220 	.word	0x08011220
 800a664:	0801121c 	.word	0x0801121c
 800a668:	08011619 	.word	0x08011619
 800a66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a66e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a670:	429a      	cmp	r2, r3
 800a672:	bfa8      	it	ge
 800a674:	461a      	movge	r2, r3
 800a676:	2a00      	cmp	r2, #0
 800a678:	4691      	mov	r9, r2
 800a67a:	dc37      	bgt.n	800a6ec <_printf_float+0x374>
 800a67c:	f04f 0b00 	mov.w	fp, #0
 800a680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a684:	f104 021a 	add.w	r2, r4, #26
 800a688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a68a:	9305      	str	r3, [sp, #20]
 800a68c:	eba3 0309 	sub.w	r3, r3, r9
 800a690:	455b      	cmp	r3, fp
 800a692:	dc33      	bgt.n	800a6fc <_printf_float+0x384>
 800a694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a698:	429a      	cmp	r2, r3
 800a69a:	db3b      	blt.n	800a714 <_printf_float+0x39c>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	07da      	lsls	r2, r3, #31
 800a6a0:	d438      	bmi.n	800a714 <_printf_float+0x39c>
 800a6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a4:	9a05      	ldr	r2, [sp, #20]
 800a6a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6a8:	1a9a      	subs	r2, r3, r2
 800a6aa:	eba3 0901 	sub.w	r9, r3, r1
 800a6ae:	4591      	cmp	r9, r2
 800a6b0:	bfa8      	it	ge
 800a6b2:	4691      	movge	r9, r2
 800a6b4:	f1b9 0f00 	cmp.w	r9, #0
 800a6b8:	dc35      	bgt.n	800a726 <_printf_float+0x3ae>
 800a6ba:	f04f 0800 	mov.w	r8, #0
 800a6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6c2:	f104 0a1a 	add.w	sl, r4, #26
 800a6c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	eba3 0309 	sub.w	r3, r3, r9
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	f77f af79 	ble.w	800a5c8 <_printf_float+0x250>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f aeaa 	beq.w	800a43a <_printf_float+0xc2>
 800a6e6:	f108 0801 	add.w	r8, r8, #1
 800a6ea:	e7ec      	b.n	800a6c6 <_printf_float+0x34e>
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d1c0      	bne.n	800a67c <_printf_float+0x304>
 800a6fa:	e69e      	b.n	800a43a <_printf_float+0xc2>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4631      	mov	r1, r6
 800a700:	4628      	mov	r0, r5
 800a702:	9205      	str	r2, [sp, #20]
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f ae97 	beq.w	800a43a <_printf_float+0xc2>
 800a70c:	9a05      	ldr	r2, [sp, #20]
 800a70e:	f10b 0b01 	add.w	fp, fp, #1
 800a712:	e7b9      	b.n	800a688 <_printf_float+0x310>
 800a714:	ee18 3a10 	vmov	r3, s16
 800a718:	4652      	mov	r2, sl
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d1be      	bne.n	800a6a2 <_printf_float+0x32a>
 800a724:	e689      	b.n	800a43a <_printf_float+0xc2>
 800a726:	9a05      	ldr	r2, [sp, #20]
 800a728:	464b      	mov	r3, r9
 800a72a:	4442      	add	r2, r8
 800a72c:	4631      	mov	r1, r6
 800a72e:	4628      	mov	r0, r5
 800a730:	47b8      	blx	r7
 800a732:	3001      	adds	r0, #1
 800a734:	d1c1      	bne.n	800a6ba <_printf_float+0x342>
 800a736:	e680      	b.n	800a43a <_printf_float+0xc2>
 800a738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a73a:	2a01      	cmp	r2, #1
 800a73c:	dc01      	bgt.n	800a742 <_printf_float+0x3ca>
 800a73e:	07db      	lsls	r3, r3, #31
 800a740:	d538      	bpl.n	800a7b4 <_printf_float+0x43c>
 800a742:	2301      	movs	r3, #1
 800a744:	4642      	mov	r2, r8
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	f43f ae74 	beq.w	800a43a <_printf_float+0xc2>
 800a752:	ee18 3a10 	vmov	r3, s16
 800a756:	4652      	mov	r2, sl
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	f43f ae6b 	beq.w	800a43a <_printf_float+0xc2>
 800a764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	f7f6 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 800a770:	b9d8      	cbnz	r0, 800a7aa <_printf_float+0x432>
 800a772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a774:	f108 0201 	add.w	r2, r8, #1
 800a778:	3b01      	subs	r3, #1
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	d10e      	bne.n	800a7a2 <_printf_float+0x42a>
 800a784:	e659      	b.n	800a43a <_printf_float+0xc2>
 800a786:	2301      	movs	r3, #1
 800a788:	4652      	mov	r2, sl
 800a78a:	4631      	mov	r1, r6
 800a78c:	4628      	mov	r0, r5
 800a78e:	47b8      	blx	r7
 800a790:	3001      	adds	r0, #1
 800a792:	f43f ae52 	beq.w	800a43a <_printf_float+0xc2>
 800a796:	f108 0801 	add.w	r8, r8, #1
 800a79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79c:	3b01      	subs	r3, #1
 800a79e:	4543      	cmp	r3, r8
 800a7a0:	dcf1      	bgt.n	800a786 <_printf_float+0x40e>
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7a8:	e6dc      	b.n	800a564 <_printf_float+0x1ec>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	f104 0a1a 	add.w	sl, r4, #26
 800a7b2:	e7f2      	b.n	800a79a <_printf_float+0x422>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	e7df      	b.n	800a77a <_printf_float+0x402>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	464a      	mov	r2, r9
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f43f ae38 	beq.w	800a43a <_printf_float+0xc2>
 800a7ca:	f108 0801 	add.w	r8, r8, #1
 800a7ce:	68e3      	ldr	r3, [r4, #12]
 800a7d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	4543      	cmp	r3, r8
 800a7d6:	dcf0      	bgt.n	800a7ba <_printf_float+0x442>
 800a7d8:	e6fa      	b.n	800a5d0 <_printf_float+0x258>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	f104 0919 	add.w	r9, r4, #25
 800a7e2:	e7f4      	b.n	800a7ce <_printf_float+0x456>

0800a7e4 <_printf_common>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	4616      	mov	r6, r2
 800a7ea:	4699      	mov	r9, r3
 800a7ec:	688a      	ldr	r2, [r1, #8]
 800a7ee:	690b      	ldr	r3, [r1, #16]
 800a7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	bfb8      	it	lt
 800a7f8:	4613      	movlt	r3, r2
 800a7fa:	6033      	str	r3, [r6, #0]
 800a7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a800:	4607      	mov	r7, r0
 800a802:	460c      	mov	r4, r1
 800a804:	b10a      	cbz	r2, 800a80a <_printf_common+0x26>
 800a806:	3301      	adds	r3, #1
 800a808:	6033      	str	r3, [r6, #0]
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	0699      	lsls	r1, r3, #26
 800a80e:	bf42      	ittt	mi
 800a810:	6833      	ldrmi	r3, [r6, #0]
 800a812:	3302      	addmi	r3, #2
 800a814:	6033      	strmi	r3, [r6, #0]
 800a816:	6825      	ldr	r5, [r4, #0]
 800a818:	f015 0506 	ands.w	r5, r5, #6
 800a81c:	d106      	bne.n	800a82c <_printf_common+0x48>
 800a81e:	f104 0a19 	add.w	sl, r4, #25
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	6832      	ldr	r2, [r6, #0]
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	42ab      	cmp	r3, r5
 800a82a:	dc26      	bgt.n	800a87a <_printf_common+0x96>
 800a82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a830:	1e13      	subs	r3, r2, #0
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	bf18      	it	ne
 800a836:	2301      	movne	r3, #1
 800a838:	0692      	lsls	r2, r2, #26
 800a83a:	d42b      	bmi.n	800a894 <_printf_common+0xb0>
 800a83c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a840:	4649      	mov	r1, r9
 800a842:	4638      	mov	r0, r7
 800a844:	47c0      	blx	r8
 800a846:	3001      	adds	r0, #1
 800a848:	d01e      	beq.n	800a888 <_printf_common+0xa4>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	68e5      	ldr	r5, [r4, #12]
 800a84e:	6832      	ldr	r2, [r6, #0]
 800a850:	f003 0306 	and.w	r3, r3, #6
 800a854:	2b04      	cmp	r3, #4
 800a856:	bf08      	it	eq
 800a858:	1aad      	subeq	r5, r5, r2
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	6922      	ldr	r2, [r4, #16]
 800a85e:	bf0c      	ite	eq
 800a860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a864:	2500      	movne	r5, #0
 800a866:	4293      	cmp	r3, r2
 800a868:	bfc4      	itt	gt
 800a86a:	1a9b      	subgt	r3, r3, r2
 800a86c:	18ed      	addgt	r5, r5, r3
 800a86e:	2600      	movs	r6, #0
 800a870:	341a      	adds	r4, #26
 800a872:	42b5      	cmp	r5, r6
 800a874:	d11a      	bne.n	800a8ac <_printf_common+0xc8>
 800a876:	2000      	movs	r0, #0
 800a878:	e008      	b.n	800a88c <_printf_common+0xa8>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4652      	mov	r2, sl
 800a87e:	4649      	mov	r1, r9
 800a880:	4638      	mov	r0, r7
 800a882:	47c0      	blx	r8
 800a884:	3001      	adds	r0, #1
 800a886:	d103      	bne.n	800a890 <_printf_common+0xac>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a890:	3501      	adds	r5, #1
 800a892:	e7c6      	b.n	800a822 <_printf_common+0x3e>
 800a894:	18e1      	adds	r1, r4, r3
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	2030      	movs	r0, #48	; 0x30
 800a89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a89e:	4422      	add	r2, r4
 800a8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	e7c7      	b.n	800a83c <_printf_common+0x58>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	47c0      	blx	r8
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d0e6      	beq.n	800a888 <_printf_common+0xa4>
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	e7d9      	b.n	800a872 <_printf_common+0x8e>
	...

0800a8c0 <_printf_i>:
 800a8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	7e0f      	ldrb	r7, [r1, #24]
 800a8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c8:	2f78      	cmp	r7, #120	; 0x78
 800a8ca:	4691      	mov	r9, r2
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	469a      	mov	sl, r3
 800a8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8d6:	d807      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8d8:	2f62      	cmp	r7, #98	; 0x62
 800a8da:	d80a      	bhi.n	800a8f2 <_printf_i+0x32>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	f000 80d8 	beq.w	800aa92 <_printf_i+0x1d2>
 800a8e2:	2f58      	cmp	r7, #88	; 0x58
 800a8e4:	f000 80a3 	beq.w	800aa2e <_printf_i+0x16e>
 800a8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8f0:	e03a      	b.n	800a968 <_printf_i+0xa8>
 800a8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8f6:	2b15      	cmp	r3, #21
 800a8f8:	d8f6      	bhi.n	800a8e8 <_printf_i+0x28>
 800a8fa:	a101      	add	r1, pc, #4	; (adr r1, 800a900 <_printf_i+0x40>)
 800a8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a900:	0800a959 	.word	0x0800a959
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a8e9 	.word	0x0800a8e9
 800a90c:	0800a8e9 	.word	0x0800a8e9
 800a910:	0800a8e9 	.word	0x0800a8e9
 800a914:	0800a8e9 	.word	0x0800a8e9
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a8e9 	.word	0x0800a8e9
 800a920:	0800a8e9 	.word	0x0800a8e9
 800a924:	0800a8e9 	.word	0x0800a8e9
 800a928:	0800a8e9 	.word	0x0800a8e9
 800a92c:	0800aa79 	.word	0x0800aa79
 800a930:	0800a99d 	.word	0x0800a99d
 800a934:	0800aa5b 	.word	0x0800aa5b
 800a938:	0800a8e9 	.word	0x0800a8e9
 800a93c:	0800a8e9 	.word	0x0800a8e9
 800a940:	0800aa9b 	.word	0x0800aa9b
 800a944:	0800a8e9 	.word	0x0800a8e9
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a8e9 	.word	0x0800a8e9
 800a950:	0800a8e9 	.word	0x0800a8e9
 800a954:	0800aa63 	.word	0x0800aa63
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	1d1a      	adds	r2, r3, #4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	602a      	str	r2, [r5, #0]
 800a960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a968:	2301      	movs	r3, #1
 800a96a:	e0a3      	b.n	800aab4 <_printf_i+0x1f4>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	6829      	ldr	r1, [r5, #0]
 800a970:	0606      	lsls	r6, r0, #24
 800a972:	f101 0304 	add.w	r3, r1, #4
 800a976:	d50a      	bpl.n	800a98e <_printf_i+0xce>
 800a978:	680e      	ldr	r6, [r1, #0]
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	da03      	bge.n	800a988 <_printf_i+0xc8>
 800a980:	232d      	movs	r3, #45	; 0x2d
 800a982:	4276      	negs	r6, r6
 800a984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a988:	485e      	ldr	r0, [pc, #376]	; (800ab04 <_printf_i+0x244>)
 800a98a:	230a      	movs	r3, #10
 800a98c:	e019      	b.n	800a9c2 <_printf_i+0x102>
 800a98e:	680e      	ldr	r6, [r1, #0]
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a996:	bf18      	it	ne
 800a998:	b236      	sxthne	r6, r6
 800a99a:	e7ef      	b.n	800a97c <_printf_i+0xbc>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	6820      	ldr	r0, [r4, #0]
 800a9a0:	1d19      	adds	r1, r3, #4
 800a9a2:	6029      	str	r1, [r5, #0]
 800a9a4:	0601      	lsls	r1, r0, #24
 800a9a6:	d501      	bpl.n	800a9ac <_printf_i+0xec>
 800a9a8:	681e      	ldr	r6, [r3, #0]
 800a9aa:	e002      	b.n	800a9b2 <_printf_i+0xf2>
 800a9ac:	0646      	lsls	r6, r0, #25
 800a9ae:	d5fb      	bpl.n	800a9a8 <_printf_i+0xe8>
 800a9b0:	881e      	ldrh	r6, [r3, #0]
 800a9b2:	4854      	ldr	r0, [pc, #336]	; (800ab04 <_printf_i+0x244>)
 800a9b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9b6:	bf0c      	ite	eq
 800a9b8:	2308      	moveq	r3, #8
 800a9ba:	230a      	movne	r3, #10
 800a9bc:	2100      	movs	r1, #0
 800a9be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9c2:	6865      	ldr	r5, [r4, #4]
 800a9c4:	60a5      	str	r5, [r4, #8]
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	bfa2      	ittt	ge
 800a9ca:	6821      	ldrge	r1, [r4, #0]
 800a9cc:	f021 0104 	bicge.w	r1, r1, #4
 800a9d0:	6021      	strge	r1, [r4, #0]
 800a9d2:	b90e      	cbnz	r6, 800a9d8 <_printf_i+0x118>
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	d04d      	beq.n	800aa74 <_printf_i+0x1b4>
 800a9d8:	4615      	mov	r5, r2
 800a9da:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9de:	fb03 6711 	mls	r7, r3, r1, r6
 800a9e2:	5dc7      	ldrb	r7, [r0, r7]
 800a9e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9e8:	4637      	mov	r7, r6
 800a9ea:	42bb      	cmp	r3, r7
 800a9ec:	460e      	mov	r6, r1
 800a9ee:	d9f4      	bls.n	800a9da <_printf_i+0x11a>
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d10b      	bne.n	800aa0c <_printf_i+0x14c>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	07de      	lsls	r6, r3, #31
 800a9f8:	d508      	bpl.n	800aa0c <_printf_i+0x14c>
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	6861      	ldr	r1, [r4, #4]
 800a9fe:	4299      	cmp	r1, r3
 800aa00:	bfde      	ittt	le
 800aa02:	2330      	movle	r3, #48	; 0x30
 800aa04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa0c:	1b52      	subs	r2, r2, r5
 800aa0e:	6122      	str	r2, [r4, #16]
 800aa10:	f8cd a000 	str.w	sl, [sp]
 800aa14:	464b      	mov	r3, r9
 800aa16:	aa03      	add	r2, sp, #12
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	f7ff fee2 	bl	800a7e4 <_printf_common>
 800aa20:	3001      	adds	r0, #1
 800aa22:	d14c      	bne.n	800aabe <_printf_i+0x1fe>
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	b004      	add	sp, #16
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	4835      	ldr	r0, [pc, #212]	; (800ab04 <_printf_i+0x244>)
 800aa30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa34:	6829      	ldr	r1, [r5, #0]
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa3c:	6029      	str	r1, [r5, #0]
 800aa3e:	061d      	lsls	r5, r3, #24
 800aa40:	d514      	bpl.n	800aa6c <_printf_i+0x1ac>
 800aa42:	07df      	lsls	r7, r3, #31
 800aa44:	bf44      	itt	mi
 800aa46:	f043 0320 	orrmi.w	r3, r3, #32
 800aa4a:	6023      	strmi	r3, [r4, #0]
 800aa4c:	b91e      	cbnz	r6, 800aa56 <_printf_i+0x196>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f023 0320 	bic.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	2310      	movs	r3, #16
 800aa58:	e7b0      	b.n	800a9bc <_printf_i+0xfc>
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f043 0320 	orr.w	r3, r3, #32
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	2378      	movs	r3, #120	; 0x78
 800aa64:	4828      	ldr	r0, [pc, #160]	; (800ab08 <_printf_i+0x248>)
 800aa66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa6a:	e7e3      	b.n	800aa34 <_printf_i+0x174>
 800aa6c:	0659      	lsls	r1, r3, #25
 800aa6e:	bf48      	it	mi
 800aa70:	b2b6      	uxthmi	r6, r6
 800aa72:	e7e6      	b.n	800aa42 <_printf_i+0x182>
 800aa74:	4615      	mov	r5, r2
 800aa76:	e7bb      	b.n	800a9f0 <_printf_i+0x130>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	6826      	ldr	r6, [r4, #0]
 800aa7c:	6961      	ldr	r1, [r4, #20]
 800aa7e:	1d18      	adds	r0, r3, #4
 800aa80:	6028      	str	r0, [r5, #0]
 800aa82:	0635      	lsls	r5, r6, #24
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	d501      	bpl.n	800aa8c <_printf_i+0x1cc>
 800aa88:	6019      	str	r1, [r3, #0]
 800aa8a:	e002      	b.n	800aa92 <_printf_i+0x1d2>
 800aa8c:	0670      	lsls	r0, r6, #25
 800aa8e:	d5fb      	bpl.n	800aa88 <_printf_i+0x1c8>
 800aa90:	8019      	strh	r1, [r3, #0]
 800aa92:	2300      	movs	r3, #0
 800aa94:	6123      	str	r3, [r4, #16]
 800aa96:	4615      	mov	r5, r2
 800aa98:	e7ba      	b.n	800aa10 <_printf_i+0x150>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	1d1a      	adds	r2, r3, #4
 800aa9e:	602a      	str	r2, [r5, #0]
 800aaa0:	681d      	ldr	r5, [r3, #0]
 800aaa2:	6862      	ldr	r2, [r4, #4]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f7f5 fbba 	bl	8000220 <memchr>
 800aaac:	b108      	cbz	r0, 800aab2 <_printf_i+0x1f2>
 800aaae:	1b40      	subs	r0, r0, r5
 800aab0:	6060      	str	r0, [r4, #4]
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	2300      	movs	r3, #0
 800aab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aabc:	e7a8      	b.n	800aa10 <_printf_i+0x150>
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	462a      	mov	r2, r5
 800aac2:	4649      	mov	r1, r9
 800aac4:	4640      	mov	r0, r8
 800aac6:	47d0      	blx	sl
 800aac8:	3001      	adds	r0, #1
 800aaca:	d0ab      	beq.n	800aa24 <_printf_i+0x164>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	079b      	lsls	r3, r3, #30
 800aad0:	d413      	bmi.n	800aafa <_printf_i+0x23a>
 800aad2:	68e0      	ldr	r0, [r4, #12]
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	4298      	cmp	r0, r3
 800aad8:	bfb8      	it	lt
 800aada:	4618      	movlt	r0, r3
 800aadc:	e7a4      	b.n	800aa28 <_printf_i+0x168>
 800aade:	2301      	movs	r3, #1
 800aae0:	4632      	mov	r2, r6
 800aae2:	4649      	mov	r1, r9
 800aae4:	4640      	mov	r0, r8
 800aae6:	47d0      	blx	sl
 800aae8:	3001      	adds	r0, #1
 800aaea:	d09b      	beq.n	800aa24 <_printf_i+0x164>
 800aaec:	3501      	adds	r5, #1
 800aaee:	68e3      	ldr	r3, [r4, #12]
 800aaf0:	9903      	ldr	r1, [sp, #12]
 800aaf2:	1a5b      	subs	r3, r3, r1
 800aaf4:	42ab      	cmp	r3, r5
 800aaf6:	dcf2      	bgt.n	800aade <_printf_i+0x21e>
 800aaf8:	e7eb      	b.n	800aad2 <_printf_i+0x212>
 800aafa:	2500      	movs	r5, #0
 800aafc:	f104 0619 	add.w	r6, r4, #25
 800ab00:	e7f5      	b.n	800aaee <_printf_i+0x22e>
 800ab02:	bf00      	nop
 800ab04:	08011224 	.word	0x08011224
 800ab08:	08011235 	.word	0x08011235

0800ab0c <_scanf_float>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	b087      	sub	sp, #28
 800ab12:	4617      	mov	r7, r2
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	688b      	ldr	r3, [r1, #8]
 800ab18:	1e5a      	subs	r2, r3, #1
 800ab1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab1e:	bf83      	ittte	hi
 800ab20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab24:	195b      	addhi	r3, r3, r5
 800ab26:	9302      	strhi	r3, [sp, #8]
 800ab28:	2300      	movls	r3, #0
 800ab2a:	bf86      	itte	hi
 800ab2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab30:	608b      	strhi	r3, [r1, #8]
 800ab32:	9302      	strls	r3, [sp, #8]
 800ab34:	680b      	ldr	r3, [r1, #0]
 800ab36:	468b      	mov	fp, r1
 800ab38:	2500      	movs	r5, #0
 800ab3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab3e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ab42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab46:	4680      	mov	r8, r0
 800ab48:	460c      	mov	r4, r1
 800ab4a:	465e      	mov	r6, fp
 800ab4c:	46aa      	mov	sl, r5
 800ab4e:	46a9      	mov	r9, r5
 800ab50:	9501      	str	r5, [sp, #4]
 800ab52:	68a2      	ldr	r2, [r4, #8]
 800ab54:	b152      	cbz	r2, 800ab6c <_scanf_float+0x60>
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab5c:	d864      	bhi.n	800ac28 <_scanf_float+0x11c>
 800ab5e:	2b40      	cmp	r3, #64	; 0x40
 800ab60:	d83c      	bhi.n	800abdc <_scanf_float+0xd0>
 800ab62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ab66:	b2c8      	uxtb	r0, r1
 800ab68:	280e      	cmp	r0, #14
 800ab6a:	d93a      	bls.n	800abe2 <_scanf_float+0xd6>
 800ab6c:	f1b9 0f00 	cmp.w	r9, #0
 800ab70:	d003      	beq.n	800ab7a <_scanf_float+0x6e>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab7e:	f1ba 0f01 	cmp.w	sl, #1
 800ab82:	f200 8113 	bhi.w	800adac <_scanf_float+0x2a0>
 800ab86:	455e      	cmp	r6, fp
 800ab88:	f200 8105 	bhi.w	800ad96 <_scanf_float+0x28a>
 800ab8c:	2501      	movs	r5, #1
 800ab8e:	4628      	mov	r0, r5
 800ab90:	b007      	add	sp, #28
 800ab92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ab9a:	2a0d      	cmp	r2, #13
 800ab9c:	d8e6      	bhi.n	800ab6c <_scanf_float+0x60>
 800ab9e:	a101      	add	r1, pc, #4	; (adr r1, 800aba4 <_scanf_float+0x98>)
 800aba0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aba4:	0800ace3 	.word	0x0800ace3
 800aba8:	0800ab6d 	.word	0x0800ab6d
 800abac:	0800ab6d 	.word	0x0800ab6d
 800abb0:	0800ab6d 	.word	0x0800ab6d
 800abb4:	0800ad43 	.word	0x0800ad43
 800abb8:	0800ad1b 	.word	0x0800ad1b
 800abbc:	0800ab6d 	.word	0x0800ab6d
 800abc0:	0800ab6d 	.word	0x0800ab6d
 800abc4:	0800acf1 	.word	0x0800acf1
 800abc8:	0800ab6d 	.word	0x0800ab6d
 800abcc:	0800ab6d 	.word	0x0800ab6d
 800abd0:	0800ab6d 	.word	0x0800ab6d
 800abd4:	0800ab6d 	.word	0x0800ab6d
 800abd8:	0800aca9 	.word	0x0800aca9
 800abdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800abe0:	e7db      	b.n	800ab9a <_scanf_float+0x8e>
 800abe2:	290e      	cmp	r1, #14
 800abe4:	d8c2      	bhi.n	800ab6c <_scanf_float+0x60>
 800abe6:	a001      	add	r0, pc, #4	; (adr r0, 800abec <_scanf_float+0xe0>)
 800abe8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800abec:	0800ac9b 	.word	0x0800ac9b
 800abf0:	0800ab6d 	.word	0x0800ab6d
 800abf4:	0800ac9b 	.word	0x0800ac9b
 800abf8:	0800ad2f 	.word	0x0800ad2f
 800abfc:	0800ab6d 	.word	0x0800ab6d
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac85 	.word	0x0800ac85
 800ac08:	0800ac85 	.word	0x0800ac85
 800ac0c:	0800ac85 	.word	0x0800ac85
 800ac10:	0800ac85 	.word	0x0800ac85
 800ac14:	0800ac85 	.word	0x0800ac85
 800ac18:	0800ac85 	.word	0x0800ac85
 800ac1c:	0800ac85 	.word	0x0800ac85
 800ac20:	0800ac85 	.word	0x0800ac85
 800ac24:	0800ac85 	.word	0x0800ac85
 800ac28:	2b6e      	cmp	r3, #110	; 0x6e
 800ac2a:	d809      	bhi.n	800ac40 <_scanf_float+0x134>
 800ac2c:	2b60      	cmp	r3, #96	; 0x60
 800ac2e:	d8b2      	bhi.n	800ab96 <_scanf_float+0x8a>
 800ac30:	2b54      	cmp	r3, #84	; 0x54
 800ac32:	d077      	beq.n	800ad24 <_scanf_float+0x218>
 800ac34:	2b59      	cmp	r3, #89	; 0x59
 800ac36:	d199      	bne.n	800ab6c <_scanf_float+0x60>
 800ac38:	2d07      	cmp	r5, #7
 800ac3a:	d197      	bne.n	800ab6c <_scanf_float+0x60>
 800ac3c:	2508      	movs	r5, #8
 800ac3e:	e029      	b.n	800ac94 <_scanf_float+0x188>
 800ac40:	2b74      	cmp	r3, #116	; 0x74
 800ac42:	d06f      	beq.n	800ad24 <_scanf_float+0x218>
 800ac44:	2b79      	cmp	r3, #121	; 0x79
 800ac46:	e7f6      	b.n	800ac36 <_scanf_float+0x12a>
 800ac48:	6821      	ldr	r1, [r4, #0]
 800ac4a:	05c8      	lsls	r0, r1, #23
 800ac4c:	d51a      	bpl.n	800ac84 <_scanf_float+0x178>
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac54:	6021      	str	r1, [r4, #0]
 800ac56:	f109 0901 	add.w	r9, r9, #1
 800ac5a:	b11b      	cbz	r3, 800ac64 <_scanf_float+0x158>
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	3201      	adds	r2, #1
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	60a2      	str	r2, [r4, #8]
 800ac64:	68a3      	ldr	r3, [r4, #8]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	60a3      	str	r3, [r4, #8]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	f340 8084 	ble.w	800ad84 <_scanf_float+0x278>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	603b      	str	r3, [r7, #0]
 800ac82:	e766      	b.n	800ab52 <_scanf_float+0x46>
 800ac84:	eb1a 0f05 	cmn.w	sl, r5
 800ac88:	f47f af70 	bne.w	800ab6c <_scanf_float+0x60>
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	f806 3b01 	strb.w	r3, [r6], #1
 800ac98:	e7e4      	b.n	800ac64 <_scanf_float+0x158>
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	0610      	lsls	r0, r2, #24
 800ac9e:	f57f af65 	bpl.w	800ab6c <_scanf_float+0x60>
 800aca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aca6:	e7f4      	b.n	800ac92 <_scanf_float+0x186>
 800aca8:	f1ba 0f00 	cmp.w	sl, #0
 800acac:	d10e      	bne.n	800accc <_scanf_float+0x1c0>
 800acae:	f1b9 0f00 	cmp.w	r9, #0
 800acb2:	d10e      	bne.n	800acd2 <_scanf_float+0x1c6>
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800acba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800acbe:	d108      	bne.n	800acd2 <_scanf_float+0x1c6>
 800acc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acc4:	6022      	str	r2, [r4, #0]
 800acc6:	f04f 0a01 	mov.w	sl, #1
 800acca:	e7e3      	b.n	800ac94 <_scanf_float+0x188>
 800accc:	f1ba 0f02 	cmp.w	sl, #2
 800acd0:	d055      	beq.n	800ad7e <_scanf_float+0x272>
 800acd2:	2d01      	cmp	r5, #1
 800acd4:	d002      	beq.n	800acdc <_scanf_float+0x1d0>
 800acd6:	2d04      	cmp	r5, #4
 800acd8:	f47f af48 	bne.w	800ab6c <_scanf_float+0x60>
 800acdc:	3501      	adds	r5, #1
 800acde:	b2ed      	uxtb	r5, r5
 800ace0:	e7d8      	b.n	800ac94 <_scanf_float+0x188>
 800ace2:	f1ba 0f01 	cmp.w	sl, #1
 800ace6:	f47f af41 	bne.w	800ab6c <_scanf_float+0x60>
 800acea:	f04f 0a02 	mov.w	sl, #2
 800acee:	e7d1      	b.n	800ac94 <_scanf_float+0x188>
 800acf0:	b97d      	cbnz	r5, 800ad12 <_scanf_float+0x206>
 800acf2:	f1b9 0f00 	cmp.w	r9, #0
 800acf6:	f47f af3c 	bne.w	800ab72 <_scanf_float+0x66>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad04:	f47f af39 	bne.w	800ab7a <_scanf_float+0x6e>
 800ad08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad0c:	6022      	str	r2, [r4, #0]
 800ad0e:	2501      	movs	r5, #1
 800ad10:	e7c0      	b.n	800ac94 <_scanf_float+0x188>
 800ad12:	2d03      	cmp	r5, #3
 800ad14:	d0e2      	beq.n	800acdc <_scanf_float+0x1d0>
 800ad16:	2d05      	cmp	r5, #5
 800ad18:	e7de      	b.n	800acd8 <_scanf_float+0x1cc>
 800ad1a:	2d02      	cmp	r5, #2
 800ad1c:	f47f af26 	bne.w	800ab6c <_scanf_float+0x60>
 800ad20:	2503      	movs	r5, #3
 800ad22:	e7b7      	b.n	800ac94 <_scanf_float+0x188>
 800ad24:	2d06      	cmp	r5, #6
 800ad26:	f47f af21 	bne.w	800ab6c <_scanf_float+0x60>
 800ad2a:	2507      	movs	r5, #7
 800ad2c:	e7b2      	b.n	800ac94 <_scanf_float+0x188>
 800ad2e:	6822      	ldr	r2, [r4, #0]
 800ad30:	0591      	lsls	r1, r2, #22
 800ad32:	f57f af1b 	bpl.w	800ab6c <_scanf_float+0x60>
 800ad36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad3a:	6022      	str	r2, [r4, #0]
 800ad3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad40:	e7a8      	b.n	800ac94 <_scanf_float+0x188>
 800ad42:	6822      	ldr	r2, [r4, #0]
 800ad44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ad48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad4c:	d006      	beq.n	800ad5c <_scanf_float+0x250>
 800ad4e:	0550      	lsls	r0, r2, #21
 800ad50:	f57f af0c 	bpl.w	800ab6c <_scanf_float+0x60>
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	f43f af0f 	beq.w	800ab7a <_scanf_float+0x6e>
 800ad5c:	0591      	lsls	r1, r2, #22
 800ad5e:	bf58      	it	pl
 800ad60:	9901      	ldrpl	r1, [sp, #4]
 800ad62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad66:	bf58      	it	pl
 800ad68:	eba9 0101 	subpl.w	r1, r9, r1
 800ad6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ad70:	bf58      	it	pl
 800ad72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad76:	6022      	str	r2, [r4, #0]
 800ad78:	f04f 0900 	mov.w	r9, #0
 800ad7c:	e78a      	b.n	800ac94 <_scanf_float+0x188>
 800ad7e:	f04f 0a03 	mov.w	sl, #3
 800ad82:	e787      	b.n	800ac94 <_scanf_float+0x188>
 800ad84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad88:	4639      	mov	r1, r7
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	4798      	blx	r3
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f43f aedf 	beq.w	800ab52 <_scanf_float+0x46>
 800ad94:	e6ea      	b.n	800ab6c <_scanf_float+0x60>
 800ad96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad9e:	463a      	mov	r2, r7
 800ada0:	4640      	mov	r0, r8
 800ada2:	4798      	blx	r3
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	6123      	str	r3, [r4, #16]
 800adaa:	e6ec      	b.n	800ab86 <_scanf_float+0x7a>
 800adac:	1e6b      	subs	r3, r5, #1
 800adae:	2b06      	cmp	r3, #6
 800adb0:	d825      	bhi.n	800adfe <_scanf_float+0x2f2>
 800adb2:	2d02      	cmp	r5, #2
 800adb4:	d836      	bhi.n	800ae24 <_scanf_float+0x318>
 800adb6:	455e      	cmp	r6, fp
 800adb8:	f67f aee8 	bls.w	800ab8c <_scanf_float+0x80>
 800adbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adc4:	463a      	mov	r2, r7
 800adc6:	4640      	mov	r0, r8
 800adc8:	4798      	blx	r3
 800adca:	6923      	ldr	r3, [r4, #16]
 800adcc:	3b01      	subs	r3, #1
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	e7f1      	b.n	800adb6 <_scanf_float+0x2aa>
 800add2:	9802      	ldr	r0, [sp, #8]
 800add4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800add8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800addc:	9002      	str	r0, [sp, #8]
 800adde:	463a      	mov	r2, r7
 800ade0:	4640      	mov	r0, r8
 800ade2:	4798      	blx	r3
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adee:	fa5f fa8a 	uxtb.w	sl, sl
 800adf2:	f1ba 0f02 	cmp.w	sl, #2
 800adf6:	d1ec      	bne.n	800add2 <_scanf_float+0x2c6>
 800adf8:	3d03      	subs	r5, #3
 800adfa:	b2ed      	uxtb	r5, r5
 800adfc:	1b76      	subs	r6, r6, r5
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	05da      	lsls	r2, r3, #23
 800ae02:	d52f      	bpl.n	800ae64 <_scanf_float+0x358>
 800ae04:	055b      	lsls	r3, r3, #21
 800ae06:	d510      	bpl.n	800ae2a <_scanf_float+0x31e>
 800ae08:	455e      	cmp	r6, fp
 800ae0a:	f67f aebf 	bls.w	800ab8c <_scanf_float+0x80>
 800ae0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae16:	463a      	mov	r2, r7
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4798      	blx	r3
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	6123      	str	r3, [r4, #16]
 800ae22:	e7f1      	b.n	800ae08 <_scanf_float+0x2fc>
 800ae24:	46aa      	mov	sl, r5
 800ae26:	9602      	str	r6, [sp, #8]
 800ae28:	e7df      	b.n	800adea <_scanf_float+0x2de>
 800ae2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	2965      	cmp	r1, #101	; 0x65
 800ae32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae36:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	d00c      	beq.n	800ae58 <_scanf_float+0x34c>
 800ae3e:	2945      	cmp	r1, #69	; 0x45
 800ae40:	d00a      	beq.n	800ae58 <_scanf_float+0x34c>
 800ae42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae46:	463a      	mov	r2, r7
 800ae48:	4640      	mov	r0, r8
 800ae4a:	4798      	blx	r3
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	1eb5      	subs	r5, r6, #2
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae5c:	463a      	mov	r2, r7
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4798      	blx	r3
 800ae62:	462e      	mov	r6, r5
 800ae64:	6825      	ldr	r5, [r4, #0]
 800ae66:	f015 0510 	ands.w	r5, r5, #16
 800ae6a:	d159      	bne.n	800af20 <_scanf_float+0x414>
 800ae6c:	7035      	strb	r5, [r6, #0]
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae78:	d11b      	bne.n	800aeb2 <_scanf_float+0x3a6>
 800ae7a:	9b01      	ldr	r3, [sp, #4]
 800ae7c:	454b      	cmp	r3, r9
 800ae7e:	eba3 0209 	sub.w	r2, r3, r9
 800ae82:	d123      	bne.n	800aecc <_scanf_float+0x3c0>
 800ae84:	2200      	movs	r2, #0
 800ae86:	4659      	mov	r1, fp
 800ae88:	4640      	mov	r0, r8
 800ae8a:	f000 ff27 	bl	800bcdc <_strtod_r>
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	f012 0f02 	tst.w	r2, #2
 800ae96:	ec57 6b10 	vmov	r6, r7, d0
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	d021      	beq.n	800aee2 <_scanf_float+0x3d6>
 800ae9e:	9903      	ldr	r1, [sp, #12]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	600a      	str	r2, [r1, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	e9c3 6700 	strd	r6, r7, [r3]
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60e3      	str	r3, [r4, #12]
 800aeb0:	e66d      	b.n	800ab8e <_scanf_float+0x82>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0e5      	beq.n	800ae84 <_scanf_float+0x378>
 800aeb8:	9905      	ldr	r1, [sp, #20]
 800aeba:	230a      	movs	r3, #10
 800aebc:	462a      	mov	r2, r5
 800aebe:	3101      	adds	r1, #1
 800aec0:	4640      	mov	r0, r8
 800aec2:	f000 ff93 	bl	800bdec <_strtol_r>
 800aec6:	9b04      	ldr	r3, [sp, #16]
 800aec8:	9e05      	ldr	r6, [sp, #20]
 800aeca:	1ac2      	subs	r2, r0, r3
 800aecc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aed0:	429e      	cmp	r6, r3
 800aed2:	bf28      	it	cs
 800aed4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aed8:	4912      	ldr	r1, [pc, #72]	; (800af24 <_scanf_float+0x418>)
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 f82c 	bl	800af38 <siprintf>
 800aee0:	e7d0      	b.n	800ae84 <_scanf_float+0x378>
 800aee2:	9903      	ldr	r1, [sp, #12]
 800aee4:	f012 0f04 	tst.w	r2, #4
 800aee8:	f103 0204 	add.w	r2, r3, #4
 800aeec:	600a      	str	r2, [r1, #0]
 800aeee:	d1d9      	bne.n	800aea4 <_scanf_float+0x398>
 800aef0:	f8d3 8000 	ldr.w	r8, [r3]
 800aef4:	ee10 2a10 	vmov	r2, s0
 800aef8:	ee10 0a10 	vmov	r0, s0
 800aefc:	463b      	mov	r3, r7
 800aefe:	4639      	mov	r1, r7
 800af00:	f7f5 fe34 	bl	8000b6c <__aeabi_dcmpun>
 800af04:	b128      	cbz	r0, 800af12 <_scanf_float+0x406>
 800af06:	4808      	ldr	r0, [pc, #32]	; (800af28 <_scanf_float+0x41c>)
 800af08:	f000 f810 	bl	800af2c <nanf>
 800af0c:	ed88 0a00 	vstr	s0, [r8]
 800af10:	e7cb      	b.n	800aeaa <_scanf_float+0x39e>
 800af12:	4630      	mov	r0, r6
 800af14:	4639      	mov	r1, r7
 800af16:	f7f5 fe87 	bl	8000c28 <__aeabi_d2f>
 800af1a:	f8c8 0000 	str.w	r0, [r8]
 800af1e:	e7c4      	b.n	800aeaa <_scanf_float+0x39e>
 800af20:	2500      	movs	r5, #0
 800af22:	e634      	b.n	800ab8e <_scanf_float+0x82>
 800af24:	08011246 	.word	0x08011246
 800af28:	0801166b 	.word	0x0801166b

0800af2c <nanf>:
 800af2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af34 <nanf+0x8>
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	7fc00000 	.word	0x7fc00000

0800af38 <siprintf>:
 800af38:	b40e      	push	{r1, r2, r3}
 800af3a:	b500      	push	{lr}
 800af3c:	b09c      	sub	sp, #112	; 0x70
 800af3e:	ab1d      	add	r3, sp, #116	; 0x74
 800af40:	9002      	str	r0, [sp, #8]
 800af42:	9006      	str	r0, [sp, #24]
 800af44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af48:	4809      	ldr	r0, [pc, #36]	; (800af70 <siprintf+0x38>)
 800af4a:	9107      	str	r1, [sp, #28]
 800af4c:	9104      	str	r1, [sp, #16]
 800af4e:	4909      	ldr	r1, [pc, #36]	; (800af74 <siprintf+0x3c>)
 800af50:	f853 2b04 	ldr.w	r2, [r3], #4
 800af54:	9105      	str	r1, [sp, #20]
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	a902      	add	r1, sp, #8
 800af5c:	f002 ffa8 	bl	800deb0 <_svfiprintf_r>
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	b01c      	add	sp, #112	; 0x70
 800af68:	f85d eb04 	ldr.w	lr, [sp], #4
 800af6c:	b003      	add	sp, #12
 800af6e:	4770      	bx	lr
 800af70:	20000014 	.word	0x20000014
 800af74:	ffff0208 	.word	0xffff0208

0800af78 <siscanf>:
 800af78:	b40e      	push	{r1, r2, r3}
 800af7a:	b510      	push	{r4, lr}
 800af7c:	b09f      	sub	sp, #124	; 0x7c
 800af7e:	ac21      	add	r4, sp, #132	; 0x84
 800af80:	f44f 7101 	mov.w	r1, #516	; 0x204
 800af84:	f854 2b04 	ldr.w	r2, [r4], #4
 800af88:	9201      	str	r2, [sp, #4]
 800af8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800af8e:	9004      	str	r0, [sp, #16]
 800af90:	9008      	str	r0, [sp, #32]
 800af92:	f7f5 f93d 	bl	8000210 <strlen>
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <siscanf+0x50>)
 800af98:	9005      	str	r0, [sp, #20]
 800af9a:	9009      	str	r0, [sp, #36]	; 0x24
 800af9c:	930d      	str	r3, [sp, #52]	; 0x34
 800af9e:	480b      	ldr	r0, [pc, #44]	; (800afcc <siscanf+0x54>)
 800afa0:	9a01      	ldr	r2, [sp, #4]
 800afa2:	6800      	ldr	r0, [r0, #0]
 800afa4:	9403      	str	r4, [sp, #12]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9311      	str	r3, [sp, #68]	; 0x44
 800afaa:	9316      	str	r3, [sp, #88]	; 0x58
 800afac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	4623      	mov	r3, r4
 800afb8:	f003 f8d4 	bl	800e164 <__ssvfiscanf_r>
 800afbc:	b01f      	add	sp, #124	; 0x7c
 800afbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc2:	b003      	add	sp, #12
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	0800aff3 	.word	0x0800aff3
 800afcc:	20000014 	.word	0x20000014

0800afd0 <__sread>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	460c      	mov	r4, r1
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	f003 fb8e 	bl	800e6f8 <_read_r>
 800afdc:	2800      	cmp	r0, #0
 800afde:	bfab      	itete	ge
 800afe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afe2:	89a3      	ldrhlt	r3, [r4, #12]
 800afe4:	181b      	addge	r3, r3, r0
 800afe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afea:	bfac      	ite	ge
 800afec:	6563      	strge	r3, [r4, #84]	; 0x54
 800afee:	81a3      	strhlt	r3, [r4, #12]
 800aff0:	bd10      	pop	{r4, pc}

0800aff2 <__seofread>:
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr

0800aff6 <__swrite>:
 800aff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affa:	461f      	mov	r7, r3
 800affc:	898b      	ldrh	r3, [r1, #12]
 800affe:	05db      	lsls	r3, r3, #23
 800b000:	4605      	mov	r5, r0
 800b002:	460c      	mov	r4, r1
 800b004:	4616      	mov	r6, r2
 800b006:	d505      	bpl.n	800b014 <__swrite+0x1e>
 800b008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00c:	2302      	movs	r3, #2
 800b00e:	2200      	movs	r2, #0
 800b010:	f002 f900 	bl	800d214 <_lseek_r>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	4632      	mov	r2, r6
 800b022:	463b      	mov	r3, r7
 800b024:	4628      	mov	r0, r5
 800b026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	f000 bee1 	b.w	800bdf0 <_write_r>

0800b02e <__sseek>:
 800b02e:	b510      	push	{r4, lr}
 800b030:	460c      	mov	r4, r1
 800b032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b036:	f002 f8ed 	bl	800d214 <_lseek_r>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	bf15      	itete	ne
 800b040:	6560      	strne	r0, [r4, #84]	; 0x54
 800b042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b04a:	81a3      	strheq	r3, [r4, #12]
 800b04c:	bf18      	it	ne
 800b04e:	81a3      	strhne	r3, [r4, #12]
 800b050:	bd10      	pop	{r4, pc}

0800b052 <__sclose>:
 800b052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b056:	f000 bedd 	b.w	800be14 <_close_r>

0800b05a <strcpy>:
 800b05a:	4603      	mov	r3, r0
 800b05c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b060:	f803 2b01 	strb.w	r2, [r3], #1
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1f9      	bne.n	800b05c <strcpy+0x2>
 800b068:	4770      	bx	lr

0800b06a <strstr>:
 800b06a:	780a      	ldrb	r2, [r1, #0]
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	b96a      	cbnz	r2, 800b08c <strstr+0x22>
 800b070:	bd70      	pop	{r4, r5, r6, pc}
 800b072:	429a      	cmp	r2, r3
 800b074:	d109      	bne.n	800b08a <strstr+0x20>
 800b076:	460c      	mov	r4, r1
 800b078:	4605      	mov	r5, r0
 800b07a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0f6      	beq.n	800b070 <strstr+0x6>
 800b082:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b086:	429e      	cmp	r6, r3
 800b088:	d0f7      	beq.n	800b07a <strstr+0x10>
 800b08a:	3001      	adds	r0, #1
 800b08c:	7803      	ldrb	r3, [r0, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1ef      	bne.n	800b072 <strstr+0x8>
 800b092:	4618      	mov	r0, r3
 800b094:	e7ec      	b.n	800b070 <strstr+0x6>

0800b096 <sulp>:
 800b096:	b570      	push	{r4, r5, r6, lr}
 800b098:	4604      	mov	r4, r0
 800b09a:	460d      	mov	r5, r1
 800b09c:	ec45 4b10 	vmov	d0, r4, r5
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	f002 fc63 	bl	800d96c <__ulp>
 800b0a6:	ec51 0b10 	vmov	r0, r1, d0
 800b0aa:	b17e      	cbz	r6, 800b0cc <sulp+0x36>
 800b0ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd09      	ble.n	800b0cc <sulp+0x36>
 800b0b8:	051b      	lsls	r3, r3, #20
 800b0ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b0be:	2400      	movs	r4, #0
 800b0c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	f7f5 fab6 	bl	8000638 <__aeabi_dmul>
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0d0 <_strtod_l>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	ed2d 8b02 	vpush	{d8}
 800b0d8:	b09d      	sub	sp, #116	; 0x74
 800b0da:	461f      	mov	r7, r3
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9318      	str	r3, [sp, #96]	; 0x60
 800b0e0:	4ba2      	ldr	r3, [pc, #648]	; (800b36c <_strtod_l+0x29c>)
 800b0e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	4688      	mov	r8, r1
 800b0ee:	f7f5 f88f 	bl	8000210 <strlen>
 800b0f2:	f04f 0a00 	mov.w	sl, #0
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	f04f 0b00 	mov.w	fp, #0
 800b0fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b102:	781a      	ldrb	r2, [r3, #0]
 800b104:	2a2b      	cmp	r2, #43	; 0x2b
 800b106:	d04e      	beq.n	800b1a6 <_strtod_l+0xd6>
 800b108:	d83b      	bhi.n	800b182 <_strtod_l+0xb2>
 800b10a:	2a0d      	cmp	r2, #13
 800b10c:	d834      	bhi.n	800b178 <_strtod_l+0xa8>
 800b10e:	2a08      	cmp	r2, #8
 800b110:	d834      	bhi.n	800b17c <_strtod_l+0xac>
 800b112:	2a00      	cmp	r2, #0
 800b114:	d03e      	beq.n	800b194 <_strtod_l+0xc4>
 800b116:	2300      	movs	r3, #0
 800b118:	930a      	str	r3, [sp, #40]	; 0x28
 800b11a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b11c:	7833      	ldrb	r3, [r6, #0]
 800b11e:	2b30      	cmp	r3, #48	; 0x30
 800b120:	f040 80b0 	bne.w	800b284 <_strtod_l+0x1b4>
 800b124:	7873      	ldrb	r3, [r6, #1]
 800b126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b12a:	2b58      	cmp	r3, #88	; 0x58
 800b12c:	d168      	bne.n	800b200 <_strtod_l+0x130>
 800b12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	ab18      	add	r3, sp, #96	; 0x60
 800b134:	9702      	str	r7, [sp, #8]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	4a8d      	ldr	r2, [pc, #564]	; (800b370 <_strtod_l+0x2a0>)
 800b13a:	ab19      	add	r3, sp, #100	; 0x64
 800b13c:	a917      	add	r1, sp, #92	; 0x5c
 800b13e:	4620      	mov	r0, r4
 800b140:	f001 fd5c 	bl	800cbfc <__gethex>
 800b144:	f010 0707 	ands.w	r7, r0, #7
 800b148:	4605      	mov	r5, r0
 800b14a:	d005      	beq.n	800b158 <_strtod_l+0x88>
 800b14c:	2f06      	cmp	r7, #6
 800b14e:	d12c      	bne.n	800b1aa <_strtod_l+0xda>
 800b150:	3601      	adds	r6, #1
 800b152:	2300      	movs	r3, #0
 800b154:	9617      	str	r6, [sp, #92]	; 0x5c
 800b156:	930a      	str	r3, [sp, #40]	; 0x28
 800b158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f040 8590 	bne.w	800bc80 <_strtod_l+0xbb0>
 800b160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b162:	b1eb      	cbz	r3, 800b1a0 <_strtod_l+0xd0>
 800b164:	4652      	mov	r2, sl
 800b166:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b16a:	ec43 2b10 	vmov	d0, r2, r3
 800b16e:	b01d      	add	sp, #116	; 0x74
 800b170:	ecbd 8b02 	vpop	{d8}
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	2a20      	cmp	r2, #32
 800b17a:	d1cc      	bne.n	800b116 <_strtod_l+0x46>
 800b17c:	3301      	adds	r3, #1
 800b17e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b180:	e7be      	b.n	800b100 <_strtod_l+0x30>
 800b182:	2a2d      	cmp	r2, #45	; 0x2d
 800b184:	d1c7      	bne.n	800b116 <_strtod_l+0x46>
 800b186:	2201      	movs	r2, #1
 800b188:	920a      	str	r2, [sp, #40]	; 0x28
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1c2      	bne.n	800b11a <_strtod_l+0x4a>
 800b194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b196:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 856e 	bne.w	800bc7c <_strtod_l+0xbac>
 800b1a0:	4652      	mov	r2, sl
 800b1a2:	465b      	mov	r3, fp
 800b1a4:	e7e1      	b.n	800b16a <_strtod_l+0x9a>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	e7ee      	b.n	800b188 <_strtod_l+0xb8>
 800b1aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b1ac:	b13a      	cbz	r2, 800b1be <_strtod_l+0xee>
 800b1ae:	2135      	movs	r1, #53	; 0x35
 800b1b0:	a81a      	add	r0, sp, #104	; 0x68
 800b1b2:	f002 fce6 	bl	800db82 <__copybits>
 800b1b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f002 f8a5 	bl	800d308 <_Bfree>
 800b1be:	3f01      	subs	r7, #1
 800b1c0:	2f04      	cmp	r7, #4
 800b1c2:	d806      	bhi.n	800b1d2 <_strtod_l+0x102>
 800b1c4:	e8df f007 	tbb	[pc, r7]
 800b1c8:	1714030a 	.word	0x1714030a
 800b1cc:	0a          	.byte	0x0a
 800b1cd:	00          	.byte	0x00
 800b1ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b1d2:	0728      	lsls	r0, r5, #28
 800b1d4:	d5c0      	bpl.n	800b158 <_strtod_l+0x88>
 800b1d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b1da:	e7bd      	b.n	800b158 <_strtod_l+0x88>
 800b1dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b1e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b1e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b1e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b1ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b1ee:	e7f0      	b.n	800b1d2 <_strtod_l+0x102>
 800b1f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b374 <_strtod_l+0x2a4>
 800b1f4:	e7ed      	b.n	800b1d2 <_strtod_l+0x102>
 800b1f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b1fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b1fe:	e7e8      	b.n	800b1d2 <_strtod_l+0x102>
 800b200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	9217      	str	r2, [sp, #92]	; 0x5c
 800b206:	785b      	ldrb	r3, [r3, #1]
 800b208:	2b30      	cmp	r3, #48	; 0x30
 800b20a:	d0f9      	beq.n	800b200 <_strtod_l+0x130>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0a3      	beq.n	800b158 <_strtod_l+0x88>
 800b210:	2301      	movs	r3, #1
 800b212:	f04f 0900 	mov.w	r9, #0
 800b216:	9304      	str	r3, [sp, #16]
 800b218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b220:	464f      	mov	r7, r9
 800b222:	220a      	movs	r2, #10
 800b224:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b226:	7806      	ldrb	r6, [r0, #0]
 800b228:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b22c:	b2d9      	uxtb	r1, r3
 800b22e:	2909      	cmp	r1, #9
 800b230:	d92a      	bls.n	800b288 <_strtod_l+0x1b8>
 800b232:	9905      	ldr	r1, [sp, #20]
 800b234:	462a      	mov	r2, r5
 800b236:	f003 fac3 	bl	800e7c0 <strncmp>
 800b23a:	b398      	cbz	r0, 800b2a4 <_strtod_l+0x1d4>
 800b23c:	2000      	movs	r0, #0
 800b23e:	4632      	mov	r2, r6
 800b240:	463d      	mov	r5, r7
 800b242:	9005      	str	r0, [sp, #20]
 800b244:	4603      	mov	r3, r0
 800b246:	2a65      	cmp	r2, #101	; 0x65
 800b248:	d001      	beq.n	800b24e <_strtod_l+0x17e>
 800b24a:	2a45      	cmp	r2, #69	; 0x45
 800b24c:	d118      	bne.n	800b280 <_strtod_l+0x1b0>
 800b24e:	b91d      	cbnz	r5, 800b258 <_strtod_l+0x188>
 800b250:	9a04      	ldr	r2, [sp, #16]
 800b252:	4302      	orrs	r2, r0
 800b254:	d09e      	beq.n	800b194 <_strtod_l+0xc4>
 800b256:	2500      	movs	r5, #0
 800b258:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b25c:	f108 0201 	add.w	r2, r8, #1
 800b260:	9217      	str	r2, [sp, #92]	; 0x5c
 800b262:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b266:	2a2b      	cmp	r2, #43	; 0x2b
 800b268:	d075      	beq.n	800b356 <_strtod_l+0x286>
 800b26a:	2a2d      	cmp	r2, #45	; 0x2d
 800b26c:	d07b      	beq.n	800b366 <_strtod_l+0x296>
 800b26e:	f04f 0c00 	mov.w	ip, #0
 800b272:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b276:	2909      	cmp	r1, #9
 800b278:	f240 8082 	bls.w	800b380 <_strtod_l+0x2b0>
 800b27c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b280:	2600      	movs	r6, #0
 800b282:	e09d      	b.n	800b3c0 <_strtod_l+0x2f0>
 800b284:	2300      	movs	r3, #0
 800b286:	e7c4      	b.n	800b212 <_strtod_l+0x142>
 800b288:	2f08      	cmp	r7, #8
 800b28a:	bfd8      	it	le
 800b28c:	9907      	ldrle	r1, [sp, #28]
 800b28e:	f100 0001 	add.w	r0, r0, #1
 800b292:	bfda      	itte	le
 800b294:	fb02 3301 	mlale	r3, r2, r1, r3
 800b298:	9307      	strle	r3, [sp, #28]
 800b29a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b29e:	3701      	adds	r7, #1
 800b2a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b2a2:	e7bf      	b.n	800b224 <_strtod_l+0x154>
 800b2a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2a6:	195a      	adds	r2, r3, r5
 800b2a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2aa:	5d5a      	ldrb	r2, [r3, r5]
 800b2ac:	2f00      	cmp	r7, #0
 800b2ae:	d037      	beq.n	800b320 <_strtod_l+0x250>
 800b2b0:	9005      	str	r0, [sp, #20]
 800b2b2:	463d      	mov	r5, r7
 800b2b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b2b8:	2b09      	cmp	r3, #9
 800b2ba:	d912      	bls.n	800b2e2 <_strtod_l+0x212>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e7c2      	b.n	800b246 <_strtod_l+0x176>
 800b2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2c6:	785a      	ldrb	r2, [r3, #1]
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	2a30      	cmp	r2, #48	; 0x30
 800b2cc:	d0f8      	beq.n	800b2c0 <_strtod_l+0x1f0>
 800b2ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	f200 84d9 	bhi.w	800bc8a <_strtod_l+0xbba>
 800b2d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2da:	9005      	str	r0, [sp, #20]
 800b2dc:	2000      	movs	r0, #0
 800b2de:	9308      	str	r3, [sp, #32]
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	3a30      	subs	r2, #48	; 0x30
 800b2e4:	f100 0301 	add.w	r3, r0, #1
 800b2e8:	d014      	beq.n	800b314 <_strtod_l+0x244>
 800b2ea:	9905      	ldr	r1, [sp, #20]
 800b2ec:	4419      	add	r1, r3
 800b2ee:	9105      	str	r1, [sp, #20]
 800b2f0:	462b      	mov	r3, r5
 800b2f2:	eb00 0e05 	add.w	lr, r0, r5
 800b2f6:	210a      	movs	r1, #10
 800b2f8:	4573      	cmp	r3, lr
 800b2fa:	d113      	bne.n	800b324 <_strtod_l+0x254>
 800b2fc:	182b      	adds	r3, r5, r0
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	f105 0501 	add.w	r5, r5, #1
 800b304:	4405      	add	r5, r0
 800b306:	dc1c      	bgt.n	800b342 <_strtod_l+0x272>
 800b308:	9907      	ldr	r1, [sp, #28]
 800b30a:	230a      	movs	r3, #10
 800b30c:	fb03 2301 	mla	r3, r3, r1, r2
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	2300      	movs	r3, #0
 800b314:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b316:	1c51      	adds	r1, r2, #1
 800b318:	9117      	str	r1, [sp, #92]	; 0x5c
 800b31a:	7852      	ldrb	r2, [r2, #1]
 800b31c:	4618      	mov	r0, r3
 800b31e:	e7c9      	b.n	800b2b4 <_strtod_l+0x1e4>
 800b320:	4638      	mov	r0, r7
 800b322:	e7d2      	b.n	800b2ca <_strtod_l+0x1fa>
 800b324:	2b08      	cmp	r3, #8
 800b326:	dc04      	bgt.n	800b332 <_strtod_l+0x262>
 800b328:	9e07      	ldr	r6, [sp, #28]
 800b32a:	434e      	muls	r6, r1
 800b32c:	9607      	str	r6, [sp, #28]
 800b32e:	3301      	adds	r3, #1
 800b330:	e7e2      	b.n	800b2f8 <_strtod_l+0x228>
 800b332:	f103 0c01 	add.w	ip, r3, #1
 800b336:	f1bc 0f10 	cmp.w	ip, #16
 800b33a:	bfd8      	it	le
 800b33c:	fb01 f909 	mulle.w	r9, r1, r9
 800b340:	e7f5      	b.n	800b32e <_strtod_l+0x25e>
 800b342:	2d10      	cmp	r5, #16
 800b344:	bfdc      	itt	le
 800b346:	230a      	movle	r3, #10
 800b348:	fb03 2909 	mlale	r9, r3, r9, r2
 800b34c:	e7e1      	b.n	800b312 <_strtod_l+0x242>
 800b34e:	2300      	movs	r3, #0
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	2301      	movs	r3, #1
 800b354:	e77c      	b.n	800b250 <_strtod_l+0x180>
 800b356:	f04f 0c00 	mov.w	ip, #0
 800b35a:	f108 0202 	add.w	r2, r8, #2
 800b35e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b360:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b364:	e785      	b.n	800b272 <_strtod_l+0x1a2>
 800b366:	f04f 0c01 	mov.w	ip, #1
 800b36a:	e7f6      	b.n	800b35a <_strtod_l+0x28a>
 800b36c:	08011498 	.word	0x08011498
 800b370:	0801124c 	.word	0x0801124c
 800b374:	7ff00000 	.word	0x7ff00000
 800b378:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b37a:	1c51      	adds	r1, r2, #1
 800b37c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b37e:	7852      	ldrb	r2, [r2, #1]
 800b380:	2a30      	cmp	r2, #48	; 0x30
 800b382:	d0f9      	beq.n	800b378 <_strtod_l+0x2a8>
 800b384:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b388:	2908      	cmp	r1, #8
 800b38a:	f63f af79 	bhi.w	800b280 <_strtod_l+0x1b0>
 800b38e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b392:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b394:	9206      	str	r2, [sp, #24]
 800b396:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b398:	1c51      	adds	r1, r2, #1
 800b39a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b39c:	7852      	ldrb	r2, [r2, #1]
 800b39e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b3a2:	2e09      	cmp	r6, #9
 800b3a4:	d937      	bls.n	800b416 <_strtod_l+0x346>
 800b3a6:	9e06      	ldr	r6, [sp, #24]
 800b3a8:	1b89      	subs	r1, r1, r6
 800b3aa:	2908      	cmp	r1, #8
 800b3ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b3b0:	dc02      	bgt.n	800b3b8 <_strtod_l+0x2e8>
 800b3b2:	4576      	cmp	r6, lr
 800b3b4:	bfa8      	it	ge
 800b3b6:	4676      	movge	r6, lr
 800b3b8:	f1bc 0f00 	cmp.w	ip, #0
 800b3bc:	d000      	beq.n	800b3c0 <_strtod_l+0x2f0>
 800b3be:	4276      	negs	r6, r6
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	d14d      	bne.n	800b460 <_strtod_l+0x390>
 800b3c4:	9904      	ldr	r1, [sp, #16]
 800b3c6:	4301      	orrs	r1, r0
 800b3c8:	f47f aec6 	bne.w	800b158 <_strtod_l+0x88>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f47f aee1 	bne.w	800b194 <_strtod_l+0xc4>
 800b3d2:	2a69      	cmp	r2, #105	; 0x69
 800b3d4:	d027      	beq.n	800b426 <_strtod_l+0x356>
 800b3d6:	dc24      	bgt.n	800b422 <_strtod_l+0x352>
 800b3d8:	2a49      	cmp	r2, #73	; 0x49
 800b3da:	d024      	beq.n	800b426 <_strtod_l+0x356>
 800b3dc:	2a4e      	cmp	r2, #78	; 0x4e
 800b3de:	f47f aed9 	bne.w	800b194 <_strtod_l+0xc4>
 800b3e2:	499f      	ldr	r1, [pc, #636]	; (800b660 <_strtod_l+0x590>)
 800b3e4:	a817      	add	r0, sp, #92	; 0x5c
 800b3e6:	f001 fe61 	bl	800d0ac <__match>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f aed2 	beq.w	800b194 <_strtod_l+0xc4>
 800b3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b28      	cmp	r3, #40	; 0x28
 800b3f6:	d12d      	bne.n	800b454 <_strtod_l+0x384>
 800b3f8:	499a      	ldr	r1, [pc, #616]	; (800b664 <_strtod_l+0x594>)
 800b3fa:	aa1a      	add	r2, sp, #104	; 0x68
 800b3fc:	a817      	add	r0, sp, #92	; 0x5c
 800b3fe:	f001 fe69 	bl	800d0d4 <__hexnan>
 800b402:	2805      	cmp	r0, #5
 800b404:	d126      	bne.n	800b454 <_strtod_l+0x384>
 800b406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b408:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b40c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b410:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b414:	e6a0      	b.n	800b158 <_strtod_l+0x88>
 800b416:	210a      	movs	r1, #10
 800b418:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b41c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b420:	e7b9      	b.n	800b396 <_strtod_l+0x2c6>
 800b422:	2a6e      	cmp	r2, #110	; 0x6e
 800b424:	e7db      	b.n	800b3de <_strtod_l+0x30e>
 800b426:	4990      	ldr	r1, [pc, #576]	; (800b668 <_strtod_l+0x598>)
 800b428:	a817      	add	r0, sp, #92	; 0x5c
 800b42a:	f001 fe3f 	bl	800d0ac <__match>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f43f aeb0 	beq.w	800b194 <_strtod_l+0xc4>
 800b434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b436:	498d      	ldr	r1, [pc, #564]	; (800b66c <_strtod_l+0x59c>)
 800b438:	3b01      	subs	r3, #1
 800b43a:	a817      	add	r0, sp, #92	; 0x5c
 800b43c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b43e:	f001 fe35 	bl	800d0ac <__match>
 800b442:	b910      	cbnz	r0, 800b44a <_strtod_l+0x37a>
 800b444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b446:	3301      	adds	r3, #1
 800b448:	9317      	str	r3, [sp, #92]	; 0x5c
 800b44a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b67c <_strtod_l+0x5ac>
 800b44e:	f04f 0a00 	mov.w	sl, #0
 800b452:	e681      	b.n	800b158 <_strtod_l+0x88>
 800b454:	4886      	ldr	r0, [pc, #536]	; (800b670 <_strtod_l+0x5a0>)
 800b456:	f003 f963 	bl	800e720 <nan>
 800b45a:	ec5b ab10 	vmov	sl, fp, d0
 800b45e:	e67b      	b.n	800b158 <_strtod_l+0x88>
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	9807      	ldr	r0, [sp, #28]
 800b464:	1af3      	subs	r3, r6, r3
 800b466:	2f00      	cmp	r7, #0
 800b468:	bf08      	it	eq
 800b46a:	462f      	moveq	r7, r5
 800b46c:	2d10      	cmp	r5, #16
 800b46e:	9306      	str	r3, [sp, #24]
 800b470:	46a8      	mov	r8, r5
 800b472:	bfa8      	it	ge
 800b474:	f04f 0810 	movge.w	r8, #16
 800b478:	f7f5 f864 	bl	8000544 <__aeabi_ui2d>
 800b47c:	2d09      	cmp	r5, #9
 800b47e:	4682      	mov	sl, r0
 800b480:	468b      	mov	fp, r1
 800b482:	dd13      	ble.n	800b4ac <_strtod_l+0x3dc>
 800b484:	4b7b      	ldr	r3, [pc, #492]	; (800b674 <_strtod_l+0x5a4>)
 800b486:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b48a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b48e:	f7f5 f8d3 	bl	8000638 <__aeabi_dmul>
 800b492:	4682      	mov	sl, r0
 800b494:	4648      	mov	r0, r9
 800b496:	468b      	mov	fp, r1
 800b498:	f7f5 f854 	bl	8000544 <__aeabi_ui2d>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	f7f4 ff12 	bl	80002cc <__adddf3>
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	468b      	mov	fp, r1
 800b4ac:	2d0f      	cmp	r5, #15
 800b4ae:	dc38      	bgt.n	800b522 <_strtod_l+0x452>
 800b4b0:	9b06      	ldr	r3, [sp, #24]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f43f ae50 	beq.w	800b158 <_strtod_l+0x88>
 800b4b8:	dd24      	ble.n	800b504 <_strtod_l+0x434>
 800b4ba:	2b16      	cmp	r3, #22
 800b4bc:	dc0b      	bgt.n	800b4d6 <_strtod_l+0x406>
 800b4be:	496d      	ldr	r1, [pc, #436]	; (800b674 <_strtod_l+0x5a4>)
 800b4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	465b      	mov	r3, fp
 800b4cc:	f7f5 f8b4 	bl	8000638 <__aeabi_dmul>
 800b4d0:	4682      	mov	sl, r0
 800b4d2:	468b      	mov	fp, r1
 800b4d4:	e640      	b.n	800b158 <_strtod_l+0x88>
 800b4d6:	9a06      	ldr	r2, [sp, #24]
 800b4d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	db20      	blt.n	800b522 <_strtod_l+0x452>
 800b4e0:	4c64      	ldr	r4, [pc, #400]	; (800b674 <_strtod_l+0x5a4>)
 800b4e2:	f1c5 050f 	rsb	r5, r5, #15
 800b4e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b4ea:	4652      	mov	r2, sl
 800b4ec:	465b      	mov	r3, fp
 800b4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f2:	f7f5 f8a1 	bl	8000638 <__aeabi_dmul>
 800b4f6:	9b06      	ldr	r3, [sp, #24]
 800b4f8:	1b5d      	subs	r5, r3, r5
 800b4fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b4fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b502:	e7e3      	b.n	800b4cc <_strtod_l+0x3fc>
 800b504:	9b06      	ldr	r3, [sp, #24]
 800b506:	3316      	adds	r3, #22
 800b508:	db0b      	blt.n	800b522 <_strtod_l+0x452>
 800b50a:	9b05      	ldr	r3, [sp, #20]
 800b50c:	1b9e      	subs	r6, r3, r6
 800b50e:	4b59      	ldr	r3, [pc, #356]	; (800b674 <_strtod_l+0x5a4>)
 800b510:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b514:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b518:	4650      	mov	r0, sl
 800b51a:	4659      	mov	r1, fp
 800b51c:	f7f5 f9b6 	bl	800088c <__aeabi_ddiv>
 800b520:	e7d6      	b.n	800b4d0 <_strtod_l+0x400>
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	eba5 0808 	sub.w	r8, r5, r8
 800b528:	4498      	add	r8, r3
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	dd74      	ble.n	800b61a <_strtod_l+0x54a>
 800b530:	f018 030f 	ands.w	r3, r8, #15
 800b534:	d00a      	beq.n	800b54c <_strtod_l+0x47c>
 800b536:	494f      	ldr	r1, [pc, #316]	; (800b674 <_strtod_l+0x5a4>)
 800b538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b544:	f7f5 f878 	bl	8000638 <__aeabi_dmul>
 800b548:	4682      	mov	sl, r0
 800b54a:	468b      	mov	fp, r1
 800b54c:	f038 080f 	bics.w	r8, r8, #15
 800b550:	d04f      	beq.n	800b5f2 <_strtod_l+0x522>
 800b552:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b556:	dd22      	ble.n	800b59e <_strtod_l+0x4ce>
 800b558:	2500      	movs	r5, #0
 800b55a:	462e      	mov	r6, r5
 800b55c:	9507      	str	r5, [sp, #28]
 800b55e:	9505      	str	r5, [sp, #20]
 800b560:	2322      	movs	r3, #34	; 0x22
 800b562:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b67c <_strtod_l+0x5ac>
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	f04f 0a00 	mov.w	sl, #0
 800b56c:	9b07      	ldr	r3, [sp, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f43f adf2 	beq.w	800b158 <_strtod_l+0x88>
 800b574:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b576:	4620      	mov	r0, r4
 800b578:	f001 fec6 	bl	800d308 <_Bfree>
 800b57c:	9905      	ldr	r1, [sp, #20]
 800b57e:	4620      	mov	r0, r4
 800b580:	f001 fec2 	bl	800d308 <_Bfree>
 800b584:	4631      	mov	r1, r6
 800b586:	4620      	mov	r0, r4
 800b588:	f001 febe 	bl	800d308 <_Bfree>
 800b58c:	9907      	ldr	r1, [sp, #28]
 800b58e:	4620      	mov	r0, r4
 800b590:	f001 feba 	bl	800d308 <_Bfree>
 800b594:	4629      	mov	r1, r5
 800b596:	4620      	mov	r0, r4
 800b598:	f001 feb6 	bl	800d308 <_Bfree>
 800b59c:	e5dc      	b.n	800b158 <_strtod_l+0x88>
 800b59e:	4b36      	ldr	r3, [pc, #216]	; (800b678 <_strtod_l+0x5a8>)
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	4699      	mov	r9, r3
 800b5ae:	f1b8 0f01 	cmp.w	r8, #1
 800b5b2:	dc21      	bgt.n	800b5f8 <_strtod_l+0x528>
 800b5b4:	b10b      	cbz	r3, 800b5ba <_strtod_l+0x4ea>
 800b5b6:	4682      	mov	sl, r0
 800b5b8:	468b      	mov	fp, r1
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <_strtod_l+0x5a8>)
 800b5bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b5c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b5cc:	f7f5 f834 	bl	8000638 <__aeabi_dmul>
 800b5d0:	4b2a      	ldr	r3, [pc, #168]	; (800b67c <_strtod_l+0x5ac>)
 800b5d2:	460a      	mov	r2, r1
 800b5d4:	400b      	ands	r3, r1
 800b5d6:	492a      	ldr	r1, [pc, #168]	; (800b680 <_strtod_l+0x5b0>)
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	4682      	mov	sl, r0
 800b5dc:	d8bc      	bhi.n	800b558 <_strtod_l+0x488>
 800b5de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b5e2:	428b      	cmp	r3, r1
 800b5e4:	bf86      	itte	hi
 800b5e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b684 <_strtod_l+0x5b4>
 800b5ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800b5ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9304      	str	r3, [sp, #16]
 800b5f6:	e084      	b.n	800b702 <_strtod_l+0x632>
 800b5f8:	f018 0f01 	tst.w	r8, #1
 800b5fc:	d005      	beq.n	800b60a <_strtod_l+0x53a>
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f5 f818 	bl	8000638 <__aeabi_dmul>
 800b608:	2301      	movs	r3, #1
 800b60a:	9a04      	ldr	r2, [sp, #16]
 800b60c:	3208      	adds	r2, #8
 800b60e:	f109 0901 	add.w	r9, r9, #1
 800b612:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b616:	9204      	str	r2, [sp, #16]
 800b618:	e7c9      	b.n	800b5ae <_strtod_l+0x4de>
 800b61a:	d0ea      	beq.n	800b5f2 <_strtod_l+0x522>
 800b61c:	f1c8 0800 	rsb	r8, r8, #0
 800b620:	f018 020f 	ands.w	r2, r8, #15
 800b624:	d00a      	beq.n	800b63c <_strtod_l+0x56c>
 800b626:	4b13      	ldr	r3, [pc, #76]	; (800b674 <_strtod_l+0x5a4>)
 800b628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62c:	4650      	mov	r0, sl
 800b62e:	4659      	mov	r1, fp
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f7f5 f92a 	bl	800088c <__aeabi_ddiv>
 800b638:	4682      	mov	sl, r0
 800b63a:	468b      	mov	fp, r1
 800b63c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b640:	d0d7      	beq.n	800b5f2 <_strtod_l+0x522>
 800b642:	f1b8 0f1f 	cmp.w	r8, #31
 800b646:	dd1f      	ble.n	800b688 <_strtod_l+0x5b8>
 800b648:	2500      	movs	r5, #0
 800b64a:	462e      	mov	r6, r5
 800b64c:	9507      	str	r5, [sp, #28]
 800b64e:	9505      	str	r5, [sp, #20]
 800b650:	2322      	movs	r3, #34	; 0x22
 800b652:	f04f 0a00 	mov.w	sl, #0
 800b656:	f04f 0b00 	mov.w	fp, #0
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	e786      	b.n	800b56c <_strtod_l+0x49c>
 800b65e:	bf00      	nop
 800b660:	08011221 	.word	0x08011221
 800b664:	08011260 	.word	0x08011260
 800b668:	08011219 	.word	0x08011219
 800b66c:	080113a4 	.word	0x080113a4
 800b670:	0801166b 	.word	0x0801166b
 800b674:	08011530 	.word	0x08011530
 800b678:	08011508 	.word	0x08011508
 800b67c:	7ff00000 	.word	0x7ff00000
 800b680:	7ca00000 	.word	0x7ca00000
 800b684:	7fefffff 	.word	0x7fefffff
 800b688:	f018 0310 	ands.w	r3, r8, #16
 800b68c:	bf18      	it	ne
 800b68e:	236a      	movne	r3, #106	; 0x6a
 800b690:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ba40 <_strtod_l+0x970>
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	4650      	mov	r0, sl
 800b698:	4659      	mov	r1, fp
 800b69a:	2300      	movs	r3, #0
 800b69c:	f018 0f01 	tst.w	r8, #1
 800b6a0:	d004      	beq.n	800b6ac <_strtod_l+0x5dc>
 800b6a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b6a6:	f7f4 ffc7 	bl	8000638 <__aeabi_dmul>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b6b0:	f109 0908 	add.w	r9, r9, #8
 800b6b4:	d1f2      	bne.n	800b69c <_strtod_l+0x5cc>
 800b6b6:	b10b      	cbz	r3, 800b6bc <_strtod_l+0x5ec>
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	9b04      	ldr	r3, [sp, #16]
 800b6be:	b1c3      	cbz	r3, 800b6f2 <_strtod_l+0x622>
 800b6c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b6c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	4659      	mov	r1, fp
 800b6cc:	dd11      	ble.n	800b6f2 <_strtod_l+0x622>
 800b6ce:	2b1f      	cmp	r3, #31
 800b6d0:	f340 8124 	ble.w	800b91c <_strtod_l+0x84c>
 800b6d4:	2b34      	cmp	r3, #52	; 0x34
 800b6d6:	bfde      	ittt	le
 800b6d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b6dc:	f04f 33ff 	movle.w	r3, #4294967295
 800b6e0:	fa03 f202 	lslle.w	r2, r3, r2
 800b6e4:	f04f 0a00 	mov.w	sl, #0
 800b6e8:	bfcc      	ite	gt
 800b6ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b6ee:	ea02 0b01 	andle.w	fp, r2, r1
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	4659      	mov	r1, fp
 800b6fa:	f7f5 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d1a2      	bne.n	800b648 <_strtod_l+0x578>
 800b702:	9b07      	ldr	r3, [sp, #28]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	9908      	ldr	r1, [sp, #32]
 800b708:	462b      	mov	r3, r5
 800b70a:	463a      	mov	r2, r7
 800b70c:	4620      	mov	r0, r4
 800b70e:	f001 fe63 	bl	800d3d8 <__s2b>
 800b712:	9007      	str	r0, [sp, #28]
 800b714:	2800      	cmp	r0, #0
 800b716:	f43f af1f 	beq.w	800b558 <_strtod_l+0x488>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	1b9e      	subs	r6, r3, r6
 800b71e:	9b06      	ldr	r3, [sp, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfb4      	ite	lt
 800b724:	4633      	movlt	r3, r6
 800b726:	2300      	movge	r3, #0
 800b728:	930c      	str	r3, [sp, #48]	; 0x30
 800b72a:	9b06      	ldr	r3, [sp, #24]
 800b72c:	2500      	movs	r5, #0
 800b72e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b732:	9312      	str	r3, [sp, #72]	; 0x48
 800b734:	462e      	mov	r6, r5
 800b736:	9b07      	ldr	r3, [sp, #28]
 800b738:	4620      	mov	r0, r4
 800b73a:	6859      	ldr	r1, [r3, #4]
 800b73c:	f001 fda4 	bl	800d288 <_Balloc>
 800b740:	9005      	str	r0, [sp, #20]
 800b742:	2800      	cmp	r0, #0
 800b744:	f43f af0c 	beq.w	800b560 <_strtod_l+0x490>
 800b748:	9b07      	ldr	r3, [sp, #28]
 800b74a:	691a      	ldr	r2, [r3, #16]
 800b74c:	3202      	adds	r2, #2
 800b74e:	f103 010c 	add.w	r1, r3, #12
 800b752:	0092      	lsls	r2, r2, #2
 800b754:	300c      	adds	r0, #12
 800b756:	f001 fd89 	bl	800d26c <memcpy>
 800b75a:	ec4b ab10 	vmov	d0, sl, fp
 800b75e:	aa1a      	add	r2, sp, #104	; 0x68
 800b760:	a919      	add	r1, sp, #100	; 0x64
 800b762:	4620      	mov	r0, r4
 800b764:	f002 f97e 	bl	800da64 <__d2b>
 800b768:	ec4b ab18 	vmov	d8, sl, fp
 800b76c:	9018      	str	r0, [sp, #96]	; 0x60
 800b76e:	2800      	cmp	r0, #0
 800b770:	f43f aef6 	beq.w	800b560 <_strtod_l+0x490>
 800b774:	2101      	movs	r1, #1
 800b776:	4620      	mov	r0, r4
 800b778:	f001 fec8 	bl	800d50c <__i2b>
 800b77c:	4606      	mov	r6, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	f43f aeee 	beq.w	800b560 <_strtod_l+0x490>
 800b784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b786:	9904      	ldr	r1, [sp, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfab      	itete	ge
 800b78c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b78e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b790:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b792:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b796:	bfac      	ite	ge
 800b798:	eb03 0902 	addge.w	r9, r3, r2
 800b79c:	1ad7      	sublt	r7, r2, r3
 800b79e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b7a0:	eba3 0801 	sub.w	r8, r3, r1
 800b7a4:	4490      	add	r8, r2
 800b7a6:	4ba1      	ldr	r3, [pc, #644]	; (800ba2c <_strtod_l+0x95c>)
 800b7a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7ac:	4598      	cmp	r8, r3
 800b7ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7b2:	f280 80c7 	bge.w	800b944 <_strtod_l+0x874>
 800b7b6:	eba3 0308 	sub.w	r3, r3, r8
 800b7ba:	2b1f      	cmp	r3, #31
 800b7bc:	eba2 0203 	sub.w	r2, r2, r3
 800b7c0:	f04f 0101 	mov.w	r1, #1
 800b7c4:	f300 80b1 	bgt.w	800b92a <_strtod_l+0x85a>
 800b7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	9308      	str	r3, [sp, #32]
 800b7d2:	eb09 0802 	add.w	r8, r9, r2
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	45c1      	cmp	r9, r8
 800b7da:	4417      	add	r7, r2
 800b7dc:	441f      	add	r7, r3
 800b7de:	464b      	mov	r3, r9
 800b7e0:	bfa8      	it	ge
 800b7e2:	4643      	movge	r3, r8
 800b7e4:	42bb      	cmp	r3, r7
 800b7e6:	bfa8      	it	ge
 800b7e8:	463b      	movge	r3, r7
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfc2      	ittt	gt
 800b7ee:	eba8 0803 	subgt.w	r8, r8, r3
 800b7f2:	1aff      	subgt	r7, r7, r3
 800b7f4:	eba9 0903 	subgt.w	r9, r9, r3
 800b7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dd17      	ble.n	800b82e <_strtod_l+0x75e>
 800b7fe:	4631      	mov	r1, r6
 800b800:	461a      	mov	r2, r3
 800b802:	4620      	mov	r0, r4
 800b804:	f001 ff42 	bl	800d68c <__pow5mult>
 800b808:	4606      	mov	r6, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	f43f aea8 	beq.w	800b560 <_strtod_l+0x490>
 800b810:	4601      	mov	r1, r0
 800b812:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b814:	4620      	mov	r0, r4
 800b816:	f001 fe8f 	bl	800d538 <__multiply>
 800b81a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f43f ae9f 	beq.w	800b560 <_strtod_l+0x490>
 800b822:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b824:	4620      	mov	r0, r4
 800b826:	f001 fd6f 	bl	800d308 <_Bfree>
 800b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82c:	9318      	str	r3, [sp, #96]	; 0x60
 800b82e:	f1b8 0f00 	cmp.w	r8, #0
 800b832:	f300 808c 	bgt.w	800b94e <_strtod_l+0x87e>
 800b836:	9b06      	ldr	r3, [sp, #24]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dd08      	ble.n	800b84e <_strtod_l+0x77e>
 800b83c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b83e:	9905      	ldr	r1, [sp, #20]
 800b840:	4620      	mov	r0, r4
 800b842:	f001 ff23 	bl	800d68c <__pow5mult>
 800b846:	9005      	str	r0, [sp, #20]
 800b848:	2800      	cmp	r0, #0
 800b84a:	f43f ae89 	beq.w	800b560 <_strtod_l+0x490>
 800b84e:	2f00      	cmp	r7, #0
 800b850:	dd08      	ble.n	800b864 <_strtod_l+0x794>
 800b852:	9905      	ldr	r1, [sp, #20]
 800b854:	463a      	mov	r2, r7
 800b856:	4620      	mov	r0, r4
 800b858:	f001 ff72 	bl	800d740 <__lshift>
 800b85c:	9005      	str	r0, [sp, #20]
 800b85e:	2800      	cmp	r0, #0
 800b860:	f43f ae7e 	beq.w	800b560 <_strtod_l+0x490>
 800b864:	f1b9 0f00 	cmp.w	r9, #0
 800b868:	dd08      	ble.n	800b87c <_strtod_l+0x7ac>
 800b86a:	4631      	mov	r1, r6
 800b86c:	464a      	mov	r2, r9
 800b86e:	4620      	mov	r0, r4
 800b870:	f001 ff66 	bl	800d740 <__lshift>
 800b874:	4606      	mov	r6, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f ae72 	beq.w	800b560 <_strtod_l+0x490>
 800b87c:	9a05      	ldr	r2, [sp, #20]
 800b87e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b880:	4620      	mov	r0, r4
 800b882:	f001 ffe9 	bl	800d858 <__mdiff>
 800b886:	4605      	mov	r5, r0
 800b888:	2800      	cmp	r0, #0
 800b88a:	f43f ae69 	beq.w	800b560 <_strtod_l+0x490>
 800b88e:	68c3      	ldr	r3, [r0, #12]
 800b890:	930b      	str	r3, [sp, #44]	; 0x2c
 800b892:	2300      	movs	r3, #0
 800b894:	60c3      	str	r3, [r0, #12]
 800b896:	4631      	mov	r1, r6
 800b898:	f001 ffc2 	bl	800d820 <__mcmp>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	da60      	bge.n	800b962 <_strtod_l+0x892>
 800b8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b8a6:	f040 8082 	bne.w	800b9ae <_strtod_l+0x8de>
 800b8aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d17d      	bne.n	800b9ae <_strtod_l+0x8de>
 800b8b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8b6:	0d1b      	lsrs	r3, r3, #20
 800b8b8:	051b      	lsls	r3, r3, #20
 800b8ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8be:	d976      	bls.n	800b9ae <_strtod_l+0x8de>
 800b8c0:	696b      	ldr	r3, [r5, #20]
 800b8c2:	b913      	cbnz	r3, 800b8ca <_strtod_l+0x7fa>
 800b8c4:	692b      	ldr	r3, [r5, #16]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	dd71      	ble.n	800b9ae <_strtod_l+0x8de>
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f001 ff36 	bl	800d740 <__lshift>
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	f001 ffa2 	bl	800d820 <__mcmp>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	dd66      	ble.n	800b9ae <_strtod_l+0x8de>
 800b8e0:	9904      	ldr	r1, [sp, #16]
 800b8e2:	4a53      	ldr	r2, [pc, #332]	; (800ba30 <_strtod_l+0x960>)
 800b8e4:	465b      	mov	r3, fp
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	f000 8081 	beq.w	800b9ee <_strtod_l+0x91e>
 800b8ec:	ea02 010b 	and.w	r1, r2, fp
 800b8f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b8f4:	dc7b      	bgt.n	800b9ee <_strtod_l+0x91e>
 800b8f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b8fa:	f77f aea9 	ble.w	800b650 <_strtod_l+0x580>
 800b8fe:	4b4d      	ldr	r3, [pc, #308]	; (800ba34 <_strtod_l+0x964>)
 800b900:	4650      	mov	r0, sl
 800b902:	4659      	mov	r1, fp
 800b904:	2200      	movs	r2, #0
 800b906:	f7f4 fe97 	bl	8000638 <__aeabi_dmul>
 800b90a:	460b      	mov	r3, r1
 800b90c:	4303      	orrs	r3, r0
 800b90e:	bf08      	it	eq
 800b910:	2322      	moveq	r3, #34	; 0x22
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	bf08      	it	eq
 800b918:	6023      	streq	r3, [r4, #0]
 800b91a:	e62b      	b.n	800b574 <_strtod_l+0x4a4>
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295
 800b920:	fa02 f303 	lsl.w	r3, r2, r3
 800b924:	ea03 0a0a 	and.w	sl, r3, sl
 800b928:	e6e3      	b.n	800b6f2 <_strtod_l+0x622>
 800b92a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b92e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b932:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b936:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b93a:	fa01 f308 	lsl.w	r3, r1, r8
 800b93e:	9308      	str	r3, [sp, #32]
 800b940:	910d      	str	r1, [sp, #52]	; 0x34
 800b942:	e746      	b.n	800b7d2 <_strtod_l+0x702>
 800b944:	2300      	movs	r3, #0
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	2301      	movs	r3, #1
 800b94a:	930d      	str	r3, [sp, #52]	; 0x34
 800b94c:	e741      	b.n	800b7d2 <_strtod_l+0x702>
 800b94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b950:	4642      	mov	r2, r8
 800b952:	4620      	mov	r0, r4
 800b954:	f001 fef4 	bl	800d740 <__lshift>
 800b958:	9018      	str	r0, [sp, #96]	; 0x60
 800b95a:	2800      	cmp	r0, #0
 800b95c:	f47f af6b 	bne.w	800b836 <_strtod_l+0x766>
 800b960:	e5fe      	b.n	800b560 <_strtod_l+0x490>
 800b962:	465f      	mov	r7, fp
 800b964:	d16e      	bne.n	800ba44 <_strtod_l+0x974>
 800b966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b968:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b96c:	b342      	cbz	r2, 800b9c0 <_strtod_l+0x8f0>
 800b96e:	4a32      	ldr	r2, [pc, #200]	; (800ba38 <_strtod_l+0x968>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d128      	bne.n	800b9c6 <_strtod_l+0x8f6>
 800b974:	9b04      	ldr	r3, [sp, #16]
 800b976:	4651      	mov	r1, sl
 800b978:	b1eb      	cbz	r3, 800b9b6 <_strtod_l+0x8e6>
 800b97a:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <_strtod_l+0x960>)
 800b97c:	403b      	ands	r3, r7
 800b97e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	d819      	bhi.n	800b9bc <_strtod_l+0x8ec>
 800b988:	0d1b      	lsrs	r3, r3, #20
 800b98a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b98e:	fa02 f303 	lsl.w	r3, r2, r3
 800b992:	4299      	cmp	r1, r3
 800b994:	d117      	bne.n	800b9c6 <_strtod_l+0x8f6>
 800b996:	4b29      	ldr	r3, [pc, #164]	; (800ba3c <_strtod_l+0x96c>)
 800b998:	429f      	cmp	r7, r3
 800b99a:	d102      	bne.n	800b9a2 <_strtod_l+0x8d2>
 800b99c:	3101      	adds	r1, #1
 800b99e:	f43f addf 	beq.w	800b560 <_strtod_l+0x490>
 800b9a2:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <_strtod_l+0x960>)
 800b9a4:	403b      	ands	r3, r7
 800b9a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b9aa:	f04f 0a00 	mov.w	sl, #0
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1a4      	bne.n	800b8fe <_strtod_l+0x82e>
 800b9b4:	e5de      	b.n	800b574 <_strtod_l+0x4a4>
 800b9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ba:	e7ea      	b.n	800b992 <_strtod_l+0x8c2>
 800b9bc:	4613      	mov	r3, r2
 800b9be:	e7e8      	b.n	800b992 <_strtod_l+0x8c2>
 800b9c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b9c4:	d08c      	beq.n	800b8e0 <_strtod_l+0x810>
 800b9c6:	9b08      	ldr	r3, [sp, #32]
 800b9c8:	b1db      	cbz	r3, 800ba02 <_strtod_l+0x932>
 800b9ca:	423b      	tst	r3, r7
 800b9cc:	d0ef      	beq.n	800b9ae <_strtod_l+0x8de>
 800b9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d0:	9a04      	ldr	r2, [sp, #16]
 800b9d2:	4650      	mov	r0, sl
 800b9d4:	4659      	mov	r1, fp
 800b9d6:	b1c3      	cbz	r3, 800ba0a <_strtod_l+0x93a>
 800b9d8:	f7ff fb5d 	bl	800b096 <sulp>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	ec51 0b18 	vmov	r0, r1, d8
 800b9e4:	f7f4 fc72 	bl	80002cc <__adddf3>
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	468b      	mov	fp, r1
 800b9ec:	e7df      	b.n	800b9ae <_strtod_l+0x8de>
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b9f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b9f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b9fc:	f04f 3aff 	mov.w	sl, #4294967295
 800ba00:	e7d5      	b.n	800b9ae <_strtod_l+0x8de>
 800ba02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba04:	ea13 0f0a 	tst.w	r3, sl
 800ba08:	e7e0      	b.n	800b9cc <_strtod_l+0x8fc>
 800ba0a:	f7ff fb44 	bl	800b096 <sulp>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	ec51 0b18 	vmov	r0, r1, d8
 800ba16:	f7f4 fc57 	bl	80002c8 <__aeabi_dsub>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	f7f5 f871 	bl	8000b08 <__aeabi_dcmpeq>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d0c1      	beq.n	800b9ae <_strtod_l+0x8de>
 800ba2a:	e611      	b.n	800b650 <_strtod_l+0x580>
 800ba2c:	fffffc02 	.word	0xfffffc02
 800ba30:	7ff00000 	.word	0x7ff00000
 800ba34:	39500000 	.word	0x39500000
 800ba38:	000fffff 	.word	0x000fffff
 800ba3c:	7fefffff 	.word	0x7fefffff
 800ba40:	08011278 	.word	0x08011278
 800ba44:	4631      	mov	r1, r6
 800ba46:	4628      	mov	r0, r5
 800ba48:	f002 f868 	bl	800db1c <__ratio>
 800ba4c:	ec59 8b10 	vmov	r8, r9, d0
 800ba50:	ee10 0a10 	vmov	r0, s0
 800ba54:	2200      	movs	r2, #0
 800ba56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f7f5 f868 	bl	8000b30 <__aeabi_dcmple>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d07a      	beq.n	800bb5a <_strtod_l+0xa8a>
 800ba64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d04a      	beq.n	800bb00 <_strtod_l+0xa30>
 800ba6a:	4b95      	ldr	r3, [pc, #596]	; (800bcc0 <_strtod_l+0xbf0>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bcc0 <_strtod_l+0xbf0>
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	4b92      	ldr	r3, [pc, #584]	; (800bcc4 <_strtod_l+0xbf4>)
 800ba7c:	403b      	ands	r3, r7
 800ba7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ba80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba82:	4b91      	ldr	r3, [pc, #580]	; (800bcc8 <_strtod_l+0xbf8>)
 800ba84:	429a      	cmp	r2, r3
 800ba86:	f040 80b0 	bne.w	800bbea <_strtod_l+0xb1a>
 800ba8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ba92:	ec4b ab10 	vmov	d0, sl, fp
 800ba96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba9a:	f001 ff67 	bl	800d96c <__ulp>
 800ba9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800baa2:	ec53 2b10 	vmov	r2, r3, d0
 800baa6:	f7f4 fdc7 	bl	8000638 <__aeabi_dmul>
 800baaa:	4652      	mov	r2, sl
 800baac:	465b      	mov	r3, fp
 800baae:	f7f4 fc0d 	bl	80002cc <__adddf3>
 800bab2:	460b      	mov	r3, r1
 800bab4:	4983      	ldr	r1, [pc, #524]	; (800bcc4 <_strtod_l+0xbf4>)
 800bab6:	4a85      	ldr	r2, [pc, #532]	; (800bccc <_strtod_l+0xbfc>)
 800bab8:	4019      	ands	r1, r3
 800baba:	4291      	cmp	r1, r2
 800babc:	4682      	mov	sl, r0
 800babe:	d960      	bls.n	800bb82 <_strtod_l+0xab2>
 800bac0:	ee18 3a90 	vmov	r3, s17
 800bac4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bac8:	4293      	cmp	r3, r2
 800baca:	d104      	bne.n	800bad6 <_strtod_l+0xa06>
 800bacc:	ee18 3a10 	vmov	r3, s16
 800bad0:	3301      	adds	r3, #1
 800bad2:	f43f ad45 	beq.w	800b560 <_strtod_l+0x490>
 800bad6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bcd8 <_strtod_l+0xc08>
 800bada:	f04f 3aff 	mov.w	sl, #4294967295
 800bade:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bae0:	4620      	mov	r0, r4
 800bae2:	f001 fc11 	bl	800d308 <_Bfree>
 800bae6:	9905      	ldr	r1, [sp, #20]
 800bae8:	4620      	mov	r0, r4
 800baea:	f001 fc0d 	bl	800d308 <_Bfree>
 800baee:	4631      	mov	r1, r6
 800baf0:	4620      	mov	r0, r4
 800baf2:	f001 fc09 	bl	800d308 <_Bfree>
 800baf6:	4629      	mov	r1, r5
 800baf8:	4620      	mov	r0, r4
 800bafa:	f001 fc05 	bl	800d308 <_Bfree>
 800bafe:	e61a      	b.n	800b736 <_strtod_l+0x666>
 800bb00:	f1ba 0f00 	cmp.w	sl, #0
 800bb04:	d11b      	bne.n	800bb3e <_strtod_l+0xa6e>
 800bb06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb0a:	b9f3      	cbnz	r3, 800bb4a <_strtod_l+0xa7a>
 800bb0c:	4b6c      	ldr	r3, [pc, #432]	; (800bcc0 <_strtod_l+0xbf0>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4640      	mov	r0, r8
 800bb12:	4649      	mov	r1, r9
 800bb14:	f7f5 f802 	bl	8000b1c <__aeabi_dcmplt>
 800bb18:	b9d0      	cbnz	r0, 800bb50 <_strtod_l+0xa80>
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	4b6c      	ldr	r3, [pc, #432]	; (800bcd0 <_strtod_l+0xc00>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	f7f4 fd89 	bl	8000638 <__aeabi_dmul>
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bb2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bb32:	9315      	str	r3, [sp, #84]	; 0x54
 800bb34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bb38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb3c:	e79d      	b.n	800ba7a <_strtod_l+0x9aa>
 800bb3e:	f1ba 0f01 	cmp.w	sl, #1
 800bb42:	d102      	bne.n	800bb4a <_strtod_l+0xa7a>
 800bb44:	2f00      	cmp	r7, #0
 800bb46:	f43f ad83 	beq.w	800b650 <_strtod_l+0x580>
 800bb4a:	4b62      	ldr	r3, [pc, #392]	; (800bcd4 <_strtod_l+0xc04>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	e78e      	b.n	800ba6e <_strtod_l+0x99e>
 800bb50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bcd0 <_strtod_l+0xc00>
 800bb54:	f04f 0800 	mov.w	r8, #0
 800bb58:	e7e7      	b.n	800bb2a <_strtod_l+0xa5a>
 800bb5a:	4b5d      	ldr	r3, [pc, #372]	; (800bcd0 <_strtod_l+0xc00>)
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	2200      	movs	r2, #0
 800bb62:	f7f4 fd69 	bl	8000638 <__aeabi_dmul>
 800bb66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb68:	4680      	mov	r8, r0
 800bb6a:	4689      	mov	r9, r1
 800bb6c:	b933      	cbnz	r3, 800bb7c <_strtod_l+0xaac>
 800bb6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb72:	900e      	str	r0, [sp, #56]	; 0x38
 800bb74:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb7a:	e7dd      	b.n	800bb38 <_strtod_l+0xa68>
 800bb7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bb80:	e7f9      	b.n	800bb76 <_strtod_l+0xaa6>
 800bb82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1a8      	bne.n	800bade <_strtod_l+0xa0e>
 800bb8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb92:	0d1b      	lsrs	r3, r3, #20
 800bb94:	051b      	lsls	r3, r3, #20
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d1a1      	bne.n	800bade <_strtod_l+0xa0e>
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	f7f5 fa09 	bl	8000fb4 <__aeabi_d2lz>
 800bba2:	f7f4 fd1b 	bl	80005dc <__aeabi_l2d>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4640      	mov	r0, r8
 800bbac:	4649      	mov	r1, r9
 800bbae:	f7f4 fb8b 	bl	80002c8 <__aeabi_dsub>
 800bbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbb8:	ea43 030a 	orr.w	r3, r3, sl
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	4689      	mov	r9, r1
 800bbc2:	d055      	beq.n	800bc70 <_strtod_l+0xba0>
 800bbc4:	a336      	add	r3, pc, #216	; (adr r3, 800bca0 <_strtod_l+0xbd0>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	f7f4 ffa7 	bl	8000b1c <__aeabi_dcmplt>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	f47f acd0 	bne.w	800b574 <_strtod_l+0x4a4>
 800bbd4:	a334      	add	r3, pc, #208	; (adr r3, 800bca8 <_strtod_l+0xbd8>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	4640      	mov	r0, r8
 800bbdc:	4649      	mov	r1, r9
 800bbde:	f7f4 ffbb 	bl	8000b58 <__aeabi_dcmpgt>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f43f af7b 	beq.w	800bade <_strtod_l+0xa0e>
 800bbe8:	e4c4      	b.n	800b574 <_strtod_l+0x4a4>
 800bbea:	9b04      	ldr	r3, [sp, #16]
 800bbec:	b333      	cbz	r3, 800bc3c <_strtod_l+0xb6c>
 800bbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbf4:	d822      	bhi.n	800bc3c <_strtod_l+0xb6c>
 800bbf6:	a32e      	add	r3, pc, #184	; (adr r3, 800bcb0 <_strtod_l+0xbe0>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	4649      	mov	r1, r9
 800bc00:	f7f4 ff96 	bl	8000b30 <__aeabi_dcmple>
 800bc04:	b1a0      	cbz	r0, 800bc30 <_strtod_l+0xb60>
 800bc06:	4649      	mov	r1, r9
 800bc08:	4640      	mov	r0, r8
 800bc0a:	f7f4 ffed 	bl	8000be8 <__aeabi_d2uiz>
 800bc0e:	2801      	cmp	r0, #1
 800bc10:	bf38      	it	cc
 800bc12:	2001      	movcc	r0, #1
 800bc14:	f7f4 fc96 	bl	8000544 <__aeabi_ui2d>
 800bc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc1a:	4680      	mov	r8, r0
 800bc1c:	4689      	mov	r9, r1
 800bc1e:	bb23      	cbnz	r3, 800bc6a <_strtod_l+0xb9a>
 800bc20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc24:	9010      	str	r0, [sp, #64]	; 0x40
 800bc26:	9311      	str	r3, [sp, #68]	; 0x44
 800bc28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc38:	1a9b      	subs	r3, r3, r2
 800bc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc40:	eeb0 0a48 	vmov.f32	s0, s16
 800bc44:	eef0 0a68 	vmov.f32	s1, s17
 800bc48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc4c:	f001 fe8e 	bl	800d96c <__ulp>
 800bc50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc54:	ec53 2b10 	vmov	r2, r3, d0
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	ec53 2b18 	vmov	r2, r3, d8
 800bc60:	f7f4 fb34 	bl	80002cc <__adddf3>
 800bc64:	4682      	mov	sl, r0
 800bc66:	468b      	mov	fp, r1
 800bc68:	e78d      	b.n	800bb86 <_strtod_l+0xab6>
 800bc6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bc6e:	e7db      	b.n	800bc28 <_strtod_l+0xb58>
 800bc70:	a311      	add	r3, pc, #68	; (adr r3, 800bcb8 <_strtod_l+0xbe8>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 ff51 	bl	8000b1c <__aeabi_dcmplt>
 800bc7a:	e7b2      	b.n	800bbe2 <_strtod_l+0xb12>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	f7ff ba6b 	b.w	800b160 <_strtod_l+0x90>
 800bc8a:	2a65      	cmp	r2, #101	; 0x65
 800bc8c:	f43f ab5f 	beq.w	800b34e <_strtod_l+0x27e>
 800bc90:	2a45      	cmp	r2, #69	; 0x45
 800bc92:	f43f ab5c 	beq.w	800b34e <_strtod_l+0x27e>
 800bc96:	2301      	movs	r3, #1
 800bc98:	f7ff bb94 	b.w	800b3c4 <_strtod_l+0x2f4>
 800bc9c:	f3af 8000 	nop.w
 800bca0:	94a03595 	.word	0x94a03595
 800bca4:	3fdfffff 	.word	0x3fdfffff
 800bca8:	35afe535 	.word	0x35afe535
 800bcac:	3fe00000 	.word	0x3fe00000
 800bcb0:	ffc00000 	.word	0xffc00000
 800bcb4:	41dfffff 	.word	0x41dfffff
 800bcb8:	94a03595 	.word	0x94a03595
 800bcbc:	3fcfffff 	.word	0x3fcfffff
 800bcc0:	3ff00000 	.word	0x3ff00000
 800bcc4:	7ff00000 	.word	0x7ff00000
 800bcc8:	7fe00000 	.word	0x7fe00000
 800bccc:	7c9fffff 	.word	0x7c9fffff
 800bcd0:	3fe00000 	.word	0x3fe00000
 800bcd4:	bff00000 	.word	0xbff00000
 800bcd8:	7fefffff 	.word	0x7fefffff

0800bcdc <_strtod_r>:
 800bcdc:	4b01      	ldr	r3, [pc, #4]	; (800bce4 <_strtod_r+0x8>)
 800bcde:	f7ff b9f7 	b.w	800b0d0 <_strtod_l>
 800bce2:	bf00      	nop
 800bce4:	2000007c 	.word	0x2000007c

0800bce8 <_strtol_l.constprop.0>:
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcee:	d001      	beq.n	800bcf4 <_strtol_l.constprop.0+0xc>
 800bcf0:	2b24      	cmp	r3, #36	; 0x24
 800bcf2:	d906      	bls.n	800bd02 <_strtol_l.constprop.0+0x1a>
 800bcf4:	f7fe fa6e 	bl	800a1d4 <__errno>
 800bcf8:	2316      	movs	r3, #22
 800bcfa:	6003      	str	r3, [r0, #0]
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bde8 <_strtol_l.constprop.0+0x100>
 800bd06:	460d      	mov	r5, r1
 800bd08:	462e      	mov	r6, r5
 800bd0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bd12:	f017 0708 	ands.w	r7, r7, #8
 800bd16:	d1f7      	bne.n	800bd08 <_strtol_l.constprop.0+0x20>
 800bd18:	2c2d      	cmp	r4, #45	; 0x2d
 800bd1a:	d132      	bne.n	800bd82 <_strtol_l.constprop.0+0x9a>
 800bd1c:	782c      	ldrb	r4, [r5, #0]
 800bd1e:	2701      	movs	r7, #1
 800bd20:	1cb5      	adds	r5, r6, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d05b      	beq.n	800bdde <_strtol_l.constprop.0+0xf6>
 800bd26:	2b10      	cmp	r3, #16
 800bd28:	d109      	bne.n	800bd3e <_strtol_l.constprop.0+0x56>
 800bd2a:	2c30      	cmp	r4, #48	; 0x30
 800bd2c:	d107      	bne.n	800bd3e <_strtol_l.constprop.0+0x56>
 800bd2e:	782c      	ldrb	r4, [r5, #0]
 800bd30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd34:	2c58      	cmp	r4, #88	; 0x58
 800bd36:	d14d      	bne.n	800bdd4 <_strtol_l.constprop.0+0xec>
 800bd38:	786c      	ldrb	r4, [r5, #1]
 800bd3a:	2310      	movs	r3, #16
 800bd3c:	3502      	adds	r5, #2
 800bd3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bd42:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd46:	f04f 0c00 	mov.w	ip, #0
 800bd4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bd4e:	4666      	mov	r6, ip
 800bd50:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bd58:	f1be 0f09 	cmp.w	lr, #9
 800bd5c:	d816      	bhi.n	800bd8c <_strtol_l.constprop.0+0xa4>
 800bd5e:	4674      	mov	r4, lr
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	dd24      	ble.n	800bdae <_strtol_l.constprop.0+0xc6>
 800bd64:	f1bc 0f00 	cmp.w	ip, #0
 800bd68:	db1e      	blt.n	800bda8 <_strtol_l.constprop.0+0xc0>
 800bd6a:	45b1      	cmp	r9, r6
 800bd6c:	d31c      	bcc.n	800bda8 <_strtol_l.constprop.0+0xc0>
 800bd6e:	d101      	bne.n	800bd74 <_strtol_l.constprop.0+0x8c>
 800bd70:	45a2      	cmp	sl, r4
 800bd72:	db19      	blt.n	800bda8 <_strtol_l.constprop.0+0xc0>
 800bd74:	fb06 4603 	mla	r6, r6, r3, r4
 800bd78:	f04f 0c01 	mov.w	ip, #1
 800bd7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd80:	e7e8      	b.n	800bd54 <_strtol_l.constprop.0+0x6c>
 800bd82:	2c2b      	cmp	r4, #43	; 0x2b
 800bd84:	bf04      	itt	eq
 800bd86:	782c      	ldrbeq	r4, [r5, #0]
 800bd88:	1cb5      	addeq	r5, r6, #2
 800bd8a:	e7ca      	b.n	800bd22 <_strtol_l.constprop.0+0x3a>
 800bd8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bd90:	f1be 0f19 	cmp.w	lr, #25
 800bd94:	d801      	bhi.n	800bd9a <_strtol_l.constprop.0+0xb2>
 800bd96:	3c37      	subs	r4, #55	; 0x37
 800bd98:	e7e2      	b.n	800bd60 <_strtol_l.constprop.0+0x78>
 800bd9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bd9e:	f1be 0f19 	cmp.w	lr, #25
 800bda2:	d804      	bhi.n	800bdae <_strtol_l.constprop.0+0xc6>
 800bda4:	3c57      	subs	r4, #87	; 0x57
 800bda6:	e7db      	b.n	800bd60 <_strtol_l.constprop.0+0x78>
 800bda8:	f04f 3cff 	mov.w	ip, #4294967295
 800bdac:	e7e6      	b.n	800bd7c <_strtol_l.constprop.0+0x94>
 800bdae:	f1bc 0f00 	cmp.w	ip, #0
 800bdb2:	da05      	bge.n	800bdc0 <_strtol_l.constprop.0+0xd8>
 800bdb4:	2322      	movs	r3, #34	; 0x22
 800bdb6:	6003      	str	r3, [r0, #0]
 800bdb8:	4646      	mov	r6, r8
 800bdba:	b942      	cbnz	r2, 800bdce <_strtol_l.constprop.0+0xe6>
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	e79e      	b.n	800bcfe <_strtol_l.constprop.0+0x16>
 800bdc0:	b107      	cbz	r7, 800bdc4 <_strtol_l.constprop.0+0xdc>
 800bdc2:	4276      	negs	r6, r6
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	d0f9      	beq.n	800bdbc <_strtol_l.constprop.0+0xd4>
 800bdc8:	f1bc 0f00 	cmp.w	ip, #0
 800bdcc:	d000      	beq.n	800bdd0 <_strtol_l.constprop.0+0xe8>
 800bdce:	1e69      	subs	r1, r5, #1
 800bdd0:	6011      	str	r1, [r2, #0]
 800bdd2:	e7f3      	b.n	800bdbc <_strtol_l.constprop.0+0xd4>
 800bdd4:	2430      	movs	r4, #48	; 0x30
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1b1      	bne.n	800bd3e <_strtol_l.constprop.0+0x56>
 800bdda:	2308      	movs	r3, #8
 800bddc:	e7af      	b.n	800bd3e <_strtol_l.constprop.0+0x56>
 800bdde:	2c30      	cmp	r4, #48	; 0x30
 800bde0:	d0a5      	beq.n	800bd2e <_strtol_l.constprop.0+0x46>
 800bde2:	230a      	movs	r3, #10
 800bde4:	e7ab      	b.n	800bd3e <_strtol_l.constprop.0+0x56>
 800bde6:	bf00      	nop
 800bde8:	080112a1 	.word	0x080112a1

0800bdec <_strtol_r>:
 800bdec:	f7ff bf7c 	b.w	800bce8 <_strtol_l.constprop.0>

0800bdf0 <_write_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4d07      	ldr	r5, [pc, #28]	; (800be10 <_write_r+0x20>)
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	602a      	str	r2, [r5, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	f7f9 f8a7 	bl	8004f52 <_write>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_write_r+0x1e>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_write_r+0x1e>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	20001174 	.word	0x20001174

0800be14 <_close_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d06      	ldr	r5, [pc, #24]	; (800be30 <_close_r+0x1c>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	f7f9 f8b3 	bl	8004f8a <_close>
 800be24:	1c43      	adds	r3, r0, #1
 800be26:	d102      	bne.n	800be2e <_close_r+0x1a>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	b103      	cbz	r3, 800be2e <_close_r+0x1a>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	20001174 	.word	0x20001174

0800be34 <quorem>:
 800be34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	6903      	ldr	r3, [r0, #16]
 800be3a:	690c      	ldr	r4, [r1, #16]
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	4607      	mov	r7, r0
 800be40:	f2c0 8081 	blt.w	800bf46 <quorem+0x112>
 800be44:	3c01      	subs	r4, #1
 800be46:	f101 0814 	add.w	r8, r1, #20
 800be4a:	f100 0514 	add.w	r5, r0, #20
 800be4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be5c:	3301      	adds	r3, #1
 800be5e:	429a      	cmp	r2, r3
 800be60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be68:	fbb2 f6f3 	udiv	r6, r2, r3
 800be6c:	d331      	bcc.n	800bed2 <quorem+0x9e>
 800be6e:	f04f 0e00 	mov.w	lr, #0
 800be72:	4640      	mov	r0, r8
 800be74:	46ac      	mov	ip, r5
 800be76:	46f2      	mov	sl, lr
 800be78:	f850 2b04 	ldr.w	r2, [r0], #4
 800be7c:	b293      	uxth	r3, r2
 800be7e:	fb06 e303 	mla	r3, r6, r3, lr
 800be82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be86:	b29b      	uxth	r3, r3
 800be88:	ebaa 0303 	sub.w	r3, sl, r3
 800be8c:	f8dc a000 	ldr.w	sl, [ip]
 800be90:	0c12      	lsrs	r2, r2, #16
 800be92:	fa13 f38a 	uxtah	r3, r3, sl
 800be96:	fb06 e202 	mla	r2, r6, r2, lr
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	9b00      	ldr	r3, [sp, #0]
 800be9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bea2:	b292      	uxth	r2, r2
 800bea4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800beac:	f8bd 3000 	ldrh.w	r3, [sp]
 800beb0:	4581      	cmp	r9, r0
 800beb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beb6:	f84c 3b04 	str.w	r3, [ip], #4
 800beba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bebe:	d2db      	bcs.n	800be78 <quorem+0x44>
 800bec0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bec4:	b92b      	cbnz	r3, 800bed2 <quorem+0x9e>
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	3b04      	subs	r3, #4
 800beca:	429d      	cmp	r5, r3
 800becc:	461a      	mov	r2, r3
 800bece:	d32e      	bcc.n	800bf2e <quorem+0xfa>
 800bed0:	613c      	str	r4, [r7, #16]
 800bed2:	4638      	mov	r0, r7
 800bed4:	f001 fca4 	bl	800d820 <__mcmp>
 800bed8:	2800      	cmp	r0, #0
 800beda:	db24      	blt.n	800bf26 <quorem+0xf2>
 800bedc:	3601      	adds	r6, #1
 800bede:	4628      	mov	r0, r5
 800bee0:	f04f 0c00 	mov.w	ip, #0
 800bee4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bee8:	f8d0 e000 	ldr.w	lr, [r0]
 800beec:	b293      	uxth	r3, r2
 800beee:	ebac 0303 	sub.w	r3, ip, r3
 800bef2:	0c12      	lsrs	r2, r2, #16
 800bef4:	fa13 f38e 	uxtah	r3, r3, lr
 800bef8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800befc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf06:	45c1      	cmp	r9, r8
 800bf08:	f840 3b04 	str.w	r3, [r0], #4
 800bf0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf10:	d2e8      	bcs.n	800bee4 <quorem+0xb0>
 800bf12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf1a:	b922      	cbnz	r2, 800bf26 <quorem+0xf2>
 800bf1c:	3b04      	subs	r3, #4
 800bf1e:	429d      	cmp	r5, r3
 800bf20:	461a      	mov	r2, r3
 800bf22:	d30a      	bcc.n	800bf3a <quorem+0x106>
 800bf24:	613c      	str	r4, [r7, #16]
 800bf26:	4630      	mov	r0, r6
 800bf28:	b003      	add	sp, #12
 800bf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2e:	6812      	ldr	r2, [r2, #0]
 800bf30:	3b04      	subs	r3, #4
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	d1cc      	bne.n	800bed0 <quorem+0x9c>
 800bf36:	3c01      	subs	r4, #1
 800bf38:	e7c7      	b.n	800beca <quorem+0x96>
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d1f0      	bne.n	800bf24 <quorem+0xf0>
 800bf42:	3c01      	subs	r4, #1
 800bf44:	e7eb      	b.n	800bf1e <quorem+0xea>
 800bf46:	2000      	movs	r0, #0
 800bf48:	e7ee      	b.n	800bf28 <quorem+0xf4>
 800bf4a:	0000      	movs	r0, r0
 800bf4c:	0000      	movs	r0, r0
	...

0800bf50 <_dtoa_r>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	ed2d 8b04 	vpush	{d8-d9}
 800bf58:	ec57 6b10 	vmov	r6, r7, d0
 800bf5c:	b093      	sub	sp, #76	; 0x4c
 800bf5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf64:	9106      	str	r1, [sp, #24]
 800bf66:	ee10 aa10 	vmov	sl, s0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf6e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf70:	46bb      	mov	fp, r7
 800bf72:	b975      	cbnz	r5, 800bf92 <_dtoa_r+0x42>
 800bf74:	2010      	movs	r0, #16
 800bf76:	f001 f95f 	bl	800d238 <malloc>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	6260      	str	r0, [r4, #36]	; 0x24
 800bf7e:	b920      	cbnz	r0, 800bf8a <_dtoa_r+0x3a>
 800bf80:	4ba7      	ldr	r3, [pc, #668]	; (800c220 <_dtoa_r+0x2d0>)
 800bf82:	21ea      	movs	r1, #234	; 0xea
 800bf84:	48a7      	ldr	r0, [pc, #668]	; (800c224 <_dtoa_r+0x2d4>)
 800bf86:	f002 fceb 	bl	800e960 <__assert_func>
 800bf8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf8e:	6005      	str	r5, [r0, #0]
 800bf90:	60c5      	str	r5, [r0, #12]
 800bf92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf94:	6819      	ldr	r1, [r3, #0]
 800bf96:	b151      	cbz	r1, 800bfae <_dtoa_r+0x5e>
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	604a      	str	r2, [r1, #4]
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	4093      	lsls	r3, r2
 800bfa0:	608b      	str	r3, [r1, #8]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 f9b0 	bl	800d308 <_Bfree>
 800bfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	1e3b      	subs	r3, r7, #0
 800bfb0:	bfaa      	itet	ge
 800bfb2:	2300      	movge	r3, #0
 800bfb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bfb8:	f8c8 3000 	strge.w	r3, [r8]
 800bfbc:	4b9a      	ldr	r3, [pc, #616]	; (800c228 <_dtoa_r+0x2d8>)
 800bfbe:	bfbc      	itt	lt
 800bfc0:	2201      	movlt	r2, #1
 800bfc2:	f8c8 2000 	strlt.w	r2, [r8]
 800bfc6:	ea33 030b 	bics.w	r3, r3, fp
 800bfca:	d11b      	bne.n	800c004 <_dtoa_r+0xb4>
 800bfcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfce:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfd2:	6013      	str	r3, [r2, #0]
 800bfd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfd8:	4333      	orrs	r3, r6
 800bfda:	f000 8592 	beq.w	800cb02 <_dtoa_r+0xbb2>
 800bfde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe0:	b963      	cbnz	r3, 800bffc <_dtoa_r+0xac>
 800bfe2:	4b92      	ldr	r3, [pc, #584]	; (800c22c <_dtoa_r+0x2dc>)
 800bfe4:	e022      	b.n	800c02c <_dtoa_r+0xdc>
 800bfe6:	4b92      	ldr	r3, [pc, #584]	; (800c230 <_dtoa_r+0x2e0>)
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	3308      	adds	r3, #8
 800bfec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	9801      	ldr	r0, [sp, #4]
 800bff2:	b013      	add	sp, #76	; 0x4c
 800bff4:	ecbd 8b04 	vpop	{d8-d9}
 800bff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffc:	4b8b      	ldr	r3, [pc, #556]	; (800c22c <_dtoa_r+0x2dc>)
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	3303      	adds	r3, #3
 800c002:	e7f3      	b.n	800bfec <_dtoa_r+0x9c>
 800c004:	2200      	movs	r2, #0
 800c006:	2300      	movs	r3, #0
 800c008:	4650      	mov	r0, sl
 800c00a:	4659      	mov	r1, fp
 800c00c:	f7f4 fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 800c010:	ec4b ab19 	vmov	d9, sl, fp
 800c014:	4680      	mov	r8, r0
 800c016:	b158      	cbz	r0, 800c030 <_dtoa_r+0xe0>
 800c018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c01a:	2301      	movs	r3, #1
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 856b 	beq.w	800cafc <_dtoa_r+0xbac>
 800c026:	4883      	ldr	r0, [pc, #524]	; (800c234 <_dtoa_r+0x2e4>)
 800c028:	6018      	str	r0, [r3, #0]
 800c02a:	1e43      	subs	r3, r0, #1
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	e7df      	b.n	800bff0 <_dtoa_r+0xa0>
 800c030:	ec4b ab10 	vmov	d0, sl, fp
 800c034:	aa10      	add	r2, sp, #64	; 0x40
 800c036:	a911      	add	r1, sp, #68	; 0x44
 800c038:	4620      	mov	r0, r4
 800c03a:	f001 fd13 	bl	800da64 <__d2b>
 800c03e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c042:	ee08 0a10 	vmov	s16, r0
 800c046:	2d00      	cmp	r5, #0
 800c048:	f000 8084 	beq.w	800c154 <_dtoa_r+0x204>
 800c04c:	ee19 3a90 	vmov	r3, s19
 800c050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c054:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c058:	4656      	mov	r6, sl
 800c05a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c05e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c062:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c066:	4b74      	ldr	r3, [pc, #464]	; (800c238 <_dtoa_r+0x2e8>)
 800c068:	2200      	movs	r2, #0
 800c06a:	4630      	mov	r0, r6
 800c06c:	4639      	mov	r1, r7
 800c06e:	f7f4 f92b 	bl	80002c8 <__aeabi_dsub>
 800c072:	a365      	add	r3, pc, #404	; (adr r3, 800c208 <_dtoa_r+0x2b8>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	f7f4 fade 	bl	8000638 <__aeabi_dmul>
 800c07c:	a364      	add	r3, pc, #400	; (adr r3, 800c210 <_dtoa_r+0x2c0>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 f923 	bl	80002cc <__adddf3>
 800c086:	4606      	mov	r6, r0
 800c088:	4628      	mov	r0, r5
 800c08a:	460f      	mov	r7, r1
 800c08c:	f7f4 fa6a 	bl	8000564 <__aeabi_i2d>
 800c090:	a361      	add	r3, pc, #388	; (adr r3, 800c218 <_dtoa_r+0x2c8>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 facf 	bl	8000638 <__aeabi_dmul>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4630      	mov	r0, r6
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	f7f4 f913 	bl	80002cc <__adddf3>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	460f      	mov	r7, r1
 800c0aa:	f7f4 fd75 	bl	8000b98 <__aeabi_d2iz>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	9000      	str	r0, [sp, #0]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	f7f4 fd30 	bl	8000b1c <__aeabi_dcmplt>
 800c0bc:	b150      	cbz	r0, 800c0d4 <_dtoa_r+0x184>
 800c0be:	9800      	ldr	r0, [sp, #0]
 800c0c0:	f7f4 fa50 	bl	8000564 <__aeabi_i2d>
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	f7f4 fd1e 	bl	8000b08 <__aeabi_dcmpeq>
 800c0cc:	b910      	cbnz	r0, 800c0d4 <_dtoa_r+0x184>
 800c0ce:	9b00      	ldr	r3, [sp, #0]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	9b00      	ldr	r3, [sp, #0]
 800c0d6:	2b16      	cmp	r3, #22
 800c0d8:	d85a      	bhi.n	800c190 <_dtoa_r+0x240>
 800c0da:	9a00      	ldr	r2, [sp, #0]
 800c0dc:	4b57      	ldr	r3, [pc, #348]	; (800c23c <_dtoa_r+0x2ec>)
 800c0de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	ec51 0b19 	vmov	r0, r1, d9
 800c0ea:	f7f4 fd17 	bl	8000b1c <__aeabi_dcmplt>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d050      	beq.n	800c194 <_dtoa_r+0x244>
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0fe:	1b5d      	subs	r5, r3, r5
 800c100:	1e6b      	subs	r3, r5, #1
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	bf45      	ittet	mi
 800c106:	f1c5 0301 	rsbmi	r3, r5, #1
 800c10a:	9304      	strmi	r3, [sp, #16]
 800c10c:	2300      	movpl	r3, #0
 800c10e:	2300      	movmi	r3, #0
 800c110:	bf4c      	ite	mi
 800c112:	9305      	strmi	r3, [sp, #20]
 800c114:	9304      	strpl	r3, [sp, #16]
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	db3d      	blt.n	800c198 <_dtoa_r+0x248>
 800c11c:	9b05      	ldr	r3, [sp, #20]
 800c11e:	9a00      	ldr	r2, [sp, #0]
 800c120:	920a      	str	r2, [sp, #40]	; 0x28
 800c122:	4413      	add	r3, r2
 800c124:	9305      	str	r3, [sp, #20]
 800c126:	2300      	movs	r3, #0
 800c128:	9307      	str	r3, [sp, #28]
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	f200 8089 	bhi.w	800c244 <_dtoa_r+0x2f4>
 800c132:	2b05      	cmp	r3, #5
 800c134:	bfc4      	itt	gt
 800c136:	3b04      	subgt	r3, #4
 800c138:	9306      	strgt	r3, [sp, #24]
 800c13a:	9b06      	ldr	r3, [sp, #24]
 800c13c:	f1a3 0302 	sub.w	r3, r3, #2
 800c140:	bfcc      	ite	gt
 800c142:	2500      	movgt	r5, #0
 800c144:	2501      	movle	r5, #1
 800c146:	2b03      	cmp	r3, #3
 800c148:	f200 8087 	bhi.w	800c25a <_dtoa_r+0x30a>
 800c14c:	e8df f003 	tbb	[pc, r3]
 800c150:	59383a2d 	.word	0x59383a2d
 800c154:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c158:	441d      	add	r5, r3
 800c15a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c15e:	2b20      	cmp	r3, #32
 800c160:	bfc1      	itttt	gt
 800c162:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c166:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c16a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c16e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c172:	bfda      	itte	le
 800c174:	f1c3 0320 	rsble	r3, r3, #32
 800c178:	fa06 f003 	lslle.w	r0, r6, r3
 800c17c:	4318      	orrgt	r0, r3
 800c17e:	f7f4 f9e1 	bl	8000544 <__aeabi_ui2d>
 800c182:	2301      	movs	r3, #1
 800c184:	4606      	mov	r6, r0
 800c186:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c18a:	3d01      	subs	r5, #1
 800c18c:	930e      	str	r3, [sp, #56]	; 0x38
 800c18e:	e76a      	b.n	800c066 <_dtoa_r+0x116>
 800c190:	2301      	movs	r3, #1
 800c192:	e7b2      	b.n	800c0fa <_dtoa_r+0x1aa>
 800c194:	900b      	str	r0, [sp, #44]	; 0x2c
 800c196:	e7b1      	b.n	800c0fc <_dtoa_r+0x1ac>
 800c198:	9b04      	ldr	r3, [sp, #16]
 800c19a:	9a00      	ldr	r2, [sp, #0]
 800c19c:	1a9b      	subs	r3, r3, r2
 800c19e:	9304      	str	r3, [sp, #16]
 800c1a0:	4253      	negs	r3, r2
 800c1a2:	9307      	str	r3, [sp, #28]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a8:	e7bf      	b.n	800c12a <_dtoa_r+0x1da>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	9308      	str	r3, [sp, #32]
 800c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	dc55      	bgt.n	800c260 <_dtoa_r+0x310>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1be:	e00c      	b.n	800c1da <_dtoa_r+0x28a>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e7f3      	b.n	800c1ac <_dtoa_r+0x25c>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c8:	9308      	str	r3, [sp, #32]
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	bfb8      	it	lt
 800c1d8:	2301      	movlt	r3, #1
 800c1da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c1dc:	2200      	movs	r2, #0
 800c1de:	6042      	str	r2, [r0, #4]
 800c1e0:	2204      	movs	r2, #4
 800c1e2:	f102 0614 	add.w	r6, r2, #20
 800c1e6:	429e      	cmp	r6, r3
 800c1e8:	6841      	ldr	r1, [r0, #4]
 800c1ea:	d93d      	bls.n	800c268 <_dtoa_r+0x318>
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f001 f84b 	bl	800d288 <_Balloc>
 800c1f2:	9001      	str	r0, [sp, #4]
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d13b      	bne.n	800c270 <_dtoa_r+0x320>
 800c1f8:	4b11      	ldr	r3, [pc, #68]	; (800c240 <_dtoa_r+0x2f0>)
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c200:	e6c0      	b.n	800bf84 <_dtoa_r+0x34>
 800c202:	2301      	movs	r3, #1
 800c204:	e7df      	b.n	800c1c6 <_dtoa_r+0x276>
 800c206:	bf00      	nop
 800c208:	636f4361 	.word	0x636f4361
 800c20c:	3fd287a7 	.word	0x3fd287a7
 800c210:	8b60c8b3 	.word	0x8b60c8b3
 800c214:	3fc68a28 	.word	0x3fc68a28
 800c218:	509f79fb 	.word	0x509f79fb
 800c21c:	3fd34413 	.word	0x3fd34413
 800c220:	080113ae 	.word	0x080113ae
 800c224:	080113c5 	.word	0x080113c5
 800c228:	7ff00000 	.word	0x7ff00000
 800c22c:	080113aa 	.word	0x080113aa
 800c230:	080113a1 	.word	0x080113a1
 800c234:	0801161a 	.word	0x0801161a
 800c238:	3ff80000 	.word	0x3ff80000
 800c23c:	08011530 	.word	0x08011530
 800c240:	08011420 	.word	0x08011420
 800c244:	2501      	movs	r5, #1
 800c246:	2300      	movs	r3, #0
 800c248:	9306      	str	r3, [sp, #24]
 800c24a:	9508      	str	r5, [sp, #32]
 800c24c:	f04f 33ff 	mov.w	r3, #4294967295
 800c250:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c254:	2200      	movs	r2, #0
 800c256:	2312      	movs	r3, #18
 800c258:	e7b0      	b.n	800c1bc <_dtoa_r+0x26c>
 800c25a:	2301      	movs	r3, #1
 800c25c:	9308      	str	r3, [sp, #32]
 800c25e:	e7f5      	b.n	800c24c <_dtoa_r+0x2fc>
 800c260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c262:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c266:	e7b8      	b.n	800c1da <_dtoa_r+0x28a>
 800c268:	3101      	adds	r1, #1
 800c26a:	6041      	str	r1, [r0, #4]
 800c26c:	0052      	lsls	r2, r2, #1
 800c26e:	e7b8      	b.n	800c1e2 <_dtoa_r+0x292>
 800c270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c272:	9a01      	ldr	r2, [sp, #4]
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	2b0e      	cmp	r3, #14
 800c27a:	f200 809d 	bhi.w	800c3b8 <_dtoa_r+0x468>
 800c27e:	2d00      	cmp	r5, #0
 800c280:	f000 809a 	beq.w	800c3b8 <_dtoa_r+0x468>
 800c284:	9b00      	ldr	r3, [sp, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	dd32      	ble.n	800c2f0 <_dtoa_r+0x3a0>
 800c28a:	4ab7      	ldr	r2, [pc, #732]	; (800c568 <_dtoa_r+0x618>)
 800c28c:	f003 030f 	and.w	r3, r3, #15
 800c290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c294:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c298:	9b00      	ldr	r3, [sp, #0]
 800c29a:	05d8      	lsls	r0, r3, #23
 800c29c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c2a0:	d516      	bpl.n	800c2d0 <_dtoa_r+0x380>
 800c2a2:	4bb2      	ldr	r3, [pc, #712]	; (800c56c <_dtoa_r+0x61c>)
 800c2a4:	ec51 0b19 	vmov	r0, r1, d9
 800c2a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2ac:	f7f4 faee 	bl	800088c <__aeabi_ddiv>
 800c2b0:	f007 070f 	and.w	r7, r7, #15
 800c2b4:	4682      	mov	sl, r0
 800c2b6:	468b      	mov	fp, r1
 800c2b8:	2503      	movs	r5, #3
 800c2ba:	4eac      	ldr	r6, [pc, #688]	; (800c56c <_dtoa_r+0x61c>)
 800c2bc:	b957      	cbnz	r7, 800c2d4 <_dtoa_r+0x384>
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	f7f4 fae1 	bl	800088c <__aeabi_ddiv>
 800c2ca:	4682      	mov	sl, r0
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	e028      	b.n	800c322 <_dtoa_r+0x3d2>
 800c2d0:	2502      	movs	r5, #2
 800c2d2:	e7f2      	b.n	800c2ba <_dtoa_r+0x36a>
 800c2d4:	07f9      	lsls	r1, r7, #31
 800c2d6:	d508      	bpl.n	800c2ea <_dtoa_r+0x39a>
 800c2d8:	4640      	mov	r0, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2e0:	f7f4 f9aa 	bl	8000638 <__aeabi_dmul>
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	4680      	mov	r8, r0
 800c2e8:	4689      	mov	r9, r1
 800c2ea:	107f      	asrs	r7, r7, #1
 800c2ec:	3608      	adds	r6, #8
 800c2ee:	e7e5      	b.n	800c2bc <_dtoa_r+0x36c>
 800c2f0:	f000 809b 	beq.w	800c42a <_dtoa_r+0x4da>
 800c2f4:	9b00      	ldr	r3, [sp, #0]
 800c2f6:	4f9d      	ldr	r7, [pc, #628]	; (800c56c <_dtoa_r+0x61c>)
 800c2f8:	425e      	negs	r6, r3
 800c2fa:	4b9b      	ldr	r3, [pc, #620]	; (800c568 <_dtoa_r+0x618>)
 800c2fc:	f006 020f 	and.w	r2, r6, #15
 800c300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	ec51 0b19 	vmov	r0, r1, d9
 800c30c:	f7f4 f994 	bl	8000638 <__aeabi_dmul>
 800c310:	1136      	asrs	r6, r6, #4
 800c312:	4682      	mov	sl, r0
 800c314:	468b      	mov	fp, r1
 800c316:	2300      	movs	r3, #0
 800c318:	2502      	movs	r5, #2
 800c31a:	2e00      	cmp	r6, #0
 800c31c:	d17a      	bne.n	800c414 <_dtoa_r+0x4c4>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1d3      	bne.n	800c2ca <_dtoa_r+0x37a>
 800c322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 8082 	beq.w	800c42e <_dtoa_r+0x4de>
 800c32a:	4b91      	ldr	r3, [pc, #580]	; (800c570 <_dtoa_r+0x620>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	4650      	mov	r0, sl
 800c330:	4659      	mov	r1, fp
 800c332:	f7f4 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800c336:	2800      	cmp	r0, #0
 800c338:	d079      	beq.n	800c42e <_dtoa_r+0x4de>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d076      	beq.n	800c42e <_dtoa_r+0x4de>
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dd36      	ble.n	800c3b4 <_dtoa_r+0x464>
 800c346:	9b00      	ldr	r3, [sp, #0]
 800c348:	4650      	mov	r0, sl
 800c34a:	4659      	mov	r1, fp
 800c34c:	1e5f      	subs	r7, r3, #1
 800c34e:	2200      	movs	r2, #0
 800c350:	4b88      	ldr	r3, [pc, #544]	; (800c574 <_dtoa_r+0x624>)
 800c352:	f7f4 f971 	bl	8000638 <__aeabi_dmul>
 800c356:	9e02      	ldr	r6, [sp, #8]
 800c358:	4682      	mov	sl, r0
 800c35a:	468b      	mov	fp, r1
 800c35c:	3501      	adds	r5, #1
 800c35e:	4628      	mov	r0, r5
 800c360:	f7f4 f900 	bl	8000564 <__aeabi_i2d>
 800c364:	4652      	mov	r2, sl
 800c366:	465b      	mov	r3, fp
 800c368:	f7f4 f966 	bl	8000638 <__aeabi_dmul>
 800c36c:	4b82      	ldr	r3, [pc, #520]	; (800c578 <_dtoa_r+0x628>)
 800c36e:	2200      	movs	r2, #0
 800c370:	f7f3 ffac 	bl	80002cc <__adddf3>
 800c374:	46d0      	mov	r8, sl
 800c376:	46d9      	mov	r9, fp
 800c378:	4682      	mov	sl, r0
 800c37a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c37e:	2e00      	cmp	r6, #0
 800c380:	d158      	bne.n	800c434 <_dtoa_r+0x4e4>
 800c382:	4b7e      	ldr	r3, [pc, #504]	; (800c57c <_dtoa_r+0x62c>)
 800c384:	2200      	movs	r2, #0
 800c386:	4640      	mov	r0, r8
 800c388:	4649      	mov	r1, r9
 800c38a:	f7f3 ff9d 	bl	80002c8 <__aeabi_dsub>
 800c38e:	4652      	mov	r2, sl
 800c390:	465b      	mov	r3, fp
 800c392:	4680      	mov	r8, r0
 800c394:	4689      	mov	r9, r1
 800c396:	f7f4 fbdf 	bl	8000b58 <__aeabi_dcmpgt>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f040 8295 	bne.w	800c8ca <_dtoa_r+0x97a>
 800c3a0:	4652      	mov	r2, sl
 800c3a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	f7f4 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f040 8289 	bne.w	800c8c6 <_dtoa_r+0x976>
 800c3b4:	ec5b ab19 	vmov	sl, fp, d9
 800c3b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f2c0 8148 	blt.w	800c650 <_dtoa_r+0x700>
 800c3c0:	9a00      	ldr	r2, [sp, #0]
 800c3c2:	2a0e      	cmp	r2, #14
 800c3c4:	f300 8144 	bgt.w	800c650 <_dtoa_r+0x700>
 800c3c8:	4b67      	ldr	r3, [pc, #412]	; (800c568 <_dtoa_r+0x618>)
 800c3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f280 80d5 	bge.w	800c584 <_dtoa_r+0x634>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f300 80d1 	bgt.w	800c584 <_dtoa_r+0x634>
 800c3e2:	f040 826f 	bne.w	800c8c4 <_dtoa_r+0x974>
 800c3e6:	4b65      	ldr	r3, [pc, #404]	; (800c57c <_dtoa_r+0x62c>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f4 f923 	bl	8000638 <__aeabi_dmul>
 800c3f2:	4652      	mov	r2, sl
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	f7f4 fba5 	bl	8000b44 <__aeabi_dcmpge>
 800c3fa:	9e03      	ldr	r6, [sp, #12]
 800c3fc:	4637      	mov	r7, r6
 800c3fe:	2800      	cmp	r0, #0
 800c400:	f040 8245 	bne.w	800c88e <_dtoa_r+0x93e>
 800c404:	9d01      	ldr	r5, [sp, #4]
 800c406:	2331      	movs	r3, #49	; 0x31
 800c408:	f805 3b01 	strb.w	r3, [r5], #1
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	3301      	adds	r3, #1
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	e240      	b.n	800c896 <_dtoa_r+0x946>
 800c414:	07f2      	lsls	r2, r6, #31
 800c416:	d505      	bpl.n	800c424 <_dtoa_r+0x4d4>
 800c418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c41c:	f7f4 f90c 	bl	8000638 <__aeabi_dmul>
 800c420:	3501      	adds	r5, #1
 800c422:	2301      	movs	r3, #1
 800c424:	1076      	asrs	r6, r6, #1
 800c426:	3708      	adds	r7, #8
 800c428:	e777      	b.n	800c31a <_dtoa_r+0x3ca>
 800c42a:	2502      	movs	r5, #2
 800c42c:	e779      	b.n	800c322 <_dtoa_r+0x3d2>
 800c42e:	9f00      	ldr	r7, [sp, #0]
 800c430:	9e03      	ldr	r6, [sp, #12]
 800c432:	e794      	b.n	800c35e <_dtoa_r+0x40e>
 800c434:	9901      	ldr	r1, [sp, #4]
 800c436:	4b4c      	ldr	r3, [pc, #304]	; (800c568 <_dtoa_r+0x618>)
 800c438:	4431      	add	r1, r6
 800c43a:	910d      	str	r1, [sp, #52]	; 0x34
 800c43c:	9908      	ldr	r1, [sp, #32]
 800c43e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c446:	2900      	cmp	r1, #0
 800c448:	d043      	beq.n	800c4d2 <_dtoa_r+0x582>
 800c44a:	494d      	ldr	r1, [pc, #308]	; (800c580 <_dtoa_r+0x630>)
 800c44c:	2000      	movs	r0, #0
 800c44e:	f7f4 fa1d 	bl	800088c <__aeabi_ddiv>
 800c452:	4652      	mov	r2, sl
 800c454:	465b      	mov	r3, fp
 800c456:	f7f3 ff37 	bl	80002c8 <__aeabi_dsub>
 800c45a:	9d01      	ldr	r5, [sp, #4]
 800c45c:	4682      	mov	sl, r0
 800c45e:	468b      	mov	fp, r1
 800c460:	4649      	mov	r1, r9
 800c462:	4640      	mov	r0, r8
 800c464:	f7f4 fb98 	bl	8000b98 <__aeabi_d2iz>
 800c468:	4606      	mov	r6, r0
 800c46a:	f7f4 f87b 	bl	8000564 <__aeabi_i2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	4640      	mov	r0, r8
 800c474:	4649      	mov	r1, r9
 800c476:	f7f3 ff27 	bl	80002c8 <__aeabi_dsub>
 800c47a:	3630      	adds	r6, #48	; 0x30
 800c47c:	f805 6b01 	strb.w	r6, [r5], #1
 800c480:	4652      	mov	r2, sl
 800c482:	465b      	mov	r3, fp
 800c484:	4680      	mov	r8, r0
 800c486:	4689      	mov	r9, r1
 800c488:	f7f4 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d163      	bne.n	800c558 <_dtoa_r+0x608>
 800c490:	4642      	mov	r2, r8
 800c492:	464b      	mov	r3, r9
 800c494:	4936      	ldr	r1, [pc, #216]	; (800c570 <_dtoa_r+0x620>)
 800c496:	2000      	movs	r0, #0
 800c498:	f7f3 ff16 	bl	80002c8 <__aeabi_dsub>
 800c49c:	4652      	mov	r2, sl
 800c49e:	465b      	mov	r3, fp
 800c4a0:	f7f4 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f040 80b5 	bne.w	800c614 <_dtoa_r+0x6c4>
 800c4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ac:	429d      	cmp	r5, r3
 800c4ae:	d081      	beq.n	800c3b4 <_dtoa_r+0x464>
 800c4b0:	4b30      	ldr	r3, [pc, #192]	; (800c574 <_dtoa_r+0x624>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	4650      	mov	r0, sl
 800c4b6:	4659      	mov	r1, fp
 800c4b8:	f7f4 f8be 	bl	8000638 <__aeabi_dmul>
 800c4bc:	4b2d      	ldr	r3, [pc, #180]	; (800c574 <_dtoa_r+0x624>)
 800c4be:	4682      	mov	sl, r0
 800c4c0:	468b      	mov	fp, r1
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f7f4 f8b6 	bl	8000638 <__aeabi_dmul>
 800c4cc:	4680      	mov	r8, r0
 800c4ce:	4689      	mov	r9, r1
 800c4d0:	e7c6      	b.n	800c460 <_dtoa_r+0x510>
 800c4d2:	4650      	mov	r0, sl
 800c4d4:	4659      	mov	r1, fp
 800c4d6:	f7f4 f8af 	bl	8000638 <__aeabi_dmul>
 800c4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4dc:	9d01      	ldr	r5, [sp, #4]
 800c4de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e0:	4682      	mov	sl, r0
 800c4e2:	468b      	mov	fp, r1
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7f4 fb56 	bl	8000b98 <__aeabi_d2iz>
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	f7f4 f839 	bl	8000564 <__aeabi_i2d>
 800c4f2:	3630      	adds	r6, #48	; 0x30
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4640      	mov	r0, r8
 800c4fa:	4649      	mov	r1, r9
 800c4fc:	f7f3 fee4 	bl	80002c8 <__aeabi_dsub>
 800c500:	f805 6b01 	strb.w	r6, [r5], #1
 800c504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c506:	429d      	cmp	r5, r3
 800c508:	4680      	mov	r8, r0
 800c50a:	4689      	mov	r9, r1
 800c50c:	f04f 0200 	mov.w	r2, #0
 800c510:	d124      	bne.n	800c55c <_dtoa_r+0x60c>
 800c512:	4b1b      	ldr	r3, [pc, #108]	; (800c580 <_dtoa_r+0x630>)
 800c514:	4650      	mov	r0, sl
 800c516:	4659      	mov	r1, fp
 800c518:	f7f3 fed8 	bl	80002cc <__adddf3>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	4640      	mov	r0, r8
 800c522:	4649      	mov	r1, r9
 800c524:	f7f4 fb18 	bl	8000b58 <__aeabi_dcmpgt>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d173      	bne.n	800c614 <_dtoa_r+0x6c4>
 800c52c:	4652      	mov	r2, sl
 800c52e:	465b      	mov	r3, fp
 800c530:	4913      	ldr	r1, [pc, #76]	; (800c580 <_dtoa_r+0x630>)
 800c532:	2000      	movs	r0, #0
 800c534:	f7f3 fec8 	bl	80002c8 <__aeabi_dsub>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f4 faec 	bl	8000b1c <__aeabi_dcmplt>
 800c544:	2800      	cmp	r0, #0
 800c546:	f43f af35 	beq.w	800c3b4 <_dtoa_r+0x464>
 800c54a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c54c:	1e6b      	subs	r3, r5, #1
 800c54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c554:	2b30      	cmp	r3, #48	; 0x30
 800c556:	d0f8      	beq.n	800c54a <_dtoa_r+0x5fa>
 800c558:	9700      	str	r7, [sp, #0]
 800c55a:	e049      	b.n	800c5f0 <_dtoa_r+0x6a0>
 800c55c:	4b05      	ldr	r3, [pc, #20]	; (800c574 <_dtoa_r+0x624>)
 800c55e:	f7f4 f86b 	bl	8000638 <__aeabi_dmul>
 800c562:	4680      	mov	r8, r0
 800c564:	4689      	mov	r9, r1
 800c566:	e7bd      	b.n	800c4e4 <_dtoa_r+0x594>
 800c568:	08011530 	.word	0x08011530
 800c56c:	08011508 	.word	0x08011508
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	40240000 	.word	0x40240000
 800c578:	401c0000 	.word	0x401c0000
 800c57c:	40140000 	.word	0x40140000
 800c580:	3fe00000 	.word	0x3fe00000
 800c584:	9d01      	ldr	r5, [sp, #4]
 800c586:	4656      	mov	r6, sl
 800c588:	465f      	mov	r7, fp
 800c58a:	4642      	mov	r2, r8
 800c58c:	464b      	mov	r3, r9
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f4 f97b 	bl	800088c <__aeabi_ddiv>
 800c596:	f7f4 faff 	bl	8000b98 <__aeabi_d2iz>
 800c59a:	4682      	mov	sl, r0
 800c59c:	f7f3 ffe2 	bl	8000564 <__aeabi_i2d>
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	f7f4 f848 	bl	8000638 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c5b4:	f7f3 fe88 	bl	80002c8 <__aeabi_dsub>
 800c5b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c5bc:	9e01      	ldr	r6, [sp, #4]
 800c5be:	9f03      	ldr	r7, [sp, #12]
 800c5c0:	1bae      	subs	r6, r5, r6
 800c5c2:	42b7      	cmp	r7, r6
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	d135      	bne.n	800c636 <_dtoa_r+0x6e6>
 800c5ca:	f7f3 fe7f 	bl	80002cc <__adddf3>
 800c5ce:	4642      	mov	r2, r8
 800c5d0:	464b      	mov	r3, r9
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	f7f4 fabf 	bl	8000b58 <__aeabi_dcmpgt>
 800c5da:	b9d0      	cbnz	r0, 800c612 <_dtoa_r+0x6c2>
 800c5dc:	4642      	mov	r2, r8
 800c5de:	464b      	mov	r3, r9
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 fa90 	bl	8000b08 <__aeabi_dcmpeq>
 800c5e8:	b110      	cbz	r0, 800c5f0 <_dtoa_r+0x6a0>
 800c5ea:	f01a 0f01 	tst.w	sl, #1
 800c5ee:	d110      	bne.n	800c612 <_dtoa_r+0x6c2>
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	ee18 1a10 	vmov	r1, s16
 800c5f6:	f000 fe87 	bl	800d308 <_Bfree>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9800      	ldr	r0, [sp, #0]
 800c5fe:	702b      	strb	r3, [r5, #0]
 800c600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c602:	3001      	adds	r0, #1
 800c604:	6018      	str	r0, [r3, #0]
 800c606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f43f acf1 	beq.w	800bff0 <_dtoa_r+0xa0>
 800c60e:	601d      	str	r5, [r3, #0]
 800c610:	e4ee      	b.n	800bff0 <_dtoa_r+0xa0>
 800c612:	9f00      	ldr	r7, [sp, #0]
 800c614:	462b      	mov	r3, r5
 800c616:	461d      	mov	r5, r3
 800c618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c61c:	2a39      	cmp	r2, #57	; 0x39
 800c61e:	d106      	bne.n	800c62e <_dtoa_r+0x6de>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	429a      	cmp	r2, r3
 800c624:	d1f7      	bne.n	800c616 <_dtoa_r+0x6c6>
 800c626:	9901      	ldr	r1, [sp, #4]
 800c628:	2230      	movs	r2, #48	; 0x30
 800c62a:	3701      	adds	r7, #1
 800c62c:	700a      	strb	r2, [r1, #0]
 800c62e:	781a      	ldrb	r2, [r3, #0]
 800c630:	3201      	adds	r2, #1
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	e790      	b.n	800c558 <_dtoa_r+0x608>
 800c636:	4ba6      	ldr	r3, [pc, #664]	; (800c8d0 <_dtoa_r+0x980>)
 800c638:	2200      	movs	r2, #0
 800c63a:	f7f3 fffd 	bl	8000638 <__aeabi_dmul>
 800c63e:	2200      	movs	r2, #0
 800c640:	2300      	movs	r3, #0
 800c642:	4606      	mov	r6, r0
 800c644:	460f      	mov	r7, r1
 800c646:	f7f4 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d09d      	beq.n	800c58a <_dtoa_r+0x63a>
 800c64e:	e7cf      	b.n	800c5f0 <_dtoa_r+0x6a0>
 800c650:	9a08      	ldr	r2, [sp, #32]
 800c652:	2a00      	cmp	r2, #0
 800c654:	f000 80d7 	beq.w	800c806 <_dtoa_r+0x8b6>
 800c658:	9a06      	ldr	r2, [sp, #24]
 800c65a:	2a01      	cmp	r2, #1
 800c65c:	f300 80ba 	bgt.w	800c7d4 <_dtoa_r+0x884>
 800c660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c662:	2a00      	cmp	r2, #0
 800c664:	f000 80b2 	beq.w	800c7cc <_dtoa_r+0x87c>
 800c668:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c66c:	9e07      	ldr	r6, [sp, #28]
 800c66e:	9d04      	ldr	r5, [sp, #16]
 800c670:	9a04      	ldr	r2, [sp, #16]
 800c672:	441a      	add	r2, r3
 800c674:	9204      	str	r2, [sp, #16]
 800c676:	9a05      	ldr	r2, [sp, #20]
 800c678:	2101      	movs	r1, #1
 800c67a:	441a      	add	r2, r3
 800c67c:	4620      	mov	r0, r4
 800c67e:	9205      	str	r2, [sp, #20]
 800c680:	f000 ff44 	bl	800d50c <__i2b>
 800c684:	4607      	mov	r7, r0
 800c686:	2d00      	cmp	r5, #0
 800c688:	dd0c      	ble.n	800c6a4 <_dtoa_r+0x754>
 800c68a:	9b05      	ldr	r3, [sp, #20]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	dd09      	ble.n	800c6a4 <_dtoa_r+0x754>
 800c690:	42ab      	cmp	r3, r5
 800c692:	9a04      	ldr	r2, [sp, #16]
 800c694:	bfa8      	it	ge
 800c696:	462b      	movge	r3, r5
 800c698:	1ad2      	subs	r2, r2, r3
 800c69a:	9204      	str	r2, [sp, #16]
 800c69c:	9a05      	ldr	r2, [sp, #20]
 800c69e:	1aed      	subs	r5, r5, r3
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	9305      	str	r3, [sp, #20]
 800c6a4:	9b07      	ldr	r3, [sp, #28]
 800c6a6:	b31b      	cbz	r3, 800c6f0 <_dtoa_r+0x7a0>
 800c6a8:	9b08      	ldr	r3, [sp, #32]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 80af 	beq.w	800c80e <_dtoa_r+0x8be>
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	dd13      	ble.n	800c6dc <_dtoa_r+0x78c>
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	4632      	mov	r2, r6
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 ffe7 	bl	800d68c <__pow5mult>
 800c6be:	ee18 2a10 	vmov	r2, s16
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 ff36 	bl	800d538 <__multiply>
 800c6cc:	ee18 1a10 	vmov	r1, s16
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f000 fe18 	bl	800d308 <_Bfree>
 800c6d8:	ee08 8a10 	vmov	s16, r8
 800c6dc:	9b07      	ldr	r3, [sp, #28]
 800c6de:	1b9a      	subs	r2, r3, r6
 800c6e0:	d006      	beq.n	800c6f0 <_dtoa_r+0x7a0>
 800c6e2:	ee18 1a10 	vmov	r1, s16
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 ffd0 	bl	800d68c <__pow5mult>
 800c6ec:	ee08 0a10 	vmov	s16, r0
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 ff0a 	bl	800d50c <__i2b>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	f340 8088 	ble.w	800c812 <_dtoa_r+0x8c2>
 800c702:	461a      	mov	r2, r3
 800c704:	4601      	mov	r1, r0
 800c706:	4620      	mov	r0, r4
 800c708:	f000 ffc0 	bl	800d68c <__pow5mult>
 800c70c:	9b06      	ldr	r3, [sp, #24]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	4606      	mov	r6, r0
 800c712:	f340 8081 	ble.w	800c818 <_dtoa_r+0x8c8>
 800c716:	f04f 0800 	mov.w	r8, #0
 800c71a:	6933      	ldr	r3, [r6, #16]
 800c71c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c720:	6918      	ldr	r0, [r3, #16]
 800c722:	f000 fea3 	bl	800d46c <__hi0bits>
 800c726:	f1c0 0020 	rsb	r0, r0, #32
 800c72a:	9b05      	ldr	r3, [sp, #20]
 800c72c:	4418      	add	r0, r3
 800c72e:	f010 001f 	ands.w	r0, r0, #31
 800c732:	f000 8092 	beq.w	800c85a <_dtoa_r+0x90a>
 800c736:	f1c0 0320 	rsb	r3, r0, #32
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	f340 808a 	ble.w	800c854 <_dtoa_r+0x904>
 800c740:	f1c0 001c 	rsb	r0, r0, #28
 800c744:	9b04      	ldr	r3, [sp, #16]
 800c746:	4403      	add	r3, r0
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	9b05      	ldr	r3, [sp, #20]
 800c74c:	4403      	add	r3, r0
 800c74e:	4405      	add	r5, r0
 800c750:	9305      	str	r3, [sp, #20]
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	dd07      	ble.n	800c768 <_dtoa_r+0x818>
 800c758:	ee18 1a10 	vmov	r1, s16
 800c75c:	461a      	mov	r2, r3
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 ffee 	bl	800d740 <__lshift>
 800c764:	ee08 0a10 	vmov	s16, r0
 800c768:	9b05      	ldr	r3, [sp, #20]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dd05      	ble.n	800c77a <_dtoa_r+0x82a>
 800c76e:	4631      	mov	r1, r6
 800c770:	461a      	mov	r2, r3
 800c772:	4620      	mov	r0, r4
 800c774:	f000 ffe4 	bl	800d740 <__lshift>
 800c778:	4606      	mov	r6, r0
 800c77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d06e      	beq.n	800c85e <_dtoa_r+0x90e>
 800c780:	ee18 0a10 	vmov	r0, s16
 800c784:	4631      	mov	r1, r6
 800c786:	f001 f84b 	bl	800d820 <__mcmp>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	da67      	bge.n	800c85e <_dtoa_r+0x90e>
 800c78e:	9b00      	ldr	r3, [sp, #0]
 800c790:	3b01      	subs	r3, #1
 800c792:	ee18 1a10 	vmov	r1, s16
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	220a      	movs	r2, #10
 800c79a:	2300      	movs	r3, #0
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fdd5 	bl	800d34c <__multadd>
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	ee08 0a10 	vmov	s16, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 81b1 	beq.w	800cb10 <_dtoa_r+0xbc0>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	220a      	movs	r2, #10
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fdc9 	bl	800d34c <__multadd>
 800c7ba:	9b02      	ldr	r3, [sp, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	4607      	mov	r7, r0
 800c7c0:	f300 808e 	bgt.w	800c8e0 <_dtoa_r+0x990>
 800c7c4:	9b06      	ldr	r3, [sp, #24]
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	dc51      	bgt.n	800c86e <_dtoa_r+0x91e>
 800c7ca:	e089      	b.n	800c8e0 <_dtoa_r+0x990>
 800c7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c7d2:	e74b      	b.n	800c66c <_dtoa_r+0x71c>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1e5e      	subs	r6, r3, #1
 800c7d8:	9b07      	ldr	r3, [sp, #28]
 800c7da:	42b3      	cmp	r3, r6
 800c7dc:	bfbf      	itttt	lt
 800c7de:	9b07      	ldrlt	r3, [sp, #28]
 800c7e0:	9607      	strlt	r6, [sp, #28]
 800c7e2:	1af2      	sublt	r2, r6, r3
 800c7e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c7e6:	bfb6      	itet	lt
 800c7e8:	189b      	addlt	r3, r3, r2
 800c7ea:	1b9e      	subge	r6, r3, r6
 800c7ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	bfb8      	it	lt
 800c7f2:	2600      	movlt	r6, #0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfb7      	itett	lt
 800c7f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c7fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c800:	1a9d      	sublt	r5, r3, r2
 800c802:	2300      	movlt	r3, #0
 800c804:	e734      	b.n	800c670 <_dtoa_r+0x720>
 800c806:	9e07      	ldr	r6, [sp, #28]
 800c808:	9d04      	ldr	r5, [sp, #16]
 800c80a:	9f08      	ldr	r7, [sp, #32]
 800c80c:	e73b      	b.n	800c686 <_dtoa_r+0x736>
 800c80e:	9a07      	ldr	r2, [sp, #28]
 800c810:	e767      	b.n	800c6e2 <_dtoa_r+0x792>
 800c812:	9b06      	ldr	r3, [sp, #24]
 800c814:	2b01      	cmp	r3, #1
 800c816:	dc18      	bgt.n	800c84a <_dtoa_r+0x8fa>
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	d115      	bne.n	800c84a <_dtoa_r+0x8fa>
 800c81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c822:	b993      	cbnz	r3, 800c84a <_dtoa_r+0x8fa>
 800c824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c828:	0d1b      	lsrs	r3, r3, #20
 800c82a:	051b      	lsls	r3, r3, #20
 800c82c:	b183      	cbz	r3, 800c850 <_dtoa_r+0x900>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	3301      	adds	r3, #1
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	9b05      	ldr	r3, [sp, #20]
 800c836:	3301      	adds	r3, #1
 800c838:	9305      	str	r3, [sp, #20]
 800c83a:	f04f 0801 	mov.w	r8, #1
 800c83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c840:	2b00      	cmp	r3, #0
 800c842:	f47f af6a 	bne.w	800c71a <_dtoa_r+0x7ca>
 800c846:	2001      	movs	r0, #1
 800c848:	e76f      	b.n	800c72a <_dtoa_r+0x7da>
 800c84a:	f04f 0800 	mov.w	r8, #0
 800c84e:	e7f6      	b.n	800c83e <_dtoa_r+0x8ee>
 800c850:	4698      	mov	r8, r3
 800c852:	e7f4      	b.n	800c83e <_dtoa_r+0x8ee>
 800c854:	f43f af7d 	beq.w	800c752 <_dtoa_r+0x802>
 800c858:	4618      	mov	r0, r3
 800c85a:	301c      	adds	r0, #28
 800c85c:	e772      	b.n	800c744 <_dtoa_r+0x7f4>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dc37      	bgt.n	800c8d4 <_dtoa_r+0x984>
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	2b02      	cmp	r3, #2
 800c868:	dd34      	ble.n	800c8d4 <_dtoa_r+0x984>
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	9302      	str	r3, [sp, #8]
 800c86e:	9b02      	ldr	r3, [sp, #8]
 800c870:	b96b      	cbnz	r3, 800c88e <_dtoa_r+0x93e>
 800c872:	4631      	mov	r1, r6
 800c874:	2205      	movs	r2, #5
 800c876:	4620      	mov	r0, r4
 800c878:	f000 fd68 	bl	800d34c <__multadd>
 800c87c:	4601      	mov	r1, r0
 800c87e:	4606      	mov	r6, r0
 800c880:	ee18 0a10 	vmov	r0, s16
 800c884:	f000 ffcc 	bl	800d820 <__mcmp>
 800c888:	2800      	cmp	r0, #0
 800c88a:	f73f adbb 	bgt.w	800c404 <_dtoa_r+0x4b4>
 800c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c890:	9d01      	ldr	r5, [sp, #4]
 800c892:	43db      	mvns	r3, r3
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	f04f 0800 	mov.w	r8, #0
 800c89a:	4631      	mov	r1, r6
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 fd33 	bl	800d308 <_Bfree>
 800c8a2:	2f00      	cmp	r7, #0
 800c8a4:	f43f aea4 	beq.w	800c5f0 <_dtoa_r+0x6a0>
 800c8a8:	f1b8 0f00 	cmp.w	r8, #0
 800c8ac:	d005      	beq.n	800c8ba <_dtoa_r+0x96a>
 800c8ae:	45b8      	cmp	r8, r7
 800c8b0:	d003      	beq.n	800c8ba <_dtoa_r+0x96a>
 800c8b2:	4641      	mov	r1, r8
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 fd27 	bl	800d308 <_Bfree>
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f000 fd23 	bl	800d308 <_Bfree>
 800c8c2:	e695      	b.n	800c5f0 <_dtoa_r+0x6a0>
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	4637      	mov	r7, r6
 800c8c8:	e7e1      	b.n	800c88e <_dtoa_r+0x93e>
 800c8ca:	9700      	str	r7, [sp, #0]
 800c8cc:	4637      	mov	r7, r6
 800c8ce:	e599      	b.n	800c404 <_dtoa_r+0x4b4>
 800c8d0:	40240000 	.word	0x40240000
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80ca 	beq.w	800ca70 <_dtoa_r+0xb20>
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	9302      	str	r3, [sp, #8]
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	dd05      	ble.n	800c8f0 <_dtoa_r+0x9a0>
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f000 ff29 	bl	800d740 <__lshift>
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	f1b8 0f00 	cmp.w	r8, #0
 800c8f4:	d05b      	beq.n	800c9ae <_dtoa_r+0xa5e>
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 fcc5 	bl	800d288 <_Balloc>
 800c8fe:	4605      	mov	r5, r0
 800c900:	b928      	cbnz	r0, 800c90e <_dtoa_r+0x9be>
 800c902:	4b87      	ldr	r3, [pc, #540]	; (800cb20 <_dtoa_r+0xbd0>)
 800c904:	4602      	mov	r2, r0
 800c906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c90a:	f7ff bb3b 	b.w	800bf84 <_dtoa_r+0x34>
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	3202      	adds	r2, #2
 800c912:	0092      	lsls	r2, r2, #2
 800c914:	f107 010c 	add.w	r1, r7, #12
 800c918:	300c      	adds	r0, #12
 800c91a:	f000 fca7 	bl	800d26c <memcpy>
 800c91e:	2201      	movs	r2, #1
 800c920:	4629      	mov	r1, r5
 800c922:	4620      	mov	r0, r4
 800c924:	f000 ff0c 	bl	800d740 <__lshift>
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	f103 0901 	add.w	r9, r3, #1
 800c92e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c932:	4413      	add	r3, r2
 800c934:	9305      	str	r3, [sp, #20]
 800c936:	f00a 0301 	and.w	r3, sl, #1
 800c93a:	46b8      	mov	r8, r7
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	4607      	mov	r7, r0
 800c940:	4631      	mov	r1, r6
 800c942:	ee18 0a10 	vmov	r0, s16
 800c946:	f7ff fa75 	bl	800be34 <quorem>
 800c94a:	4641      	mov	r1, r8
 800c94c:	9002      	str	r0, [sp, #8]
 800c94e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c952:	ee18 0a10 	vmov	r0, s16
 800c956:	f000 ff63 	bl	800d820 <__mcmp>
 800c95a:	463a      	mov	r2, r7
 800c95c:	9003      	str	r0, [sp, #12]
 800c95e:	4631      	mov	r1, r6
 800c960:	4620      	mov	r0, r4
 800c962:	f000 ff79 	bl	800d858 <__mdiff>
 800c966:	68c2      	ldr	r2, [r0, #12]
 800c968:	f109 3bff 	add.w	fp, r9, #4294967295
 800c96c:	4605      	mov	r5, r0
 800c96e:	bb02      	cbnz	r2, 800c9b2 <_dtoa_r+0xa62>
 800c970:	4601      	mov	r1, r0
 800c972:	ee18 0a10 	vmov	r0, s16
 800c976:	f000 ff53 	bl	800d820 <__mcmp>
 800c97a:	4602      	mov	r2, r0
 800c97c:	4629      	mov	r1, r5
 800c97e:	4620      	mov	r0, r4
 800c980:	9207      	str	r2, [sp, #28]
 800c982:	f000 fcc1 	bl	800d308 <_Bfree>
 800c986:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c98a:	ea43 0102 	orr.w	r1, r3, r2
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	430b      	orrs	r3, r1
 800c992:	464d      	mov	r5, r9
 800c994:	d10f      	bne.n	800c9b6 <_dtoa_r+0xa66>
 800c996:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c99a:	d02a      	beq.n	800c9f2 <_dtoa_r+0xaa2>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	dd02      	ble.n	800c9a8 <_dtoa_r+0xa58>
 800c9a2:	9b02      	ldr	r3, [sp, #8]
 800c9a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c9a8:	f88b a000 	strb.w	sl, [fp]
 800c9ac:	e775      	b.n	800c89a <_dtoa_r+0x94a>
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	e7ba      	b.n	800c928 <_dtoa_r+0x9d8>
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	e7e2      	b.n	800c97c <_dtoa_r+0xa2c>
 800c9b6:	9b03      	ldr	r3, [sp, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	db04      	blt.n	800c9c6 <_dtoa_r+0xa76>
 800c9bc:	9906      	ldr	r1, [sp, #24]
 800c9be:	430b      	orrs	r3, r1
 800c9c0:	9904      	ldr	r1, [sp, #16]
 800c9c2:	430b      	orrs	r3, r1
 800c9c4:	d122      	bne.n	800ca0c <_dtoa_r+0xabc>
 800c9c6:	2a00      	cmp	r2, #0
 800c9c8:	ddee      	ble.n	800c9a8 <_dtoa_r+0xa58>
 800c9ca:	ee18 1a10 	vmov	r1, s16
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 feb5 	bl	800d740 <__lshift>
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	ee08 0a10 	vmov	s16, r0
 800c9dc:	f000 ff20 	bl	800d820 <__mcmp>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	dc03      	bgt.n	800c9ec <_dtoa_r+0xa9c>
 800c9e4:	d1e0      	bne.n	800c9a8 <_dtoa_r+0xa58>
 800c9e6:	f01a 0f01 	tst.w	sl, #1
 800c9ea:	d0dd      	beq.n	800c9a8 <_dtoa_r+0xa58>
 800c9ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9f0:	d1d7      	bne.n	800c9a2 <_dtoa_r+0xa52>
 800c9f2:	2339      	movs	r3, #57	; 0x39
 800c9f4:	f88b 3000 	strb.w	r3, [fp]
 800c9f8:	462b      	mov	r3, r5
 800c9fa:	461d      	mov	r5, r3
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca02:	2a39      	cmp	r2, #57	; 0x39
 800ca04:	d071      	beq.n	800caea <_dtoa_r+0xb9a>
 800ca06:	3201      	adds	r2, #1
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e746      	b.n	800c89a <_dtoa_r+0x94a>
 800ca0c:	2a00      	cmp	r2, #0
 800ca0e:	dd07      	ble.n	800ca20 <_dtoa_r+0xad0>
 800ca10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca14:	d0ed      	beq.n	800c9f2 <_dtoa_r+0xaa2>
 800ca16:	f10a 0301 	add.w	r3, sl, #1
 800ca1a:	f88b 3000 	strb.w	r3, [fp]
 800ca1e:	e73c      	b.n	800c89a <_dtoa_r+0x94a>
 800ca20:	9b05      	ldr	r3, [sp, #20]
 800ca22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ca26:	4599      	cmp	r9, r3
 800ca28:	d047      	beq.n	800caba <_dtoa_r+0xb6a>
 800ca2a:	ee18 1a10 	vmov	r1, s16
 800ca2e:	2300      	movs	r3, #0
 800ca30:	220a      	movs	r2, #10
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fc8a 	bl	800d34c <__multadd>
 800ca38:	45b8      	cmp	r8, r7
 800ca3a:	ee08 0a10 	vmov	s16, r0
 800ca3e:	f04f 0300 	mov.w	r3, #0
 800ca42:	f04f 020a 	mov.w	r2, #10
 800ca46:	4641      	mov	r1, r8
 800ca48:	4620      	mov	r0, r4
 800ca4a:	d106      	bne.n	800ca5a <_dtoa_r+0xb0a>
 800ca4c:	f000 fc7e 	bl	800d34c <__multadd>
 800ca50:	4680      	mov	r8, r0
 800ca52:	4607      	mov	r7, r0
 800ca54:	f109 0901 	add.w	r9, r9, #1
 800ca58:	e772      	b.n	800c940 <_dtoa_r+0x9f0>
 800ca5a:	f000 fc77 	bl	800d34c <__multadd>
 800ca5e:	4639      	mov	r1, r7
 800ca60:	4680      	mov	r8, r0
 800ca62:	2300      	movs	r3, #0
 800ca64:	220a      	movs	r2, #10
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 fc70 	bl	800d34c <__multadd>
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	e7f1      	b.n	800ca54 <_dtoa_r+0xb04>
 800ca70:	9b03      	ldr	r3, [sp, #12]
 800ca72:	9302      	str	r3, [sp, #8]
 800ca74:	9d01      	ldr	r5, [sp, #4]
 800ca76:	ee18 0a10 	vmov	r0, s16
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	f7ff f9da 	bl	800be34 <quorem>
 800ca80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca84:	9b01      	ldr	r3, [sp, #4]
 800ca86:	f805 ab01 	strb.w	sl, [r5], #1
 800ca8a:	1aea      	subs	r2, r5, r3
 800ca8c:	9b02      	ldr	r3, [sp, #8]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	dd09      	ble.n	800caa6 <_dtoa_r+0xb56>
 800ca92:	ee18 1a10 	vmov	r1, s16
 800ca96:	2300      	movs	r3, #0
 800ca98:	220a      	movs	r2, #10
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fc56 	bl	800d34c <__multadd>
 800caa0:	ee08 0a10 	vmov	s16, r0
 800caa4:	e7e7      	b.n	800ca76 <_dtoa_r+0xb26>
 800caa6:	9b02      	ldr	r3, [sp, #8]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bfc8      	it	gt
 800caac:	461d      	movgt	r5, r3
 800caae:	9b01      	ldr	r3, [sp, #4]
 800cab0:	bfd8      	it	le
 800cab2:	2501      	movle	r5, #1
 800cab4:	441d      	add	r5, r3
 800cab6:	f04f 0800 	mov.w	r8, #0
 800caba:	ee18 1a10 	vmov	r1, s16
 800cabe:	2201      	movs	r2, #1
 800cac0:	4620      	mov	r0, r4
 800cac2:	f000 fe3d 	bl	800d740 <__lshift>
 800cac6:	4631      	mov	r1, r6
 800cac8:	ee08 0a10 	vmov	s16, r0
 800cacc:	f000 fea8 	bl	800d820 <__mcmp>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	dc91      	bgt.n	800c9f8 <_dtoa_r+0xaa8>
 800cad4:	d102      	bne.n	800cadc <_dtoa_r+0xb8c>
 800cad6:	f01a 0f01 	tst.w	sl, #1
 800cada:	d18d      	bne.n	800c9f8 <_dtoa_r+0xaa8>
 800cadc:	462b      	mov	r3, r5
 800cade:	461d      	mov	r5, r3
 800cae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cae4:	2a30      	cmp	r2, #48	; 0x30
 800cae6:	d0fa      	beq.n	800cade <_dtoa_r+0xb8e>
 800cae8:	e6d7      	b.n	800c89a <_dtoa_r+0x94a>
 800caea:	9a01      	ldr	r2, [sp, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d184      	bne.n	800c9fa <_dtoa_r+0xaaa>
 800caf0:	9b00      	ldr	r3, [sp, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	2331      	movs	r3, #49	; 0x31
 800caf8:	7013      	strb	r3, [r2, #0]
 800cafa:	e6ce      	b.n	800c89a <_dtoa_r+0x94a>
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <_dtoa_r+0xbd4>)
 800cafe:	f7ff ba95 	b.w	800c02c <_dtoa_r+0xdc>
 800cb02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f47f aa6e 	bne.w	800bfe6 <_dtoa_r+0x96>
 800cb0a:	4b07      	ldr	r3, [pc, #28]	; (800cb28 <_dtoa_r+0xbd8>)
 800cb0c:	f7ff ba8e 	b.w	800c02c <_dtoa_r+0xdc>
 800cb10:	9b02      	ldr	r3, [sp, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dcae      	bgt.n	800ca74 <_dtoa_r+0xb24>
 800cb16:	9b06      	ldr	r3, [sp, #24]
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	f73f aea8 	bgt.w	800c86e <_dtoa_r+0x91e>
 800cb1e:	e7a9      	b.n	800ca74 <_dtoa_r+0xb24>
 800cb20:	08011420 	.word	0x08011420
 800cb24:	08011619 	.word	0x08011619
 800cb28:	080113a1 	.word	0x080113a1

0800cb2c <rshift>:
 800cb2c:	6903      	ldr	r3, [r0, #16]
 800cb2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb3a:	f100 0414 	add.w	r4, r0, #20
 800cb3e:	dd45      	ble.n	800cbcc <rshift+0xa0>
 800cb40:	f011 011f 	ands.w	r1, r1, #31
 800cb44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb4c:	d10c      	bne.n	800cb68 <rshift+0x3c>
 800cb4e:	f100 0710 	add.w	r7, r0, #16
 800cb52:	4629      	mov	r1, r5
 800cb54:	42b1      	cmp	r1, r6
 800cb56:	d334      	bcc.n	800cbc2 <rshift+0x96>
 800cb58:	1a9b      	subs	r3, r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	1eea      	subs	r2, r5, #3
 800cb5e:	4296      	cmp	r6, r2
 800cb60:	bf38      	it	cc
 800cb62:	2300      	movcc	r3, #0
 800cb64:	4423      	add	r3, r4
 800cb66:	e015      	b.n	800cb94 <rshift+0x68>
 800cb68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb6c:	f1c1 0820 	rsb	r8, r1, #32
 800cb70:	40cf      	lsrs	r7, r1
 800cb72:	f105 0e04 	add.w	lr, r5, #4
 800cb76:	46a1      	mov	r9, r4
 800cb78:	4576      	cmp	r6, lr
 800cb7a:	46f4      	mov	ip, lr
 800cb7c:	d815      	bhi.n	800cbaa <rshift+0x7e>
 800cb7e:	1a9a      	subs	r2, r3, r2
 800cb80:	0092      	lsls	r2, r2, #2
 800cb82:	3a04      	subs	r2, #4
 800cb84:	3501      	adds	r5, #1
 800cb86:	42ae      	cmp	r6, r5
 800cb88:	bf38      	it	cc
 800cb8a:	2200      	movcc	r2, #0
 800cb8c:	18a3      	adds	r3, r4, r2
 800cb8e:	50a7      	str	r7, [r4, r2]
 800cb90:	b107      	cbz	r7, 800cb94 <rshift+0x68>
 800cb92:	3304      	adds	r3, #4
 800cb94:	1b1a      	subs	r2, r3, r4
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb9c:	bf08      	it	eq
 800cb9e:	2300      	moveq	r3, #0
 800cba0:	6102      	str	r2, [r0, #16]
 800cba2:	bf08      	it	eq
 800cba4:	6143      	streq	r3, [r0, #20]
 800cba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbaa:	f8dc c000 	ldr.w	ip, [ip]
 800cbae:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbb2:	ea4c 0707 	orr.w	r7, ip, r7
 800cbb6:	f849 7b04 	str.w	r7, [r9], #4
 800cbba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbbe:	40cf      	lsrs	r7, r1
 800cbc0:	e7da      	b.n	800cb78 <rshift+0x4c>
 800cbc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbca:	e7c3      	b.n	800cb54 <rshift+0x28>
 800cbcc:	4623      	mov	r3, r4
 800cbce:	e7e1      	b.n	800cb94 <rshift+0x68>

0800cbd0 <__hexdig_fun>:
 800cbd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cbd4:	2b09      	cmp	r3, #9
 800cbd6:	d802      	bhi.n	800cbde <__hexdig_fun+0xe>
 800cbd8:	3820      	subs	r0, #32
 800cbda:	b2c0      	uxtb	r0, r0
 800cbdc:	4770      	bx	lr
 800cbde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	d801      	bhi.n	800cbea <__hexdig_fun+0x1a>
 800cbe6:	3847      	subs	r0, #71	; 0x47
 800cbe8:	e7f7      	b.n	800cbda <__hexdig_fun+0xa>
 800cbea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cbee:	2b05      	cmp	r3, #5
 800cbf0:	d801      	bhi.n	800cbf6 <__hexdig_fun+0x26>
 800cbf2:	3827      	subs	r0, #39	; 0x27
 800cbf4:	e7f1      	b.n	800cbda <__hexdig_fun+0xa>
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	4770      	bx	lr
	...

0800cbfc <__gethex>:
 800cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc00:	ed2d 8b02 	vpush	{d8}
 800cc04:	b089      	sub	sp, #36	; 0x24
 800cc06:	ee08 0a10 	vmov	s16, r0
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	4bb4      	ldr	r3, [pc, #720]	; (800cee0 <__gethex+0x2e4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	4618      	mov	r0, r3
 800cc14:	468b      	mov	fp, r1
 800cc16:	4690      	mov	r8, r2
 800cc18:	f7f3 fafa 	bl	8000210 <strlen>
 800cc1c:	9b01      	ldr	r3, [sp, #4]
 800cc1e:	f8db 2000 	ldr.w	r2, [fp]
 800cc22:	4403      	add	r3, r0
 800cc24:	4682      	mov	sl, r0
 800cc26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cc2a:	9305      	str	r3, [sp, #20]
 800cc2c:	1c93      	adds	r3, r2, #2
 800cc2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc36:	32fe      	adds	r2, #254	; 0xfe
 800cc38:	18d1      	adds	r1, r2, r3
 800cc3a:	461f      	mov	r7, r3
 800cc3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc40:	9100      	str	r1, [sp, #0]
 800cc42:	2830      	cmp	r0, #48	; 0x30
 800cc44:	d0f8      	beq.n	800cc38 <__gethex+0x3c>
 800cc46:	f7ff ffc3 	bl	800cbd0 <__hexdig_fun>
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d13a      	bne.n	800ccc6 <__gethex+0xca>
 800cc50:	9901      	ldr	r1, [sp, #4]
 800cc52:	4652      	mov	r2, sl
 800cc54:	4638      	mov	r0, r7
 800cc56:	f001 fdb3 	bl	800e7c0 <strncmp>
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d168      	bne.n	800cd32 <__gethex+0x136>
 800cc60:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cc64:	eb07 060a 	add.w	r6, r7, sl
 800cc68:	f7ff ffb2 	bl	800cbd0 <__hexdig_fun>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d062      	beq.n	800cd36 <__gethex+0x13a>
 800cc70:	4633      	mov	r3, r6
 800cc72:	7818      	ldrb	r0, [r3, #0]
 800cc74:	2830      	cmp	r0, #48	; 0x30
 800cc76:	461f      	mov	r7, r3
 800cc78:	f103 0301 	add.w	r3, r3, #1
 800cc7c:	d0f9      	beq.n	800cc72 <__gethex+0x76>
 800cc7e:	f7ff ffa7 	bl	800cbd0 <__hexdig_fun>
 800cc82:	2301      	movs	r3, #1
 800cc84:	fab0 f480 	clz	r4, r0
 800cc88:	0964      	lsrs	r4, r4, #5
 800cc8a:	4635      	mov	r5, r6
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	463a      	mov	r2, r7
 800cc90:	4616      	mov	r6, r2
 800cc92:	3201      	adds	r2, #1
 800cc94:	7830      	ldrb	r0, [r6, #0]
 800cc96:	f7ff ff9b 	bl	800cbd0 <__hexdig_fun>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d1f8      	bne.n	800cc90 <__gethex+0x94>
 800cc9e:	9901      	ldr	r1, [sp, #4]
 800cca0:	4652      	mov	r2, sl
 800cca2:	4630      	mov	r0, r6
 800cca4:	f001 fd8c 	bl	800e7c0 <strncmp>
 800cca8:	b980      	cbnz	r0, 800cccc <__gethex+0xd0>
 800ccaa:	b94d      	cbnz	r5, 800ccc0 <__gethex+0xc4>
 800ccac:	eb06 050a 	add.w	r5, r6, sl
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4616      	mov	r6, r2
 800ccb4:	3201      	adds	r2, #1
 800ccb6:	7830      	ldrb	r0, [r6, #0]
 800ccb8:	f7ff ff8a 	bl	800cbd0 <__hexdig_fun>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	d1f8      	bne.n	800ccb2 <__gethex+0xb6>
 800ccc0:	1bad      	subs	r5, r5, r6
 800ccc2:	00ad      	lsls	r5, r5, #2
 800ccc4:	e004      	b.n	800ccd0 <__gethex+0xd4>
 800ccc6:	2400      	movs	r4, #0
 800ccc8:	4625      	mov	r5, r4
 800ccca:	e7e0      	b.n	800cc8e <__gethex+0x92>
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	d1f7      	bne.n	800ccc0 <__gethex+0xc4>
 800ccd0:	7833      	ldrb	r3, [r6, #0]
 800ccd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccd6:	2b50      	cmp	r3, #80	; 0x50
 800ccd8:	d13b      	bne.n	800cd52 <__gethex+0x156>
 800ccda:	7873      	ldrb	r3, [r6, #1]
 800ccdc:	2b2b      	cmp	r3, #43	; 0x2b
 800ccde:	d02c      	beq.n	800cd3a <__gethex+0x13e>
 800cce0:	2b2d      	cmp	r3, #45	; 0x2d
 800cce2:	d02e      	beq.n	800cd42 <__gethex+0x146>
 800cce4:	1c71      	adds	r1, r6, #1
 800cce6:	f04f 0900 	mov.w	r9, #0
 800ccea:	7808      	ldrb	r0, [r1, #0]
 800ccec:	f7ff ff70 	bl	800cbd0 <__hexdig_fun>
 800ccf0:	1e43      	subs	r3, r0, #1
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b18      	cmp	r3, #24
 800ccf6:	d82c      	bhi.n	800cd52 <__gethex+0x156>
 800ccf8:	f1a0 0210 	sub.w	r2, r0, #16
 800ccfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd00:	f7ff ff66 	bl	800cbd0 <__hexdig_fun>
 800cd04:	1e43      	subs	r3, r0, #1
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b18      	cmp	r3, #24
 800cd0a:	d91d      	bls.n	800cd48 <__gethex+0x14c>
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	d000      	beq.n	800cd14 <__gethex+0x118>
 800cd12:	4252      	negs	r2, r2
 800cd14:	4415      	add	r5, r2
 800cd16:	f8cb 1000 	str.w	r1, [fp]
 800cd1a:	b1e4      	cbz	r4, 800cd56 <__gethex+0x15a>
 800cd1c:	9b00      	ldr	r3, [sp, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	bf14      	ite	ne
 800cd22:	2700      	movne	r7, #0
 800cd24:	2706      	moveq	r7, #6
 800cd26:	4638      	mov	r0, r7
 800cd28:	b009      	add	sp, #36	; 0x24
 800cd2a:	ecbd 8b02 	vpop	{d8}
 800cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd32:	463e      	mov	r6, r7
 800cd34:	4625      	mov	r5, r4
 800cd36:	2401      	movs	r4, #1
 800cd38:	e7ca      	b.n	800ccd0 <__gethex+0xd4>
 800cd3a:	f04f 0900 	mov.w	r9, #0
 800cd3e:	1cb1      	adds	r1, r6, #2
 800cd40:	e7d3      	b.n	800ccea <__gethex+0xee>
 800cd42:	f04f 0901 	mov.w	r9, #1
 800cd46:	e7fa      	b.n	800cd3e <__gethex+0x142>
 800cd48:	230a      	movs	r3, #10
 800cd4a:	fb03 0202 	mla	r2, r3, r2, r0
 800cd4e:	3a10      	subs	r2, #16
 800cd50:	e7d4      	b.n	800ccfc <__gethex+0x100>
 800cd52:	4631      	mov	r1, r6
 800cd54:	e7df      	b.n	800cd16 <__gethex+0x11a>
 800cd56:	1bf3      	subs	r3, r6, r7
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	2b07      	cmp	r3, #7
 800cd5e:	dc0b      	bgt.n	800cd78 <__gethex+0x17c>
 800cd60:	ee18 0a10 	vmov	r0, s16
 800cd64:	f000 fa90 	bl	800d288 <_Balloc>
 800cd68:	4604      	mov	r4, r0
 800cd6a:	b940      	cbnz	r0, 800cd7e <__gethex+0x182>
 800cd6c:	4b5d      	ldr	r3, [pc, #372]	; (800cee4 <__gethex+0x2e8>)
 800cd6e:	4602      	mov	r2, r0
 800cd70:	21de      	movs	r1, #222	; 0xde
 800cd72:	485d      	ldr	r0, [pc, #372]	; (800cee8 <__gethex+0x2ec>)
 800cd74:	f001 fdf4 	bl	800e960 <__assert_func>
 800cd78:	3101      	adds	r1, #1
 800cd7a:	105b      	asrs	r3, r3, #1
 800cd7c:	e7ee      	b.n	800cd5c <__gethex+0x160>
 800cd7e:	f100 0914 	add.w	r9, r0, #20
 800cd82:	f04f 0b00 	mov.w	fp, #0
 800cd86:	f1ca 0301 	rsb	r3, sl, #1
 800cd8a:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd8e:	f8cd b000 	str.w	fp, [sp]
 800cd92:	9306      	str	r3, [sp, #24]
 800cd94:	42b7      	cmp	r7, r6
 800cd96:	d340      	bcc.n	800ce1a <__gethex+0x21e>
 800cd98:	9802      	ldr	r0, [sp, #8]
 800cd9a:	9b00      	ldr	r3, [sp, #0]
 800cd9c:	f840 3b04 	str.w	r3, [r0], #4
 800cda0:	eba0 0009 	sub.w	r0, r0, r9
 800cda4:	1080      	asrs	r0, r0, #2
 800cda6:	0146      	lsls	r6, r0, #5
 800cda8:	6120      	str	r0, [r4, #16]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 fb5e 	bl	800d46c <__hi0bits>
 800cdb0:	1a30      	subs	r0, r6, r0
 800cdb2:	f8d8 6000 	ldr.w	r6, [r8]
 800cdb6:	42b0      	cmp	r0, r6
 800cdb8:	dd63      	ble.n	800ce82 <__gethex+0x286>
 800cdba:	1b87      	subs	r7, r0, r6
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 ff02 	bl	800dbc8 <__any_on>
 800cdc4:	4682      	mov	sl, r0
 800cdc6:	b1a8      	cbz	r0, 800cdf4 <__gethex+0x1f8>
 800cdc8:	1e7b      	subs	r3, r7, #1
 800cdca:	1159      	asrs	r1, r3, #5
 800cdcc:	f003 021f 	and.w	r2, r3, #31
 800cdd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cdd4:	f04f 0a01 	mov.w	sl, #1
 800cdd8:	fa0a f202 	lsl.w	r2, sl, r2
 800cddc:	420a      	tst	r2, r1
 800cdde:	d009      	beq.n	800cdf4 <__gethex+0x1f8>
 800cde0:	4553      	cmp	r3, sl
 800cde2:	dd05      	ble.n	800cdf0 <__gethex+0x1f4>
 800cde4:	1eb9      	subs	r1, r7, #2
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 feee 	bl	800dbc8 <__any_on>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d145      	bne.n	800ce7c <__gethex+0x280>
 800cdf0:	f04f 0a02 	mov.w	sl, #2
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7ff fe98 	bl	800cb2c <rshift>
 800cdfc:	443d      	add	r5, r7
 800cdfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce02:	42ab      	cmp	r3, r5
 800ce04:	da4c      	bge.n	800cea0 <__gethex+0x2a4>
 800ce06:	ee18 0a10 	vmov	r0, s16
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	f000 fa7c 	bl	800d308 <_Bfree>
 800ce10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce12:	2300      	movs	r3, #0
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	27a3      	movs	r7, #163	; 0xa3
 800ce18:	e785      	b.n	800cd26 <__gethex+0x12a>
 800ce1a:	1e73      	subs	r3, r6, #1
 800ce1c:	9a05      	ldr	r2, [sp, #20]
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d019      	beq.n	800ce5c <__gethex+0x260>
 800ce28:	f1bb 0f20 	cmp.w	fp, #32
 800ce2c:	d107      	bne.n	800ce3e <__gethex+0x242>
 800ce2e:	9b02      	ldr	r3, [sp, #8]
 800ce30:	9a00      	ldr	r2, [sp, #0]
 800ce32:	f843 2b04 	str.w	r2, [r3], #4
 800ce36:	9302      	str	r3, [sp, #8]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	469b      	mov	fp, r3
 800ce3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ce42:	f7ff fec5 	bl	800cbd0 <__hexdig_fun>
 800ce46:	9b00      	ldr	r3, [sp, #0]
 800ce48:	f000 000f 	and.w	r0, r0, #15
 800ce4c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ce50:	4303      	orrs	r3, r0
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	f10b 0b04 	add.w	fp, fp, #4
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	e00d      	b.n	800ce78 <__gethex+0x27c>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	9a06      	ldr	r2, [sp, #24]
 800ce60:	4413      	add	r3, r2
 800ce62:	42bb      	cmp	r3, r7
 800ce64:	d3e0      	bcc.n	800ce28 <__gethex+0x22c>
 800ce66:	4618      	mov	r0, r3
 800ce68:	9901      	ldr	r1, [sp, #4]
 800ce6a:	9307      	str	r3, [sp, #28]
 800ce6c:	4652      	mov	r2, sl
 800ce6e:	f001 fca7 	bl	800e7c0 <strncmp>
 800ce72:	9b07      	ldr	r3, [sp, #28]
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d1d7      	bne.n	800ce28 <__gethex+0x22c>
 800ce78:	461e      	mov	r6, r3
 800ce7a:	e78b      	b.n	800cd94 <__gethex+0x198>
 800ce7c:	f04f 0a03 	mov.w	sl, #3
 800ce80:	e7b8      	b.n	800cdf4 <__gethex+0x1f8>
 800ce82:	da0a      	bge.n	800ce9a <__gethex+0x29e>
 800ce84:	1a37      	subs	r7, r6, r0
 800ce86:	4621      	mov	r1, r4
 800ce88:	ee18 0a10 	vmov	r0, s16
 800ce8c:	463a      	mov	r2, r7
 800ce8e:	f000 fc57 	bl	800d740 <__lshift>
 800ce92:	1bed      	subs	r5, r5, r7
 800ce94:	4604      	mov	r4, r0
 800ce96:	f100 0914 	add.w	r9, r0, #20
 800ce9a:	f04f 0a00 	mov.w	sl, #0
 800ce9e:	e7ae      	b.n	800cdfe <__gethex+0x202>
 800cea0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cea4:	42a8      	cmp	r0, r5
 800cea6:	dd72      	ble.n	800cf8e <__gethex+0x392>
 800cea8:	1b45      	subs	r5, r0, r5
 800ceaa:	42ae      	cmp	r6, r5
 800ceac:	dc36      	bgt.n	800cf1c <__gethex+0x320>
 800ceae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d02a      	beq.n	800cf0c <__gethex+0x310>
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d02c      	beq.n	800cf14 <__gethex+0x318>
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d11c      	bne.n	800cef8 <__gethex+0x2fc>
 800cebe:	42ae      	cmp	r6, r5
 800cec0:	d11a      	bne.n	800cef8 <__gethex+0x2fc>
 800cec2:	2e01      	cmp	r6, #1
 800cec4:	d112      	bne.n	800ceec <__gethex+0x2f0>
 800cec6:	9a04      	ldr	r2, [sp, #16]
 800cec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	2301      	movs	r3, #1
 800ced0:	6123      	str	r3, [r4, #16]
 800ced2:	f8c9 3000 	str.w	r3, [r9]
 800ced6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ced8:	2762      	movs	r7, #98	; 0x62
 800ceda:	601c      	str	r4, [r3, #0]
 800cedc:	e723      	b.n	800cd26 <__gethex+0x12a>
 800cede:	bf00      	nop
 800cee0:	08011498 	.word	0x08011498
 800cee4:	08011420 	.word	0x08011420
 800cee8:	08011431 	.word	0x08011431
 800ceec:	1e71      	subs	r1, r6, #1
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 fe6a 	bl	800dbc8 <__any_on>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d1e6      	bne.n	800cec6 <__gethex+0x2ca>
 800cef8:	ee18 0a10 	vmov	r0, s16
 800cefc:	4621      	mov	r1, r4
 800cefe:	f000 fa03 	bl	800d308 <_Bfree>
 800cf02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf04:	2300      	movs	r3, #0
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	2750      	movs	r7, #80	; 0x50
 800cf0a:	e70c      	b.n	800cd26 <__gethex+0x12a>
 800cf0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1f2      	bne.n	800cef8 <__gethex+0x2fc>
 800cf12:	e7d8      	b.n	800cec6 <__gethex+0x2ca>
 800cf14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1d5      	bne.n	800cec6 <__gethex+0x2ca>
 800cf1a:	e7ed      	b.n	800cef8 <__gethex+0x2fc>
 800cf1c:	1e6f      	subs	r7, r5, #1
 800cf1e:	f1ba 0f00 	cmp.w	sl, #0
 800cf22:	d131      	bne.n	800cf88 <__gethex+0x38c>
 800cf24:	b127      	cbz	r7, 800cf30 <__gethex+0x334>
 800cf26:	4639      	mov	r1, r7
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fe4d 	bl	800dbc8 <__any_on>
 800cf2e:	4682      	mov	sl, r0
 800cf30:	117b      	asrs	r3, r7, #5
 800cf32:	2101      	movs	r1, #1
 800cf34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf38:	f007 071f 	and.w	r7, r7, #31
 800cf3c:	fa01 f707 	lsl.w	r7, r1, r7
 800cf40:	421f      	tst	r7, r3
 800cf42:	4629      	mov	r1, r5
 800cf44:	4620      	mov	r0, r4
 800cf46:	bf18      	it	ne
 800cf48:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf4c:	1b76      	subs	r6, r6, r5
 800cf4e:	f7ff fded 	bl	800cb2c <rshift>
 800cf52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf56:	2702      	movs	r7, #2
 800cf58:	f1ba 0f00 	cmp.w	sl, #0
 800cf5c:	d048      	beq.n	800cff0 <__gethex+0x3f4>
 800cf5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d015      	beq.n	800cf92 <__gethex+0x396>
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d017      	beq.n	800cf9a <__gethex+0x39e>
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d109      	bne.n	800cf82 <__gethex+0x386>
 800cf6e:	f01a 0f02 	tst.w	sl, #2
 800cf72:	d006      	beq.n	800cf82 <__gethex+0x386>
 800cf74:	f8d9 0000 	ldr.w	r0, [r9]
 800cf78:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf7c:	f01a 0f01 	tst.w	sl, #1
 800cf80:	d10e      	bne.n	800cfa0 <__gethex+0x3a4>
 800cf82:	f047 0710 	orr.w	r7, r7, #16
 800cf86:	e033      	b.n	800cff0 <__gethex+0x3f4>
 800cf88:	f04f 0a01 	mov.w	sl, #1
 800cf8c:	e7d0      	b.n	800cf30 <__gethex+0x334>
 800cf8e:	2701      	movs	r7, #1
 800cf90:	e7e2      	b.n	800cf58 <__gethex+0x35c>
 800cf92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf94:	f1c3 0301 	rsb	r3, r3, #1
 800cf98:	9315      	str	r3, [sp, #84]	; 0x54
 800cf9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0f0      	beq.n	800cf82 <__gethex+0x386>
 800cfa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cfa4:	f104 0314 	add.w	r3, r4, #20
 800cfa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cfac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cfb0:	f04f 0c00 	mov.w	ip, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cfbe:	d01c      	beq.n	800cffa <__gethex+0x3fe>
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	6002      	str	r2, [r0, #0]
 800cfc4:	2f02      	cmp	r7, #2
 800cfc6:	f104 0314 	add.w	r3, r4, #20
 800cfca:	d13f      	bne.n	800d04c <__gethex+0x450>
 800cfcc:	f8d8 2000 	ldr.w	r2, [r8]
 800cfd0:	3a01      	subs	r2, #1
 800cfd2:	42b2      	cmp	r2, r6
 800cfd4:	d10a      	bne.n	800cfec <__gethex+0x3f0>
 800cfd6:	1171      	asrs	r1, r6, #5
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfde:	f006 061f 	and.w	r6, r6, #31
 800cfe2:	fa02 f606 	lsl.w	r6, r2, r6
 800cfe6:	421e      	tst	r6, r3
 800cfe8:	bf18      	it	ne
 800cfea:	4617      	movne	r7, r2
 800cfec:	f047 0720 	orr.w	r7, r7, #32
 800cff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cff2:	601c      	str	r4, [r3, #0]
 800cff4:	9b04      	ldr	r3, [sp, #16]
 800cff6:	601d      	str	r5, [r3, #0]
 800cff8:	e695      	b.n	800cd26 <__gethex+0x12a>
 800cffa:	4299      	cmp	r1, r3
 800cffc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d000:	d8d8      	bhi.n	800cfb4 <__gethex+0x3b8>
 800d002:	68a3      	ldr	r3, [r4, #8]
 800d004:	459b      	cmp	fp, r3
 800d006:	db19      	blt.n	800d03c <__gethex+0x440>
 800d008:	6861      	ldr	r1, [r4, #4]
 800d00a:	ee18 0a10 	vmov	r0, s16
 800d00e:	3101      	adds	r1, #1
 800d010:	f000 f93a 	bl	800d288 <_Balloc>
 800d014:	4681      	mov	r9, r0
 800d016:	b918      	cbnz	r0, 800d020 <__gethex+0x424>
 800d018:	4b1a      	ldr	r3, [pc, #104]	; (800d084 <__gethex+0x488>)
 800d01a:	4602      	mov	r2, r0
 800d01c:	2184      	movs	r1, #132	; 0x84
 800d01e:	e6a8      	b.n	800cd72 <__gethex+0x176>
 800d020:	6922      	ldr	r2, [r4, #16]
 800d022:	3202      	adds	r2, #2
 800d024:	f104 010c 	add.w	r1, r4, #12
 800d028:	0092      	lsls	r2, r2, #2
 800d02a:	300c      	adds	r0, #12
 800d02c:	f000 f91e 	bl	800d26c <memcpy>
 800d030:	4621      	mov	r1, r4
 800d032:	ee18 0a10 	vmov	r0, s16
 800d036:	f000 f967 	bl	800d308 <_Bfree>
 800d03a:	464c      	mov	r4, r9
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d044:	6122      	str	r2, [r4, #16]
 800d046:	2201      	movs	r2, #1
 800d048:	615a      	str	r2, [r3, #20]
 800d04a:	e7bb      	b.n	800cfc4 <__gethex+0x3c8>
 800d04c:	6922      	ldr	r2, [r4, #16]
 800d04e:	455a      	cmp	r2, fp
 800d050:	dd0b      	ble.n	800d06a <__gethex+0x46e>
 800d052:	2101      	movs	r1, #1
 800d054:	4620      	mov	r0, r4
 800d056:	f7ff fd69 	bl	800cb2c <rshift>
 800d05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d05e:	3501      	adds	r5, #1
 800d060:	42ab      	cmp	r3, r5
 800d062:	f6ff aed0 	blt.w	800ce06 <__gethex+0x20a>
 800d066:	2701      	movs	r7, #1
 800d068:	e7c0      	b.n	800cfec <__gethex+0x3f0>
 800d06a:	f016 061f 	ands.w	r6, r6, #31
 800d06e:	d0fa      	beq.n	800d066 <__gethex+0x46a>
 800d070:	4453      	add	r3, sl
 800d072:	f1c6 0620 	rsb	r6, r6, #32
 800d076:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d07a:	f000 f9f7 	bl	800d46c <__hi0bits>
 800d07e:	42b0      	cmp	r0, r6
 800d080:	dbe7      	blt.n	800d052 <__gethex+0x456>
 800d082:	e7f0      	b.n	800d066 <__gethex+0x46a>
 800d084:	08011420 	.word	0x08011420

0800d088 <L_shift>:
 800d088:	f1c2 0208 	rsb	r2, r2, #8
 800d08c:	0092      	lsls	r2, r2, #2
 800d08e:	b570      	push	{r4, r5, r6, lr}
 800d090:	f1c2 0620 	rsb	r6, r2, #32
 800d094:	6843      	ldr	r3, [r0, #4]
 800d096:	6804      	ldr	r4, [r0, #0]
 800d098:	fa03 f506 	lsl.w	r5, r3, r6
 800d09c:	432c      	orrs	r4, r5
 800d09e:	40d3      	lsrs	r3, r2
 800d0a0:	6004      	str	r4, [r0, #0]
 800d0a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d0a6:	4288      	cmp	r0, r1
 800d0a8:	d3f4      	bcc.n	800d094 <L_shift+0xc>
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}

0800d0ac <__match>:
 800d0ac:	b530      	push	{r4, r5, lr}
 800d0ae:	6803      	ldr	r3, [r0, #0]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0b6:	b914      	cbnz	r4, 800d0be <__match+0x12>
 800d0b8:	6003      	str	r3, [r0, #0]
 800d0ba:	2001      	movs	r0, #1
 800d0bc:	bd30      	pop	{r4, r5, pc}
 800d0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d0c6:	2d19      	cmp	r5, #25
 800d0c8:	bf98      	it	ls
 800d0ca:	3220      	addls	r2, #32
 800d0cc:	42a2      	cmp	r2, r4
 800d0ce:	d0f0      	beq.n	800d0b2 <__match+0x6>
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7f3      	b.n	800d0bc <__match+0x10>

0800d0d4 <__hexnan>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	680b      	ldr	r3, [r1, #0]
 800d0da:	115e      	asrs	r6, r3, #5
 800d0dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0e0:	f013 031f 	ands.w	r3, r3, #31
 800d0e4:	b087      	sub	sp, #28
 800d0e6:	bf18      	it	ne
 800d0e8:	3604      	addne	r6, #4
 800d0ea:	2500      	movs	r5, #0
 800d0ec:	1f37      	subs	r7, r6, #4
 800d0ee:	4690      	mov	r8, r2
 800d0f0:	6802      	ldr	r2, [r0, #0]
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0fa:	46b9      	mov	r9, r7
 800d0fc:	463c      	mov	r4, r7
 800d0fe:	9502      	str	r5, [sp, #8]
 800d100:	46ab      	mov	fp, r5
 800d102:	7851      	ldrb	r1, [r2, #1]
 800d104:	1c53      	adds	r3, r2, #1
 800d106:	9303      	str	r3, [sp, #12]
 800d108:	b341      	cbz	r1, 800d15c <__hexnan+0x88>
 800d10a:	4608      	mov	r0, r1
 800d10c:	9205      	str	r2, [sp, #20]
 800d10e:	9104      	str	r1, [sp, #16]
 800d110:	f7ff fd5e 	bl	800cbd0 <__hexdig_fun>
 800d114:	2800      	cmp	r0, #0
 800d116:	d14f      	bne.n	800d1b8 <__hexnan+0xe4>
 800d118:	9904      	ldr	r1, [sp, #16]
 800d11a:	9a05      	ldr	r2, [sp, #20]
 800d11c:	2920      	cmp	r1, #32
 800d11e:	d818      	bhi.n	800d152 <__hexnan+0x7e>
 800d120:	9b02      	ldr	r3, [sp, #8]
 800d122:	459b      	cmp	fp, r3
 800d124:	dd13      	ble.n	800d14e <__hexnan+0x7a>
 800d126:	454c      	cmp	r4, r9
 800d128:	d206      	bcs.n	800d138 <__hexnan+0x64>
 800d12a:	2d07      	cmp	r5, #7
 800d12c:	dc04      	bgt.n	800d138 <__hexnan+0x64>
 800d12e:	462a      	mov	r2, r5
 800d130:	4649      	mov	r1, r9
 800d132:	4620      	mov	r0, r4
 800d134:	f7ff ffa8 	bl	800d088 <L_shift>
 800d138:	4544      	cmp	r4, r8
 800d13a:	d950      	bls.n	800d1de <__hexnan+0x10a>
 800d13c:	2300      	movs	r3, #0
 800d13e:	f1a4 0904 	sub.w	r9, r4, #4
 800d142:	f844 3c04 	str.w	r3, [r4, #-4]
 800d146:	f8cd b008 	str.w	fp, [sp, #8]
 800d14a:	464c      	mov	r4, r9
 800d14c:	461d      	mov	r5, r3
 800d14e:	9a03      	ldr	r2, [sp, #12]
 800d150:	e7d7      	b.n	800d102 <__hexnan+0x2e>
 800d152:	2929      	cmp	r1, #41	; 0x29
 800d154:	d156      	bne.n	800d204 <__hexnan+0x130>
 800d156:	3202      	adds	r2, #2
 800d158:	f8ca 2000 	str.w	r2, [sl]
 800d15c:	f1bb 0f00 	cmp.w	fp, #0
 800d160:	d050      	beq.n	800d204 <__hexnan+0x130>
 800d162:	454c      	cmp	r4, r9
 800d164:	d206      	bcs.n	800d174 <__hexnan+0xa0>
 800d166:	2d07      	cmp	r5, #7
 800d168:	dc04      	bgt.n	800d174 <__hexnan+0xa0>
 800d16a:	462a      	mov	r2, r5
 800d16c:	4649      	mov	r1, r9
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff ff8a 	bl	800d088 <L_shift>
 800d174:	4544      	cmp	r4, r8
 800d176:	d934      	bls.n	800d1e2 <__hexnan+0x10e>
 800d178:	f1a8 0204 	sub.w	r2, r8, #4
 800d17c:	4623      	mov	r3, r4
 800d17e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d182:	f842 1f04 	str.w	r1, [r2, #4]!
 800d186:	429f      	cmp	r7, r3
 800d188:	d2f9      	bcs.n	800d17e <__hexnan+0xaa>
 800d18a:	1b3b      	subs	r3, r7, r4
 800d18c:	f023 0303 	bic.w	r3, r3, #3
 800d190:	3304      	adds	r3, #4
 800d192:	3401      	adds	r4, #1
 800d194:	3e03      	subs	r6, #3
 800d196:	42b4      	cmp	r4, r6
 800d198:	bf88      	it	hi
 800d19a:	2304      	movhi	r3, #4
 800d19c:	4443      	add	r3, r8
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f843 2b04 	str.w	r2, [r3], #4
 800d1a4:	429f      	cmp	r7, r3
 800d1a6:	d2fb      	bcs.n	800d1a0 <__hexnan+0xcc>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	b91b      	cbnz	r3, 800d1b4 <__hexnan+0xe0>
 800d1ac:	4547      	cmp	r7, r8
 800d1ae:	d127      	bne.n	800d200 <__hexnan+0x12c>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	2005      	movs	r0, #5
 800d1b6:	e026      	b.n	800d206 <__hexnan+0x132>
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	2d08      	cmp	r5, #8
 800d1bc:	f10b 0b01 	add.w	fp, fp, #1
 800d1c0:	dd06      	ble.n	800d1d0 <__hexnan+0xfc>
 800d1c2:	4544      	cmp	r4, r8
 800d1c4:	d9c3      	bls.n	800d14e <__hexnan+0x7a>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1cc:	2501      	movs	r5, #1
 800d1ce:	3c04      	subs	r4, #4
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	f000 000f 	and.w	r0, r0, #15
 800d1d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d1da:	6022      	str	r2, [r4, #0]
 800d1dc:	e7b7      	b.n	800d14e <__hexnan+0x7a>
 800d1de:	2508      	movs	r5, #8
 800d1e0:	e7b5      	b.n	800d14e <__hexnan+0x7a>
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0df      	beq.n	800d1a8 <__hexnan+0xd4>
 800d1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ec:	f1c3 0320 	rsb	r3, r3, #32
 800d1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1f8:	401a      	ands	r2, r3
 800d1fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d1fe:	e7d3      	b.n	800d1a8 <__hexnan+0xd4>
 800d200:	3f04      	subs	r7, #4
 800d202:	e7d1      	b.n	800d1a8 <__hexnan+0xd4>
 800d204:	2004      	movs	r0, #4
 800d206:	b007      	add	sp, #28
 800d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d20c <_localeconv_r>:
 800d20c:	4800      	ldr	r0, [pc, #0]	; (800d210 <_localeconv_r+0x4>)
 800d20e:	4770      	bx	lr
 800d210:	2000016c 	.word	0x2000016c

0800d214 <_lseek_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	; (800d234 <_lseek_r+0x20>)
 800d218:	4604      	mov	r4, r0
 800d21a:	4608      	mov	r0, r1
 800d21c:	4611      	mov	r1, r2
 800d21e:	2200      	movs	r2, #0
 800d220:	602a      	str	r2, [r5, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	f7f7 fed8 	bl	8004fd8 <_lseek>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_lseek_r+0x1e>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_lseek_r+0x1e>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	20001174 	.word	0x20001174

0800d238 <malloc>:
 800d238:	4b02      	ldr	r3, [pc, #8]	; (800d244 <malloc+0xc>)
 800d23a:	4601      	mov	r1, r0
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	f000 bd67 	b.w	800dd10 <_malloc_r>
 800d242:	bf00      	nop
 800d244:	20000014 	.word	0x20000014

0800d248 <__ascii_mbtowc>:
 800d248:	b082      	sub	sp, #8
 800d24a:	b901      	cbnz	r1, 800d24e <__ascii_mbtowc+0x6>
 800d24c:	a901      	add	r1, sp, #4
 800d24e:	b142      	cbz	r2, 800d262 <__ascii_mbtowc+0x1a>
 800d250:	b14b      	cbz	r3, 800d266 <__ascii_mbtowc+0x1e>
 800d252:	7813      	ldrb	r3, [r2, #0]
 800d254:	600b      	str	r3, [r1, #0]
 800d256:	7812      	ldrb	r2, [r2, #0]
 800d258:	1e10      	subs	r0, r2, #0
 800d25a:	bf18      	it	ne
 800d25c:	2001      	movne	r0, #1
 800d25e:	b002      	add	sp, #8
 800d260:	4770      	bx	lr
 800d262:	4610      	mov	r0, r2
 800d264:	e7fb      	b.n	800d25e <__ascii_mbtowc+0x16>
 800d266:	f06f 0001 	mvn.w	r0, #1
 800d26a:	e7f8      	b.n	800d25e <__ascii_mbtowc+0x16>

0800d26c <memcpy>:
 800d26c:	440a      	add	r2, r1
 800d26e:	4291      	cmp	r1, r2
 800d270:	f100 33ff 	add.w	r3, r0, #4294967295
 800d274:	d100      	bne.n	800d278 <memcpy+0xc>
 800d276:	4770      	bx	lr
 800d278:	b510      	push	{r4, lr}
 800d27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d282:	4291      	cmp	r1, r2
 800d284:	d1f9      	bne.n	800d27a <memcpy+0xe>
 800d286:	bd10      	pop	{r4, pc}

0800d288 <_Balloc>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	b976      	cbnz	r6, 800d2b0 <_Balloc+0x28>
 800d292:	2010      	movs	r0, #16
 800d294:	f7ff ffd0 	bl	800d238 <malloc>
 800d298:	4602      	mov	r2, r0
 800d29a:	6260      	str	r0, [r4, #36]	; 0x24
 800d29c:	b920      	cbnz	r0, 800d2a8 <_Balloc+0x20>
 800d29e:	4b18      	ldr	r3, [pc, #96]	; (800d300 <_Balloc+0x78>)
 800d2a0:	4818      	ldr	r0, [pc, #96]	; (800d304 <_Balloc+0x7c>)
 800d2a2:	2166      	movs	r1, #102	; 0x66
 800d2a4:	f001 fb5c 	bl	800e960 <__assert_func>
 800d2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2ac:	6006      	str	r6, [r0, #0]
 800d2ae:	60c6      	str	r6, [r0, #12]
 800d2b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2b2:	68f3      	ldr	r3, [r6, #12]
 800d2b4:	b183      	cbz	r3, 800d2d8 <_Balloc+0x50>
 800d2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2be:	b9b8      	cbnz	r0, 800d2f0 <_Balloc+0x68>
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d2c6:	1d72      	adds	r2, r6, #5
 800d2c8:	0092      	lsls	r2, r2, #2
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 fc9d 	bl	800dc0a <_calloc_r>
 800d2d0:	b160      	cbz	r0, 800d2ec <_Balloc+0x64>
 800d2d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2d6:	e00e      	b.n	800d2f6 <_Balloc+0x6e>
 800d2d8:	2221      	movs	r2, #33	; 0x21
 800d2da:	2104      	movs	r1, #4
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 fc94 	bl	800dc0a <_calloc_r>
 800d2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2e4:	60f0      	str	r0, [r6, #12]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e4      	bne.n	800d2b6 <_Balloc+0x2e>
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	6802      	ldr	r2, [r0, #0]
 800d2f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2fc:	e7f7      	b.n	800d2ee <_Balloc+0x66>
 800d2fe:	bf00      	nop
 800d300:	080113ae 	.word	0x080113ae
 800d304:	080114ac 	.word	0x080114ac

0800d308 <_Bfree>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d30c:	4605      	mov	r5, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	b976      	cbnz	r6, 800d330 <_Bfree+0x28>
 800d312:	2010      	movs	r0, #16
 800d314:	f7ff ff90 	bl	800d238 <malloc>
 800d318:	4602      	mov	r2, r0
 800d31a:	6268      	str	r0, [r5, #36]	; 0x24
 800d31c:	b920      	cbnz	r0, 800d328 <_Bfree+0x20>
 800d31e:	4b09      	ldr	r3, [pc, #36]	; (800d344 <_Bfree+0x3c>)
 800d320:	4809      	ldr	r0, [pc, #36]	; (800d348 <_Bfree+0x40>)
 800d322:	218a      	movs	r1, #138	; 0x8a
 800d324:	f001 fb1c 	bl	800e960 <__assert_func>
 800d328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d32c:	6006      	str	r6, [r0, #0]
 800d32e:	60c6      	str	r6, [r0, #12]
 800d330:	b13c      	cbz	r4, 800d342 <_Bfree+0x3a>
 800d332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d334:	6862      	ldr	r2, [r4, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d33c:	6021      	str	r1, [r4, #0]
 800d33e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	080113ae 	.word	0x080113ae
 800d348:	080114ac 	.word	0x080114ac

0800d34c <__multadd>:
 800d34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d350:	690d      	ldr	r5, [r1, #16]
 800d352:	4607      	mov	r7, r0
 800d354:	460c      	mov	r4, r1
 800d356:	461e      	mov	r6, r3
 800d358:	f101 0c14 	add.w	ip, r1, #20
 800d35c:	2000      	movs	r0, #0
 800d35e:	f8dc 3000 	ldr.w	r3, [ip]
 800d362:	b299      	uxth	r1, r3
 800d364:	fb02 6101 	mla	r1, r2, r1, r6
 800d368:	0c1e      	lsrs	r6, r3, #16
 800d36a:	0c0b      	lsrs	r3, r1, #16
 800d36c:	fb02 3306 	mla	r3, r2, r6, r3
 800d370:	b289      	uxth	r1, r1
 800d372:	3001      	adds	r0, #1
 800d374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d378:	4285      	cmp	r5, r0
 800d37a:	f84c 1b04 	str.w	r1, [ip], #4
 800d37e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d382:	dcec      	bgt.n	800d35e <__multadd+0x12>
 800d384:	b30e      	cbz	r6, 800d3ca <__multadd+0x7e>
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	42ab      	cmp	r3, r5
 800d38a:	dc19      	bgt.n	800d3c0 <__multadd+0x74>
 800d38c:	6861      	ldr	r1, [r4, #4]
 800d38e:	4638      	mov	r0, r7
 800d390:	3101      	adds	r1, #1
 800d392:	f7ff ff79 	bl	800d288 <_Balloc>
 800d396:	4680      	mov	r8, r0
 800d398:	b928      	cbnz	r0, 800d3a6 <__multadd+0x5a>
 800d39a:	4602      	mov	r2, r0
 800d39c:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <__multadd+0x84>)
 800d39e:	480d      	ldr	r0, [pc, #52]	; (800d3d4 <__multadd+0x88>)
 800d3a0:	21b5      	movs	r1, #181	; 0xb5
 800d3a2:	f001 fadd 	bl	800e960 <__assert_func>
 800d3a6:	6922      	ldr	r2, [r4, #16]
 800d3a8:	3202      	adds	r2, #2
 800d3aa:	f104 010c 	add.w	r1, r4, #12
 800d3ae:	0092      	lsls	r2, r2, #2
 800d3b0:	300c      	adds	r0, #12
 800d3b2:	f7ff ff5b 	bl	800d26c <memcpy>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7ff ffa5 	bl	800d308 <_Bfree>
 800d3be:	4644      	mov	r4, r8
 800d3c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	615e      	str	r6, [r3, #20]
 800d3c8:	6125      	str	r5, [r4, #16]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d0:	08011420 	.word	0x08011420
 800d3d4:	080114ac 	.word	0x080114ac

0800d3d8 <__s2b>:
 800d3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3dc:	460c      	mov	r4, r1
 800d3de:	4615      	mov	r5, r2
 800d3e0:	461f      	mov	r7, r3
 800d3e2:	2209      	movs	r2, #9
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	db09      	blt.n	800d408 <__s2b+0x30>
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7ff ff47 	bl	800d288 <_Balloc>
 800d3fa:	b940      	cbnz	r0, 800d40e <__s2b+0x36>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	4b19      	ldr	r3, [pc, #100]	; (800d464 <__s2b+0x8c>)
 800d400:	4819      	ldr	r0, [pc, #100]	; (800d468 <__s2b+0x90>)
 800d402:	21ce      	movs	r1, #206	; 0xce
 800d404:	f001 faac 	bl	800e960 <__assert_func>
 800d408:	0052      	lsls	r2, r2, #1
 800d40a:	3101      	adds	r1, #1
 800d40c:	e7f0      	b.n	800d3f0 <__s2b+0x18>
 800d40e:	9b08      	ldr	r3, [sp, #32]
 800d410:	6143      	str	r3, [r0, #20]
 800d412:	2d09      	cmp	r5, #9
 800d414:	f04f 0301 	mov.w	r3, #1
 800d418:	6103      	str	r3, [r0, #16]
 800d41a:	dd16      	ble.n	800d44a <__s2b+0x72>
 800d41c:	f104 0909 	add.w	r9, r4, #9
 800d420:	46c8      	mov	r8, r9
 800d422:	442c      	add	r4, r5
 800d424:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d428:	4601      	mov	r1, r0
 800d42a:	3b30      	subs	r3, #48	; 0x30
 800d42c:	220a      	movs	r2, #10
 800d42e:	4630      	mov	r0, r6
 800d430:	f7ff ff8c 	bl	800d34c <__multadd>
 800d434:	45a0      	cmp	r8, r4
 800d436:	d1f5      	bne.n	800d424 <__s2b+0x4c>
 800d438:	f1a5 0408 	sub.w	r4, r5, #8
 800d43c:	444c      	add	r4, r9
 800d43e:	1b2d      	subs	r5, r5, r4
 800d440:	1963      	adds	r3, r4, r5
 800d442:	42bb      	cmp	r3, r7
 800d444:	db04      	blt.n	800d450 <__s2b+0x78>
 800d446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44a:	340a      	adds	r4, #10
 800d44c:	2509      	movs	r5, #9
 800d44e:	e7f6      	b.n	800d43e <__s2b+0x66>
 800d450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d454:	4601      	mov	r1, r0
 800d456:	3b30      	subs	r3, #48	; 0x30
 800d458:	220a      	movs	r2, #10
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7ff ff76 	bl	800d34c <__multadd>
 800d460:	e7ee      	b.n	800d440 <__s2b+0x68>
 800d462:	bf00      	nop
 800d464:	08011420 	.word	0x08011420
 800d468:	080114ac 	.word	0x080114ac

0800d46c <__hi0bits>:
 800d46c:	0c03      	lsrs	r3, r0, #16
 800d46e:	041b      	lsls	r3, r3, #16
 800d470:	b9d3      	cbnz	r3, 800d4a8 <__hi0bits+0x3c>
 800d472:	0400      	lsls	r0, r0, #16
 800d474:	2310      	movs	r3, #16
 800d476:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d47a:	bf04      	itt	eq
 800d47c:	0200      	lsleq	r0, r0, #8
 800d47e:	3308      	addeq	r3, #8
 800d480:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d484:	bf04      	itt	eq
 800d486:	0100      	lsleq	r0, r0, #4
 800d488:	3304      	addeq	r3, #4
 800d48a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d48e:	bf04      	itt	eq
 800d490:	0080      	lsleq	r0, r0, #2
 800d492:	3302      	addeq	r3, #2
 800d494:	2800      	cmp	r0, #0
 800d496:	db05      	blt.n	800d4a4 <__hi0bits+0x38>
 800d498:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d49c:	f103 0301 	add.w	r3, r3, #1
 800d4a0:	bf08      	it	eq
 800d4a2:	2320      	moveq	r3, #32
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	4770      	bx	lr
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e7e4      	b.n	800d476 <__hi0bits+0xa>

0800d4ac <__lo0bits>:
 800d4ac:	6803      	ldr	r3, [r0, #0]
 800d4ae:	f013 0207 	ands.w	r2, r3, #7
 800d4b2:	4601      	mov	r1, r0
 800d4b4:	d00b      	beq.n	800d4ce <__lo0bits+0x22>
 800d4b6:	07da      	lsls	r2, r3, #31
 800d4b8:	d423      	bmi.n	800d502 <__lo0bits+0x56>
 800d4ba:	0798      	lsls	r0, r3, #30
 800d4bc:	bf49      	itett	mi
 800d4be:	085b      	lsrmi	r3, r3, #1
 800d4c0:	089b      	lsrpl	r3, r3, #2
 800d4c2:	2001      	movmi	r0, #1
 800d4c4:	600b      	strmi	r3, [r1, #0]
 800d4c6:	bf5c      	itt	pl
 800d4c8:	600b      	strpl	r3, [r1, #0]
 800d4ca:	2002      	movpl	r0, #2
 800d4cc:	4770      	bx	lr
 800d4ce:	b298      	uxth	r0, r3
 800d4d0:	b9a8      	cbnz	r0, 800d4fe <__lo0bits+0x52>
 800d4d2:	0c1b      	lsrs	r3, r3, #16
 800d4d4:	2010      	movs	r0, #16
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	b90a      	cbnz	r2, 800d4de <__lo0bits+0x32>
 800d4da:	3008      	adds	r0, #8
 800d4dc:	0a1b      	lsrs	r3, r3, #8
 800d4de:	071a      	lsls	r2, r3, #28
 800d4e0:	bf04      	itt	eq
 800d4e2:	091b      	lsreq	r3, r3, #4
 800d4e4:	3004      	addeq	r0, #4
 800d4e6:	079a      	lsls	r2, r3, #30
 800d4e8:	bf04      	itt	eq
 800d4ea:	089b      	lsreq	r3, r3, #2
 800d4ec:	3002      	addeq	r0, #2
 800d4ee:	07da      	lsls	r2, r3, #31
 800d4f0:	d403      	bmi.n	800d4fa <__lo0bits+0x4e>
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	f100 0001 	add.w	r0, r0, #1
 800d4f8:	d005      	beq.n	800d506 <__lo0bits+0x5a>
 800d4fa:	600b      	str	r3, [r1, #0]
 800d4fc:	4770      	bx	lr
 800d4fe:	4610      	mov	r0, r2
 800d500:	e7e9      	b.n	800d4d6 <__lo0bits+0x2a>
 800d502:	2000      	movs	r0, #0
 800d504:	4770      	bx	lr
 800d506:	2020      	movs	r0, #32
 800d508:	4770      	bx	lr
	...

0800d50c <__i2b>:
 800d50c:	b510      	push	{r4, lr}
 800d50e:	460c      	mov	r4, r1
 800d510:	2101      	movs	r1, #1
 800d512:	f7ff feb9 	bl	800d288 <_Balloc>
 800d516:	4602      	mov	r2, r0
 800d518:	b928      	cbnz	r0, 800d526 <__i2b+0x1a>
 800d51a:	4b05      	ldr	r3, [pc, #20]	; (800d530 <__i2b+0x24>)
 800d51c:	4805      	ldr	r0, [pc, #20]	; (800d534 <__i2b+0x28>)
 800d51e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d522:	f001 fa1d 	bl	800e960 <__assert_func>
 800d526:	2301      	movs	r3, #1
 800d528:	6144      	str	r4, [r0, #20]
 800d52a:	6103      	str	r3, [r0, #16]
 800d52c:	bd10      	pop	{r4, pc}
 800d52e:	bf00      	nop
 800d530:	08011420 	.word	0x08011420
 800d534:	080114ac 	.word	0x080114ac

0800d538 <__multiply>:
 800d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53c:	4691      	mov	r9, r2
 800d53e:	690a      	ldr	r2, [r1, #16]
 800d540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d544:	429a      	cmp	r2, r3
 800d546:	bfb8      	it	lt
 800d548:	460b      	movlt	r3, r1
 800d54a:	460c      	mov	r4, r1
 800d54c:	bfbc      	itt	lt
 800d54e:	464c      	movlt	r4, r9
 800d550:	4699      	movlt	r9, r3
 800d552:	6927      	ldr	r7, [r4, #16]
 800d554:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d558:	68a3      	ldr	r3, [r4, #8]
 800d55a:	6861      	ldr	r1, [r4, #4]
 800d55c:	eb07 060a 	add.w	r6, r7, sl
 800d560:	42b3      	cmp	r3, r6
 800d562:	b085      	sub	sp, #20
 800d564:	bfb8      	it	lt
 800d566:	3101      	addlt	r1, #1
 800d568:	f7ff fe8e 	bl	800d288 <_Balloc>
 800d56c:	b930      	cbnz	r0, 800d57c <__multiply+0x44>
 800d56e:	4602      	mov	r2, r0
 800d570:	4b44      	ldr	r3, [pc, #272]	; (800d684 <__multiply+0x14c>)
 800d572:	4845      	ldr	r0, [pc, #276]	; (800d688 <__multiply+0x150>)
 800d574:	f240 115d 	movw	r1, #349	; 0x15d
 800d578:	f001 f9f2 	bl	800e960 <__assert_func>
 800d57c:	f100 0514 	add.w	r5, r0, #20
 800d580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d584:	462b      	mov	r3, r5
 800d586:	2200      	movs	r2, #0
 800d588:	4543      	cmp	r3, r8
 800d58a:	d321      	bcc.n	800d5d0 <__multiply+0x98>
 800d58c:	f104 0314 	add.w	r3, r4, #20
 800d590:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d594:	f109 0314 	add.w	r3, r9, #20
 800d598:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d59c:	9202      	str	r2, [sp, #8]
 800d59e:	1b3a      	subs	r2, r7, r4
 800d5a0:	3a15      	subs	r2, #21
 800d5a2:	f022 0203 	bic.w	r2, r2, #3
 800d5a6:	3204      	adds	r2, #4
 800d5a8:	f104 0115 	add.w	r1, r4, #21
 800d5ac:	428f      	cmp	r7, r1
 800d5ae:	bf38      	it	cc
 800d5b0:	2204      	movcc	r2, #4
 800d5b2:	9201      	str	r2, [sp, #4]
 800d5b4:	9a02      	ldr	r2, [sp, #8]
 800d5b6:	9303      	str	r3, [sp, #12]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d80c      	bhi.n	800d5d6 <__multiply+0x9e>
 800d5bc:	2e00      	cmp	r6, #0
 800d5be:	dd03      	ble.n	800d5c8 <__multiply+0x90>
 800d5c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d05a      	beq.n	800d67e <__multiply+0x146>
 800d5c8:	6106      	str	r6, [r0, #16]
 800d5ca:	b005      	add	sp, #20
 800d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d0:	f843 2b04 	str.w	r2, [r3], #4
 800d5d4:	e7d8      	b.n	800d588 <__multiply+0x50>
 800d5d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5da:	f1ba 0f00 	cmp.w	sl, #0
 800d5de:	d024      	beq.n	800d62a <__multiply+0xf2>
 800d5e0:	f104 0e14 	add.w	lr, r4, #20
 800d5e4:	46a9      	mov	r9, r5
 800d5e6:	f04f 0c00 	mov.w	ip, #0
 800d5ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5ee:	f8d9 1000 	ldr.w	r1, [r9]
 800d5f2:	fa1f fb82 	uxth.w	fp, r2
 800d5f6:	b289      	uxth	r1, r1
 800d5f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d600:	f8d9 2000 	ldr.w	r2, [r9]
 800d604:	4461      	add	r1, ip
 800d606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d60a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d60e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d612:	b289      	uxth	r1, r1
 800d614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d618:	4577      	cmp	r7, lr
 800d61a:	f849 1b04 	str.w	r1, [r9], #4
 800d61e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d622:	d8e2      	bhi.n	800d5ea <__multiply+0xb2>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	f845 c002 	str.w	ip, [r5, r2]
 800d62a:	9a03      	ldr	r2, [sp, #12]
 800d62c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d630:	3304      	adds	r3, #4
 800d632:	f1b9 0f00 	cmp.w	r9, #0
 800d636:	d020      	beq.n	800d67a <__multiply+0x142>
 800d638:	6829      	ldr	r1, [r5, #0]
 800d63a:	f104 0c14 	add.w	ip, r4, #20
 800d63e:	46ae      	mov	lr, r5
 800d640:	f04f 0a00 	mov.w	sl, #0
 800d644:	f8bc b000 	ldrh.w	fp, [ip]
 800d648:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d64c:	fb09 220b 	mla	r2, r9, fp, r2
 800d650:	4492      	add	sl, r2
 800d652:	b289      	uxth	r1, r1
 800d654:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d658:	f84e 1b04 	str.w	r1, [lr], #4
 800d65c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d660:	f8be 1000 	ldrh.w	r1, [lr]
 800d664:	0c12      	lsrs	r2, r2, #16
 800d666:	fb09 1102 	mla	r1, r9, r2, r1
 800d66a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d66e:	4567      	cmp	r7, ip
 800d670:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d674:	d8e6      	bhi.n	800d644 <__multiply+0x10c>
 800d676:	9a01      	ldr	r2, [sp, #4]
 800d678:	50a9      	str	r1, [r5, r2]
 800d67a:	3504      	adds	r5, #4
 800d67c:	e79a      	b.n	800d5b4 <__multiply+0x7c>
 800d67e:	3e01      	subs	r6, #1
 800d680:	e79c      	b.n	800d5bc <__multiply+0x84>
 800d682:	bf00      	nop
 800d684:	08011420 	.word	0x08011420
 800d688:	080114ac 	.word	0x080114ac

0800d68c <__pow5mult>:
 800d68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d690:	4615      	mov	r5, r2
 800d692:	f012 0203 	ands.w	r2, r2, #3
 800d696:	4606      	mov	r6, r0
 800d698:	460f      	mov	r7, r1
 800d69a:	d007      	beq.n	800d6ac <__pow5mult+0x20>
 800d69c:	4c25      	ldr	r4, [pc, #148]	; (800d734 <__pow5mult+0xa8>)
 800d69e:	3a01      	subs	r2, #1
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6a6:	f7ff fe51 	bl	800d34c <__multadd>
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	10ad      	asrs	r5, r5, #2
 800d6ae:	d03d      	beq.n	800d72c <__pow5mult+0xa0>
 800d6b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6b2:	b97c      	cbnz	r4, 800d6d4 <__pow5mult+0x48>
 800d6b4:	2010      	movs	r0, #16
 800d6b6:	f7ff fdbf 	bl	800d238 <malloc>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	6270      	str	r0, [r6, #36]	; 0x24
 800d6be:	b928      	cbnz	r0, 800d6cc <__pow5mult+0x40>
 800d6c0:	4b1d      	ldr	r3, [pc, #116]	; (800d738 <__pow5mult+0xac>)
 800d6c2:	481e      	ldr	r0, [pc, #120]	; (800d73c <__pow5mult+0xb0>)
 800d6c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d6c8:	f001 f94a 	bl	800e960 <__assert_func>
 800d6cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6d0:	6004      	str	r4, [r0, #0]
 800d6d2:	60c4      	str	r4, [r0, #12]
 800d6d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6dc:	b94c      	cbnz	r4, 800d6f2 <__pow5mult+0x66>
 800d6de:	f240 2171 	movw	r1, #625	; 0x271
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7ff ff12 	bl	800d50c <__i2b>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	6003      	str	r3, [r0, #0]
 800d6f2:	f04f 0900 	mov.w	r9, #0
 800d6f6:	07eb      	lsls	r3, r5, #31
 800d6f8:	d50a      	bpl.n	800d710 <__pow5mult+0x84>
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7ff ff1a 	bl	800d538 <__multiply>
 800d704:	4639      	mov	r1, r7
 800d706:	4680      	mov	r8, r0
 800d708:	4630      	mov	r0, r6
 800d70a:	f7ff fdfd 	bl	800d308 <_Bfree>
 800d70e:	4647      	mov	r7, r8
 800d710:	106d      	asrs	r5, r5, #1
 800d712:	d00b      	beq.n	800d72c <__pow5mult+0xa0>
 800d714:	6820      	ldr	r0, [r4, #0]
 800d716:	b938      	cbnz	r0, 800d728 <__pow5mult+0x9c>
 800d718:	4622      	mov	r2, r4
 800d71a:	4621      	mov	r1, r4
 800d71c:	4630      	mov	r0, r6
 800d71e:	f7ff ff0b 	bl	800d538 <__multiply>
 800d722:	6020      	str	r0, [r4, #0]
 800d724:	f8c0 9000 	str.w	r9, [r0]
 800d728:	4604      	mov	r4, r0
 800d72a:	e7e4      	b.n	800d6f6 <__pow5mult+0x6a>
 800d72c:	4638      	mov	r0, r7
 800d72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d732:	bf00      	nop
 800d734:	080115f8 	.word	0x080115f8
 800d738:	080113ae 	.word	0x080113ae
 800d73c:	080114ac 	.word	0x080114ac

0800d740 <__lshift>:
 800d740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	460c      	mov	r4, r1
 800d746:	6849      	ldr	r1, [r1, #4]
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	4607      	mov	r7, r0
 800d752:	4691      	mov	r9, r2
 800d754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d758:	f108 0601 	add.w	r6, r8, #1
 800d75c:	42b3      	cmp	r3, r6
 800d75e:	db0b      	blt.n	800d778 <__lshift+0x38>
 800d760:	4638      	mov	r0, r7
 800d762:	f7ff fd91 	bl	800d288 <_Balloc>
 800d766:	4605      	mov	r5, r0
 800d768:	b948      	cbnz	r0, 800d77e <__lshift+0x3e>
 800d76a:	4602      	mov	r2, r0
 800d76c:	4b2a      	ldr	r3, [pc, #168]	; (800d818 <__lshift+0xd8>)
 800d76e:	482b      	ldr	r0, [pc, #172]	; (800d81c <__lshift+0xdc>)
 800d770:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d774:	f001 f8f4 	bl	800e960 <__assert_func>
 800d778:	3101      	adds	r1, #1
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	e7ee      	b.n	800d75c <__lshift+0x1c>
 800d77e:	2300      	movs	r3, #0
 800d780:	f100 0114 	add.w	r1, r0, #20
 800d784:	f100 0210 	add.w	r2, r0, #16
 800d788:	4618      	mov	r0, r3
 800d78a:	4553      	cmp	r3, sl
 800d78c:	db37      	blt.n	800d7fe <__lshift+0xbe>
 800d78e:	6920      	ldr	r0, [r4, #16]
 800d790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d794:	f104 0314 	add.w	r3, r4, #20
 800d798:	f019 091f 	ands.w	r9, r9, #31
 800d79c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7a4:	d02f      	beq.n	800d806 <__lshift+0xc6>
 800d7a6:	f1c9 0e20 	rsb	lr, r9, #32
 800d7aa:	468a      	mov	sl, r1
 800d7ac:	f04f 0c00 	mov.w	ip, #0
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	fa02 f209 	lsl.w	r2, r2, r9
 800d7b6:	ea42 020c 	orr.w	r2, r2, ip
 800d7ba:	f84a 2b04 	str.w	r2, [sl], #4
 800d7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7c2:	4298      	cmp	r0, r3
 800d7c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d7c8:	d8f2      	bhi.n	800d7b0 <__lshift+0x70>
 800d7ca:	1b03      	subs	r3, r0, r4
 800d7cc:	3b15      	subs	r3, #21
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	f104 0215 	add.w	r2, r4, #21
 800d7d8:	4290      	cmp	r0, r2
 800d7da:	bf38      	it	cc
 800d7dc:	2304      	movcc	r3, #4
 800d7de:	f841 c003 	str.w	ip, [r1, r3]
 800d7e2:	f1bc 0f00 	cmp.w	ip, #0
 800d7e6:	d001      	beq.n	800d7ec <__lshift+0xac>
 800d7e8:	f108 0602 	add.w	r6, r8, #2
 800d7ec:	3e01      	subs	r6, #1
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	612e      	str	r6, [r5, #16]
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	f7ff fd88 	bl	800d308 <_Bfree>
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800d802:	3301      	adds	r3, #1
 800d804:	e7c1      	b.n	800d78a <__lshift+0x4a>
 800d806:	3904      	subs	r1, #4
 800d808:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d810:	4298      	cmp	r0, r3
 800d812:	d8f9      	bhi.n	800d808 <__lshift+0xc8>
 800d814:	e7ea      	b.n	800d7ec <__lshift+0xac>
 800d816:	bf00      	nop
 800d818:	08011420 	.word	0x08011420
 800d81c:	080114ac 	.word	0x080114ac

0800d820 <__mcmp>:
 800d820:	b530      	push	{r4, r5, lr}
 800d822:	6902      	ldr	r2, [r0, #16]
 800d824:	690c      	ldr	r4, [r1, #16]
 800d826:	1b12      	subs	r2, r2, r4
 800d828:	d10e      	bne.n	800d848 <__mcmp+0x28>
 800d82a:	f100 0314 	add.w	r3, r0, #20
 800d82e:	3114      	adds	r1, #20
 800d830:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d834:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d838:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d83c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d840:	42a5      	cmp	r5, r4
 800d842:	d003      	beq.n	800d84c <__mcmp+0x2c>
 800d844:	d305      	bcc.n	800d852 <__mcmp+0x32>
 800d846:	2201      	movs	r2, #1
 800d848:	4610      	mov	r0, r2
 800d84a:	bd30      	pop	{r4, r5, pc}
 800d84c:	4283      	cmp	r3, r0
 800d84e:	d3f3      	bcc.n	800d838 <__mcmp+0x18>
 800d850:	e7fa      	b.n	800d848 <__mcmp+0x28>
 800d852:	f04f 32ff 	mov.w	r2, #4294967295
 800d856:	e7f7      	b.n	800d848 <__mcmp+0x28>

0800d858 <__mdiff>:
 800d858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	460c      	mov	r4, r1
 800d85e:	4606      	mov	r6, r0
 800d860:	4611      	mov	r1, r2
 800d862:	4620      	mov	r0, r4
 800d864:	4690      	mov	r8, r2
 800d866:	f7ff ffdb 	bl	800d820 <__mcmp>
 800d86a:	1e05      	subs	r5, r0, #0
 800d86c:	d110      	bne.n	800d890 <__mdiff+0x38>
 800d86e:	4629      	mov	r1, r5
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff fd09 	bl	800d288 <_Balloc>
 800d876:	b930      	cbnz	r0, 800d886 <__mdiff+0x2e>
 800d878:	4b3a      	ldr	r3, [pc, #232]	; (800d964 <__mdiff+0x10c>)
 800d87a:	4602      	mov	r2, r0
 800d87c:	f240 2132 	movw	r1, #562	; 0x232
 800d880:	4839      	ldr	r0, [pc, #228]	; (800d968 <__mdiff+0x110>)
 800d882:	f001 f86d 	bl	800e960 <__assert_func>
 800d886:	2301      	movs	r3, #1
 800d888:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d890:	bfa4      	itt	ge
 800d892:	4643      	movge	r3, r8
 800d894:	46a0      	movge	r8, r4
 800d896:	4630      	mov	r0, r6
 800d898:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d89c:	bfa6      	itte	ge
 800d89e:	461c      	movge	r4, r3
 800d8a0:	2500      	movge	r5, #0
 800d8a2:	2501      	movlt	r5, #1
 800d8a4:	f7ff fcf0 	bl	800d288 <_Balloc>
 800d8a8:	b920      	cbnz	r0, 800d8b4 <__mdiff+0x5c>
 800d8aa:	4b2e      	ldr	r3, [pc, #184]	; (800d964 <__mdiff+0x10c>)
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d8b2:	e7e5      	b.n	800d880 <__mdiff+0x28>
 800d8b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8b8:	6926      	ldr	r6, [r4, #16]
 800d8ba:	60c5      	str	r5, [r0, #12]
 800d8bc:	f104 0914 	add.w	r9, r4, #20
 800d8c0:	f108 0514 	add.w	r5, r8, #20
 800d8c4:	f100 0e14 	add.w	lr, r0, #20
 800d8c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d8cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8d0:	f108 0210 	add.w	r2, r8, #16
 800d8d4:	46f2      	mov	sl, lr
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8e0:	fa1f f883 	uxth.w	r8, r3
 800d8e4:	fa11 f18b 	uxtah	r1, r1, fp
 800d8e8:	0c1b      	lsrs	r3, r3, #16
 800d8ea:	eba1 0808 	sub.w	r8, r1, r8
 800d8ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8f6:	fa1f f888 	uxth.w	r8, r8
 800d8fa:	1419      	asrs	r1, r3, #16
 800d8fc:	454e      	cmp	r6, r9
 800d8fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d902:	f84a 3b04 	str.w	r3, [sl], #4
 800d906:	d8e7      	bhi.n	800d8d8 <__mdiff+0x80>
 800d908:	1b33      	subs	r3, r6, r4
 800d90a:	3b15      	subs	r3, #21
 800d90c:	f023 0303 	bic.w	r3, r3, #3
 800d910:	3304      	adds	r3, #4
 800d912:	3415      	adds	r4, #21
 800d914:	42a6      	cmp	r6, r4
 800d916:	bf38      	it	cc
 800d918:	2304      	movcc	r3, #4
 800d91a:	441d      	add	r5, r3
 800d91c:	4473      	add	r3, lr
 800d91e:	469e      	mov	lr, r3
 800d920:	462e      	mov	r6, r5
 800d922:	4566      	cmp	r6, ip
 800d924:	d30e      	bcc.n	800d944 <__mdiff+0xec>
 800d926:	f10c 0203 	add.w	r2, ip, #3
 800d92a:	1b52      	subs	r2, r2, r5
 800d92c:	f022 0203 	bic.w	r2, r2, #3
 800d930:	3d03      	subs	r5, #3
 800d932:	45ac      	cmp	ip, r5
 800d934:	bf38      	it	cc
 800d936:	2200      	movcc	r2, #0
 800d938:	441a      	add	r2, r3
 800d93a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d93e:	b17b      	cbz	r3, 800d960 <__mdiff+0x108>
 800d940:	6107      	str	r7, [r0, #16]
 800d942:	e7a3      	b.n	800d88c <__mdiff+0x34>
 800d944:	f856 8b04 	ldr.w	r8, [r6], #4
 800d948:	fa11 f288 	uxtah	r2, r1, r8
 800d94c:	1414      	asrs	r4, r2, #16
 800d94e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d952:	b292      	uxth	r2, r2
 800d954:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d958:	f84e 2b04 	str.w	r2, [lr], #4
 800d95c:	1421      	asrs	r1, r4, #16
 800d95e:	e7e0      	b.n	800d922 <__mdiff+0xca>
 800d960:	3f01      	subs	r7, #1
 800d962:	e7ea      	b.n	800d93a <__mdiff+0xe2>
 800d964:	08011420 	.word	0x08011420
 800d968:	080114ac 	.word	0x080114ac

0800d96c <__ulp>:
 800d96c:	b082      	sub	sp, #8
 800d96e:	ed8d 0b00 	vstr	d0, [sp]
 800d972:	9b01      	ldr	r3, [sp, #4]
 800d974:	4912      	ldr	r1, [pc, #72]	; (800d9c0 <__ulp+0x54>)
 800d976:	4019      	ands	r1, r3
 800d978:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d97c:	2900      	cmp	r1, #0
 800d97e:	dd05      	ble.n	800d98c <__ulp+0x20>
 800d980:	2200      	movs	r2, #0
 800d982:	460b      	mov	r3, r1
 800d984:	ec43 2b10 	vmov	d0, r2, r3
 800d988:	b002      	add	sp, #8
 800d98a:	4770      	bx	lr
 800d98c:	4249      	negs	r1, r1
 800d98e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d992:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	f04f 0300 	mov.w	r3, #0
 800d99e:	da04      	bge.n	800d9aa <__ulp+0x3e>
 800d9a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d9a4:	fa41 f300 	asr.w	r3, r1, r0
 800d9a8:	e7ec      	b.n	800d984 <__ulp+0x18>
 800d9aa:	f1a0 0114 	sub.w	r1, r0, #20
 800d9ae:	291e      	cmp	r1, #30
 800d9b0:	bfda      	itte	le
 800d9b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d9b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800d9ba:	2101      	movgt	r1, #1
 800d9bc:	460a      	mov	r2, r1
 800d9be:	e7e1      	b.n	800d984 <__ulp+0x18>
 800d9c0:	7ff00000 	.word	0x7ff00000

0800d9c4 <__b2d>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	6905      	ldr	r5, [r0, #16]
 800d9c8:	f100 0714 	add.w	r7, r0, #20
 800d9cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d9d0:	1f2e      	subs	r6, r5, #4
 800d9d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff fd48 	bl	800d46c <__hi0bits>
 800d9dc:	f1c0 0320 	rsb	r3, r0, #32
 800d9e0:	280a      	cmp	r0, #10
 800d9e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800da60 <__b2d+0x9c>
 800d9e6:	600b      	str	r3, [r1, #0]
 800d9e8:	dc14      	bgt.n	800da14 <__b2d+0x50>
 800d9ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800d9ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800d9f2:	42b7      	cmp	r7, r6
 800d9f4:	ea41 030c 	orr.w	r3, r1, ip
 800d9f8:	bf34      	ite	cc
 800d9fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d9fe:	2100      	movcs	r1, #0
 800da00:	3015      	adds	r0, #21
 800da02:	fa04 f000 	lsl.w	r0, r4, r0
 800da06:	fa21 f10e 	lsr.w	r1, r1, lr
 800da0a:	ea40 0201 	orr.w	r2, r0, r1
 800da0e:	ec43 2b10 	vmov	d0, r2, r3
 800da12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da14:	42b7      	cmp	r7, r6
 800da16:	bf3a      	itte	cc
 800da18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da1c:	f1a5 0608 	subcc.w	r6, r5, #8
 800da20:	2100      	movcs	r1, #0
 800da22:	380b      	subs	r0, #11
 800da24:	d017      	beq.n	800da56 <__b2d+0x92>
 800da26:	f1c0 0c20 	rsb	ip, r0, #32
 800da2a:	fa04 f500 	lsl.w	r5, r4, r0
 800da2e:	42be      	cmp	r6, r7
 800da30:	fa21 f40c 	lsr.w	r4, r1, ip
 800da34:	ea45 0504 	orr.w	r5, r5, r4
 800da38:	bf8c      	ite	hi
 800da3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800da3e:	2400      	movls	r4, #0
 800da40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800da44:	fa01 f000 	lsl.w	r0, r1, r0
 800da48:	fa24 f40c 	lsr.w	r4, r4, ip
 800da4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800da50:	ea40 0204 	orr.w	r2, r0, r4
 800da54:	e7db      	b.n	800da0e <__b2d+0x4a>
 800da56:	ea44 030c 	orr.w	r3, r4, ip
 800da5a:	460a      	mov	r2, r1
 800da5c:	e7d7      	b.n	800da0e <__b2d+0x4a>
 800da5e:	bf00      	nop
 800da60:	3ff00000 	.word	0x3ff00000

0800da64 <__d2b>:
 800da64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da68:	4689      	mov	r9, r1
 800da6a:	2101      	movs	r1, #1
 800da6c:	ec57 6b10 	vmov	r6, r7, d0
 800da70:	4690      	mov	r8, r2
 800da72:	f7ff fc09 	bl	800d288 <_Balloc>
 800da76:	4604      	mov	r4, r0
 800da78:	b930      	cbnz	r0, 800da88 <__d2b+0x24>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4b25      	ldr	r3, [pc, #148]	; (800db14 <__d2b+0xb0>)
 800da7e:	4826      	ldr	r0, [pc, #152]	; (800db18 <__d2b+0xb4>)
 800da80:	f240 310a 	movw	r1, #778	; 0x30a
 800da84:	f000 ff6c 	bl	800e960 <__assert_func>
 800da88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da90:	bb35      	cbnz	r5, 800dae0 <__d2b+0x7c>
 800da92:	2e00      	cmp	r6, #0
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	d028      	beq.n	800daea <__d2b+0x86>
 800da98:	4668      	mov	r0, sp
 800da9a:	9600      	str	r6, [sp, #0]
 800da9c:	f7ff fd06 	bl	800d4ac <__lo0bits>
 800daa0:	9900      	ldr	r1, [sp, #0]
 800daa2:	b300      	cbz	r0, 800dae6 <__d2b+0x82>
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	f1c0 0320 	rsb	r3, r0, #32
 800daaa:	fa02 f303 	lsl.w	r3, r2, r3
 800daae:	430b      	orrs	r3, r1
 800dab0:	40c2      	lsrs	r2, r0
 800dab2:	6163      	str	r3, [r4, #20]
 800dab4:	9201      	str	r2, [sp, #4]
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	61a3      	str	r3, [r4, #24]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bf14      	ite	ne
 800dabe:	2202      	movne	r2, #2
 800dac0:	2201      	moveq	r2, #1
 800dac2:	6122      	str	r2, [r4, #16]
 800dac4:	b1d5      	cbz	r5, 800dafc <__d2b+0x98>
 800dac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800daca:	4405      	add	r5, r0
 800dacc:	f8c9 5000 	str.w	r5, [r9]
 800dad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dad4:	f8c8 0000 	str.w	r0, [r8]
 800dad8:	4620      	mov	r0, r4
 800dada:	b003      	add	sp, #12
 800dadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dae4:	e7d5      	b.n	800da92 <__d2b+0x2e>
 800dae6:	6161      	str	r1, [r4, #20]
 800dae8:	e7e5      	b.n	800dab6 <__d2b+0x52>
 800daea:	a801      	add	r0, sp, #4
 800daec:	f7ff fcde 	bl	800d4ac <__lo0bits>
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	6163      	str	r3, [r4, #20]
 800daf4:	2201      	movs	r2, #1
 800daf6:	6122      	str	r2, [r4, #16]
 800daf8:	3020      	adds	r0, #32
 800dafa:	e7e3      	b.n	800dac4 <__d2b+0x60>
 800dafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db04:	f8c9 0000 	str.w	r0, [r9]
 800db08:	6918      	ldr	r0, [r3, #16]
 800db0a:	f7ff fcaf 	bl	800d46c <__hi0bits>
 800db0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db12:	e7df      	b.n	800dad4 <__d2b+0x70>
 800db14:	08011420 	.word	0x08011420
 800db18:	080114ac 	.word	0x080114ac

0800db1c <__ratio>:
 800db1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	4688      	mov	r8, r1
 800db22:	4669      	mov	r1, sp
 800db24:	4681      	mov	r9, r0
 800db26:	f7ff ff4d 	bl	800d9c4 <__b2d>
 800db2a:	a901      	add	r1, sp, #4
 800db2c:	4640      	mov	r0, r8
 800db2e:	ec55 4b10 	vmov	r4, r5, d0
 800db32:	f7ff ff47 	bl	800d9c4 <__b2d>
 800db36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800db3e:	eba3 0c02 	sub.w	ip, r3, r2
 800db42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800db46:	1a9b      	subs	r3, r3, r2
 800db48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800db4c:	ec51 0b10 	vmov	r0, r1, d0
 800db50:	2b00      	cmp	r3, #0
 800db52:	bfd6      	itet	le
 800db54:	460a      	movle	r2, r1
 800db56:	462a      	movgt	r2, r5
 800db58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db5c:	468b      	mov	fp, r1
 800db5e:	462f      	mov	r7, r5
 800db60:	bfd4      	ite	le
 800db62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800db66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db6a:	4620      	mov	r0, r4
 800db6c:	ee10 2a10 	vmov	r2, s0
 800db70:	465b      	mov	r3, fp
 800db72:	4639      	mov	r1, r7
 800db74:	f7f2 fe8a 	bl	800088c <__aeabi_ddiv>
 800db78:	ec41 0b10 	vmov	d0, r0, r1
 800db7c:	b003      	add	sp, #12
 800db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db82 <__copybits>:
 800db82:	3901      	subs	r1, #1
 800db84:	b570      	push	{r4, r5, r6, lr}
 800db86:	1149      	asrs	r1, r1, #5
 800db88:	6914      	ldr	r4, [r2, #16]
 800db8a:	3101      	adds	r1, #1
 800db8c:	f102 0314 	add.w	r3, r2, #20
 800db90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db98:	1f05      	subs	r5, r0, #4
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	d30c      	bcc.n	800dbb8 <__copybits+0x36>
 800db9e:	1aa3      	subs	r3, r4, r2
 800dba0:	3b11      	subs	r3, #17
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	3211      	adds	r2, #17
 800dba8:	42a2      	cmp	r2, r4
 800dbaa:	bf88      	it	hi
 800dbac:	2300      	movhi	r3, #0
 800dbae:	4418      	add	r0, r3
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4288      	cmp	r0, r1
 800dbb4:	d305      	bcc.n	800dbc2 <__copybits+0x40>
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
 800dbb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800dbbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800dbc0:	e7eb      	b.n	800db9a <__copybits+0x18>
 800dbc2:	f840 3b04 	str.w	r3, [r0], #4
 800dbc6:	e7f4      	b.n	800dbb2 <__copybits+0x30>

0800dbc8 <__any_on>:
 800dbc8:	f100 0214 	add.w	r2, r0, #20
 800dbcc:	6900      	ldr	r0, [r0, #16]
 800dbce:	114b      	asrs	r3, r1, #5
 800dbd0:	4298      	cmp	r0, r3
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	db11      	blt.n	800dbfa <__any_on+0x32>
 800dbd6:	dd0a      	ble.n	800dbee <__any_on+0x26>
 800dbd8:	f011 011f 	ands.w	r1, r1, #31
 800dbdc:	d007      	beq.n	800dbee <__any_on+0x26>
 800dbde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dbe2:	fa24 f001 	lsr.w	r0, r4, r1
 800dbe6:	fa00 f101 	lsl.w	r1, r0, r1
 800dbea:	428c      	cmp	r4, r1
 800dbec:	d10b      	bne.n	800dc06 <__any_on+0x3e>
 800dbee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d803      	bhi.n	800dbfe <__any_on+0x36>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	e7f7      	b.n	800dbee <__any_on+0x26>
 800dbfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d0f5      	beq.n	800dbf2 <__any_on+0x2a>
 800dc06:	2001      	movs	r0, #1
 800dc08:	e7f6      	b.n	800dbf8 <__any_on+0x30>

0800dc0a <_calloc_r>:
 800dc0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc0c:	fba1 2402 	umull	r2, r4, r1, r2
 800dc10:	b94c      	cbnz	r4, 800dc26 <_calloc_r+0x1c>
 800dc12:	4611      	mov	r1, r2
 800dc14:	9201      	str	r2, [sp, #4]
 800dc16:	f000 f87b 	bl	800dd10 <_malloc_r>
 800dc1a:	9a01      	ldr	r2, [sp, #4]
 800dc1c:	4605      	mov	r5, r0
 800dc1e:	b930      	cbnz	r0, 800dc2e <_calloc_r+0x24>
 800dc20:	4628      	mov	r0, r5
 800dc22:	b003      	add	sp, #12
 800dc24:	bd30      	pop	{r4, r5, pc}
 800dc26:	220c      	movs	r2, #12
 800dc28:	6002      	str	r2, [r0, #0]
 800dc2a:	2500      	movs	r5, #0
 800dc2c:	e7f8      	b.n	800dc20 <_calloc_r+0x16>
 800dc2e:	4621      	mov	r1, r4
 800dc30:	f7fc fafa 	bl	800a228 <memset>
 800dc34:	e7f4      	b.n	800dc20 <_calloc_r+0x16>
	...

0800dc38 <_free_r>:
 800dc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc3a:	2900      	cmp	r1, #0
 800dc3c:	d044      	beq.n	800dcc8 <_free_r+0x90>
 800dc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc42:	9001      	str	r0, [sp, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f1a1 0404 	sub.w	r4, r1, #4
 800dc4a:	bfb8      	it	lt
 800dc4c:	18e4      	addlt	r4, r4, r3
 800dc4e:	f001 f88b 	bl	800ed68 <__malloc_lock>
 800dc52:	4a1e      	ldr	r2, [pc, #120]	; (800dccc <_free_r+0x94>)
 800dc54:	9801      	ldr	r0, [sp, #4]
 800dc56:	6813      	ldr	r3, [r2, #0]
 800dc58:	b933      	cbnz	r3, 800dc68 <_free_r+0x30>
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	6014      	str	r4, [r2, #0]
 800dc5e:	b003      	add	sp, #12
 800dc60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc64:	f001 b886 	b.w	800ed74 <__malloc_unlock>
 800dc68:	42a3      	cmp	r3, r4
 800dc6a:	d908      	bls.n	800dc7e <_free_r+0x46>
 800dc6c:	6825      	ldr	r5, [r4, #0]
 800dc6e:	1961      	adds	r1, r4, r5
 800dc70:	428b      	cmp	r3, r1
 800dc72:	bf01      	itttt	eq
 800dc74:	6819      	ldreq	r1, [r3, #0]
 800dc76:	685b      	ldreq	r3, [r3, #4]
 800dc78:	1949      	addeq	r1, r1, r5
 800dc7a:	6021      	streq	r1, [r4, #0]
 800dc7c:	e7ed      	b.n	800dc5a <_free_r+0x22>
 800dc7e:	461a      	mov	r2, r3
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	b10b      	cbz	r3, 800dc88 <_free_r+0x50>
 800dc84:	42a3      	cmp	r3, r4
 800dc86:	d9fa      	bls.n	800dc7e <_free_r+0x46>
 800dc88:	6811      	ldr	r1, [r2, #0]
 800dc8a:	1855      	adds	r5, r2, r1
 800dc8c:	42a5      	cmp	r5, r4
 800dc8e:	d10b      	bne.n	800dca8 <_free_r+0x70>
 800dc90:	6824      	ldr	r4, [r4, #0]
 800dc92:	4421      	add	r1, r4
 800dc94:	1854      	adds	r4, r2, r1
 800dc96:	42a3      	cmp	r3, r4
 800dc98:	6011      	str	r1, [r2, #0]
 800dc9a:	d1e0      	bne.n	800dc5e <_free_r+0x26>
 800dc9c:	681c      	ldr	r4, [r3, #0]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	6053      	str	r3, [r2, #4]
 800dca2:	4421      	add	r1, r4
 800dca4:	6011      	str	r1, [r2, #0]
 800dca6:	e7da      	b.n	800dc5e <_free_r+0x26>
 800dca8:	d902      	bls.n	800dcb0 <_free_r+0x78>
 800dcaa:	230c      	movs	r3, #12
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	e7d6      	b.n	800dc5e <_free_r+0x26>
 800dcb0:	6825      	ldr	r5, [r4, #0]
 800dcb2:	1961      	adds	r1, r4, r5
 800dcb4:	428b      	cmp	r3, r1
 800dcb6:	bf04      	itt	eq
 800dcb8:	6819      	ldreq	r1, [r3, #0]
 800dcba:	685b      	ldreq	r3, [r3, #4]
 800dcbc:	6063      	str	r3, [r4, #4]
 800dcbe:	bf04      	itt	eq
 800dcc0:	1949      	addeq	r1, r1, r5
 800dcc2:	6021      	streq	r1, [r4, #0]
 800dcc4:	6054      	str	r4, [r2, #4]
 800dcc6:	e7ca      	b.n	800dc5e <_free_r+0x26>
 800dcc8:	b003      	add	sp, #12
 800dcca:	bd30      	pop	{r4, r5, pc}
 800dccc:	2000116c 	.word	0x2000116c

0800dcd0 <sbrk_aligned>:
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	4e0e      	ldr	r6, [pc, #56]	; (800dd0c <sbrk_aligned+0x3c>)
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	6831      	ldr	r1, [r6, #0]
 800dcd8:	4605      	mov	r5, r0
 800dcda:	b911      	cbnz	r1, 800dce2 <sbrk_aligned+0x12>
 800dcdc:	f000 fd28 	bl	800e730 <_sbrk_r>
 800dce0:	6030      	str	r0, [r6, #0]
 800dce2:	4621      	mov	r1, r4
 800dce4:	4628      	mov	r0, r5
 800dce6:	f000 fd23 	bl	800e730 <_sbrk_r>
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	d00a      	beq.n	800dd04 <sbrk_aligned+0x34>
 800dcee:	1cc4      	adds	r4, r0, #3
 800dcf0:	f024 0403 	bic.w	r4, r4, #3
 800dcf4:	42a0      	cmp	r0, r4
 800dcf6:	d007      	beq.n	800dd08 <sbrk_aligned+0x38>
 800dcf8:	1a21      	subs	r1, r4, r0
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f000 fd18 	bl	800e730 <_sbrk_r>
 800dd00:	3001      	adds	r0, #1
 800dd02:	d101      	bne.n	800dd08 <sbrk_aligned+0x38>
 800dd04:	f04f 34ff 	mov.w	r4, #4294967295
 800dd08:	4620      	mov	r0, r4
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
 800dd0c:	20001170 	.word	0x20001170

0800dd10 <_malloc_r>:
 800dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd14:	1ccd      	adds	r5, r1, #3
 800dd16:	f025 0503 	bic.w	r5, r5, #3
 800dd1a:	3508      	adds	r5, #8
 800dd1c:	2d0c      	cmp	r5, #12
 800dd1e:	bf38      	it	cc
 800dd20:	250c      	movcc	r5, #12
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	4607      	mov	r7, r0
 800dd26:	db01      	blt.n	800dd2c <_malloc_r+0x1c>
 800dd28:	42a9      	cmp	r1, r5
 800dd2a:	d905      	bls.n	800dd38 <_malloc_r+0x28>
 800dd2c:	230c      	movs	r3, #12
 800dd2e:	603b      	str	r3, [r7, #0]
 800dd30:	2600      	movs	r6, #0
 800dd32:	4630      	mov	r0, r6
 800dd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd38:	4e2e      	ldr	r6, [pc, #184]	; (800ddf4 <_malloc_r+0xe4>)
 800dd3a:	f001 f815 	bl	800ed68 <__malloc_lock>
 800dd3e:	6833      	ldr	r3, [r6, #0]
 800dd40:	461c      	mov	r4, r3
 800dd42:	bb34      	cbnz	r4, 800dd92 <_malloc_r+0x82>
 800dd44:	4629      	mov	r1, r5
 800dd46:	4638      	mov	r0, r7
 800dd48:	f7ff ffc2 	bl	800dcd0 <sbrk_aligned>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	4604      	mov	r4, r0
 800dd50:	d14d      	bne.n	800ddee <_malloc_r+0xde>
 800dd52:	6834      	ldr	r4, [r6, #0]
 800dd54:	4626      	mov	r6, r4
 800dd56:	2e00      	cmp	r6, #0
 800dd58:	d140      	bne.n	800dddc <_malloc_r+0xcc>
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4638      	mov	r0, r7
 800dd60:	eb04 0803 	add.w	r8, r4, r3
 800dd64:	f000 fce4 	bl	800e730 <_sbrk_r>
 800dd68:	4580      	cmp	r8, r0
 800dd6a:	d13a      	bne.n	800dde2 <_malloc_r+0xd2>
 800dd6c:	6821      	ldr	r1, [r4, #0]
 800dd6e:	3503      	adds	r5, #3
 800dd70:	1a6d      	subs	r5, r5, r1
 800dd72:	f025 0503 	bic.w	r5, r5, #3
 800dd76:	3508      	adds	r5, #8
 800dd78:	2d0c      	cmp	r5, #12
 800dd7a:	bf38      	it	cc
 800dd7c:	250c      	movcc	r5, #12
 800dd7e:	4629      	mov	r1, r5
 800dd80:	4638      	mov	r0, r7
 800dd82:	f7ff ffa5 	bl	800dcd0 <sbrk_aligned>
 800dd86:	3001      	adds	r0, #1
 800dd88:	d02b      	beq.n	800dde2 <_malloc_r+0xd2>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	442b      	add	r3, r5
 800dd8e:	6023      	str	r3, [r4, #0]
 800dd90:	e00e      	b.n	800ddb0 <_malloc_r+0xa0>
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	1b52      	subs	r2, r2, r5
 800dd96:	d41e      	bmi.n	800ddd6 <_malloc_r+0xc6>
 800dd98:	2a0b      	cmp	r2, #11
 800dd9a:	d916      	bls.n	800ddca <_malloc_r+0xba>
 800dd9c:	1961      	adds	r1, r4, r5
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	6025      	str	r5, [r4, #0]
 800dda2:	bf18      	it	ne
 800dda4:	6059      	strne	r1, [r3, #4]
 800dda6:	6863      	ldr	r3, [r4, #4]
 800dda8:	bf08      	it	eq
 800ddaa:	6031      	streq	r1, [r6, #0]
 800ddac:	5162      	str	r2, [r4, r5]
 800ddae:	604b      	str	r3, [r1, #4]
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	f104 060b 	add.w	r6, r4, #11
 800ddb6:	f000 ffdd 	bl	800ed74 <__malloc_unlock>
 800ddba:	f026 0607 	bic.w	r6, r6, #7
 800ddbe:	1d23      	adds	r3, r4, #4
 800ddc0:	1af2      	subs	r2, r6, r3
 800ddc2:	d0b6      	beq.n	800dd32 <_malloc_r+0x22>
 800ddc4:	1b9b      	subs	r3, r3, r6
 800ddc6:	50a3      	str	r3, [r4, r2]
 800ddc8:	e7b3      	b.n	800dd32 <_malloc_r+0x22>
 800ddca:	6862      	ldr	r2, [r4, #4]
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	bf0c      	ite	eq
 800ddd0:	6032      	streq	r2, [r6, #0]
 800ddd2:	605a      	strne	r2, [r3, #4]
 800ddd4:	e7ec      	b.n	800ddb0 <_malloc_r+0xa0>
 800ddd6:	4623      	mov	r3, r4
 800ddd8:	6864      	ldr	r4, [r4, #4]
 800ddda:	e7b2      	b.n	800dd42 <_malloc_r+0x32>
 800dddc:	4634      	mov	r4, r6
 800ddde:	6876      	ldr	r6, [r6, #4]
 800dde0:	e7b9      	b.n	800dd56 <_malloc_r+0x46>
 800dde2:	230c      	movs	r3, #12
 800dde4:	603b      	str	r3, [r7, #0]
 800dde6:	4638      	mov	r0, r7
 800dde8:	f000 ffc4 	bl	800ed74 <__malloc_unlock>
 800ddec:	e7a1      	b.n	800dd32 <_malloc_r+0x22>
 800ddee:	6025      	str	r5, [r4, #0]
 800ddf0:	e7de      	b.n	800ddb0 <_malloc_r+0xa0>
 800ddf2:	bf00      	nop
 800ddf4:	2000116c 	.word	0x2000116c

0800ddf8 <__ssputs_r>:
 800ddf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddfc:	688e      	ldr	r6, [r1, #8]
 800ddfe:	429e      	cmp	r6, r3
 800de00:	4682      	mov	sl, r0
 800de02:	460c      	mov	r4, r1
 800de04:	4690      	mov	r8, r2
 800de06:	461f      	mov	r7, r3
 800de08:	d838      	bhi.n	800de7c <__ssputs_r+0x84>
 800de0a:	898a      	ldrh	r2, [r1, #12]
 800de0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de10:	d032      	beq.n	800de78 <__ssputs_r+0x80>
 800de12:	6825      	ldr	r5, [r4, #0]
 800de14:	6909      	ldr	r1, [r1, #16]
 800de16:	eba5 0901 	sub.w	r9, r5, r1
 800de1a:	6965      	ldr	r5, [r4, #20]
 800de1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de24:	3301      	adds	r3, #1
 800de26:	444b      	add	r3, r9
 800de28:	106d      	asrs	r5, r5, #1
 800de2a:	429d      	cmp	r5, r3
 800de2c:	bf38      	it	cc
 800de2e:	461d      	movcc	r5, r3
 800de30:	0553      	lsls	r3, r2, #21
 800de32:	d531      	bpl.n	800de98 <__ssputs_r+0xa0>
 800de34:	4629      	mov	r1, r5
 800de36:	f7ff ff6b 	bl	800dd10 <_malloc_r>
 800de3a:	4606      	mov	r6, r0
 800de3c:	b950      	cbnz	r0, 800de54 <__ssputs_r+0x5c>
 800de3e:	230c      	movs	r3, #12
 800de40:	f8ca 3000 	str.w	r3, [sl]
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de54:	6921      	ldr	r1, [r4, #16]
 800de56:	464a      	mov	r2, r9
 800de58:	f7ff fa08 	bl	800d26c <memcpy>
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de66:	81a3      	strh	r3, [r4, #12]
 800de68:	6126      	str	r6, [r4, #16]
 800de6a:	6165      	str	r5, [r4, #20]
 800de6c:	444e      	add	r6, r9
 800de6e:	eba5 0509 	sub.w	r5, r5, r9
 800de72:	6026      	str	r6, [r4, #0]
 800de74:	60a5      	str	r5, [r4, #8]
 800de76:	463e      	mov	r6, r7
 800de78:	42be      	cmp	r6, r7
 800de7a:	d900      	bls.n	800de7e <__ssputs_r+0x86>
 800de7c:	463e      	mov	r6, r7
 800de7e:	6820      	ldr	r0, [r4, #0]
 800de80:	4632      	mov	r2, r6
 800de82:	4641      	mov	r1, r8
 800de84:	f000 ff56 	bl	800ed34 <memmove>
 800de88:	68a3      	ldr	r3, [r4, #8]
 800de8a:	1b9b      	subs	r3, r3, r6
 800de8c:	60a3      	str	r3, [r4, #8]
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	4433      	add	r3, r6
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	2000      	movs	r0, #0
 800de96:	e7db      	b.n	800de50 <__ssputs_r+0x58>
 800de98:	462a      	mov	r2, r5
 800de9a:	f000 ff71 	bl	800ed80 <_realloc_r>
 800de9e:	4606      	mov	r6, r0
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d1e1      	bne.n	800de68 <__ssputs_r+0x70>
 800dea4:	6921      	ldr	r1, [r4, #16]
 800dea6:	4650      	mov	r0, sl
 800dea8:	f7ff fec6 	bl	800dc38 <_free_r>
 800deac:	e7c7      	b.n	800de3e <__ssputs_r+0x46>
	...

0800deb0 <_svfiprintf_r>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	4698      	mov	r8, r3
 800deb6:	898b      	ldrh	r3, [r1, #12]
 800deb8:	061b      	lsls	r3, r3, #24
 800deba:	b09d      	sub	sp, #116	; 0x74
 800debc:	4607      	mov	r7, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	4614      	mov	r4, r2
 800dec2:	d50e      	bpl.n	800dee2 <_svfiprintf_r+0x32>
 800dec4:	690b      	ldr	r3, [r1, #16]
 800dec6:	b963      	cbnz	r3, 800dee2 <_svfiprintf_r+0x32>
 800dec8:	2140      	movs	r1, #64	; 0x40
 800deca:	f7ff ff21 	bl	800dd10 <_malloc_r>
 800dece:	6028      	str	r0, [r5, #0]
 800ded0:	6128      	str	r0, [r5, #16]
 800ded2:	b920      	cbnz	r0, 800dede <_svfiprintf_r+0x2e>
 800ded4:	230c      	movs	r3, #12
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e0d1      	b.n	800e082 <_svfiprintf_r+0x1d2>
 800dede:	2340      	movs	r3, #64	; 0x40
 800dee0:	616b      	str	r3, [r5, #20]
 800dee2:	2300      	movs	r3, #0
 800dee4:	9309      	str	r3, [sp, #36]	; 0x24
 800dee6:	2320      	movs	r3, #32
 800dee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deec:	f8cd 800c 	str.w	r8, [sp, #12]
 800def0:	2330      	movs	r3, #48	; 0x30
 800def2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e09c <_svfiprintf_r+0x1ec>
 800def6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800defa:	f04f 0901 	mov.w	r9, #1
 800defe:	4623      	mov	r3, r4
 800df00:	469a      	mov	sl, r3
 800df02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df06:	b10a      	cbz	r2, 800df0c <_svfiprintf_r+0x5c>
 800df08:	2a25      	cmp	r2, #37	; 0x25
 800df0a:	d1f9      	bne.n	800df00 <_svfiprintf_r+0x50>
 800df0c:	ebba 0b04 	subs.w	fp, sl, r4
 800df10:	d00b      	beq.n	800df2a <_svfiprintf_r+0x7a>
 800df12:	465b      	mov	r3, fp
 800df14:	4622      	mov	r2, r4
 800df16:	4629      	mov	r1, r5
 800df18:	4638      	mov	r0, r7
 800df1a:	f7ff ff6d 	bl	800ddf8 <__ssputs_r>
 800df1e:	3001      	adds	r0, #1
 800df20:	f000 80aa 	beq.w	800e078 <_svfiprintf_r+0x1c8>
 800df24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df26:	445a      	add	r2, fp
 800df28:	9209      	str	r2, [sp, #36]	; 0x24
 800df2a:	f89a 3000 	ldrb.w	r3, [sl]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f000 80a2 	beq.w	800e078 <_svfiprintf_r+0x1c8>
 800df34:	2300      	movs	r3, #0
 800df36:	f04f 32ff 	mov.w	r2, #4294967295
 800df3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df3e:	f10a 0a01 	add.w	sl, sl, #1
 800df42:	9304      	str	r3, [sp, #16]
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df4a:	931a      	str	r3, [sp, #104]	; 0x68
 800df4c:	4654      	mov	r4, sl
 800df4e:	2205      	movs	r2, #5
 800df50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df54:	4851      	ldr	r0, [pc, #324]	; (800e09c <_svfiprintf_r+0x1ec>)
 800df56:	f7f2 f963 	bl	8000220 <memchr>
 800df5a:	9a04      	ldr	r2, [sp, #16]
 800df5c:	b9d8      	cbnz	r0, 800df96 <_svfiprintf_r+0xe6>
 800df5e:	06d0      	lsls	r0, r2, #27
 800df60:	bf44      	itt	mi
 800df62:	2320      	movmi	r3, #32
 800df64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df68:	0711      	lsls	r1, r2, #28
 800df6a:	bf44      	itt	mi
 800df6c:	232b      	movmi	r3, #43	; 0x2b
 800df6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df72:	f89a 3000 	ldrb.w	r3, [sl]
 800df76:	2b2a      	cmp	r3, #42	; 0x2a
 800df78:	d015      	beq.n	800dfa6 <_svfiprintf_r+0xf6>
 800df7a:	9a07      	ldr	r2, [sp, #28]
 800df7c:	4654      	mov	r4, sl
 800df7e:	2000      	movs	r0, #0
 800df80:	f04f 0c0a 	mov.w	ip, #10
 800df84:	4621      	mov	r1, r4
 800df86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df8a:	3b30      	subs	r3, #48	; 0x30
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	d94e      	bls.n	800e02e <_svfiprintf_r+0x17e>
 800df90:	b1b0      	cbz	r0, 800dfc0 <_svfiprintf_r+0x110>
 800df92:	9207      	str	r2, [sp, #28]
 800df94:	e014      	b.n	800dfc0 <_svfiprintf_r+0x110>
 800df96:	eba0 0308 	sub.w	r3, r0, r8
 800df9a:	fa09 f303 	lsl.w	r3, r9, r3
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	9304      	str	r3, [sp, #16]
 800dfa2:	46a2      	mov	sl, r4
 800dfa4:	e7d2      	b.n	800df4c <_svfiprintf_r+0x9c>
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	1d19      	adds	r1, r3, #4
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	9103      	str	r1, [sp, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	bfbb      	ittet	lt
 800dfb2:	425b      	neglt	r3, r3
 800dfb4:	f042 0202 	orrlt.w	r2, r2, #2
 800dfb8:	9307      	strge	r3, [sp, #28]
 800dfba:	9307      	strlt	r3, [sp, #28]
 800dfbc:	bfb8      	it	lt
 800dfbe:	9204      	strlt	r2, [sp, #16]
 800dfc0:	7823      	ldrb	r3, [r4, #0]
 800dfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800dfc4:	d10c      	bne.n	800dfe0 <_svfiprintf_r+0x130>
 800dfc6:	7863      	ldrb	r3, [r4, #1]
 800dfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800dfca:	d135      	bne.n	800e038 <_svfiprintf_r+0x188>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	1d1a      	adds	r2, r3, #4
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	9203      	str	r2, [sp, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfb8      	it	lt
 800dfd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfdc:	3402      	adds	r4, #2
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e0ac <_svfiprintf_r+0x1fc>
 800dfe4:	7821      	ldrb	r1, [r4, #0]
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	4650      	mov	r0, sl
 800dfea:	f7f2 f919 	bl	8000220 <memchr>
 800dfee:	b140      	cbz	r0, 800e002 <_svfiprintf_r+0x152>
 800dff0:	2340      	movs	r3, #64	; 0x40
 800dff2:	eba0 000a 	sub.w	r0, r0, sl
 800dff6:	fa03 f000 	lsl.w	r0, r3, r0
 800dffa:	9b04      	ldr	r3, [sp, #16]
 800dffc:	4303      	orrs	r3, r0
 800dffe:	3401      	adds	r4, #1
 800e000:	9304      	str	r3, [sp, #16]
 800e002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e006:	4826      	ldr	r0, [pc, #152]	; (800e0a0 <_svfiprintf_r+0x1f0>)
 800e008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e00c:	2206      	movs	r2, #6
 800e00e:	f7f2 f907 	bl	8000220 <memchr>
 800e012:	2800      	cmp	r0, #0
 800e014:	d038      	beq.n	800e088 <_svfiprintf_r+0x1d8>
 800e016:	4b23      	ldr	r3, [pc, #140]	; (800e0a4 <_svfiprintf_r+0x1f4>)
 800e018:	bb1b      	cbnz	r3, 800e062 <_svfiprintf_r+0x1b2>
 800e01a:	9b03      	ldr	r3, [sp, #12]
 800e01c:	3307      	adds	r3, #7
 800e01e:	f023 0307 	bic.w	r3, r3, #7
 800e022:	3308      	adds	r3, #8
 800e024:	9303      	str	r3, [sp, #12]
 800e026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e028:	4433      	add	r3, r6
 800e02a:	9309      	str	r3, [sp, #36]	; 0x24
 800e02c:	e767      	b.n	800defe <_svfiprintf_r+0x4e>
 800e02e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e032:	460c      	mov	r4, r1
 800e034:	2001      	movs	r0, #1
 800e036:	e7a5      	b.n	800df84 <_svfiprintf_r+0xd4>
 800e038:	2300      	movs	r3, #0
 800e03a:	3401      	adds	r4, #1
 800e03c:	9305      	str	r3, [sp, #20]
 800e03e:	4619      	mov	r1, r3
 800e040:	f04f 0c0a 	mov.w	ip, #10
 800e044:	4620      	mov	r0, r4
 800e046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e04a:	3a30      	subs	r2, #48	; 0x30
 800e04c:	2a09      	cmp	r2, #9
 800e04e:	d903      	bls.n	800e058 <_svfiprintf_r+0x1a8>
 800e050:	2b00      	cmp	r3, #0
 800e052:	d0c5      	beq.n	800dfe0 <_svfiprintf_r+0x130>
 800e054:	9105      	str	r1, [sp, #20]
 800e056:	e7c3      	b.n	800dfe0 <_svfiprintf_r+0x130>
 800e058:	fb0c 2101 	mla	r1, ip, r1, r2
 800e05c:	4604      	mov	r4, r0
 800e05e:	2301      	movs	r3, #1
 800e060:	e7f0      	b.n	800e044 <_svfiprintf_r+0x194>
 800e062:	ab03      	add	r3, sp, #12
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	462a      	mov	r2, r5
 800e068:	4b0f      	ldr	r3, [pc, #60]	; (800e0a8 <_svfiprintf_r+0x1f8>)
 800e06a:	a904      	add	r1, sp, #16
 800e06c:	4638      	mov	r0, r7
 800e06e:	f7fc f983 	bl	800a378 <_printf_float>
 800e072:	1c42      	adds	r2, r0, #1
 800e074:	4606      	mov	r6, r0
 800e076:	d1d6      	bne.n	800e026 <_svfiprintf_r+0x176>
 800e078:	89ab      	ldrh	r3, [r5, #12]
 800e07a:	065b      	lsls	r3, r3, #25
 800e07c:	f53f af2c 	bmi.w	800ded8 <_svfiprintf_r+0x28>
 800e080:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e082:	b01d      	add	sp, #116	; 0x74
 800e084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e088:	ab03      	add	r3, sp, #12
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	462a      	mov	r2, r5
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <_svfiprintf_r+0x1f8>)
 800e090:	a904      	add	r1, sp, #16
 800e092:	4638      	mov	r0, r7
 800e094:	f7fc fc14 	bl	800a8c0 <_printf_i>
 800e098:	e7eb      	b.n	800e072 <_svfiprintf_r+0x1c2>
 800e09a:	bf00      	nop
 800e09c:	08011604 	.word	0x08011604
 800e0a0:	0801160e 	.word	0x0801160e
 800e0a4:	0800a379 	.word	0x0800a379
 800e0a8:	0800ddf9 	.word	0x0800ddf9
 800e0ac:	0801160a 	.word	0x0801160a

0800e0b0 <_sungetc_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	1c4b      	adds	r3, r1, #1
 800e0b4:	4614      	mov	r4, r2
 800e0b6:	d103      	bne.n	800e0c0 <_sungetc_r+0x10>
 800e0b8:	f04f 35ff 	mov.w	r5, #4294967295
 800e0bc:	4628      	mov	r0, r5
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	8993      	ldrh	r3, [r2, #12]
 800e0c2:	f023 0320 	bic.w	r3, r3, #32
 800e0c6:	8193      	strh	r3, [r2, #12]
 800e0c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0ca:	6852      	ldr	r2, [r2, #4]
 800e0cc:	b2cd      	uxtb	r5, r1
 800e0ce:	b18b      	cbz	r3, 800e0f4 <_sungetc_r+0x44>
 800e0d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	dd08      	ble.n	800e0e8 <_sungetc_r+0x38>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	1e5a      	subs	r2, r3, #1
 800e0da:	6022      	str	r2, [r4, #0]
 800e0dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e0e0:	6863      	ldr	r3, [r4, #4]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	e7e9      	b.n	800e0bc <_sungetc_r+0xc>
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	f000 fbf1 	bl	800e8d0 <__submore>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d0f1      	beq.n	800e0d6 <_sungetc_r+0x26>
 800e0f2:	e7e1      	b.n	800e0b8 <_sungetc_r+0x8>
 800e0f4:	6921      	ldr	r1, [r4, #16]
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	b151      	cbz	r1, 800e110 <_sungetc_r+0x60>
 800e0fa:	4299      	cmp	r1, r3
 800e0fc:	d208      	bcs.n	800e110 <_sungetc_r+0x60>
 800e0fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e102:	42a9      	cmp	r1, r5
 800e104:	d104      	bne.n	800e110 <_sungetc_r+0x60>
 800e106:	3b01      	subs	r3, #1
 800e108:	3201      	adds	r2, #1
 800e10a:	6023      	str	r3, [r4, #0]
 800e10c:	6062      	str	r2, [r4, #4]
 800e10e:	e7d5      	b.n	800e0bc <_sungetc_r+0xc>
 800e110:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e118:	6363      	str	r3, [r4, #52]	; 0x34
 800e11a:	2303      	movs	r3, #3
 800e11c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e11e:	4623      	mov	r3, r4
 800e120:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	2301      	movs	r3, #1
 800e128:	e7dc      	b.n	800e0e4 <_sungetc_r+0x34>

0800e12a <__ssrefill_r>:
 800e12a:	b510      	push	{r4, lr}
 800e12c:	460c      	mov	r4, r1
 800e12e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e130:	b169      	cbz	r1, 800e14e <__ssrefill_r+0x24>
 800e132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e136:	4299      	cmp	r1, r3
 800e138:	d001      	beq.n	800e13e <__ssrefill_r+0x14>
 800e13a:	f7ff fd7d 	bl	800dc38 <_free_r>
 800e13e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e140:	6063      	str	r3, [r4, #4]
 800e142:	2000      	movs	r0, #0
 800e144:	6360      	str	r0, [r4, #52]	; 0x34
 800e146:	b113      	cbz	r3, 800e14e <__ssrefill_r+0x24>
 800e148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e14a:	6023      	str	r3, [r4, #0]
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	2300      	movs	r3, #0
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	f043 0320 	orr.w	r3, r3, #32
 800e15c:	81a3      	strh	r3, [r4, #12]
 800e15e:	f04f 30ff 	mov.w	r0, #4294967295
 800e162:	e7f3      	b.n	800e14c <__ssrefill_r+0x22>

0800e164 <__ssvfiscanf_r>:
 800e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	460c      	mov	r4, r1
 800e16a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e16e:	2100      	movs	r1, #0
 800e170:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e174:	49a6      	ldr	r1, [pc, #664]	; (800e410 <__ssvfiscanf_r+0x2ac>)
 800e176:	91a0      	str	r1, [sp, #640]	; 0x280
 800e178:	f10d 0804 	add.w	r8, sp, #4
 800e17c:	49a5      	ldr	r1, [pc, #660]	; (800e414 <__ssvfiscanf_r+0x2b0>)
 800e17e:	4fa6      	ldr	r7, [pc, #664]	; (800e418 <__ssvfiscanf_r+0x2b4>)
 800e180:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e41c <__ssvfiscanf_r+0x2b8>
 800e184:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e188:	4606      	mov	r6, r0
 800e18a:	91a1      	str	r1, [sp, #644]	; 0x284
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	7813      	ldrb	r3, [r2, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 815a 	beq.w	800e44a <__ssvfiscanf_r+0x2e6>
 800e196:	5dd9      	ldrb	r1, [r3, r7]
 800e198:	f011 0108 	ands.w	r1, r1, #8
 800e19c:	f102 0501 	add.w	r5, r2, #1
 800e1a0:	d019      	beq.n	800e1d6 <__ssvfiscanf_r+0x72>
 800e1a2:	6863      	ldr	r3, [r4, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	dd0f      	ble.n	800e1c8 <__ssvfiscanf_r+0x64>
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	781a      	ldrb	r2, [r3, #0]
 800e1ac:	5cba      	ldrb	r2, [r7, r2]
 800e1ae:	0712      	lsls	r2, r2, #28
 800e1b0:	d401      	bmi.n	800e1b6 <__ssvfiscanf_r+0x52>
 800e1b2:	462a      	mov	r2, r5
 800e1b4:	e7eb      	b.n	800e18e <__ssvfiscanf_r+0x2a>
 800e1b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e1b8:	3201      	adds	r2, #1
 800e1ba:	9245      	str	r2, [sp, #276]	; 0x114
 800e1bc:	6862      	ldr	r2, [r4, #4]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	3a01      	subs	r2, #1
 800e1c2:	6062      	str	r2, [r4, #4]
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	e7ec      	b.n	800e1a2 <__ssvfiscanf_r+0x3e>
 800e1c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	4798      	blx	r3
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d0e9      	beq.n	800e1a8 <__ssvfiscanf_r+0x44>
 800e1d4:	e7ed      	b.n	800e1b2 <__ssvfiscanf_r+0x4e>
 800e1d6:	2b25      	cmp	r3, #37	; 0x25
 800e1d8:	d012      	beq.n	800e200 <__ssvfiscanf_r+0x9c>
 800e1da:	469a      	mov	sl, r3
 800e1dc:	6863      	ldr	r3, [r4, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f340 8091 	ble.w	800e306 <__ssvfiscanf_r+0x1a2>
 800e1e4:	6822      	ldr	r2, [r4, #0]
 800e1e6:	7813      	ldrb	r3, [r2, #0]
 800e1e8:	4553      	cmp	r3, sl
 800e1ea:	f040 812e 	bne.w	800e44a <__ssvfiscanf_r+0x2e6>
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	6063      	str	r3, [r4, #4]
 800e1f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e1f6:	3201      	adds	r2, #1
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	6022      	str	r2, [r4, #0]
 800e1fc:	9345      	str	r3, [sp, #276]	; 0x114
 800e1fe:	e7d8      	b.n	800e1b2 <__ssvfiscanf_r+0x4e>
 800e200:	9141      	str	r1, [sp, #260]	; 0x104
 800e202:	9143      	str	r1, [sp, #268]	; 0x10c
 800e204:	7853      	ldrb	r3, [r2, #1]
 800e206:	2b2a      	cmp	r3, #42	; 0x2a
 800e208:	bf02      	ittt	eq
 800e20a:	2310      	moveq	r3, #16
 800e20c:	1c95      	addeq	r5, r2, #2
 800e20e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e210:	220a      	movs	r2, #10
 800e212:	46aa      	mov	sl, r5
 800e214:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e218:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e21c:	2b09      	cmp	r3, #9
 800e21e:	d91d      	bls.n	800e25c <__ssvfiscanf_r+0xf8>
 800e220:	487e      	ldr	r0, [pc, #504]	; (800e41c <__ssvfiscanf_r+0x2b8>)
 800e222:	2203      	movs	r2, #3
 800e224:	f7f1 fffc 	bl	8000220 <memchr>
 800e228:	b140      	cbz	r0, 800e23c <__ssvfiscanf_r+0xd8>
 800e22a:	2301      	movs	r3, #1
 800e22c:	eba0 0009 	sub.w	r0, r0, r9
 800e230:	fa03 f000 	lsl.w	r0, r3, r0
 800e234:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e236:	4318      	orrs	r0, r3
 800e238:	9041      	str	r0, [sp, #260]	; 0x104
 800e23a:	4655      	mov	r5, sl
 800e23c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e240:	2b78      	cmp	r3, #120	; 0x78
 800e242:	d806      	bhi.n	800e252 <__ssvfiscanf_r+0xee>
 800e244:	2b57      	cmp	r3, #87	; 0x57
 800e246:	d810      	bhi.n	800e26a <__ssvfiscanf_r+0x106>
 800e248:	2b25      	cmp	r3, #37	; 0x25
 800e24a:	d0c6      	beq.n	800e1da <__ssvfiscanf_r+0x76>
 800e24c:	d856      	bhi.n	800e2fc <__ssvfiscanf_r+0x198>
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d064      	beq.n	800e31c <__ssvfiscanf_r+0x1b8>
 800e252:	2303      	movs	r3, #3
 800e254:	9347      	str	r3, [sp, #284]	; 0x11c
 800e256:	230a      	movs	r3, #10
 800e258:	9342      	str	r3, [sp, #264]	; 0x108
 800e25a:	e071      	b.n	800e340 <__ssvfiscanf_r+0x1dc>
 800e25c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e25e:	fb02 1103 	mla	r1, r2, r3, r1
 800e262:	3930      	subs	r1, #48	; 0x30
 800e264:	9143      	str	r1, [sp, #268]	; 0x10c
 800e266:	4655      	mov	r5, sl
 800e268:	e7d3      	b.n	800e212 <__ssvfiscanf_r+0xae>
 800e26a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e26e:	2a20      	cmp	r2, #32
 800e270:	d8ef      	bhi.n	800e252 <__ssvfiscanf_r+0xee>
 800e272:	a101      	add	r1, pc, #4	; (adr r1, 800e278 <__ssvfiscanf_r+0x114>)
 800e274:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e278:	0800e32b 	.word	0x0800e32b
 800e27c:	0800e253 	.word	0x0800e253
 800e280:	0800e253 	.word	0x0800e253
 800e284:	0800e389 	.word	0x0800e389
 800e288:	0800e253 	.word	0x0800e253
 800e28c:	0800e253 	.word	0x0800e253
 800e290:	0800e253 	.word	0x0800e253
 800e294:	0800e253 	.word	0x0800e253
 800e298:	0800e253 	.word	0x0800e253
 800e29c:	0800e253 	.word	0x0800e253
 800e2a0:	0800e253 	.word	0x0800e253
 800e2a4:	0800e39f 	.word	0x0800e39f
 800e2a8:	0800e375 	.word	0x0800e375
 800e2ac:	0800e303 	.word	0x0800e303
 800e2b0:	0800e303 	.word	0x0800e303
 800e2b4:	0800e303 	.word	0x0800e303
 800e2b8:	0800e253 	.word	0x0800e253
 800e2bc:	0800e379 	.word	0x0800e379
 800e2c0:	0800e253 	.word	0x0800e253
 800e2c4:	0800e253 	.word	0x0800e253
 800e2c8:	0800e253 	.word	0x0800e253
 800e2cc:	0800e253 	.word	0x0800e253
 800e2d0:	0800e3af 	.word	0x0800e3af
 800e2d4:	0800e381 	.word	0x0800e381
 800e2d8:	0800e323 	.word	0x0800e323
 800e2dc:	0800e253 	.word	0x0800e253
 800e2e0:	0800e253 	.word	0x0800e253
 800e2e4:	0800e3ab 	.word	0x0800e3ab
 800e2e8:	0800e253 	.word	0x0800e253
 800e2ec:	0800e375 	.word	0x0800e375
 800e2f0:	0800e253 	.word	0x0800e253
 800e2f4:	0800e253 	.word	0x0800e253
 800e2f8:	0800e32b 	.word	0x0800e32b
 800e2fc:	3b45      	subs	r3, #69	; 0x45
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d8a7      	bhi.n	800e252 <__ssvfiscanf_r+0xee>
 800e302:	2305      	movs	r3, #5
 800e304:	e01b      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e306:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e308:	4621      	mov	r1, r4
 800e30a:	4630      	mov	r0, r6
 800e30c:	4798      	blx	r3
 800e30e:	2800      	cmp	r0, #0
 800e310:	f43f af68 	beq.w	800e1e4 <__ssvfiscanf_r+0x80>
 800e314:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e316:	2800      	cmp	r0, #0
 800e318:	f040 808d 	bne.w	800e436 <__ssvfiscanf_r+0x2d2>
 800e31c:	f04f 30ff 	mov.w	r0, #4294967295
 800e320:	e08f      	b.n	800e442 <__ssvfiscanf_r+0x2de>
 800e322:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e324:	f042 0220 	orr.w	r2, r2, #32
 800e328:	9241      	str	r2, [sp, #260]	; 0x104
 800e32a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e330:	9241      	str	r2, [sp, #260]	; 0x104
 800e332:	2210      	movs	r2, #16
 800e334:	2b6f      	cmp	r3, #111	; 0x6f
 800e336:	9242      	str	r2, [sp, #264]	; 0x108
 800e338:	bf34      	ite	cc
 800e33a:	2303      	movcc	r3, #3
 800e33c:	2304      	movcs	r3, #4
 800e33e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e340:	6863      	ldr	r3, [r4, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dd42      	ble.n	800e3cc <__ssvfiscanf_r+0x268>
 800e346:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e348:	0659      	lsls	r1, r3, #25
 800e34a:	d404      	bmi.n	800e356 <__ssvfiscanf_r+0x1f2>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	781a      	ldrb	r2, [r3, #0]
 800e350:	5cba      	ldrb	r2, [r7, r2]
 800e352:	0712      	lsls	r2, r2, #28
 800e354:	d441      	bmi.n	800e3da <__ssvfiscanf_r+0x276>
 800e356:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e358:	2b02      	cmp	r3, #2
 800e35a:	dc50      	bgt.n	800e3fe <__ssvfiscanf_r+0x29a>
 800e35c:	466b      	mov	r3, sp
 800e35e:	4622      	mov	r2, r4
 800e360:	a941      	add	r1, sp, #260	; 0x104
 800e362:	4630      	mov	r0, r6
 800e364:	f000 f876 	bl	800e454 <_scanf_chars>
 800e368:	2801      	cmp	r0, #1
 800e36a:	d06e      	beq.n	800e44a <__ssvfiscanf_r+0x2e6>
 800e36c:	2802      	cmp	r0, #2
 800e36e:	f47f af20 	bne.w	800e1b2 <__ssvfiscanf_r+0x4e>
 800e372:	e7cf      	b.n	800e314 <__ssvfiscanf_r+0x1b0>
 800e374:	220a      	movs	r2, #10
 800e376:	e7dd      	b.n	800e334 <__ssvfiscanf_r+0x1d0>
 800e378:	2300      	movs	r3, #0
 800e37a:	9342      	str	r3, [sp, #264]	; 0x108
 800e37c:	2303      	movs	r3, #3
 800e37e:	e7de      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e380:	2308      	movs	r3, #8
 800e382:	9342      	str	r3, [sp, #264]	; 0x108
 800e384:	2304      	movs	r3, #4
 800e386:	e7da      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e388:	4629      	mov	r1, r5
 800e38a:	4640      	mov	r0, r8
 800e38c:	f000 f9e0 	bl	800e750 <__sccl>
 800e390:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e396:	9341      	str	r3, [sp, #260]	; 0x104
 800e398:	4605      	mov	r5, r0
 800e39a:	2301      	movs	r3, #1
 800e39c:	e7cf      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e39e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3a4:	9341      	str	r3, [sp, #260]	; 0x104
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e7c9      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	e7c7      	b.n	800e33e <__ssvfiscanf_r+0x1da>
 800e3ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e3b0:	06c3      	lsls	r3, r0, #27
 800e3b2:	f53f aefe 	bmi.w	800e1b2 <__ssvfiscanf_r+0x4e>
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3ba:	1d19      	adds	r1, r3, #4
 800e3bc:	9100      	str	r1, [sp, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f010 0f01 	tst.w	r0, #1
 800e3c4:	bf14      	ite	ne
 800e3c6:	801a      	strhne	r2, [r3, #0]
 800e3c8:	601a      	streq	r2, [r3, #0]
 800e3ca:	e6f2      	b.n	800e1b2 <__ssvfiscanf_r+0x4e>
 800e3cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4798      	blx	r3
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0b6      	beq.n	800e346 <__ssvfiscanf_r+0x1e2>
 800e3d8:	e79c      	b.n	800e314 <__ssvfiscanf_r+0x1b0>
 800e3da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3dc:	3201      	adds	r2, #1
 800e3de:	9245      	str	r2, [sp, #276]	; 0x114
 800e3e0:	6862      	ldr	r2, [r4, #4]
 800e3e2:	3a01      	subs	r2, #1
 800e3e4:	2a00      	cmp	r2, #0
 800e3e6:	6062      	str	r2, [r4, #4]
 800e3e8:	dd02      	ble.n	800e3f0 <__ssvfiscanf_r+0x28c>
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	e7ad      	b.n	800e34c <__ssvfiscanf_r+0x1e8>
 800e3f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4798      	blx	r3
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d0a7      	beq.n	800e34c <__ssvfiscanf_r+0x1e8>
 800e3fc:	e78a      	b.n	800e314 <__ssvfiscanf_r+0x1b0>
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	dc0e      	bgt.n	800e420 <__ssvfiscanf_r+0x2bc>
 800e402:	466b      	mov	r3, sp
 800e404:	4622      	mov	r2, r4
 800e406:	a941      	add	r1, sp, #260	; 0x104
 800e408:	4630      	mov	r0, r6
 800e40a:	f000 f87d 	bl	800e508 <_scanf_i>
 800e40e:	e7ab      	b.n	800e368 <__ssvfiscanf_r+0x204>
 800e410:	0800e0b1 	.word	0x0800e0b1
 800e414:	0800e12b 	.word	0x0800e12b
 800e418:	080112a1 	.word	0x080112a1
 800e41c:	0801160a 	.word	0x0801160a
 800e420:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <__ssvfiscanf_r+0x2ec>)
 800e422:	2b00      	cmp	r3, #0
 800e424:	f43f aec5 	beq.w	800e1b2 <__ssvfiscanf_r+0x4e>
 800e428:	466b      	mov	r3, sp
 800e42a:	4622      	mov	r2, r4
 800e42c:	a941      	add	r1, sp, #260	; 0x104
 800e42e:	4630      	mov	r0, r6
 800e430:	f7fc fb6c 	bl	800ab0c <_scanf_float>
 800e434:	e798      	b.n	800e368 <__ssvfiscanf_r+0x204>
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e43c:	bf18      	it	ne
 800e43e:	f04f 30ff 	movne.w	r0, #4294967295
 800e442:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e44c:	e7f9      	b.n	800e442 <__ssvfiscanf_r+0x2de>
 800e44e:	bf00      	nop
 800e450:	0800ab0d 	.word	0x0800ab0d

0800e454 <_scanf_chars>:
 800e454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e458:	4615      	mov	r5, r2
 800e45a:	688a      	ldr	r2, [r1, #8]
 800e45c:	4680      	mov	r8, r0
 800e45e:	460c      	mov	r4, r1
 800e460:	b932      	cbnz	r2, 800e470 <_scanf_chars+0x1c>
 800e462:	698a      	ldr	r2, [r1, #24]
 800e464:	2a00      	cmp	r2, #0
 800e466:	bf0c      	ite	eq
 800e468:	2201      	moveq	r2, #1
 800e46a:	f04f 32ff 	movne.w	r2, #4294967295
 800e46e:	608a      	str	r2, [r1, #8]
 800e470:	6822      	ldr	r2, [r4, #0]
 800e472:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e504 <_scanf_chars+0xb0>
 800e476:	06d1      	lsls	r1, r2, #27
 800e478:	bf5f      	itttt	pl
 800e47a:	681a      	ldrpl	r2, [r3, #0]
 800e47c:	1d11      	addpl	r1, r2, #4
 800e47e:	6019      	strpl	r1, [r3, #0]
 800e480:	6816      	ldrpl	r6, [r2, #0]
 800e482:	2700      	movs	r7, #0
 800e484:	69a0      	ldr	r0, [r4, #24]
 800e486:	b188      	cbz	r0, 800e4ac <_scanf_chars+0x58>
 800e488:	2801      	cmp	r0, #1
 800e48a:	d107      	bne.n	800e49c <_scanf_chars+0x48>
 800e48c:	682a      	ldr	r2, [r5, #0]
 800e48e:	7811      	ldrb	r1, [r2, #0]
 800e490:	6962      	ldr	r2, [r4, #20]
 800e492:	5c52      	ldrb	r2, [r2, r1]
 800e494:	b952      	cbnz	r2, 800e4ac <_scanf_chars+0x58>
 800e496:	2f00      	cmp	r7, #0
 800e498:	d031      	beq.n	800e4fe <_scanf_chars+0xaa>
 800e49a:	e022      	b.n	800e4e2 <_scanf_chars+0x8e>
 800e49c:	2802      	cmp	r0, #2
 800e49e:	d120      	bne.n	800e4e2 <_scanf_chars+0x8e>
 800e4a0:	682b      	ldr	r3, [r5, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e4a8:	071b      	lsls	r3, r3, #28
 800e4aa:	d41a      	bmi.n	800e4e2 <_scanf_chars+0x8e>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	06da      	lsls	r2, r3, #27
 800e4b0:	bf5e      	ittt	pl
 800e4b2:	682b      	ldrpl	r3, [r5, #0]
 800e4b4:	781b      	ldrbpl	r3, [r3, #0]
 800e4b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e4ba:	682a      	ldr	r2, [r5, #0]
 800e4bc:	686b      	ldr	r3, [r5, #4]
 800e4be:	3201      	adds	r2, #1
 800e4c0:	602a      	str	r2, [r5, #0]
 800e4c2:	68a2      	ldr	r2, [r4, #8]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	3a01      	subs	r2, #1
 800e4c8:	606b      	str	r3, [r5, #4]
 800e4ca:	3701      	adds	r7, #1
 800e4cc:	60a2      	str	r2, [r4, #8]
 800e4ce:	b142      	cbz	r2, 800e4e2 <_scanf_chars+0x8e>
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dcd7      	bgt.n	800e484 <_scanf_chars+0x30>
 800e4d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4640      	mov	r0, r8
 800e4dc:	4798      	blx	r3
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d0d0      	beq.n	800e484 <_scanf_chars+0x30>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	f013 0310 	ands.w	r3, r3, #16
 800e4e8:	d105      	bne.n	800e4f6 <_scanf_chars+0xa2>
 800e4ea:	68e2      	ldr	r2, [r4, #12]
 800e4ec:	3201      	adds	r2, #1
 800e4ee:	60e2      	str	r2, [r4, #12]
 800e4f0:	69a2      	ldr	r2, [r4, #24]
 800e4f2:	b102      	cbz	r2, 800e4f6 <_scanf_chars+0xa2>
 800e4f4:	7033      	strb	r3, [r6, #0]
 800e4f6:	6923      	ldr	r3, [r4, #16]
 800e4f8:	443b      	add	r3, r7
 800e4fa:	6123      	str	r3, [r4, #16]
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e502:	bf00      	nop
 800e504:	080112a1 	.word	0x080112a1

0800e508 <_scanf_i>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4698      	mov	r8, r3
 800e50e:	4b76      	ldr	r3, [pc, #472]	; (800e6e8 <_scanf_i+0x1e0>)
 800e510:	460c      	mov	r4, r1
 800e512:	4682      	mov	sl, r0
 800e514:	4616      	mov	r6, r2
 800e516:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e51a:	b087      	sub	sp, #28
 800e51c:	ab03      	add	r3, sp, #12
 800e51e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e522:	4b72      	ldr	r3, [pc, #456]	; (800e6ec <_scanf_i+0x1e4>)
 800e524:	69a1      	ldr	r1, [r4, #24]
 800e526:	4a72      	ldr	r2, [pc, #456]	; (800e6f0 <_scanf_i+0x1e8>)
 800e528:	2903      	cmp	r1, #3
 800e52a:	bf18      	it	ne
 800e52c:	461a      	movne	r2, r3
 800e52e:	68a3      	ldr	r3, [r4, #8]
 800e530:	9201      	str	r2, [sp, #4]
 800e532:	1e5a      	subs	r2, r3, #1
 800e534:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e538:	bf88      	it	hi
 800e53a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e53e:	4627      	mov	r7, r4
 800e540:	bf82      	ittt	hi
 800e542:	eb03 0905 	addhi.w	r9, r3, r5
 800e546:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e54a:	60a3      	strhi	r3, [r4, #8]
 800e54c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e550:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e554:	bf98      	it	ls
 800e556:	f04f 0900 	movls.w	r9, #0
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	463d      	mov	r5, r7
 800e55e:	f04f 0b00 	mov.w	fp, #0
 800e562:	6831      	ldr	r1, [r6, #0]
 800e564:	ab03      	add	r3, sp, #12
 800e566:	7809      	ldrb	r1, [r1, #0]
 800e568:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e56c:	2202      	movs	r2, #2
 800e56e:	f7f1 fe57 	bl	8000220 <memchr>
 800e572:	b328      	cbz	r0, 800e5c0 <_scanf_i+0xb8>
 800e574:	f1bb 0f01 	cmp.w	fp, #1
 800e578:	d159      	bne.n	800e62e <_scanf_i+0x126>
 800e57a:	6862      	ldr	r2, [r4, #4]
 800e57c:	b92a      	cbnz	r2, 800e58a <_scanf_i+0x82>
 800e57e:	6822      	ldr	r2, [r4, #0]
 800e580:	2308      	movs	r3, #8
 800e582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e586:	6063      	str	r3, [r4, #4]
 800e588:	6022      	str	r2, [r4, #0]
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e590:	6022      	str	r2, [r4, #0]
 800e592:	68a2      	ldr	r2, [r4, #8]
 800e594:	1e51      	subs	r1, r2, #1
 800e596:	60a1      	str	r1, [r4, #8]
 800e598:	b192      	cbz	r2, 800e5c0 <_scanf_i+0xb8>
 800e59a:	6832      	ldr	r2, [r6, #0]
 800e59c:	1c51      	adds	r1, r2, #1
 800e59e:	6031      	str	r1, [r6, #0]
 800e5a0:	7812      	ldrb	r2, [r2, #0]
 800e5a2:	f805 2b01 	strb.w	r2, [r5], #1
 800e5a6:	6872      	ldr	r2, [r6, #4]
 800e5a8:	3a01      	subs	r2, #1
 800e5aa:	2a00      	cmp	r2, #0
 800e5ac:	6072      	str	r2, [r6, #4]
 800e5ae:	dc07      	bgt.n	800e5c0 <_scanf_i+0xb8>
 800e5b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4650      	mov	r0, sl
 800e5b8:	4790      	blx	r2
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	f040 8085 	bne.w	800e6ca <_scanf_i+0x1c2>
 800e5c0:	f10b 0b01 	add.w	fp, fp, #1
 800e5c4:	f1bb 0f03 	cmp.w	fp, #3
 800e5c8:	d1cb      	bne.n	800e562 <_scanf_i+0x5a>
 800e5ca:	6863      	ldr	r3, [r4, #4]
 800e5cc:	b90b      	cbnz	r3, 800e5d2 <_scanf_i+0xca>
 800e5ce:	230a      	movs	r3, #10
 800e5d0:	6063      	str	r3, [r4, #4]
 800e5d2:	6863      	ldr	r3, [r4, #4]
 800e5d4:	4947      	ldr	r1, [pc, #284]	; (800e6f4 <_scanf_i+0x1ec>)
 800e5d6:	6960      	ldr	r0, [r4, #20]
 800e5d8:	1ac9      	subs	r1, r1, r3
 800e5da:	f000 f8b9 	bl	800e750 <__sccl>
 800e5de:	f04f 0b00 	mov.w	fp, #0
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	6822      	ldr	r2, [r4, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d03d      	beq.n	800e666 <_scanf_i+0x15e>
 800e5ea:	6831      	ldr	r1, [r6, #0]
 800e5ec:	6960      	ldr	r0, [r4, #20]
 800e5ee:	f891 c000 	ldrb.w	ip, [r1]
 800e5f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d035      	beq.n	800e666 <_scanf_i+0x15e>
 800e5fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e5fe:	d124      	bne.n	800e64a <_scanf_i+0x142>
 800e600:	0510      	lsls	r0, r2, #20
 800e602:	d522      	bpl.n	800e64a <_scanf_i+0x142>
 800e604:	f10b 0b01 	add.w	fp, fp, #1
 800e608:	f1b9 0f00 	cmp.w	r9, #0
 800e60c:	d003      	beq.n	800e616 <_scanf_i+0x10e>
 800e60e:	3301      	adds	r3, #1
 800e610:	f109 39ff 	add.w	r9, r9, #4294967295
 800e614:	60a3      	str	r3, [r4, #8]
 800e616:	6873      	ldr	r3, [r6, #4]
 800e618:	3b01      	subs	r3, #1
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	6073      	str	r3, [r6, #4]
 800e61e:	dd1b      	ble.n	800e658 <_scanf_i+0x150>
 800e620:	6833      	ldr	r3, [r6, #0]
 800e622:	3301      	adds	r3, #1
 800e624:	6033      	str	r3, [r6, #0]
 800e626:	68a3      	ldr	r3, [r4, #8]
 800e628:	3b01      	subs	r3, #1
 800e62a:	60a3      	str	r3, [r4, #8]
 800e62c:	e7d9      	b.n	800e5e2 <_scanf_i+0xda>
 800e62e:	f1bb 0f02 	cmp.w	fp, #2
 800e632:	d1ae      	bne.n	800e592 <_scanf_i+0x8a>
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e63a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e63e:	d1bf      	bne.n	800e5c0 <_scanf_i+0xb8>
 800e640:	2310      	movs	r3, #16
 800e642:	6063      	str	r3, [r4, #4]
 800e644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e648:	e7a2      	b.n	800e590 <_scanf_i+0x88>
 800e64a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e64e:	6022      	str	r2, [r4, #0]
 800e650:	780b      	ldrb	r3, [r1, #0]
 800e652:	f805 3b01 	strb.w	r3, [r5], #1
 800e656:	e7de      	b.n	800e616 <_scanf_i+0x10e>
 800e658:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e65c:	4631      	mov	r1, r6
 800e65e:	4650      	mov	r0, sl
 800e660:	4798      	blx	r3
 800e662:	2800      	cmp	r0, #0
 800e664:	d0df      	beq.n	800e626 <_scanf_i+0x11e>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	05db      	lsls	r3, r3, #23
 800e66a:	d50d      	bpl.n	800e688 <_scanf_i+0x180>
 800e66c:	42bd      	cmp	r5, r7
 800e66e:	d909      	bls.n	800e684 <_scanf_i+0x17c>
 800e670:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e678:	4632      	mov	r2, r6
 800e67a:	4650      	mov	r0, sl
 800e67c:	4798      	blx	r3
 800e67e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e682:	464d      	mov	r5, r9
 800e684:	42bd      	cmp	r5, r7
 800e686:	d02d      	beq.n	800e6e4 <_scanf_i+0x1dc>
 800e688:	6822      	ldr	r2, [r4, #0]
 800e68a:	f012 0210 	ands.w	r2, r2, #16
 800e68e:	d113      	bne.n	800e6b8 <_scanf_i+0x1b0>
 800e690:	702a      	strb	r2, [r5, #0]
 800e692:	6863      	ldr	r3, [r4, #4]
 800e694:	9e01      	ldr	r6, [sp, #4]
 800e696:	4639      	mov	r1, r7
 800e698:	4650      	mov	r0, sl
 800e69a:	47b0      	blx	r6
 800e69c:	6821      	ldr	r1, [r4, #0]
 800e69e:	f8d8 3000 	ldr.w	r3, [r8]
 800e6a2:	f011 0f20 	tst.w	r1, #32
 800e6a6:	d013      	beq.n	800e6d0 <_scanf_i+0x1c8>
 800e6a8:	1d1a      	adds	r2, r3, #4
 800e6aa:	f8c8 2000 	str.w	r2, [r8]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6018      	str	r0, [r3, #0]
 800e6b2:	68e3      	ldr	r3, [r4, #12]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	60e3      	str	r3, [r4, #12]
 800e6b8:	1bed      	subs	r5, r5, r7
 800e6ba:	44ab      	add	fp, r5
 800e6bc:	6925      	ldr	r5, [r4, #16]
 800e6be:	445d      	add	r5, fp
 800e6c0:	6125      	str	r5, [r4, #16]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	b007      	add	sp, #28
 800e6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ca:	f04f 0b00 	mov.w	fp, #0
 800e6ce:	e7ca      	b.n	800e666 <_scanf_i+0x15e>
 800e6d0:	1d1a      	adds	r2, r3, #4
 800e6d2:	f8c8 2000 	str.w	r2, [r8]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f011 0f01 	tst.w	r1, #1
 800e6dc:	bf14      	ite	ne
 800e6de:	8018      	strhne	r0, [r3, #0]
 800e6e0:	6018      	streq	r0, [r3, #0]
 800e6e2:	e7e6      	b.n	800e6b2 <_scanf_i+0x1aa>
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	e7ed      	b.n	800e6c4 <_scanf_i+0x1bc>
 800e6e8:	080111e4 	.word	0x080111e4
 800e6ec:	0800e8cd 	.word	0x0800e8cd
 800e6f0:	0800bded 	.word	0x0800bded
 800e6f4:	0801162e 	.word	0x0801162e

0800e6f8 <_read_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d07      	ldr	r5, [pc, #28]	; (800e718 <_read_r+0x20>)
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	4608      	mov	r0, r1
 800e700:	4611      	mov	r1, r2
 800e702:	2200      	movs	r2, #0
 800e704:	602a      	str	r2, [r5, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	f7f6 fc06 	bl	8004f18 <_read>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_read_r+0x1e>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_read_r+0x1e>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	20001174 	.word	0x20001174
 800e71c:	00000000 	.word	0x00000000

0800e720 <nan>:
 800e720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e728 <nan+0x8>
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	00000000 	.word	0x00000000
 800e72c:	7ff80000 	.word	0x7ff80000

0800e730 <_sbrk_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4d06      	ldr	r5, [pc, #24]	; (800e74c <_sbrk_r+0x1c>)
 800e734:	2300      	movs	r3, #0
 800e736:	4604      	mov	r4, r0
 800e738:	4608      	mov	r0, r1
 800e73a:	602b      	str	r3, [r5, #0]
 800e73c:	f7f6 fc5a 	bl	8004ff4 <_sbrk>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	d102      	bne.n	800e74a <_sbrk_r+0x1a>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	b103      	cbz	r3, 800e74a <_sbrk_r+0x1a>
 800e748:	6023      	str	r3, [r4, #0]
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	20001174 	.word	0x20001174

0800e750 <__sccl>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	780b      	ldrb	r3, [r1, #0]
 800e754:	4604      	mov	r4, r0
 800e756:	2b5e      	cmp	r3, #94	; 0x5e
 800e758:	bf0b      	itete	eq
 800e75a:	784b      	ldrbeq	r3, [r1, #1]
 800e75c:	1c48      	addne	r0, r1, #1
 800e75e:	1c88      	addeq	r0, r1, #2
 800e760:	2200      	movne	r2, #0
 800e762:	bf08      	it	eq
 800e764:	2201      	moveq	r2, #1
 800e766:	1e61      	subs	r1, r4, #1
 800e768:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e76c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e770:	42a9      	cmp	r1, r5
 800e772:	d1fb      	bne.n	800e76c <__sccl+0x1c>
 800e774:	b90b      	cbnz	r3, 800e77a <__sccl+0x2a>
 800e776:	3801      	subs	r0, #1
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	f082 0201 	eor.w	r2, r2, #1
 800e77e:	54e2      	strb	r2, [r4, r3]
 800e780:	4605      	mov	r5, r0
 800e782:	4628      	mov	r0, r5
 800e784:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e788:	292d      	cmp	r1, #45	; 0x2d
 800e78a:	d006      	beq.n	800e79a <__sccl+0x4a>
 800e78c:	295d      	cmp	r1, #93	; 0x5d
 800e78e:	d0f3      	beq.n	800e778 <__sccl+0x28>
 800e790:	b909      	cbnz	r1, 800e796 <__sccl+0x46>
 800e792:	4628      	mov	r0, r5
 800e794:	e7f0      	b.n	800e778 <__sccl+0x28>
 800e796:	460b      	mov	r3, r1
 800e798:	e7f1      	b.n	800e77e <__sccl+0x2e>
 800e79a:	786e      	ldrb	r6, [r5, #1]
 800e79c:	2e5d      	cmp	r6, #93	; 0x5d
 800e79e:	d0fa      	beq.n	800e796 <__sccl+0x46>
 800e7a0:	42b3      	cmp	r3, r6
 800e7a2:	dcf8      	bgt.n	800e796 <__sccl+0x46>
 800e7a4:	3502      	adds	r5, #2
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	3101      	adds	r1, #1
 800e7aa:	428e      	cmp	r6, r1
 800e7ac:	5462      	strb	r2, [r4, r1]
 800e7ae:	dcfb      	bgt.n	800e7a8 <__sccl+0x58>
 800e7b0:	1af1      	subs	r1, r6, r3
 800e7b2:	3901      	subs	r1, #1
 800e7b4:	1c58      	adds	r0, r3, #1
 800e7b6:	42b3      	cmp	r3, r6
 800e7b8:	bfa8      	it	ge
 800e7ba:	2100      	movge	r1, #0
 800e7bc:	1843      	adds	r3, r0, r1
 800e7be:	e7e0      	b.n	800e782 <__sccl+0x32>

0800e7c0 <strncmp>:
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	b17a      	cbz	r2, 800e7e4 <strncmp+0x24>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	3901      	subs	r1, #1
 800e7c8:	1884      	adds	r4, r0, r2
 800e7ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7d2:	4290      	cmp	r0, r2
 800e7d4:	d101      	bne.n	800e7da <strncmp+0x1a>
 800e7d6:	42a3      	cmp	r3, r4
 800e7d8:	d101      	bne.n	800e7de <strncmp+0x1e>
 800e7da:	1a80      	subs	r0, r0, r2
 800e7dc:	bd10      	pop	{r4, pc}
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d1f3      	bne.n	800e7ca <strncmp+0xa>
 800e7e2:	e7fa      	b.n	800e7da <strncmp+0x1a>
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	e7f9      	b.n	800e7dc <strncmp+0x1c>

0800e7e8 <_strtoul_l.constprop.0>:
 800e7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	4f36      	ldr	r7, [pc, #216]	; (800e8c8 <_strtoul_l.constprop.0+0xe0>)
 800e7ee:	4686      	mov	lr, r0
 800e7f0:	460d      	mov	r5, r1
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7f8:	5de6      	ldrb	r6, [r4, r7]
 800e7fa:	f016 0608 	ands.w	r6, r6, #8
 800e7fe:	d1f8      	bne.n	800e7f2 <_strtoul_l.constprop.0+0xa>
 800e800:	2c2d      	cmp	r4, #45	; 0x2d
 800e802:	d12f      	bne.n	800e864 <_strtoul_l.constprop.0+0x7c>
 800e804:	782c      	ldrb	r4, [r5, #0]
 800e806:	2601      	movs	r6, #1
 800e808:	1c85      	adds	r5, r0, #2
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d057      	beq.n	800e8be <_strtoul_l.constprop.0+0xd6>
 800e80e:	2b10      	cmp	r3, #16
 800e810:	d109      	bne.n	800e826 <_strtoul_l.constprop.0+0x3e>
 800e812:	2c30      	cmp	r4, #48	; 0x30
 800e814:	d107      	bne.n	800e826 <_strtoul_l.constprop.0+0x3e>
 800e816:	7828      	ldrb	r0, [r5, #0]
 800e818:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e81c:	2858      	cmp	r0, #88	; 0x58
 800e81e:	d149      	bne.n	800e8b4 <_strtoul_l.constprop.0+0xcc>
 800e820:	786c      	ldrb	r4, [r5, #1]
 800e822:	2310      	movs	r3, #16
 800e824:	3502      	adds	r5, #2
 800e826:	f04f 38ff 	mov.w	r8, #4294967295
 800e82a:	2700      	movs	r7, #0
 800e82c:	fbb8 f8f3 	udiv	r8, r8, r3
 800e830:	fb03 f908 	mul.w	r9, r3, r8
 800e834:	ea6f 0909 	mvn.w	r9, r9
 800e838:	4638      	mov	r0, r7
 800e83a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e83e:	f1bc 0f09 	cmp.w	ip, #9
 800e842:	d814      	bhi.n	800e86e <_strtoul_l.constprop.0+0x86>
 800e844:	4664      	mov	r4, ip
 800e846:	42a3      	cmp	r3, r4
 800e848:	dd22      	ble.n	800e890 <_strtoul_l.constprop.0+0xa8>
 800e84a:	2f00      	cmp	r7, #0
 800e84c:	db1d      	blt.n	800e88a <_strtoul_l.constprop.0+0xa2>
 800e84e:	4580      	cmp	r8, r0
 800e850:	d31b      	bcc.n	800e88a <_strtoul_l.constprop.0+0xa2>
 800e852:	d101      	bne.n	800e858 <_strtoul_l.constprop.0+0x70>
 800e854:	45a1      	cmp	r9, r4
 800e856:	db18      	blt.n	800e88a <_strtoul_l.constprop.0+0xa2>
 800e858:	fb00 4003 	mla	r0, r0, r3, r4
 800e85c:	2701      	movs	r7, #1
 800e85e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e862:	e7ea      	b.n	800e83a <_strtoul_l.constprop.0+0x52>
 800e864:	2c2b      	cmp	r4, #43	; 0x2b
 800e866:	bf04      	itt	eq
 800e868:	782c      	ldrbeq	r4, [r5, #0]
 800e86a:	1c85      	addeq	r5, r0, #2
 800e86c:	e7cd      	b.n	800e80a <_strtoul_l.constprop.0+0x22>
 800e86e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e872:	f1bc 0f19 	cmp.w	ip, #25
 800e876:	d801      	bhi.n	800e87c <_strtoul_l.constprop.0+0x94>
 800e878:	3c37      	subs	r4, #55	; 0x37
 800e87a:	e7e4      	b.n	800e846 <_strtoul_l.constprop.0+0x5e>
 800e87c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e880:	f1bc 0f19 	cmp.w	ip, #25
 800e884:	d804      	bhi.n	800e890 <_strtoul_l.constprop.0+0xa8>
 800e886:	3c57      	subs	r4, #87	; 0x57
 800e888:	e7dd      	b.n	800e846 <_strtoul_l.constprop.0+0x5e>
 800e88a:	f04f 37ff 	mov.w	r7, #4294967295
 800e88e:	e7e6      	b.n	800e85e <_strtoul_l.constprop.0+0x76>
 800e890:	2f00      	cmp	r7, #0
 800e892:	da07      	bge.n	800e8a4 <_strtoul_l.constprop.0+0xbc>
 800e894:	2322      	movs	r3, #34	; 0x22
 800e896:	f8ce 3000 	str.w	r3, [lr]
 800e89a:	f04f 30ff 	mov.w	r0, #4294967295
 800e89e:	b932      	cbnz	r2, 800e8ae <_strtoul_l.constprop.0+0xc6>
 800e8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8a4:	b106      	cbz	r6, 800e8a8 <_strtoul_l.constprop.0+0xc0>
 800e8a6:	4240      	negs	r0, r0
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	d0f9      	beq.n	800e8a0 <_strtoul_l.constprop.0+0xb8>
 800e8ac:	b107      	cbz	r7, 800e8b0 <_strtoul_l.constprop.0+0xc8>
 800e8ae:	1e69      	subs	r1, r5, #1
 800e8b0:	6011      	str	r1, [r2, #0]
 800e8b2:	e7f5      	b.n	800e8a0 <_strtoul_l.constprop.0+0xb8>
 800e8b4:	2430      	movs	r4, #48	; 0x30
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d1b5      	bne.n	800e826 <_strtoul_l.constprop.0+0x3e>
 800e8ba:	2308      	movs	r3, #8
 800e8bc:	e7b3      	b.n	800e826 <_strtoul_l.constprop.0+0x3e>
 800e8be:	2c30      	cmp	r4, #48	; 0x30
 800e8c0:	d0a9      	beq.n	800e816 <_strtoul_l.constprop.0+0x2e>
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	e7af      	b.n	800e826 <_strtoul_l.constprop.0+0x3e>
 800e8c6:	bf00      	nop
 800e8c8:	080112a1 	.word	0x080112a1

0800e8cc <_strtoul_r>:
 800e8cc:	f7ff bf8c 	b.w	800e7e8 <_strtoul_l.constprop.0>

0800e8d0 <__submore>:
 800e8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e8d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8dc:	4299      	cmp	r1, r3
 800e8de:	d11d      	bne.n	800e91c <__submore+0x4c>
 800e8e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e8e4:	f7ff fa14 	bl	800dd10 <_malloc_r>
 800e8e8:	b918      	cbnz	r0, 800e8f2 <__submore+0x22>
 800e8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e8fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e902:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e906:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e90a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e90e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e912:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e916:	6020      	str	r0, [r4, #0]
 800e918:	2000      	movs	r0, #0
 800e91a:	e7e8      	b.n	800e8ee <__submore+0x1e>
 800e91c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e91e:	0077      	lsls	r7, r6, #1
 800e920:	463a      	mov	r2, r7
 800e922:	f000 fa2d 	bl	800ed80 <_realloc_r>
 800e926:	4605      	mov	r5, r0
 800e928:	2800      	cmp	r0, #0
 800e92a:	d0de      	beq.n	800e8ea <__submore+0x1a>
 800e92c:	eb00 0806 	add.w	r8, r0, r6
 800e930:	4601      	mov	r1, r0
 800e932:	4632      	mov	r2, r6
 800e934:	4640      	mov	r0, r8
 800e936:	f7fe fc99 	bl	800d26c <memcpy>
 800e93a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e93e:	f8c4 8000 	str.w	r8, [r4]
 800e942:	e7e9      	b.n	800e918 <__submore+0x48>

0800e944 <__ascii_wctomb>:
 800e944:	b149      	cbz	r1, 800e95a <__ascii_wctomb+0x16>
 800e946:	2aff      	cmp	r2, #255	; 0xff
 800e948:	bf85      	ittet	hi
 800e94a:	238a      	movhi	r3, #138	; 0x8a
 800e94c:	6003      	strhi	r3, [r0, #0]
 800e94e:	700a      	strbls	r2, [r1, #0]
 800e950:	f04f 30ff 	movhi.w	r0, #4294967295
 800e954:	bf98      	it	ls
 800e956:	2001      	movls	r0, #1
 800e958:	4770      	bx	lr
 800e95a:	4608      	mov	r0, r1
 800e95c:	4770      	bx	lr
	...

0800e960 <__assert_func>:
 800e960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e962:	4614      	mov	r4, r2
 800e964:	461a      	mov	r2, r3
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <__assert_func+0x2c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4605      	mov	r5, r0
 800e96c:	68d8      	ldr	r0, [r3, #12]
 800e96e:	b14c      	cbz	r4, 800e984 <__assert_func+0x24>
 800e970:	4b07      	ldr	r3, [pc, #28]	; (800e990 <__assert_func+0x30>)
 800e972:	9100      	str	r1, [sp, #0]
 800e974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e978:	4906      	ldr	r1, [pc, #24]	; (800e994 <__assert_func+0x34>)
 800e97a:	462b      	mov	r3, r5
 800e97c:	f000 f9a6 	bl	800eccc <fiprintf>
 800e980:	f000 fc46 	bl	800f210 <abort>
 800e984:	4b04      	ldr	r3, [pc, #16]	; (800e998 <__assert_func+0x38>)
 800e986:	461c      	mov	r4, r3
 800e988:	e7f3      	b.n	800e972 <__assert_func+0x12>
 800e98a:	bf00      	nop
 800e98c:	20000014 	.word	0x20000014
 800e990:	08011630 	.word	0x08011630
 800e994:	0801163d 	.word	0x0801163d
 800e998:	0801166b 	.word	0x0801166b

0800e99c <__sflush_r>:
 800e99c:	898a      	ldrh	r2, [r1, #12]
 800e99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a2:	4605      	mov	r5, r0
 800e9a4:	0710      	lsls	r0, r2, #28
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	d458      	bmi.n	800ea5c <__sflush_r+0xc0>
 800e9aa:	684b      	ldr	r3, [r1, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	dc05      	bgt.n	800e9bc <__sflush_r+0x20>
 800e9b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dc02      	bgt.n	800e9bc <__sflush_r+0x20>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9be:	2e00      	cmp	r6, #0
 800e9c0:	d0f9      	beq.n	800e9b6 <__sflush_r+0x1a>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9c8:	682f      	ldr	r7, [r5, #0]
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	d032      	beq.n	800ea34 <__sflush_r+0x98>
 800e9ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9d0:	89a3      	ldrh	r3, [r4, #12]
 800e9d2:	075a      	lsls	r2, r3, #29
 800e9d4:	d505      	bpl.n	800e9e2 <__sflush_r+0x46>
 800e9d6:	6863      	ldr	r3, [r4, #4]
 800e9d8:	1ac0      	subs	r0, r0, r3
 800e9da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9dc:	b10b      	cbz	r3, 800e9e2 <__sflush_r+0x46>
 800e9de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9e0:	1ac0      	subs	r0, r0, r3
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9e8:	6a21      	ldr	r1, [r4, #32]
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	47b0      	blx	r6
 800e9ee:	1c43      	adds	r3, r0, #1
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	d106      	bne.n	800ea02 <__sflush_r+0x66>
 800e9f4:	6829      	ldr	r1, [r5, #0]
 800e9f6:	291d      	cmp	r1, #29
 800e9f8:	d82c      	bhi.n	800ea54 <__sflush_r+0xb8>
 800e9fa:	4a2a      	ldr	r2, [pc, #168]	; (800eaa4 <__sflush_r+0x108>)
 800e9fc:	40ca      	lsrs	r2, r1
 800e9fe:	07d6      	lsls	r6, r2, #31
 800ea00:	d528      	bpl.n	800ea54 <__sflush_r+0xb8>
 800ea02:	2200      	movs	r2, #0
 800ea04:	6062      	str	r2, [r4, #4]
 800ea06:	04d9      	lsls	r1, r3, #19
 800ea08:	6922      	ldr	r2, [r4, #16]
 800ea0a:	6022      	str	r2, [r4, #0]
 800ea0c:	d504      	bpl.n	800ea18 <__sflush_r+0x7c>
 800ea0e:	1c42      	adds	r2, r0, #1
 800ea10:	d101      	bne.n	800ea16 <__sflush_r+0x7a>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	b903      	cbnz	r3, 800ea18 <__sflush_r+0x7c>
 800ea16:	6560      	str	r0, [r4, #84]	; 0x54
 800ea18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea1a:	602f      	str	r7, [r5, #0]
 800ea1c:	2900      	cmp	r1, #0
 800ea1e:	d0ca      	beq.n	800e9b6 <__sflush_r+0x1a>
 800ea20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea24:	4299      	cmp	r1, r3
 800ea26:	d002      	beq.n	800ea2e <__sflush_r+0x92>
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f7ff f905 	bl	800dc38 <_free_r>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	6360      	str	r0, [r4, #52]	; 0x34
 800ea32:	e7c1      	b.n	800e9b8 <__sflush_r+0x1c>
 800ea34:	6a21      	ldr	r1, [r4, #32]
 800ea36:	2301      	movs	r3, #1
 800ea38:	4628      	mov	r0, r5
 800ea3a:	47b0      	blx	r6
 800ea3c:	1c41      	adds	r1, r0, #1
 800ea3e:	d1c7      	bne.n	800e9d0 <__sflush_r+0x34>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0c4      	beq.n	800e9d0 <__sflush_r+0x34>
 800ea46:	2b1d      	cmp	r3, #29
 800ea48:	d001      	beq.n	800ea4e <__sflush_r+0xb2>
 800ea4a:	2b16      	cmp	r3, #22
 800ea4c:	d101      	bne.n	800ea52 <__sflush_r+0xb6>
 800ea4e:	602f      	str	r7, [r5, #0]
 800ea50:	e7b1      	b.n	800e9b6 <__sflush_r+0x1a>
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea58:	81a3      	strh	r3, [r4, #12]
 800ea5a:	e7ad      	b.n	800e9b8 <__sflush_r+0x1c>
 800ea5c:	690f      	ldr	r7, [r1, #16]
 800ea5e:	2f00      	cmp	r7, #0
 800ea60:	d0a9      	beq.n	800e9b6 <__sflush_r+0x1a>
 800ea62:	0793      	lsls	r3, r2, #30
 800ea64:	680e      	ldr	r6, [r1, #0]
 800ea66:	bf08      	it	eq
 800ea68:	694b      	ldreq	r3, [r1, #20]
 800ea6a:	600f      	str	r7, [r1, #0]
 800ea6c:	bf18      	it	ne
 800ea6e:	2300      	movne	r3, #0
 800ea70:	eba6 0807 	sub.w	r8, r6, r7
 800ea74:	608b      	str	r3, [r1, #8]
 800ea76:	f1b8 0f00 	cmp.w	r8, #0
 800ea7a:	dd9c      	ble.n	800e9b6 <__sflush_r+0x1a>
 800ea7c:	6a21      	ldr	r1, [r4, #32]
 800ea7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea80:	4643      	mov	r3, r8
 800ea82:	463a      	mov	r2, r7
 800ea84:	4628      	mov	r0, r5
 800ea86:	47b0      	blx	r6
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	dc06      	bgt.n	800ea9a <__sflush_r+0xfe>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea92:	81a3      	strh	r3, [r4, #12]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e78e      	b.n	800e9b8 <__sflush_r+0x1c>
 800ea9a:	4407      	add	r7, r0
 800ea9c:	eba8 0800 	sub.w	r8, r8, r0
 800eaa0:	e7e9      	b.n	800ea76 <__sflush_r+0xda>
 800eaa2:	bf00      	nop
 800eaa4:	20400001 	.word	0x20400001

0800eaa8 <_fflush_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	690b      	ldr	r3, [r1, #16]
 800eaac:	4605      	mov	r5, r0
 800eaae:	460c      	mov	r4, r1
 800eab0:	b913      	cbnz	r3, 800eab8 <_fflush_r+0x10>
 800eab2:	2500      	movs	r5, #0
 800eab4:	4628      	mov	r0, r5
 800eab6:	bd38      	pop	{r3, r4, r5, pc}
 800eab8:	b118      	cbz	r0, 800eac2 <_fflush_r+0x1a>
 800eaba:	6983      	ldr	r3, [r0, #24]
 800eabc:	b90b      	cbnz	r3, 800eac2 <_fflush_r+0x1a>
 800eabe:	f000 f887 	bl	800ebd0 <__sinit>
 800eac2:	4b14      	ldr	r3, [pc, #80]	; (800eb14 <_fflush_r+0x6c>)
 800eac4:	429c      	cmp	r4, r3
 800eac6:	d11b      	bne.n	800eb00 <_fflush_r+0x58>
 800eac8:	686c      	ldr	r4, [r5, #4]
 800eaca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0ef      	beq.n	800eab2 <_fflush_r+0xa>
 800ead2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ead4:	07d0      	lsls	r0, r2, #31
 800ead6:	d404      	bmi.n	800eae2 <_fflush_r+0x3a>
 800ead8:	0599      	lsls	r1, r3, #22
 800eada:	d402      	bmi.n	800eae2 <_fflush_r+0x3a>
 800eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eade:	f000 f927 	bl	800ed30 <__retarget_lock_acquire_recursive>
 800eae2:	4628      	mov	r0, r5
 800eae4:	4621      	mov	r1, r4
 800eae6:	f7ff ff59 	bl	800e99c <__sflush_r>
 800eaea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaec:	07da      	lsls	r2, r3, #31
 800eaee:	4605      	mov	r5, r0
 800eaf0:	d4e0      	bmi.n	800eab4 <_fflush_r+0xc>
 800eaf2:	89a3      	ldrh	r3, [r4, #12]
 800eaf4:	059b      	lsls	r3, r3, #22
 800eaf6:	d4dd      	bmi.n	800eab4 <_fflush_r+0xc>
 800eaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eafa:	f000 f91a 	bl	800ed32 <__retarget_lock_release_recursive>
 800eafe:	e7d9      	b.n	800eab4 <_fflush_r+0xc>
 800eb00:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <_fflush_r+0x70>)
 800eb02:	429c      	cmp	r4, r3
 800eb04:	d101      	bne.n	800eb0a <_fflush_r+0x62>
 800eb06:	68ac      	ldr	r4, [r5, #8]
 800eb08:	e7df      	b.n	800eaca <_fflush_r+0x22>
 800eb0a:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <_fflush_r+0x74>)
 800eb0c:	429c      	cmp	r4, r3
 800eb0e:	bf08      	it	eq
 800eb10:	68ec      	ldreq	r4, [r5, #12]
 800eb12:	e7da      	b.n	800eaca <_fflush_r+0x22>
 800eb14:	0801168c 	.word	0x0801168c
 800eb18:	080116ac 	.word	0x080116ac
 800eb1c:	0801166c 	.word	0x0801166c

0800eb20 <std>:
 800eb20:	2300      	movs	r3, #0
 800eb22:	b510      	push	{r4, lr}
 800eb24:	4604      	mov	r4, r0
 800eb26:	e9c0 3300 	strd	r3, r3, [r0]
 800eb2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb2e:	6083      	str	r3, [r0, #8]
 800eb30:	8181      	strh	r1, [r0, #12]
 800eb32:	6643      	str	r3, [r0, #100]	; 0x64
 800eb34:	81c2      	strh	r2, [r0, #14]
 800eb36:	6183      	str	r3, [r0, #24]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	2208      	movs	r2, #8
 800eb3c:	305c      	adds	r0, #92	; 0x5c
 800eb3e:	f7fb fb73 	bl	800a228 <memset>
 800eb42:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <std+0x38>)
 800eb44:	6263      	str	r3, [r4, #36]	; 0x24
 800eb46:	4b05      	ldr	r3, [pc, #20]	; (800eb5c <std+0x3c>)
 800eb48:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb4a:	4b05      	ldr	r3, [pc, #20]	; (800eb60 <std+0x40>)
 800eb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb4e:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <std+0x44>)
 800eb50:	6224      	str	r4, [r4, #32]
 800eb52:	6323      	str	r3, [r4, #48]	; 0x30
 800eb54:	bd10      	pop	{r4, pc}
 800eb56:	bf00      	nop
 800eb58:	0800afd1 	.word	0x0800afd1
 800eb5c:	0800aff7 	.word	0x0800aff7
 800eb60:	0800b02f 	.word	0x0800b02f
 800eb64:	0800b053 	.word	0x0800b053

0800eb68 <_cleanup_r>:
 800eb68:	4901      	ldr	r1, [pc, #4]	; (800eb70 <_cleanup_r+0x8>)
 800eb6a:	f000 b8c1 	b.w	800ecf0 <_fwalk_reent>
 800eb6e:	bf00      	nop
 800eb70:	0800eaa9 	.word	0x0800eaa9

0800eb74 <__sfmoreglue>:
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	2268      	movs	r2, #104	; 0x68
 800eb78:	1e4d      	subs	r5, r1, #1
 800eb7a:	4355      	muls	r5, r2
 800eb7c:	460e      	mov	r6, r1
 800eb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb82:	f7ff f8c5 	bl	800dd10 <_malloc_r>
 800eb86:	4604      	mov	r4, r0
 800eb88:	b140      	cbz	r0, 800eb9c <__sfmoreglue+0x28>
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb90:	300c      	adds	r0, #12
 800eb92:	60a0      	str	r0, [r4, #8]
 800eb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb98:	f7fb fb46 	bl	800a228 <memset>
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}

0800eba0 <__sfp_lock_acquire>:
 800eba0:	4801      	ldr	r0, [pc, #4]	; (800eba8 <__sfp_lock_acquire+0x8>)
 800eba2:	f000 b8c5 	b.w	800ed30 <__retarget_lock_acquire_recursive>
 800eba6:	bf00      	nop
 800eba8:	20001179 	.word	0x20001179

0800ebac <__sfp_lock_release>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__sfp_lock_release+0x8>)
 800ebae:	f000 b8c0 	b.w	800ed32 <__retarget_lock_release_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	20001179 	.word	0x20001179

0800ebb8 <__sinit_lock_acquire>:
 800ebb8:	4801      	ldr	r0, [pc, #4]	; (800ebc0 <__sinit_lock_acquire+0x8>)
 800ebba:	f000 b8b9 	b.w	800ed30 <__retarget_lock_acquire_recursive>
 800ebbe:	bf00      	nop
 800ebc0:	2000117a 	.word	0x2000117a

0800ebc4 <__sinit_lock_release>:
 800ebc4:	4801      	ldr	r0, [pc, #4]	; (800ebcc <__sinit_lock_release+0x8>)
 800ebc6:	f000 b8b4 	b.w	800ed32 <__retarget_lock_release_recursive>
 800ebca:	bf00      	nop
 800ebcc:	2000117a 	.word	0x2000117a

0800ebd0 <__sinit>:
 800ebd0:	b510      	push	{r4, lr}
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	f7ff fff0 	bl	800ebb8 <__sinit_lock_acquire>
 800ebd8:	69a3      	ldr	r3, [r4, #24]
 800ebda:	b11b      	cbz	r3, 800ebe4 <__sinit+0x14>
 800ebdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe0:	f7ff bff0 	b.w	800ebc4 <__sinit_lock_release>
 800ebe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebe8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebea:	4b13      	ldr	r3, [pc, #76]	; (800ec38 <__sinit+0x68>)
 800ebec:	4a13      	ldr	r2, [pc, #76]	; (800ec3c <__sinit+0x6c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebf2:	42a3      	cmp	r3, r4
 800ebf4:	bf04      	itt	eq
 800ebf6:	2301      	moveq	r3, #1
 800ebf8:	61a3      	streq	r3, [r4, #24]
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 f820 	bl	800ec40 <__sfp>
 800ec00:	6060      	str	r0, [r4, #4]
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 f81c 	bl	800ec40 <__sfp>
 800ec08:	60a0      	str	r0, [r4, #8]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 f818 	bl	800ec40 <__sfp>
 800ec10:	2200      	movs	r2, #0
 800ec12:	60e0      	str	r0, [r4, #12]
 800ec14:	2104      	movs	r1, #4
 800ec16:	6860      	ldr	r0, [r4, #4]
 800ec18:	f7ff ff82 	bl	800eb20 <std>
 800ec1c:	68a0      	ldr	r0, [r4, #8]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	2109      	movs	r1, #9
 800ec22:	f7ff ff7d 	bl	800eb20 <std>
 800ec26:	68e0      	ldr	r0, [r4, #12]
 800ec28:	2202      	movs	r2, #2
 800ec2a:	2112      	movs	r1, #18
 800ec2c:	f7ff ff78 	bl	800eb20 <std>
 800ec30:	2301      	movs	r3, #1
 800ec32:	61a3      	str	r3, [r4, #24]
 800ec34:	e7d2      	b.n	800ebdc <__sinit+0xc>
 800ec36:	bf00      	nop
 800ec38:	08011210 	.word	0x08011210
 800ec3c:	0800eb69 	.word	0x0800eb69

0800ec40 <__sfp>:
 800ec40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec42:	4607      	mov	r7, r0
 800ec44:	f7ff ffac 	bl	800eba0 <__sfp_lock_acquire>
 800ec48:	4b1e      	ldr	r3, [pc, #120]	; (800ecc4 <__sfp+0x84>)
 800ec4a:	681e      	ldr	r6, [r3, #0]
 800ec4c:	69b3      	ldr	r3, [r6, #24]
 800ec4e:	b913      	cbnz	r3, 800ec56 <__sfp+0x16>
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff ffbd 	bl	800ebd0 <__sinit>
 800ec56:	3648      	adds	r6, #72	; 0x48
 800ec58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	d503      	bpl.n	800ec68 <__sfp+0x28>
 800ec60:	6833      	ldr	r3, [r6, #0]
 800ec62:	b30b      	cbz	r3, 800eca8 <__sfp+0x68>
 800ec64:	6836      	ldr	r6, [r6, #0]
 800ec66:	e7f7      	b.n	800ec58 <__sfp+0x18>
 800ec68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec6c:	b9d5      	cbnz	r5, 800eca4 <__sfp+0x64>
 800ec6e:	4b16      	ldr	r3, [pc, #88]	; (800ecc8 <__sfp+0x88>)
 800ec70:	60e3      	str	r3, [r4, #12]
 800ec72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec76:	6665      	str	r5, [r4, #100]	; 0x64
 800ec78:	f000 f859 	bl	800ed2e <__retarget_lock_init_recursive>
 800ec7c:	f7ff ff96 	bl	800ebac <__sfp_lock_release>
 800ec80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec88:	6025      	str	r5, [r4, #0]
 800ec8a:	61a5      	str	r5, [r4, #24]
 800ec8c:	2208      	movs	r2, #8
 800ec8e:	4629      	mov	r1, r5
 800ec90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec94:	f7fb fac8 	bl	800a228 <memset>
 800ec98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eca0:	4620      	mov	r0, r4
 800eca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca4:	3468      	adds	r4, #104	; 0x68
 800eca6:	e7d9      	b.n	800ec5c <__sfp+0x1c>
 800eca8:	2104      	movs	r1, #4
 800ecaa:	4638      	mov	r0, r7
 800ecac:	f7ff ff62 	bl	800eb74 <__sfmoreglue>
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	6030      	str	r0, [r6, #0]
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d1d5      	bne.n	800ec64 <__sfp+0x24>
 800ecb8:	f7ff ff78 	bl	800ebac <__sfp_lock_release>
 800ecbc:	230c      	movs	r3, #12
 800ecbe:	603b      	str	r3, [r7, #0]
 800ecc0:	e7ee      	b.n	800eca0 <__sfp+0x60>
 800ecc2:	bf00      	nop
 800ecc4:	08011210 	.word	0x08011210
 800ecc8:	ffff0001 	.word	0xffff0001

0800eccc <fiprintf>:
 800eccc:	b40e      	push	{r1, r2, r3}
 800ecce:	b503      	push	{r0, r1, lr}
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	ab03      	add	r3, sp, #12
 800ecd4:	4805      	ldr	r0, [pc, #20]	; (800ecec <fiprintf+0x20>)
 800ecd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecda:	6800      	ldr	r0, [r0, #0]
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	f000 f8a7 	bl	800ee30 <_vfiprintf_r>
 800ece2:	b002      	add	sp, #8
 800ece4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ece8:	b003      	add	sp, #12
 800ecea:	4770      	bx	lr
 800ecec:	20000014 	.word	0x20000014

0800ecf0 <_fwalk_reent>:
 800ecf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	4688      	mov	r8, r1
 800ecf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecfc:	2700      	movs	r7, #0
 800ecfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed02:	f1b9 0901 	subs.w	r9, r9, #1
 800ed06:	d505      	bpl.n	800ed14 <_fwalk_reent+0x24>
 800ed08:	6824      	ldr	r4, [r4, #0]
 800ed0a:	2c00      	cmp	r4, #0
 800ed0c:	d1f7      	bne.n	800ecfe <_fwalk_reent+0xe>
 800ed0e:	4638      	mov	r0, r7
 800ed10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed14:	89ab      	ldrh	r3, [r5, #12]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d907      	bls.n	800ed2a <_fwalk_reent+0x3a>
 800ed1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	d003      	beq.n	800ed2a <_fwalk_reent+0x3a>
 800ed22:	4629      	mov	r1, r5
 800ed24:	4630      	mov	r0, r6
 800ed26:	47c0      	blx	r8
 800ed28:	4307      	orrs	r7, r0
 800ed2a:	3568      	adds	r5, #104	; 0x68
 800ed2c:	e7e9      	b.n	800ed02 <_fwalk_reent+0x12>

0800ed2e <__retarget_lock_init_recursive>:
 800ed2e:	4770      	bx	lr

0800ed30 <__retarget_lock_acquire_recursive>:
 800ed30:	4770      	bx	lr

0800ed32 <__retarget_lock_release_recursive>:
 800ed32:	4770      	bx	lr

0800ed34 <memmove>:
 800ed34:	4288      	cmp	r0, r1
 800ed36:	b510      	push	{r4, lr}
 800ed38:	eb01 0402 	add.w	r4, r1, r2
 800ed3c:	d902      	bls.n	800ed44 <memmove+0x10>
 800ed3e:	4284      	cmp	r4, r0
 800ed40:	4623      	mov	r3, r4
 800ed42:	d807      	bhi.n	800ed54 <memmove+0x20>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	42a1      	cmp	r1, r4
 800ed48:	d008      	beq.n	800ed5c <memmove+0x28>
 800ed4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed52:	e7f8      	b.n	800ed46 <memmove+0x12>
 800ed54:	4402      	add	r2, r0
 800ed56:	4601      	mov	r1, r0
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	d100      	bne.n	800ed5e <memmove+0x2a>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed66:	e7f7      	b.n	800ed58 <memmove+0x24>

0800ed68 <__malloc_lock>:
 800ed68:	4801      	ldr	r0, [pc, #4]	; (800ed70 <__malloc_lock+0x8>)
 800ed6a:	f7ff bfe1 	b.w	800ed30 <__retarget_lock_acquire_recursive>
 800ed6e:	bf00      	nop
 800ed70:	20001178 	.word	0x20001178

0800ed74 <__malloc_unlock>:
 800ed74:	4801      	ldr	r0, [pc, #4]	; (800ed7c <__malloc_unlock+0x8>)
 800ed76:	f7ff bfdc 	b.w	800ed32 <__retarget_lock_release_recursive>
 800ed7a:	bf00      	nop
 800ed7c:	20001178 	.word	0x20001178

0800ed80 <_realloc_r>:
 800ed80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed84:	4680      	mov	r8, r0
 800ed86:	4614      	mov	r4, r2
 800ed88:	460e      	mov	r6, r1
 800ed8a:	b921      	cbnz	r1, 800ed96 <_realloc_r+0x16>
 800ed8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	4611      	mov	r1, r2
 800ed92:	f7fe bfbd 	b.w	800dd10 <_malloc_r>
 800ed96:	b92a      	cbnz	r2, 800eda4 <_realloc_r+0x24>
 800ed98:	f7fe ff4e 	bl	800dc38 <_free_r>
 800ed9c:	4625      	mov	r5, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda4:	f000 faa0 	bl	800f2e8 <_malloc_usable_size_r>
 800eda8:	4284      	cmp	r4, r0
 800edaa:	4607      	mov	r7, r0
 800edac:	d802      	bhi.n	800edb4 <_realloc_r+0x34>
 800edae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edb2:	d812      	bhi.n	800edda <_realloc_r+0x5a>
 800edb4:	4621      	mov	r1, r4
 800edb6:	4640      	mov	r0, r8
 800edb8:	f7fe ffaa 	bl	800dd10 <_malloc_r>
 800edbc:	4605      	mov	r5, r0
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d0ed      	beq.n	800ed9e <_realloc_r+0x1e>
 800edc2:	42bc      	cmp	r4, r7
 800edc4:	4622      	mov	r2, r4
 800edc6:	4631      	mov	r1, r6
 800edc8:	bf28      	it	cs
 800edca:	463a      	movcs	r2, r7
 800edcc:	f7fe fa4e 	bl	800d26c <memcpy>
 800edd0:	4631      	mov	r1, r6
 800edd2:	4640      	mov	r0, r8
 800edd4:	f7fe ff30 	bl	800dc38 <_free_r>
 800edd8:	e7e1      	b.n	800ed9e <_realloc_r+0x1e>
 800edda:	4635      	mov	r5, r6
 800eddc:	e7df      	b.n	800ed9e <_realloc_r+0x1e>

0800edde <__sfputc_r>:
 800edde:	6893      	ldr	r3, [r2, #8]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	b410      	push	{r4}
 800ede6:	6093      	str	r3, [r2, #8]
 800ede8:	da08      	bge.n	800edfc <__sfputc_r+0x1e>
 800edea:	6994      	ldr	r4, [r2, #24]
 800edec:	42a3      	cmp	r3, r4
 800edee:	db01      	blt.n	800edf4 <__sfputc_r+0x16>
 800edf0:	290a      	cmp	r1, #10
 800edf2:	d103      	bne.n	800edfc <__sfputc_r+0x1e>
 800edf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf8:	f000 b94a 	b.w	800f090 <__swbuf_r>
 800edfc:	6813      	ldr	r3, [r2, #0]
 800edfe:	1c58      	adds	r0, r3, #1
 800ee00:	6010      	str	r0, [r2, #0]
 800ee02:	7019      	strb	r1, [r3, #0]
 800ee04:	4608      	mov	r0, r1
 800ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <__sfputs_r>:
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460f      	mov	r7, r1
 800ee12:	4614      	mov	r4, r2
 800ee14:	18d5      	adds	r5, r2, r3
 800ee16:	42ac      	cmp	r4, r5
 800ee18:	d101      	bne.n	800ee1e <__sfputs_r+0x12>
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e007      	b.n	800ee2e <__sfputs_r+0x22>
 800ee1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee22:	463a      	mov	r2, r7
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7ff ffda 	bl	800edde <__sfputc_r>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d1f3      	bne.n	800ee16 <__sfputs_r+0xa>
 800ee2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee30 <_vfiprintf_r>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	460d      	mov	r5, r1
 800ee36:	b09d      	sub	sp, #116	; 0x74
 800ee38:	4614      	mov	r4, r2
 800ee3a:	4698      	mov	r8, r3
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	b118      	cbz	r0, 800ee48 <_vfiprintf_r+0x18>
 800ee40:	6983      	ldr	r3, [r0, #24]
 800ee42:	b90b      	cbnz	r3, 800ee48 <_vfiprintf_r+0x18>
 800ee44:	f7ff fec4 	bl	800ebd0 <__sinit>
 800ee48:	4b89      	ldr	r3, [pc, #548]	; (800f070 <_vfiprintf_r+0x240>)
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	d11b      	bne.n	800ee86 <_vfiprintf_r+0x56>
 800ee4e:	6875      	ldr	r5, [r6, #4]
 800ee50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee52:	07d9      	lsls	r1, r3, #31
 800ee54:	d405      	bmi.n	800ee62 <_vfiprintf_r+0x32>
 800ee56:	89ab      	ldrh	r3, [r5, #12]
 800ee58:	059a      	lsls	r2, r3, #22
 800ee5a:	d402      	bmi.n	800ee62 <_vfiprintf_r+0x32>
 800ee5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee5e:	f7ff ff67 	bl	800ed30 <__retarget_lock_acquire_recursive>
 800ee62:	89ab      	ldrh	r3, [r5, #12]
 800ee64:	071b      	lsls	r3, r3, #28
 800ee66:	d501      	bpl.n	800ee6c <_vfiprintf_r+0x3c>
 800ee68:	692b      	ldr	r3, [r5, #16]
 800ee6a:	b9eb      	cbnz	r3, 800eea8 <_vfiprintf_r+0x78>
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f000 f960 	bl	800f134 <__swsetup_r>
 800ee74:	b1c0      	cbz	r0, 800eea8 <_vfiprintf_r+0x78>
 800ee76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee78:	07dc      	lsls	r4, r3, #31
 800ee7a:	d50e      	bpl.n	800ee9a <_vfiprintf_r+0x6a>
 800ee7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee80:	b01d      	add	sp, #116	; 0x74
 800ee82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee86:	4b7b      	ldr	r3, [pc, #492]	; (800f074 <_vfiprintf_r+0x244>)
 800ee88:	429d      	cmp	r5, r3
 800ee8a:	d101      	bne.n	800ee90 <_vfiprintf_r+0x60>
 800ee8c:	68b5      	ldr	r5, [r6, #8]
 800ee8e:	e7df      	b.n	800ee50 <_vfiprintf_r+0x20>
 800ee90:	4b79      	ldr	r3, [pc, #484]	; (800f078 <_vfiprintf_r+0x248>)
 800ee92:	429d      	cmp	r5, r3
 800ee94:	bf08      	it	eq
 800ee96:	68f5      	ldreq	r5, [r6, #12]
 800ee98:	e7da      	b.n	800ee50 <_vfiprintf_r+0x20>
 800ee9a:	89ab      	ldrh	r3, [r5, #12]
 800ee9c:	0598      	lsls	r0, r3, #22
 800ee9e:	d4ed      	bmi.n	800ee7c <_vfiprintf_r+0x4c>
 800eea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea2:	f7ff ff46 	bl	800ed32 <__retarget_lock_release_recursive>
 800eea6:	e7e9      	b.n	800ee7c <_vfiprintf_r+0x4c>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	9309      	str	r3, [sp, #36]	; 0x24
 800eeac:	2320      	movs	r3, #32
 800eeae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeb6:	2330      	movs	r3, #48	; 0x30
 800eeb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f07c <_vfiprintf_r+0x24c>
 800eebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eec0:	f04f 0901 	mov.w	r9, #1
 800eec4:	4623      	mov	r3, r4
 800eec6:	469a      	mov	sl, r3
 800eec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eecc:	b10a      	cbz	r2, 800eed2 <_vfiprintf_r+0xa2>
 800eece:	2a25      	cmp	r2, #37	; 0x25
 800eed0:	d1f9      	bne.n	800eec6 <_vfiprintf_r+0x96>
 800eed2:	ebba 0b04 	subs.w	fp, sl, r4
 800eed6:	d00b      	beq.n	800eef0 <_vfiprintf_r+0xc0>
 800eed8:	465b      	mov	r3, fp
 800eeda:	4622      	mov	r2, r4
 800eedc:	4629      	mov	r1, r5
 800eede:	4630      	mov	r0, r6
 800eee0:	f7ff ff94 	bl	800ee0c <__sfputs_r>
 800eee4:	3001      	adds	r0, #1
 800eee6:	f000 80aa 	beq.w	800f03e <_vfiprintf_r+0x20e>
 800eeea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeec:	445a      	add	r2, fp
 800eeee:	9209      	str	r2, [sp, #36]	; 0x24
 800eef0:	f89a 3000 	ldrb.w	r3, [sl]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f000 80a2 	beq.w	800f03e <_vfiprintf_r+0x20e>
 800eefa:	2300      	movs	r3, #0
 800eefc:	f04f 32ff 	mov.w	r2, #4294967295
 800ef00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef04:	f10a 0a01 	add.w	sl, sl, #1
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	9307      	str	r3, [sp, #28]
 800ef0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef10:	931a      	str	r3, [sp, #104]	; 0x68
 800ef12:	4654      	mov	r4, sl
 800ef14:	2205      	movs	r2, #5
 800ef16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1a:	4858      	ldr	r0, [pc, #352]	; (800f07c <_vfiprintf_r+0x24c>)
 800ef1c:	f7f1 f980 	bl	8000220 <memchr>
 800ef20:	9a04      	ldr	r2, [sp, #16]
 800ef22:	b9d8      	cbnz	r0, 800ef5c <_vfiprintf_r+0x12c>
 800ef24:	06d1      	lsls	r1, r2, #27
 800ef26:	bf44      	itt	mi
 800ef28:	2320      	movmi	r3, #32
 800ef2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef2e:	0713      	lsls	r3, r2, #28
 800ef30:	bf44      	itt	mi
 800ef32:	232b      	movmi	r3, #43	; 0x2b
 800ef34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef38:	f89a 3000 	ldrb.w	r3, [sl]
 800ef3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef3e:	d015      	beq.n	800ef6c <_vfiprintf_r+0x13c>
 800ef40:	9a07      	ldr	r2, [sp, #28]
 800ef42:	4654      	mov	r4, sl
 800ef44:	2000      	movs	r0, #0
 800ef46:	f04f 0c0a 	mov.w	ip, #10
 800ef4a:	4621      	mov	r1, r4
 800ef4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef50:	3b30      	subs	r3, #48	; 0x30
 800ef52:	2b09      	cmp	r3, #9
 800ef54:	d94e      	bls.n	800eff4 <_vfiprintf_r+0x1c4>
 800ef56:	b1b0      	cbz	r0, 800ef86 <_vfiprintf_r+0x156>
 800ef58:	9207      	str	r2, [sp, #28]
 800ef5a:	e014      	b.n	800ef86 <_vfiprintf_r+0x156>
 800ef5c:	eba0 0308 	sub.w	r3, r0, r8
 800ef60:	fa09 f303 	lsl.w	r3, r9, r3
 800ef64:	4313      	orrs	r3, r2
 800ef66:	9304      	str	r3, [sp, #16]
 800ef68:	46a2      	mov	sl, r4
 800ef6a:	e7d2      	b.n	800ef12 <_vfiprintf_r+0xe2>
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	1d19      	adds	r1, r3, #4
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	9103      	str	r1, [sp, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bfbb      	ittet	lt
 800ef78:	425b      	neglt	r3, r3
 800ef7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef7e:	9307      	strge	r3, [sp, #28]
 800ef80:	9307      	strlt	r3, [sp, #28]
 800ef82:	bfb8      	it	lt
 800ef84:	9204      	strlt	r2, [sp, #16]
 800ef86:	7823      	ldrb	r3, [r4, #0]
 800ef88:	2b2e      	cmp	r3, #46	; 0x2e
 800ef8a:	d10c      	bne.n	800efa6 <_vfiprintf_r+0x176>
 800ef8c:	7863      	ldrb	r3, [r4, #1]
 800ef8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef90:	d135      	bne.n	800effe <_vfiprintf_r+0x1ce>
 800ef92:	9b03      	ldr	r3, [sp, #12]
 800ef94:	1d1a      	adds	r2, r3, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	9203      	str	r2, [sp, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	bfb8      	it	lt
 800ef9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800efa2:	3402      	adds	r4, #2
 800efa4:	9305      	str	r3, [sp, #20]
 800efa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f08c <_vfiprintf_r+0x25c>
 800efaa:	7821      	ldrb	r1, [r4, #0]
 800efac:	2203      	movs	r2, #3
 800efae:	4650      	mov	r0, sl
 800efb0:	f7f1 f936 	bl	8000220 <memchr>
 800efb4:	b140      	cbz	r0, 800efc8 <_vfiprintf_r+0x198>
 800efb6:	2340      	movs	r3, #64	; 0x40
 800efb8:	eba0 000a 	sub.w	r0, r0, sl
 800efbc:	fa03 f000 	lsl.w	r0, r3, r0
 800efc0:	9b04      	ldr	r3, [sp, #16]
 800efc2:	4303      	orrs	r3, r0
 800efc4:	3401      	adds	r4, #1
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efcc:	482c      	ldr	r0, [pc, #176]	; (800f080 <_vfiprintf_r+0x250>)
 800efce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efd2:	2206      	movs	r2, #6
 800efd4:	f7f1 f924 	bl	8000220 <memchr>
 800efd8:	2800      	cmp	r0, #0
 800efda:	d03f      	beq.n	800f05c <_vfiprintf_r+0x22c>
 800efdc:	4b29      	ldr	r3, [pc, #164]	; (800f084 <_vfiprintf_r+0x254>)
 800efde:	bb1b      	cbnz	r3, 800f028 <_vfiprintf_r+0x1f8>
 800efe0:	9b03      	ldr	r3, [sp, #12]
 800efe2:	3307      	adds	r3, #7
 800efe4:	f023 0307 	bic.w	r3, r3, #7
 800efe8:	3308      	adds	r3, #8
 800efea:	9303      	str	r3, [sp, #12]
 800efec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efee:	443b      	add	r3, r7
 800eff0:	9309      	str	r3, [sp, #36]	; 0x24
 800eff2:	e767      	b.n	800eec4 <_vfiprintf_r+0x94>
 800eff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eff8:	460c      	mov	r4, r1
 800effa:	2001      	movs	r0, #1
 800effc:	e7a5      	b.n	800ef4a <_vfiprintf_r+0x11a>
 800effe:	2300      	movs	r3, #0
 800f000:	3401      	adds	r4, #1
 800f002:	9305      	str	r3, [sp, #20]
 800f004:	4619      	mov	r1, r3
 800f006:	f04f 0c0a 	mov.w	ip, #10
 800f00a:	4620      	mov	r0, r4
 800f00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f010:	3a30      	subs	r2, #48	; 0x30
 800f012:	2a09      	cmp	r2, #9
 800f014:	d903      	bls.n	800f01e <_vfiprintf_r+0x1ee>
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0c5      	beq.n	800efa6 <_vfiprintf_r+0x176>
 800f01a:	9105      	str	r1, [sp, #20]
 800f01c:	e7c3      	b.n	800efa6 <_vfiprintf_r+0x176>
 800f01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f022:	4604      	mov	r4, r0
 800f024:	2301      	movs	r3, #1
 800f026:	e7f0      	b.n	800f00a <_vfiprintf_r+0x1da>
 800f028:	ab03      	add	r3, sp, #12
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	462a      	mov	r2, r5
 800f02e:	4b16      	ldr	r3, [pc, #88]	; (800f088 <_vfiprintf_r+0x258>)
 800f030:	a904      	add	r1, sp, #16
 800f032:	4630      	mov	r0, r6
 800f034:	f7fb f9a0 	bl	800a378 <_printf_float>
 800f038:	4607      	mov	r7, r0
 800f03a:	1c78      	adds	r0, r7, #1
 800f03c:	d1d6      	bne.n	800efec <_vfiprintf_r+0x1bc>
 800f03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f040:	07d9      	lsls	r1, r3, #31
 800f042:	d405      	bmi.n	800f050 <_vfiprintf_r+0x220>
 800f044:	89ab      	ldrh	r3, [r5, #12]
 800f046:	059a      	lsls	r2, r3, #22
 800f048:	d402      	bmi.n	800f050 <_vfiprintf_r+0x220>
 800f04a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f04c:	f7ff fe71 	bl	800ed32 <__retarget_lock_release_recursive>
 800f050:	89ab      	ldrh	r3, [r5, #12]
 800f052:	065b      	lsls	r3, r3, #25
 800f054:	f53f af12 	bmi.w	800ee7c <_vfiprintf_r+0x4c>
 800f058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f05a:	e711      	b.n	800ee80 <_vfiprintf_r+0x50>
 800f05c:	ab03      	add	r3, sp, #12
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	462a      	mov	r2, r5
 800f062:	4b09      	ldr	r3, [pc, #36]	; (800f088 <_vfiprintf_r+0x258>)
 800f064:	a904      	add	r1, sp, #16
 800f066:	4630      	mov	r0, r6
 800f068:	f7fb fc2a 	bl	800a8c0 <_printf_i>
 800f06c:	e7e4      	b.n	800f038 <_vfiprintf_r+0x208>
 800f06e:	bf00      	nop
 800f070:	0801168c 	.word	0x0801168c
 800f074:	080116ac 	.word	0x080116ac
 800f078:	0801166c 	.word	0x0801166c
 800f07c:	08011604 	.word	0x08011604
 800f080:	0801160e 	.word	0x0801160e
 800f084:	0800a379 	.word	0x0800a379
 800f088:	0800ee0d 	.word	0x0800ee0d
 800f08c:	0801160a 	.word	0x0801160a

0800f090 <__swbuf_r>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	460e      	mov	r6, r1
 800f094:	4614      	mov	r4, r2
 800f096:	4605      	mov	r5, r0
 800f098:	b118      	cbz	r0, 800f0a2 <__swbuf_r+0x12>
 800f09a:	6983      	ldr	r3, [r0, #24]
 800f09c:	b90b      	cbnz	r3, 800f0a2 <__swbuf_r+0x12>
 800f09e:	f7ff fd97 	bl	800ebd0 <__sinit>
 800f0a2:	4b21      	ldr	r3, [pc, #132]	; (800f128 <__swbuf_r+0x98>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	d12b      	bne.n	800f100 <__swbuf_r+0x70>
 800f0a8:	686c      	ldr	r4, [r5, #4]
 800f0aa:	69a3      	ldr	r3, [r4, #24]
 800f0ac:	60a3      	str	r3, [r4, #8]
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	071a      	lsls	r2, r3, #28
 800f0b2:	d52f      	bpl.n	800f114 <__swbuf_r+0x84>
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	b36b      	cbz	r3, 800f114 <__swbuf_r+0x84>
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	6820      	ldr	r0, [r4, #0]
 800f0bc:	1ac0      	subs	r0, r0, r3
 800f0be:	6963      	ldr	r3, [r4, #20]
 800f0c0:	b2f6      	uxtb	r6, r6
 800f0c2:	4283      	cmp	r3, r0
 800f0c4:	4637      	mov	r7, r6
 800f0c6:	dc04      	bgt.n	800f0d2 <__swbuf_r+0x42>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	f7ff fcec 	bl	800eaa8 <_fflush_r>
 800f0d0:	bb30      	cbnz	r0, 800f120 <__swbuf_r+0x90>
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	60a3      	str	r3, [r4, #8]
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	6022      	str	r2, [r4, #0]
 800f0de:	701e      	strb	r6, [r3, #0]
 800f0e0:	6963      	ldr	r3, [r4, #20]
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	4283      	cmp	r3, r0
 800f0e6:	d004      	beq.n	800f0f2 <__swbuf_r+0x62>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	07db      	lsls	r3, r3, #31
 800f0ec:	d506      	bpl.n	800f0fc <__swbuf_r+0x6c>
 800f0ee:	2e0a      	cmp	r6, #10
 800f0f0:	d104      	bne.n	800f0fc <__swbuf_r+0x6c>
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	f7ff fcd7 	bl	800eaa8 <_fflush_r>
 800f0fa:	b988      	cbnz	r0, 800f120 <__swbuf_r+0x90>
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f100:	4b0a      	ldr	r3, [pc, #40]	; (800f12c <__swbuf_r+0x9c>)
 800f102:	429c      	cmp	r4, r3
 800f104:	d101      	bne.n	800f10a <__swbuf_r+0x7a>
 800f106:	68ac      	ldr	r4, [r5, #8]
 800f108:	e7cf      	b.n	800f0aa <__swbuf_r+0x1a>
 800f10a:	4b09      	ldr	r3, [pc, #36]	; (800f130 <__swbuf_r+0xa0>)
 800f10c:	429c      	cmp	r4, r3
 800f10e:	bf08      	it	eq
 800f110:	68ec      	ldreq	r4, [r5, #12]
 800f112:	e7ca      	b.n	800f0aa <__swbuf_r+0x1a>
 800f114:	4621      	mov	r1, r4
 800f116:	4628      	mov	r0, r5
 800f118:	f000 f80c 	bl	800f134 <__swsetup_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d0cb      	beq.n	800f0b8 <__swbuf_r+0x28>
 800f120:	f04f 37ff 	mov.w	r7, #4294967295
 800f124:	e7ea      	b.n	800f0fc <__swbuf_r+0x6c>
 800f126:	bf00      	nop
 800f128:	0801168c 	.word	0x0801168c
 800f12c:	080116ac 	.word	0x080116ac
 800f130:	0801166c 	.word	0x0801166c

0800f134 <__swsetup_r>:
 800f134:	4b32      	ldr	r3, [pc, #200]	; (800f200 <__swsetup_r+0xcc>)
 800f136:	b570      	push	{r4, r5, r6, lr}
 800f138:	681d      	ldr	r5, [r3, #0]
 800f13a:	4606      	mov	r6, r0
 800f13c:	460c      	mov	r4, r1
 800f13e:	b125      	cbz	r5, 800f14a <__swsetup_r+0x16>
 800f140:	69ab      	ldr	r3, [r5, #24]
 800f142:	b913      	cbnz	r3, 800f14a <__swsetup_r+0x16>
 800f144:	4628      	mov	r0, r5
 800f146:	f7ff fd43 	bl	800ebd0 <__sinit>
 800f14a:	4b2e      	ldr	r3, [pc, #184]	; (800f204 <__swsetup_r+0xd0>)
 800f14c:	429c      	cmp	r4, r3
 800f14e:	d10f      	bne.n	800f170 <__swsetup_r+0x3c>
 800f150:	686c      	ldr	r4, [r5, #4]
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f158:	0719      	lsls	r1, r3, #28
 800f15a:	d42c      	bmi.n	800f1b6 <__swsetup_r+0x82>
 800f15c:	06dd      	lsls	r5, r3, #27
 800f15e:	d411      	bmi.n	800f184 <__swsetup_r+0x50>
 800f160:	2309      	movs	r3, #9
 800f162:	6033      	str	r3, [r6, #0]
 800f164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	f04f 30ff 	mov.w	r0, #4294967295
 800f16e:	e03e      	b.n	800f1ee <__swsetup_r+0xba>
 800f170:	4b25      	ldr	r3, [pc, #148]	; (800f208 <__swsetup_r+0xd4>)
 800f172:	429c      	cmp	r4, r3
 800f174:	d101      	bne.n	800f17a <__swsetup_r+0x46>
 800f176:	68ac      	ldr	r4, [r5, #8]
 800f178:	e7eb      	b.n	800f152 <__swsetup_r+0x1e>
 800f17a:	4b24      	ldr	r3, [pc, #144]	; (800f20c <__swsetup_r+0xd8>)
 800f17c:	429c      	cmp	r4, r3
 800f17e:	bf08      	it	eq
 800f180:	68ec      	ldreq	r4, [r5, #12]
 800f182:	e7e6      	b.n	800f152 <__swsetup_r+0x1e>
 800f184:	0758      	lsls	r0, r3, #29
 800f186:	d512      	bpl.n	800f1ae <__swsetup_r+0x7a>
 800f188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f18a:	b141      	cbz	r1, 800f19e <__swsetup_r+0x6a>
 800f18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f190:	4299      	cmp	r1, r3
 800f192:	d002      	beq.n	800f19a <__swsetup_r+0x66>
 800f194:	4630      	mov	r0, r6
 800f196:	f7fe fd4f 	bl	800dc38 <_free_r>
 800f19a:	2300      	movs	r3, #0
 800f19c:	6363      	str	r3, [r4, #52]	; 0x34
 800f19e:	89a3      	ldrh	r3, [r4, #12]
 800f1a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f1a4:	81a3      	strh	r3, [r4, #12]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	6063      	str	r3, [r4, #4]
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	89a3      	ldrh	r3, [r4, #12]
 800f1b0:	f043 0308 	orr.w	r3, r3, #8
 800f1b4:	81a3      	strh	r3, [r4, #12]
 800f1b6:	6923      	ldr	r3, [r4, #16]
 800f1b8:	b94b      	cbnz	r3, 800f1ce <__swsetup_r+0x9a>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1c4:	d003      	beq.n	800f1ce <__swsetup_r+0x9a>
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f000 f84d 	bl	800f268 <__smakebuf_r>
 800f1ce:	89a0      	ldrh	r0, [r4, #12]
 800f1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1d4:	f010 0301 	ands.w	r3, r0, #1
 800f1d8:	d00a      	beq.n	800f1f0 <__swsetup_r+0xbc>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60a3      	str	r3, [r4, #8]
 800f1de:	6963      	ldr	r3, [r4, #20]
 800f1e0:	425b      	negs	r3, r3
 800f1e2:	61a3      	str	r3, [r4, #24]
 800f1e4:	6923      	ldr	r3, [r4, #16]
 800f1e6:	b943      	cbnz	r3, 800f1fa <__swsetup_r+0xc6>
 800f1e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1ec:	d1ba      	bne.n	800f164 <__swsetup_r+0x30>
 800f1ee:	bd70      	pop	{r4, r5, r6, pc}
 800f1f0:	0781      	lsls	r1, r0, #30
 800f1f2:	bf58      	it	pl
 800f1f4:	6963      	ldrpl	r3, [r4, #20]
 800f1f6:	60a3      	str	r3, [r4, #8]
 800f1f8:	e7f4      	b.n	800f1e4 <__swsetup_r+0xb0>
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	e7f7      	b.n	800f1ee <__swsetup_r+0xba>
 800f1fe:	bf00      	nop
 800f200:	20000014 	.word	0x20000014
 800f204:	0801168c 	.word	0x0801168c
 800f208:	080116ac 	.word	0x080116ac
 800f20c:	0801166c 	.word	0x0801166c

0800f210 <abort>:
 800f210:	b508      	push	{r3, lr}
 800f212:	2006      	movs	r0, #6
 800f214:	f000 f898 	bl	800f348 <raise>
 800f218:	2001      	movs	r0, #1
 800f21a:	f7f5 fe73 	bl	8004f04 <_exit>

0800f21e <__swhatbuf_r>:
 800f21e:	b570      	push	{r4, r5, r6, lr}
 800f220:	460e      	mov	r6, r1
 800f222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f226:	2900      	cmp	r1, #0
 800f228:	b096      	sub	sp, #88	; 0x58
 800f22a:	4614      	mov	r4, r2
 800f22c:	461d      	mov	r5, r3
 800f22e:	da08      	bge.n	800f242 <__swhatbuf_r+0x24>
 800f230:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f234:	2200      	movs	r2, #0
 800f236:	602a      	str	r2, [r5, #0]
 800f238:	061a      	lsls	r2, r3, #24
 800f23a:	d410      	bmi.n	800f25e <__swhatbuf_r+0x40>
 800f23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f240:	e00e      	b.n	800f260 <__swhatbuf_r+0x42>
 800f242:	466a      	mov	r2, sp
 800f244:	f000 f89c 	bl	800f380 <_fstat_r>
 800f248:	2800      	cmp	r0, #0
 800f24a:	dbf1      	blt.n	800f230 <__swhatbuf_r+0x12>
 800f24c:	9a01      	ldr	r2, [sp, #4]
 800f24e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f256:	425a      	negs	r2, r3
 800f258:	415a      	adcs	r2, r3
 800f25a:	602a      	str	r2, [r5, #0]
 800f25c:	e7ee      	b.n	800f23c <__swhatbuf_r+0x1e>
 800f25e:	2340      	movs	r3, #64	; 0x40
 800f260:	2000      	movs	r0, #0
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	b016      	add	sp, #88	; 0x58
 800f266:	bd70      	pop	{r4, r5, r6, pc}

0800f268 <__smakebuf_r>:
 800f268:	898b      	ldrh	r3, [r1, #12]
 800f26a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f26c:	079d      	lsls	r5, r3, #30
 800f26e:	4606      	mov	r6, r0
 800f270:	460c      	mov	r4, r1
 800f272:	d507      	bpl.n	800f284 <__smakebuf_r+0x1c>
 800f274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	6123      	str	r3, [r4, #16]
 800f27c:	2301      	movs	r3, #1
 800f27e:	6163      	str	r3, [r4, #20]
 800f280:	b002      	add	sp, #8
 800f282:	bd70      	pop	{r4, r5, r6, pc}
 800f284:	ab01      	add	r3, sp, #4
 800f286:	466a      	mov	r2, sp
 800f288:	f7ff ffc9 	bl	800f21e <__swhatbuf_r>
 800f28c:	9900      	ldr	r1, [sp, #0]
 800f28e:	4605      	mov	r5, r0
 800f290:	4630      	mov	r0, r6
 800f292:	f7fe fd3d 	bl	800dd10 <_malloc_r>
 800f296:	b948      	cbnz	r0, 800f2ac <__smakebuf_r+0x44>
 800f298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29c:	059a      	lsls	r2, r3, #22
 800f29e:	d4ef      	bmi.n	800f280 <__smakebuf_r+0x18>
 800f2a0:	f023 0303 	bic.w	r3, r3, #3
 800f2a4:	f043 0302 	orr.w	r3, r3, #2
 800f2a8:	81a3      	strh	r3, [r4, #12]
 800f2aa:	e7e3      	b.n	800f274 <__smakebuf_r+0xc>
 800f2ac:	4b0d      	ldr	r3, [pc, #52]	; (800f2e4 <__smakebuf_r+0x7c>)
 800f2ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	6020      	str	r0, [r4, #0]
 800f2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2b8:	81a3      	strh	r3, [r4, #12]
 800f2ba:	9b00      	ldr	r3, [sp, #0]
 800f2bc:	6163      	str	r3, [r4, #20]
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	6120      	str	r0, [r4, #16]
 800f2c2:	b15b      	cbz	r3, 800f2dc <__smakebuf_r+0x74>
 800f2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f000 f86b 	bl	800f3a4 <_isatty_r>
 800f2ce:	b128      	cbz	r0, 800f2dc <__smakebuf_r+0x74>
 800f2d0:	89a3      	ldrh	r3, [r4, #12]
 800f2d2:	f023 0303 	bic.w	r3, r3, #3
 800f2d6:	f043 0301 	orr.w	r3, r3, #1
 800f2da:	81a3      	strh	r3, [r4, #12]
 800f2dc:	89a0      	ldrh	r0, [r4, #12]
 800f2de:	4305      	orrs	r5, r0
 800f2e0:	81a5      	strh	r5, [r4, #12]
 800f2e2:	e7cd      	b.n	800f280 <__smakebuf_r+0x18>
 800f2e4:	0800eb69 	.word	0x0800eb69

0800f2e8 <_malloc_usable_size_r>:
 800f2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ec:	1f18      	subs	r0, r3, #4
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bfbc      	itt	lt
 800f2f2:	580b      	ldrlt	r3, [r1, r0]
 800f2f4:	18c0      	addlt	r0, r0, r3
 800f2f6:	4770      	bx	lr

0800f2f8 <_raise_r>:
 800f2f8:	291f      	cmp	r1, #31
 800f2fa:	b538      	push	{r3, r4, r5, lr}
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	460d      	mov	r5, r1
 800f300:	d904      	bls.n	800f30c <_raise_r+0x14>
 800f302:	2316      	movs	r3, #22
 800f304:	6003      	str	r3, [r0, #0]
 800f306:	f04f 30ff 	mov.w	r0, #4294967295
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f30e:	b112      	cbz	r2, 800f316 <_raise_r+0x1e>
 800f310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f314:	b94b      	cbnz	r3, 800f32a <_raise_r+0x32>
 800f316:	4620      	mov	r0, r4
 800f318:	f000 f830 	bl	800f37c <_getpid_r>
 800f31c:	462a      	mov	r2, r5
 800f31e:	4601      	mov	r1, r0
 800f320:	4620      	mov	r0, r4
 800f322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f326:	f000 b817 	b.w	800f358 <_kill_r>
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d00a      	beq.n	800f344 <_raise_r+0x4c>
 800f32e:	1c59      	adds	r1, r3, #1
 800f330:	d103      	bne.n	800f33a <_raise_r+0x42>
 800f332:	2316      	movs	r3, #22
 800f334:	6003      	str	r3, [r0, #0]
 800f336:	2001      	movs	r0, #1
 800f338:	e7e7      	b.n	800f30a <_raise_r+0x12>
 800f33a:	2400      	movs	r4, #0
 800f33c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f340:	4628      	mov	r0, r5
 800f342:	4798      	blx	r3
 800f344:	2000      	movs	r0, #0
 800f346:	e7e0      	b.n	800f30a <_raise_r+0x12>

0800f348 <raise>:
 800f348:	4b02      	ldr	r3, [pc, #8]	; (800f354 <raise+0xc>)
 800f34a:	4601      	mov	r1, r0
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	f7ff bfd3 	b.w	800f2f8 <_raise_r>
 800f352:	bf00      	nop
 800f354:	20000014 	.word	0x20000014

0800f358 <_kill_r>:
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4d07      	ldr	r5, [pc, #28]	; (800f378 <_kill_r+0x20>)
 800f35c:	2300      	movs	r3, #0
 800f35e:	4604      	mov	r4, r0
 800f360:	4608      	mov	r0, r1
 800f362:	4611      	mov	r1, r2
 800f364:	602b      	str	r3, [r5, #0]
 800f366:	f7f5 fdbd 	bl	8004ee4 <_kill>
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	d102      	bne.n	800f374 <_kill_r+0x1c>
 800f36e:	682b      	ldr	r3, [r5, #0]
 800f370:	b103      	cbz	r3, 800f374 <_kill_r+0x1c>
 800f372:	6023      	str	r3, [r4, #0]
 800f374:	bd38      	pop	{r3, r4, r5, pc}
 800f376:	bf00      	nop
 800f378:	20001174 	.word	0x20001174

0800f37c <_getpid_r>:
 800f37c:	f7f5 bdaa 	b.w	8004ed4 <_getpid>

0800f380 <_fstat_r>:
 800f380:	b538      	push	{r3, r4, r5, lr}
 800f382:	4d07      	ldr	r5, [pc, #28]	; (800f3a0 <_fstat_r+0x20>)
 800f384:	2300      	movs	r3, #0
 800f386:	4604      	mov	r4, r0
 800f388:	4608      	mov	r0, r1
 800f38a:	4611      	mov	r1, r2
 800f38c:	602b      	str	r3, [r5, #0]
 800f38e:	f7f5 fe08 	bl	8004fa2 <_fstat>
 800f392:	1c43      	adds	r3, r0, #1
 800f394:	d102      	bne.n	800f39c <_fstat_r+0x1c>
 800f396:	682b      	ldr	r3, [r5, #0]
 800f398:	b103      	cbz	r3, 800f39c <_fstat_r+0x1c>
 800f39a:	6023      	str	r3, [r4, #0]
 800f39c:	bd38      	pop	{r3, r4, r5, pc}
 800f39e:	bf00      	nop
 800f3a0:	20001174 	.word	0x20001174

0800f3a4 <_isatty_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4d06      	ldr	r5, [pc, #24]	; (800f3c0 <_isatty_r+0x1c>)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	602b      	str	r3, [r5, #0]
 800f3b0:	f7f5 fe07 	bl	8004fc2 <_isatty>
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	d102      	bne.n	800f3be <_isatty_r+0x1a>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	b103      	cbz	r3, 800f3be <_isatty_r+0x1a>
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	bd38      	pop	{r3, r4, r5, pc}
 800f3c0:	20001174 	.word	0x20001174

0800f3c4 <acos>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	ed2d 8b02 	vpush	{d8}
 800f3ca:	ec55 4b10 	vmov	r4, r5, d0
 800f3ce:	f000 f91f 	bl	800f610 <__ieee754_acos>
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	462b      	mov	r3, r5
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	eeb0 8a40 	vmov.f32	s16, s0
 800f3de:	eef0 8a60 	vmov.f32	s17, s1
 800f3e2:	f7f1 fbc3 	bl	8000b6c <__aeabi_dcmpun>
 800f3e6:	b9a8      	cbnz	r0, 800f414 <acos+0x50>
 800f3e8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ec:	f001 fe04 	bl	8010ff8 <fabs>
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <acos+0x60>)
 800f3f2:	ec51 0b10 	vmov	r0, r1, d0
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f7f1 fbae 	bl	8000b58 <__aeabi_dcmpgt>
 800f3fc:	b150      	cbz	r0, 800f414 <acos+0x50>
 800f3fe:	f7fa fee9 	bl	800a1d4 <__errno>
 800f402:	ecbd 8b02 	vpop	{d8}
 800f406:	2321      	movs	r3, #33	; 0x21
 800f408:	6003      	str	r3, [r0, #0]
 800f40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f40e:	4806      	ldr	r0, [pc, #24]	; (800f428 <acos+0x64>)
 800f410:	f7ff b986 	b.w	800e720 <nan>
 800f414:	eeb0 0a48 	vmov.f32	s0, s16
 800f418:	eef0 0a68 	vmov.f32	s1, s17
 800f41c:	ecbd 8b02 	vpop	{d8}
 800f420:	bd38      	pop	{r3, r4, r5, pc}
 800f422:	bf00      	nop
 800f424:	3ff00000 	.word	0x3ff00000
 800f428:	0801166b 	.word	0x0801166b

0800f42c <asin>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	ed2d 8b02 	vpush	{d8}
 800f432:	ec55 4b10 	vmov	r4, r5, d0
 800f436:	f000 fb4b 	bl	800fad0 <__ieee754_asin>
 800f43a:	4622      	mov	r2, r4
 800f43c:	462b      	mov	r3, r5
 800f43e:	4620      	mov	r0, r4
 800f440:	4629      	mov	r1, r5
 800f442:	eeb0 8a40 	vmov.f32	s16, s0
 800f446:	eef0 8a60 	vmov.f32	s17, s1
 800f44a:	f7f1 fb8f 	bl	8000b6c <__aeabi_dcmpun>
 800f44e:	b9a8      	cbnz	r0, 800f47c <asin+0x50>
 800f450:	ec45 4b10 	vmov	d0, r4, r5
 800f454:	f001 fdd0 	bl	8010ff8 <fabs>
 800f458:	4b0c      	ldr	r3, [pc, #48]	; (800f48c <asin+0x60>)
 800f45a:	ec51 0b10 	vmov	r0, r1, d0
 800f45e:	2200      	movs	r2, #0
 800f460:	f7f1 fb7a 	bl	8000b58 <__aeabi_dcmpgt>
 800f464:	b150      	cbz	r0, 800f47c <asin+0x50>
 800f466:	f7fa feb5 	bl	800a1d4 <__errno>
 800f46a:	ecbd 8b02 	vpop	{d8}
 800f46e:	2321      	movs	r3, #33	; 0x21
 800f470:	6003      	str	r3, [r0, #0]
 800f472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f476:	4806      	ldr	r0, [pc, #24]	; (800f490 <asin+0x64>)
 800f478:	f7ff b952 	b.w	800e720 <nan>
 800f47c:	eeb0 0a48 	vmov.f32	s0, s16
 800f480:	eef0 0a68 	vmov.f32	s1, s17
 800f484:	ecbd 8b02 	vpop	{d8}
 800f488:	bd38      	pop	{r3, r4, r5, pc}
 800f48a:	bf00      	nop
 800f48c:	3ff00000 	.word	0x3ff00000
 800f490:	0801166b 	.word	0x0801166b

0800f494 <atan2>:
 800f494:	f000 bd30 	b.w	800fef8 <__ieee754_atan2>

0800f498 <pow>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	ed2d 8b02 	vpush	{d8}
 800f49e:	eeb0 8a40 	vmov.f32	s16, s0
 800f4a2:	eef0 8a60 	vmov.f32	s17, s1
 800f4a6:	ec55 4b11 	vmov	r4, r5, d1
 800f4aa:	f000 fdf1 	bl	8010090 <__ieee754_pow>
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	ec57 6b10 	vmov	r6, r7, d0
 800f4ba:	f7f1 fb57 	bl	8000b6c <__aeabi_dcmpun>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d13b      	bne.n	800f53a <pow+0xa2>
 800f4c2:	ec51 0b18 	vmov	r0, r1, d8
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f7f1 fb1d 	bl	8000b08 <__aeabi_dcmpeq>
 800f4ce:	b1b8      	cbz	r0, 800f500 <pow+0x68>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	f7f1 fb16 	bl	8000b08 <__aeabi_dcmpeq>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d146      	bne.n	800f56e <pow+0xd6>
 800f4e0:	ec45 4b10 	vmov	d0, r4, r5
 800f4e4:	f001 fd91 	bl	801100a <finite>
 800f4e8:	b338      	cbz	r0, 800f53a <pow+0xa2>
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	f7f1 fb13 	bl	8000b1c <__aeabi_dcmplt>
 800f4f6:	b300      	cbz	r0, 800f53a <pow+0xa2>
 800f4f8:	f7fa fe6c 	bl	800a1d4 <__errno>
 800f4fc:	2322      	movs	r3, #34	; 0x22
 800f4fe:	e01b      	b.n	800f538 <pow+0xa0>
 800f500:	ec47 6b10 	vmov	d0, r6, r7
 800f504:	f001 fd81 	bl	801100a <finite>
 800f508:	b9e0      	cbnz	r0, 800f544 <pow+0xac>
 800f50a:	eeb0 0a48 	vmov.f32	s0, s16
 800f50e:	eef0 0a68 	vmov.f32	s1, s17
 800f512:	f001 fd7a 	bl	801100a <finite>
 800f516:	b1a8      	cbz	r0, 800f544 <pow+0xac>
 800f518:	ec45 4b10 	vmov	d0, r4, r5
 800f51c:	f001 fd75 	bl	801100a <finite>
 800f520:	b180      	cbz	r0, 800f544 <pow+0xac>
 800f522:	4632      	mov	r2, r6
 800f524:	463b      	mov	r3, r7
 800f526:	4630      	mov	r0, r6
 800f528:	4639      	mov	r1, r7
 800f52a:	f7f1 fb1f 	bl	8000b6c <__aeabi_dcmpun>
 800f52e:	2800      	cmp	r0, #0
 800f530:	d0e2      	beq.n	800f4f8 <pow+0x60>
 800f532:	f7fa fe4f 	bl	800a1d4 <__errno>
 800f536:	2321      	movs	r3, #33	; 0x21
 800f538:	6003      	str	r3, [r0, #0]
 800f53a:	ecbd 8b02 	vpop	{d8}
 800f53e:	ec47 6b10 	vmov	d0, r6, r7
 800f542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f544:	2200      	movs	r2, #0
 800f546:	2300      	movs	r3, #0
 800f548:	4630      	mov	r0, r6
 800f54a:	4639      	mov	r1, r7
 800f54c:	f7f1 fadc 	bl	8000b08 <__aeabi_dcmpeq>
 800f550:	2800      	cmp	r0, #0
 800f552:	d0f2      	beq.n	800f53a <pow+0xa2>
 800f554:	eeb0 0a48 	vmov.f32	s0, s16
 800f558:	eef0 0a68 	vmov.f32	s1, s17
 800f55c:	f001 fd55 	bl	801100a <finite>
 800f560:	2800      	cmp	r0, #0
 800f562:	d0ea      	beq.n	800f53a <pow+0xa2>
 800f564:	ec45 4b10 	vmov	d0, r4, r5
 800f568:	f001 fd4f 	bl	801100a <finite>
 800f56c:	e7c3      	b.n	800f4f6 <pow+0x5e>
 800f56e:	4f01      	ldr	r7, [pc, #4]	; (800f574 <pow+0xdc>)
 800f570:	2600      	movs	r6, #0
 800f572:	e7e2      	b.n	800f53a <pow+0xa2>
 800f574:	3ff00000 	.word	0x3ff00000

0800f578 <sqrt>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	ed2d 8b02 	vpush	{d8}
 800f57e:	ec55 4b10 	vmov	r4, r5, d0
 800f582:	f001 fab3 	bl	8010aec <__ieee754_sqrt>
 800f586:	4622      	mov	r2, r4
 800f588:	462b      	mov	r3, r5
 800f58a:	4620      	mov	r0, r4
 800f58c:	4629      	mov	r1, r5
 800f58e:	eeb0 8a40 	vmov.f32	s16, s0
 800f592:	eef0 8a60 	vmov.f32	s17, s1
 800f596:	f7f1 fae9 	bl	8000b6c <__aeabi_dcmpun>
 800f59a:	b990      	cbnz	r0, 800f5c2 <sqrt+0x4a>
 800f59c:	2200      	movs	r2, #0
 800f59e:	2300      	movs	r3, #0
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	f7f1 faba 	bl	8000b1c <__aeabi_dcmplt>
 800f5a8:	b158      	cbz	r0, 800f5c2 <sqrt+0x4a>
 800f5aa:	f7fa fe13 	bl	800a1d4 <__errno>
 800f5ae:	2321      	movs	r3, #33	; 0x21
 800f5b0:	6003      	str	r3, [r0, #0]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f7f1 f967 	bl	800088c <__aeabi_ddiv>
 800f5be:	ec41 0b18 	vmov	d8, r0, r1
 800f5c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f5c6:	eef0 0a68 	vmov.f32	s1, s17
 800f5ca:	ecbd 8b02 	vpop	{d8}
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}

0800f5d0 <sqrtf>:
 800f5d0:	b508      	push	{r3, lr}
 800f5d2:	ed2d 8b02 	vpush	{d8}
 800f5d6:	eeb0 8a40 	vmov.f32	s16, s0
 800f5da:	f001 fb39 	bl	8010c50 <__ieee754_sqrtf>
 800f5de:	eeb4 8a48 	vcmp.f32	s16, s16
 800f5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e6:	d60c      	bvs.n	800f602 <sqrtf+0x32>
 800f5e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f608 <sqrtf+0x38>
 800f5ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f4:	d505      	bpl.n	800f602 <sqrtf+0x32>
 800f5f6:	f7fa fded 	bl	800a1d4 <__errno>
 800f5fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f5fe:	2321      	movs	r3, #33	; 0x21
 800f600:	6003      	str	r3, [r0, #0]
 800f602:	ecbd 8b02 	vpop	{d8}
 800f606:	bd08      	pop	{r3, pc}
	...

0800f610 <__ieee754_acos>:
 800f610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	ec55 4b10 	vmov	r4, r5, d0
 800f618:	49b7      	ldr	r1, [pc, #732]	; (800f8f8 <__ieee754_acos+0x2e8>)
 800f61a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f61e:	428b      	cmp	r3, r1
 800f620:	dd1b      	ble.n	800f65a <__ieee754_acos+0x4a>
 800f622:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800f626:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f62a:	4323      	orrs	r3, r4
 800f62c:	d106      	bne.n	800f63c <__ieee754_acos+0x2c>
 800f62e:	2d00      	cmp	r5, #0
 800f630:	f300 8211 	bgt.w	800fa56 <__ieee754_acos+0x446>
 800f634:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800f890 <__ieee754_acos+0x280>
 800f638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	ee10 2a10 	vmov	r2, s0
 800f640:	462b      	mov	r3, r5
 800f642:	ee10 0a10 	vmov	r0, s0
 800f646:	4629      	mov	r1, r5
 800f648:	f7f0 fe3e 	bl	80002c8 <__aeabi_dsub>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	f7f1 f91c 	bl	800088c <__aeabi_ddiv>
 800f654:	ec41 0b10 	vmov	d0, r0, r1
 800f658:	e7ee      	b.n	800f638 <__ieee754_acos+0x28>
 800f65a:	49a8      	ldr	r1, [pc, #672]	; (800f8fc <__ieee754_acos+0x2ec>)
 800f65c:	428b      	cmp	r3, r1
 800f65e:	f300 8087 	bgt.w	800f770 <__ieee754_acos+0x160>
 800f662:	4aa7      	ldr	r2, [pc, #668]	; (800f900 <__ieee754_acos+0x2f0>)
 800f664:	4293      	cmp	r3, r2
 800f666:	f340 81f9 	ble.w	800fa5c <__ieee754_acos+0x44c>
 800f66a:	ee10 2a10 	vmov	r2, s0
 800f66e:	ee10 0a10 	vmov	r0, s0
 800f672:	462b      	mov	r3, r5
 800f674:	4629      	mov	r1, r5
 800f676:	f7f0 ffdf 	bl	8000638 <__aeabi_dmul>
 800f67a:	a387      	add	r3, pc, #540	; (adr r3, 800f898 <__ieee754_acos+0x288>)
 800f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f680:	4606      	mov	r6, r0
 800f682:	460f      	mov	r7, r1
 800f684:	f7f0 ffd8 	bl	8000638 <__aeabi_dmul>
 800f688:	a385      	add	r3, pc, #532	; (adr r3, 800f8a0 <__ieee754_acos+0x290>)
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	f7f0 fe1d 	bl	80002cc <__adddf3>
 800f692:	4632      	mov	r2, r6
 800f694:	463b      	mov	r3, r7
 800f696:	f7f0 ffcf 	bl	8000638 <__aeabi_dmul>
 800f69a:	a383      	add	r3, pc, #524	; (adr r3, 800f8a8 <__ieee754_acos+0x298>)
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	f7f0 fe12 	bl	80002c8 <__aeabi_dsub>
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	f7f0 ffc6 	bl	8000638 <__aeabi_dmul>
 800f6ac:	a380      	add	r3, pc, #512	; (adr r3, 800f8b0 <__ieee754_acos+0x2a0>)
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	f7f0 fe0b 	bl	80002cc <__adddf3>
 800f6b6:	4632      	mov	r2, r6
 800f6b8:	463b      	mov	r3, r7
 800f6ba:	f7f0 ffbd 	bl	8000638 <__aeabi_dmul>
 800f6be:	a37e      	add	r3, pc, #504	; (adr r3, 800f8b8 <__ieee754_acos+0x2a8>)
 800f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c4:	f7f0 fe00 	bl	80002c8 <__aeabi_dsub>
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	463b      	mov	r3, r7
 800f6cc:	f7f0 ffb4 	bl	8000638 <__aeabi_dmul>
 800f6d0:	a37b      	add	r3, pc, #492	; (adr r3, 800f8c0 <__ieee754_acos+0x2b0>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f0 fdf9 	bl	80002cc <__adddf3>
 800f6da:	4632      	mov	r2, r6
 800f6dc:	463b      	mov	r3, r7
 800f6de:	f7f0 ffab 	bl	8000638 <__aeabi_dmul>
 800f6e2:	a379      	add	r3, pc, #484	; (adr r3, 800f8c8 <__ieee754_acos+0x2b8>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4689      	mov	r9, r1
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	f7f0 ffa2 	bl	8000638 <__aeabi_dmul>
 800f6f4:	a376      	add	r3, pc, #472	; (adr r3, 800f8d0 <__ieee754_acos+0x2c0>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	f7f0 fde5 	bl	80002c8 <__aeabi_dsub>
 800f6fe:	4632      	mov	r2, r6
 800f700:	463b      	mov	r3, r7
 800f702:	f7f0 ff99 	bl	8000638 <__aeabi_dmul>
 800f706:	a374      	add	r3, pc, #464	; (adr r3, 800f8d8 <__ieee754_acos+0x2c8>)
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	f7f0 fdde 	bl	80002cc <__adddf3>
 800f710:	4632      	mov	r2, r6
 800f712:	463b      	mov	r3, r7
 800f714:	f7f0 ff90 	bl	8000638 <__aeabi_dmul>
 800f718:	a371      	add	r3, pc, #452	; (adr r3, 800f8e0 <__ieee754_acos+0x2d0>)
 800f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71e:	f7f0 fdd3 	bl	80002c8 <__aeabi_dsub>
 800f722:	4632      	mov	r2, r6
 800f724:	463b      	mov	r3, r7
 800f726:	f7f0 ff87 	bl	8000638 <__aeabi_dmul>
 800f72a:	4b76      	ldr	r3, [pc, #472]	; (800f904 <__ieee754_acos+0x2f4>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	f7f0 fdcd 	bl	80002cc <__adddf3>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4640      	mov	r0, r8
 800f738:	4649      	mov	r1, r9
 800f73a:	f7f1 f8a7 	bl	800088c <__aeabi_ddiv>
 800f73e:	4622      	mov	r2, r4
 800f740:	462b      	mov	r3, r5
 800f742:	f7f0 ff79 	bl	8000638 <__aeabi_dmul>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	a167      	add	r1, pc, #412	; (adr r1, 800f8e8 <__ieee754_acos+0x2d8>)
 800f74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f750:	f7f0 fdba 	bl	80002c8 <__aeabi_dsub>
 800f754:	4602      	mov	r2, r0
 800f756:	460b      	mov	r3, r1
 800f758:	4620      	mov	r0, r4
 800f75a:	4629      	mov	r1, r5
 800f75c:	f7f0 fdb4 	bl	80002c8 <__aeabi_dsub>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	a162      	add	r1, pc, #392	; (adr r1, 800f8f0 <__ieee754_acos+0x2e0>)
 800f766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f76a:	f7f0 fdad 	bl	80002c8 <__aeabi_dsub>
 800f76e:	e771      	b.n	800f654 <__ieee754_acos+0x44>
 800f770:	2d00      	cmp	r5, #0
 800f772:	f280 80cb 	bge.w	800f90c <__ieee754_acos+0x2fc>
 800f776:	ee10 0a10 	vmov	r0, s0
 800f77a:	4b62      	ldr	r3, [pc, #392]	; (800f904 <__ieee754_acos+0x2f4>)
 800f77c:	2200      	movs	r2, #0
 800f77e:	4629      	mov	r1, r5
 800f780:	f7f0 fda4 	bl	80002cc <__adddf3>
 800f784:	4b60      	ldr	r3, [pc, #384]	; (800f908 <__ieee754_acos+0x2f8>)
 800f786:	2200      	movs	r2, #0
 800f788:	f7f0 ff56 	bl	8000638 <__aeabi_dmul>
 800f78c:	a342      	add	r3, pc, #264	; (adr r3, 800f898 <__ieee754_acos+0x288>)
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	4604      	mov	r4, r0
 800f794:	460d      	mov	r5, r1
 800f796:	f7f0 ff4f 	bl	8000638 <__aeabi_dmul>
 800f79a:	a341      	add	r3, pc, #260	; (adr r3, 800f8a0 <__ieee754_acos+0x290>)
 800f79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a0:	f7f0 fd94 	bl	80002cc <__adddf3>
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	462b      	mov	r3, r5
 800f7a8:	f7f0 ff46 	bl	8000638 <__aeabi_dmul>
 800f7ac:	a33e      	add	r3, pc, #248	; (adr r3, 800f8a8 <__ieee754_acos+0x298>)
 800f7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b2:	f7f0 fd89 	bl	80002c8 <__aeabi_dsub>
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	462b      	mov	r3, r5
 800f7ba:	f7f0 ff3d 	bl	8000638 <__aeabi_dmul>
 800f7be:	a33c      	add	r3, pc, #240	; (adr r3, 800f8b0 <__ieee754_acos+0x2a0>)
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	f7f0 fd82 	bl	80002cc <__adddf3>
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	462b      	mov	r3, r5
 800f7cc:	f7f0 ff34 	bl	8000638 <__aeabi_dmul>
 800f7d0:	a339      	add	r3, pc, #228	; (adr r3, 800f8b8 <__ieee754_acos+0x2a8>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f0 fd77 	bl	80002c8 <__aeabi_dsub>
 800f7da:	4622      	mov	r2, r4
 800f7dc:	462b      	mov	r3, r5
 800f7de:	f7f0 ff2b 	bl	8000638 <__aeabi_dmul>
 800f7e2:	a337      	add	r3, pc, #220	; (adr r3, 800f8c0 <__ieee754_acos+0x2b0>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	f7f0 fd70 	bl	80002cc <__adddf3>
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	462b      	mov	r3, r5
 800f7f0:	f7f0 ff22 	bl	8000638 <__aeabi_dmul>
 800f7f4:	ec45 4b10 	vmov	d0, r4, r5
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	4689      	mov	r9, r1
 800f7fc:	f001 f976 	bl	8010aec <__ieee754_sqrt>
 800f800:	a331      	add	r3, pc, #196	; (adr r3, 800f8c8 <__ieee754_acos+0x2b8>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	ec57 6b10 	vmov	r6, r7, d0
 800f80e:	f7f0 ff13 	bl	8000638 <__aeabi_dmul>
 800f812:	a32f      	add	r3, pc, #188	; (adr r3, 800f8d0 <__ieee754_acos+0x2c0>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fd56 	bl	80002c8 <__aeabi_dsub>
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	f7f0 ff0a 	bl	8000638 <__aeabi_dmul>
 800f824:	a32c      	add	r3, pc, #176	; (adr r3, 800f8d8 <__ieee754_acos+0x2c8>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd4f 	bl	80002cc <__adddf3>
 800f82e:	4622      	mov	r2, r4
 800f830:	462b      	mov	r3, r5
 800f832:	f7f0 ff01 	bl	8000638 <__aeabi_dmul>
 800f836:	a32a      	add	r3, pc, #168	; (adr r3, 800f8e0 <__ieee754_acos+0x2d0>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fd44 	bl	80002c8 <__aeabi_dsub>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fef8 	bl	8000638 <__aeabi_dmul>
 800f848:	4b2e      	ldr	r3, [pc, #184]	; (800f904 <__ieee754_acos+0x2f4>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f7f0 fd3e 	bl	80002cc <__adddf3>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4640      	mov	r0, r8
 800f856:	4649      	mov	r1, r9
 800f858:	f7f1 f818 	bl	800088c <__aeabi_ddiv>
 800f85c:	4632      	mov	r2, r6
 800f85e:	463b      	mov	r3, r7
 800f860:	f7f0 feea 	bl	8000638 <__aeabi_dmul>
 800f864:	a320      	add	r3, pc, #128	; (adr r3, 800f8e8 <__ieee754_acos+0x2d8>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	f7f0 fd2d 	bl	80002c8 <__aeabi_dsub>
 800f86e:	4632      	mov	r2, r6
 800f870:	463b      	mov	r3, r7
 800f872:	f7f0 fd2b 	bl	80002cc <__adddf3>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	f7f0 fd27 	bl	80002cc <__adddf3>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	a103      	add	r1, pc, #12	; (adr r1, 800f890 <__ieee754_acos+0x280>)
 800f884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f888:	e76f      	b.n	800f76a <__ieee754_acos+0x15a>
 800f88a:	bf00      	nop
 800f88c:	f3af 8000 	nop.w
 800f890:	54442d18 	.word	0x54442d18
 800f894:	400921fb 	.word	0x400921fb
 800f898:	0dfdf709 	.word	0x0dfdf709
 800f89c:	3f023de1 	.word	0x3f023de1
 800f8a0:	7501b288 	.word	0x7501b288
 800f8a4:	3f49efe0 	.word	0x3f49efe0
 800f8a8:	b5688f3b 	.word	0xb5688f3b
 800f8ac:	3fa48228 	.word	0x3fa48228
 800f8b0:	0e884455 	.word	0x0e884455
 800f8b4:	3fc9c155 	.word	0x3fc9c155
 800f8b8:	03eb6f7d 	.word	0x03eb6f7d
 800f8bc:	3fd4d612 	.word	0x3fd4d612
 800f8c0:	55555555 	.word	0x55555555
 800f8c4:	3fc55555 	.word	0x3fc55555
 800f8c8:	b12e9282 	.word	0xb12e9282
 800f8cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f8d0:	1b8d0159 	.word	0x1b8d0159
 800f8d4:	3fe6066c 	.word	0x3fe6066c
 800f8d8:	9c598ac8 	.word	0x9c598ac8
 800f8dc:	40002ae5 	.word	0x40002ae5
 800f8e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f8e4:	40033a27 	.word	0x40033a27
 800f8e8:	33145c07 	.word	0x33145c07
 800f8ec:	3c91a626 	.word	0x3c91a626
 800f8f0:	54442d18 	.word	0x54442d18
 800f8f4:	3ff921fb 	.word	0x3ff921fb
 800f8f8:	3fefffff 	.word	0x3fefffff
 800f8fc:	3fdfffff 	.word	0x3fdfffff
 800f900:	3c600000 	.word	0x3c600000
 800f904:	3ff00000 	.word	0x3ff00000
 800f908:	3fe00000 	.word	0x3fe00000
 800f90c:	ee10 2a10 	vmov	r2, s0
 800f910:	462b      	mov	r3, r5
 800f912:	496d      	ldr	r1, [pc, #436]	; (800fac8 <__ieee754_acos+0x4b8>)
 800f914:	2000      	movs	r0, #0
 800f916:	f7f0 fcd7 	bl	80002c8 <__aeabi_dsub>
 800f91a:	4b6c      	ldr	r3, [pc, #432]	; (800facc <__ieee754_acos+0x4bc>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	f7f0 fe8b 	bl	8000638 <__aeabi_dmul>
 800f922:	4604      	mov	r4, r0
 800f924:	460d      	mov	r5, r1
 800f926:	ec45 4b10 	vmov	d0, r4, r5
 800f92a:	f001 f8df 	bl	8010aec <__ieee754_sqrt>
 800f92e:	a34e      	add	r3, pc, #312	; (adr r3, 800fa68 <__ieee754_acos+0x458>)
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	4620      	mov	r0, r4
 800f936:	4629      	mov	r1, r5
 800f938:	ec59 8b10 	vmov	r8, r9, d0
 800f93c:	f7f0 fe7c 	bl	8000638 <__aeabi_dmul>
 800f940:	a34b      	add	r3, pc, #300	; (adr r3, 800fa70 <__ieee754_acos+0x460>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	f7f0 fcc1 	bl	80002cc <__adddf3>
 800f94a:	4622      	mov	r2, r4
 800f94c:	462b      	mov	r3, r5
 800f94e:	f7f0 fe73 	bl	8000638 <__aeabi_dmul>
 800f952:	a349      	add	r3, pc, #292	; (adr r3, 800fa78 <__ieee754_acos+0x468>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	f7f0 fcb6 	bl	80002c8 <__aeabi_dsub>
 800f95c:	4622      	mov	r2, r4
 800f95e:	462b      	mov	r3, r5
 800f960:	f7f0 fe6a 	bl	8000638 <__aeabi_dmul>
 800f964:	a346      	add	r3, pc, #280	; (adr r3, 800fa80 <__ieee754_acos+0x470>)
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	f7f0 fcaf 	bl	80002cc <__adddf3>
 800f96e:	4622      	mov	r2, r4
 800f970:	462b      	mov	r3, r5
 800f972:	f7f0 fe61 	bl	8000638 <__aeabi_dmul>
 800f976:	a344      	add	r3, pc, #272	; (adr r3, 800fa88 <__ieee754_acos+0x478>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	f7f0 fca4 	bl	80002c8 <__aeabi_dsub>
 800f980:	4622      	mov	r2, r4
 800f982:	462b      	mov	r3, r5
 800f984:	f7f0 fe58 	bl	8000638 <__aeabi_dmul>
 800f988:	a341      	add	r3, pc, #260	; (adr r3, 800fa90 <__ieee754_acos+0x480>)
 800f98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98e:	f7f0 fc9d 	bl	80002cc <__adddf3>
 800f992:	4622      	mov	r2, r4
 800f994:	462b      	mov	r3, r5
 800f996:	f7f0 fe4f 	bl	8000638 <__aeabi_dmul>
 800f99a:	a33f      	add	r3, pc, #252	; (adr r3, 800fa98 <__ieee754_acos+0x488>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	4682      	mov	sl, r0
 800f9a2:	468b      	mov	fp, r1
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	f7f0 fe46 	bl	8000638 <__aeabi_dmul>
 800f9ac:	a33c      	add	r3, pc, #240	; (adr r3, 800faa0 <__ieee754_acos+0x490>)
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	f7f0 fc89 	bl	80002c8 <__aeabi_dsub>
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	462b      	mov	r3, r5
 800f9ba:	f7f0 fe3d 	bl	8000638 <__aeabi_dmul>
 800f9be:	a33a      	add	r3, pc, #232	; (adr r3, 800faa8 <__ieee754_acos+0x498>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f7f0 fc82 	bl	80002cc <__adddf3>
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	f7f0 fe34 	bl	8000638 <__aeabi_dmul>
 800f9d0:	a337      	add	r3, pc, #220	; (adr r3, 800fab0 <__ieee754_acos+0x4a0>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f7f0 fc77 	bl	80002c8 <__aeabi_dsub>
 800f9da:	4622      	mov	r2, r4
 800f9dc:	462b      	mov	r3, r5
 800f9de:	f7f0 fe2b 	bl	8000638 <__aeabi_dmul>
 800f9e2:	4b39      	ldr	r3, [pc, #228]	; (800fac8 <__ieee754_acos+0x4b8>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f7f0 fc71 	bl	80002cc <__adddf3>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	4650      	mov	r0, sl
 800f9f0:	4659      	mov	r1, fp
 800f9f2:	f7f0 ff4b 	bl	800088c <__aeabi_ddiv>
 800f9f6:	4642      	mov	r2, r8
 800f9f8:	464b      	mov	r3, r9
 800f9fa:	f7f0 fe1d 	bl	8000638 <__aeabi_dmul>
 800f9fe:	2600      	movs	r6, #0
 800fa00:	4682      	mov	sl, r0
 800fa02:	468b      	mov	fp, r1
 800fa04:	4632      	mov	r2, r6
 800fa06:	464b      	mov	r3, r9
 800fa08:	4630      	mov	r0, r6
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	f7f0 fe14 	bl	8000638 <__aeabi_dmul>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4620      	mov	r0, r4
 800fa16:	4629      	mov	r1, r5
 800fa18:	f7f0 fc56 	bl	80002c8 <__aeabi_dsub>
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	4604      	mov	r4, r0
 800fa20:	460d      	mov	r5, r1
 800fa22:	464b      	mov	r3, r9
 800fa24:	4640      	mov	r0, r8
 800fa26:	4649      	mov	r1, r9
 800fa28:	f7f0 fc50 	bl	80002cc <__adddf3>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4620      	mov	r0, r4
 800fa32:	4629      	mov	r1, r5
 800fa34:	f7f0 ff2a 	bl	800088c <__aeabi_ddiv>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4650      	mov	r0, sl
 800fa3e:	4659      	mov	r1, fp
 800fa40:	f7f0 fc44 	bl	80002cc <__adddf3>
 800fa44:	4632      	mov	r2, r6
 800fa46:	464b      	mov	r3, r9
 800fa48:	f7f0 fc40 	bl	80002cc <__adddf3>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	460b      	mov	r3, r1
 800fa50:	f7f0 fc3c 	bl	80002cc <__adddf3>
 800fa54:	e5fe      	b.n	800f654 <__ieee754_acos+0x44>
 800fa56:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fab8 <__ieee754_acos+0x4a8>
 800fa5a:	e5ed      	b.n	800f638 <__ieee754_acos+0x28>
 800fa5c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fac0 <__ieee754_acos+0x4b0>
 800fa60:	e5ea      	b.n	800f638 <__ieee754_acos+0x28>
 800fa62:	bf00      	nop
 800fa64:	f3af 8000 	nop.w
 800fa68:	0dfdf709 	.word	0x0dfdf709
 800fa6c:	3f023de1 	.word	0x3f023de1
 800fa70:	7501b288 	.word	0x7501b288
 800fa74:	3f49efe0 	.word	0x3f49efe0
 800fa78:	b5688f3b 	.word	0xb5688f3b
 800fa7c:	3fa48228 	.word	0x3fa48228
 800fa80:	0e884455 	.word	0x0e884455
 800fa84:	3fc9c155 	.word	0x3fc9c155
 800fa88:	03eb6f7d 	.word	0x03eb6f7d
 800fa8c:	3fd4d612 	.word	0x3fd4d612
 800fa90:	55555555 	.word	0x55555555
 800fa94:	3fc55555 	.word	0x3fc55555
 800fa98:	b12e9282 	.word	0xb12e9282
 800fa9c:	3fb3b8c5 	.word	0x3fb3b8c5
 800faa0:	1b8d0159 	.word	0x1b8d0159
 800faa4:	3fe6066c 	.word	0x3fe6066c
 800faa8:	9c598ac8 	.word	0x9c598ac8
 800faac:	40002ae5 	.word	0x40002ae5
 800fab0:	1c8a2d4b 	.word	0x1c8a2d4b
 800fab4:	40033a27 	.word	0x40033a27
	...
 800fac0:	54442d18 	.word	0x54442d18
 800fac4:	3ff921fb 	.word	0x3ff921fb
 800fac8:	3ff00000 	.word	0x3ff00000
 800facc:	3fe00000 	.word	0x3fe00000

0800fad0 <__ieee754_asin>:
 800fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad4:	ed2d 8b04 	vpush	{d8-d9}
 800fad8:	ec55 4b10 	vmov	r4, r5, d0
 800fadc:	4bcc      	ldr	r3, [pc, #816]	; (800fe10 <__ieee754_asin+0x340>)
 800fade:	b083      	sub	sp, #12
 800fae0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fae4:	4598      	cmp	r8, r3
 800fae6:	9501      	str	r5, [sp, #4]
 800fae8:	dd35      	ble.n	800fb56 <__ieee754_asin+0x86>
 800faea:	ee10 3a10 	vmov	r3, s0
 800faee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800faf2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800faf6:	ea58 0303 	orrs.w	r3, r8, r3
 800fafa:	d117      	bne.n	800fb2c <__ieee754_asin+0x5c>
 800fafc:	a3aa      	add	r3, pc, #680	; (adr r3, 800fda8 <__ieee754_asin+0x2d8>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	ee10 0a10 	vmov	r0, s0
 800fb06:	4629      	mov	r1, r5
 800fb08:	f7f0 fd96 	bl	8000638 <__aeabi_dmul>
 800fb0c:	a3a8      	add	r3, pc, #672	; (adr r3, 800fdb0 <__ieee754_asin+0x2e0>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	4606      	mov	r6, r0
 800fb14:	460f      	mov	r7, r1
 800fb16:	4620      	mov	r0, r4
 800fb18:	4629      	mov	r1, r5
 800fb1a:	f7f0 fd8d 	bl	8000638 <__aeabi_dmul>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4630      	mov	r0, r6
 800fb24:	4639      	mov	r1, r7
 800fb26:	f7f0 fbd1 	bl	80002cc <__adddf3>
 800fb2a:	e00b      	b.n	800fb44 <__ieee754_asin+0x74>
 800fb2c:	ee10 2a10 	vmov	r2, s0
 800fb30:	462b      	mov	r3, r5
 800fb32:	ee10 0a10 	vmov	r0, s0
 800fb36:	4629      	mov	r1, r5
 800fb38:	f7f0 fbc6 	bl	80002c8 <__aeabi_dsub>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	f7f0 fea4 	bl	800088c <__aeabi_ddiv>
 800fb44:	4604      	mov	r4, r0
 800fb46:	460d      	mov	r5, r1
 800fb48:	ec45 4b10 	vmov	d0, r4, r5
 800fb4c:	b003      	add	sp, #12
 800fb4e:	ecbd 8b04 	vpop	{d8-d9}
 800fb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb56:	4baf      	ldr	r3, [pc, #700]	; (800fe14 <__ieee754_asin+0x344>)
 800fb58:	4598      	cmp	r8, r3
 800fb5a:	dc11      	bgt.n	800fb80 <__ieee754_asin+0xb0>
 800fb5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fb60:	f280 80ae 	bge.w	800fcc0 <__ieee754_asin+0x1f0>
 800fb64:	a394      	add	r3, pc, #592	; (adr r3, 800fdb8 <__ieee754_asin+0x2e8>)
 800fb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6a:	ee10 0a10 	vmov	r0, s0
 800fb6e:	4629      	mov	r1, r5
 800fb70:	f7f0 fbac 	bl	80002cc <__adddf3>
 800fb74:	4ba8      	ldr	r3, [pc, #672]	; (800fe18 <__ieee754_asin+0x348>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	f7f0 ffee 	bl	8000b58 <__aeabi_dcmpgt>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d1e3      	bne.n	800fb48 <__ieee754_asin+0x78>
 800fb80:	ec45 4b10 	vmov	d0, r4, r5
 800fb84:	f001 fa38 	bl	8010ff8 <fabs>
 800fb88:	49a3      	ldr	r1, [pc, #652]	; (800fe18 <__ieee754_asin+0x348>)
 800fb8a:	ec53 2b10 	vmov	r2, r3, d0
 800fb8e:	2000      	movs	r0, #0
 800fb90:	f7f0 fb9a 	bl	80002c8 <__aeabi_dsub>
 800fb94:	4ba1      	ldr	r3, [pc, #644]	; (800fe1c <__ieee754_asin+0x34c>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	f7f0 fd4e 	bl	8000638 <__aeabi_dmul>
 800fb9c:	a388      	add	r3, pc, #544	; (adr r3, 800fdc0 <__ieee754_asin+0x2f0>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	4604      	mov	r4, r0
 800fba4:	460d      	mov	r5, r1
 800fba6:	f7f0 fd47 	bl	8000638 <__aeabi_dmul>
 800fbaa:	a387      	add	r3, pc, #540	; (adr r3, 800fdc8 <__ieee754_asin+0x2f8>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f7f0 fb8c 	bl	80002cc <__adddf3>
 800fbb4:	4622      	mov	r2, r4
 800fbb6:	462b      	mov	r3, r5
 800fbb8:	f7f0 fd3e 	bl	8000638 <__aeabi_dmul>
 800fbbc:	a384      	add	r3, pc, #528	; (adr r3, 800fdd0 <__ieee754_asin+0x300>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	f7f0 fb81 	bl	80002c8 <__aeabi_dsub>
 800fbc6:	4622      	mov	r2, r4
 800fbc8:	462b      	mov	r3, r5
 800fbca:	f7f0 fd35 	bl	8000638 <__aeabi_dmul>
 800fbce:	a382      	add	r3, pc, #520	; (adr r3, 800fdd8 <__ieee754_asin+0x308>)
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	f7f0 fb7a 	bl	80002cc <__adddf3>
 800fbd8:	4622      	mov	r2, r4
 800fbda:	462b      	mov	r3, r5
 800fbdc:	f7f0 fd2c 	bl	8000638 <__aeabi_dmul>
 800fbe0:	a37f      	add	r3, pc, #508	; (adr r3, 800fde0 <__ieee754_asin+0x310>)
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f7f0 fb6f 	bl	80002c8 <__aeabi_dsub>
 800fbea:	4622      	mov	r2, r4
 800fbec:	462b      	mov	r3, r5
 800fbee:	f7f0 fd23 	bl	8000638 <__aeabi_dmul>
 800fbf2:	a37d      	add	r3, pc, #500	; (adr r3, 800fde8 <__ieee754_asin+0x318>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	f7f0 fb68 	bl	80002cc <__adddf3>
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	462b      	mov	r3, r5
 800fc00:	f7f0 fd1a 	bl	8000638 <__aeabi_dmul>
 800fc04:	a37a      	add	r3, pc, #488	; (adr r3, 800fdf0 <__ieee754_asin+0x320>)
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	ec41 0b18 	vmov	d8, r0, r1
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	f7f0 fd11 	bl	8000638 <__aeabi_dmul>
 800fc16:	a378      	add	r3, pc, #480	; (adr r3, 800fdf8 <__ieee754_asin+0x328>)
 800fc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1c:	f7f0 fb54 	bl	80002c8 <__aeabi_dsub>
 800fc20:	4622      	mov	r2, r4
 800fc22:	462b      	mov	r3, r5
 800fc24:	f7f0 fd08 	bl	8000638 <__aeabi_dmul>
 800fc28:	a375      	add	r3, pc, #468	; (adr r3, 800fe00 <__ieee754_asin+0x330>)
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	f7f0 fb4d 	bl	80002cc <__adddf3>
 800fc32:	4622      	mov	r2, r4
 800fc34:	462b      	mov	r3, r5
 800fc36:	f7f0 fcff 	bl	8000638 <__aeabi_dmul>
 800fc3a:	a373      	add	r3, pc, #460	; (adr r3, 800fe08 <__ieee754_asin+0x338>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fb42 	bl	80002c8 <__aeabi_dsub>
 800fc44:	4622      	mov	r2, r4
 800fc46:	462b      	mov	r3, r5
 800fc48:	f7f0 fcf6 	bl	8000638 <__aeabi_dmul>
 800fc4c:	4b72      	ldr	r3, [pc, #456]	; (800fe18 <__ieee754_asin+0x348>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f7f0 fb3c 	bl	80002cc <__adddf3>
 800fc54:	ec45 4b10 	vmov	d0, r4, r5
 800fc58:	4606      	mov	r6, r0
 800fc5a:	460f      	mov	r7, r1
 800fc5c:	f000 ff46 	bl	8010aec <__ieee754_sqrt>
 800fc60:	4b6f      	ldr	r3, [pc, #444]	; (800fe20 <__ieee754_asin+0x350>)
 800fc62:	4598      	cmp	r8, r3
 800fc64:	ec5b ab10 	vmov	sl, fp, d0
 800fc68:	f340 80dc 	ble.w	800fe24 <__ieee754_asin+0x354>
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	463b      	mov	r3, r7
 800fc70:	ec51 0b18 	vmov	r0, r1, d8
 800fc74:	f7f0 fe0a 	bl	800088c <__aeabi_ddiv>
 800fc78:	4652      	mov	r2, sl
 800fc7a:	465b      	mov	r3, fp
 800fc7c:	f7f0 fcdc 	bl	8000638 <__aeabi_dmul>
 800fc80:	4652      	mov	r2, sl
 800fc82:	465b      	mov	r3, fp
 800fc84:	f7f0 fb22 	bl	80002cc <__adddf3>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	f7f0 fb1e 	bl	80002cc <__adddf3>
 800fc90:	a347      	add	r3, pc, #284	; (adr r3, 800fdb0 <__ieee754_asin+0x2e0>)
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	f7f0 fb17 	bl	80002c8 <__aeabi_dsub>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	a142      	add	r1, pc, #264	; (adr r1, 800fda8 <__ieee754_asin+0x2d8>)
 800fca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fca4:	f7f0 fb10 	bl	80002c8 <__aeabi_dsub>
 800fca8:	9b01      	ldr	r3, [sp, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	bfdc      	itt	le
 800fcae:	4602      	movle	r2, r0
 800fcb0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	bfdc      	itt	le
 800fcba:	4614      	movle	r4, r2
 800fcbc:	461d      	movle	r5, r3
 800fcbe:	e743      	b.n	800fb48 <__ieee754_asin+0x78>
 800fcc0:	ee10 2a10 	vmov	r2, s0
 800fcc4:	ee10 0a10 	vmov	r0, s0
 800fcc8:	462b      	mov	r3, r5
 800fcca:	4629      	mov	r1, r5
 800fccc:	f7f0 fcb4 	bl	8000638 <__aeabi_dmul>
 800fcd0:	a33b      	add	r3, pc, #236	; (adr r3, 800fdc0 <__ieee754_asin+0x2f0>)
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	460f      	mov	r7, r1
 800fcda:	f7f0 fcad 	bl	8000638 <__aeabi_dmul>
 800fcde:	a33a      	add	r3, pc, #232	; (adr r3, 800fdc8 <__ieee754_asin+0x2f8>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	f7f0 faf2 	bl	80002cc <__adddf3>
 800fce8:	4632      	mov	r2, r6
 800fcea:	463b      	mov	r3, r7
 800fcec:	f7f0 fca4 	bl	8000638 <__aeabi_dmul>
 800fcf0:	a337      	add	r3, pc, #220	; (adr r3, 800fdd0 <__ieee754_asin+0x300>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	f7f0 fae7 	bl	80002c8 <__aeabi_dsub>
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	463b      	mov	r3, r7
 800fcfe:	f7f0 fc9b 	bl	8000638 <__aeabi_dmul>
 800fd02:	a335      	add	r3, pc, #212	; (adr r3, 800fdd8 <__ieee754_asin+0x308>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f7f0 fae0 	bl	80002cc <__adddf3>
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	463b      	mov	r3, r7
 800fd10:	f7f0 fc92 	bl	8000638 <__aeabi_dmul>
 800fd14:	a332      	add	r3, pc, #200	; (adr r3, 800fde0 <__ieee754_asin+0x310>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	f7f0 fad5 	bl	80002c8 <__aeabi_dsub>
 800fd1e:	4632      	mov	r2, r6
 800fd20:	463b      	mov	r3, r7
 800fd22:	f7f0 fc89 	bl	8000638 <__aeabi_dmul>
 800fd26:	a330      	add	r3, pc, #192	; (adr r3, 800fde8 <__ieee754_asin+0x318>)
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	f7f0 face 	bl	80002cc <__adddf3>
 800fd30:	4632      	mov	r2, r6
 800fd32:	463b      	mov	r3, r7
 800fd34:	f7f0 fc80 	bl	8000638 <__aeabi_dmul>
 800fd38:	a32d      	add	r3, pc, #180	; (adr r3, 800fdf0 <__ieee754_asin+0x320>)
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	4680      	mov	r8, r0
 800fd40:	4689      	mov	r9, r1
 800fd42:	4630      	mov	r0, r6
 800fd44:	4639      	mov	r1, r7
 800fd46:	f7f0 fc77 	bl	8000638 <__aeabi_dmul>
 800fd4a:	a32b      	add	r3, pc, #172	; (adr r3, 800fdf8 <__ieee754_asin+0x328>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	f7f0 faba 	bl	80002c8 <__aeabi_dsub>
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	f7f0 fc6e 	bl	8000638 <__aeabi_dmul>
 800fd5c:	a328      	add	r3, pc, #160	; (adr r3, 800fe00 <__ieee754_asin+0x330>)
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	f7f0 fab3 	bl	80002cc <__adddf3>
 800fd66:	4632      	mov	r2, r6
 800fd68:	463b      	mov	r3, r7
 800fd6a:	f7f0 fc65 	bl	8000638 <__aeabi_dmul>
 800fd6e:	a326      	add	r3, pc, #152	; (adr r3, 800fe08 <__ieee754_asin+0x338>)
 800fd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd74:	f7f0 faa8 	bl	80002c8 <__aeabi_dsub>
 800fd78:	4632      	mov	r2, r6
 800fd7a:	463b      	mov	r3, r7
 800fd7c:	f7f0 fc5c 	bl	8000638 <__aeabi_dmul>
 800fd80:	4b25      	ldr	r3, [pc, #148]	; (800fe18 <__ieee754_asin+0x348>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	f7f0 faa2 	bl	80002cc <__adddf3>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	4649      	mov	r1, r9
 800fd90:	f7f0 fd7c 	bl	800088c <__aeabi_ddiv>
 800fd94:	4622      	mov	r2, r4
 800fd96:	462b      	mov	r3, r5
 800fd98:	f7f0 fc4e 	bl	8000638 <__aeabi_dmul>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4620      	mov	r0, r4
 800fda2:	4629      	mov	r1, r5
 800fda4:	e6bf      	b.n	800fb26 <__ieee754_asin+0x56>
 800fda6:	bf00      	nop
 800fda8:	54442d18 	.word	0x54442d18
 800fdac:	3ff921fb 	.word	0x3ff921fb
 800fdb0:	33145c07 	.word	0x33145c07
 800fdb4:	3c91a626 	.word	0x3c91a626
 800fdb8:	8800759c 	.word	0x8800759c
 800fdbc:	7e37e43c 	.word	0x7e37e43c
 800fdc0:	0dfdf709 	.word	0x0dfdf709
 800fdc4:	3f023de1 	.word	0x3f023de1
 800fdc8:	7501b288 	.word	0x7501b288
 800fdcc:	3f49efe0 	.word	0x3f49efe0
 800fdd0:	b5688f3b 	.word	0xb5688f3b
 800fdd4:	3fa48228 	.word	0x3fa48228
 800fdd8:	0e884455 	.word	0x0e884455
 800fddc:	3fc9c155 	.word	0x3fc9c155
 800fde0:	03eb6f7d 	.word	0x03eb6f7d
 800fde4:	3fd4d612 	.word	0x3fd4d612
 800fde8:	55555555 	.word	0x55555555
 800fdec:	3fc55555 	.word	0x3fc55555
 800fdf0:	b12e9282 	.word	0xb12e9282
 800fdf4:	3fb3b8c5 	.word	0x3fb3b8c5
 800fdf8:	1b8d0159 	.word	0x1b8d0159
 800fdfc:	3fe6066c 	.word	0x3fe6066c
 800fe00:	9c598ac8 	.word	0x9c598ac8
 800fe04:	40002ae5 	.word	0x40002ae5
 800fe08:	1c8a2d4b 	.word	0x1c8a2d4b
 800fe0c:	40033a27 	.word	0x40033a27
 800fe10:	3fefffff 	.word	0x3fefffff
 800fe14:	3fdfffff 	.word	0x3fdfffff
 800fe18:	3ff00000 	.word	0x3ff00000
 800fe1c:	3fe00000 	.word	0x3fe00000
 800fe20:	3fef3332 	.word	0x3fef3332
 800fe24:	ee10 2a10 	vmov	r2, s0
 800fe28:	ee10 0a10 	vmov	r0, s0
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	4659      	mov	r1, fp
 800fe30:	f7f0 fa4c 	bl	80002cc <__adddf3>
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	ec41 0b19 	vmov	d9, r0, r1
 800fe3c:	ec51 0b18 	vmov	r0, r1, d8
 800fe40:	f7f0 fd24 	bl	800088c <__aeabi_ddiv>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	ec51 0b19 	vmov	r0, r1, d9
 800fe4c:	f7f0 fbf4 	bl	8000638 <__aeabi_dmul>
 800fe50:	f04f 0800 	mov.w	r8, #0
 800fe54:	4606      	mov	r6, r0
 800fe56:	460f      	mov	r7, r1
 800fe58:	4642      	mov	r2, r8
 800fe5a:	465b      	mov	r3, fp
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4659      	mov	r1, fp
 800fe60:	f7f0 fbea 	bl	8000638 <__aeabi_dmul>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fa2c 	bl	80002c8 <__aeabi_dsub>
 800fe70:	4642      	mov	r2, r8
 800fe72:	4604      	mov	r4, r0
 800fe74:	460d      	mov	r5, r1
 800fe76:	465b      	mov	r3, fp
 800fe78:	4650      	mov	r0, sl
 800fe7a:	4659      	mov	r1, fp
 800fe7c:	f7f0 fa26 	bl	80002cc <__adddf3>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f7f0 fd00 	bl	800088c <__aeabi_ddiv>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	f7f0 fa1c 	bl	80002cc <__adddf3>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	a113      	add	r1, pc, #76	; (adr r1, 800fee8 <__ieee754_asin+0x418>)
 800fe9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe9e:	f7f0 fa13 	bl	80002c8 <__aeabi_dsub>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4630      	mov	r0, r6
 800fea8:	4639      	mov	r1, r7
 800feaa:	f7f0 fa0d 	bl	80002c8 <__aeabi_dsub>
 800feae:	4642      	mov	r2, r8
 800feb0:	4604      	mov	r4, r0
 800feb2:	460d      	mov	r5, r1
 800feb4:	465b      	mov	r3, fp
 800feb6:	4640      	mov	r0, r8
 800feb8:	4659      	mov	r1, fp
 800feba:	f7f0 fa07 	bl	80002cc <__adddf3>
 800febe:	4602      	mov	r2, r0
 800fec0:	460b      	mov	r3, r1
 800fec2:	a10b      	add	r1, pc, #44	; (adr r1, 800fef0 <__ieee754_asin+0x420>)
 800fec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec8:	f7f0 f9fe 	bl	80002c8 <__aeabi_dsub>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	4620      	mov	r0, r4
 800fed2:	4629      	mov	r1, r5
 800fed4:	f7f0 f9f8 	bl	80002c8 <__aeabi_dsub>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	a104      	add	r1, pc, #16	; (adr r1, 800fef0 <__ieee754_asin+0x420>)
 800fede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee2:	e6df      	b.n	800fca4 <__ieee754_asin+0x1d4>
 800fee4:	f3af 8000 	nop.w
 800fee8:	33145c07 	.word	0x33145c07
 800feec:	3c91a626 	.word	0x3c91a626
 800fef0:	54442d18 	.word	0x54442d18
 800fef4:	3fe921fb 	.word	0x3fe921fb

0800fef8 <__ieee754_atan2>:
 800fef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fefc:	ec57 6b11 	vmov	r6, r7, d1
 800ff00:	4273      	negs	r3, r6
 800ff02:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010088 <__ieee754_atan2+0x190>
 800ff06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ff0a:	4333      	orrs	r3, r6
 800ff0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ff10:	4573      	cmp	r3, lr
 800ff12:	ec51 0b10 	vmov	r0, r1, d0
 800ff16:	ee11 8a10 	vmov	r8, s2
 800ff1a:	d80a      	bhi.n	800ff32 <__ieee754_atan2+0x3a>
 800ff1c:	4244      	negs	r4, r0
 800ff1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff22:	4304      	orrs	r4, r0
 800ff24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ff28:	4574      	cmp	r4, lr
 800ff2a:	ee10 9a10 	vmov	r9, s0
 800ff2e:	468c      	mov	ip, r1
 800ff30:	d907      	bls.n	800ff42 <__ieee754_atan2+0x4a>
 800ff32:	4632      	mov	r2, r6
 800ff34:	463b      	mov	r3, r7
 800ff36:	f7f0 f9c9 	bl	80002cc <__adddf3>
 800ff3a:	ec41 0b10 	vmov	d0, r0, r1
 800ff3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ff46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ff4a:	4334      	orrs	r4, r6
 800ff4c:	d103      	bne.n	800ff56 <__ieee754_atan2+0x5e>
 800ff4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff52:	f000 beb1 	b.w	8010cb8 <atan>
 800ff56:	17bc      	asrs	r4, r7, #30
 800ff58:	f004 0402 	and.w	r4, r4, #2
 800ff5c:	ea53 0909 	orrs.w	r9, r3, r9
 800ff60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ff64:	d107      	bne.n	800ff76 <__ieee754_atan2+0x7e>
 800ff66:	2c02      	cmp	r4, #2
 800ff68:	d060      	beq.n	801002c <__ieee754_atan2+0x134>
 800ff6a:	2c03      	cmp	r4, #3
 800ff6c:	d1e5      	bne.n	800ff3a <__ieee754_atan2+0x42>
 800ff6e:	a142      	add	r1, pc, #264	; (adr r1, 8010078 <__ieee754_atan2+0x180>)
 800ff70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff74:	e7e1      	b.n	800ff3a <__ieee754_atan2+0x42>
 800ff76:	ea52 0808 	orrs.w	r8, r2, r8
 800ff7a:	d106      	bne.n	800ff8a <__ieee754_atan2+0x92>
 800ff7c:	f1bc 0f00 	cmp.w	ip, #0
 800ff80:	da5f      	bge.n	8010042 <__ieee754_atan2+0x14a>
 800ff82:	a13f      	add	r1, pc, #252	; (adr r1, 8010080 <__ieee754_atan2+0x188>)
 800ff84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff88:	e7d7      	b.n	800ff3a <__ieee754_atan2+0x42>
 800ff8a:	4572      	cmp	r2, lr
 800ff8c:	d10f      	bne.n	800ffae <__ieee754_atan2+0xb6>
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff94:	d107      	bne.n	800ffa6 <__ieee754_atan2+0xae>
 800ff96:	2c02      	cmp	r4, #2
 800ff98:	d84c      	bhi.n	8010034 <__ieee754_atan2+0x13c>
 800ff9a:	4b35      	ldr	r3, [pc, #212]	; (8010070 <__ieee754_atan2+0x178>)
 800ff9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ffa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ffa4:	e7c9      	b.n	800ff3a <__ieee754_atan2+0x42>
 800ffa6:	2c02      	cmp	r4, #2
 800ffa8:	d848      	bhi.n	801003c <__ieee754_atan2+0x144>
 800ffaa:	4b32      	ldr	r3, [pc, #200]	; (8010074 <__ieee754_atan2+0x17c>)
 800ffac:	e7f6      	b.n	800ff9c <__ieee754_atan2+0xa4>
 800ffae:	4573      	cmp	r3, lr
 800ffb0:	d0e4      	beq.n	800ff7c <__ieee754_atan2+0x84>
 800ffb2:	1a9b      	subs	r3, r3, r2
 800ffb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ffb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ffbc:	da1e      	bge.n	800fffc <__ieee754_atan2+0x104>
 800ffbe:	2f00      	cmp	r7, #0
 800ffc0:	da01      	bge.n	800ffc6 <__ieee754_atan2+0xce>
 800ffc2:	323c      	adds	r2, #60	; 0x3c
 800ffc4:	db1e      	blt.n	8010004 <__ieee754_atan2+0x10c>
 800ffc6:	4632      	mov	r2, r6
 800ffc8:	463b      	mov	r3, r7
 800ffca:	f7f0 fc5f 	bl	800088c <__aeabi_ddiv>
 800ffce:	ec41 0b10 	vmov	d0, r0, r1
 800ffd2:	f001 f811 	bl	8010ff8 <fabs>
 800ffd6:	f000 fe6f 	bl	8010cb8 <atan>
 800ffda:	ec51 0b10 	vmov	r0, r1, d0
 800ffde:	2c01      	cmp	r4, #1
 800ffe0:	d013      	beq.n	801000a <__ieee754_atan2+0x112>
 800ffe2:	2c02      	cmp	r4, #2
 800ffe4:	d015      	beq.n	8010012 <__ieee754_atan2+0x11a>
 800ffe6:	2c00      	cmp	r4, #0
 800ffe8:	d0a7      	beq.n	800ff3a <__ieee754_atan2+0x42>
 800ffea:	a319      	add	r3, pc, #100	; (adr r3, 8010050 <__ieee754_atan2+0x158>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 f96a 	bl	80002c8 <__aeabi_dsub>
 800fff4:	a318      	add	r3, pc, #96	; (adr r3, 8010058 <__ieee754_atan2+0x160>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	e014      	b.n	8010026 <__ieee754_atan2+0x12e>
 800fffc:	a118      	add	r1, pc, #96	; (adr r1, 8010060 <__ieee754_atan2+0x168>)
 800fffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010002:	e7ec      	b.n	800ffde <__ieee754_atan2+0xe6>
 8010004:	2000      	movs	r0, #0
 8010006:	2100      	movs	r1, #0
 8010008:	e7e9      	b.n	800ffde <__ieee754_atan2+0xe6>
 801000a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801000e:	4619      	mov	r1, r3
 8010010:	e793      	b.n	800ff3a <__ieee754_atan2+0x42>
 8010012:	a30f      	add	r3, pc, #60	; (adr r3, 8010050 <__ieee754_atan2+0x158>)
 8010014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010018:	f7f0 f956 	bl	80002c8 <__aeabi_dsub>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	a10d      	add	r1, pc, #52	; (adr r1, 8010058 <__ieee754_atan2+0x160>)
 8010022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010026:	f7f0 f94f 	bl	80002c8 <__aeabi_dsub>
 801002a:	e786      	b.n	800ff3a <__ieee754_atan2+0x42>
 801002c:	a10a      	add	r1, pc, #40	; (adr r1, 8010058 <__ieee754_atan2+0x160>)
 801002e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010032:	e782      	b.n	800ff3a <__ieee754_atan2+0x42>
 8010034:	a10c      	add	r1, pc, #48	; (adr r1, 8010068 <__ieee754_atan2+0x170>)
 8010036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801003a:	e77e      	b.n	800ff3a <__ieee754_atan2+0x42>
 801003c:	2000      	movs	r0, #0
 801003e:	2100      	movs	r1, #0
 8010040:	e77b      	b.n	800ff3a <__ieee754_atan2+0x42>
 8010042:	a107      	add	r1, pc, #28	; (adr r1, 8010060 <__ieee754_atan2+0x168>)
 8010044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010048:	e777      	b.n	800ff3a <__ieee754_atan2+0x42>
 801004a:	bf00      	nop
 801004c:	f3af 8000 	nop.w
 8010050:	33145c07 	.word	0x33145c07
 8010054:	3ca1a626 	.word	0x3ca1a626
 8010058:	54442d18 	.word	0x54442d18
 801005c:	400921fb 	.word	0x400921fb
 8010060:	54442d18 	.word	0x54442d18
 8010064:	3ff921fb 	.word	0x3ff921fb
 8010068:	54442d18 	.word	0x54442d18
 801006c:	3fe921fb 	.word	0x3fe921fb
 8010070:	080116d0 	.word	0x080116d0
 8010074:	080116e8 	.word	0x080116e8
 8010078:	54442d18 	.word	0x54442d18
 801007c:	c00921fb 	.word	0xc00921fb
 8010080:	54442d18 	.word	0x54442d18
 8010084:	bff921fb 	.word	0xbff921fb
 8010088:	7ff00000 	.word	0x7ff00000
 801008c:	00000000 	.word	0x00000000

08010090 <__ieee754_pow>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	ed2d 8b06 	vpush	{d8-d10}
 8010098:	b089      	sub	sp, #36	; 0x24
 801009a:	ed8d 1b00 	vstr	d1, [sp]
 801009e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80100a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80100a6:	ea58 0102 	orrs.w	r1, r8, r2
 80100aa:	ec57 6b10 	vmov	r6, r7, d0
 80100ae:	d115      	bne.n	80100dc <__ieee754_pow+0x4c>
 80100b0:	19b3      	adds	r3, r6, r6
 80100b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80100b6:	4152      	adcs	r2, r2
 80100b8:	4299      	cmp	r1, r3
 80100ba:	4b89      	ldr	r3, [pc, #548]	; (80102e0 <__ieee754_pow+0x250>)
 80100bc:	4193      	sbcs	r3, r2
 80100be:	f080 84d2 	bcs.w	8010a66 <__ieee754_pow+0x9d6>
 80100c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100c6:	4630      	mov	r0, r6
 80100c8:	4639      	mov	r1, r7
 80100ca:	f7f0 f8ff 	bl	80002cc <__adddf3>
 80100ce:	ec41 0b10 	vmov	d0, r0, r1
 80100d2:	b009      	add	sp, #36	; 0x24
 80100d4:	ecbd 8b06 	vpop	{d8-d10}
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	4b81      	ldr	r3, [pc, #516]	; (80102e4 <__ieee754_pow+0x254>)
 80100de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80100e2:	429c      	cmp	r4, r3
 80100e4:	ee10 aa10 	vmov	sl, s0
 80100e8:	463d      	mov	r5, r7
 80100ea:	dc06      	bgt.n	80100fa <__ieee754_pow+0x6a>
 80100ec:	d101      	bne.n	80100f2 <__ieee754_pow+0x62>
 80100ee:	2e00      	cmp	r6, #0
 80100f0:	d1e7      	bne.n	80100c2 <__ieee754_pow+0x32>
 80100f2:	4598      	cmp	r8, r3
 80100f4:	dc01      	bgt.n	80100fa <__ieee754_pow+0x6a>
 80100f6:	d10f      	bne.n	8010118 <__ieee754_pow+0x88>
 80100f8:	b172      	cbz	r2, 8010118 <__ieee754_pow+0x88>
 80100fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80100fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010102:	ea55 050a 	orrs.w	r5, r5, sl
 8010106:	d1dc      	bne.n	80100c2 <__ieee754_pow+0x32>
 8010108:	e9dd 3200 	ldrd	r3, r2, [sp]
 801010c:	18db      	adds	r3, r3, r3
 801010e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010112:	4152      	adcs	r2, r2
 8010114:	429d      	cmp	r5, r3
 8010116:	e7d0      	b.n	80100ba <__ieee754_pow+0x2a>
 8010118:	2d00      	cmp	r5, #0
 801011a:	da3b      	bge.n	8010194 <__ieee754_pow+0x104>
 801011c:	4b72      	ldr	r3, [pc, #456]	; (80102e8 <__ieee754_pow+0x258>)
 801011e:	4598      	cmp	r8, r3
 8010120:	dc51      	bgt.n	80101c6 <__ieee754_pow+0x136>
 8010122:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010126:	4598      	cmp	r8, r3
 8010128:	f340 84ac 	ble.w	8010a84 <__ieee754_pow+0x9f4>
 801012c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010130:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010134:	2b14      	cmp	r3, #20
 8010136:	dd0f      	ble.n	8010158 <__ieee754_pow+0xc8>
 8010138:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801013c:	fa22 f103 	lsr.w	r1, r2, r3
 8010140:	fa01 f303 	lsl.w	r3, r1, r3
 8010144:	4293      	cmp	r3, r2
 8010146:	f040 849d 	bne.w	8010a84 <__ieee754_pow+0x9f4>
 801014a:	f001 0101 	and.w	r1, r1, #1
 801014e:	f1c1 0302 	rsb	r3, r1, #2
 8010152:	9304      	str	r3, [sp, #16]
 8010154:	b182      	cbz	r2, 8010178 <__ieee754_pow+0xe8>
 8010156:	e05f      	b.n	8010218 <__ieee754_pow+0x188>
 8010158:	2a00      	cmp	r2, #0
 801015a:	d15b      	bne.n	8010214 <__ieee754_pow+0x184>
 801015c:	f1c3 0314 	rsb	r3, r3, #20
 8010160:	fa48 f103 	asr.w	r1, r8, r3
 8010164:	fa01 f303 	lsl.w	r3, r1, r3
 8010168:	4543      	cmp	r3, r8
 801016a:	f040 8488 	bne.w	8010a7e <__ieee754_pow+0x9ee>
 801016e:	f001 0101 	and.w	r1, r1, #1
 8010172:	f1c1 0302 	rsb	r3, r1, #2
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	4b5c      	ldr	r3, [pc, #368]	; (80102ec <__ieee754_pow+0x25c>)
 801017a:	4598      	cmp	r8, r3
 801017c:	d132      	bne.n	80101e4 <__ieee754_pow+0x154>
 801017e:	f1b9 0f00 	cmp.w	r9, #0
 8010182:	f280 8478 	bge.w	8010a76 <__ieee754_pow+0x9e6>
 8010186:	4959      	ldr	r1, [pc, #356]	; (80102ec <__ieee754_pow+0x25c>)
 8010188:	4632      	mov	r2, r6
 801018a:	463b      	mov	r3, r7
 801018c:	2000      	movs	r0, #0
 801018e:	f7f0 fb7d 	bl	800088c <__aeabi_ddiv>
 8010192:	e79c      	b.n	80100ce <__ieee754_pow+0x3e>
 8010194:	2300      	movs	r3, #0
 8010196:	9304      	str	r3, [sp, #16]
 8010198:	2a00      	cmp	r2, #0
 801019a:	d13d      	bne.n	8010218 <__ieee754_pow+0x188>
 801019c:	4b51      	ldr	r3, [pc, #324]	; (80102e4 <__ieee754_pow+0x254>)
 801019e:	4598      	cmp	r8, r3
 80101a0:	d1ea      	bne.n	8010178 <__ieee754_pow+0xe8>
 80101a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80101a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80101aa:	ea53 030a 	orrs.w	r3, r3, sl
 80101ae:	f000 845a 	beq.w	8010a66 <__ieee754_pow+0x9d6>
 80101b2:	4b4f      	ldr	r3, [pc, #316]	; (80102f0 <__ieee754_pow+0x260>)
 80101b4:	429c      	cmp	r4, r3
 80101b6:	dd08      	ble.n	80101ca <__ieee754_pow+0x13a>
 80101b8:	f1b9 0f00 	cmp.w	r9, #0
 80101bc:	f2c0 8457 	blt.w	8010a6e <__ieee754_pow+0x9de>
 80101c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101c4:	e783      	b.n	80100ce <__ieee754_pow+0x3e>
 80101c6:	2302      	movs	r3, #2
 80101c8:	e7e5      	b.n	8010196 <__ieee754_pow+0x106>
 80101ca:	f1b9 0f00 	cmp.w	r9, #0
 80101ce:	f04f 0000 	mov.w	r0, #0
 80101d2:	f04f 0100 	mov.w	r1, #0
 80101d6:	f6bf af7a 	bge.w	80100ce <__ieee754_pow+0x3e>
 80101da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80101de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80101e2:	e774      	b.n	80100ce <__ieee754_pow+0x3e>
 80101e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80101e8:	d106      	bne.n	80101f8 <__ieee754_pow+0x168>
 80101ea:	4632      	mov	r2, r6
 80101ec:	463b      	mov	r3, r7
 80101ee:	4630      	mov	r0, r6
 80101f0:	4639      	mov	r1, r7
 80101f2:	f7f0 fa21 	bl	8000638 <__aeabi_dmul>
 80101f6:	e76a      	b.n	80100ce <__ieee754_pow+0x3e>
 80101f8:	4b3e      	ldr	r3, [pc, #248]	; (80102f4 <__ieee754_pow+0x264>)
 80101fa:	4599      	cmp	r9, r3
 80101fc:	d10c      	bne.n	8010218 <__ieee754_pow+0x188>
 80101fe:	2d00      	cmp	r5, #0
 8010200:	db0a      	blt.n	8010218 <__ieee754_pow+0x188>
 8010202:	ec47 6b10 	vmov	d0, r6, r7
 8010206:	b009      	add	sp, #36	; 0x24
 8010208:	ecbd 8b06 	vpop	{d8-d10}
 801020c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010210:	f000 bc6c 	b.w	8010aec <__ieee754_sqrt>
 8010214:	2300      	movs	r3, #0
 8010216:	9304      	str	r3, [sp, #16]
 8010218:	ec47 6b10 	vmov	d0, r6, r7
 801021c:	f000 feec 	bl	8010ff8 <fabs>
 8010220:	ec51 0b10 	vmov	r0, r1, d0
 8010224:	f1ba 0f00 	cmp.w	sl, #0
 8010228:	d129      	bne.n	801027e <__ieee754_pow+0x1ee>
 801022a:	b124      	cbz	r4, 8010236 <__ieee754_pow+0x1a6>
 801022c:	4b2f      	ldr	r3, [pc, #188]	; (80102ec <__ieee754_pow+0x25c>)
 801022e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010232:	429a      	cmp	r2, r3
 8010234:	d123      	bne.n	801027e <__ieee754_pow+0x1ee>
 8010236:	f1b9 0f00 	cmp.w	r9, #0
 801023a:	da05      	bge.n	8010248 <__ieee754_pow+0x1b8>
 801023c:	4602      	mov	r2, r0
 801023e:	460b      	mov	r3, r1
 8010240:	2000      	movs	r0, #0
 8010242:	492a      	ldr	r1, [pc, #168]	; (80102ec <__ieee754_pow+0x25c>)
 8010244:	f7f0 fb22 	bl	800088c <__aeabi_ddiv>
 8010248:	2d00      	cmp	r5, #0
 801024a:	f6bf af40 	bge.w	80100ce <__ieee754_pow+0x3e>
 801024e:	9b04      	ldr	r3, [sp, #16]
 8010250:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010254:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010258:	4323      	orrs	r3, r4
 801025a:	d108      	bne.n	801026e <__ieee754_pow+0x1de>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	4610      	mov	r0, r2
 8010262:	4619      	mov	r1, r3
 8010264:	f7f0 f830 	bl	80002c8 <__aeabi_dsub>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	e78f      	b.n	801018e <__ieee754_pow+0xfe>
 801026e:	9b04      	ldr	r3, [sp, #16]
 8010270:	2b01      	cmp	r3, #1
 8010272:	f47f af2c 	bne.w	80100ce <__ieee754_pow+0x3e>
 8010276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801027a:	4619      	mov	r1, r3
 801027c:	e727      	b.n	80100ce <__ieee754_pow+0x3e>
 801027e:	0feb      	lsrs	r3, r5, #31
 8010280:	3b01      	subs	r3, #1
 8010282:	9306      	str	r3, [sp, #24]
 8010284:	9a06      	ldr	r2, [sp, #24]
 8010286:	9b04      	ldr	r3, [sp, #16]
 8010288:	4313      	orrs	r3, r2
 801028a:	d102      	bne.n	8010292 <__ieee754_pow+0x202>
 801028c:	4632      	mov	r2, r6
 801028e:	463b      	mov	r3, r7
 8010290:	e7e6      	b.n	8010260 <__ieee754_pow+0x1d0>
 8010292:	4b19      	ldr	r3, [pc, #100]	; (80102f8 <__ieee754_pow+0x268>)
 8010294:	4598      	cmp	r8, r3
 8010296:	f340 80fb 	ble.w	8010490 <__ieee754_pow+0x400>
 801029a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801029e:	4598      	cmp	r8, r3
 80102a0:	4b13      	ldr	r3, [pc, #76]	; (80102f0 <__ieee754_pow+0x260>)
 80102a2:	dd0c      	ble.n	80102be <__ieee754_pow+0x22e>
 80102a4:	429c      	cmp	r4, r3
 80102a6:	dc0f      	bgt.n	80102c8 <__ieee754_pow+0x238>
 80102a8:	f1b9 0f00 	cmp.w	r9, #0
 80102ac:	da0f      	bge.n	80102ce <__ieee754_pow+0x23e>
 80102ae:	2000      	movs	r0, #0
 80102b0:	b009      	add	sp, #36	; 0x24
 80102b2:	ecbd 8b06 	vpop	{d8-d10}
 80102b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ba:	f000 bcf3 	b.w	8010ca4 <__math_oflow>
 80102be:	429c      	cmp	r4, r3
 80102c0:	dbf2      	blt.n	80102a8 <__ieee754_pow+0x218>
 80102c2:	4b0a      	ldr	r3, [pc, #40]	; (80102ec <__ieee754_pow+0x25c>)
 80102c4:	429c      	cmp	r4, r3
 80102c6:	dd19      	ble.n	80102fc <__ieee754_pow+0x26c>
 80102c8:	f1b9 0f00 	cmp.w	r9, #0
 80102cc:	dcef      	bgt.n	80102ae <__ieee754_pow+0x21e>
 80102ce:	2000      	movs	r0, #0
 80102d0:	b009      	add	sp, #36	; 0x24
 80102d2:	ecbd 8b06 	vpop	{d8-d10}
 80102d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102da:	f000 bcda 	b.w	8010c92 <__math_uflow>
 80102de:	bf00      	nop
 80102e0:	fff00000 	.word	0xfff00000
 80102e4:	7ff00000 	.word	0x7ff00000
 80102e8:	433fffff 	.word	0x433fffff
 80102ec:	3ff00000 	.word	0x3ff00000
 80102f0:	3fefffff 	.word	0x3fefffff
 80102f4:	3fe00000 	.word	0x3fe00000
 80102f8:	41e00000 	.word	0x41e00000
 80102fc:	4b60      	ldr	r3, [pc, #384]	; (8010480 <__ieee754_pow+0x3f0>)
 80102fe:	2200      	movs	r2, #0
 8010300:	f7ef ffe2 	bl	80002c8 <__aeabi_dsub>
 8010304:	a354      	add	r3, pc, #336	; (adr r3, 8010458 <__ieee754_pow+0x3c8>)
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	4604      	mov	r4, r0
 801030c:	460d      	mov	r5, r1
 801030e:	f7f0 f993 	bl	8000638 <__aeabi_dmul>
 8010312:	a353      	add	r3, pc, #332	; (adr r3, 8010460 <__ieee754_pow+0x3d0>)
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	4606      	mov	r6, r0
 801031a:	460f      	mov	r7, r1
 801031c:	4620      	mov	r0, r4
 801031e:	4629      	mov	r1, r5
 8010320:	f7f0 f98a 	bl	8000638 <__aeabi_dmul>
 8010324:	4b57      	ldr	r3, [pc, #348]	; (8010484 <__ieee754_pow+0x3f4>)
 8010326:	4682      	mov	sl, r0
 8010328:	468b      	mov	fp, r1
 801032a:	2200      	movs	r2, #0
 801032c:	4620      	mov	r0, r4
 801032e:	4629      	mov	r1, r5
 8010330:	f7f0 f982 	bl	8000638 <__aeabi_dmul>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	a14b      	add	r1, pc, #300	; (adr r1, 8010468 <__ieee754_pow+0x3d8>)
 801033a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801033e:	f7ef ffc3 	bl	80002c8 <__aeabi_dsub>
 8010342:	4622      	mov	r2, r4
 8010344:	462b      	mov	r3, r5
 8010346:	f7f0 f977 	bl	8000638 <__aeabi_dmul>
 801034a:	4602      	mov	r2, r0
 801034c:	460b      	mov	r3, r1
 801034e:	2000      	movs	r0, #0
 8010350:	494d      	ldr	r1, [pc, #308]	; (8010488 <__ieee754_pow+0x3f8>)
 8010352:	f7ef ffb9 	bl	80002c8 <__aeabi_dsub>
 8010356:	4622      	mov	r2, r4
 8010358:	4680      	mov	r8, r0
 801035a:	4689      	mov	r9, r1
 801035c:	462b      	mov	r3, r5
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	f7f0 f969 	bl	8000638 <__aeabi_dmul>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	4640      	mov	r0, r8
 801036c:	4649      	mov	r1, r9
 801036e:	f7f0 f963 	bl	8000638 <__aeabi_dmul>
 8010372:	a33f      	add	r3, pc, #252	; (adr r3, 8010470 <__ieee754_pow+0x3e0>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	f7f0 f95e 	bl	8000638 <__aeabi_dmul>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4650      	mov	r0, sl
 8010382:	4659      	mov	r1, fp
 8010384:	f7ef ffa0 	bl	80002c8 <__aeabi_dsub>
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	4680      	mov	r8, r0
 801038e:	4689      	mov	r9, r1
 8010390:	4630      	mov	r0, r6
 8010392:	4639      	mov	r1, r7
 8010394:	f7ef ff9a 	bl	80002cc <__adddf3>
 8010398:	2000      	movs	r0, #0
 801039a:	4632      	mov	r2, r6
 801039c:	463b      	mov	r3, r7
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	f7ef ff91 	bl	80002c8 <__aeabi_dsub>
 80103a6:	4602      	mov	r2, r0
 80103a8:	460b      	mov	r3, r1
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7ef ff8b 	bl	80002c8 <__aeabi_dsub>
 80103b2:	9b04      	ldr	r3, [sp, #16]
 80103b4:	9a06      	ldr	r2, [sp, #24]
 80103b6:	3b01      	subs	r3, #1
 80103b8:	4313      	orrs	r3, r2
 80103ba:	4682      	mov	sl, r0
 80103bc:	468b      	mov	fp, r1
 80103be:	f040 81e7 	bne.w	8010790 <__ieee754_pow+0x700>
 80103c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010478 <__ieee754_pow+0x3e8>
 80103c6:	eeb0 8a47 	vmov.f32	s16, s14
 80103ca:	eef0 8a67 	vmov.f32	s17, s15
 80103ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80103d2:	2600      	movs	r6, #0
 80103d4:	4632      	mov	r2, r6
 80103d6:	463b      	mov	r3, r7
 80103d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103dc:	f7ef ff74 	bl	80002c8 <__aeabi_dsub>
 80103e0:	4622      	mov	r2, r4
 80103e2:	462b      	mov	r3, r5
 80103e4:	f7f0 f928 	bl	8000638 <__aeabi_dmul>
 80103e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103ec:	4680      	mov	r8, r0
 80103ee:	4689      	mov	r9, r1
 80103f0:	4650      	mov	r0, sl
 80103f2:	4659      	mov	r1, fp
 80103f4:	f7f0 f920 	bl	8000638 <__aeabi_dmul>
 80103f8:	4602      	mov	r2, r0
 80103fa:	460b      	mov	r3, r1
 80103fc:	4640      	mov	r0, r8
 80103fe:	4649      	mov	r1, r9
 8010400:	f7ef ff64 	bl	80002cc <__adddf3>
 8010404:	4632      	mov	r2, r6
 8010406:	463b      	mov	r3, r7
 8010408:	4680      	mov	r8, r0
 801040a:	4689      	mov	r9, r1
 801040c:	4620      	mov	r0, r4
 801040e:	4629      	mov	r1, r5
 8010410:	f7f0 f912 	bl	8000638 <__aeabi_dmul>
 8010414:	460b      	mov	r3, r1
 8010416:	4604      	mov	r4, r0
 8010418:	460d      	mov	r5, r1
 801041a:	4602      	mov	r2, r0
 801041c:	4649      	mov	r1, r9
 801041e:	4640      	mov	r0, r8
 8010420:	f7ef ff54 	bl	80002cc <__adddf3>
 8010424:	4b19      	ldr	r3, [pc, #100]	; (801048c <__ieee754_pow+0x3fc>)
 8010426:	4299      	cmp	r1, r3
 8010428:	ec45 4b19 	vmov	d9, r4, r5
 801042c:	4606      	mov	r6, r0
 801042e:	460f      	mov	r7, r1
 8010430:	468b      	mov	fp, r1
 8010432:	f340 82f1 	ble.w	8010a18 <__ieee754_pow+0x988>
 8010436:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801043a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801043e:	4303      	orrs	r3, r0
 8010440:	f000 81e4 	beq.w	801080c <__ieee754_pow+0x77c>
 8010444:	ec51 0b18 	vmov	r0, r1, d8
 8010448:	2200      	movs	r2, #0
 801044a:	2300      	movs	r3, #0
 801044c:	f7f0 fb66 	bl	8000b1c <__aeabi_dcmplt>
 8010450:	3800      	subs	r0, #0
 8010452:	bf18      	it	ne
 8010454:	2001      	movne	r0, #1
 8010456:	e72b      	b.n	80102b0 <__ieee754_pow+0x220>
 8010458:	60000000 	.word	0x60000000
 801045c:	3ff71547 	.word	0x3ff71547
 8010460:	f85ddf44 	.word	0xf85ddf44
 8010464:	3e54ae0b 	.word	0x3e54ae0b
 8010468:	55555555 	.word	0x55555555
 801046c:	3fd55555 	.word	0x3fd55555
 8010470:	652b82fe 	.word	0x652b82fe
 8010474:	3ff71547 	.word	0x3ff71547
 8010478:	00000000 	.word	0x00000000
 801047c:	bff00000 	.word	0xbff00000
 8010480:	3ff00000 	.word	0x3ff00000
 8010484:	3fd00000 	.word	0x3fd00000
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	408fffff 	.word	0x408fffff
 8010490:	4bd5      	ldr	r3, [pc, #852]	; (80107e8 <__ieee754_pow+0x758>)
 8010492:	402b      	ands	r3, r5
 8010494:	2200      	movs	r2, #0
 8010496:	b92b      	cbnz	r3, 80104a4 <__ieee754_pow+0x414>
 8010498:	4bd4      	ldr	r3, [pc, #848]	; (80107ec <__ieee754_pow+0x75c>)
 801049a:	f7f0 f8cd 	bl	8000638 <__aeabi_dmul>
 801049e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80104a2:	460c      	mov	r4, r1
 80104a4:	1523      	asrs	r3, r4, #20
 80104a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80104aa:	4413      	add	r3, r2
 80104ac:	9305      	str	r3, [sp, #20]
 80104ae:	4bd0      	ldr	r3, [pc, #832]	; (80107f0 <__ieee754_pow+0x760>)
 80104b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80104b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80104b8:	429c      	cmp	r4, r3
 80104ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80104be:	dd08      	ble.n	80104d2 <__ieee754_pow+0x442>
 80104c0:	4bcc      	ldr	r3, [pc, #816]	; (80107f4 <__ieee754_pow+0x764>)
 80104c2:	429c      	cmp	r4, r3
 80104c4:	f340 8162 	ble.w	801078c <__ieee754_pow+0x6fc>
 80104c8:	9b05      	ldr	r3, [sp, #20]
 80104ca:	3301      	adds	r3, #1
 80104cc:	9305      	str	r3, [sp, #20]
 80104ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80104d2:	2400      	movs	r4, #0
 80104d4:	00e3      	lsls	r3, r4, #3
 80104d6:	9307      	str	r3, [sp, #28]
 80104d8:	4bc7      	ldr	r3, [pc, #796]	; (80107f8 <__ieee754_pow+0x768>)
 80104da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80104de:	ed93 7b00 	vldr	d7, [r3]
 80104e2:	4629      	mov	r1, r5
 80104e4:	ec53 2b17 	vmov	r2, r3, d7
 80104e8:	eeb0 9a47 	vmov.f32	s18, s14
 80104ec:	eef0 9a67 	vmov.f32	s19, s15
 80104f0:	4682      	mov	sl, r0
 80104f2:	f7ef fee9 	bl	80002c8 <__aeabi_dsub>
 80104f6:	4652      	mov	r2, sl
 80104f8:	4606      	mov	r6, r0
 80104fa:	460f      	mov	r7, r1
 80104fc:	462b      	mov	r3, r5
 80104fe:	ec51 0b19 	vmov	r0, r1, d9
 8010502:	f7ef fee3 	bl	80002cc <__adddf3>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	2000      	movs	r0, #0
 801050c:	49bb      	ldr	r1, [pc, #748]	; (80107fc <__ieee754_pow+0x76c>)
 801050e:	f7f0 f9bd 	bl	800088c <__aeabi_ddiv>
 8010512:	ec41 0b1a 	vmov	d10, r0, r1
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4630      	mov	r0, r6
 801051c:	4639      	mov	r1, r7
 801051e:	f7f0 f88b 	bl	8000638 <__aeabi_dmul>
 8010522:	2300      	movs	r3, #0
 8010524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010528:	9302      	str	r3, [sp, #8]
 801052a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801052e:	46ab      	mov	fp, r5
 8010530:	106d      	asrs	r5, r5, #1
 8010532:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010536:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801053a:	ec41 0b18 	vmov	d8, r0, r1
 801053e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010542:	2200      	movs	r2, #0
 8010544:	4640      	mov	r0, r8
 8010546:	4649      	mov	r1, r9
 8010548:	4614      	mov	r4, r2
 801054a:	461d      	mov	r5, r3
 801054c:	f7f0 f874 	bl	8000638 <__aeabi_dmul>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4630      	mov	r0, r6
 8010556:	4639      	mov	r1, r7
 8010558:	f7ef feb6 	bl	80002c8 <__aeabi_dsub>
 801055c:	ec53 2b19 	vmov	r2, r3, d9
 8010560:	4606      	mov	r6, r0
 8010562:	460f      	mov	r7, r1
 8010564:	4620      	mov	r0, r4
 8010566:	4629      	mov	r1, r5
 8010568:	f7ef feae 	bl	80002c8 <__aeabi_dsub>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	4650      	mov	r0, sl
 8010572:	4659      	mov	r1, fp
 8010574:	f7ef fea8 	bl	80002c8 <__aeabi_dsub>
 8010578:	4642      	mov	r2, r8
 801057a:	464b      	mov	r3, r9
 801057c:	f7f0 f85c 	bl	8000638 <__aeabi_dmul>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4630      	mov	r0, r6
 8010586:	4639      	mov	r1, r7
 8010588:	f7ef fe9e 	bl	80002c8 <__aeabi_dsub>
 801058c:	ec53 2b1a 	vmov	r2, r3, d10
 8010590:	f7f0 f852 	bl	8000638 <__aeabi_dmul>
 8010594:	ec53 2b18 	vmov	r2, r3, d8
 8010598:	ec41 0b19 	vmov	d9, r0, r1
 801059c:	ec51 0b18 	vmov	r0, r1, d8
 80105a0:	f7f0 f84a 	bl	8000638 <__aeabi_dmul>
 80105a4:	a37c      	add	r3, pc, #496	; (adr r3, 8010798 <__ieee754_pow+0x708>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	4604      	mov	r4, r0
 80105ac:	460d      	mov	r5, r1
 80105ae:	f7f0 f843 	bl	8000638 <__aeabi_dmul>
 80105b2:	a37b      	add	r3, pc, #492	; (adr r3, 80107a0 <__ieee754_pow+0x710>)
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	f7ef fe88 	bl	80002cc <__adddf3>
 80105bc:	4622      	mov	r2, r4
 80105be:	462b      	mov	r3, r5
 80105c0:	f7f0 f83a 	bl	8000638 <__aeabi_dmul>
 80105c4:	a378      	add	r3, pc, #480	; (adr r3, 80107a8 <__ieee754_pow+0x718>)
 80105c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ca:	f7ef fe7f 	bl	80002cc <__adddf3>
 80105ce:	4622      	mov	r2, r4
 80105d0:	462b      	mov	r3, r5
 80105d2:	f7f0 f831 	bl	8000638 <__aeabi_dmul>
 80105d6:	a376      	add	r3, pc, #472	; (adr r3, 80107b0 <__ieee754_pow+0x720>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	f7ef fe76 	bl	80002cc <__adddf3>
 80105e0:	4622      	mov	r2, r4
 80105e2:	462b      	mov	r3, r5
 80105e4:	f7f0 f828 	bl	8000638 <__aeabi_dmul>
 80105e8:	a373      	add	r3, pc, #460	; (adr r3, 80107b8 <__ieee754_pow+0x728>)
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	f7ef fe6d 	bl	80002cc <__adddf3>
 80105f2:	4622      	mov	r2, r4
 80105f4:	462b      	mov	r3, r5
 80105f6:	f7f0 f81f 	bl	8000638 <__aeabi_dmul>
 80105fa:	a371      	add	r3, pc, #452	; (adr r3, 80107c0 <__ieee754_pow+0x730>)
 80105fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010600:	f7ef fe64 	bl	80002cc <__adddf3>
 8010604:	4622      	mov	r2, r4
 8010606:	4606      	mov	r6, r0
 8010608:	460f      	mov	r7, r1
 801060a:	462b      	mov	r3, r5
 801060c:	4620      	mov	r0, r4
 801060e:	4629      	mov	r1, r5
 8010610:	f7f0 f812 	bl	8000638 <__aeabi_dmul>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4630      	mov	r0, r6
 801061a:	4639      	mov	r1, r7
 801061c:	f7f0 f80c 	bl	8000638 <__aeabi_dmul>
 8010620:	4642      	mov	r2, r8
 8010622:	4604      	mov	r4, r0
 8010624:	460d      	mov	r5, r1
 8010626:	464b      	mov	r3, r9
 8010628:	ec51 0b18 	vmov	r0, r1, d8
 801062c:	f7ef fe4e 	bl	80002cc <__adddf3>
 8010630:	ec53 2b19 	vmov	r2, r3, d9
 8010634:	f7f0 f800 	bl	8000638 <__aeabi_dmul>
 8010638:	4622      	mov	r2, r4
 801063a:	462b      	mov	r3, r5
 801063c:	f7ef fe46 	bl	80002cc <__adddf3>
 8010640:	4642      	mov	r2, r8
 8010642:	4682      	mov	sl, r0
 8010644:	468b      	mov	fp, r1
 8010646:	464b      	mov	r3, r9
 8010648:	4640      	mov	r0, r8
 801064a:	4649      	mov	r1, r9
 801064c:	f7ef fff4 	bl	8000638 <__aeabi_dmul>
 8010650:	4b6b      	ldr	r3, [pc, #428]	; (8010800 <__ieee754_pow+0x770>)
 8010652:	2200      	movs	r2, #0
 8010654:	4606      	mov	r6, r0
 8010656:	460f      	mov	r7, r1
 8010658:	f7ef fe38 	bl	80002cc <__adddf3>
 801065c:	4652      	mov	r2, sl
 801065e:	465b      	mov	r3, fp
 8010660:	f7ef fe34 	bl	80002cc <__adddf3>
 8010664:	2000      	movs	r0, #0
 8010666:	4604      	mov	r4, r0
 8010668:	460d      	mov	r5, r1
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	4640      	mov	r0, r8
 8010670:	4649      	mov	r1, r9
 8010672:	f7ef ffe1 	bl	8000638 <__aeabi_dmul>
 8010676:	4b62      	ldr	r3, [pc, #392]	; (8010800 <__ieee754_pow+0x770>)
 8010678:	4680      	mov	r8, r0
 801067a:	4689      	mov	r9, r1
 801067c:	2200      	movs	r2, #0
 801067e:	4620      	mov	r0, r4
 8010680:	4629      	mov	r1, r5
 8010682:	f7ef fe21 	bl	80002c8 <__aeabi_dsub>
 8010686:	4632      	mov	r2, r6
 8010688:	463b      	mov	r3, r7
 801068a:	f7ef fe1d 	bl	80002c8 <__aeabi_dsub>
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	4650      	mov	r0, sl
 8010694:	4659      	mov	r1, fp
 8010696:	f7ef fe17 	bl	80002c8 <__aeabi_dsub>
 801069a:	ec53 2b18 	vmov	r2, r3, d8
 801069e:	f7ef ffcb 	bl	8000638 <__aeabi_dmul>
 80106a2:	4622      	mov	r2, r4
 80106a4:	4606      	mov	r6, r0
 80106a6:	460f      	mov	r7, r1
 80106a8:	462b      	mov	r3, r5
 80106aa:	ec51 0b19 	vmov	r0, r1, d9
 80106ae:	f7ef ffc3 	bl	8000638 <__aeabi_dmul>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	4630      	mov	r0, r6
 80106b8:	4639      	mov	r1, r7
 80106ba:	f7ef fe07 	bl	80002cc <__adddf3>
 80106be:	4606      	mov	r6, r0
 80106c0:	460f      	mov	r7, r1
 80106c2:	4602      	mov	r2, r0
 80106c4:	460b      	mov	r3, r1
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7ef fdff 	bl	80002cc <__adddf3>
 80106ce:	a33e      	add	r3, pc, #248	; (adr r3, 80107c8 <__ieee754_pow+0x738>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	2000      	movs	r0, #0
 80106d6:	4604      	mov	r4, r0
 80106d8:	460d      	mov	r5, r1
 80106da:	f7ef ffad 	bl	8000638 <__aeabi_dmul>
 80106de:	4642      	mov	r2, r8
 80106e0:	ec41 0b18 	vmov	d8, r0, r1
 80106e4:	464b      	mov	r3, r9
 80106e6:	4620      	mov	r0, r4
 80106e8:	4629      	mov	r1, r5
 80106ea:	f7ef fded 	bl	80002c8 <__aeabi_dsub>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	4630      	mov	r0, r6
 80106f4:	4639      	mov	r1, r7
 80106f6:	f7ef fde7 	bl	80002c8 <__aeabi_dsub>
 80106fa:	a335      	add	r3, pc, #212	; (adr r3, 80107d0 <__ieee754_pow+0x740>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef ff9a 	bl	8000638 <__aeabi_dmul>
 8010704:	a334      	add	r3, pc, #208	; (adr r3, 80107d8 <__ieee754_pow+0x748>)
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	4606      	mov	r6, r0
 801070c:	460f      	mov	r7, r1
 801070e:	4620      	mov	r0, r4
 8010710:	4629      	mov	r1, r5
 8010712:	f7ef ff91 	bl	8000638 <__aeabi_dmul>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4630      	mov	r0, r6
 801071c:	4639      	mov	r1, r7
 801071e:	f7ef fdd5 	bl	80002cc <__adddf3>
 8010722:	9a07      	ldr	r2, [sp, #28]
 8010724:	4b37      	ldr	r3, [pc, #220]	; (8010804 <__ieee754_pow+0x774>)
 8010726:	4413      	add	r3, r2
 8010728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072c:	f7ef fdce 	bl	80002cc <__adddf3>
 8010730:	4682      	mov	sl, r0
 8010732:	9805      	ldr	r0, [sp, #20]
 8010734:	468b      	mov	fp, r1
 8010736:	f7ef ff15 	bl	8000564 <__aeabi_i2d>
 801073a:	9a07      	ldr	r2, [sp, #28]
 801073c:	4b32      	ldr	r3, [pc, #200]	; (8010808 <__ieee754_pow+0x778>)
 801073e:	4413      	add	r3, r2
 8010740:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010744:	4606      	mov	r6, r0
 8010746:	460f      	mov	r7, r1
 8010748:	4652      	mov	r2, sl
 801074a:	465b      	mov	r3, fp
 801074c:	ec51 0b18 	vmov	r0, r1, d8
 8010750:	f7ef fdbc 	bl	80002cc <__adddf3>
 8010754:	4642      	mov	r2, r8
 8010756:	464b      	mov	r3, r9
 8010758:	f7ef fdb8 	bl	80002cc <__adddf3>
 801075c:	4632      	mov	r2, r6
 801075e:	463b      	mov	r3, r7
 8010760:	f7ef fdb4 	bl	80002cc <__adddf3>
 8010764:	2000      	movs	r0, #0
 8010766:	4632      	mov	r2, r6
 8010768:	463b      	mov	r3, r7
 801076a:	4604      	mov	r4, r0
 801076c:	460d      	mov	r5, r1
 801076e:	f7ef fdab 	bl	80002c8 <__aeabi_dsub>
 8010772:	4642      	mov	r2, r8
 8010774:	464b      	mov	r3, r9
 8010776:	f7ef fda7 	bl	80002c8 <__aeabi_dsub>
 801077a:	ec53 2b18 	vmov	r2, r3, d8
 801077e:	f7ef fda3 	bl	80002c8 <__aeabi_dsub>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	4650      	mov	r0, sl
 8010788:	4659      	mov	r1, fp
 801078a:	e610      	b.n	80103ae <__ieee754_pow+0x31e>
 801078c:	2401      	movs	r4, #1
 801078e:	e6a1      	b.n	80104d4 <__ieee754_pow+0x444>
 8010790:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80107e0 <__ieee754_pow+0x750>
 8010794:	e617      	b.n	80103c6 <__ieee754_pow+0x336>
 8010796:	bf00      	nop
 8010798:	4a454eef 	.word	0x4a454eef
 801079c:	3fca7e28 	.word	0x3fca7e28
 80107a0:	93c9db65 	.word	0x93c9db65
 80107a4:	3fcd864a 	.word	0x3fcd864a
 80107a8:	a91d4101 	.word	0xa91d4101
 80107ac:	3fd17460 	.word	0x3fd17460
 80107b0:	518f264d 	.word	0x518f264d
 80107b4:	3fd55555 	.word	0x3fd55555
 80107b8:	db6fabff 	.word	0xdb6fabff
 80107bc:	3fdb6db6 	.word	0x3fdb6db6
 80107c0:	33333303 	.word	0x33333303
 80107c4:	3fe33333 	.word	0x3fe33333
 80107c8:	e0000000 	.word	0xe0000000
 80107cc:	3feec709 	.word	0x3feec709
 80107d0:	dc3a03fd 	.word	0xdc3a03fd
 80107d4:	3feec709 	.word	0x3feec709
 80107d8:	145b01f5 	.word	0x145b01f5
 80107dc:	be3e2fe0 	.word	0xbe3e2fe0
 80107e0:	00000000 	.word	0x00000000
 80107e4:	3ff00000 	.word	0x3ff00000
 80107e8:	7ff00000 	.word	0x7ff00000
 80107ec:	43400000 	.word	0x43400000
 80107f0:	0003988e 	.word	0x0003988e
 80107f4:	000bb679 	.word	0x000bb679
 80107f8:	08011700 	.word	0x08011700
 80107fc:	3ff00000 	.word	0x3ff00000
 8010800:	40080000 	.word	0x40080000
 8010804:	08011720 	.word	0x08011720
 8010808:	08011710 	.word	0x08011710
 801080c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010ae4 <__ieee754_pow+0xa54>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	4640      	mov	r0, r8
 8010814:	4649      	mov	r1, r9
 8010816:	f7ef fd59 	bl	80002cc <__adddf3>
 801081a:	4622      	mov	r2, r4
 801081c:	ec41 0b1a 	vmov	d10, r0, r1
 8010820:	462b      	mov	r3, r5
 8010822:	4630      	mov	r0, r6
 8010824:	4639      	mov	r1, r7
 8010826:	f7ef fd4f 	bl	80002c8 <__aeabi_dsub>
 801082a:	4602      	mov	r2, r0
 801082c:	460b      	mov	r3, r1
 801082e:	ec51 0b1a 	vmov	r0, r1, d10
 8010832:	f7f0 f991 	bl	8000b58 <__aeabi_dcmpgt>
 8010836:	2800      	cmp	r0, #0
 8010838:	f47f ae04 	bne.w	8010444 <__ieee754_pow+0x3b4>
 801083c:	4aa4      	ldr	r2, [pc, #656]	; (8010ad0 <__ieee754_pow+0xa40>)
 801083e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010842:	4293      	cmp	r3, r2
 8010844:	f340 8108 	ble.w	8010a58 <__ieee754_pow+0x9c8>
 8010848:	151b      	asrs	r3, r3, #20
 801084a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801084e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010852:	fa4a f303 	asr.w	r3, sl, r3
 8010856:	445b      	add	r3, fp
 8010858:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801085c:	4e9d      	ldr	r6, [pc, #628]	; (8010ad4 <__ieee754_pow+0xa44>)
 801085e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010862:	4116      	asrs	r6, r2
 8010864:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010868:	2000      	movs	r0, #0
 801086a:	ea23 0106 	bic.w	r1, r3, r6
 801086e:	f1c2 0214 	rsb	r2, r2, #20
 8010872:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010876:	fa4a fa02 	asr.w	sl, sl, r2
 801087a:	f1bb 0f00 	cmp.w	fp, #0
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	bfb8      	it	lt
 8010888:	f1ca 0a00 	rsblt	sl, sl, #0
 801088c:	f7ef fd1c 	bl	80002c8 <__aeabi_dsub>
 8010890:	ec41 0b19 	vmov	d9, r0, r1
 8010894:	4642      	mov	r2, r8
 8010896:	464b      	mov	r3, r9
 8010898:	ec51 0b19 	vmov	r0, r1, d9
 801089c:	f7ef fd16 	bl	80002cc <__adddf3>
 80108a0:	a37b      	add	r3, pc, #492	; (adr r3, 8010a90 <__ieee754_pow+0xa00>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	2000      	movs	r0, #0
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	f7ef fec4 	bl	8000638 <__aeabi_dmul>
 80108b0:	ec53 2b19 	vmov	r2, r3, d9
 80108b4:	4606      	mov	r6, r0
 80108b6:	460f      	mov	r7, r1
 80108b8:	4620      	mov	r0, r4
 80108ba:	4629      	mov	r1, r5
 80108bc:	f7ef fd04 	bl	80002c8 <__aeabi_dsub>
 80108c0:	4602      	mov	r2, r0
 80108c2:	460b      	mov	r3, r1
 80108c4:	4640      	mov	r0, r8
 80108c6:	4649      	mov	r1, r9
 80108c8:	f7ef fcfe 	bl	80002c8 <__aeabi_dsub>
 80108cc:	a372      	add	r3, pc, #456	; (adr r3, 8010a98 <__ieee754_pow+0xa08>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef feb1 	bl	8000638 <__aeabi_dmul>
 80108d6:	a372      	add	r3, pc, #456	; (adr r3, 8010aa0 <__ieee754_pow+0xa10>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	4680      	mov	r8, r0
 80108de:	4689      	mov	r9, r1
 80108e0:	4620      	mov	r0, r4
 80108e2:	4629      	mov	r1, r5
 80108e4:	f7ef fea8 	bl	8000638 <__aeabi_dmul>
 80108e8:	4602      	mov	r2, r0
 80108ea:	460b      	mov	r3, r1
 80108ec:	4640      	mov	r0, r8
 80108ee:	4649      	mov	r1, r9
 80108f0:	f7ef fcec 	bl	80002cc <__adddf3>
 80108f4:	4604      	mov	r4, r0
 80108f6:	460d      	mov	r5, r1
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	4630      	mov	r0, r6
 80108fe:	4639      	mov	r1, r7
 8010900:	f7ef fce4 	bl	80002cc <__adddf3>
 8010904:	4632      	mov	r2, r6
 8010906:	463b      	mov	r3, r7
 8010908:	4680      	mov	r8, r0
 801090a:	4689      	mov	r9, r1
 801090c:	f7ef fcdc 	bl	80002c8 <__aeabi_dsub>
 8010910:	4602      	mov	r2, r0
 8010912:	460b      	mov	r3, r1
 8010914:	4620      	mov	r0, r4
 8010916:	4629      	mov	r1, r5
 8010918:	f7ef fcd6 	bl	80002c8 <__aeabi_dsub>
 801091c:	4642      	mov	r2, r8
 801091e:	4606      	mov	r6, r0
 8010920:	460f      	mov	r7, r1
 8010922:	464b      	mov	r3, r9
 8010924:	4640      	mov	r0, r8
 8010926:	4649      	mov	r1, r9
 8010928:	f7ef fe86 	bl	8000638 <__aeabi_dmul>
 801092c:	a35e      	add	r3, pc, #376	; (adr r3, 8010aa8 <__ieee754_pow+0xa18>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	4604      	mov	r4, r0
 8010934:	460d      	mov	r5, r1
 8010936:	f7ef fe7f 	bl	8000638 <__aeabi_dmul>
 801093a:	a35d      	add	r3, pc, #372	; (adr r3, 8010ab0 <__ieee754_pow+0xa20>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7ef fcc2 	bl	80002c8 <__aeabi_dsub>
 8010944:	4622      	mov	r2, r4
 8010946:	462b      	mov	r3, r5
 8010948:	f7ef fe76 	bl	8000638 <__aeabi_dmul>
 801094c:	a35a      	add	r3, pc, #360	; (adr r3, 8010ab8 <__ieee754_pow+0xa28>)
 801094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010952:	f7ef fcbb 	bl	80002cc <__adddf3>
 8010956:	4622      	mov	r2, r4
 8010958:	462b      	mov	r3, r5
 801095a:	f7ef fe6d 	bl	8000638 <__aeabi_dmul>
 801095e:	a358      	add	r3, pc, #352	; (adr r3, 8010ac0 <__ieee754_pow+0xa30>)
 8010960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010964:	f7ef fcb0 	bl	80002c8 <__aeabi_dsub>
 8010968:	4622      	mov	r2, r4
 801096a:	462b      	mov	r3, r5
 801096c:	f7ef fe64 	bl	8000638 <__aeabi_dmul>
 8010970:	a355      	add	r3, pc, #340	; (adr r3, 8010ac8 <__ieee754_pow+0xa38>)
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	f7ef fca9 	bl	80002cc <__adddf3>
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	f7ef fe5b 	bl	8000638 <__aeabi_dmul>
 8010982:	4602      	mov	r2, r0
 8010984:	460b      	mov	r3, r1
 8010986:	4640      	mov	r0, r8
 8010988:	4649      	mov	r1, r9
 801098a:	f7ef fc9d 	bl	80002c8 <__aeabi_dsub>
 801098e:	4604      	mov	r4, r0
 8010990:	460d      	mov	r5, r1
 8010992:	4602      	mov	r2, r0
 8010994:	460b      	mov	r3, r1
 8010996:	4640      	mov	r0, r8
 8010998:	4649      	mov	r1, r9
 801099a:	f7ef fe4d 	bl	8000638 <__aeabi_dmul>
 801099e:	2200      	movs	r2, #0
 80109a0:	ec41 0b19 	vmov	d9, r0, r1
 80109a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80109a8:	4620      	mov	r0, r4
 80109aa:	4629      	mov	r1, r5
 80109ac:	f7ef fc8c 	bl	80002c8 <__aeabi_dsub>
 80109b0:	4602      	mov	r2, r0
 80109b2:	460b      	mov	r3, r1
 80109b4:	ec51 0b19 	vmov	r0, r1, d9
 80109b8:	f7ef ff68 	bl	800088c <__aeabi_ddiv>
 80109bc:	4632      	mov	r2, r6
 80109be:	4604      	mov	r4, r0
 80109c0:	460d      	mov	r5, r1
 80109c2:	463b      	mov	r3, r7
 80109c4:	4640      	mov	r0, r8
 80109c6:	4649      	mov	r1, r9
 80109c8:	f7ef fe36 	bl	8000638 <__aeabi_dmul>
 80109cc:	4632      	mov	r2, r6
 80109ce:	463b      	mov	r3, r7
 80109d0:	f7ef fc7c 	bl	80002cc <__adddf3>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4620      	mov	r0, r4
 80109da:	4629      	mov	r1, r5
 80109dc:	f7ef fc74 	bl	80002c8 <__aeabi_dsub>
 80109e0:	4642      	mov	r2, r8
 80109e2:	464b      	mov	r3, r9
 80109e4:	f7ef fc70 	bl	80002c8 <__aeabi_dsub>
 80109e8:	460b      	mov	r3, r1
 80109ea:	4602      	mov	r2, r0
 80109ec:	493a      	ldr	r1, [pc, #232]	; (8010ad8 <__ieee754_pow+0xa48>)
 80109ee:	2000      	movs	r0, #0
 80109f0:	f7ef fc6a 	bl	80002c8 <__aeabi_dsub>
 80109f4:	ec41 0b10 	vmov	d0, r0, r1
 80109f8:	ee10 3a90 	vmov	r3, s1
 80109fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a04:	da2b      	bge.n	8010a5e <__ieee754_pow+0x9ce>
 8010a06:	4650      	mov	r0, sl
 8010a08:	f000 fb0a 	bl	8011020 <scalbn>
 8010a0c:	ec51 0b10 	vmov	r0, r1, d0
 8010a10:	ec53 2b18 	vmov	r2, r3, d8
 8010a14:	f7ff bbed 	b.w	80101f2 <__ieee754_pow+0x162>
 8010a18:	4b30      	ldr	r3, [pc, #192]	; (8010adc <__ieee754_pow+0xa4c>)
 8010a1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010a1e:	429e      	cmp	r6, r3
 8010a20:	f77f af0c 	ble.w	801083c <__ieee754_pow+0x7ac>
 8010a24:	4b2e      	ldr	r3, [pc, #184]	; (8010ae0 <__ieee754_pow+0xa50>)
 8010a26:	440b      	add	r3, r1
 8010a28:	4303      	orrs	r3, r0
 8010a2a:	d009      	beq.n	8010a40 <__ieee754_pow+0x9b0>
 8010a2c:	ec51 0b18 	vmov	r0, r1, d8
 8010a30:	2200      	movs	r2, #0
 8010a32:	2300      	movs	r3, #0
 8010a34:	f7f0 f872 	bl	8000b1c <__aeabi_dcmplt>
 8010a38:	3800      	subs	r0, #0
 8010a3a:	bf18      	it	ne
 8010a3c:	2001      	movne	r0, #1
 8010a3e:	e447      	b.n	80102d0 <__ieee754_pow+0x240>
 8010a40:	4622      	mov	r2, r4
 8010a42:	462b      	mov	r3, r5
 8010a44:	f7ef fc40 	bl	80002c8 <__aeabi_dsub>
 8010a48:	4642      	mov	r2, r8
 8010a4a:	464b      	mov	r3, r9
 8010a4c:	f7f0 f87a 	bl	8000b44 <__aeabi_dcmpge>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	f43f aef3 	beq.w	801083c <__ieee754_pow+0x7ac>
 8010a56:	e7e9      	b.n	8010a2c <__ieee754_pow+0x99c>
 8010a58:	f04f 0a00 	mov.w	sl, #0
 8010a5c:	e71a      	b.n	8010894 <__ieee754_pow+0x804>
 8010a5e:	ec51 0b10 	vmov	r0, r1, d0
 8010a62:	4619      	mov	r1, r3
 8010a64:	e7d4      	b.n	8010a10 <__ieee754_pow+0x980>
 8010a66:	491c      	ldr	r1, [pc, #112]	; (8010ad8 <__ieee754_pow+0xa48>)
 8010a68:	2000      	movs	r0, #0
 8010a6a:	f7ff bb30 	b.w	80100ce <__ieee754_pow+0x3e>
 8010a6e:	2000      	movs	r0, #0
 8010a70:	2100      	movs	r1, #0
 8010a72:	f7ff bb2c 	b.w	80100ce <__ieee754_pow+0x3e>
 8010a76:	4630      	mov	r0, r6
 8010a78:	4639      	mov	r1, r7
 8010a7a:	f7ff bb28 	b.w	80100ce <__ieee754_pow+0x3e>
 8010a7e:	9204      	str	r2, [sp, #16]
 8010a80:	f7ff bb7a 	b.w	8010178 <__ieee754_pow+0xe8>
 8010a84:	2300      	movs	r3, #0
 8010a86:	f7ff bb64 	b.w	8010152 <__ieee754_pow+0xc2>
 8010a8a:	bf00      	nop
 8010a8c:	f3af 8000 	nop.w
 8010a90:	00000000 	.word	0x00000000
 8010a94:	3fe62e43 	.word	0x3fe62e43
 8010a98:	fefa39ef 	.word	0xfefa39ef
 8010a9c:	3fe62e42 	.word	0x3fe62e42
 8010aa0:	0ca86c39 	.word	0x0ca86c39
 8010aa4:	be205c61 	.word	0xbe205c61
 8010aa8:	72bea4d0 	.word	0x72bea4d0
 8010aac:	3e663769 	.word	0x3e663769
 8010ab0:	c5d26bf1 	.word	0xc5d26bf1
 8010ab4:	3ebbbd41 	.word	0x3ebbbd41
 8010ab8:	af25de2c 	.word	0xaf25de2c
 8010abc:	3f11566a 	.word	0x3f11566a
 8010ac0:	16bebd93 	.word	0x16bebd93
 8010ac4:	3f66c16c 	.word	0x3f66c16c
 8010ac8:	5555553e 	.word	0x5555553e
 8010acc:	3fc55555 	.word	0x3fc55555
 8010ad0:	3fe00000 	.word	0x3fe00000
 8010ad4:	000fffff 	.word	0x000fffff
 8010ad8:	3ff00000 	.word	0x3ff00000
 8010adc:	4090cbff 	.word	0x4090cbff
 8010ae0:	3f6f3400 	.word	0x3f6f3400
 8010ae4:	652b82fe 	.word	0x652b82fe
 8010ae8:	3c971547 	.word	0x3c971547

08010aec <__ieee754_sqrt>:
 8010aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af0:	ec55 4b10 	vmov	r4, r5, d0
 8010af4:	4e55      	ldr	r6, [pc, #340]	; (8010c4c <__ieee754_sqrt+0x160>)
 8010af6:	43ae      	bics	r6, r5
 8010af8:	ee10 0a10 	vmov	r0, s0
 8010afc:	ee10 3a10 	vmov	r3, s0
 8010b00:	462a      	mov	r2, r5
 8010b02:	4629      	mov	r1, r5
 8010b04:	d110      	bne.n	8010b28 <__ieee754_sqrt+0x3c>
 8010b06:	ee10 2a10 	vmov	r2, s0
 8010b0a:	462b      	mov	r3, r5
 8010b0c:	f7ef fd94 	bl	8000638 <__aeabi_dmul>
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	f7ef fbd8 	bl	80002cc <__adddf3>
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	460d      	mov	r5, r1
 8010b20:	ec45 4b10 	vmov	d0, r4, r5
 8010b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b28:	2d00      	cmp	r5, #0
 8010b2a:	dc10      	bgt.n	8010b4e <__ieee754_sqrt+0x62>
 8010b2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010b30:	4330      	orrs	r0, r6
 8010b32:	d0f5      	beq.n	8010b20 <__ieee754_sqrt+0x34>
 8010b34:	b15d      	cbz	r5, 8010b4e <__ieee754_sqrt+0x62>
 8010b36:	ee10 2a10 	vmov	r2, s0
 8010b3a:	462b      	mov	r3, r5
 8010b3c:	ee10 0a10 	vmov	r0, s0
 8010b40:	f7ef fbc2 	bl	80002c8 <__aeabi_dsub>
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	f7ef fea0 	bl	800088c <__aeabi_ddiv>
 8010b4c:	e7e6      	b.n	8010b1c <__ieee754_sqrt+0x30>
 8010b4e:	1512      	asrs	r2, r2, #20
 8010b50:	d074      	beq.n	8010c3c <__ieee754_sqrt+0x150>
 8010b52:	07d4      	lsls	r4, r2, #31
 8010b54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010b58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010b5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010b60:	bf5e      	ittt	pl
 8010b62:	0fda      	lsrpl	r2, r3, #31
 8010b64:	005b      	lslpl	r3, r3, #1
 8010b66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010b6a:	2400      	movs	r4, #0
 8010b6c:	0fda      	lsrs	r2, r3, #31
 8010b6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010b72:	107f      	asrs	r7, r7, #1
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	2516      	movs	r5, #22
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010b7e:	1886      	adds	r6, r0, r2
 8010b80:	428e      	cmp	r6, r1
 8010b82:	bfde      	ittt	le
 8010b84:	1b89      	suble	r1, r1, r6
 8010b86:	18b0      	addle	r0, r6, r2
 8010b88:	18a4      	addle	r4, r4, r2
 8010b8a:	0049      	lsls	r1, r1, #1
 8010b8c:	3d01      	subs	r5, #1
 8010b8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010b92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010b96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b9a:	d1f0      	bne.n	8010b7e <__ieee754_sqrt+0x92>
 8010b9c:	462a      	mov	r2, r5
 8010b9e:	f04f 0e20 	mov.w	lr, #32
 8010ba2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010ba6:	4281      	cmp	r1, r0
 8010ba8:	eb06 0c05 	add.w	ip, r6, r5
 8010bac:	dc02      	bgt.n	8010bb4 <__ieee754_sqrt+0xc8>
 8010bae:	d113      	bne.n	8010bd8 <__ieee754_sqrt+0xec>
 8010bb0:	459c      	cmp	ip, r3
 8010bb2:	d811      	bhi.n	8010bd8 <__ieee754_sqrt+0xec>
 8010bb4:	f1bc 0f00 	cmp.w	ip, #0
 8010bb8:	eb0c 0506 	add.w	r5, ip, r6
 8010bbc:	da43      	bge.n	8010c46 <__ieee754_sqrt+0x15a>
 8010bbe:	2d00      	cmp	r5, #0
 8010bc0:	db41      	blt.n	8010c46 <__ieee754_sqrt+0x15a>
 8010bc2:	f100 0801 	add.w	r8, r0, #1
 8010bc6:	1a09      	subs	r1, r1, r0
 8010bc8:	459c      	cmp	ip, r3
 8010bca:	bf88      	it	hi
 8010bcc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010bd0:	eba3 030c 	sub.w	r3, r3, ip
 8010bd4:	4432      	add	r2, r6
 8010bd6:	4640      	mov	r0, r8
 8010bd8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010bdc:	f1be 0e01 	subs.w	lr, lr, #1
 8010be0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010be8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010bec:	d1db      	bne.n	8010ba6 <__ieee754_sqrt+0xba>
 8010bee:	430b      	orrs	r3, r1
 8010bf0:	d006      	beq.n	8010c00 <__ieee754_sqrt+0x114>
 8010bf2:	1c50      	adds	r0, r2, #1
 8010bf4:	bf13      	iteet	ne
 8010bf6:	3201      	addne	r2, #1
 8010bf8:	3401      	addeq	r4, #1
 8010bfa:	4672      	moveq	r2, lr
 8010bfc:	f022 0201 	bicne.w	r2, r2, #1
 8010c00:	1063      	asrs	r3, r4, #1
 8010c02:	0852      	lsrs	r2, r2, #1
 8010c04:	07e1      	lsls	r1, r4, #31
 8010c06:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010c0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010c0e:	bf48      	it	mi
 8010c10:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010c14:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010c18:	4614      	mov	r4, r2
 8010c1a:	e781      	b.n	8010b20 <__ieee754_sqrt+0x34>
 8010c1c:	0ad9      	lsrs	r1, r3, #11
 8010c1e:	3815      	subs	r0, #21
 8010c20:	055b      	lsls	r3, r3, #21
 8010c22:	2900      	cmp	r1, #0
 8010c24:	d0fa      	beq.n	8010c1c <__ieee754_sqrt+0x130>
 8010c26:	02cd      	lsls	r5, r1, #11
 8010c28:	d50a      	bpl.n	8010c40 <__ieee754_sqrt+0x154>
 8010c2a:	f1c2 0420 	rsb	r4, r2, #32
 8010c2e:	fa23 f404 	lsr.w	r4, r3, r4
 8010c32:	1e55      	subs	r5, r2, #1
 8010c34:	4093      	lsls	r3, r2
 8010c36:	4321      	orrs	r1, r4
 8010c38:	1b42      	subs	r2, r0, r5
 8010c3a:	e78a      	b.n	8010b52 <__ieee754_sqrt+0x66>
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	e7f0      	b.n	8010c22 <__ieee754_sqrt+0x136>
 8010c40:	0049      	lsls	r1, r1, #1
 8010c42:	3201      	adds	r2, #1
 8010c44:	e7ef      	b.n	8010c26 <__ieee754_sqrt+0x13a>
 8010c46:	4680      	mov	r8, r0
 8010c48:	e7bd      	b.n	8010bc6 <__ieee754_sqrt+0xda>
 8010c4a:	bf00      	nop
 8010c4c:	7ff00000 	.word	0x7ff00000

08010c50 <__ieee754_sqrtf>:
 8010c50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010c54:	4770      	bx	lr

08010c56 <with_errno>:
 8010c56:	b570      	push	{r4, r5, r6, lr}
 8010c58:	4604      	mov	r4, r0
 8010c5a:	460d      	mov	r5, r1
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	f7f9 fab9 	bl	800a1d4 <__errno>
 8010c62:	4629      	mov	r1, r5
 8010c64:	6006      	str	r6, [r0, #0]
 8010c66:	4620      	mov	r0, r4
 8010c68:	bd70      	pop	{r4, r5, r6, pc}

08010c6a <xflow>:
 8010c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c6c:	4614      	mov	r4, r2
 8010c6e:	461d      	mov	r5, r3
 8010c70:	b108      	cbz	r0, 8010c76 <xflow+0xc>
 8010c72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010c76:	e9cd 2300 	strd	r2, r3, [sp]
 8010c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c7e:	4620      	mov	r0, r4
 8010c80:	4629      	mov	r1, r5
 8010c82:	f7ef fcd9 	bl	8000638 <__aeabi_dmul>
 8010c86:	2222      	movs	r2, #34	; 0x22
 8010c88:	b003      	add	sp, #12
 8010c8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c8e:	f7ff bfe2 	b.w	8010c56 <with_errno>

08010c92 <__math_uflow>:
 8010c92:	b508      	push	{r3, lr}
 8010c94:	2200      	movs	r2, #0
 8010c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c9a:	f7ff ffe6 	bl	8010c6a <xflow>
 8010c9e:	ec41 0b10 	vmov	d0, r0, r1
 8010ca2:	bd08      	pop	{r3, pc}

08010ca4 <__math_oflow>:
 8010ca4:	b508      	push	{r3, lr}
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010cac:	f7ff ffdd 	bl	8010c6a <xflow>
 8010cb0:	ec41 0b10 	vmov	d0, r0, r1
 8010cb4:	bd08      	pop	{r3, pc}
	...

08010cb8 <atan>:
 8010cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	ec55 4b10 	vmov	r4, r5, d0
 8010cc0:	4bc3      	ldr	r3, [pc, #780]	; (8010fd0 <atan+0x318>)
 8010cc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010cc6:	429e      	cmp	r6, r3
 8010cc8:	46ab      	mov	fp, r5
 8010cca:	dd18      	ble.n	8010cfe <atan+0x46>
 8010ccc:	4bc1      	ldr	r3, [pc, #772]	; (8010fd4 <atan+0x31c>)
 8010cce:	429e      	cmp	r6, r3
 8010cd0:	dc01      	bgt.n	8010cd6 <atan+0x1e>
 8010cd2:	d109      	bne.n	8010ce8 <atan+0x30>
 8010cd4:	b144      	cbz	r4, 8010ce8 <atan+0x30>
 8010cd6:	4622      	mov	r2, r4
 8010cd8:	462b      	mov	r3, r5
 8010cda:	4620      	mov	r0, r4
 8010cdc:	4629      	mov	r1, r5
 8010cde:	f7ef faf5 	bl	80002cc <__adddf3>
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	e006      	b.n	8010cf6 <atan+0x3e>
 8010ce8:	f1bb 0f00 	cmp.w	fp, #0
 8010cec:	f300 8131 	bgt.w	8010f52 <atan+0x29a>
 8010cf0:	a59b      	add	r5, pc, #620	; (adr r5, 8010f60 <atan+0x2a8>)
 8010cf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010cf6:	ec45 4b10 	vmov	d0, r4, r5
 8010cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	4bb6      	ldr	r3, [pc, #728]	; (8010fd8 <atan+0x320>)
 8010d00:	429e      	cmp	r6, r3
 8010d02:	dc14      	bgt.n	8010d2e <atan+0x76>
 8010d04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010d08:	429e      	cmp	r6, r3
 8010d0a:	dc0d      	bgt.n	8010d28 <atan+0x70>
 8010d0c:	a396      	add	r3, pc, #600	; (adr r3, 8010f68 <atan+0x2b0>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	ee10 0a10 	vmov	r0, s0
 8010d16:	4629      	mov	r1, r5
 8010d18:	f7ef fad8 	bl	80002cc <__adddf3>
 8010d1c:	4baf      	ldr	r3, [pc, #700]	; (8010fdc <atan+0x324>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f7ef ff1a 	bl	8000b58 <__aeabi_dcmpgt>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d1e6      	bne.n	8010cf6 <atan+0x3e>
 8010d28:	f04f 3aff 	mov.w	sl, #4294967295
 8010d2c:	e02b      	b.n	8010d86 <atan+0xce>
 8010d2e:	f000 f963 	bl	8010ff8 <fabs>
 8010d32:	4bab      	ldr	r3, [pc, #684]	; (8010fe0 <atan+0x328>)
 8010d34:	429e      	cmp	r6, r3
 8010d36:	ec55 4b10 	vmov	r4, r5, d0
 8010d3a:	f300 80bf 	bgt.w	8010ebc <atan+0x204>
 8010d3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010d42:	429e      	cmp	r6, r3
 8010d44:	f300 80a0 	bgt.w	8010e88 <atan+0x1d0>
 8010d48:	ee10 2a10 	vmov	r2, s0
 8010d4c:	ee10 0a10 	vmov	r0, s0
 8010d50:	462b      	mov	r3, r5
 8010d52:	4629      	mov	r1, r5
 8010d54:	f7ef faba 	bl	80002cc <__adddf3>
 8010d58:	4ba0      	ldr	r3, [pc, #640]	; (8010fdc <atan+0x324>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ef fab4 	bl	80002c8 <__aeabi_dsub>
 8010d60:	2200      	movs	r2, #0
 8010d62:	4606      	mov	r6, r0
 8010d64:	460f      	mov	r7, r1
 8010d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7ef faad 	bl	80002cc <__adddf3>
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	4630      	mov	r0, r6
 8010d78:	4639      	mov	r1, r7
 8010d7a:	f7ef fd87 	bl	800088c <__aeabi_ddiv>
 8010d7e:	f04f 0a00 	mov.w	sl, #0
 8010d82:	4604      	mov	r4, r0
 8010d84:	460d      	mov	r5, r1
 8010d86:	4622      	mov	r2, r4
 8010d88:	462b      	mov	r3, r5
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	f7ef fc53 	bl	8000638 <__aeabi_dmul>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4680      	mov	r8, r0
 8010d98:	4689      	mov	r9, r1
 8010d9a:	f7ef fc4d 	bl	8000638 <__aeabi_dmul>
 8010d9e:	a374      	add	r3, pc, #464	; (adr r3, 8010f70 <atan+0x2b8>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	4606      	mov	r6, r0
 8010da6:	460f      	mov	r7, r1
 8010da8:	f7ef fc46 	bl	8000638 <__aeabi_dmul>
 8010dac:	a372      	add	r3, pc, #456	; (adr r3, 8010f78 <atan+0x2c0>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	f7ef fa8b 	bl	80002cc <__adddf3>
 8010db6:	4632      	mov	r2, r6
 8010db8:	463b      	mov	r3, r7
 8010dba:	f7ef fc3d 	bl	8000638 <__aeabi_dmul>
 8010dbe:	a370      	add	r3, pc, #448	; (adr r3, 8010f80 <atan+0x2c8>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f7ef fa82 	bl	80002cc <__adddf3>
 8010dc8:	4632      	mov	r2, r6
 8010dca:	463b      	mov	r3, r7
 8010dcc:	f7ef fc34 	bl	8000638 <__aeabi_dmul>
 8010dd0:	a36d      	add	r3, pc, #436	; (adr r3, 8010f88 <atan+0x2d0>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fa79 	bl	80002cc <__adddf3>
 8010dda:	4632      	mov	r2, r6
 8010ddc:	463b      	mov	r3, r7
 8010dde:	f7ef fc2b 	bl	8000638 <__aeabi_dmul>
 8010de2:	a36b      	add	r3, pc, #428	; (adr r3, 8010f90 <atan+0x2d8>)
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	f7ef fa70 	bl	80002cc <__adddf3>
 8010dec:	4632      	mov	r2, r6
 8010dee:	463b      	mov	r3, r7
 8010df0:	f7ef fc22 	bl	8000638 <__aeabi_dmul>
 8010df4:	a368      	add	r3, pc, #416	; (adr r3, 8010f98 <atan+0x2e0>)
 8010df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfa:	f7ef fa67 	bl	80002cc <__adddf3>
 8010dfe:	4642      	mov	r2, r8
 8010e00:	464b      	mov	r3, r9
 8010e02:	f7ef fc19 	bl	8000638 <__aeabi_dmul>
 8010e06:	a366      	add	r3, pc, #408	; (adr r3, 8010fa0 <atan+0x2e8>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4689      	mov	r9, r1
 8010e10:	4630      	mov	r0, r6
 8010e12:	4639      	mov	r1, r7
 8010e14:	f7ef fc10 	bl	8000638 <__aeabi_dmul>
 8010e18:	a363      	add	r3, pc, #396	; (adr r3, 8010fa8 <atan+0x2f0>)
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	f7ef fa53 	bl	80002c8 <__aeabi_dsub>
 8010e22:	4632      	mov	r2, r6
 8010e24:	463b      	mov	r3, r7
 8010e26:	f7ef fc07 	bl	8000638 <__aeabi_dmul>
 8010e2a:	a361      	add	r3, pc, #388	; (adr r3, 8010fb0 <atan+0x2f8>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	f7ef fa4a 	bl	80002c8 <__aeabi_dsub>
 8010e34:	4632      	mov	r2, r6
 8010e36:	463b      	mov	r3, r7
 8010e38:	f7ef fbfe 	bl	8000638 <__aeabi_dmul>
 8010e3c:	a35e      	add	r3, pc, #376	; (adr r3, 8010fb8 <atan+0x300>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef fa41 	bl	80002c8 <__aeabi_dsub>
 8010e46:	4632      	mov	r2, r6
 8010e48:	463b      	mov	r3, r7
 8010e4a:	f7ef fbf5 	bl	8000638 <__aeabi_dmul>
 8010e4e:	a35c      	add	r3, pc, #368	; (adr r3, 8010fc0 <atan+0x308>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef fa38 	bl	80002c8 <__aeabi_dsub>
 8010e58:	4632      	mov	r2, r6
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	f7ef fbec 	bl	8000638 <__aeabi_dmul>
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4640      	mov	r0, r8
 8010e66:	4649      	mov	r1, r9
 8010e68:	f7ef fa30 	bl	80002cc <__adddf3>
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	462b      	mov	r3, r5
 8010e70:	f7ef fbe2 	bl	8000638 <__aeabi_dmul>
 8010e74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	d14b      	bne.n	8010f16 <atan+0x25e>
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fa21 	bl	80002c8 <__aeabi_dsub>
 8010e86:	e72c      	b.n	8010ce2 <atan+0x2a>
 8010e88:	ee10 0a10 	vmov	r0, s0
 8010e8c:	4b53      	ldr	r3, [pc, #332]	; (8010fdc <atan+0x324>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	4629      	mov	r1, r5
 8010e92:	f7ef fa19 	bl	80002c8 <__aeabi_dsub>
 8010e96:	4b51      	ldr	r3, [pc, #324]	; (8010fdc <atan+0x324>)
 8010e98:	4606      	mov	r6, r0
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	4629      	mov	r1, r5
 8010ea2:	f7ef fa13 	bl	80002cc <__adddf3>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4630      	mov	r0, r6
 8010eac:	4639      	mov	r1, r7
 8010eae:	f7ef fced 	bl	800088c <__aeabi_ddiv>
 8010eb2:	f04f 0a01 	mov.w	sl, #1
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	460d      	mov	r5, r1
 8010eba:	e764      	b.n	8010d86 <atan+0xce>
 8010ebc:	4b49      	ldr	r3, [pc, #292]	; (8010fe4 <atan+0x32c>)
 8010ebe:	429e      	cmp	r6, r3
 8010ec0:	da1d      	bge.n	8010efe <atan+0x246>
 8010ec2:	ee10 0a10 	vmov	r0, s0
 8010ec6:	4b48      	ldr	r3, [pc, #288]	; (8010fe8 <atan+0x330>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4629      	mov	r1, r5
 8010ecc:	f7ef f9fc 	bl	80002c8 <__aeabi_dsub>
 8010ed0:	4b45      	ldr	r3, [pc, #276]	; (8010fe8 <atan+0x330>)
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460f      	mov	r7, r1
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4629      	mov	r1, r5
 8010edc:	f7ef fbac 	bl	8000638 <__aeabi_dmul>
 8010ee0:	4b3e      	ldr	r3, [pc, #248]	; (8010fdc <atan+0x324>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f7ef f9f2 	bl	80002cc <__adddf3>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fccc 	bl	800088c <__aeabi_ddiv>
 8010ef4:	f04f 0a02 	mov.w	sl, #2
 8010ef8:	4604      	mov	r4, r0
 8010efa:	460d      	mov	r5, r1
 8010efc:	e743      	b.n	8010d86 <atan+0xce>
 8010efe:	462b      	mov	r3, r5
 8010f00:	ee10 2a10 	vmov	r2, s0
 8010f04:	4939      	ldr	r1, [pc, #228]	; (8010fec <atan+0x334>)
 8010f06:	2000      	movs	r0, #0
 8010f08:	f7ef fcc0 	bl	800088c <__aeabi_ddiv>
 8010f0c:	f04f 0a03 	mov.w	sl, #3
 8010f10:	4604      	mov	r4, r0
 8010f12:	460d      	mov	r5, r1
 8010f14:	e737      	b.n	8010d86 <atan+0xce>
 8010f16:	4b36      	ldr	r3, [pc, #216]	; (8010ff0 <atan+0x338>)
 8010f18:	4e36      	ldr	r6, [pc, #216]	; (8010ff4 <atan+0x33c>)
 8010f1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010f1e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010f22:	e9da 2300 	ldrd	r2, r3, [sl]
 8010f26:	f7ef f9cf 	bl	80002c8 <__aeabi_dsub>
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	f7ef f9cb 	bl	80002c8 <__aeabi_dsub>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010f3a:	f7ef f9c5 	bl	80002c8 <__aeabi_dsub>
 8010f3e:	f1bb 0f00 	cmp.w	fp, #0
 8010f42:	4604      	mov	r4, r0
 8010f44:	460d      	mov	r5, r1
 8010f46:	f6bf aed6 	bge.w	8010cf6 <atan+0x3e>
 8010f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f4e:	461d      	mov	r5, r3
 8010f50:	e6d1      	b.n	8010cf6 <atan+0x3e>
 8010f52:	a51d      	add	r5, pc, #116	; (adr r5, 8010fc8 <atan+0x310>)
 8010f54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f58:	e6cd      	b.n	8010cf6 <atan+0x3e>
 8010f5a:	bf00      	nop
 8010f5c:	f3af 8000 	nop.w
 8010f60:	54442d18 	.word	0x54442d18
 8010f64:	bff921fb 	.word	0xbff921fb
 8010f68:	8800759c 	.word	0x8800759c
 8010f6c:	7e37e43c 	.word	0x7e37e43c
 8010f70:	e322da11 	.word	0xe322da11
 8010f74:	3f90ad3a 	.word	0x3f90ad3a
 8010f78:	24760deb 	.word	0x24760deb
 8010f7c:	3fa97b4b 	.word	0x3fa97b4b
 8010f80:	a0d03d51 	.word	0xa0d03d51
 8010f84:	3fb10d66 	.word	0x3fb10d66
 8010f88:	c54c206e 	.word	0xc54c206e
 8010f8c:	3fb745cd 	.word	0x3fb745cd
 8010f90:	920083ff 	.word	0x920083ff
 8010f94:	3fc24924 	.word	0x3fc24924
 8010f98:	5555550d 	.word	0x5555550d
 8010f9c:	3fd55555 	.word	0x3fd55555
 8010fa0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010fa4:	bfa2b444 	.word	0xbfa2b444
 8010fa8:	52defd9a 	.word	0x52defd9a
 8010fac:	3fadde2d 	.word	0x3fadde2d
 8010fb0:	af749a6d 	.word	0xaf749a6d
 8010fb4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010fb8:	fe231671 	.word	0xfe231671
 8010fbc:	3fbc71c6 	.word	0x3fbc71c6
 8010fc0:	9998ebc4 	.word	0x9998ebc4
 8010fc4:	3fc99999 	.word	0x3fc99999
 8010fc8:	54442d18 	.word	0x54442d18
 8010fcc:	3ff921fb 	.word	0x3ff921fb
 8010fd0:	440fffff 	.word	0x440fffff
 8010fd4:	7ff00000 	.word	0x7ff00000
 8010fd8:	3fdbffff 	.word	0x3fdbffff
 8010fdc:	3ff00000 	.word	0x3ff00000
 8010fe0:	3ff2ffff 	.word	0x3ff2ffff
 8010fe4:	40038000 	.word	0x40038000
 8010fe8:	3ff80000 	.word	0x3ff80000
 8010fec:	bff00000 	.word	0xbff00000
 8010ff0:	08011750 	.word	0x08011750
 8010ff4:	08011730 	.word	0x08011730

08010ff8 <fabs>:
 8010ff8:	ec51 0b10 	vmov	r0, r1, d0
 8010ffc:	ee10 2a10 	vmov	r2, s0
 8011000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011004:	ec43 2b10 	vmov	d0, r2, r3
 8011008:	4770      	bx	lr

0801100a <finite>:
 801100a:	b082      	sub	sp, #8
 801100c:	ed8d 0b00 	vstr	d0, [sp]
 8011010:	9801      	ldr	r0, [sp, #4]
 8011012:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011016:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801101a:	0fc0      	lsrs	r0, r0, #31
 801101c:	b002      	add	sp, #8
 801101e:	4770      	bx	lr

08011020 <scalbn>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	ec55 4b10 	vmov	r4, r5, d0
 8011026:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801102a:	4606      	mov	r6, r0
 801102c:	462b      	mov	r3, r5
 801102e:	b99a      	cbnz	r2, 8011058 <scalbn+0x38>
 8011030:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011034:	4323      	orrs	r3, r4
 8011036:	d036      	beq.n	80110a6 <scalbn+0x86>
 8011038:	4b39      	ldr	r3, [pc, #228]	; (8011120 <scalbn+0x100>)
 801103a:	4629      	mov	r1, r5
 801103c:	ee10 0a10 	vmov	r0, s0
 8011040:	2200      	movs	r2, #0
 8011042:	f7ef faf9 	bl	8000638 <__aeabi_dmul>
 8011046:	4b37      	ldr	r3, [pc, #220]	; (8011124 <scalbn+0x104>)
 8011048:	429e      	cmp	r6, r3
 801104a:	4604      	mov	r4, r0
 801104c:	460d      	mov	r5, r1
 801104e:	da10      	bge.n	8011072 <scalbn+0x52>
 8011050:	a32b      	add	r3, pc, #172	; (adr r3, 8011100 <scalbn+0xe0>)
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	e03a      	b.n	80110ce <scalbn+0xae>
 8011058:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801105c:	428a      	cmp	r2, r1
 801105e:	d10c      	bne.n	801107a <scalbn+0x5a>
 8011060:	ee10 2a10 	vmov	r2, s0
 8011064:	4620      	mov	r0, r4
 8011066:	4629      	mov	r1, r5
 8011068:	f7ef f930 	bl	80002cc <__adddf3>
 801106c:	4604      	mov	r4, r0
 801106e:	460d      	mov	r5, r1
 8011070:	e019      	b.n	80110a6 <scalbn+0x86>
 8011072:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011076:	460b      	mov	r3, r1
 8011078:	3a36      	subs	r2, #54	; 0x36
 801107a:	4432      	add	r2, r6
 801107c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011080:	428a      	cmp	r2, r1
 8011082:	dd08      	ble.n	8011096 <scalbn+0x76>
 8011084:	2d00      	cmp	r5, #0
 8011086:	a120      	add	r1, pc, #128	; (adr r1, 8011108 <scalbn+0xe8>)
 8011088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801108c:	da1c      	bge.n	80110c8 <scalbn+0xa8>
 801108e:	a120      	add	r1, pc, #128	; (adr r1, 8011110 <scalbn+0xf0>)
 8011090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011094:	e018      	b.n	80110c8 <scalbn+0xa8>
 8011096:	2a00      	cmp	r2, #0
 8011098:	dd08      	ble.n	80110ac <scalbn+0x8c>
 801109a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801109e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80110a6:	ec45 4b10 	vmov	d0, r4, r5
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
 80110ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80110b0:	da19      	bge.n	80110e6 <scalbn+0xc6>
 80110b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80110b6:	429e      	cmp	r6, r3
 80110b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80110bc:	dd0a      	ble.n	80110d4 <scalbn+0xb4>
 80110be:	a112      	add	r1, pc, #72	; (adr r1, 8011108 <scalbn+0xe8>)
 80110c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1e2      	bne.n	801108e <scalbn+0x6e>
 80110c8:	a30f      	add	r3, pc, #60	; (adr r3, 8011108 <scalbn+0xe8>)
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f7ef fab3 	bl	8000638 <__aeabi_dmul>
 80110d2:	e7cb      	b.n	801106c <scalbn+0x4c>
 80110d4:	a10a      	add	r1, pc, #40	; (adr r1, 8011100 <scalbn+0xe0>)
 80110d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d0b8      	beq.n	8011050 <scalbn+0x30>
 80110de:	a10e      	add	r1, pc, #56	; (adr r1, 8011118 <scalbn+0xf8>)
 80110e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110e4:	e7b4      	b.n	8011050 <scalbn+0x30>
 80110e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110ea:	3236      	adds	r2, #54	; 0x36
 80110ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80110f4:	4620      	mov	r0, r4
 80110f6:	4b0c      	ldr	r3, [pc, #48]	; (8011128 <scalbn+0x108>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	e7e8      	b.n	80110ce <scalbn+0xae>
 80110fc:	f3af 8000 	nop.w
 8011100:	c2f8f359 	.word	0xc2f8f359
 8011104:	01a56e1f 	.word	0x01a56e1f
 8011108:	8800759c 	.word	0x8800759c
 801110c:	7e37e43c 	.word	0x7e37e43c
 8011110:	8800759c 	.word	0x8800759c
 8011114:	fe37e43c 	.word	0xfe37e43c
 8011118:	c2f8f359 	.word	0xc2f8f359
 801111c:	81a56e1f 	.word	0x81a56e1f
 8011120:	43500000 	.word	0x43500000
 8011124:	ffff3cb0 	.word	0xffff3cb0
 8011128:	3c900000 	.word	0x3c900000

0801112c <_init>:
 801112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112e:	bf00      	nop
 8011130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011132:	bc08      	pop	{r3}
 8011134:	469e      	mov	lr, r3
 8011136:	4770      	bx	lr

08011138 <_fini>:
 8011138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113a:	bf00      	nop
 801113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801113e:	bc08      	pop	{r3}
 8011140:	469e      	mov	lr, r3
 8011142:	4770      	bx	lr
